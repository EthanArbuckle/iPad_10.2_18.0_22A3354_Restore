void sub_20C30EC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C30EC60(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __sbuf bf;
  ssize_t v12;
  unint64_t p;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __sFILE v19;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v19._p = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, &v19, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        p = (unint64_t)v19._p;
        goto LABEL_13;
      }
    }
    else
    {
      v19._r = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19._r))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    v19._r = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19._r, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    p = v19._r;
    v19._p = (unsigned __int8 *)v19._r;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (p <= v15 ? (v16 = p << 7 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19._r = "usd/crateFile.cpp";
      *(_QWORD *)&v19._flags = "_ReadUncompressedArray";
      v19._bf._base = (unsigned __int8 *)2053;
      *(_QWORD *)&v19._bf._size = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_PreadStream>, T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
      LOBYTE(v19._lbfsize) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19._r, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", p, p << 7, v10 - v14, v10);
    }
    else
    {
      memset(&v19._r, 0, 128);
      v19._offset = (fpos_t)&v19._r;
      sub_20BF5F980((unint64_t *)a4, p, (__int128 **)&v19._offset);
      sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(*(_QWORD *)a4 << 7), v14 + v8);
    }
    return;
  }
  memset(&v19._r, 0, 40);
  if (&v19._r != (int *)a4)
  {
    sub_20BF5618C(a4);
    bf = v19._bf;
    *(_OWORD *)a4 = *(_OWORD *)&v19._r;
    *(__sbuf *)(a4 + 16) = bf;
    memset(&v19._r, 0, 32);
    *(_QWORD *)(a4 + 32) = *(_QWORD *)&v19._lbfsize;
    *(_QWORD *)&v19._lbfsize = 0;
  }
  sub_20BF5618C((uint64_t)&v19._r);
}

void sub_20C30EE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20C30EE60(_OWORD *a1, int a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  _OWORD v9[8];
  int v10;

  v10 = a2;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::SetDiagonal((uint64_t)v9, 1.0);
  v3 = 0;
  v4 = v9[5];
  a1[4] = v9[4];
  a1[5] = v4;
  v5 = v9[7];
  a1[6] = v9[6];
  a1[7] = v5;
  v6 = v9[1];
  *a1 = v9[0];
  a1[1] = v6;
  v7 = v9[3];
  a1[2] = v9[2];
  a1[3] = v7;
  do
  {
    result = (double)*((char *)&v10 + v3);
    *(double *)a1 = result;
    a1 = (_OWORD *)((char *)a1 + 40);
    ++v3;
  }
  while (v3 != 4);
  return result;
}

__n128 sub_20C30EEEC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C30EF28(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C30EF4C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_20C30EF9C((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C30EF54(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533090))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C30EF90()
{
  return &unk_24C533090;
}

double sub_20C30EF9C(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  int v11;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  v10[2] = v6;
  v10[3] = v7;
  v11 = sub_20C2A2B6C();
  return sub_20C30F018(v5, (uint64_t)v10, v3, v4);
}

double sub_20C30F018(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __n128 __dst[2];
  uint64_t v12;
  __int128 v13[2];
  uint64_t v14;

  if (a3 < 0)
  {
    v12 = 0;
    memset(__dst, 0, sizeof(__dst));
    v6 = *(_OWORD *)(a2 + 16);
    v13[0] = *(_OWORD *)a2;
    v13[1] = v6;
    v14 = *(_QWORD *)(a2 + 32);
    sub_20C30F0F8(a1, v13, a3, (uint64_t)__dst);
    sub_20BF5FD14(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v8 = *(_OWORD *)a2;
    v9 = v5;
    v10 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_20C30EE60(__dst, a3);
    }
    else
    {
      *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v8 + 8, __dst, 0x80uLL);
    }
    *(_QWORD *)&result = sub_20C1D307C(a4, (__int128 *)__dst).n128_u64[0];
  }
  return result;
}

void sub_20C30F0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C30F0F8(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  __int128 __dst;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 *p_dst;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_2549885B0);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2549885B0))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_2549885A8 = *v21;
        __cxa_guard_release(&qword_2549885B0);
      }
      v25 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v25, 8uLL))
          return;
        v9 = v25;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v25 = __dst;
      }
      v11 = v9 << 7;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_2549885A8 || v11 < 0x800 || (BYTE8(v22) & 7) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v27 = 2117;
          *((_QWORD *)&v27 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
          LOBYTE(v28) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, v9 << 7, v17, v15);
        }
        else
        {
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          __dst = 0u;
          v27 = 0u;
          p_dst = &__dst;
          sub_20BF5F980((unint64_t *)a4, v9, &p_dst);
          sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), *(_QWORD *)a4 << 7);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), v9 << 7, v9);
        if (v13)
        {
          *(_QWORD *)&v27 = 0;
          *((_QWORD *)&v27 + 1) = v13;
          *(_QWORD *)&v28 = v12;
          __dst = v25;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v27;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v27 = 0u;
            *(_QWORD *)(a4 + 32) = v28;
            *(_QWORD *)&v28 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v27 = 2109;
          *((_QWORD *)&v27 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
          LOBYTE(v28) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    *(_QWORD *)&v28 = 0;
    __dst = 0u;
    v27 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v27;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v27 = 0u;
      *(_QWORD *)(a4 + 32) = v28;
      *(_QWORD *)&v28 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C30F424(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549885B0);
  _Unwind_Resume(a1);
}

__n128 sub_20C30F474(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5330B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C30F4B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5330B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C30F4D4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C30F52C((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C30F4E4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533110))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C30F520()
{
  return &unk_24C533110;
}

void sub_20C30F52C(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = 0;
  }
  v19 = 0;
  v10.n128_f64[0] = sub_20C30F648(v3, &v17, a2, a3);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v16)
  {
    v14 = (unint64_t *)&v16->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v10);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20C30F62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

double sub_20C30F648(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  double result;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23[2];
  uint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (a3 < 0)
  {
    v24 = 0;
    memset(v23, 0, sizeof(v23));
    v25 = *a2;
    v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v26 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v27 = *((_QWORD *)a2 + 3);
    sub_20C30F908(a1, &v25, a3, (uint64_t)v23);
    v16 = v26;
    if (v26)
    {
      v17 = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    sub_20BF5FD14(a4, v23);
    sub_20BF5618C((uint64_t)v23);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      v12.n128_f64[0] = sub_20C30EE60(v23, a3);
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 128 > v10)
      {
        v28 = "usd/crateFile.cpp";
        v29 = "Read";
        v30 = 770;
        v31 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        v32 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 0x80uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 127)
        {
          v28 = "usd/crateFile.cpp";
          v29 = "Read";
          v30 = 779;
          v31 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          v32 = 0;
          v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 0x80uLL, v11, v22);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, __n128 *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, v23, 128, v9);
        }
      }
    }
    if (v6)
    {
      v20 = (unint64_t *)&v6->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v12);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *(_QWORD *)&result = sub_20C1D307C(a4, (__int128 *)v23).n128_u64[0];
  }
  return result;
}

void sub_20C30F8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C30F908(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48[3];

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v40) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v40, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v40 = "usd/crateFile.cpp";
        *((_QWORD *)&v40 + 1) = "Read";
        *(_QWORD *)&v41 = 770;
        *((_QWORD *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v42) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v40 = "usd/crateFile.cpp";
          *((_QWORD *)&v40 + 1) = "Read";
          *(_QWORD *)&v41 = 779;
          *((_QWORD *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v42) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v48[0]) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v40 = "usd/crateFile.cpp";
        *((_QWORD *)&v40 + 1) = "Read";
        *(_QWORD *)&v41 = 770;
        *((_QWORD *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v42) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v40 = "usd/crateFile.cpp";
          *((_QWORD *)&v40 + 1) = "Read";
          *(_QWORD *)&v41 = 779;
          *((_QWORD *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v42) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 **, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v48, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = LODWORD(v48[0]);
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = v39 << 7;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v40 = "usd/crateFile.cpp";
              *((_QWORD *)&v40 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v41 = 2053;
              *((_QWORD *)&v41 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfMatrix4d]";
              LOBYTE(v42) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v46 = 0u;
              v47 = 0u;
              v44 = 0u;
              v45 = 0u;
              v42 = 0u;
              v43 = 0u;
              v40 = 0u;
              v41 = 0u;
              v48[0] = &v40;
              sub_20BF5F980((unint64_t *)a4, v39, v48);
              sub_20BF5FC60((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = v27 << 7;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v40 = "usd/crateFile.cpp";
                *((_QWORD *)&v40 + 1) = "Read";
                *(_QWORD *)&v41 = 770;
                *((_QWORD *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v42) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v40 = "usd/crateFile.cpp";
                  *((_QWORD *)&v40 + 1) = "Read";
                  *(_QWORD *)&v41 = 779;
                  *((_QWORD *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v42) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  *(_QWORD *)&v42 = 0;
  v40 = 0u;
  v41 = 0u;
  if (&v40 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v41;
    *(_OWORD *)a4 = v40;
    *(_OWORD *)(a4 + 16) = v13;
    v40 = 0u;
    v41 = 0u;
    *(_QWORD *)(a4 + 32) = v42;
    *(_QWORD *)&v42 = 0;
  }
  sub_20BF5618C((uint64_t)&v40);
}

void sub_20C30FEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C30FF1C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533130;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C30FFC8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5331B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C310074(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533230;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C310120(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5332B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C3101D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C310210(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C310234(uint64_t a1, uint64_t a2)
{
  return sub_20C310290(*(uint64_t **)(a1 + 16), *(char ***)(a1 + 8), (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C310248(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533190))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C310284()
{
  return &unk_24C533190;
}

uint64_t sub_20C310290(uint64_t *a1, char **a2, char **a3, uint64_t a4)
{
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v8;
  uint64_t v10;
  _OWORD *v11;
  uint64_t *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  char **v16[2];

  v7 = *(_QWORD *)(a4 + 8);
  if ((v7 & 4) != 0)
    v8 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(a4);
  else
    v8 = *(pxrInternal__aapl__pxrReserved__::VtDictionary **)a4;
  v16[0] = a2;
  v16[1] = a3;
  if (pxrInternal__aapl__pxrReserved__::VtDictionary::empty(v8))
    return 0x401F000000000000;
  v10 = *a1;
  if (!*a1)
  {
    v11 = operator new(0x28uLL);
    *v11 = 0u;
    v11[1] = 0u;
    *((_DWORD *)v11 + 8) = 1065353216;
    sub_20C2B3D54(a1, (uint64_t)v11);
    v10 = *a1;
  }
  v15 = 0;
  v12 = sub_20C310370(v10, (uint64_t *)v8, v8, &v15);
  v13 = v12;
  if (v14)
  {
    v12[3] = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x1F000000000000;
    sub_20C3106D4(v16, v8);
  }
  return v13[3];
}

uint64_t *sub_20C310370(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3, _QWORD *a4)
{
  unint64_t v4;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v10 = bswap64(0x9E3779B97F4A7C55 * sub_20BF4CE60(a2));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if ((pxrInternal__aapl__pxrReserved__::operator==((_QWORD **)i + 2, a2, v9) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20C3105F4(a1, v10, a3, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (uint64_t *)v26[0];
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C3105D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD ***__p, uint64_t a11)
{
  if (__p)
    sub_20C310690((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C3105F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0x20uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)(v10 + 2), a3);
  v10[3] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C310674(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD ***v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C310690(v3, v2);
  _Unwind_Resume(a1);
}

void sub_20C310690(uint64_t a1, _QWORD ***__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF49F14(__p + 2, 0);
  if (__p)
    operator delete(__p);
}

_QWORD *sub_20C3106D4(char ***a1, pxrInternal__aapl__pxrReserved__::VtDictionary *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  char *v14;
  BOOL v15;
  char v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD __src[3];
  char v20[8];

  __src[0] = pxrInternal__aapl__pxrReserved__::VtDictionary::size(this);
  sub_20C2B7248((uint64_t)a1, (char *)__src);
  v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(this);
  v6 = v5;
  v17 = (_QWORD *)v4;
  v18 = v5;
  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtDictionary::end(this);
  v9 = result;
  v10 = v8;
  if (v8)
    v11 = v4 == (_QWORD)result;
  else
    v11 = 1;
  v12 = v11;
  if (v6 != v8 || (v12 & 1) == 0)
  {
    do
    {
      LODWORD(__src[0]) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a1, (unsigned __int8 *)(v4 + 32));
      sub_20C2CE770((uint64_t)a1, (char *)__src);
      __src[0] = a1;
      __src[1] = v4 + 56;
      __src[2] = v20;
      sub_20C3107C8((uint64_t)a1, (uint64_t)__src);
      sub_20C2B7248((uint64_t)a1, v20);
      result = sub_20BF4D2AC(&v17, v13, v14);
      v4 = (uint64_t)v17;
      if (v10)
        v15 = v17 == v9;
      else
        v15 = 1;
      v16 = v15;
    }
    while (v18 != v10 || (v16 & 1) == 0);
  }
  return result;
}

uint64_t sub_20C3107C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t __src;

  v4 = **(_QWORD **)(a1 + 8);
  __src = 0;
  sub_20C2B7248(a1, (char *)&__src);
  **(_QWORD **)(a2 + 16) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue(**(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***)a2, *(const pxrInternal__aapl__pxrReserved__::VtValue **)(a2 + 8));
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *v5;
  v7 = v5[2];
  if (v7 > v4 || v5[4] + v7 < v4)
  {
    sub_20C2B209C(*(_QWORD *)(a1 + 8));
    *v5 = v4;
    v5 += 2;
  }
  *v5 = v4;
  __src = v6 - v4;
  result = sub_20C2B7248(a1, (char *)&__src);
  v9 = *(_QWORD **)(a1 + 8);
  v10 = v9[2];
  if (v10 > v6 || v9[4] + v10 < v6)
  {
    result = sub_20C2B209C((_BOOL8)v9);
    *v9 = v6;
    v9 += 2;
  }
  *v9 = v6;
  return result;
}

__n128 sub_20C3108B8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5331B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3108F4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5331B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C310918(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C3109A8(v5, &v10, v3, v4);
}

uint64_t sub_20C310960(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533210))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31099C()
{
  return &unk_24C533210;
}

void sub_20C3109A8(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;

  v9 = 0;
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) != 0)
  {
    v10 = 0;
    sub_20BF49F14(&v9, 0);
    sub_20BF49F14(&v10, 0);
  }
  else
  {
    *(_QWORD *)&v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C310A48((uint64_t *)&v6, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v9);
  }
  sub_20BF4AB1C(a4, (const void ****)&v9);
  sub_20BF49F14(&v9, 0);
}

void sub_20C310A30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF49F14((_QWORD ***)(v1 - 32), 0);
  _Unwind_Resume(a1);
}

BOOL sub_20C310A48(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t *EmptyToken;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  const std::string *EmptyString;
  int v16;
  uint64_t *v17;
  std::string v19;
  uint64_t v20;
  _QWORD _28[13];

  _28[2] = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v4 = (uint64_t)(a1 + 1);
  if (!sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&v20))
    return 0;
  while (1)
  {
    v5 = v20--;
    v6 = v5 == 0;
    if (!v5)
      break;
    memset(&v19, 0, sizeof(v19));
    LODWORD(_28[0]) = -1;
    EmptyToken = (uint64_t *)sub_20C2CEB84(v4, 0, (__sFILE *)_28);
    if ((_DWORD)EmptyToken)
    {
      v8 = *a1;
      v9 = *(_QWORD *)(*a1 + 144);
      if (LODWORD(_28[0]) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v9) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
        EmptyString = (const std::string *)&qword_254988388;
      }
      else
      {
        v10 = *(unsigned int *)(v9 + 4 * LODWORD(_28[0]));
        v12 = v8 + 120;
        v11 = *(_QWORD *)(v8 + 120);
        if (v10 >= (*(_QWORD *)(v12 + 8) - v11) >> 3)
        {
          EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
          v13 = &qword_2549883A8;
        }
        else
        {
          v13 = (uint64_t *)(v11 + 8 * v10);
        }
        v14 = *v13 & 0xFFFFFFFFFFFFFFF8;
        if (v14)
          EmptyString = (const std::string *)(v14 + 16);
        else
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
      }
      std::string::operator=(&v19, EmptyString);
      _28[1] = 0;
      if (sub_20C310C38(a1, _28))
      {
        v17 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)&v19);
        sub_20BF4A9BC(v17, _28);
        v16 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtDictionary::clear(a2);
        v16 = 1;
      }
      sub_20BF4C2D8((uint64_t)_28);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtDictionary::clear(a2);
      v16 = 1;
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v19.__r_.__value_.__l.__data_);
      if (v16)
        return v6;
    }
    else if (v16)
    {
      return v6;
    }
  }
  return v6;
}

void sub_20C310C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

BOOL sub_20C310C38(uint64_t *a1, _QWORD *a2)
{
  _BOOL8 result;
  uint64_t *v5;
  char v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  sub_20C310D98(a1);
  result = sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&v9);
  if (result)
  {
    v5 = (uint64_t *)sub_20C310DFC();
    sub_20C31114C(v5, &v9, &v9);
    if ((v6 & 1) != 0)
    {
      v8 = *a1;
      v11 = 0;
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v8, v9, (uint64_t)&v10);
      sub_20BF4B5D8(a2, &v10);
      sub_20BF4C2D8((uint64_t)&v10);
      sub_20C3115C4((uint64_t)v5, &v9, bswap64(0x9E3779B97F4A7C55 * v9));
      return 1;
    }
    else
    {
      v10 = "usd/crateFile.cpp";
      v11 = "Read";
      v12 = 1425;
      v13 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::U"
            "sd_CrateFile::_PreadStream>::Read(T &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Pread"
            "Stream, T = pxrInternal__aapl__pxrReserved__::VtValue]";
      v14 = 0;
      v7 = (const char *)(*a1 + 6512);
      if (*(char *)(*a1 + 6535) < 0)
        v7 = *(const char **)v7;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset <%s>: a VtValue claims to recursively contain itself -- returning an empty VtValue instead", v7);
      return 0;
    }
  }
  return result;
}

void sub_20C310D7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C310D98(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = a1[2];
  v4 = 0;
  result = sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&v4);
  if ((_DWORD)result)
  {
    result = pxrInternal__aapl__pxrReserved__::ArchFileAdvise(a1[4], a1[1] + v2, v4, 1);
    a1[2] = v4 + v2;
  }
  return result;
}

uint64_t sub_20C310DFC()
{
  uint64_t *v0;
  uint64_t result;
  void *v2;
  uint64_t (*v3)(_QWORD);
  uint64_t (*v4)(_QWORD);

  v0 = (uint64_t *)off_254740C18();
  result = *v0;
  if (!*v0)
  {
    if ((*(_BYTE *)off_254740C48(&off_254740C48) & 1) == 0)
    {
      v2 = (void *)off_254740C30();
      v4 = v3;
      sub_20C310EB8((uint64_t)v2);
      _tlv_atexit((void (__cdecl *)(void *))sub_20C310EEC, v2);
      *(_BYTE *)v4(&off_254740C48) = 1;
    }
    result = off_254740C30();
    *v0 = result;
  }
  return result;
}

uint64_t sub_20C310EB8(uint64_t a1)
{
  return sub_20C310F24(a1, 0, 0.0, 0.5);
}

uint64_t sub_20C310EEC(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  sub_20BED15B4(&v3);
  return a1;
}

uint64_t sub_20C310F24(uint64_t a1, unint64_t a2, float a3, float a4)
{
  int *v7;
  unint64_t v8;
  float v9;
  std::logic_error *exception;
  unint64_t v12;

  v12 = a2;
  sub_20BED1408((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >> 60)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  sub_20C3110B0((_QWORD *)(a1 + 8), v12);
  v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16))
    v7 = sub_20C311038();
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 10) = 1;
  v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_20C311024(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_20C311038()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25473CA28);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473CA28))
  {
    dword_25473CA18 = 0;
    word_25473CA1C = -1;
    byte_25473CA1E = 1;
    __cxa_atexit((void (*)(void *))sub_20C311134, &dword_25473CA18, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473CA28);
  }
  return &dword_25473CA18;
}

_QWORD *sub_20C3110B0(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE90F0C(a1, a2);
    v4 = a1[1];
    v5 = v4 + 16 * a2;
    do
    {
      *(_DWORD *)v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(_BYTE *)(v4 + 6) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C311120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BED15B4(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C311134(uint64_t result)
{
  if (*(__int16 *)(result + 4) != -1)
    *(_WORD *)(result + 4) = -1;
  return result;
}

uint64_t sub_20C31114C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v5 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v6 = *a1;
  v7 = a1[4];
  v8 = v5 & *a1;
  if (*(__int16 *)(v7 + 16 * v8 + 4) < 0)
  {
    LOWORD(v9) = 0;
LABEL_7:
    v11 = sub_20C3112B8((uint64_t)a1);
    v12 = a1[4];
    if ((v11 & 1) != 0)
    {
      v8 = v5 & *a1;
      v13 = *(__int16 *)(v12 + 16 * v8 + 4);
      if (v13 < 0)
      {
        LOWORD(v9) = 0;
      }
      else
      {
        LOWORD(v9) = 0;
        do
        {
          v9 = (__int16)(v9 + 1);
          v8 = (v8 + 1) & *a1;
          v13 = *(__int16 *)(v12 + 16 * v8 + 4);
        }
        while (v9 <= v13);
      }
      v14 = (unsigned __int16)v13;
    }
    else
    {
      v14 = *(unsigned __int16 *)(v12 + 16 * v8 + 4);
    }
    if (v14 == 0xFFFF)
    {
      v15 = v12 + 16 * v8;
      *(_QWORD *)(v15 + 8) = *a3;
      *(_DWORD *)v15 = v5;
      *(_WORD *)(v15 + 4) = v9;
    }
    else
    {
      v16 = *a3;
      sub_20C3114F4(a1, v8, v9, v5, &v16);
      v12 = a1[4];
    }
    ++a1[6];
    return v12 + 16 * v8;
  }
  else
  {
    LOWORD(v9) = 0;
    while (1)
    {
      result = v7 + 16 * v8;
      if (*(_QWORD *)(result + 8) == *a2)
        break;
      v9 = (__int16)(v9 + 1);
      v8 = (v8 + 1) & v6;
      if (v9 > *(__int16 *)(v7 + 16 * v8 + 4))
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_20C3112B8(uint64_t a1)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 48), v2 >= *(_QWORD *)(a1 + 56)))
  {
    v6 = sub_20BED1164((_QWORD *)a1);
    sub_20C31137C(a1, v6);
    *(_BYTE *)(a1 + 72) = 0;
    return 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    *(_BYTE *)(a1 + 73) = 0;
    v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        v8 = *(float *)(a1 + 68);
        v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        sub_20C31137C(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_20C31137C(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[9];
  void **v10;

  sub_20C310F24((uint64_t)&v8, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 16);
  if (v3 != v4)
  {
    v5 = v3 + 1;
    v6 = (unint64_t)(v9[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        if (v6)
          v7 = bswap64(0x9E3779B97F4A7C55 * *v5);
        else
          v7 = *((unsigned int *)v5 - 2);
        sub_20C311488(&v8, v8 & v7, 0, v7, v5);
      }
      v5 += 2;
    }
    while (v5 - 1 != v4);
  }
  v9[5] = *(_QWORD *)(a1 + 48);
  sub_20BED1250(&v8, (uint64_t *)a1);
  v10 = (void **)v9;
  sub_20BED15B4(&v10);
}

void sub_20C311468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 56) = &a11;
  sub_20BED15B4((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C311488(_QWORD *result, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5;
  int *v6;
  _WORD *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;

  v5 = result[4];
  while (1)
  {
    v6 = (int *)(v5 + 16 * a2);
    v7 = v6 + 1;
    v8 = *((__int16 *)v6 + 2);
    if (v8 >= a3)
      goto LABEL_5;
    v9 = (uint64_t *)(v6 + 2);
    v10 = *a5;
    if (v8 == -1)
      break;
    *a5 = *v9;
    *v9 = v10;
    *v7 = a3;
    v11 = *v6;
    *v6 = a4;
    a3 = v8;
    a4 = v11;
LABEL_5:
    ++a3;
    a2 = *result & (a2 + 1);
  }
  *v9 = v10;
  *v6 = a4;
  *v7 = a3;
  return result;
}

uint64_t *sub_20C3114F4(uint64_t *result, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5;
  int *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int *v13;
  _WORD *v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v5 = result[4];
  v6 = (int *)(v5 + 16 * a2);
  v7 = *a5;
  *a5 = *((_QWORD *)v6 + 1);
  *((_QWORD *)v6 + 1) = v7;
  v8 = *((unsigned __int16 *)v6 + 2);
  *((_WORD *)v6 + 2) = a3;
  v9 = *v6;
  *v6 = a4;
  v10 = *result;
  v11 = (a2 + 1) & *result;
  v12 = v8 + 1;
  v13 = (int *)(v5 + 16 * v11);
  v14 = v13 + 1;
  for (i = *((unsigned __int16 *)v13 + 2); i != 0xFFFF; i = *((unsigned __int16 *)v13 + 2))
  {
    if ((__int16)v12 <= (__int16)i)
    {
      i = v12;
    }
    else
    {
      if ((__int16)v12 >= 4096)
        *((_BYTE *)result + 72) = 1;
      v16 = v5 + 16 * v11;
      v17 = *a5;
      *a5 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = v17;
      *v14 = v12;
      v18 = *v13;
      *v13 = v9;
      v9 = v18;
    }
    v11 = (v11 + 1) & v10;
    v12 = i + 1;
    v13 = (int *)(v5 + 16 * v11);
    v14 = v13 + 1;
  }
  *(_QWORD *)(v5 + 16 * v11 + 8) = *a5;
  *v13 = v9;
  *v14 = v12;
  return result;
}

uint64_t sub_20C3115C4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_20BED17D8((_QWORD *)a1, a2, a3);
  if (*(_QWORD *)(a1 + 32) + 16 * *(_QWORD *)(a1 + 40) == v4)
    return 0;
  sub_20C311610((uint64_t *)a1, v4);
  result = 1;
  *(_BYTE *)(a1 + 73) = 1;
  return result;
}

uint64_t *sub_20C311610(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 *v7;
  __int16 v8;
  int v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  int v14;

  if (*(__int16 *)(a2 + 4) != -1)
    *(_WORD *)(a2 + 4) = -1;
  --result[6];
  v2 = result[4];
  v3 = (a2 - v2) >> 4;
  v4 = *result;
  v5 = (v3 + 1) & *result;
  v6 = v2 + 16 * v5;
  v9 = *(__int16 *)(v6 + 4);
  v7 = (__int16 *)(v6 + 4);
  v8 = v9;
  if (v9 >= 1)
  {
    do
    {
      v10 = v2 + 16 * v3;
      v3 = v5;
      v11 = (int *)(v2 + 16 * v5);
      v12 = *v11;
      *(_QWORD *)(v10 + 8) = *((_QWORD *)v11 + 1);
      *(_DWORD *)v10 = v12;
      *(_WORD *)(v10 + 4) = v8 - 1;
      if (*v7 != -1)
        *v7 = -1;
      v5 = (v3 + 1) & v4;
      v13 = v2 + 16 * v5;
      v14 = *(__int16 *)(v13 + 4);
      v7 = (__int16 *)(v13 + 4);
      v8 = v14;
    }
    while (v14 > 0);
  }
  return result;
}

__n128 sub_20C3116B4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3116F0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C311714(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C311764((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C31171C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533290))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C311758()
{
  return &unk_24C533290;
}

void sub_20C311764(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C3117E0(v5, &v9, v3, v4);
}

void sub_20C3117E0(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD **v10;

  v9 = 0;
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) != 0)
  {
    v10 = 0;
    sub_20BF49F14(&v9, 0);
    sub_20BF49F14(&v10, 0);
  }
  else
  {
    *((_QWORD *)&v6 + 1) = *(_QWORD *)(*(_QWORD *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C311890((uint64_t)&v6, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v9);
  }
  sub_20BF4AB1C(a4, (const void ****)&v9);
  sub_20BF49F14(&v9, 0);
}

void sub_20C311878(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF49F14((_QWORD ***)(v1 - 32), 0);
  _Unwind_Resume(a1);
}

BOOL sub_20C311890(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *EmptyToken;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  const std::string *EmptyString;
  int v16;
  uint64_t *v17;
  std::string v19;
  uint64_t __dst;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  __dst = 0;
  v4 = a1 + 8;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  while (1)
  {
    v5 = __dst--;
    v6 = v5 == 0;
    if (!v5)
      break;
    memset(&v19, 0, sizeof(v19));
    LODWORD(v21[0]) = -1;
    EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B9BEC(v4, v21, 4uLL);
    if ((_DWORD)EmptyToken)
    {
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)(*(_QWORD *)a1 + 144);
      if (LODWORD(v21[0]) >= (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 152) - v9) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
        EmptyString = (const std::string *)&qword_254988388;
      }
      else
      {
        v10 = *(unsigned int *)(v9 + 4 * LODWORD(v21[0]));
        v12 = v8 + 120;
        v11 = *(_QWORD *)(v8 + 120);
        if (v10 >= (*(_QWORD *)(v12 + 8) - v11) >> 3)
        {
          EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
          v13 = &qword_2549883A8;
        }
        else
        {
          v13 = (uint64_t *)(v11 + 8 * v10);
        }
        v14 = *v13 & 0xFFFFFFFFFFFFFFF8;
        if (v14)
          EmptyString = (const std::string *)(v14 + 16);
        else
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
      }
      std::string::operator=(&v19, EmptyString);
      v21[1] = 0;
      if ((sub_20C311A80(a1, v21) & 1) != 0)
      {
        v17 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)&v19);
        sub_20BF4A9BC(v17, v21);
        v16 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtDictionary::clear(a2);
        v16 = 1;
      }
      sub_20BF4C2D8((uint64_t)v21);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtDictionary::clear(a2);
      v16 = 1;
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v19.__r_.__value_.__l.__data_);
      if (v16)
        return v6;
    }
    else if (v16)
    {
      return v6;
    }
  }
  return v6;
}

void sub_20C311A4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C311A80(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t *v5;
  char v6;
  const char *v7;
  uint64_t v8;
  uint64_t __dst;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  sub_20C311BE0(a1);
  result = sub_20C2B9BEC(a1 + 8, &__dst, 8uLL);
  if ((_DWORD)result)
  {
    v5 = (uint64_t *)sub_20C310DFC();
    sub_20C31114C(v5, &__dst, &__dst);
    if ((v6 & 1) != 0)
    {
      v8 = *(_QWORD *)a1;
      v11 = 0;
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v8, __dst, (uint64_t)&v10);
      sub_20BF4B5D8(a2, &v10);
      sub_20BF4C2D8((uint64_t)&v10);
      sub_20C3115C4((uint64_t)v5, &__dst, bswap64(0x9E3779B97F4A7C55 * __dst));
      return 1;
    }
    else
    {
      v10 = "usd/crateFile.cpp";
      v11 = "Read";
      v12 = 1425;
      v13 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::U"
            "sd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::Read"
            "(T &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReser"
            "ved__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::VtValue]";
      v14 = 0;
      v7 = (const char *)(*(_QWORD *)a1 + 6512);
      if (*(char *)(*(_QWORD *)a1 + 6535) < 0)
        v7 = *(const char **)v7;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset <%s>: a VtValue claims to recursively contain itself -- returning an empty VtValue instead", v7);
      return 0;
    }
  }
  return result;
}

void sub_20C311BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C311BE0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t __dst;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  __dst = 0;
  if (sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
  {
    v4 = v2 - v3;
    pxrInternal__aapl__pxrReserved__::ArchMemAdvise(*(_QWORD *)(**(_QWORD **)(a1 + 16) + 24) + v4, __dst, 1);
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24) + __dst + v4;
  }
}

__n128 sub_20C311C70(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5332B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C311CAC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5332B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C311CD0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C311D28((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C311CE0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533310))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C311D1C()
{
  return &unk_24C533310;
}

void sub_20C311D28(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C311E44(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C311E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C311E44(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  _QWORD **v13;
  _QWORD **v14;

  v13 = 0;
  v10 = *a2;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v11 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v12 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) != 0)
  {
    v14 = 0;
    sub_20BF49F14(&v13, 0);
    sub_20BF49F14(&v14, 0);
    if (!v5)
      goto LABEL_12;
  }
  else
  {
    v12 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C311F58((uint64_t *)&v10, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v13);
    v5 = v11;
    if (!v11)
      goto LABEL_12;
  }
  v8 = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_12:
  sub_20BF4AB1C(a4, (const void ****)&v13);
  sub_20BF49F14(&v13, 0);
}

void sub_20C311F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD **a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  sub_20BF49F14(&a13, 0);
  _Unwind_Resume(a1);
}

BOOL sub_20C311F58(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 v6;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *EmptyToken;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  const std::string *EmptyString;
  int v16;
  uint64_t *v17;
  std::string v19;
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v4 = a1 + 1;
  if (!sub_20C2B72E8(a1 + 1, (uint64_t)&v20, 8uLL))
    return 0;
  while (1)
  {
    v5 = v20--;
    v6 = v5 == 0;
    if (!v5)
      break;
    memset(&v19, 0, sizeof(v19));
    LODWORD(v21[0]) = -1;
    EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B72E8(v4, (uint64_t)v21, 4uLL);
    if ((_DWORD)EmptyToken)
    {
      v8 = *a1;
      v9 = *(_QWORD *)(*a1 + 144);
      if (LODWORD(v21[0]) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v9) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
        EmptyString = (const std::string *)&qword_254988388;
      }
      else
      {
        v10 = *(unsigned int *)(v9 + 4 * LODWORD(v21[0]));
        v12 = v8 + 120;
        v11 = *(_QWORD *)(v8 + 120);
        if (v10 >= (*(_QWORD *)(v12 + 8) - v11) >> 3)
        {
          EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
          v13 = &qword_2549883A8;
        }
        else
        {
          v13 = (uint64_t *)(v11 + 8 * v10);
        }
        v14 = *v13 & 0xFFFFFFFFFFFFFFF8;
        if (v14)
          EmptyString = (const std::string *)(v14 + 16);
        else
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
      }
      std::string::operator=(&v19, EmptyString);
      v21[1] = 0;
      if ((sub_20C312148(a1, v21) & 1) != 0)
      {
        v17 = pxrInternal__aapl__pxrReserved__::VtDictionary::operator[](a2, (__int128 *)&v19);
        sub_20BF4A9BC(v17, v21);
        v16 = 0;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::VtDictionary::clear(a2);
        v16 = 1;
      }
      sub_20BF4C2D8((uint64_t)v21);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::VtDictionary::clear(a2);
      v16 = 1;
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v19.__r_.__value_.__l.__data_);
      if (v16)
        return v6;
    }
    else if (v16)
    {
      return v6;
    }
  }
  return v6;
}

void sub_20C312114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C312148(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t *v7;
  char v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 1;
  v5 = a1[3];
  v12 = 0;
  if (sub_20C2B72E8(a1 + 1, (uint64_t)&v12, 8uLL))
    a1[3] = (uint64_t)&v12[v5];
  result = sub_20C2B72E8(v4, (uint64_t)&v11, 8uLL);
  if ((_DWORD)result)
  {
    v7 = (uint64_t *)sub_20C310DFC();
    sub_20C31114C(v7, &v11, &v11);
    if ((v8 & 1) != 0)
    {
      v10 = *a1;
      v13 = 0;
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(v10, v11, (uint64_t)&v12);
      sub_20BF4B5D8(a2, &v12);
      sub_20BF4C2D8((uint64_t)&v12);
      sub_20C3115C4((uint64_t)v7, &v11, bswap64(0x9E3779B97F4A7C55 * v11));
      return 1;
    }
    else
    {
      v12 = "usd/crateFile.cpp";
      v13 = "Read";
      v14 = 1425;
      v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::U"
            "sd_CrateFile::_AssetStream>::Read(T &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Asset"
            "Stream, T = pxrInternal__aapl__pxrReserved__::VtValue]";
      v16 = 0;
      v9 = (const char *)(*a1 + 6512);
      if (*(char *)(*a1 + 6535) < 0)
        v9 = *(const char **)v9;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v12, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset <%s>: a VtValue claims to recursively contain itself -- returning an empty VtValue instead", v9);
      return 0;
    }
  }
  return result;
}

void sub_20C3122B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3122D0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533330;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31237C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5333B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C312428(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533430;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3124D4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5334B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C312588(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3125C4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C3125E8(uint64_t a1, uint64_t a2)
{
  return sub_20C312638((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8), a2);
}

uint64_t sub_20C3125F0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533390))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31262C()
{
  return &unk_24C533390;
}

uint64_t sub_20C312638(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = *((_QWORD *)*a1 + 791);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *(unsigned __int8 **)a2;
  return sub_20C312690(v3, v2, (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)(v4 + 256), v6);
}

uint64_t sub_20C312690(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a3, unsigned __int8 *a4)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v20[2];
  void **v21;

  v20[0] = a2;
  v20[1] = a3;
  sub_20C0366AC((uint64_t)&v13, (uint64_t)a4);
  v21 = (void **)&v19;
  sub_20BEEB2B8(&v21);
  v21 = (void **)&v18;
  sub_20BEEB2B8(&v21);
  v21 = (void **)&v17;
  sub_20BEEB2B8(&v21);
  v21 = (void **)&v16;
  sub_20BEEB2B8(&v21);
  v21 = (void **)&v15;
  sub_20BEEB2B8(&v21);
  v21 = (void **)&v14;
  sub_20BEEB2B8(&v21);
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B3FC4(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v21 = 0;
  v9 = sub_20C3128DC(v7, a4, (uint64_t)a4, &v21);
  v10 = v9;
  if (v11)
  {
    v9[21] = *(_QWORD *)a3 & 0xFFFFFFFFFFFFLL | 0x20000000000000;
    sub_20C3127A8(v20, (pxrInternal__aapl__pxrReserved__::TfToken **)a4);
  }
  return v10[21];
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **sub_20C3127A8(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, pxrInternal__aapl__pxrReserved__::TfToken **a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **result;
  char v6;
  void *__p[2];
  char v8;
  char __src;

  sub_20C312E3C(&__src, (uint64_t)a2);
  if ((__src & 0x60) != 0)
  {
    v4 = *((_QWORD *)*a1 + 791);
    sub_20BDDC0E4(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_20C312C5C(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  result = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)sub_20C2DC688((uint64_t)a1, &__src);
  v6 = __src;
  if ((__src & 2) != 0)
  {
    result = sub_20C312DF0(a1, a2 + 1);
    v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  result = sub_20C312DF0(a1, a2 + 4);
  v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  result = sub_20C312DF0(a1, a2 + 7);
  v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  result = sub_20C312DF0(a1, a2 + 10);
  v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0)
      return result;
    return sub_20C312DF0(a1, a2 + 16);
  }
LABEL_16:
  result = sub_20C312DF0(a1, a2 + 13);
  if ((__src & 0x10) == 0)
    return result;
  return sub_20C312DF0(a1, a2 + 16);
}

void sub_20C3128C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C3128DC(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C036C0C((uint64_t)&v25, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::operator==(v14 + 2, a2))
            {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_20C312B90(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      v23 = *(_QWORD *)(*v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  v14 = v25;
  v25 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C312C18((uint64_t)&v25, 0);
  return v14;
}

void sub_20C312B78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C312C18((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C312B90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0xB0uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C0366AC((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C312C00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C312C18(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C312C18(uint64_t a1, uint64_t a2)
{
  void **v2;

  v2 = *(void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C2B4064(v2 + 2);
    operator delete(v2);
  }
}

uint64_t sub_20C312C5C(uint64_t a1, const char *a2, char *a3)
{
  char *v3;
  int v4;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  const char *v9;
  char *v10;
  char *v11;
  void *p_p;
  void *__p;
  char v15;
  void *v16;
  char v17;
  _QWORD v18[4];
  char v19;

  v3 = a3;
  v4 = (int)a2;
  v6 = *(unsigned __int8 *)(a1 + 248);
  if ((_DWORD)v6 != a2 || *(unsigned __int8 *)(a1 + 249) < BYTE1(a2))
  {
    v18[0] = "usd/crateFile.cpp";
    v18[1] = "RequestWriteVersionUpgrade";
    v18[2] = 1076;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackingContext::RequestWriteVersionUpgrad"
             "e(Version, std::string)";
    v19 = 0;
    v7 = (_QWORD *)(a1 + 224);
    if (*(char *)(a1 + 247) < 0)
      v7 = (_QWORD *)*v7;
    v8 = &v16;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", a2, a3, v6, *(unsigned __int8 *)(a1 + 249), *(unsigned __int8 *)(a1 + 250));
    if (v17 < 0)
      v8 = v16;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v9, v10, v4, BYTE1(v4), BYTE2(v4));
    if (v15 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v3[23] < 0)
      v3 = *(char **)v3;
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v18, (pxrInternal__aapl__pxrReserved__ *)"Upgrading crate file <%s> from version %s to %s: %s", v11, v7, v8, p_p, v3);
    if (v15 < 0)
      operator delete(__p);
    if (v17 < 0)
      operator delete(v16);
    *(_WORD *)(a1 + 248) = v4;
    *(_BYTE *)(a1 + 250) = BYTE2(v4);
  }
  return 1;
}

void sub_20C312DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **sub_20C312DF0(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, pxrInternal__aapl__pxrReserved__::TfToken **a2)
{
  uint64_t __src;

  __src = (a2[1] - *a2) >> 3;
  sub_20C2B7248((uint64_t)a1, (char *)&__src);
  return sub_20C2E84A4(*a2, a2[1], a1);
}

_BYTE *sub_20C312E3C(_BYTE *result, uint64_t a2)
{
  *result = *(_BYTE *)a2 | (2 * (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8))) | (4
                                                                                * (*(_QWORD *)(a2 + 40) != *(_QWORD *)(a2 + 32))) | (32 * (*(_QWORD *)(a2 + 64) != *(_QWORD *)(a2 + 56))) | ((*(_QWORD *)(a2 + 88) != *(_QWORD *)(a2 + 80)) << 6) | (8 * (*(_QWORD *)(a2 + 112) != *(_QWORD *)(a2 + 104))) | (16 * (*(_QWORD *)(a2 + 136) != *(_QWORD *)(a2 + 128)));
  return result;
}

__n128 sub_20C312EB0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5333B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C312EEC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5333B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C312F10(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C312FA0(v5, &v10, v3, v4);
}

uint64_t sub_20C312F58(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533410))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C312F94()
{
  return &unk_24C533410;
}

void sub_20C312FA0(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v9 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C313088((uint64_t)&v8, (uint64_t)v11);
  }
  sub_20C036820(a4, v11);
  v18 = (void **)&v17;
  sub_20BEEB2B8(&v18);
  v18 = (void **)&v16;
  sub_20BEEB2B8(&v18);
  v18 = (void **)&v15;
  sub_20BEEB2B8(&v18);
  v18 = (void **)&v14;
  sub_20BEEB2B8(&v18);
  v18 = (void **)&v13;
  sub_20BEEB2B8(&v18);
  v18 = (void **)&v12;
  sub_20BEEB2B8(&v18);
}

void sub_20C313074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C03507C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C313088(uint64_t a1, uint64_t a2)
{
  char p;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  __sFILE v10;
  void **v11;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)&v10._p + 1);
  LOBYTE(v10._p) = 0;
  if (!sub_20C3133E4(a1 + 8, 0, &v10))
    goto LABEL_24;
  p = (char)v10._p;
  if (((uint64_t)v10._p & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ClearAndMakeExplicit((unsigned __int8 *)&v10._p + 1);
    p = (char)v10._p;
  }
  if ((p & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C313434(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems((unsigned __int8 *)&v10._p + 1, &v7);
    v11 = (void **)&v7;
    sub_20BEEB2B8(&v11);
    p = (char)v10._p;
  }
  if ((p & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C313434(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAddedItems((unsigned __int8 *)&v10._p + 1, &v7);
    v11 = (void **)&v7;
    sub_20BEEB2B8(&v11);
    p = (char)v10._p;
  }
  if ((p & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C313434(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetPrependedItems((unsigned __int8 *)&v10._p + 1, &v7);
    v11 = (void **)&v7;
    sub_20BEEB2B8(&v11);
    p = (char)v10._p;
  }
  if ((p & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C313434(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems((unsigned __int8 *)&v10._p + 1, &v7);
    v11 = (void **)&v7;
    sub_20BEEB2B8(&v11);
    p = (char)v10._p;
  }
  if ((p & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if (!sub_20C313434(a1, &v7))
  {
LABEL_23:
    v11 = (void **)&v7;
    sub_20BEEB2B8(&v11);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems((unsigned __int8 *)&v10._p + 1, &v7);
  v11 = (void **)&v7;
  sub_20BEEB2B8(&v11);
  p = (char)v10._p;
LABEL_19:
  if ((p & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (sub_20C313434(a1, &v7))
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems((unsigned __int8 *)&v10._p + 1, &v7);
      v11 = (void **)&v7;
      sub_20BEEB2B8(&v11);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C313334(a2, (uint64_t)&v10._p + 1);
  v5 = 1;
LABEL_25:
  v7 = (uint64_t *)((char *)&v10._lb._size + 1);
  sub_20BEEB2B8((void ***)&v7);
  v7 = (uint64_t *)((char *)&v10._extra + 1);
  sub_20BEEB2B8((void ***)&v7);
  v7 = (uint64_t *)((char *)&v10._write + 1);
  sub_20BEEB2B8((void ***)&v7);
  v7 = (uint64_t *)((char *)&v10._close + 1);
  sub_20BEEB2B8((void ***)&v7);
  v7 = (uint64_t *)((char *)&v10._bf._size + 1);
  sub_20BEEB2B8((void ***)&v7);
  v7 = (uint64_t *)((char *)&v10._r + 1);
  sub_20BEEB2B8((void ***)&v7);
  return v5;
}

void sub_20C3132F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20BEEB2B8((void ***)(v6 - 40));
  sub_20C03507C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C313334(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  if (a1 != a2)
  {
    sub_20C106430((_QWORD *)(a1 + 8), *(uint64_t **)(a2 + 8), *(uint64_t **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_20C106430((_QWORD *)(a1 + 32), *(uint64_t **)(a2 + 32), *(uint64_t **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_20C106430((_QWORD *)(a1 + 56), *(uint64_t **)(a2 + 56), *(uint64_t **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    sub_20C106430((_QWORD *)(a1 + 80), *(uint64_t **)(a2 + 80), *(uint64_t **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    sub_20C106430((_QWORD *)(a1 + 104), *(uint64_t **)(a2 + 104), *(uint64_t **)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
    sub_20C106430((_QWORD *)(a1 + 128), *(uint64_t **)(a2 + 128), *(uint64_t **)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
  }
  return a1;
}

BOOL sub_20C3133E4(uint64_t a1, int a2, __sFILE *a3)
{
  ssize_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 24), a3, (char *)1, *(_QWORD *)(a1 + 8) + *(_QWORD *)a1);
  if (v4 != -1)
    *(_QWORD *)(a1 + 8) += v4;
  return v4 != -1;
}

BOOL sub_20C313434(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;
  void **v17;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    v11 = (uint64_t *)"usd/crateFile.cpp";
    v12 = (uint64_t *)"_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::TfToken]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20C143C84(&v11, v16);
  v7 = sub_20C2E8960(a1, v11, v16);
  v8 = v7;
  if (&v11 != a2 && v7)
    sub_20C106430(a2, v11, v12, v12 - v11);
  v17 = (void **)&v11;
  sub_20BEEB2B8(&v17);
  return v8;
}

void sub_20C313538(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1;
  sub_20BEEB2B8((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_20C313558(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C313594(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C3135B8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C313608((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C3135C0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533490))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3135FC()
{
  return &unk_24C533490;
}

void sub_20C313608(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C313684(v5, &v9, v3, v4);
}

void sub_20C313684(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C31377C((uint64_t)&v8, (uint64_t)v11);
  }
  sub_20C036820(a4, v11);
  v18 = (void **)&v17;
  sub_20BEEB2B8(&v18);
  v18 = (void **)&v16;
  sub_20BEEB2B8(&v18);
  v18 = (void **)&v15;
  sub_20BEEB2B8(&v18);
  v18 = (void **)&v14;
  sub_20BEEB2B8(&v18);
  v18 = (void **)&v13;
  sub_20BEEB2B8(&v18);
  v18 = (void **)&v12;
  sub_20BEEB2B8(&v18);
}

void sub_20C313768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C03507C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31377C(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char __dst;
  unsigned __int8 v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)v11);
  __dst = 0;
  if ((sub_20C2B9BEC(a1 + 8, &__dst, 1uLL) & 1) == 0)
    goto LABEL_24;
  v4 = __dst;
  if ((__dst & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ClearAndMakeExplicit(v11);
    v4 = __dst;
  }
  if ((v4 & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C313A28(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems(v11, &v7);
    v18 = (void **)&v7;
    sub_20BEEB2B8(&v18);
    v4 = __dst;
  }
  if ((v4 & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C313A28(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAddedItems(v11, &v7);
    v18 = (void **)&v7;
    sub_20BEEB2B8(&v18);
    v4 = __dst;
  }
  if ((v4 & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C313A28(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetPrependedItems(v11, &v7);
    v18 = (void **)&v7;
    sub_20BEEB2B8(&v18);
    v4 = __dst;
  }
  if ((v4 & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C313A28(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems(v11, &v7);
    v18 = (void **)&v7;
    sub_20BEEB2B8(&v18);
    v4 = __dst;
  }
  if ((v4 & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if (!sub_20C313A28(a1, &v7))
  {
LABEL_23:
    v18 = (void **)&v7;
    sub_20BEEB2B8(&v18);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems(v11, &v7);
  v18 = (void **)&v7;
  sub_20BEEB2B8(&v18);
  v4 = __dst;
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (sub_20C313A28(a1, &v7))
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems(v11, &v7);
      v18 = (void **)&v7;
      sub_20BEEB2B8(&v18);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C313334(a2, (uint64_t)v11);
  v5 = 1;
LABEL_25:
  v7 = &v17;
  sub_20BEEB2B8((void ***)&v7);
  v7 = &v16;
  sub_20BEEB2B8((void ***)&v7);
  v7 = &v15;
  sub_20BEEB2B8((void ***)&v7);
  v7 = &v14;
  sub_20BEEB2B8((void ***)&v7);
  v7 = &v13;
  sub_20BEEB2B8((void ***)&v7);
  v7 = &v12;
  sub_20BEEB2B8((void ***)&v7);
  return v5;
}

void sub_20C3139EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20BEEB2B8((void ***)(v6 - 40));
  sub_20C03507C((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C313A28(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t __dst;
  void **v17;

  __dst = 0;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    v11 = (uint64_t *)"usd/crateFile.cpp";
    v12 = (uint64_t *)"_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::TfToken]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_20C143C84(&v11, __dst);
  v7 = sub_20C2E8F8C(a1, v11, __dst);
  v8 = v7;
  if (&v11 != a2 && v7)
    sub_20C106430(a2, v11, v12, v12 - v11);
  v17 = (void **)&v11;
  sub_20BEEB2B8(&v17);
  return v8;
}

void sub_20C313B38(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1;
  sub_20BEEB2B8((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_20C313B58(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5334B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C313B94(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5334B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C313BB8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C313C10((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C313BC8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533510))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C313C04()
{
  return &unk_24C533510;
}

void sub_20C313C10(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C313D2C(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C313D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C313D2C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)v15);
  v12 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v13 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v14 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v14 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C313E84(&v12, (uint64_t)v15);
    v7 = v13;
  }
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_20C036820(a4, v15);
  v22 = (void **)&v21;
  sub_20BEEB2B8(&v22);
  v22 = (void **)&v20;
  sub_20BEEB2B8(&v22);
  v22 = (void **)&v19;
  sub_20BEEB2B8(&v22);
  v22 = (void **)&v18;
  sub_20BEEB2B8(&v22);
  v22 = (void **)&v17;
  sub_20BEEB2B8(&v22);
  v22 = (void **)&v16;
  sub_20BEEB2B8(&v22);
}

void sub_20C313E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  sub_20C03507C(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20C313E84(_QWORD *a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SdfListOp((uint64_t)v11);
  v10 = 0;
  if ((sub_20C2B72E8(a1 + 1, (uint64_t)&v10, 1uLL) & 1) == 0)
    goto LABEL_24;
  v4 = v10;
  if ((v10 & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::ClearAndMakeExplicit(v11);
    v4 = v10;
  }
  if ((v4 & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C314130(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetExplicitItems(v11, &v7);
    v18 = (void **)&v7;
    sub_20BEEB2B8(&v18);
    v4 = v10;
  }
  if ((v4 & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C314130(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAddedItems(v11, &v7);
    v18 = (void **)&v7;
    sub_20BEEB2B8(&v18);
    v4 = v10;
  }
  if ((v4 & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C314130(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetPrependedItems(v11, &v7);
    v18 = (void **)&v7;
    sub_20BEEB2B8(&v18);
    v4 = v10;
  }
  if ((v4 & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C314130(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetAppendedItems(v11, &v7);
    v18 = (void **)&v7;
    sub_20BEEB2B8(&v18);
    v4 = v10;
  }
  if ((v4 & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if (!sub_20C314130(a1, &v7))
  {
LABEL_23:
    v18 = (void **)&v7;
    sub_20BEEB2B8(&v18);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetDeletedItems(v11, &v7);
  v18 = (void **)&v7;
  sub_20BEEB2B8(&v18);
  v4 = v10;
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (sub_20C314130(a1, &v7))
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::TfToken>::SetOrderedItems(v11, &v7);
      v18 = (void **)&v7;
      sub_20BEEB2B8(&v18);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C313334(a2, (uint64_t)v11);
  v5 = 1;
LABEL_25:
  v7 = &v17;
  sub_20BEEB2B8((void ***)&v7);
  v7 = &v16;
  sub_20BEEB2B8((void ***)&v7);
  v7 = &v15;
  sub_20BEEB2B8((void ***)&v7);
  v7 = &v14;
  sub_20BEEB2B8((void ***)&v7);
  v7 = &v13;
  sub_20BEEB2B8((void ***)&v7);
  v7 = &v12;
  sub_20BEEB2B8((void ***)&v7);
  return v5;
}

void sub_20C3140F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20BEEB2B8((void ***)(v6 - 40));
  sub_20C03507C((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C314130(_QWORD *a1, uint64_t **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL8 v9;
  _BOOL8 v10;
  uint64_t v12;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;
  void **v20;

  v19 = 0;
  v4 = a1 + 1;
  if (!sub_20C2B72E8(a1 + 1, (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 16))(a1[1]);
  v6 = a1[3];
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    v14 = (uint64_t *)"usd/crateFile.cpp";
    v15 = (uint64_t *)"_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::TfToken]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20C143C84(&v14, v19);
  v9 = sub_20C2E9A3C(a1, v14, v19);
  v10 = v9;
  if (&v14 != a2 && v9)
    sub_20C106430(a2, v14, v15, v15 - v14);
  v20 = (void **)&v14;
  sub_20BEEB2B8(&v20);
  return v10;
}

void sub_20C314264(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = v1;
  sub_20BEEB2B8((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C31427C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533530;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C314328(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5335B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3143D4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533630;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C314480(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5336B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C314534(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533530;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C314570(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533530;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C314594(uint64_t a1, uint64_t a2)
{
  return sub_20C3145E4((char ***)(a1 + 8), a2);
}

uint64_t sub_20C31459C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533590))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3145D8()
{
  return &unk_24C533590;
}

uint64_t sub_20C3145E4(char ***a1, uint64_t a2)
{
  char **v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = (*a1)[791];
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *(unsigned __int8 **)a2;
  return sub_20C31463C(v3, v2, (char **)v4 + 32, v6);
}

uint64_t sub_20C31463C(uint64_t *a1, char **a2, char **a3, unsigned __int8 *a4)
{
  uint64_t v7;
  _OWORD *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char **v20[2];
  void **v21;

  v20[0] = a2;
  v20[1] = a3;
  sub_20C02F650((uint64_t)&v13, (uint64_t)a4);
  v21 = (void **)&v19;
  sub_20BDE5038(&v21);
  v21 = (void **)&v18;
  sub_20BDE5038(&v21);
  v21 = (void **)&v17;
  sub_20BDE5038(&v21);
  v21 = (void **)&v16;
  sub_20BDE5038(&v21);
  v21 = (void **)&v15;
  sub_20BDE5038(&v21);
  v21 = (void **)&v14;
  sub_20BDE5038(&v21);
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B42B4(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v21 = 0;
  v9 = sub_20C314888(v7, a4, (uint64_t)a4, &v21);
  v10 = v9;
  if (v11)
  {
    *((_QWORD *)v9 + 21) = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x21000000000000;
    sub_20C314754(v20, (unsigned __int8 **)a4);
  }
  return *((_QWORD *)v10 + 21);
}

char ***sub_20C314754(char ***a1, unsigned __int8 **a2)
{
  uint64_t v4;
  char ***result;
  char v6;
  void *__p[2];
  char v8;
  char __src;

  sub_20C312E3C(&__src, (uint64_t)a2);
  if ((__src & 0x60) != 0)
  {
    v4 = (uint64_t)(*a1)[791];
    sub_20BDDC0E4(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_20C312C5C(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  result = (char ***)sub_20C2DC688((uint64_t)a1, &__src);
  v6 = __src;
  if ((__src & 2) != 0)
  {
    result = sub_20C314C08(a1, a2 + 1);
    v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  result = sub_20C314C08(a1, a2 + 4);
  v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  result = sub_20C314C08(a1, a2 + 7);
  v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  result = sub_20C314C08(a1, a2 + 10);
  v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0)
      return result;
    return sub_20C314C08(a1, a2 + 16);
  }
LABEL_16:
  result = sub_20C314C08(a1, a2 + 13);
  if ((__src & 0x10) == 0)
    return result;
  return sub_20C314C08(a1, a2 + 16);
}

void sub_20C31486C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20C314888(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unsigned __int8 **v22;
  unint64_t v23;
  unsigned __int8 *v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C02FBE0((unint64_t)&v25, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==(i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  sub_20C314B3C(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *(_QWORD *)v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25)
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  i = v25;
  v25 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C314BC4((uint64_t)&v25, 0);
  return i;
}

void sub_20C314B24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C314BC4((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C314B3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0xB0uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C02F650((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C314BAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C314BC4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C314BC4(uint64_t a1, uint64_t a2)
{
  void **v2;

  v2 = *(void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C2B4354(v2 + 2);
    operator delete(v2);
  }
}

char ***sub_20C314C08(char ***a1, unsigned __int8 **a2)
{
  unint64_t __src;

  __src = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20C2B7248((uint64_t)a1, (char *)&__src);
  return sub_20C2E5F0C(*a2, a2[1], a1);
}

__n128 sub_20C314C68(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5335B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C314CA4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5335B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C314CC8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C314D58(v5, &v10, v3, v4);
}

uint64_t sub_20C314D10(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533610))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C314D4C()
{
  return &unk_24C533610;
}

void sub_20C314D58(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v9 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C314E40((uint64_t *)&v8, v11);
  }
  sub_20C02F7F4(a4, v11);
  v18 = (void **)&v17;
  sub_20BDE5038(&v18);
  v18 = (void **)&v16;
  sub_20BDE5038(&v18);
  v18 = (void **)&v15;
  sub_20BDE5038(&v18);
  v18 = (void **)&v14;
  sub_20BDE5038(&v18);
  v18 = (void **)&v13;
  sub_20BDE5038(&v18);
  v18 = (void **)&v12;
  sub_20BDE5038(&v18);
}

void sub_20C314E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C020EAC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C314E40(uint64_t *a1, _BYTE *a2)
{
  char p;
  uint64_t v5;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  __sFILE v10;
  void ***v11;

  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)&v10._p + 1);
  LOBYTE(v10._p) = 0;
  if (!sub_20C3133E4((uint64_t)(a1 + 1), 0, &v10))
    goto LABEL_24;
  p = (char)v10._p;
  if (((uint64_t)v10._p & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ClearAndMakeExplicit((uint64_t *)((char *)&v10._p + 1));
    p = (char)v10._p;
  }
  if ((p & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3150EC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems((uint64_t *)((char *)&v10._p + 1), (uint64_t)&v7);
    v11 = &v7;
    sub_20BDE5038((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3150EC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAddedItems((uint64_t *)((char *)&v10._p + 1), (uint64_t)&v7);
    v11 = &v7;
    sub_20BDE5038((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3150EC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetPrependedItems((uint64_t *)((char *)&v10._p + 1), (uint64_t)&v7);
    v11 = &v7;
    sub_20BDE5038((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3150EC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems((uint64_t *)((char *)&v10._p + 1), (uint64_t)&v7);
    v11 = &v7;
    sub_20BDE5038((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C3150EC(a1, (std::string **)&v7) & 1) == 0)
  {
LABEL_23:
    v11 = &v7;
    sub_20BDE5038((void ***)&v11);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetDeletedItems((uint64_t *)((char *)&v10._p + 1), (uint64_t)&v7);
  v11 = &v7;
  sub_20BDE5038((void ***)&v11);
  p = (char)v10._p;
LABEL_19:
  if ((p & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3150EC(a1, (std::string **)&v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems((uint64_t *)((char *)&v10._p + 1), (uint64_t)&v7);
      v11 = &v7;
      sub_20BDE5038((void ***)&v11);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C234000(a2, (uint64_t)&v10._p + 1);
  v5 = 1;
LABEL_25:
  v7 = (void **)((char *)&v10._lb._size + 1);
  sub_20BDE5038(&v7);
  v7 = (void **)((char *)&v10._extra + 1);
  sub_20BDE5038(&v7);
  v7 = (void **)((char *)&v10._write + 1);
  sub_20BDE5038(&v7);
  v7 = (void **)((char *)&v10._close + 1);
  sub_20BDE5038(&v7);
  v7 = (void **)((char *)&v10._bf._size + 1);
  sub_20BDE5038(&v7);
  v7 = (void **)((char *)&v10._r + 1);
  sub_20BDE5038(&v7);
  return v5;
}

void sub_20C3150B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20BDE5038((void ***)(v6 - 40));
  sub_20C020EAC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C3150EC(uint64_t *a1, std::string **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  char v9;
  std::string *v11;
  __int128 *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;
  std::string **v17;

  v16 = 0;
  if (!sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&v16))
    return 0;
  v5 = a1[2];
  v4 = a1[3];
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    v11 = (std::string *)"usd/crateFile.cpp";
    v12 = (__int128 *)"_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = std::string]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20BDE4F04(&v11, v16);
  v7 = sub_20C2E63B0(a1, v11, v16);
  v8 = v7;
  if (&v11 == a2)
    v9 = 0;
  else
    v9 = (char)v7;
  if ((v9 & 1) != 0)
    sub_20BE75818((uint64_t)a2, v11, v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 3));
  v17 = &v11;
  sub_20BDE5038((void ***)&v17);
  return v8;
}

void sub_20C3151FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1;
  sub_20BDE5038((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_20C31521C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C315258(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C31527C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C3152CC((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C315284(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533690))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3152C0()
{
  return &unk_24C533690;
}

void sub_20C3152CC(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C315348(v5, &v9, v3, v4);
}

void sub_20C315348(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C315440((uint64_t)&v8, v11);
  }
  sub_20C02F7F4(a4, v11);
  v18 = (void **)&v17;
  sub_20BDE5038(&v18);
  v18 = (void **)&v16;
  sub_20BDE5038(&v18);
  v18 = (void **)&v15;
  sub_20BDE5038(&v18);
  v18 = (void **)&v14;
  sub_20BDE5038(&v18);
  v18 = (void **)&v13;
  sub_20BDE5038(&v18);
  v18 = (void **)&v12;
  sub_20BDE5038(&v18);
}

void sub_20C31542C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C020EAC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C315440(uint64_t a1, _BYTE *a2)
{
  char v4;
  uint64_t v5;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  char __dst;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void ***v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)&v11);
  __dst = 0;
  if ((sub_20C2B9BEC(a1 + 8, &__dst, 1uLL) & 1) == 0)
    goto LABEL_24;
  v4 = __dst;
  if ((__dst & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ClearAndMakeExplicit(&v11);
    v4 = __dst;
  }
  if ((v4 & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3156EC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems(&v11, (uint64_t)&v7);
    v18 = &v7;
    sub_20BDE5038((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3156EC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAddedItems(&v11, (uint64_t)&v7);
    v18 = &v7;
    sub_20BDE5038((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3156EC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetPrependedItems(&v11, (uint64_t)&v7);
    v18 = &v7;
    sub_20BDE5038((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3156EC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems(&v11, (uint64_t)&v7);
    v18 = &v7;
    sub_20BDE5038((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C3156EC(a1, (std::string **)&v7) & 1) == 0)
  {
LABEL_23:
    v18 = &v7;
    sub_20BDE5038((void ***)&v18);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetDeletedItems(&v11, (uint64_t)&v7);
  v18 = &v7;
  sub_20BDE5038((void ***)&v18);
  v4 = __dst;
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3156EC(a1, (std::string **)&v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems(&v11, (uint64_t)&v7);
      v18 = &v7;
      sub_20BDE5038((void ***)&v18);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C234000(a2, (uint64_t)&v11);
  v5 = 1;
LABEL_25:
  v7 = (void **)&v17;
  sub_20BDE5038(&v7);
  v7 = (void **)&v16;
  sub_20BDE5038(&v7);
  v7 = (void **)&v15;
  sub_20BDE5038(&v7);
  v7 = (void **)&v14;
  sub_20BDE5038(&v7);
  v7 = (void **)&v13;
  sub_20BDE5038(&v7);
  v7 = (void **)&v12;
  sub_20BDE5038(&v7);
  return v5;
}

void sub_20C3156B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20BDE5038((void ***)(v6 - 40));
  sub_20C020EAC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3156EC(uint64_t a1, std::string **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string *v11;
  __int128 *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t __dst;
  std::string **v17;

  __dst = 0;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    v11 = (std::string *)"usd/crateFile.cpp";
    v12 = (__int128 *)"_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = std::string]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_20BDE4F04(&v11, __dst);
  v7 = sub_20C2E6DB0((uint64_t *)a1, v11, __dst);
  v8 = v7;
  if (&v11 == a2)
    v9 = 0;
  else
    v9 = v7;
  if ((v9 & 1) != 0)
    sub_20BE75818((uint64_t)a2, v11, v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 3));
  v17 = &v11;
  sub_20BDE5038((void ***)&v17);
  return v8;
}

void sub_20C315808(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1;
  sub_20BDE5038((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_20C315828(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5336B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C315864(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5336B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C315888(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C3158E0((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C315898(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533710))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3158D4()
{
  return &unk_24C533710;
}

void sub_20C3158E0(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C3159FC(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C3159E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C3159FC(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)v15);
  v12 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v13 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v14 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v14 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C315B54(&v12, v15);
    v7 = v13;
  }
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_20C02F7F4(a4, v15);
  v22 = (void **)&v21;
  sub_20BDE5038(&v22);
  v22 = (void **)&v20;
  sub_20BDE5038(&v22);
  v22 = (void **)&v19;
  sub_20BDE5038(&v22);
  v22 = (void **)&v18;
  sub_20BDE5038(&v22);
  v22 = (void **)&v17;
  sub_20BDE5038(&v22);
  v22 = (void **)&v16;
  sub_20BDE5038(&v22);
}

void sub_20C315B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  sub_20C020EAC(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20C315B54(_QWORD *a1, _BYTE *a2)
{
  char v4;
  uint64_t v5;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void ***v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SdfListOp((uint64_t)&v11);
  v10 = 0;
  if ((sub_20C2B72E8(a1 + 1, (uint64_t)&v10, 1uLL) & 1) == 0)
    goto LABEL_24;
  v4 = v10;
  if ((v10 & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::ClearAndMakeExplicit(&v11);
    v4 = v10;
  }
  if ((v4 & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C315E00(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetExplicitItems(&v11, (uint64_t)&v7);
    v18 = &v7;
    sub_20BDE5038((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C315E00(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAddedItems(&v11, (uint64_t)&v7);
    v18 = &v7;
    sub_20BDE5038((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C315E00(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetPrependedItems(&v11, (uint64_t)&v7);
    v18 = &v7;
    sub_20BDE5038((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C315E00(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetAppendedItems(&v11, (uint64_t)&v7);
    v18 = &v7;
    sub_20BDE5038((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C315E00(a1, (std::string **)&v7) & 1) == 0)
  {
LABEL_23:
    v18 = &v7;
    sub_20BDE5038((void ***)&v18);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetDeletedItems(&v11, (uint64_t)&v7);
  v18 = &v7;
  sub_20BDE5038((void ***)&v18);
  v4 = v10;
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C315E00(a1, (std::string **)&v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::SetOrderedItems(&v11, (uint64_t)&v7);
      v18 = &v7;
      sub_20BDE5038((void ***)&v18);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C234000(a2, (uint64_t)&v11);
  v5 = 1;
LABEL_25:
  v7 = (void **)&v17;
  sub_20BDE5038(&v7);
  v7 = (void **)&v16;
  sub_20BDE5038(&v7);
  v7 = (void **)&v15;
  sub_20BDE5038(&v7);
  v7 = (void **)&v14;
  sub_20BDE5038(&v7);
  v7 = (void **)&v13;
  sub_20BDE5038(&v7);
  v7 = (void **)&v12;
  sub_20BDE5038(&v7);
  return v5;
}

void sub_20C315DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20BDE5038((void ***)(v6 - 40));
  sub_20C020EAC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C315E00(_QWORD *a1, std::string **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  std::string *v14;
  __int128 *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;
  std::string **v20;

  v19 = 0;
  v4 = a1 + 1;
  if (!sub_20C2B72E8(a1 + 1, (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 16))(a1[1]);
  v6 = a1[3];
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    v14 = (std::string *)"usd/crateFile.cpp";
    v15 = (__int128 *)"_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = std::string]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20BDE4F04(&v14, v19);
  v9 = sub_20C2E7914(a1, v14, v19);
  v10 = v9;
  if (&v14 == a2)
    v11 = 0;
  else
    v11 = v9;
  if ((v11 & 1) != 0)
    sub_20BE75818((uint64_t)a2, v14, v15, 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3));
  v20 = &v14;
  sub_20BDE5038((void ***)&v20);
  return v10;
}

void sub_20C315F40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = v1;
  sub_20BDE5038((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C315F58(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533730;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C316004(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5337B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3160B0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533830;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31615C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5338B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C316210(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31624C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C316270(uint64_t a1, uint64_t a2)
{
  return sub_20C3162C0((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8), a2);
}

uint64_t sub_20C316278(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533790))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3162B4()
{
  return &unk_24C533790;
}

uint64_t sub_20C3162C0(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = *((_QWORD *)*a1 + 791);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *(unsigned __int8 **)a2;
  return sub_20C316318(v3, v2, (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)(v4 + 256), v6);
}

uint64_t sub_20C316318(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a3, unsigned __int8 *a4)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v20[2];
  void **v21;

  v20[0] = a2;
  v20[1] = a3;
  sub_20BFD6BC4((uint64_t)&v13, (uint64_t)a4);
  v21 = (void **)&v19;
  sub_20BFD6F90(&v21);
  v21 = (void **)&v18;
  sub_20BFD6F90(&v21);
  v21 = (void **)&v17;
  sub_20BFD6F90(&v21);
  v21 = (void **)&v16;
  sub_20BFD6F90(&v21);
  v21 = (void **)&v15;
  sub_20BFD6F90(&v21);
  v21 = (void **)&v14;
  sub_20BFD6F90(&v21);
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B45A4(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v21 = 0;
  v9 = sub_20C316564(v7, a4, (uint64_t)a4, &v21);
  v10 = v9;
  if (v11)
  {
    v9[21] = *(_QWORD *)a3 & 0xFFFFFFFFFFFFLL | 0x22000000000000;
    sub_20C316430(v20, (pxrInternal__aapl__pxrReserved__::SdfPath **)a4);
  }
  return v10[21];
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **sub_20C316430(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **result;
  char v6;
  void *__p[2];
  char v8;
  char __src;

  sub_20C312E3C(&__src, (uint64_t)a2);
  if ((__src & 0x60) != 0)
  {
    v4 = *((_QWORD *)*a1 + 791);
    sub_20BDDC0E4(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_20C312C5C(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  result = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)sub_20C2DC688((uint64_t)a1, &__src);
  v6 = __src;
  if ((__src & 2) != 0)
  {
    result = sub_20C3168E4(a1, a2 + 1);
    v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  result = sub_20C3168E4(a1, a2 + 4);
  v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  result = sub_20C3168E4(a1, a2 + 7);
  v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  result = sub_20C3168E4(a1, a2 + 10);
  v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0)
      return result;
    return sub_20C3168E4(a1, a2 + 16);
  }
LABEL_16:
  result = sub_20C3168E4(a1, a2 + 13);
  if ((__src & 0x10) == 0)
    return result;
  return sub_20C3168E4(a1, a2 + 16);
}

void sub_20C316548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C316564(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20BFD834C((uint64_t)&v25, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::operator==(v14 + 2, a2))
            {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_20C316818(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      v23 = *(_QWORD *)(*v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  v14 = v25;
  v25 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C3168A0((uint64_t)&v25, 0);
  return v14;
}

void sub_20C316800(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C3168A0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C316818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0xB0uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20BFD6BC4((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C316888(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C3168A0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C3168A0(uint64_t a1, uint64_t a2)
{
  void **v2;

  v2 = *(void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C2B4644(v2 + 2);
    operator delete(v2);
  }
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **sub_20C3168E4(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  uint64_t __src;

  __src = (a2[1] - *a2) >> 3;
  sub_20C2B7248((uint64_t)a1, (char *)&__src);
  return sub_20C316930(*a2, a2[1], a1);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **sub_20C316930(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a3)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  int __src;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      __src = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath(*a3, v5);
      sub_20C2CE770((uint64_t)a3, (char *)&__src);
      v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v5 + 8);
    }
    while (v5 != a2);
  }
  return a3;
}

__n128 sub_20C3169A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5337B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3169DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5337B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C316A00(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C316A90(v5, &v10, v3, v4);
}

uint64_t sub_20C316A48(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533810))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C316A84()
{
  return &unk_24C533810;
}

void sub_20C316A90(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v9 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C316B78((uint64_t)&v8, v11);
  }
  sub_20C029950(a4, v11);
  v18 = (void **)&v17;
  sub_20BFD6F90(&v18);
  v18 = (void **)&v16;
  sub_20BFD6F90(&v18);
  v18 = (void **)&v15;
  sub_20BFD6F90(&v18);
  v18 = (void **)&v14;
  sub_20BFD6F90(&v18);
  v18 = (void **)&v13;
  sub_20BFD6F90(&v18);
  v18 = (void **)&v12;
  sub_20BFD6F90(&v18);
}

void sub_20C316B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BFD6A50((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C316B78(uint64_t a1, _BYTE *a2)
{
  char p;
  uint64_t v5;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  __sFILE v10;
  void **v11;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)&v10._p + 1);
  LOBYTE(v10._p) = 0;
  if (!sub_20C3133E4(a1 + 8, 0, &v10))
    goto LABEL_24;
  p = (char)v10._p;
  if (((uint64_t)v10._p & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ClearAndMakeExplicit((unsigned __int8 **)((char *)&v10._p + 1));
    p = (char)v10._p;
  }
  if ((p & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C316E24(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems((unsigned __int8 **)((char *)&v10._p + 1), &v7);
    v11 = (void **)&v7;
    sub_20BFD6F90(&v11);
    p = (char)v10._p;
  }
  if ((p & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C316E24(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAddedItems((unsigned __int8 **)((char *)&v10._p + 1), &v7);
    v11 = (void **)&v7;
    sub_20BFD6F90(&v11);
    p = (char)v10._p;
  }
  if ((p & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C316E24(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetPrependedItems((unsigned __int8 **)((char *)&v10._p + 1), &v7);
    v11 = (void **)&v7;
    sub_20BFD6F90(&v11);
    p = (char)v10._p;
  }
  if ((p & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (!sub_20C316E24(a1, &v7))
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems((unsigned __int8 **)((char *)&v10._p + 1), &v7);
    v11 = (void **)&v7;
    sub_20BFD6F90(&v11);
    p = (char)v10._p;
  }
  if ((p & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if (!sub_20C316E24(a1, &v7))
  {
LABEL_23:
    v11 = (void **)&v7;
    sub_20BFD6F90(&v11);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetDeletedItems((unsigned __int8 **)((char *)&v10._p + 1), &v7);
  v11 = (void **)&v7;
  sub_20BFD6F90(&v11);
  p = (char)v10._p;
LABEL_19:
  if ((p & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if (sub_20C316E24(a1, &v7))
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetOrderedItems((unsigned __int8 **)((char *)&v10._p + 1), &v7);
      v11 = (void **)&v7;
      sub_20BFD6F90(&v11);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C0E2900(a2, (uint64_t)&v10._p + 1);
  v5 = 1;
LABEL_25:
  v7 = (int *)((char *)&v10._lb._size + 1);
  sub_20BFD6F90((void ***)&v7);
  v7 = (int *)((char *)&v10._extra + 1);
  sub_20BFD6F90((void ***)&v7);
  v7 = (int *)((char *)&v10._write + 1);
  sub_20BFD6F90((void ***)&v7);
  v7 = (int *)((char *)&v10._close + 1);
  sub_20BFD6F90((void ***)&v7);
  v7 = (int *)((char *)&v10._bf._size + 1);
  sub_20BFD6F90((void ***)&v7);
  v7 = (int *)((char *)&v10._r + 1);
  sub_20BFD6F90((void ***)&v7);
  return v5;
}

void sub_20C316DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20BFD6F90((void ***)(v6 - 40));
  sub_20BFD6A50((void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C316E24(uint64_t a1, int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  int *v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;
  void **v17;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    v11 = (int *)"usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::SdfPath]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20C019C58(&v11, v16);
  v7 = sub_20C316F40(a1, v11, v16);
  v8 = v7;
  if (&v11 != a2 && v7)
    sub_20C0E29B0((uint64_t)a2, v11, v12, (v12 - (char *)v11) >> 3);
  v17 = (void **)&v11;
  sub_20BFD6F90(&v17);
  return v8;
}

void sub_20C316F28(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1;
  sub_20BFD6F90((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

BOOL sub_20C316F40(uint64_t a1, int *a2, unint64_t a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int *v11;
  _DWORD _C[21];

  if (!a3)
    return 1;
  v6 = a1 + 8;
  _C[0] = -1;
  result = sub_20C2CEB84(a1 + 8, 0, (__sFILE *)_C);
  if (result)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)a1 + 96);
      v10 = _C[0] >= (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 104) - v9) >> 3)
          ? pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result)
          : (uint64_t *)(v9 + 8 * _C[0]);
      sub_20C01A074(a2, v10);
      v11 = a2 + 1;
      sub_20C01A0C8(v11, (_DWORD *)v10 + 1);
      if (a3 - 1 == v8)
        break;
      _C[0] = -1;
      result = sub_20C2CEB84(v6, 0, (__sFILE *)_C);
      a2 = v11 + 1;
      ++v8;
      if (!result)
        return v8 >= a3;
    }
    return 1;
  }
  return result;
}

__n128 sub_20C317040(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31707C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C3170A0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C3170F0((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C3170A8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533890))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3170E4()
{
  return &unk_24C533890;
}

void sub_20C3170F0(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C31716C(v5, &v9, v3, v4);
}

void sub_20C31716C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C317264((uint64_t)&v8, v11);
  }
  sub_20C029950(a4, v11);
  v18 = (void **)&v17;
  sub_20BFD6F90(&v18);
  v18 = (void **)&v16;
  sub_20BFD6F90(&v18);
  v18 = (void **)&v15;
  sub_20BFD6F90(&v18);
  v18 = (void **)&v14;
  sub_20BFD6F90(&v18);
  v18 = (void **)&v13;
  sub_20BFD6F90(&v18);
  v18 = (void **)&v12;
  sub_20BFD6F90(&v18);
}

void sub_20C317250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BFD6A50((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C317264(uint64_t a1, _BYTE *a2)
{
  char v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char __dst;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)&v11);
  __dst = 0;
  if ((sub_20C2B9BEC(a1 + 8, &__dst, 1uLL) & 1) == 0)
    goto LABEL_24;
  v4 = __dst;
  if ((__dst & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ClearAndMakeExplicit(&v11);
    v4 = __dst;
  }
  if ((v4 & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C317510(a1, (int **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems(&v11, (_DWORD **)&v7);
    v18 = (void **)&v7;
    sub_20BFD6F90(&v18);
    v4 = __dst;
  }
  if ((v4 & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C317510(a1, (int **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAddedItems(&v11, (_DWORD **)&v7);
    v18 = (void **)&v7;
    sub_20BFD6F90(&v18);
    v4 = __dst;
  }
  if ((v4 & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C317510(a1, (int **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetPrependedItems(&v11, (_DWORD **)&v7);
    v18 = (void **)&v7;
    sub_20BFD6F90(&v18);
    v4 = __dst;
  }
  if ((v4 & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C317510(a1, (int **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems(&v11, (_DWORD **)&v7);
    v18 = (void **)&v7;
    sub_20BFD6F90(&v18);
    v4 = __dst;
  }
  if ((v4 & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C317510(a1, (int **)&v7) & 1) == 0)
  {
LABEL_23:
    v18 = (void **)&v7;
    sub_20BFD6F90(&v18);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetDeletedItems(&v11, (_DWORD **)&v7);
  v18 = (void **)&v7;
  sub_20BFD6F90(&v18);
  v4 = __dst;
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C317510(a1, (int **)&v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetOrderedItems(&v11, (_DWORD **)&v7);
      v18 = (void **)&v7;
      sub_20BFD6F90(&v18);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C0E2900(a2, (uint64_t)&v11);
  v5 = 1;
LABEL_25:
  v7 = &v17;
  sub_20BFD6F90((void ***)&v7);
  v7 = &v16;
  sub_20BFD6F90((void ***)&v7);
  v7 = &v15;
  sub_20BFD6F90((void ***)&v7);
  v7 = &v14;
  sub_20BFD6F90((void ***)&v7);
  v7 = &v13;
  sub_20BFD6F90((void ***)&v7);
  v7 = &v12;
  sub_20BFD6F90((void ***)&v7);
  return v5;
}

void sub_20C3174D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20BFD6F90((void ***)(v6 - 40));
  sub_20BFD6A50((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C317510(uint64_t a1, int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int *v11;
  char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t __dst;
  void **v17;

  __dst = 0;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    v11 = (int *)"usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfPath]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_20C019C58(&v11, __dst);
  v7 = sub_20C317638(a1, v11, __dst);
  v8 = v7;
  if (&v11 == a2)
    v9 = 0;
  else
    v9 = v7;
  if ((v9 & 1) != 0)
    sub_20C0E29B0((uint64_t)a2, v11, v12, (v12 - (char *)v11) >> 3);
  v17 = (void **)&v11;
  sub_20BFD6F90(&v17);
  return v8;
}

void sub_20C317620(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1;
  sub_20BFD6F90((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_20C317638(uint64_t a1, int *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int *v11;
  unsigned int __dst;

  if (!a3)
    return 1;
  v6 = a1 + 8;
  __dst = -1;
  result = sub_20C2B9BEC(a1 + 8, &__dst, 4uLL);
  if ((_DWORD)result)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)a1 + 96);
      v10 = __dst >= (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 104) - v9) >> 3)
          ? pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result)
          : (uint64_t *)(v9 + 8 * __dst);
      sub_20C01A074(a2, v10);
      v11 = a2 + 1;
      sub_20C01A0C8(v11, (_DWORD *)v10 + 1);
      if (a3 - 1 == v8)
        break;
      __dst = -1;
      result = sub_20C2B9BEC(v6, &__dst, 4uLL);
      a2 = v11 + 1;
      ++v8;
      if (!(_DWORD)result)
        return v8 >= a3;
    }
    return 1;
  }
  return result;
}

__n128 sub_20C317738(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5338B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C317774(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5338B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C317798(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C3177F0((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C3177A8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533910))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3177E4()
{
  return &unk_24C533910;
}

void sub_20C3177F0(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C31790C(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C3178F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C31790C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)v15);
  v12 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v13 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v14 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v14 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C317A64(&v12, v15);
    v7 = v13;
  }
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_20C029950(a4, v15);
  v22 = (void **)&v21;
  sub_20BFD6F90(&v22);
  v22 = (void **)&v20;
  sub_20BFD6F90(&v22);
  v22 = (void **)&v19;
  sub_20BFD6F90(&v22);
  v22 = (void **)&v18;
  sub_20BFD6F90(&v22);
  v22 = (void **)&v17;
  sub_20BFD6F90(&v22);
  v22 = (void **)&v16;
  sub_20BFD6F90(&v22);
}

void sub_20C317A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  sub_20BFD6A50(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20C317A64(_QWORD *a1, _BYTE *a2)
{
  char v4;
  uint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)&v11);
  v10 = 0;
  if ((sub_20C2B72E8(a1 + 1, (uint64_t)&v10, 1uLL) & 1) == 0)
    goto LABEL_24;
  v4 = v10;
  if ((v10 & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ClearAndMakeExplicit(&v11);
    v4 = v10;
  }
  if ((v4 & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C317D10(a1, (int **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetExplicitItems(&v11, (_DWORD **)&v7);
    v18 = (void **)&v7;
    sub_20BFD6F90(&v18);
    v4 = v10;
  }
  if ((v4 & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C317D10(a1, (int **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAddedItems(&v11, (_DWORD **)&v7);
    v18 = (void **)&v7;
    sub_20BFD6F90(&v18);
    v4 = v10;
  }
  if ((v4 & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C317D10(a1, (int **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetPrependedItems(&v11, (_DWORD **)&v7);
    v18 = (void **)&v7;
    sub_20BFD6F90(&v18);
    v4 = v10;
  }
  if ((v4 & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C317D10(a1, (int **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetAppendedItems(&v11, (_DWORD **)&v7);
    v18 = (void **)&v7;
    sub_20BFD6F90(&v18);
    v4 = v10;
  }
  if ((v4 & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C317D10(a1, (int **)&v7) & 1) == 0)
  {
LABEL_23:
    v18 = (void **)&v7;
    sub_20BFD6F90(&v18);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetDeletedItems(&v11, (_DWORD **)&v7);
  v18 = (void **)&v7;
  sub_20BFD6F90(&v18);
  v4 = v10;
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C317D10(a1, (int **)&v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SetOrderedItems(&v11, (_DWORD **)&v7);
      v18 = (void **)&v7;
      sub_20BFD6F90(&v18);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C0E2900(a2, (uint64_t)&v11);
  v5 = 1;
LABEL_25:
  v7 = &v17;
  sub_20BFD6F90((void ***)&v7);
  v7 = &v16;
  sub_20BFD6F90((void ***)&v7);
  v7 = &v15;
  sub_20BFD6F90((void ***)&v7);
  v7 = &v14;
  sub_20BFD6F90((void ***)&v7);
  v7 = &v13;
  sub_20BFD6F90((void ***)&v7);
  v7 = &v12;
  sub_20BFD6F90((void ***)&v7);
  return v5;
}

void sub_20C317CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20BFD6F90((void ***)(v6 - 40));
  sub_20BFD6A50((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C317D10(_QWORD *a1, int **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int *v14;
  char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;
  void **v20;

  v19 = 0;
  v4 = a1 + 1;
  if (!sub_20C2B72E8(a1 + 1, (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 16))(a1[1]);
  v6 = a1[3];
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    v14 = (int *)"usd/crateFile.cpp";
    v15 = "_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::SdfPath]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20C019C58(&v14, v19);
  v9 = sub_20C317E5C(a1, v14, v19);
  v10 = v9;
  if (&v14 == a2)
    v11 = 0;
  else
    v11 = v9;
  if ((v11 & 1) != 0)
    sub_20C0E29B0((uint64_t)a2, v14, v15, (v15 - (char *)v14) >> 3);
  v20 = (void **)&v14;
  sub_20BFD6F90(&v20);
  return v10;
}

void sub_20C317E44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 56) = v1;
  sub_20BFD6F90((void ***)(v2 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_20C317E5C(_QWORD *a1, int *a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int *v11;
  unsigned int v12;

  if (!a3)
    return 1;
  v6 = a1 + 1;
  v12 = -1;
  result = sub_20C2B72E8(a1 + 1, (uint64_t)&v12, 4uLL);
  if ((_DWORD)result)
  {
    v8 = 0;
    while (1)
    {
      v9 = *(_QWORD *)(*a1 + 96);
      v10 = v12 >= (unint64_t)((*(_QWORD *)(*a1 + 104) - v9) >> 3)
          ? pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)result)
          : (uint64_t *)(v9 + 8 * v12);
      sub_20C01A074(a2, v10);
      v11 = a2 + 1;
      sub_20C01A0C8(v11, (_DWORD *)v10 + 1);
      if (a3 - 1 == v8)
        break;
      v12 = -1;
      result = sub_20C2B72E8(v6, (uint64_t)&v12, 4uLL);
      a2 = v11 + 1;
      ++v8;
      if (!(_DWORD)result)
        return v8 >= a3;
    }
    return 1;
  }
  return result;
}

_QWORD *sub_20C317F54(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533930;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C318000(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5339B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3180AC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533A30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C318158(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533AB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C31820C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C318248(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C31826C(uint64_t a1, uint64_t a2)
{
  return sub_20C3182BC((char ***)(a1 + 8), a2);
}

uint64_t sub_20C318274(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533990))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3182B0()
{
  return &unk_24C533990;
}

uint64_t sub_20C3182BC(char ***a1, uint64_t a2)
{
  char **v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = (*a1)[791];
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *(unsigned __int8 **)a2;
  return sub_20C318314(v3, v2, (char **)v4 + 32, v6);
}

uint64_t sub_20C318314(uint64_t *a1, char **a2, char **a3, unsigned __int8 *a4)
{
  uint64_t v7;
  _OWORD *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char **v20[2];
  void **v21;

  v20[0] = a2;
  v20[1] = a3;
  sub_20C02BDC4((uint64_t)&v13, (uint64_t)a4);
  v21 = (void **)&v19;
  sub_20C021740(&v21);
  v21 = (void **)&v18;
  sub_20C021740(&v21);
  v21 = (void **)&v17;
  sub_20C021740(&v21);
  v21 = (void **)&v16;
  sub_20C021740(&v21);
  v21 = (void **)&v15;
  sub_20C021740(&v21);
  v21 = (void **)&v14;
  sub_20C021740(&v21);
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B4894(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v21 = 0;
  v9 = sub_20C318560(v7, a4, (uint64_t)a4, &v21);
  v10 = v9;
  if (v11)
  {
    *((_QWORD *)v9 + 21) = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x23000000000000;
    sub_20C31842C(v20, (uint64_t *)a4);
  }
  return *((_QWORD *)v10 + 21);
}

uint64_t sub_20C31842C(char ***a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  void *__p[2];
  char v8;
  char __src;

  sub_20C312E3C(&__src, (uint64_t)a2);
  if ((__src & 0x60) != 0)
  {
    v4 = (uint64_t)(*a1)[791];
    sub_20BDDC0E4(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_20C312C5C(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  result = sub_20C2DC688((uint64_t)a1, &__src);
  v6 = __src;
  if ((__src & 2) != 0)
  {
    result = sub_20C3188E0(a1, a2 + 1);
    v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  result = sub_20C3188E0(a1, a2 + 4);
  v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  result = sub_20C3188E0(a1, a2 + 7);
  v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  result = sub_20C3188E0(a1, a2 + 10);
  v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0)
      return result;
    return sub_20C3188E0(a1, a2 + 16);
  }
LABEL_16:
  result = sub_20C3188E0(a1, a2 + 13);
  if ((__src & 0x10) == 0)
    return result;
  return sub_20C3188E0(a1, a2 + 16);
}

void sub_20C318544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20C318560(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unsigned __int8 **v22;
  unint64_t v23;
  unsigned __int8 *v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C02C36C((unint64_t)&v25, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::operator==(i + 16, a2) & 1) != 0)return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  sub_20C318814(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *(_QWORD *)v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25)
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  i = v25;
  v25 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C31889C((uint64_t)&v25, 0);
  return i;
}

void sub_20C3187FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C31889C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C318814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0xB0uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C02BDC4((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C318884(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C31889C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C31889C(uint64_t a1, uint64_t a2)
{
  void **v2;

  v2 = *(void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C2B4934(v2 + 2);
    operator delete(v2);
  }
}

uint64_t sub_20C3188E0(char ***a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t __src;

  __src = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 3);
  result = sub_20C2B7248((uint64_t)a1, (char *)&__src);
  v5 = *a2;
  v6 = a2[1] - *a2;
  if (v6)
  {
    v7 = 56 * (v6 / 56);
    do
    {
      result = (uint64_t)sub_20C318984(a1, v5);
      v5 += 56;
      v7 -= 56;
    }
    while (v7);
  }
  return result;
}

_QWORD *sub_20C318984(char ***a1, uint64_t a2)
{
  uint64_t __src;

  LODWORD(__src) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a1, (unsigned __int8 *)a2);
  sub_20C2CE770((uint64_t)a1, (char *)&__src);
  LODWORD(__src) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)*a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24));
  sub_20C2CE770((uint64_t)a1, (char *)&__src);
  __src = *(_QWORD *)(a2 + 32);
  sub_20C2B7248((uint64_t)a1, (char *)&__src);
  __src = *(_QWORD *)(a2 + 40);
  sub_20C2B7248((uint64_t)a1, (char *)&__src);
  return sub_20C3106D4(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)(a2 + 48));
}

__n128 sub_20C318A1C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5339B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C318A58(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5339B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C318A7C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C318B0C(v5, &v10, v3, v4);
}

uint64_t sub_20C318AC4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533A10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C318B00()
{
  return &unk_24C533A10;
}

void sub_20C318B0C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v9 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C318BF4((uint64_t *)&v8, v11);
  }
  sub_20C02BF80(a4, v11);
  v18 = (void **)&v17;
  sub_20C021740(&v18);
  v18 = (void **)&v16;
  sub_20C021740(&v18);
  v18 = (void **)&v15;
  sub_20C021740(&v18);
  v18 = (void **)&v14;
  sub_20C021740(&v18);
  v18 = (void **)&v13;
  sub_20C021740(&v18);
  v18 = (void **)&v12;
  sub_20C021740(&v18);
}

void sub_20C318BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C029B80((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C318BF4(uint64_t *a1, _BYTE *a2)
{
  char p;
  uint64_t v5;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  __sFILE v10;
  __int128 **v11;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)&v10._p + 1);
  LOBYTE(v10._p) = 0;
  if (!sub_20C3133E4((uint64_t)(a1 + 1), 0, &v10))
    goto LABEL_24;
  p = (char)v10._p;
  if (((uint64_t)v10._p & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ClearAndMakeExplicit((unsigned __int8 *)&v10._p + 1);
    p = (char)v10._p;
  }
  if ((p & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C318EA0(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems((unsigned __int8 *)&v10._p + 1, &v7);
    v11 = &v7;
    sub_20C021740((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C318EA0(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAddedItems((unsigned __int8 *)&v10._p + 1, &v7);
    v11 = &v7;
    sub_20C021740((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C318EA0(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetPrependedItems((unsigned __int8 *)&v10._p + 1, &v7);
    v11 = &v7;
    sub_20C021740((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C318EA0(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems((unsigned __int8 *)&v10._p + 1, &v7);
    v11 = &v7;
    sub_20C021740((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C318EA0(a1, &v7) & 1) == 0)
  {
LABEL_23:
    v11 = &v7;
    sub_20C021740((void ***)&v11);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetDeletedItems((unsigned __int8 *)&v10._p + 1, &v7);
  v11 = &v7;
  sub_20C021740((void ***)&v11);
  p = (char)v10._p;
LABEL_19:
  if ((p & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C318EA0(a1, &v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetOrderedItems((unsigned __int8 *)&v10._p + 1, &v7);
      v11 = &v7;
      sub_20C021740((void ***)&v11);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C0E2ECC(a2, (uint64_t)&v10._p + 1);
  v5 = 1;
LABEL_25:
  v7 = (__int128 *)((char *)&v10._lb._size + 1);
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)((char *)&v10._extra + 1);
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)((char *)&v10._write + 1);
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)((char *)&v10._close + 1);
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)((char *)&v10._bf._size + 1);
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)((char *)&v10._r + 1);
  sub_20C021740((void ***)&v7);
  return v5;
}

void sub_20C318E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20C021740((void ***)(v6 - 40));
  sub_20C029B80((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C318EA0(uint64_t *a1, __int128 **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  const char *v16;
  char v17;
  unint64_t v18;
  __int128 **v19;

  v18 = 0;
  if (!sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&v18))
    return 0;
  v5 = a1[2];
  v4 = a1[3];
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v18 > v6)
  {
    v13 = (__int128 *)"usd/crateFile.cpp";
    v14 = (__int128 *)"_Read";
    v15 = 1189;
    v16 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::SdfReference]";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v18, v6, v4);
    return 0;
  }
  sub_20C31901C(&v13, v18);
  v7 = v18;
  if (!v18)
    goto LABEL_10;
  v8 = 0;
  v9 = 0;
  v10 = v13;
  do
  {
    if (!sub_20C3191D8(a1, (uint64_t)v10))
      break;
    ++v9;
    v10 = (__int128 *)((char *)v10 + 56);
    v8 = v9 >= v7;
  }
  while (v7 != v9);
  if (!v8)
  {
    v11 = 0;
  }
  else
  {
LABEL_10:
    if (&v13 != a2)
      sub_20C0E2FAC((uint64_t)a2, v13, v14, 0x6DB6DB6DB6DB6DB7 * (((char *)v14 - (char *)v13) >> 3));
    v11 = 1;
  }
  v19 = &v13;
  sub_20C021740((void ***)&v19);
  return v11;
}

void sub_20C318FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_20C021740(&a18);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C31901C(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE1B554(a1, a2);
    sub_20C319084((uint64_t)a1, a2);
  }
  return a1;
}

void sub_20C319070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C021740(&a9);
  _Unwind_Resume(a1);
}

void sub_20C319084(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
    v4 = v3 + 56 * a2;
    v5 = 56 * a2;
    do
    {
      sub_20C3190F4(a1 + 16, v3);
      v3 += 56;
      v5 -= 56;
    }
    while (v5);
    v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3;
}

void sub_20C3190EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C3190F4(uint64_t a1, uint64_t a2)
{
  _QWORD **v3;
  double v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;

  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v5 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v4, 0.0, 1.0);
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(a2, __p, &v5, v4, &v3);
  sub_20BF49F14(&v3, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v5 + 1);
  sub_20BFD265C(&v5);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20C3191A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, uint64_t a11, uint64_t a12, int a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20BF49F14(&a10, 0);
  sub_20BFD1A18(&a13);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3191D8(uint64_t *a1, uint64_t a2)
{
  uint64_t *EmptyToken;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  const std::string *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD **cookie;
  uint64_t v17;
  __sFILE __p;

  memset(&__p._ub, 0, 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__p._write);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__p._write + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&__p._read, 0.0, 1.0);
  __p._close = 0;
  LODWORD(__p._p) = -1;
  EmptyToken = (uint64_t *)sub_20C2CEB84((uint64_t)(a1 + 1), 0, &__p);
  if (!(_DWORD)EmptyToken)
    goto LABEL_19;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 144);
  if (LODWORD(__p._p) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v6) >> 2))
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
    v12 = (const std::string *)&qword_254988388;
  }
  else
  {
    v7 = *(unsigned int *)(v6 + 4 * LODWORD(__p._p));
    v9 = v5 + 120;
    v8 = *(_QWORD *)(v5 + 120);
    if (v7 >= (*(_QWORD *)(v9 + 8) - v8) >> 3)
    {
      EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
      v10 = &qword_2549883A8;
    }
    else
    {
      v10 = (uint64_t *)(v8 + 8 * v7);
    }
    v11 = *v10 & 0xFFFFFFFFFFFFFFF8;
    v12 = v11
        ? (const std::string *)(v11 + 16)
        : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
  }
  std::string::operator=((std::string *)&__p._ub, v12);
  LODWORD(__p._p) = -1;
  v13 = sub_20C2CEB84((uint64_t)(a1 + 1), 0, &__p);
  if (!v13)
    goto LABEL_19;
  v14 = *(_QWORD *)(*a1 + 96);
  v15 = LODWORD(__p._p) >= (unint64_t)((*(_QWORD *)(*a1 + 104) - v14) >> 3)
      ? pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v13)
      : (uint64_t *)(v14 + 8 * LODWORD(__p._p));
  sub_20C01A074((int *)&__p._write, v15);
  sub_20C01A0C8((int *)&__p._write + 1, (_DWORD *)v15 + 1);
  *(_QWORD *)&__p._ur = 0;
  __p._lb._base = 0;
  if (sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&__p._lb)
    && sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&__p._ur)
    && (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&__p, *(double *)&__p._lb._base, *(double *)&__p._ur), *(_OWORD *)&__p._read = *(_OWORD *)&__p._p, sub_20C310A48(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&__p._close)))
  {
    pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(&__p, &__p._ub, &__p._write, &__p._read, &__p._close);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)&__p._p;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&__p._flags;
    *((_BYTE *)&__p._file + 5) = 0;
    LOBYTE(__p._p) = 0;
    sub_20BFD3EBC((int *)(a2 + 24), (int *)&__p._bf);
    sub_20BFD3F10((int *)(a2 + 28), (int *)&__p._bf._base + 1);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)&__p._bf._size;
    cookie = (_QWORD **)__p._cookie;
    __p._cookie = 0;
    sub_20BF49F14((_QWORD ***)(a2 + 48), cookie);
    sub_20BF49F14((_QWORD ***)&__p._cookie, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p._bf._base + 1);
    sub_20BFD265C(&__p._bf);
    if (*((char *)&__p._file + 5) < 0)
      operator delete(__p._p);
    v17 = 1;
  }
  else
  {
LABEL_19:
    v17 = 0;
  }
  sub_20BF49F14((_QWORD ***)&__p._close, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p._write + 1);
  sub_20BFD265C(&__p._write);
  if (SHIBYTE(__p._extra) < 0)
    operator delete(__p._ub._base);
  return v17;
}

void sub_20C319478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD **a16, uint64_t a17, uint64_t a18, int a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_20BF49F14(&a16, 0);
  sub_20BFD1A18(&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_20C3194C0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3194FC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C319520(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C319570((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C319528(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533A90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C319564()
{
  return &unk_24C533A90;
}

void sub_20C319570(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C3195EC(v5, &v9, v3, v4);
}

void sub_20C3195EC(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C3196E4((uint64_t)&v8, v11);
  }
  sub_20C02BF80(a4, v11);
  v18 = (void **)&v17;
  sub_20C021740(&v18);
  v18 = (void **)&v16;
  sub_20C021740(&v18);
  v18 = (void **)&v15;
  sub_20C021740(&v18);
  v18 = (void **)&v14;
  sub_20C021740(&v18);
  v18 = (void **)&v13;
  sub_20C021740(&v18);
  v18 = (void **)&v12;
  sub_20C021740(&v18);
}

void sub_20C3196D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C029B80((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3196E4(uint64_t a1, _BYTE *a2)
{
  char v4;
  uint64_t v5;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  char __dst;
  unsigned __int8 v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v11);
  __dst = 0;
  if ((sub_20C2B9BEC(a1 + 8, &__dst, 1uLL) & 1) == 0)
    goto LABEL_24;
  v4 = __dst;
  if ((__dst & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ClearAndMakeExplicit(v11);
    v4 = __dst;
  }
  if ((v4 & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C319990(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems(v11, &v7);
    v18 = &v7;
    sub_20C021740((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C319990(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAddedItems(v11, &v7);
    v18 = &v7;
    sub_20C021740((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C319990(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetPrependedItems(v11, &v7);
    v18 = &v7;
    sub_20C021740((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C319990(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems(v11, &v7);
    v18 = &v7;
    sub_20C021740((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C319990(a1, &v7) & 1) == 0)
  {
LABEL_23:
    v18 = &v7;
    sub_20C021740((void ***)&v18);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetDeletedItems(v11, &v7);
  v18 = &v7;
  sub_20C021740((void ***)&v18);
  v4 = __dst;
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C319990(a1, &v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetOrderedItems(v11, &v7);
      v18 = &v7;
      sub_20C021740((void ***)&v18);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C0E2ECC(a2, (uint64_t)v11);
  v5 = 1;
LABEL_25:
  v7 = (__int128 *)&v17;
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)&v16;
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)&v15;
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)&v14;
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)&v13;
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)&v12;
  sub_20C021740((void ***)&v7);
  return v5;
}

void sub_20C319954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20C021740((void ***)(v6 - 40));
  sub_20C029B80((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C319990(uint64_t a1, __int128 **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  const char *v16;
  char v17;
  unint64_t __dst;
  __int128 **v19;

  __dst = 0;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    v13 = (__int128 *)"usd/crateFile.cpp";
    v14 = (__int128 *)"_Read";
    v15 = 1189;
    v16 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfReference]";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_20C31901C(&v13, __dst);
  v7 = __dst;
  if (!__dst)
    goto LABEL_10;
  v8 = 0;
  v9 = 0;
  v10 = v13;
  do
  {
    if (!sub_20C319B18(a1, (uint64_t)v10))
      break;
    ++v9;
    v10 = (__int128 *)((char *)v10 + 56);
    v8 = v9 >= v7;
  }
  while (v7 != v9);
  if (!v8)
  {
    v11 = 0;
  }
  else
  {
LABEL_10:
    if (&v13 != a2)
      sub_20C0E2FAC((uint64_t)a2, v13, v14, 0x6DB6DB6DB6DB6DB7 * (((char *)v14 - (char *)v13) >> 3));
    v11 = 1;
  }
  v19 = &v13;
  sub_20C021740((void ***)&v19);
  return v11;
}

void sub_20C319AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_20C021740(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20C319B18(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *EmptyToken;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  const std::string *v12;
  pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD **v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  _QWORD **v24;
  _QWORD **v25;
  __int128 v26;
  int v27;
  int v28;
  std::string v29;
  double v30;
  double __dst;

  memset(&v29, 0, sizeof(v29));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v28);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v26, 0.0, 1.0);
  v25 = 0;
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B9BEC(a1 + 8, __p, 4uLL);
  if (!(_DWORD)EmptyToken)
    goto LABEL_19;
  v5 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 144);
  if (LODWORD(__p[0]) >= (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 152) - v6) >> 2))
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
    v12 = (const std::string *)&qword_254988388;
  }
  else
  {
    v7 = *(unsigned int *)(v6 + 4 * LODWORD(__p[0]));
    v9 = v5 + 120;
    v8 = *(_QWORD *)(v5 + 120);
    if (v7 >= (*(_QWORD *)(v9 + 8) - v8) >> 3)
    {
      EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
      v10 = &qword_2549883A8;
    }
    else
    {
      v10 = (uint64_t *)(v8 + 8 * v7);
    }
    v11 = *v10 & 0xFFFFFFFFFFFFFFF8;
    v12 = v11
        ? (const std::string *)(v11 + 16)
        : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
  }
  std::string::operator=(&v29, v12);
  LODWORD(__p[0]) = -1;
  v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2B9BEC(a1 + 8, __p, 4uLL);
  if (!(_DWORD)v13)
    goto LABEL_19;
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 96);
  v15 = LODWORD(__p[0]) >= (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 104) - v14) >> 3)
      ? pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v13)
      : (uint64_t *)(v14 + 8 * LODWORD(__p[0]));
  sub_20C01A074(&v27, v15);
  sub_20C01A0C8(&v28, (_DWORD *)v15 + 1);
  v30 = 0.0;
  __dst = 0.0;
  if (sub_20C2B9BEC(a1 + 8, &__dst, 8uLL)
    && sub_20C2B9BEC(a1 + 8, &v30, 8uLL)
    && (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, __dst, v30),
        v26 = *(_OWORD *)__p,
        sub_20C311890(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v25)))
  {
    pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__p, &v29, &v27, &v26, &v25);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v20;
    HIBYTE(v20) = 0;
    LOBYTE(__p[0]) = 0;
    sub_20BFD3EBC((int *)(a2 + 24), &v21);
    sub_20BFD3F10((int *)(a2 + 28), &v22);
    *(_OWORD *)(a2 + 32) = v23;
    v16 = v24;
    v24 = 0;
    sub_20BF49F14((_QWORD ***)(a2 + 48), v16);
    sub_20BF49F14(&v24, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_20BFD265C(&v21);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    v17 = 1;
  }
  else
  {
LABEL_19:
    v17 = 0;
  }
  sub_20BF49F14(&v25, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  return v17;
}

void sub_20C319DB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD **a16, uint64_t a17, uint64_t a18, int a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_20BF49F14(&a16, 0);
  sub_20BFD1A18(&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_20C319E00(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C319E3C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C319E60(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C319EB8((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C319E70(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533B10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C319EAC()
{
  return &unk_24C533B10;
}

void sub_20C319EB8(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C319FD4(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C319FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C319FD4(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v15);
  v12 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v13 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v14 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v14 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C31A12C((uint64_t *)&v12, v15);
    v7 = v13;
  }
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_20C02BF80(a4, v15);
  v22 = (void **)&v21;
  sub_20C021740(&v22);
  v22 = (void **)&v20;
  sub_20C021740(&v22);
  v22 = (void **)&v19;
  sub_20C021740(&v22);
  v22 = (void **)&v18;
  sub_20C021740(&v22);
  v22 = (void **)&v17;
  sub_20C021740(&v22);
  v22 = (void **)&v16;
  sub_20C021740(&v22);
}

void sub_20C31A108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  sub_20C029B80(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31A12C(uint64_t *a1, _BYTE *a2)
{
  char v4;
  uint64_t v5;
  __int128 *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)v11);
  v10 = 0;
  if ((sub_20C2B72E8(a1 + 1, (uint64_t)&v10, 1uLL) & 1) == 0)
    goto LABEL_24;
  v4 = v10;
  if ((v10 & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ClearAndMakeExplicit(v11);
    v4 = v10;
  }
  if ((v4 & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C31A3D8(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetExplicitItems(v11, &v7);
    v18 = &v7;
    sub_20C021740((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C31A3D8(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAddedItems(v11, &v7);
    v18 = &v7;
    sub_20C021740((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C31A3D8(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetPrependedItems(v11, &v7);
    v18 = &v7;
    sub_20C021740((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C31A3D8(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetAppendedItems(v11, &v7);
    v18 = &v7;
    sub_20C021740((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C31A3D8(a1, &v7) & 1) == 0)
  {
LABEL_23:
    v18 = &v7;
    sub_20C021740((void ***)&v18);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetDeletedItems(v11, &v7);
  v18 = &v7;
  sub_20C021740((void ***)&v18);
  v4 = v10;
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C31A3D8(a1, &v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SetOrderedItems(v11, &v7);
      v18 = &v7;
      sub_20C021740((void ***)&v18);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C0E2ECC(a2, (uint64_t)v11);
  v5 = 1;
LABEL_25:
  v7 = (__int128 *)&v17;
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)&v16;
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)&v15;
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)&v14;
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)&v13;
  sub_20C021740((void ***)&v7);
  v7 = (__int128 *)&v12;
  sub_20C021740((void ***)&v7);
  return v5;
}

void sub_20C31A39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20C021740((void ***)(v6 - 40));
  sub_20C029B80((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31A3D8(uint64_t *a1, __int128 **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  unint64_t v21;
  __int128 **v22;

  v21 = 0;
  v4 = a1 + 1;
  if (!sub_20C2B72E8(a1 + 1, (uint64_t)&v21, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 16))(a1[1]);
  v6 = a1[3];
  v7 = v5 - v6;
  v8 = v21;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v21 > v7)
  {
    v16 = (__int128 *)"usd/crateFile.cpp";
    v17 = (__int128 *)"_Read";
    v18 = 1189;
    v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::SdfReference]";
    v20 = 0;
    v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v14);
    return 0;
  }
  sub_20C31901C(&v16, v21);
  v9 = v21;
  if (!v21)
    goto LABEL_10;
  v10 = 0;
  v11 = 0;
  v12 = v16;
  do
  {
    if (!sub_20C31A57C(a1, (uint64_t)v12))
      break;
    ++v11;
    v12 = (__int128 *)((char *)v12 + 56);
    v10 = v11 >= v9;
  }
  while (v9 != v11);
  if (!v10)
  {
    v13 = 0;
  }
  else
  {
LABEL_10:
    if (&v16 != a2)
      sub_20C0E2FAC((uint64_t)a2, v16, v17, 0x6DB6DB6DB6DB6DB7 * (((char *)v17 - (char *)v16) >> 3));
    v13 = 1;
  }
  v22 = &v16;
  sub_20C021740((void ***)&v22);
  return v13;
}

void sub_20C31A55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_20C021740(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31A57C(uint64_t *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *EmptyToken;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  const std::string *v12;
  pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD **v16;
  uint64_t v17;
  void *__p[2];
  uint64_t v20;
  int v21;
  int v22;
  __int128 v23;
  _QWORD **v24;
  _QWORD **v25;
  __int128 v26;
  int v27;
  int v28;
  std::string v29;
  double v30;
  double v31;

  memset(&v29, 0, sizeof(v29));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v28);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v26, 0.0, 1.0);
  v25 = 0;
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B72E8(a1 + 1, (uint64_t)__p, 4uLL);
  if (!(_DWORD)EmptyToken)
    goto LABEL_19;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 144);
  if (LODWORD(__p[0]) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v6) >> 2))
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
    v12 = (const std::string *)&qword_254988388;
  }
  else
  {
    v7 = *(unsigned int *)(v6 + 4 * LODWORD(__p[0]));
    v9 = v5 + 120;
    v8 = *(_QWORD *)(v5 + 120);
    if (v7 >= (*(_QWORD *)(v9 + 8) - v8) >> 3)
    {
      EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
      v10 = &qword_2549883A8;
    }
    else
    {
      v10 = (uint64_t *)(v8 + 8 * v7);
    }
    v11 = *v10 & 0xFFFFFFFFFFFFFFF8;
    v12 = v11
        ? (const std::string *)(v11 + 16)
        : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
  }
  std::string::operator=(&v29, v12);
  LODWORD(__p[0]) = -1;
  v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2B72E8(a1 + 1, (uint64_t)__p, 4uLL);
  if (!(_DWORD)v13)
    goto LABEL_19;
  v14 = *(_QWORD *)(*a1 + 96);
  v15 = LODWORD(__p[0]) >= (unint64_t)((*(_QWORD *)(*a1 + 104) - v14) >> 3)
      ? pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v13)
      : (uint64_t *)(v14 + 8 * LODWORD(__p[0]));
  sub_20C01A074(&v27, v15);
  sub_20C01A0C8(&v28, (_DWORD *)v15 + 1);
  v30 = 0.0;
  v31 = 0.0;
  if (sub_20C2B72E8(a1 + 1, (uint64_t)&v31, 8uLL)
    && sub_20C2B72E8(a1 + 1, (uint64_t)&v30, 8uLL)
    && (pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, v31, v30),
        v26 = *(_OWORD *)__p,
        sub_20C311F58(a1, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v25)))
  {
    pxrInternal__aapl__pxrReserved__::SdfReference::SdfReference(__p, &v29, &v27, &v26, &v25);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v20;
    HIBYTE(v20) = 0;
    LOBYTE(__p[0]) = 0;
    sub_20BFD3EBC((int *)(a2 + 24), &v21);
    sub_20BFD3F10((int *)(a2 + 28), &v22);
    *(_OWORD *)(a2 + 32) = v23;
    v16 = v24;
    v24 = 0;
    sub_20BF49F14((_QWORD ***)(a2 + 48), v16);
    sub_20BF49F14(&v24, 0);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
    sub_20BFD265C(&v21);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    v17 = 1;
  }
  else
  {
LABEL_19:
    v17 = 0;
  }
  sub_20BF49F14(&v25, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
  sub_20BFD265C(&v27);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  return v17;
}

void sub_20C31A81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD **a16, uint64_t a17, uint64_t a18, int a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_20BF49F14(&a16, 0);
  sub_20BFD1A18(&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C31A85C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533B30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31A908(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533BB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31A9B4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533C30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31AA60(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533CB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C31AB14(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31AB50(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C31AB74(uint64_t a1, uint64_t a2)
{
  return sub_20C31ABC4((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_20C31AB7C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533B90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31ABB8()
{
  return &unk_24C533B90;
}

uint64_t sub_20C31ABC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = *(_QWORD *)(*a1 + 6328);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *(unsigned __int8 **)a2;
  return sub_20C31AC1C(v3, v2, (_QWORD *)(v4 + 256), v6);
}

uint64_t sub_20C31AC1C(uint64_t *a1, uint64_t a2, _QWORD *a3, unsigned __int8 *a4)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t v13;
  _BYTE v14[8];
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *__p;
  void *v26;
  _QWORD v27[2];

  v27[0] = a2;
  v27[1] = a3;
  sub_20C031ADC((uint64_t)v14, (uint64_t)a4);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B4B70(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v13 = 0;
  v9 = sub_20C31AE64(v7, a4, (uint64_t)a4, &v13);
  v10 = v9;
  if (v11)
  {
    v9[21] = *a3 & 0xFFFFFFFFFFFFLL | 0x24000000000000;
    sub_20C31AD30((uint64_t)v27, (uint64_t)a4);
  }
  return v10[21];
}

uint64_t sub_20C31AD30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  void *__p[2];
  char v8;
  char __src;

  sub_20C312E3C(&__src, a2);
  if ((__src & 0x60) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 6328);
    sub_20BDDC0E4(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_20C312C5C(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  result = sub_20C2DC688(a1, &__src);
  v6 = __src;
  if ((__src & 2) != 0)
  {
    result = sub_20C2A918C(a1, a2 + 8);
    v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  result = sub_20C2A918C(a1, a2 + 32);
  v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  result = sub_20C2A918C(a1, a2 + 56);
  v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  result = sub_20C2A918C(a1, a2 + 80);
  v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0)
      return result;
    return sub_20C2A918C(a1, a2 + 128);
  }
LABEL_16:
  result = sub_20C2A918C(a1, a2 + 104);
  if ((__src & 0x10) == 0)
    return result;
  return sub_20C2A918C(a1, a2 + 128);
}

void sub_20C31AE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C31AE64(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C032040((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (pxrInternal__aapl__pxrReserved__::SdfListOp<int>::operator==(v14 + 2, a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_20C31B118(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      v23 = *(_QWORD *)(*v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  v14 = v25;
  v25 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C31B1A0((uint64_t)&v25, 0);
  return v14;
}

void sub_20C31B100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C31B1A0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31B118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0xB0uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C031ADC((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C31B188(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C31B1A0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C31B1A0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C2B4C10(v2 + 2);
    operator delete(v2);
  }
}

__n128 sub_20C31B1EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533BB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31B228(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533BB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C31B24C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C31B2DC(v5, &v10, v3, v4);
}

uint64_t sub_20C31B294(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533C10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31B2D0()
{
  return &unk_24C533C10;
}

void sub_20C31B2DC(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v9 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C31B3C0((uint64_t)&v8, v11);
  }
  sub_20C031C5C(a4, v11);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_20C31B3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C031968((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31B3C0(uint64_t a1, char *a2)
{
  char p;
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  __sFILE v10;

  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp((uint64_t)&v10._p + 1);
  LOBYTE(v10._p) = 0;
  if (sub_20C3133E4(a1 + 8, 0, &v10))
  {
    p = (char)v10._p;
    if (((uint64_t)v10._p & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ClearAndMakeExplicit((uint64_t)&v10._p + 1);
      p = (char)v10._p;
    }
    if ((p & 2) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C31B6FC(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 4) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C31B6FC(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAddedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 0x20) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C31B6FC(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetPrependedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 0x40) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C31B6FC(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 8) == 0)
    {
LABEL_29:
      if ((p & 0x10) == 0)
      {
LABEL_33:
        sub_20C31B64C(a2, (uint64_t)&v10._p + 1);
        v5 = 1;
        goto LABEL_37;
      }
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (sub_20C31B6FC(a1, &__p))
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetOrderedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
        if (__p)
        {
          v8 = __p;
          operator delete(__p);
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    __p = 0;
    v8 = 0;
    v9 = 0;
    if (sub_20C31B6FC(a1, &__p))
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetDeletedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
      goto LABEL_29;
    }
LABEL_34:
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  v5 = 0;
LABEL_37:
  if (*(_QWORD *)((char *)&v10._lb._size + 1))
  {
    *(_QWORD *)((char *)&v10._blksize + 1) = *(_QWORD *)((char *)&v10._lb._size + 1);
    operator delete(*(void **)((char *)&v10._lb._size + 1));
  }
  if (*(__sFILEX **)((char *)&v10._extra + 1))
  {
    *(_QWORD *)((char *)&v10._ur + 1) = *(__sFILEX **)((char *)&v10._extra + 1);
    operator delete(*(void **)((char *)&v10._extra + 1));
  }
  if (*(int (__cdecl **)(void *, const char *, int))((char *)&v10._write + 1))
  {
    *(unsigned __int8 **)((char *)&v10._ub._base + 1) = *(unsigned __int8 **)((char *)&v10._write + 1);
    operator delete(*(void **)((char *)&v10._write + 1));
  }
  if (*(int (__cdecl **)(void *))((char *)&v10._close + 1))
  {
    *(int (__cdecl **)(void *, char *, int))((char *)&v10._read + 1) = *(int (__cdecl **)(void *, char *, int))((char *)&v10._close + 1);
    operator delete(*(void **)((char *)&v10._close + 1));
  }
  if (*(_QWORD *)((char *)&v10._bf._size + 1))
  {
    *(_QWORD *)((char *)&v10._lbfsize + 1) = *(_QWORD *)((char *)&v10._bf._size + 1);
    operator delete(*(void **)((char *)&v10._bf._size + 1));
  }
  if (*(_QWORD *)((char *)&v10._r + 1))
  {
    *(_QWORD *)((char *)&v10._flags + 1) = *(_QWORD *)((char *)&v10._r + 1);
    operator delete(*(void **)((char *)&v10._r + 1));
  }
  return v5;
}

void sub_20C31B60C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

char *sub_20C31B64C(char *a1, uint64_t a2)
{
  *a1 = *(_BYTE *)a2;
  if (a1 != (char *)a2)
  {
    sub_20BE8B37C(a1 + 8, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
    sub_20BE8B37C(a1 + 32, *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
    sub_20BE8B37C(a1 + 56, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    sub_20BE8B37C(a1 + 80, *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
    sub_20BE8B37C(a1 + 104, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
    sub_20BE8B37C(a1 + 128, *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
  }
  return a1;
}

BOOL sub_20C31B6FC(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  void *__p;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __p = "usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = int]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20BDE39A0(&__p, v16);
  v7 = sub_20C2C1DF0(a1, (__sFILE *)__p, v16);
  v8 = v7;
  if (&__p != a2 && v7)
    sub_20BE8B37C((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_20C31B800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C31B824(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533C30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31B860(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533C30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C31B884(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C31B8D4((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C31B88C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533C90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31B8C8()
{
  return &unk_24C533C90;
}

void sub_20C31B8D4(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C31B950(v5, &v9, v3, v4);
}

void sub_20C31B950(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C31BA44((uint64_t)&v8, v11);
  }
  sub_20C031C5C(a4, v11);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_20C31BA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C031968((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31BA44(uint64_t a1, char *a2)
{
  char v4;
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  char __dst;
  _BYTE v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp((uint64_t)v11);
  __dst = 0;
  if ((sub_20C2B9BEC(a1 + 8, &__dst, 1uLL) & 1) != 0)
  {
    v4 = __dst;
    if ((__dst & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ClearAndMakeExplicit((uint64_t)v11);
      v4 = __dst;
    }
    if ((v4 & 2) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31BCD0(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 4) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31BCD0(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAddedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 0x20) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31BCD0(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetPrependedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 0x40) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31BCD0(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 8) == 0)
    {
LABEL_29:
      if ((v4 & 0x10) == 0)
      {
LABEL_33:
        sub_20C31B64C(a2, (uint64_t)v11);
        v5 = 1;
        goto LABEL_37;
      }
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31BCD0(a1, &__p) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetOrderedItems((uint64_t)v11, (uint64_t)&__p);
        if (__p)
        {
          v8 = __p;
          operator delete(__p);
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    __p = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C31BCD0(a1, &__p) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetDeletedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
      goto LABEL_29;
    }
LABEL_34:
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  v5 = 0;
LABEL_37:
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  return v5;
}

void sub_20C31BC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31BCD0(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *__p;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  unint64_t __dst;

  __dst = 0;
  v4 = a1 + 8;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __p = "usd/crateFile.cpp";
    v13 = "_Read";
    v14 = 1189;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = int]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_20BDE39A0(&__p, __dst);
  v8 = sub_20C2B9BEC(v4, __p, 4 * __dst);
  v9 = v8;
  if (&__p == a2)
    v10 = 0;
  else
    v10 = v8;
  if ((v10 & 1) != 0)
    sub_20BE8B37C((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_20C31BDE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C31BE0C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31BE48(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C31BE6C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C31BEC4((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C31BE7C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533D10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31BEB8()
{
  return &unk_24C533D10;
}

void sub_20C31BEC4(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C31BFE0(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C31BFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C31BFE0(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char v15[8];
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *__p;
  void *v27;

  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp((uint64_t)v15);
  v12 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v13 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v14 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v14 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C31C134((uint64_t)&v12, v15);
    v7 = v13;
  }
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_20C031C5C(a4, v15);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
}

void sub_20C31C110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v14;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v14);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31C134(uint64_t a1, char *a2)
{
  char v4;
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  char v10;
  _BYTE v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SdfListOp((uint64_t)v11);
  v10 = 0;
  if ((sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v10, 1uLL) & 1) != 0)
  {
    v4 = v10;
    if ((v10 & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::ClearAndMakeExplicit((uint64_t)v11);
      v4 = v10;
    }
    if ((v4 & 2) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31C3C0(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetExplicitItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 4) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31C3C0(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAddedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 0x20) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31C3C0(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetPrependedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 0x40) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31C3C0(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetAppendedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 8) == 0)
    {
LABEL_29:
      if ((v4 & 0x10) == 0)
      {
LABEL_33:
        sub_20C31B64C(a2, (uint64_t)v11);
        v5 = 1;
        goto LABEL_37;
      }
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31C3C0(a1, &__p) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetOrderedItems((uint64_t)v11, (uint64_t)&__p);
        if (__p)
        {
          v8 = __p;
          operator delete(__p);
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    __p = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C31C3C0(a1, &__p) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<int>::SetDeletedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
      goto LABEL_29;
    }
LABEL_34:
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  v5 = 0;
LABEL_37:
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  return v5;
}

void sub_20C31C380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31C3C0(uint64_t a1, void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;

  v19 = 0;
  v4 = (_QWORD *)(a1 + 8);
  if (!sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __p = "usd/crateFile.cpp";
    v15 = "_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = int]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20BDE39A0(&__p, v19);
  v9 = sub_20C2B72E8(v4, (uint64_t)__p, 4 * v19);
  v10 = v9;
  if (&__p == a2)
    v11 = 0;
  else
    v11 = v9;
  if ((v11 & 1) != 0)
    sub_20BE8B37C((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_20C31C4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C31C50C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533D30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31C5B8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533DB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31C664(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533E30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31C710(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533EB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C31C7C4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533D30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31C800(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533D30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C31C824(uint64_t a1, uint64_t a2)
{
  return sub_20C31C874((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_20C31C82C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533D90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31C868()
{
  return &unk_24C533D90;
}

uint64_t sub_20C31C874(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = *(_QWORD *)(*a1 + 6328);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *(unsigned __int8 **)a2;
  return sub_20C31C8CC(v3, v2, (_QWORD *)(v4 + 256), v6);
}

uint64_t sub_20C31C8CC(uint64_t *a1, uint64_t a2, _QWORD *a3, unsigned __int8 *a4)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t v13;
  _BYTE v14[8];
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *__p;
  void *v26;
  _QWORD v27[2];

  v27[0] = a2;
  v27[1] = a3;
  sub_20C03298C((uint64_t)v14, (uint64_t)a4);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B4B70(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v13 = 0;
  v9 = sub_20C31CB14(v7, a4, (uint64_t)a4, &v13);
  v10 = v9;
  if (v11)
  {
    v9[21] = *a3 & 0xFFFFFFFFFFFFLL | 0x25000000000000;
    sub_20C31C9E0((uint64_t)v27, (uint64_t)a4);
  }
  return v10[21];
}

uint64_t sub_20C31C9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  void *__p[2];
  char v8;
  char __src;

  sub_20C312E3C(&__src, a2);
  if ((__src & 0x60) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 6328);
    sub_20BDDC0E4(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_20C312C5C(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  result = sub_20C2DC688(a1, &__src);
  v6 = __src;
  if ((__src & 2) != 0)
  {
    result = sub_20C31CE50(a1, a2 + 8);
    v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  result = sub_20C31CE50(a1, a2 + 32);
  v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  result = sub_20C31CE50(a1, a2 + 56);
  v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  result = sub_20C31CE50(a1, a2 + 80);
  v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0)
      return result;
    return sub_20C31CE50(a1, a2 + 128);
  }
LABEL_16:
  result = sub_20C31CE50(a1, a2 + 104);
  if ((__src & 0x10) == 0)
    return result;
  return sub_20C31CE50(a1, a2 + 128);
}

void sub_20C31CAF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C31CB14(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C032040((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::operator==(v14 + 2, a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_20C31CDC8(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      v23 = *(_QWORD *)(*v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  v14 = v25;
  v25 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C31B1A0((uint64_t)&v25, 0);
  return v14;
}

void sub_20C31CDB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C31B1A0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31CDC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0xB0uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C03298C((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C31CE38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C31B1A0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31CE50(uint64_t a1, uint64_t a2)
{
  uint64_t __src;

  __src = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  sub_20C2B7248(a1, (char *)&__src);
  return sub_20C2D6610(a1, *(char **)a2, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
}

__n128 sub_20C31CEAC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533DB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31CEE8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533DB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C31CF0C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C31CF9C(v5, &v10, v3, v4);
}

uint64_t sub_20C31CF54(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533E10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31CF90()
{
  return &unk_24C533E10;
}

void sub_20C31CF9C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v9 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C31D080((uint64_t)&v8, v11);
  }
  sub_20C032B0C(a4, v11);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_20C31D06C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C031968((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31D080(uint64_t a1, char *a2)
{
  char p;
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  __sFILE v10;

  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp((uint64_t)&v10._p + 1);
  LOBYTE(v10._p) = 0;
  if (sub_20C3133E4(a1 + 8, 0, &v10))
  {
    p = (char)v10._p;
    if (((uint64_t)v10._p & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ClearAndMakeExplicit((uint64_t)&v10._p + 1);
      p = (char)v10._p;
    }
    if ((p & 2) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C31D3BC(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 4) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C31D3BC(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAddedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 0x20) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C31D3BC(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetPrependedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 0x40) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C31D3BC(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 8) == 0)
    {
LABEL_29:
      if ((p & 0x10) == 0)
      {
LABEL_33:
        sub_20C31D30C(a2, (uint64_t)&v10._p + 1);
        v5 = 1;
        goto LABEL_37;
      }
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (sub_20C31D3BC(a1, &__p))
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetOrderedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
        if (__p)
        {
          v8 = __p;
          operator delete(__p);
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    __p = 0;
    v8 = 0;
    v9 = 0;
    if (sub_20C31D3BC(a1, &__p))
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetDeletedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
      goto LABEL_29;
    }
LABEL_34:
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  v5 = 0;
LABEL_37:
  if (*(_QWORD *)((char *)&v10._lb._size + 1))
  {
    *(_QWORD *)((char *)&v10._blksize + 1) = *(_QWORD *)((char *)&v10._lb._size + 1);
    operator delete(*(void **)((char *)&v10._lb._size + 1));
  }
  if (*(__sFILEX **)((char *)&v10._extra + 1))
  {
    *(_QWORD *)((char *)&v10._ur + 1) = *(__sFILEX **)((char *)&v10._extra + 1);
    operator delete(*(void **)((char *)&v10._extra + 1));
  }
  if (*(int (__cdecl **)(void *, const char *, int))((char *)&v10._write + 1))
  {
    *(unsigned __int8 **)((char *)&v10._ub._base + 1) = *(unsigned __int8 **)((char *)&v10._write + 1);
    operator delete(*(void **)((char *)&v10._write + 1));
  }
  if (*(int (__cdecl **)(void *))((char *)&v10._close + 1))
  {
    *(int (__cdecl **)(void *, char *, int))((char *)&v10._read + 1) = *(int (__cdecl **)(void *, char *, int))((char *)&v10._close + 1);
    operator delete(*(void **)((char *)&v10._close + 1));
  }
  if (*(_QWORD *)((char *)&v10._bf._size + 1))
  {
    *(_QWORD *)((char *)&v10._lbfsize + 1) = *(_QWORD *)((char *)&v10._bf._size + 1);
    operator delete(*(void **)((char *)&v10._bf._size + 1));
  }
  if (*(_QWORD *)((char *)&v10._r + 1))
  {
    *(_QWORD *)((char *)&v10._flags + 1) = *(_QWORD *)((char *)&v10._r + 1);
    operator delete(*(void **)((char *)&v10._r + 1));
  }
  return v5;
}

void sub_20C31D2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

char *sub_20C31D30C(char *a1, uint64_t a2)
{
  *a1 = *(_BYTE *)a2;
  if (a1 != (char *)a2)
  {
    sub_20BDDF7E4(a1 + 8, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_20BDDF7E4(a1 + 32, *(char **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_20BDDF7E4(a1 + 56, *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    sub_20BDDF7E4(a1 + 80, *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    sub_20BDDF7E4(a1 + 104, *(char **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
    sub_20BDDF7E4(a1 + 128, *(char **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
  }
  return a1;
}

BOOL sub_20C31D3BC(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  void *__p;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __p = "usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = long long]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20BDE3ED8(&__p, v16);
  v7 = sub_20C2D71BC(a1, (__sFILE *)__p, v16);
  v8 = v7;
  if (&__p != a2 && v7)
    sub_20BDDF7E4((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_20C31D4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C31D4E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31D520(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C31D544(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C31D594((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C31D54C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533E90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31D588()
{
  return &unk_24C533E90;
}

void sub_20C31D594(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C31D610(v5, &v9, v3, v4);
}

void sub_20C31D610(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C31D704((uint64_t)&v8, v11);
  }
  sub_20C032B0C(a4, v11);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_20C31D6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C031968((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31D704(uint64_t a1, char *a2)
{
  char v4;
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  char __dst;
  _BYTE v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp((uint64_t)v11);
  __dst = 0;
  if ((sub_20C2B9BEC(a1 + 8, &__dst, 1uLL) & 1) != 0)
  {
    v4 = __dst;
    if ((__dst & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ClearAndMakeExplicit((uint64_t)v11);
      v4 = __dst;
    }
    if ((v4 & 2) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31D990(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 4) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31D990(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAddedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 0x20) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31D990(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetPrependedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 0x40) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31D990(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 8) == 0)
    {
LABEL_29:
      if ((v4 & 0x10) == 0)
      {
LABEL_33:
        sub_20C31D30C(a2, (uint64_t)v11);
        v5 = 1;
        goto LABEL_37;
      }
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31D990(a1, &__p) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetOrderedItems((uint64_t)v11, (uint64_t)&__p);
        if (__p)
        {
          v8 = __p;
          operator delete(__p);
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    __p = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C31D990(a1, &__p) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetDeletedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
      goto LABEL_29;
    }
LABEL_34:
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  v5 = 0;
LABEL_37:
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  return v5;
}

void sub_20C31D950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31D990(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *__p;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  unint64_t __dst;

  __dst = 0;
  v4 = a1 + 8;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __p = "usd/crateFile.cpp";
    v13 = "_Read";
    v14 = 1189;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = long long]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_20BDE3ED8(&__p, __dst);
  v8 = sub_20C2B9BEC(v4, __p, 8 * __dst);
  v9 = v8;
  if (&__p == a2)
    v10 = 0;
  else
    v10 = v8;
  if ((v10 & 1) != 0)
    sub_20BDDF7E4((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_20C31DAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C31DACC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533EB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31DB08(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533EB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C31DB2C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C31DB84((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C31DB3C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533F10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31DB78()
{
  return &unk_24C533F10;
}

void sub_20C31DB84(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C31DCA0(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C31DC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C31DCA0(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char v15[8];
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *__p;
  void *v27;

  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp((uint64_t)v15);
  v12 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v13 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v14 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v14 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C31DDF4((uint64_t)&v12, v15);
    v7 = v13;
  }
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_20C032B0C(a4, v15);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
}

void sub_20C31DDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v14;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v14);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31DDF4(uint64_t a1, char *a2)
{
  char v4;
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  char v10;
  _BYTE v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SdfListOp((uint64_t)v11);
  v10 = 0;
  if ((sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v10, 1uLL) & 1) != 0)
  {
    v4 = v10;
    if ((v10 & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::ClearAndMakeExplicit((uint64_t)v11);
      v4 = v10;
    }
    if ((v4 & 2) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31E080(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetExplicitItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 4) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31E080(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAddedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 0x20) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31E080(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetPrependedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 0x40) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31E080(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetAppendedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 8) == 0)
    {
LABEL_29:
      if ((v4 & 0x10) == 0)
      {
LABEL_33:
        sub_20C31D30C(a2, (uint64_t)v11);
        v5 = 1;
        goto LABEL_37;
      }
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31E080(a1, &__p) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetOrderedItems((uint64_t)v11, (uint64_t)&__p);
        if (__p)
        {
          v8 = __p;
          operator delete(__p);
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    __p = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C31E080(a1, &__p) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<long long>::SetDeletedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
      goto LABEL_29;
    }
LABEL_34:
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  v5 = 0;
LABEL_37:
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  return v5;
}

void sub_20C31E040(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31E080(uint64_t a1, void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;

  v19 = 0;
  v4 = (_QWORD *)(a1 + 8);
  if (!sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __p = "usd/crateFile.cpp";
    v15 = "_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = long long]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20BDE3ED8(&__p, v19);
  v9 = sub_20C2B72E8(v4, (uint64_t)__p, 8 * v19);
  v10 = v9;
  if (&__p == a2)
    v11 = 0;
  else
    v11 = v9;
  if ((v11 & 1) != 0)
    sub_20BDDF7E4((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_20C31E1B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C31E1CC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533F30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31E278(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533FB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31E324(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534030;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31E3D0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5340B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C31E484(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533F30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31E4C0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533F30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C31E4E4(uint64_t a1, uint64_t a2)
{
  return sub_20C31E534((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_20C31E4EC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533F90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31E528()
{
  return &unk_24C533F90;
}

uint64_t sub_20C31E534(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = *(_QWORD *)(*a1 + 6328);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *(unsigned __int8 **)a2;
  return sub_20C31E58C(v3, v2, (_QWORD *)(v4 + 256), v6);
}

uint64_t sub_20C31E58C(uint64_t *a1, uint64_t a2, _QWORD *a3, unsigned __int8 *a4)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t v13;
  _BYTE v14[8];
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *__p;
  void *v26;
  _QWORD v27[2];

  v27[0] = a2;
  v27[1] = a3;
  sub_20C033524((uint64_t)v14, (uint64_t)a4);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B4B70(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v13 = 0;
  v9 = sub_20C31E7D4(v7, a4, (uint64_t)a4, &v13);
  v10 = v9;
  if (v11)
  {
    v9[21] = *a3 & 0xFFFFFFFFFFFFLL | 0x26000000000000;
    sub_20C31E6A0((uint64_t)v27, (uint64_t)a4);
  }
  return v10[21];
}

uint64_t sub_20C31E6A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  void *__p[2];
  char v8;
  char __src;

  sub_20C312E3C(&__src, a2);
  if ((__src & 0x60) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 6328);
    sub_20BDDC0E4(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_20C312C5C(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  result = sub_20C2DC688(a1, &__src);
  v6 = __src;
  if ((__src & 2) != 0)
  {
    result = sub_20C2A918C(a1, a2 + 8);
    v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  result = sub_20C2A918C(a1, a2 + 32);
  v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  result = sub_20C2A918C(a1, a2 + 56);
  v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  result = sub_20C2A918C(a1, a2 + 80);
  v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0)
      return result;
    return sub_20C2A918C(a1, a2 + 128);
  }
LABEL_16:
  result = sub_20C2A918C(a1, a2 + 104);
  if ((__src & 0x10) == 0)
    return result;
  return sub_20C2A918C(a1, a2 + 128);
}

void sub_20C31E7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C31E7D4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C032040((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::operator==(v14 + 2, a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_20C31EA88(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      v23 = *(_QWORD *)(*v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  v14 = v25;
  v25 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C31B1A0((uint64_t)&v25, 0);
  return v14;
}

void sub_20C31EA70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C31B1A0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31EA88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0xB0uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C033524((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C31EAF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C31B1A0(v1, 0);
  _Unwind_Resume(a1);
}

__n128 sub_20C31EB18(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C533FB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31EB54(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C533FB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C31EB78(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C31EC08(v5, &v10, v3, v4);
}

uint64_t sub_20C31EBC0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534010))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31EBFC()
{
  return &unk_24C534010;
}

void sub_20C31EC08(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v9 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C31ECEC((uint64_t)&v8, v11);
  }
  sub_20C0336A4(a4, v11);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_20C31ECD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C031968((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31ECEC(uint64_t a1, char *a2)
{
  char p;
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  __sFILE v10;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp((uint64_t)&v10._p + 1);
  LOBYTE(v10._p) = 0;
  if (sub_20C3133E4(a1 + 8, 0, &v10))
  {
    p = (char)v10._p;
    if (((uint64_t)v10._p & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ClearAndMakeExplicit((uint64_t)&v10._p + 1);
      p = (char)v10._p;
    }
    if ((p & 2) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C31EF78(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 4) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C31EF78(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAddedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 0x20) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C31EF78(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetPrependedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 0x40) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C31EF78(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 8) == 0)
    {
LABEL_29:
      if ((p & 0x10) == 0)
      {
LABEL_33:
        sub_20C31B64C(a2, (uint64_t)&v10._p + 1);
        v5 = 1;
        goto LABEL_37;
      }
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (sub_20C31EF78(a1, &__p))
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetOrderedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
        if (__p)
        {
          v8 = __p;
          operator delete(__p);
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    __p = 0;
    v8 = 0;
    v9 = 0;
    if (sub_20C31EF78(a1, &__p))
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetDeletedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
      goto LABEL_29;
    }
LABEL_34:
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  v5 = 0;
LABEL_37:
  if (*(_QWORD *)((char *)&v10._lb._size + 1))
  {
    *(_QWORD *)((char *)&v10._blksize + 1) = *(_QWORD *)((char *)&v10._lb._size + 1);
    operator delete(*(void **)((char *)&v10._lb._size + 1));
  }
  if (*(__sFILEX **)((char *)&v10._extra + 1))
  {
    *(_QWORD *)((char *)&v10._ur + 1) = *(__sFILEX **)((char *)&v10._extra + 1);
    operator delete(*(void **)((char *)&v10._extra + 1));
  }
  if (*(int (__cdecl **)(void *, const char *, int))((char *)&v10._write + 1))
  {
    *(unsigned __int8 **)((char *)&v10._ub._base + 1) = *(unsigned __int8 **)((char *)&v10._write + 1);
    operator delete(*(void **)((char *)&v10._write + 1));
  }
  if (*(int (__cdecl **)(void *))((char *)&v10._close + 1))
  {
    *(int (__cdecl **)(void *, char *, int))((char *)&v10._read + 1) = *(int (__cdecl **)(void *, char *, int))((char *)&v10._close + 1);
    operator delete(*(void **)((char *)&v10._close + 1));
  }
  if (*(_QWORD *)((char *)&v10._bf._size + 1))
  {
    *(_QWORD *)((char *)&v10._lbfsize + 1) = *(_QWORD *)((char *)&v10._bf._size + 1);
    operator delete(*(void **)((char *)&v10._bf._size + 1));
  }
  if (*(_QWORD *)((char *)&v10._r + 1))
  {
    *(_QWORD *)((char *)&v10._flags + 1) = *(_QWORD *)((char *)&v10._r + 1);
    operator delete(*(void **)((char *)&v10._r + 1));
  }
  return v5;
}

void sub_20C31EF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

BOOL sub_20C31EF78(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  void *__p;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __p = "usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = unsigned int]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20BDE36C4(&__p, v16);
  v7 = sub_20C2C1DF0(a1, (__sFILE *)__p, v16);
  v8 = v7;
  if (&__p != a2 && v7)
    sub_20BE8B37C((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_20C31F07C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C31F0A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31F0DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C31F100(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C31F150((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C31F108(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534090))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31F144()
{
  return &unk_24C534090;
}

void sub_20C31F150(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C31F1CC(v5, &v9, v3, v4);
}

void sub_20C31F1CC(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C31F2C0((uint64_t)&v8, v11);
  }
  sub_20C0336A4(a4, v11);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_20C31F2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C031968((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31F2C0(uint64_t a1, char *a2)
{
  char v4;
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  char __dst;
  _BYTE v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp((uint64_t)v11);
  __dst = 0;
  if ((sub_20C2B9BEC(a1 + 8, &__dst, 1uLL) & 1) != 0)
  {
    v4 = __dst;
    if ((__dst & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ClearAndMakeExplicit((uint64_t)v11);
      v4 = __dst;
    }
    if ((v4 & 2) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31F54C(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 4) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31F54C(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAddedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 0x20) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31F54C(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetPrependedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 0x40) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31F54C(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 8) == 0)
    {
LABEL_29:
      if ((v4 & 0x10) == 0)
      {
LABEL_33:
        sub_20C31B64C(a2, (uint64_t)v11);
        v5 = 1;
        goto LABEL_37;
      }
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31F54C(a1, &__p) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetOrderedItems((uint64_t)v11, (uint64_t)&__p);
        if (__p)
        {
          v8 = __p;
          operator delete(__p);
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    __p = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C31F54C(a1, &__p) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetDeletedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
      goto LABEL_29;
    }
LABEL_34:
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  v5 = 0;
LABEL_37:
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  return v5;
}

void sub_20C31F50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31F54C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *__p;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  unint64_t __dst;

  __dst = 0;
  v4 = a1 + 8;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __p = "usd/crateFile.cpp";
    v13 = "_Read";
    v14 = 1189;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = unsigned int]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_20BDE36C4(&__p, __dst);
  v8 = sub_20C2B9BEC(v4, __p, 4 * __dst);
  v9 = v8;
  if (&__p == a2)
    v10 = 0;
  else
    v10 = v8;
  if ((v10 & 1) != 0)
    sub_20BE8B37C((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_20C31F664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C31F688(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5340B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C31F6C4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5340B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C31F6E8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C31F740((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C31F6F8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534110))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C31F734()
{
  return &unk_24C534110;
}

void sub_20C31F740(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C31F85C(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C31F840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C31F85C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char v15[8];
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *__p;
  void *v27;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp((uint64_t)v15);
  v12 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v13 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v14 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v14 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C31F9B0((uint64_t)&v12, v15);
    v7 = v13;
  }
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_20C0336A4(a4, v15);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
}

void sub_20C31F98C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v14;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v14);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31F9B0(uint64_t a1, char *a2)
{
  char v4;
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  char v10;
  _BYTE v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SdfListOp((uint64_t)v11);
  v10 = 0;
  if ((sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v10, 1uLL) & 1) != 0)
  {
    v4 = v10;
    if ((v10 & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::ClearAndMakeExplicit((uint64_t)v11);
      v4 = v10;
    }
    if ((v4 & 2) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31FC3C(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetExplicitItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 4) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31FC3C(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAddedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 0x20) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31FC3C(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetPrependedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 0x40) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31FC3C(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetAppendedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 8) == 0)
    {
LABEL_29:
      if ((v4 & 0x10) == 0)
      {
LABEL_33:
        sub_20C31B64C(a2, (uint64_t)v11);
        v5 = 1;
        goto LABEL_37;
      }
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C31FC3C(a1, &__p) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetOrderedItems((uint64_t)v11, (uint64_t)&__p);
        if (__p)
        {
          v8 = __p;
          operator delete(__p);
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    __p = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C31FC3C(a1, &__p) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned int>::SetDeletedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
      goto LABEL_29;
    }
LABEL_34:
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  v5 = 0;
LABEL_37:
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  return v5;
}

void sub_20C31FBFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C31FC3C(uint64_t a1, void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;

  v19 = 0;
  v4 = (_QWORD *)(a1 + 8);
  if (!sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __p = "usd/crateFile.cpp";
    v15 = "_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = unsigned int]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20BDE36C4(&__p, v19);
  v9 = sub_20C2B72E8(v4, (uint64_t)__p, 4 * v19);
  v10 = v9;
  if (&__p == a2)
    v11 = 0;
  else
    v11 = v9;
  if ((v11 & 1) != 0)
    sub_20BE8B37C((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_20C31FD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C31FD88(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534130;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31FE34(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5341B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31FEE0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534230;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C31FF8C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5342B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C320040(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32007C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C3200A0(uint64_t a1, uint64_t a2)
{
  return sub_20C3200F0((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_20C3200A8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534190))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3200E4()
{
  return &unk_24C534190;
}

uint64_t sub_20C3200F0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = *(_QWORD *)(*a1 + 6328);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *(unsigned __int8 **)a2;
  return sub_20C320148(v3, v2, (_QWORD *)(v4 + 256), v6);
}

uint64_t sub_20C320148(uint64_t *a1, uint64_t a2, _QWORD *a3, unsigned __int8 *a4)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t v13;
  _BYTE v14[8];
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *__p;
  void *v26;
  _QWORD v27[2];

  v27[0] = a2;
  v27[1] = a3;
  sub_20C0340F4((uint64_t)v14, (uint64_t)a4);
  if (__p)
  {
    v26 = __p;
    operator delete(__p);
  }
  if (v23)
  {
    v24 = v23;
    operator delete(v23);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B4B70(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v13 = 0;
  v9 = sub_20C320390(v7, a4, (uint64_t)a4, &v13);
  v10 = v9;
  if (v11)
  {
    v9[21] = *a3 & 0xFFFFFFFFFFFFLL | 0x27000000000000;
    sub_20C32025C((uint64_t)v27, (uint64_t)a4);
  }
  return v10[21];
}

uint64_t sub_20C32025C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  void *__p[2];
  char v8;
  char __src;

  sub_20C312E3C(&__src, a2);
  if ((__src & 0x60) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 6328);
    sub_20BDDC0E4(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_20C312C5C(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  result = sub_20C2DC688(a1, &__src);
  v6 = __src;
  if ((__src & 2) != 0)
  {
    result = sub_20C31CE50(a1, a2 + 8);
    v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  result = sub_20C31CE50(a1, a2 + 32);
  v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  result = sub_20C31CE50(a1, a2 + 56);
  v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  result = sub_20C31CE50(a1, a2 + 80);
  v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0)
      return result;
    return sub_20C31CE50(a1, a2 + 128);
  }
LABEL_16:
  result = sub_20C31CE50(a1, a2 + 104);
  if ((__src & 0x10) == 0)
    return result;
  return sub_20C31CE50(a1, a2 + 128);
}

void sub_20C320374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C320390(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C032040((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if (pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::operator==(v14 + 2, a2))
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_20C320644(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      v23 = *(_QWORD *)(*v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  v14 = v25;
  v25 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C31B1A0((uint64_t)&v25, 0);
  return v14;
}

void sub_20C32062C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C31B1A0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C320644@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0xB0uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C0340F4((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C3206B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C31B1A0(v1, 0);
  _Unwind_Resume(a1);
}

__n128 sub_20C3206D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5341B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C320710(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5341B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C320734(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C3207C4(v5, &v10, v3, v4);
}

uint64_t sub_20C32077C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534210))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3207B8()
{
  return &unk_24C534210;
}

void sub_20C3207C4(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v9 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C3208A8((uint64_t)&v8, v11);
  }
  sub_20C034274(a4, v11);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_20C320894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C031968((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3208A8(uint64_t a1, char *a2)
{
  char p;
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  __sFILE v10;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp((uint64_t)&v10._p + 1);
  LOBYTE(v10._p) = 0;
  if (sub_20C3133E4(a1 + 8, 0, &v10))
  {
    p = (char)v10._p;
    if (((uint64_t)v10._p & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ClearAndMakeExplicit((uint64_t)&v10._p + 1);
      p = (char)v10._p;
    }
    if ((p & 2) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C320B34(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 4) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C320B34(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAddedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 0x20) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C320B34(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetPrependedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 0x40) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (!sub_20C320B34(a1, &__p))
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
    }
    if ((p & 8) == 0)
    {
LABEL_29:
      if ((p & 0x10) == 0)
      {
LABEL_33:
        sub_20C31D30C(a2, (uint64_t)&v10._p + 1);
        v5 = 1;
        goto LABEL_37;
      }
      __p = 0;
      v8 = 0;
      v9 = 0;
      if (sub_20C320B34(a1, &__p))
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetOrderedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
        if (__p)
        {
          v8 = __p;
          operator delete(__p);
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    __p = 0;
    v8 = 0;
    v9 = 0;
    if (sub_20C320B34(a1, &__p))
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetDeletedItems((uint64_t)&v10._p + 1, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      p = (char)v10._p;
      goto LABEL_29;
    }
LABEL_34:
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  v5 = 0;
LABEL_37:
  if (*(_QWORD *)((char *)&v10._lb._size + 1))
  {
    *(_QWORD *)((char *)&v10._blksize + 1) = *(_QWORD *)((char *)&v10._lb._size + 1);
    operator delete(*(void **)((char *)&v10._lb._size + 1));
  }
  if (*(__sFILEX **)((char *)&v10._extra + 1))
  {
    *(_QWORD *)((char *)&v10._ur + 1) = *(__sFILEX **)((char *)&v10._extra + 1);
    operator delete(*(void **)((char *)&v10._extra + 1));
  }
  if (*(int (__cdecl **)(void *, const char *, int))((char *)&v10._write + 1))
  {
    *(unsigned __int8 **)((char *)&v10._ub._base + 1) = *(unsigned __int8 **)((char *)&v10._write + 1);
    operator delete(*(void **)((char *)&v10._write + 1));
  }
  if (*(int (__cdecl **)(void *))((char *)&v10._close + 1))
  {
    *(int (__cdecl **)(void *, char *, int))((char *)&v10._read + 1) = *(int (__cdecl **)(void *, char *, int))((char *)&v10._close + 1);
    operator delete(*(void **)((char *)&v10._close + 1));
  }
  if (*(_QWORD *)((char *)&v10._bf._size + 1))
  {
    *(_QWORD *)((char *)&v10._lbfsize + 1) = *(_QWORD *)((char *)&v10._bf._size + 1);
    operator delete(*(void **)((char *)&v10._bf._size + 1));
  }
  if (*(_QWORD *)((char *)&v10._r + 1))
  {
    *(_QWORD *)((char *)&v10._flags + 1) = *(_QWORD *)((char *)&v10._r + 1);
    operator delete(*(void **)((char *)&v10._r + 1));
  }
  return v5;
}

void sub_20C320AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

BOOL sub_20C320B34(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  void *__p;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __p = "usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = unsigned long long]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20BDE3C3C(&__p, v16);
  v7 = sub_20C2D71BC(a1, (__sFILE *)__p, v16);
  v8 = v7;
  if (&__p != a2 && v7)
    sub_20BDDF7E4((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_20C320C38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C320C5C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C320C98(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C320CBC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C320D0C((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C320CC4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534290))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C320D00()
{
  return &unk_24C534290;
}

void sub_20C320D0C(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C320D88(v5, &v9, v3, v4);
}

void sub_20C320D88(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *__p;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C320E7C((uint64_t)&v8, v11);
  }
  sub_20C034274(a4, v11);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
}

void sub_20C320E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C031968((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C320E7C(uint64_t a1, char *a2)
{
  char v4;
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  char __dst;
  _BYTE v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp((uint64_t)v11);
  __dst = 0;
  if ((sub_20C2B9BEC(a1 + 8, &__dst, 1uLL) & 1) != 0)
  {
    v4 = __dst;
    if ((__dst & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ClearAndMakeExplicit((uint64_t)v11);
      v4 = __dst;
    }
    if ((v4 & 2) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C321108(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 4) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C321108(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAddedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 0x20) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C321108(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetPrependedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 0x40) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C321108(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
    }
    if ((v4 & 8) == 0)
    {
LABEL_29:
      if ((v4 & 0x10) == 0)
      {
LABEL_33:
        sub_20C31D30C(a2, (uint64_t)v11);
        v5 = 1;
        goto LABEL_37;
      }
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C321108(a1, &__p) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetOrderedItems((uint64_t)v11, (uint64_t)&__p);
        if (__p)
        {
          v8 = __p;
          operator delete(__p);
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    __p = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C321108(a1, &__p) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetDeletedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = __dst;
      goto LABEL_29;
    }
LABEL_34:
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  v5 = 0;
LABEL_37:
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  return v5;
}

void sub_20C3210C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C321108(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *__p;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  unint64_t __dst;

  __dst = 0;
  v4 = a1 + 8;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __p = "usd/crateFile.cpp";
    v13 = "_Read";
    v14 = 1189;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = unsigned long long]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_20BDE3C3C(&__p, __dst);
  v8 = sub_20C2B9BEC(v4, __p, 8 * __dst);
  v9 = v8;
  if (&__p == a2)
    v10 = 0;
  else
    v10 = v8;
  if ((v10 & 1) != 0)
    sub_20BDDF7E4((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_20C321220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C321244(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5342B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C321280(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5342B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C3212A4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C3212FC((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C3212B4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534310))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3212F0()
{
  return &unk_24C534310;
}

void sub_20C3212FC(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C321418(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C3213FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C321418(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char v15[8];
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *__p;
  void *v27;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp((uint64_t)v15);
  v12 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v13 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v14 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v14 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C32156C((uint64_t)&v12, v15);
    v7 = v13;
  }
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_20C034274(a4, v15);
  if (__p)
  {
    v27 = __p;
    operator delete(__p);
  }
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
}

void sub_20C321548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v14;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v14);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C32156C(uint64_t a1, char *a2)
{
  char v4;
  uint64_t v5;
  void *__p;
  void *v8;
  uint64_t v9;
  char v10;
  _BYTE v11[8];
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SdfListOp((uint64_t)v11);
  v10 = 0;
  if ((sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v10, 1uLL) & 1) != 0)
  {
    v4 = v10;
    if ((v10 & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::ClearAndMakeExplicit((uint64_t)v11);
      v4 = v10;
    }
    if ((v4 & 2) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C3217F8(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetExplicitItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 4) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C3217F8(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAddedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 0x20) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C3217F8(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetPrependedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 0x40) != 0)
    {
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C3217F8(a1, &__p) & 1) == 0)
        goto LABEL_34;
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetAppendedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
    }
    if ((v4 & 8) == 0)
    {
LABEL_29:
      if ((v4 & 0x10) == 0)
      {
LABEL_33:
        sub_20C31D30C(a2, (uint64_t)v11);
        v5 = 1;
        goto LABEL_37;
      }
      __p = 0;
      v8 = 0;
      v9 = 0;
      if ((sub_20C3217F8(a1, &__p) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetOrderedItems((uint64_t)v11, (uint64_t)&__p);
        if (__p)
        {
          v8 = __p;
          operator delete(__p);
        }
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    __p = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3217F8(a1, &__p) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<unsigned long long>::SetDeletedItems((uint64_t)v11, (uint64_t)&__p);
      if (__p)
      {
        v8 = __p;
        operator delete(__p);
      }
      v4 = v10;
      goto LABEL_29;
    }
LABEL_34:
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  v5 = 0;
LABEL_37:
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v14)
  {
    v15 = v14;
    operator delete(v14);
  }
  if (v12)
  {
    v13 = v12;
    operator delete(v12);
  }
  return v5;
}

void sub_20C3217B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  sub_20C031968(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3217F8(uint64_t a1, void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;

  v19 = 0;
  v4 = (_QWORD *)(a1 + 8);
  if (!sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __p = "usd/crateFile.cpp";
    v15 = "_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = unsigned long long]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20BDE3C3C(&__p, v19);
  v9 = sub_20C2B72E8(v4, (uint64_t)__p, 8 * v19);
  v10 = v9;
  if (&__p == a2)
    v11 = 0;
  else
    v11 = v9;
  if ((v11 & 1) != 0)
    sub_20BDDF7E4((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_20C321928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C321944(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534330;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3219F0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5343B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C321A9C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534430;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C321B48(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5344B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C321BFC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C321C38(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C321C5C(uint64_t a1, uint64_t a2)
{
  return sub_20C321CAC((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8), a2);
}

uint64_t sub_20C321C64(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534390))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C321CA0()
{
  return &unk_24C534390;
}

uint64_t sub_20C321CAC(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfPath **v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = *((_QWORD *)*a1 + 791);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::SdfPath **)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 168))(a2);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::SdfPath ***)a2;
  return sub_20C321D04(v3, v2, (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)(v4 + 256), v6);
}

uint64_t sub_20C321D04(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a3, pxrInternal__aapl__pxrReserved__::SdfPath **a4)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  _QWORD v13[3];
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v14[2];
  void **v15;

  v14[0] = a2;
  v14[1] = a3;
  memset(v13, 0, sizeof(v13));
  sub_20BFD6D38(v13, *a4, a4[1], (a4[1] - *a4) >> 3);
  v15 = (void **)v13;
  sub_20BFD6F90(&v15);
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B4FE8(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v15 = 0;
  v9 = sub_20C321DD8(v7, (uint64_t)a4, (_DWORD **)a4, &v15);
  v10 = v9;
  if (v11)
  {
    v9[5] = *(_QWORD *)a3 & 0xFFFFFFFFFFFFLL | 0x28000000000000;
    sub_20C3168E4(v14, a4);
  }
  return v10[5];
}

_QWORD *sub_20C321DD8(uint64_t a1, uint64_t a2, _DWORD **a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *result;
  unint64_t v15;
  char *v16;
  char *v17;
  unsigned int *i;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v27[3];

  v9 = sub_20C030B60((uint64_t)v27, (unsigned int **)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      result = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = result[1];
          if (v15 == v10)
          {
            v17 = (char *)result[2];
            v16 = (char *)result[3];
            if (v16 - v17 == *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
            {
              if (v17 == v16)
                return result;
              for (i = *(unsigned int **)a2; *(_QWORD *)v17 == *(_QWORD *)i; i += 2)
              {
                v17 += 8;
                if (v17 == v16)
                  return result;
              }
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C322070(a1, v10, a3, a4, (uint64_t)v27);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_20BDEC6E0(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v27[0] = *v25;
    *v25 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11)
          v26 %= v11;
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27[0];
    }
  }
  result = (_QWORD *)v27[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C32204C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20C322118((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C322070@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = 0;
  result = sub_20BFD6D38(v10 + 2, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 3);
  v10[5] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C3220FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C322118(v3, v2);
  _Unwind_Resume(a1);
}

void sub_20C322118(uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 2;
    sub_20BFD6F90(&v3);
  }
  if (__p)
    operator delete(__p);
}

__n128 sub_20C322168(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5343B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3221A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5343B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C3221C8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C322258(v5, &v10, v3, v4);
}

uint64_t sub_20C322210(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534410))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32224C()
{
  return &unk_24C534410;
}

void sub_20C322258(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int *v9[3];
  void **v10;

  memset(v9, 0, sizeof(v9));
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C316E24((uint64_t)&v6, v9);
  }
  sub_20C0E4C5C(a4, (uint64_t *)v9);
  v10 = (void **)v9;
  sub_20BFD6F90(&v10);
}

void sub_20C3222C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  *(_QWORD *)(v15 - 24) = &a15;
  sub_20BFD6F90((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

__n128 sub_20C3222EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C322328(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32234C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C32239C((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C322354(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534490))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C322390()
{
  return &unk_24C534490;
}

void sub_20C32239C(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C322418(v5, &v9, v3, v4);
}

void sub_20C322418(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  int *v9[3];
  void **v10;

  memset(v9, 0, sizeof(v9));
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v6 + 1) = *(_QWORD *)(*(_QWORD *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C317510((uint64_t)&v6, v9);
  }
  sub_20C0E4C5C(a4, (uint64_t *)v9);
  v10 = (void **)v9;
  sub_20BFD6F90(&v10);
}

void sub_20C322498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  *(_QWORD *)(v15 - 24) = &a15;
  sub_20BFD6F90((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

__n128 sub_20C3224BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5344B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3224F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5344B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32251C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C322574((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C32252C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534510))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C322568()
{
  return &unk_24C534510;
}

void sub_20C322574(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C322690(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C322674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C322690(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  int *v13[3];
  void **v14;

  memset(v13, 0, sizeof(v13));
  v10 = *a2;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v11 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v12 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v12 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C317D10(&v10, v13);
    v5 = v11;
  }
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20C0E4C5C(a4, (uint64_t *)v13);
  v14 = (void **)v13;
  sub_20BFD6F90(&v14);
}

void sub_20C322760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  *(_QWORD *)(v14 - 24) = &a13;
  sub_20BFD6F90((void ***)(v14 - 24));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C32278C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534530;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C322838(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5345B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3228E4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534630;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C322990(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5346B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C322A44(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534530;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C322A80(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534530;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C322AA4(uint64_t a1, uint64_t a2)
{
  return sub_20C322AF4((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8), a2);
}

uint64_t sub_20C322AAC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534590))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C322AE8()
{
  return &unk_24C534590;
}

uint64_t sub_20C322AF4(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = *((_QWORD *)*a1 + 791);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (uint64_t **)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *(uint64_t ***)a2;
  return sub_20C322B4C(v3, v2, (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)(v4 + 256), v6);
}

uint64_t sub_20C322B4C(uint64_t *a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a3, uint64_t **a4)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  _QWORD v13[3];
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v14[2];
  void **v15;

  v14[0] = a2;
  v14[1] = a3;
  memset(v13, 0, sizeof(v13));
  sub_20BFE538C(v13, *a4, a4[1], a4[1] - *a4);
  v15 = (void **)v13;
  sub_20BEEB2B8(&v15);
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B5200(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v15 = 0;
  v9 = sub_20C322C20(v7, a4, a4, &v15);
  v10 = v9;
  if (v11)
  {
    v9[5] = *(_QWORD *)a3 & 0xFFFFFFFFFFFFLL | 0x29000000000000;
    sub_20C312DF0(v14, (pxrInternal__aapl__pxrReserved__::TfToken **)a4);
  }
  return v10[5];
}

_QWORD *sub_20C322C20(uint64_t a1, _QWORD *a2, uint64_t **a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *result;
  unint64_t v15;
  char *v16;
  char *v17;
  _QWORD *i;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v27[3];

  v9 = sub_20C0300D0((uint64_t)v27, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      result = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = result[1];
          if (v15 == v10)
          {
            v17 = (char *)result[2];
            v16 = (char *)result[3];
            if (v16 - v17 == a2[1] - *a2)
            {
              if (v17 == v16)
                return result;
              for (i = (_QWORD *)*a2; (*(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8) == (*i & 0xFFFFFFFFFFFFFFF8); ++i)
              {
                v17 += 8;
                if (v17 == v16)
                  return result;
              }
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C322EC0(a1, v10, a3, a4, (uint64_t)v27);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_20BDEC6E0(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v27[0] = *v25;
    *v25 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11)
          v26 %= v11;
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27[0];
    }
  }
  result = (_QWORD *)v27[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C322E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20C322F68((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C322EC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = 0;
  result = sub_20BFE538C(v10 + 2, *a3, a3[1], a3[1] - *a3);
  v10[5] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C322F4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C322F68(v3, v2);
  _Unwind_Resume(a1);
}

void sub_20C322F68(uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 2;
    sub_20BEEB2B8(&v3);
  }
  if (__p)
    operator delete(__p);
}

__n128 sub_20C322FB8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5345B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C322FF4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5345B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C323018(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C3230A8(v5, &v10, v3, v4);
}

uint64_t sub_20C323060(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534610))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32309C()
{
  return &unk_24C534610;
}

void sub_20C3230A8(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9[3];
  void **v10;

  memset(v9, 0, sizeof(v9));
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C313434((uint64_t)&v6, v9);
  }
  sub_20C0EC740(a4, v9);
  v10 = (void **)v9;
  sub_20BEEB2B8(&v10);
}

void sub_20C323118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  *(_QWORD *)(v15 - 24) = &a15;
  sub_20BEEB2B8((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

__n128 sub_20C32313C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C323178(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32319C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C3231EC((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C3231A4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534690))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3231E0()
{
  return &unk_24C534690;
}

void sub_20C3231EC(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C323268(v5, &v9, v3, v4);
}

void sub_20C323268(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t *v9[3];
  void **v10;

  memset(v9, 0, sizeof(v9));
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v6 + 1) = *(_QWORD *)(*(_QWORD *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C313A28((uint64_t)&v6, v9);
  }
  sub_20C0EC740(a4, v9);
  v10 = (void **)v9;
  sub_20BEEB2B8(&v10);
}

void sub_20C3232E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  *(_QWORD *)(v15 - 24) = &a15;
  sub_20BEEB2B8((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

__n128 sub_20C32330C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5346B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C323348(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5346B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32336C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C3233C4((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C32337C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534710))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3233B8()
{
  return &unk_24C534710;
}

void sub_20C3233C4(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C3234E0(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C3234C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C3234E0(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t *v13[3];
  void **v14;

  memset(v13, 0, sizeof(v13));
  v10 = *a2;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v11 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v12 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v12 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C314130(&v10, v13);
    v5 = v11;
  }
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20C0EC740(a4, v13);
  v14 = (void **)v13;
  sub_20BEEB2B8(&v14);
}

void sub_20C3235B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  *(_QWORD *)(v14 - 24) = &a13;
  sub_20BEEB2B8((void ***)(v14 - 24));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3235DC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534730;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C323688(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5347B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C323734(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534830;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3237E0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5348B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C323894(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3238D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C3238F4(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 4) != 0)
    a2 = (unsigned int *)(*(uint64_t (**)(unsigned int *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  return *a2 | 0x402A000000000000;
}

uint64_t sub_20C323930(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534790))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32396C()
{
  return &unk_24C534790;
}

__n128 sub_20C323980(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5347B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3239BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5347B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20C3239E0(uint64_t a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v3;
  int v5;

  v3 = *a3;
  v5 = *a2;
  return sub_20C323A54(v3, &v5);
}

uint64_t sub_20C323A0C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534810))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C323A48()
{
  return &unk_24C534810;
}

_QWORD *sub_20C323A54(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  uint64_t v4;
  BOOL v5;
  _QWORD *result;
  int v7;

  if ((sub_20C0DE26C(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *((_QWORD *)a1 + 1) = (char *)&off_24C527CC0 + 3;
    *(_DWORD *)a1 = 0;
  }
  result = sub_20C323ACC(a1);
  v7 = *(_DWORD *)result;
  *(_DWORD *)result = *a2;
  *a2 = v7;
  return result;
}

_QWORD *sub_20C323ACC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

__n128 sub_20C323B60(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C323B9C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20C323BC0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int v6;

  v3 = *a2;
  v4 = *a3;
  sub_20C2A2B6C();
  v6 = v3;
  return sub_20C323A54(v4, &v6);
}

uint64_t sub_20C323BFC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534890))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C323C38()
{
  return &unk_24C534890;
}

__n128 sub_20C323C4C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5348B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C323C88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5348B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C323CAC(uint64_t a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C323D04((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C323CBC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534910))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C323CF8()
{
  return &unk_24C534910;
}

void sub_20C323D04(uint64_t *a1, int a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v16 = v4;
    v17 = v5;
    v18 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    v16 = v4;
    v17 = v5;
    v18 = 0;
  }
  v19 = 0;
  sub_20C323E20(v3, (uint64_t)&v16, a2, a3);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C323E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C323E20(uint64_t a1, uint64_t a2, int a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  int v10;

  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v10 = a3;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v10 = a3;
  }
  return sub_20C323A54(a4, &v10);
}

_QWORD *sub_20C323EA4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534930;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C323F50(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5349B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C323FFC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534A30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3240A8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534AB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C32415C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C324198(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C3241BC(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 4) != 0)
    a2 = (unsigned int *)(*(uint64_t (**)(unsigned int *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  return *a2 | 0x402B000000000000;
}

uint64_t sub_20C3241F8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534990))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C324234()
{
  return &unk_24C534990;
}

__n128 sub_20C324248(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5349B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C324284(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5349B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20C3242A8(uint64_t a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v3;
  int v5;

  v3 = *a3;
  v5 = *a2;
  return sub_20C32431C(v3, &v5);
}

uint64_t sub_20C3242D4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534A10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C324310()
{
  return &unk_24C534A10;
}

_QWORD *sub_20C32431C(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  uint64_t v4;
  BOOL v5;
  _QWORD *result;
  int v7;

  if ((sub_20C188D88(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *((_QWORD *)a1 + 1) = (char *)&off_24C5298D8 + 3;
    *(_DWORD *)a1 = 0;
  }
  result = sub_20C233038(a1);
  v7 = *(_DWORD *)result;
  *(_DWORD *)result = *a2;
  *a2 = v7;
  return result;
}

__n128 sub_20C32439C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3243D8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20C3243FC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int v6;

  v3 = *a2;
  v4 = *a3;
  sub_20C2A2B6C();
  v6 = v3;
  return sub_20C32431C(v4, &v6);
}

uint64_t sub_20C324438(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534A90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C324474()
{
  return &unk_24C534A90;
}

__n128 sub_20C324488(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3244C4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C3244E8(uint64_t a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C324540((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C3244F8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534B10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C324534()
{
  return &unk_24C534B10;
}

void sub_20C324540(uint64_t *a1, int a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v16 = v4;
    v17 = v5;
    v18 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    v16 = v4;
    v17 = v5;
    v18 = 0;
  }
  v19 = 0;
  sub_20C32465C(v3, (uint64_t)&v16, a2, a3);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C324640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C32465C(uint64_t a1, uint64_t a2, int a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  int v10;

  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v10 = a3;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    v10 = a3;
  }
  return sub_20C32431C(a4, &v10);
}

_QWORD *sub_20C3246E0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534B30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32478C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534BB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C324838(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534C30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3248E4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534CB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C324998(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3249D4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C3249F8(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)a2 + 1);
  if ((v2 & 4) != 0)
    a2 = (unsigned int *)(*(uint64_t (**)(unsigned int *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  return *a2 | 0x402C000000000000;
}

uint64_t sub_20C324A34(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534B90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C324A70()
{
  return &unk_24C534B90;
}

__n128 sub_20C324A84(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534BB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C324AC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534BB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20C324AE4(uint64_t a1, int *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  int v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int v6;

  v3 = *a2;
  v4 = *a3;
  if (*a2 == 2)
    v3 = 1;
  v6 = v3;
  return sub_20C324B60(v4, &v6);
}

uint64_t sub_20C324B18(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534C10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C324B54()
{
  return &unk_24C534C10;
}

_QWORD *sub_20C324B60(pxrInternal__aapl__pxrReserved__::VtValue *a1, _DWORD *a2)
{
  uint64_t v4;
  BOOL v5;
  _QWORD *result;
  int v7;

  if ((sub_20C030CF4(a1) & 1) == 0)
  {
    v4 = *((_QWORD *)a1 + 1);
    if (v4)
      v5 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v5 = 1;
    if (!v5)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *((_QWORD *)a1 + 1) = (char *)&off_24C5269E8 + 3;
    *(_DWORD *)a1 = 0;
  }
  result = sub_20C28C6A8(a1);
  v7 = *(_DWORD *)result;
  *(_DWORD *)result = *a2;
  *a2 = v7;
  return result;
}

__n128 sub_20C324BE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534C30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C324C1C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534C30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20C324C40(uint64_t a1, int *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  int v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int v5;
  int v7;

  v3 = *a2;
  v4 = *a3;
  sub_20C2A2B6C();
  if (v3 == 2)
    v5 = 1;
  else
    v5 = v3;
  v7 = v5;
  return sub_20C324B60(v4, &v7);
}

uint64_t sub_20C324C84(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534C90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C324CC0()
{
  return &unk_24C534C90;
}

__n128 sub_20C324CD4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C324D10(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C324D34(uint64_t a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C324D8C((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C324D44(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534D10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C324D80()
{
  return &unk_24C534D10;
}

void sub_20C324D8C(uint64_t *a1, int a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v16 = v4;
    v17 = v5;
    v18 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    v16 = v4;
    v17 = v5;
    v18 = 0;
  }
  v19 = 0;
  sub_20C324EA8(v3, (uint64_t)&v16, a2, a3);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C324E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C324EA8(uint64_t a1, uint64_t a2, int a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  int v12;

  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    if (a3 == 2)
      v8 = 1;
    else
      v8 = a3;
    v12 = v8;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  else
  {
    if (a3 == 2)
      v10 = 1;
    else
      v10 = a3;
    v12 = v10;
  }
  return sub_20C324B60(a4, &v12);
}

_QWORD *sub_20C324F3C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534D30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C324FE8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534DB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C325094(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534E30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C325140(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534EB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C3251F4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534D30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C325230(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534D30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C325254(uint64_t a1, uint64_t a2)
{
  return sub_20C3252B0(*(uint64_t **)(a1 + 16), *(char ***)(a1 + 8), (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C325268(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534D90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3252A4()
{
  return &unk_24C534D90;
}

uint64_t sub_20C3252B0(uint64_t *a1, char **a2, char **a3, uint64_t a4)
{
  uint64_t v7;
  const void ***v8;
  uint64_t v9;
  _OWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  uint64_t v15;
  uint64_t v16[3];
  char **v17[2];

  v7 = *(_QWORD *)(a4 + 8);
  if ((v7 & 4) != 0)
    v8 = (const void ***)(*(uint64_t (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(a4);
  else
    v8 = *(const void ****)a4;
  v17[0] = a2;
  v17[1] = a3;
  sub_20BDEBF8C(v16, v8);
  sub_20BDE9D48((uint64_t)v16, (_QWORD *)v16[1]);
  v9 = *a1;
  if (!*a1)
  {
    v10 = operator new(0x28uLL);
    *v10 = 0u;
    v10[1] = 0u;
    *((_DWORD *)v10 + 8) = 1065353216;
    sub_20C2B55FC(a1, (uint64_t)v10);
    v9 = *a1;
  }
  v15 = 0;
  v11 = sub_20C325394(v9, (unsigned __int8 **)v8, v8, &v15);
  v12 = v11;
  if (v13)
  {
    v11[5] = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x2D000000000000;
    sub_20C3257F8(v17, v8);
  }
  return v12[5];
}

_QWORD *sub_20C325394(uint64_t a1, unsigned __int8 **a2, const void ***a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C030570((unint64_t)&v25, *a2, a2 + 1);
  v9 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if ((sub_20C3256D8(a1 + 32, v14 + 2, a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_20C32563C(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      v23 = *(_QWORD *)(*v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  v14 = v25;
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20C325618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD **a10, uint64_t a11)
{
  if (a10)
    sub_20C3257B0((uint64_t)&a11, a10);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C32563C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, const void ***a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t *result;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20BDEBF8C(v10 + 2, a3);
  v10[5] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C3256BC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C3257B0(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3256D8(uint64_t a1, _QWORD *a2, unsigned __int8 **a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t result;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  char v12;

  if ((unsigned __int8 *)a2[2] != a3[2])
    return 0;
  v3 = (unsigned __int8 *)(a2 + 1);
  v4 = (unsigned __int8 *)*a2;
  if ((_QWORD *)*a2 == a2 + 1)
    return 1;
  v5 = *a3;
  do
  {
    result = sub_20BF77F70((uint64_t)&v12, v4 + 32, v5 + 32);
    if (!(_DWORD)result)
      break;
    v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
    v8 = v4;
    if (v7)
    {
      do
      {
        v4 = v7;
        v7 = *(unsigned __int8 **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v4 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
        v9 = *(_QWORD *)v4 == (_QWORD)v8;
        v8 = v4;
      }
      while (!v9);
    }
    v10 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(unsigned __int8 **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
        v9 = *(_QWORD *)v11 == (_QWORD)v5;
        v5 = v11;
      }
      while (!v9);
    }
    v5 = v11;
  }
  while (v4 != v3);
  return result;
}

void sub_20C3257B0(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_20BDE9D48((uint64_t)(a2 + 2), a2[3]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t sub_20C3257F8(char ***a1, _QWORD *a2)
{
  uint64_t result;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  BOOL v10;
  uint64_t __src;

  __src = a2[2];
  result = sub_20C2B7248((uint64_t)a1, (char *)&__src);
  v7 = (unsigned __int8 *)*a2;
  v5 = (unsigned __int8 *)(a2 + 1);
  v6 = v7;
  if (v7 != v5)
  {
    do
    {
      LODWORD(__src) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a1, v6 + 32);
      sub_20C2CE770((uint64_t)a1, (char *)&__src);
      LODWORD(__src) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a1, v6 + 56);
      result = sub_20C2CE770((uint64_t)a1, (char *)&__src);
      v8 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = *(unsigned __int8 **)v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
          v10 = *(_QWORD *)v9 == (_QWORD)v6;
          v6 = v9;
        }
        while (!v10);
      }
      v6 = v9;
    }
    while (v9 != v5);
  }
  return result;
}

__n128 sub_20C3258BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534DB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3258F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534DB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32591C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C3259AC(v5, &v10, v3, v4);
}

uint64_t sub_20C325964(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534E10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3259A0()
{
  return &unk_24C534E10;
}

void sub_20C3259AC(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD *v10[2];

  v10[0] = 0;
  v10[1] = 0;
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  v9 = v10;
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C325AB4((uint64_t *)&v6, (uint64_t)&v9);
  }
  sub_20C325A34(a4, (uint64_t)&v9);
  sub_20BDE9D48((uint64_t)&v9, v10[0]);
}

void sub_20C325A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_20BDE9D48((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C325A34(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  uint64_t *v4;
  const void **v6;
  _QWORD *v7[2];

  if ((sub_20C0302AC(a1) & 1) == 0)
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = (const void **)v7;
    sub_20C325D3C(a1, &v6);
    sub_20BDE9D48((uint64_t)&v6, v7[0]);
  }
  v4 = (uint64_t *)sub_20C23431C((const void ****)a1);
  return sub_20BF07C64(v4, a2);
}

void sub_20C325A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20BDE9D48((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

BOOL sub_20C325AB4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _BOOL8 v7;
  uint64_t *EmptyToken;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  const std::string *EmptyString;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  const std::string *v26;
  uint64_t *v27;
  __sFILE __str;

  __str._cookie = 0;
  v4 = (uint64_t)(a1 + 1);
  if (!sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&__str._cookie))
    return 0;
  v5 = a2 + 8;
  while (1)
  {
    v6 = __str._cookie--;
    v7 = v6 == 0;
    if (!v6)
      break;
    memset(&__str._bf, 0, 24);
    LODWORD(__str._p) = -1;
    EmptyToken = (uint64_t *)sub_20C2CEB84(v4, 0, &__str);
    if ((_DWORD)EmptyToken)
    {
      v9 = *a1;
      v10 = *(_QWORD *)(*a1 + 144);
      if (LODWORD(__str._p) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v10) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
        EmptyString = (const std::string *)&qword_254988388;
      }
      else
      {
        v11 = *(unsigned int *)(v10 + 4 * LODWORD(__str._p));
        v13 = v9 + 120;
        v12 = *(_QWORD *)(v9 + 120);
        if (v11 >= (*(_QWORD *)(v13 + 8) - v12) >> 3)
        {
          EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
          v14 = &qword_2549883A8;
        }
        else
        {
          v14 = (uint64_t *)(v12 + 8 * v11);
        }
        v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
        if (v15)
          EmptyString = (const std::string *)(v15 + 16);
        else
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
      }
      std::string::operator=((std::string *)&__str._bf, EmptyString);
      memset(&__str, 0, 24);
      LODWORD(__str._read) = -1;
      v18 = (uint64_t *)sub_20C2CEB84(v4, 0, (__sFILE *)&__str._read);
      if ((_DWORD)v18)
      {
        v19 = *a1;
        v20 = *(_QWORD *)(*a1 + 144);
        if (LODWORD(__str._read) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v20) >> 2))
        {
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)v18);
          v26 = (const std::string *)&qword_254988388;
        }
        else
        {
          v21 = *(unsigned int *)(v20 + 4 * LODWORD(__str._read));
          v23 = v19 + 120;
          v22 = *(_QWORD *)(v19 + 120);
          if (v21 >= (*(_QWORD *)(v23 + 8) - v22) >> 3)
          {
            v18 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)v18);
            v24 = &qword_2549883A8;
          }
          else
          {
            v24 = (uint64_t *)(v22 + 8 * v21);
          }
          v25 = *v24 & 0xFFFFFFFFFFFFFFF8;
          if (v25)
            v26 = (const std::string *)(v25 + 16);
          else
            v26 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v18);
        }
        std::string::operator=((std::string *)&__str, v26);
        __str._read = (int (__cdecl *)(void *, char *, int))&__str._bf;
        v27 = sub_20BDDDFDC((uint64_t **)a2, (const void **)&__str._bf._base, (uint64_t)&unk_20CAC184C, (__int128 **)&__str._read);
        std::string::operator=((std::string *)(v27 + 7), (const std::string *)&__str);
        v17 = 0;
      }
      else
      {
        sub_20BDE9D48(a2, *(_QWORD **)(a2 + 8));
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        v17 = 1;
        *(_QWORD *)a2 = v5;
      }
      if (*((char *)&__str._file + 5) < 0)
        operator delete(__str._p);
    }
    else
    {
      sub_20BDE9D48(a2, *(_QWORD **)(a2 + 8));
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v17 = 1;
      *(_QWORD *)a2 = v5;
    }
    if (*((char *)&__str._lbfsize + 7) < 0)
    {
      operator delete(__str._bf._base);
      if (v17)
        return v7;
    }
    else if (v17)
    {
      return v7;
    }
  }
  return v7;
}

void sub_20C325D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C325D3C(_QWORD *a1, const void ***a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C526858;
  sub_20C0307AC(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C325DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C325E10(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C325E4C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C325E70(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C325EC0((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C325E78(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534E90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C325EB4()
{
  return &unk_24C534E90;
}

void sub_20C325EC0(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C325F3C(v5, &v9, v3, v4);
}

void sub_20C325F3C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _QWORD **v9;
  _QWORD *v10[2];

  v10[0] = 0;
  v10[1] = 0;
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  v9 = v10;
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v6 + 1) = *(_QWORD *)(*(_QWORD *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C325FD4((uint64_t *)&v6, (uint64_t)&v9);
  }
  sub_20C325A34(a4, (uint64_t)&v9);
  sub_20BDE9D48((uint64_t)&v9, v10[0]);
}

void sub_20C325FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_20BDE9D48((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

BOOL sub_20C325FD4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *EmptyToken;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  const std::string *EmptyString;
  int v17;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  const std::string *v26;
  uint64_t *v27;
  std::string __str;
  std::string v30;
  uint64_t __dst;
  std::string *v32;

  __dst = 0;
  v4 = (uint64_t)(a1 + 1);
  if (!sub_20C2B9BEC((uint64_t)(a1 + 1), &__dst, 8uLL))
    return 0;
  v5 = a2 + 8;
  while (1)
  {
    v6 = __dst--;
    v7 = v6 == 0;
    if (!v6)
      break;
    memset(&v30, 0, sizeof(v30));
    LODWORD(__str.__r_.__value_.__l.__data_) = -1;
    EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B9BEC(v4, &__str, 4uLL);
    if ((_DWORD)EmptyToken)
    {
      v9 = *a1;
      v10 = *(_QWORD *)(*a1 + 144);
      if (LODWORD(__str.__r_.__value_.__l.__data_) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v10) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
        EmptyString = (const std::string *)&qword_254988388;
      }
      else
      {
        v11 = *(unsigned int *)(v10 + 4 * LODWORD(__str.__r_.__value_.__l.__data_));
        v13 = v9 + 120;
        v12 = *(_QWORD *)(v9 + 120);
        if (v11 >= (*(_QWORD *)(v13 + 8) - v12) >> 3)
        {
          EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
          v14 = &qword_2549883A8;
        }
        else
        {
          v14 = (uint64_t *)(v12 + 8 * v11);
        }
        v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
        if (v15)
          EmptyString = (const std::string *)(v15 + 16);
        else
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
      }
      std::string::operator=(&v30, EmptyString);
      memset(&__str, 0, sizeof(__str));
      LODWORD(v32) = -1;
      v18 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B9BEC(v4, &v32, 4uLL);
      if ((_DWORD)v18)
      {
        v19 = *a1;
        v20 = *(_QWORD *)(*a1 + 144);
        if (v32 >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v20) >> 2))
        {
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(v18);
          v26 = (const std::string *)&qword_254988388;
        }
        else
        {
          v21 = *(unsigned int *)(v20 + 4 * v32);
          v23 = v19 + 120;
          v22 = *(_QWORD *)(v19 + 120);
          if (v21 >= (*(_QWORD *)(v23 + 8) - v22) >> 3)
          {
            v18 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(v18);
            v24 = &qword_2549883A8;
          }
          else
          {
            v24 = (uint64_t *)(v22 + 8 * v21);
          }
          v25 = *v24 & 0xFFFFFFFFFFFFFFF8;
          if (v25)
            v26 = (const std::string *)(v25 + 16);
          else
            v26 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
        }
        std::string::operator=(&__str, v26);
        v32 = &v30;
        v27 = sub_20BDDDFDC((uint64_t **)a2, (const void **)&v30.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&v32);
        std::string::operator=((std::string *)(v27 + 7), &__str);
        v17 = 0;
      }
      else
      {
        sub_20BDE9D48(a2, *(_QWORD **)(a2 + 8));
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        v17 = 1;
        *(_QWORD *)a2 = v5;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      sub_20BDE9D48(a2, *(_QWORD **)(a2 + 8));
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v17 = 1;
      *(_QWORD *)a2 = v5;
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if (v17)
        return v7;
    }
    else if (v17)
    {
      return v7;
    }
  }
  return v7;
}

void sub_20C326228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C326264(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534EB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3262A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534EB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C3262C4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C32631C((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C3262D4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534F10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C326310()
{
  return &unk_24C534F10;
}

void sub_20C32631C(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C326438(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C32641C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C326438(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  _QWORD **v13;
  _QWORD *v14[2];

  v14[0] = 0;
  v14[1] = 0;
  v13 = v14;
  v10 = *a2;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v11 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v12 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v12 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C326534(&v10, (uint64_t)&v13);
    v5 = v11;
  }
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20C325A34(a4, (uint64_t)&v13);
  sub_20BDE9D48((uint64_t)&v13, v14[0]);
}

void sub_20C32650C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v15;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v15);
  sub_20BDE9D48((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

BOOL sub_20C326534(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *EmptyToken;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  const std::string *EmptyString;
  int v17;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  const std::string *v26;
  uint64_t *v27;
  std::string __str;
  std::string v30;
  uint64_t v31;
  std::string *v32;

  v31 = 0;
  v4 = a1 + 1;
  if (!sub_20C2B72E8(a1 + 1, (uint64_t)&v31, 8uLL))
    return 0;
  v5 = a2 + 8;
  while (1)
  {
    v6 = v31--;
    v7 = v6 == 0;
    if (!v6)
      break;
    memset(&v30, 0, sizeof(v30));
    LODWORD(__str.__r_.__value_.__l.__data_) = -1;
    EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B72E8(v4, (uint64_t)&__str, 4uLL);
    if ((_DWORD)EmptyToken)
    {
      v9 = *a1;
      v10 = *(_QWORD *)(*a1 + 144);
      if (LODWORD(__str.__r_.__value_.__l.__data_) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v10) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
        EmptyString = (const std::string *)&qword_254988388;
      }
      else
      {
        v11 = *(unsigned int *)(v10 + 4 * LODWORD(__str.__r_.__value_.__l.__data_));
        v13 = v9 + 120;
        v12 = *(_QWORD *)(v9 + 120);
        if (v11 >= (*(_QWORD *)(v13 + 8) - v12) >> 3)
        {
          EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
          v14 = &qword_2549883A8;
        }
        else
        {
          v14 = (uint64_t *)(v12 + 8 * v11);
        }
        v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
        if (v15)
          EmptyString = (const std::string *)(v15 + 16);
        else
          EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
      }
      std::string::operator=(&v30, EmptyString);
      memset(&__str, 0, sizeof(__str));
      LODWORD(v32) = -1;
      v18 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B72E8(v4, (uint64_t)&v32, 4uLL);
      if ((_DWORD)v18)
      {
        v19 = *a1;
        v20 = *(_QWORD *)(*a1 + 144);
        if (v32 >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v20) >> 2))
        {
          pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(v18);
          v26 = (const std::string *)&qword_254988388;
        }
        else
        {
          v21 = *(unsigned int *)(v20 + 4 * v32);
          v23 = v19 + 120;
          v22 = *(_QWORD *)(v19 + 120);
          if (v21 >= (*(_QWORD *)(v23 + 8) - v22) >> 3)
          {
            v18 = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(v18);
            v24 = &qword_2549883A8;
          }
          else
          {
            v24 = (uint64_t *)(v22 + 8 * v21);
          }
          v25 = *v24 & 0xFFFFFFFFFFFFFFF8;
          if (v25)
            v26 = (const std::string *)(v25 + 16);
          else
            v26 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v18);
        }
        std::string::operator=(&__str, v26);
        v32 = &v30;
        v27 = sub_20BDDDFDC((uint64_t **)a2, (const void **)&v30.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (__int128 **)&v32);
        std::string::operator=((std::string *)(v27 + 7), &__str);
        v17 = 0;
      }
      else
      {
        sub_20BDE9D48(a2, *(_QWORD **)(a2 + 8));
        *(_QWORD *)(a2 + 8) = 0;
        *(_QWORD *)(a2 + 16) = 0;
        v17 = 1;
        *(_QWORD *)a2 = v5;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      sub_20BDE9D48(a2, *(_QWORD **)(a2 + 8));
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v17 = 1;
      *(_QWORD *)a2 = v5;
    }
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v30.__r_.__value_.__l.__data_);
      if (v17)
        return v7;
    }
    else if (v17)
    {
      return v7;
    }
  }
  return v7;
}

void sub_20C326788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C3267BC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534F30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C326868(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C534FB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C326914(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535030;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3269C0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5350B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C326A74(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534F30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C326AB0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534F30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C326AD4(uint64_t a1, uint64_t a2)
{
  return sub_20C326B24((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_20C326ADC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C534F90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C326B18()
{
  return &unk_24C534F90;
}

uint64_t sub_20C326B24(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = *(_QWORD *)(*a1 + 6328);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (uint64_t *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *(uint64_t **)a2;
  return sub_20C326B7C(v3, v2, (_QWORD *)(v4 + 256), v6);
}

uint64_t sub_20C326B7C(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  _OWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  unsigned int *v16;
  _QWORD v17[4];
  _QWORD v18[2];
  void **v19;

  v18[0] = a2;
  v18[1] = a3;
  v7 = (unsigned int *)a4[1];
  v16 = v7;
  if (v7)
  {
    v8 = v7 + 6;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  memset(v17, 0, 24);
  sub_20BFC31F4(v17, a4[2], a4[3], (a4[3] - a4[2]) >> 4);
  v17[3] = a4[5];
  v19 = (void **)v17;
  sub_20BF8CA20(&v19);
  sub_20C020410((void **)&v16);
  v10 = *a1;
  if (!*a1)
  {
    v11 = operator new(0x28uLL);
    *v11 = 0u;
    v11[1] = 0u;
    *((_DWORD *)v11 + 8) = 1065353216;
    sub_20C2B5814(a1, (uint64_t)v11);
    v10 = *a1;
  }
  v19 = 0;
  v12 = sub_20C326D84(v10, a4, a4, &v19);
  v13 = v12;
  if (v14)
  {
    v12[8] = *a3 & 0xFFFFFFFFFFFFLL | 0x2E000000000000;
    sub_20C326CA4(v18, (uint64_t)a4);
  }
  return v13[8];
}

void sub_20C326C90(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C020410(v1);
  _Unwind_Resume(a1);
}

void sub_20C326CA4(void *a1, uint64_t a2)
{
  _QWORD v4[3];
  void *__p;
  char *v6;
  uint64_t v7;
  char __src[8];

  __p = a1;
  v6 = __src;
  v7 = a2;
  sub_20C3271A8((uint64_t)a1, (uint64_t **)&__p);
  sub_20C2B7248((uint64_t)a1, __src);
  sub_20C3277C0(&__p, (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 4);
  v4[0] = a1;
  v4[1] = &__p;
  v4[2] = a2;
  sub_20C3272A4((uint64_t)a1, (uint64_t)v4);
  v4[0] = (v6 - (_BYTE *)__p) >> 3;
  sub_20C2B7248((uint64_t)a1, (char *)v4);
  sub_20C2D6610((uint64_t)a1, (char *)__p, (v6 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v6 = (char *)__p;
    operator delete(__p);
  }
}

void sub_20C326D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C326D84(uint64_t a1, uint64_t *a2, _QWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C29E914((uint64_t)&v25, a2, a2 + 1, (uint64_t)(a2 + 2), a2 + 5);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if ((sub_20C29EAB8((uint64_t)(v14 + 2), (uint64_t)a2) & 1) != 0)
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_20C327028(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      v23 = *(_QWORD *)(*v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  v14 = v25;
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20C327004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20C327158((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C327028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x48uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C3270C0(v10 + 2, a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C3270A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C327158(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3270C0(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 24);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_20BFC31F4(a1 + 2, a2[2], a2[3], (uint64_t)(a2[3] - a2[2]) >> 4);
  a1[5] = a2[5];
  a1[6] = *a3;
  return a1;
}

void sub_20C327144(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C020410(v1);
  _Unwind_Resume(a1);
}

void sub_20C327158(uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 4;
    sub_20BF8CA20(&v3);
    sub_20C020410(__p + 3);
  }
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C3271A8(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t __src;

  v4 = **(_QWORD **)(a1 + 8);
  __src = 0;
  sub_20C2B7248(a1, (char *)&__src);
  *a2[1] = sub_20C3273AC(*(uint64_t **)(**a2 + 6248), **a2, (_QWORD *)(*(_QWORD *)(**a2 + 6328) + 256), a2[2][1]);
  v5 = *(uint64_t **)(a1 + 8);
  v6 = *v5;
  v7 = v5[2];
  if (v7 > v4 || v5[4] + v7 < v4)
  {
    sub_20C2B209C(*(_QWORD *)(a1 + 8));
    *v5 = v4;
    v5 += 2;
  }
  *v5 = v4;
  __src = v6 - v4;
  result = sub_20C2B7248(a1, (char *)&__src);
  v9 = *(_QWORD **)(a1 + 8);
  v10 = v9[2];
  if (v10 > v6 || v9[4] + v10 < v6)
  {
    result = sub_20C2B209C((_BOOL8)v9);
    *v9 = v6;
    v9 += 2;
  }
  *v9 = v6;
  return result;
}

uint64_t sub_20C3272A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  const pxrInternal__aapl__pxrReserved__::VtValue *v6;
  const pxrInternal__aapl__pxrReserved__::VtValue *v7;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  _QWORD *v14;
  uint64_t v15;
  uint64_t __src;

  v4 = **(_QWORD **)(a1 + 8);
  __src = 0;
  sub_20C2B7248(a1, (char *)&__src);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)(v5 + 16);
  v7 = *(const pxrInternal__aapl__pxrReserved__::VtValue **)(v5 + 24);
  if (v6 != v7)
  {
    v8 = *(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile ***)a2;
    v9 = **(_QWORD ***)(a2 + 8);
    do
    {
      *v9++ = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_PackValue(*v8, v6);
      v6 = (const pxrInternal__aapl__pxrReserved__::VtValue *)((char *)v6 + 16);
    }
    while (v6 != v7);
  }
  v10 = *(uint64_t **)(a1 + 8);
  v11 = *v10;
  v12 = v10[2];
  if (v12 > v4 || v10[4] + v12 < v4)
  {
    sub_20C2B209C(*(_QWORD *)(a1 + 8));
    *v10 = v4;
    v10 += 2;
  }
  *v10 = v4;
  __src = v11 - v4;
  result = sub_20C2B7248(a1, (char *)&__src);
  v14 = *(_QWORD **)(a1 + 8);
  v15 = v14[2];
  if (v15 > v11 || v14[4] + v15 < v11)
  {
    result = sub_20C2B209C((_BOOL8)v14);
    *v14 = v11;
    v14 += 2;
  }
  *v14 = v11;
  return result;
}

uint64_t sub_20C3273AC(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t v13;
  void *__p;
  void *v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = a2;
  v17[1] = a3;
  v15 = 0;
  v16 = 0;
  __p = 0;
  sub_20BDDF5DC(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B5C98(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v13 = 0;
  v9 = sub_20C327480(v7, (double **)a4, a4, &v13);
  v10 = v9;
  if (v11)
  {
    v9[5] = *a3 & 0xFFFFFFFFFFFFLL | 0x30000000000000;
    sub_20C31CE50((uint64_t)v17, a4);
  }
  return v10[5];
}

_QWORD *sub_20C327480(uint64_t a1, double **a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *result;
  unint64_t v15;
  double *v16;
  double *v17;
  double *i;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v27[3];

  v9 = sub_20C29EA4C((uint64_t)v27, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      result = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = result[1];
          if (v15 == v10)
          {
            v17 = (double *)result[2];
            v16 = (double *)result[3];
            if ((char *)v16 - (char *)v17 == (char *)a2[1] - (char *)*a2)
            {
              if (v17 == v16)
                return result;
              for (i = *a2; *v17 == *i; ++i)
              {
                if (++v17 == v16)
                  return result;
              }
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C327718(a1, v10, a3, a4, (uint64_t)v27);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_20BDEC6E0(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v27[0] = *v25;
    *v25 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11)
          v26 %= v11;
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27[0];
    }
  }
  result = (_QWORD *)v27[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C3276F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_20C2B1784((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C327718@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = 0;
  result = sub_20BDDF5DC(v10 + 2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3);
  v10[5] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C3277A4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C2B1784(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3277C0(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20C327818(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20C32783C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C534FB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C327878(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C534FB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void **sub_20C32789C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v11 = v6;
  *((_QWORD *)&v11 + 1) = v7;
  v12 = 0;
  v13 = v8;
  v14 = v9;
  return sub_20C32792C(v5, &v11, v3, v4);
}

uint64_t sub_20C3278E4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535010))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C327920()
{
  return &unk_24C535010;
}

void **sub_20C32792C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  _OWORD v17[2];
  void **v18;

  v15 = 0;
  v7 = (unsigned int *)operator new(0x20uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = 0;
  v16 = v7;
  v7[6] = 0;
  v8 = v7 + 6;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  memset(v17, 0, sizeof(v17));
  v10 = a2[1];
  v12 = *a2;
  v13 = v10;
  v14 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v13 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C327A04((uint64_t *)&v12, (uint64_t)&v15);
  }
  sub_20C29E53C(a4, &v15);
  v18 = (void **)v17;
  sub_20BF8CA20(&v18);
  return sub_20C020410((void **)&v16);
}

void sub_20C3279F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C29E4FC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C327A04(uint64_t *a1, uint64_t a2)
{
  char *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _BOOL8 v13;
  _QWORD *v14;
  char v15;
  char *v16;
  unsigned int *v17;
  unsigned int v18;
  int (__cdecl *v19)(void *, const char *, int);
  unsigned int *v20;
  unsigned int v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  __sFILE var88;

  v4 = (char *)operator new(0x20uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)&var88._lbfsize = v4;
  *((_DWORD *)v4 + 6) = 0;
  v5 = (unsigned int *)(v4 + 24);
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  memset(&var88._cookie, 0, 32);
  v7 = a1[2];
  *(_QWORD *)&var88._bf._size = v7 & 0xFFFFFFFFFFFFLL | 0x2E000000000000;
  *(_QWORD *)&var88._r = 0;
  if (sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&var88._r))
    a1[2] = *(_QWORD *)&var88._r + v7;
  if (sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&var88._bf))
  {
    v8 = (unint64_t *)(*a1 + 208);
    LOBYTE(var88._flags) = 0;
    *(_QWORD *)&var88._r = v8;
    tbb::spin_rw_mutex_v3::internal_acquire_reader(v8);
    v9 = sub_20BEDE9B4((_QWORD *)(*a1 + 168), &var88._bf._base);
    if (v9)
    {
      v10 = v9[3];
      if (v10)
      {
        v11 = (unsigned int *)(v10 + 24);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
    }
    else
    {
      if (!LOBYTE(var88._flags))
      {
        LOBYTE(var88._flags) = 1;
        tbb::spin_rw_mutex_v3::internal_upgrade(*(tbb::spin_rw_mutex_v3 **)&var88._r);
      }
      v14 = sub_20C328020(*a1 + 168, &var88._bf._base, &var88._bf._base);
      if (v15)
      {
        v16 = (char *)operator new(0x20uLL);
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = 0;
        *((_DWORD *)v16 + 6) = 0;
        v17 = (unsigned int *)(v16 + 24);
        var88._write = (int (__cdecl *)(void *, const char *, int))v16;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        sub_20C327D60(*a1, (uint64_t)var88._bf._base, (void **)v16);
        v19 = (int (__cdecl *)(void *, const char *, int))v14[3];
        v14[3] = var88._write;
        var88._write = v19;
        sub_20C020410((void **)&var88._write);
      }
      v10 = v14[3];
      if (v10)
      {
        v20 = (unsigned int *)(v10 + 24);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
    }
    var88._write = *(int (__cdecl **)(void *, const char *, int))&var88._lbfsize;
    *(_QWORD *)&var88._lbfsize = v10;
    sub_20C020410((void **)&var88._write);
    v22 = *(unint64_t **)&var88._r;
    *(_QWORD *)&var88._r = 0;
    if (LOBYTE(var88._flags))
    {
      while (1)
      {
        v23 = *v22;
        v24 = *v22 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          while (1)
          {
            v25 = __ldaxr(v22);
            if (v25 != v23)
              break;
            if (!__stlxr(v24, v22))
              goto LABEL_31;
          }
          __clrex();
          do
            v26 = __ldxr(v22);
          while (__stxr(v26, v22));
        }
        while (v26 == v23);
        sched_yield();
      }
    }
    do
      v27 = __ldaxr(v22);
    while (__stlxr(v27 - 4, v22));
LABEL_31:
    v28 = a1[2];
    var88._write = 0;
    if (sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&var88._write))
      a1[2] = (uint64_t)var88._write + v28;
    var88._p = 0;
    v13 = sub_20C2C1BD8((uint64_t)(a1 + 1), 0, &var88);
    if (v13)
    {
      var88._seek = (fpos_t (__cdecl *)(void *, fpos_t, int))a1[2];
      a1[2] = (uint64_t)var88._seek + 8 * (uint64_t)var88._p;
      v29 = *(_QWORD *)&var88._lbfsize;
      *(_QWORD *)a2 = *(_QWORD *)&var88._bf._size;
      if (v29)
      {
        v30 = (unsigned int *)(v29 + 24);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      var88._write = *(int (__cdecl **)(void *, const char *, int))(a2 + 8);
      *(_QWORD *)(a2 + 8) = v29;
      sub_20C020410((void **)&var88._write);
      if (&var88._bf._size != (int *)a2)
        sub_20C328670(a2 + 16, (_QWORD *)var88._cookie, (uint64_t)var88._close, ((char *)var88._close - (char *)var88._cookie) >> 4);
      *(_QWORD *)(a2 + 40) = var88._seek;
    }
    sub_20BEBF29C(&var88._r);
  }
  else
  {
    v13 = 0;
  }
  *(_QWORD *)&var88._r = &var88._cookie;
  sub_20BF8CA20((void ***)&var88._r);
  sub_20C020410((void **)&var88._lbfsize);
  return v13;
}

void sub_20C327D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20C020410((void **)(v3 - 56));
  sub_20BEBF29C((uint64_t *)va);
  sub_20C29E4FC((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20C327D60(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  _QWORD v24[5];
  _QWORD v25[4];
  int v26;

  if (*(_BYTE *)(a1 + 6568))
  {
    v6 = *(_QWORD *)(a1 + 6560);
    v25[0] = a1;
    v25[2] = a1 + 6448;
    v25[3] = v6;
    v26 = sub_20C2A2B6C();
    if ((a2 & 0x4000000000000000) == 0)
    {
      v25[1] = *(_QWORD *)(*(_QWORD *)(a1 + 6448) + 24) + (a2 & 0xFFFFFFFFFFFFLL);
      sub_20C3282D0((uint64_t)v25, a3);
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 6456);
    if (v7)
    {
      v8 = *(_QWORD *)(a1 + 6464);
      v9 = *(_QWORD *)(a1 + 6472);
      v24[0] = a1;
      v24[1] = v8;
      v24[3] = v9;
      v24[4] = v7;
      if ((a2 & 0x4000000000000000) == 0)
      {
        v24[2] = a2 & 0xFFFFFFFFFFFFLL;
        sub_20C328404((uint64_t)v24, a3);
      }
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 6488);
      v11 = *(std::__shared_weak_count **)(a1 + 6496);
      v19 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
        v20 = a1;
        v21 = v10;
        v22 = v11;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
      }
      else
      {
        v20 = a1;
        v21 = v10;
        v22 = 0;
      }
      v23 = 0;
      if ((a2 & 0x4000000000000000) == 0)
      {
        v23 = a2 & 0xFFFFFFFFFFFFLL;
        sub_20C328524((uint64_t)&v20, a3);
        v11 = v22;
      }
      if (v11)
      {
        v15 = (unint64_t *)&v11->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      if (v19)
      {
        v17 = (unint64_t *)&v19->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
}

#error "20C327FB8: call analysis failed (funcsize=50)"

void sub_20C327FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_QWORD *sub_20C328020(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[2];
  char v24;

  v6 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 16;
  v13 = operator new(0x20uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v6;
  v13[2] = *a3;
  v13[3] = 0;
  v24 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23[0] = *v20;
    *v20 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v23[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7)
          v21 %= v7;
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23[0];
    }
  }
  v10 = (_QWORD *)v23[0];
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C32828C((uint64_t)v23, 0);
  return v10;
}

void sub_20C328274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C32828C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C32828C(uint64_t a1, uint64_t a2)
{
  void **v2;

  v2 = *(void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C020410(v2 + 3);
    operator delete(v2);
  }
}

uint64_t sub_20C3282D0(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *__p;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  unint64_t __dst;

  __dst = 0;
  v4 = a1 + 8;
  if (!sub_20C2C9E6C(a1 + 8, &__dst, 8uLL))
    return 0;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __p = "usd/crateFile.cpp";
    v13 = "_Read";
    v14 = 1189;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<const pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_R"
          "ead(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<const pxrInternal_"
          "_aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>, T = double]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_20BDE48D4(&__p, __dst);
  v8 = sub_20C2C9E6C(v4, __p, 8 * __dst);
  v9 = v8;
  if (&__p == a2)
    v10 = 0;
  else
    v10 = v8;
  if ((v10 & 1) != 0)
    sub_20BDDF7E4((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_20C3283E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C328404(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  void *__p;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __p = "usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = double]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20BDE48D4(&__p, v16);
  v7 = sub_20C2D71BC(a1, (__sFILE *)__p, v16);
  v8 = v7;
  if (&__p != a2 && v7)
    sub_20BDDF7E4((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_20C328508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C328524(uint64_t a1, void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;

  v19 = 0;
  v4 = (_QWORD *)(a1 + 8);
  if (!sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __p = "usd/crateFile.cpp";
    v15 = "_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = double]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20BDE48D4(&__p, v19);
  v9 = sub_20C2B72E8(v4, (uint64_t)__p, 8 * v19);
  v10 = v9;
  if (&__p == a2)
    v11 = 0;
  else
    v11 = v9;
  if ((v11 & 1) != 0)
    sub_20BDDF7E4((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_20C328654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C328670(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v6 = a2;
  v8 = a1 + 16;
  v9 = *(_QWORD **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    sub_20C129CDC((void **)a1);
    if (a4 >> 60)
      sub_20BDDF694();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_20BE90F0C((_QWORD *)a1, v12);
    result = sub_20BFC3278(v8, (uint64_t)v6, a3, *(_QWORD *)(a1 + 8));
LABEL_15:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = *(_QWORD *)(a1 + 8);
  v14 = (result - (uint64_t)v9) >> 4;
  if (v14 < a4)
  {
    v15 = (uint64_t)&a2[2 * v14];
    if ((_QWORD *)result != v9)
    {
      v16 = 16 * v14;
      do
      {
        sub_20BF4A9BC(v9, v6);
        v6 += 2;
        v9 += 2;
        v16 -= 16;
      }
      while (v16);
      v9 = *(_QWORD **)(a1 + 8);
    }
    result = sub_20BFC3278(v8, v15, a3, (uint64_t)v9);
    goto LABEL_15;
  }
  if (a2 == (_QWORD *)a3)
  {
    v17 = v9;
  }
  else
  {
    v17 = v9;
    do
    {
      sub_20BF4A9BC(v9, v6);
      v6 += 2;
      v9 += 2;
      v17 += 2;
    }
    while (v6 != (_QWORD *)a3);
    result = *(_QWORD *)(a1 + 8);
  }
  while ((_QWORD *)result != v17)
    result = sub_20BF4C2D8(result - 16);
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

void sub_20C3287DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

__n128 sub_20C3287F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32882C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void **sub_20C328850(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_20C3288A0((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C328858(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535090))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C328894()
{
  return &unk_24C535090;
}

void **sub_20C3288A0(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v10 = *a1;
  *((_QWORD *)&v10 + 1) = v8;
  v11 = v6;
  v12 = v7;
  v13 = sub_20C2A2B6C();
  return sub_20C32891C(v5, &v10, v3, v4);
}

void **sub_20C32891C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  __int128 v10;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  _OWORD v17[2];
  void **v18;

  v15 = 0;
  v7 = (unsigned int *)operator new(0x20uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = 0;
  v16 = v7;
  v7[6] = 0;
  v8 = v7 + 6;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  memset(v17, 0, sizeof(v17));
  v10 = a2[1];
  v12 = *a2;
  v13 = v10;
  v14 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v12 + 1) = *(_QWORD *)(*(_QWORD *)v13 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C328A04((uint64_t)&v12, &v15);
  }
  sub_20C29E53C(a4, &v15);
  v18 = (void **)v17;
  sub_20BF8CA20(&v18);
  return sub_20C020410((void **)&v16);
}

void sub_20C3289F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C29E4FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C328A04(uint64_t a1, uint64_t *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  tbb::spin_rw_mutex_v3 *v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  char *v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v32;
  tbb::spin_rw_mutex_v3 *v33;
  char v34;
  uint64_t __dst;
  uint64_t v36;
  unsigned int *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v4 = (unsigned int *)operator new(0x20uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = 0;
  v37 = v4;
  v4[6] = 0;
  v5 = v4 + 6;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v39 = 0u;
  v38 = 0u;
  v36 = (*(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24)) & 0xFFFFFFFFFFFFLL | 0x2E000000000000;
  sub_20C328D44(a1);
  if ((sub_20C2B9BEC(a1 + 8, &__dst, 8uLL) & 1) != 0)
  {
    v7 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)a1 + 208);
    v34 = 0;
    v33 = v7;
    tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v7);
    v8 = sub_20BEDE9B4((_QWORD *)(*(_QWORD *)a1 + 168), &__dst);
    if (v8)
    {
      v9 = (unsigned int *)v8[3];
      if (v9)
      {
        v10 = v9 + 6;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    else
    {
      v34 = 1;
      tbb::spin_rw_mutex_v3::internal_upgrade(v33);
      v13 = sub_20C328020(*(_QWORD *)a1 + 168, &__dst, &__dst);
      if (v14)
      {
        v15 = (char *)operator new(0x20uLL);
        *(_QWORD *)v15 = 0;
        *((_QWORD *)v15 + 1) = 0;
        *((_QWORD *)v15 + 2) = 0;
        *((_DWORD *)v15 + 6) = 0;
        v16 = (unsigned int *)(v15 + 24);
        v40 = (uint64_t)v15;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        sub_20C327D60(*(_QWORD *)a1, __dst, (void **)v15);
        v18 = v13[3];
        v13[3] = v40;
        v40 = v18;
        sub_20C020410((void **)&v40);
      }
      v9 = (unsigned int *)v13[3];
      if (v9)
      {
        v19 = v9 + 6;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
    }
    v40 = (uint64_t)v37;
    v37 = v9;
    sub_20C020410((void **)&v40);
    v21 = (unint64_t *)v33;
    v33 = 0;
    if (v34)
    {
      while (1)
      {
        v22 = *v21;
        v23 = *v21 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          while (1)
          {
            v24 = __ldaxr(v21);
            if (v24 != v22)
              break;
            if (!__stlxr(v23, v21))
              goto LABEL_27;
          }
          __clrex();
          do
            v25 = __ldxr(v21);
          while (__stxr(v25, v21));
        }
        while (v25 == v22);
        sched_yield();
      }
    }
    do
      v26 = __ldaxr(v21);
    while (__stlxr(v26 - 4, v21));
LABEL_27:
    sub_20C328D44(a1);
    v32 = 0;
    v12 = sub_20C2B9BEC(a1 + 8, &v32, 8uLL);
    if ((v12 & 1) != 0)
    {
      v27 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
      *((_QWORD *)&v39 + 1) = *(_QWORD *)(a1 + 8) - v27;
      *(_QWORD *)(a1 + 8) = v27 + *((_QWORD *)&v39 + 1) + 8 * v32;
      v28 = (char *)v37;
      *a2 = v36;
      if (v28)
      {
        v29 = (unsigned int *)(v28 + 24);
        do
          v30 = __ldxr(v29);
        while (__stxr(v30 + 1, v29));
      }
      v40 = a2[1];
      a2[1] = (uint64_t)v28;
      sub_20C020410((void **)&v40);
      if (&v36 != a2)
        sub_20C328670((uint64_t)(a2 + 2), (_QWORD *)v38, *((uint64_t *)&v38 + 1), (uint64_t)(*((_QWORD *)&v38 + 1) - v38) >> 4);
      a2[5] = *((_QWORD *)&v39 + 1);
    }
    sub_20BEBF29C(&v33);
  }
  else
  {
    v12 = 0;
  }
  v33 = (tbb::spin_rw_mutex_v3 *)&v38;
  sub_20BF8CA20((void ***)&v33);
  sub_20C020410((void **)&v37);
  return v12;
}

void sub_20C328CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20C020410((void **)(v3 - 56));
  sub_20BEBF29C((uint64_t *)va);
  sub_20C29E4FC((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C328D44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t __dst;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  __dst = 0;
  result = sub_20C2B9BEC(a1 + 8, &__dst, 8uLL);
  if ((_DWORD)result)
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24) + __dst + v2 - v3;
  return result;
}

__n128 sub_20C328DB8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5350B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C328DF4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5350B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C328E18(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C328E70((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C328E28(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535110))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C328E64()
{
  return &unk_24C535110;
}

void sub_20C328E70(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C328F8C(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C328F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void **sub_20C328F8C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  _OWORD v21[2];
  void **v22;

  v19 = 0;
  v7 = (unsigned int *)operator new(0x20uLL);
  *((_QWORD *)v7 + 1) = 0;
  *((_QWORD *)v7 + 2) = 0;
  *(_QWORD *)v7 = 0;
  v20 = v7;
  v7[6] = 0;
  v8 = v7 + 6;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  memset(v21, 0, sizeof(v21));
  v16 = *a2;
  v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v17 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v18 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v18 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C3290DC((uint64_t *)&v16, &v19);
    v10 = v17;
  }
  if (v10)
  {
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_20C29E53C(a4, &v19);
  v22 = (void **)v21;
  sub_20BF8CA20(&v22);
  return sub_20C020410((void **)&v20);
}

void sub_20C3290B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v14;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v14);
  sub_20C29E4FC((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3290DC(uint64_t *a1, uint64_t *a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  tbb::spin_rw_mutex_v3 *v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  char v15;
  char *v16;
  unsigned int *v17;
  unsigned int v18;
  char *v19;
  unsigned int *v20;
  unsigned int v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v33;
  tbb::spin_rw_mutex_v3 *v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  __int128 v39;
  __int128 v40;
  char *v41;

  v4 = (unsigned int *)operator new(0x20uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = 0;
  v38 = v4;
  v4[6] = 0;
  v5 = v4 + 6;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  v40 = 0u;
  v39 = 0u;
  v7 = a1[3];
  v37 = v7 & 0xFFFFFFFFFFFFLL | 0x2E000000000000;
  v34 = 0;
  if (sub_20C2B72E8(a1 + 1, (uint64_t)&v34, 8uLL))
    a1[3] = (uint64_t)v34 + v7;
  if ((sub_20C2B72E8(a1 + 1, (uint64_t)&v36, 8uLL) & 1) != 0)
  {
    v8 = (tbb::spin_rw_mutex_v3 *)(*a1 + 208);
    v35 = 0;
    v34 = v8;
    tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v8);
    v9 = sub_20BEDE9B4((_QWORD *)(*a1 + 168), &v36);
    if (v9)
    {
      v10 = (unsigned int *)v9[3];
      if (v10)
      {
        v11 = v10 + 6;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
    }
    else
    {
      if (!v35)
      {
        v35 = 1;
        tbb::spin_rw_mutex_v3::internal_upgrade(v34);
      }
      v14 = sub_20C328020(*a1 + 168, &v36, &v36);
      if (v15)
      {
        v16 = (char *)operator new(0x20uLL);
        *(_QWORD *)v16 = 0;
        *((_QWORD *)v16 + 1) = 0;
        *((_QWORD *)v16 + 2) = 0;
        *((_DWORD *)v16 + 6) = 0;
        v17 = (unsigned int *)(v16 + 24);
        v41 = v16;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        sub_20C327D60(*a1, v36, (void **)v16);
        v19 = (char *)v14[3];
        v14[3] = v41;
        v41 = v19;
        sub_20C020410((void **)&v41);
      }
      v10 = (unsigned int *)v14[3];
      if (v10)
      {
        v20 = v10 + 6;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
    }
    v41 = (char *)v38;
    v38 = v10;
    sub_20C020410((void **)&v41);
    v22 = (unint64_t *)v34;
    v34 = 0;
    if (v35)
    {
      while (1)
      {
        v23 = *v22;
        v24 = *v22 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          while (1)
          {
            v25 = __ldaxr(v22);
            if (v25 != v23)
              break;
            if (!__stlxr(v24, v22))
              goto LABEL_31;
          }
          __clrex();
          do
            v26 = __ldxr(v22);
          while (__stxr(v26, v22));
        }
        while (v26 == v23);
        sched_yield();
      }
    }
    do
      v27 = __ldaxr(v22);
    while (__stlxr(v27 - 4, v22));
LABEL_31:
    v28 = a1[3];
    v41 = 0;
    if (sub_20C2B72E8(a1 + 1, (uint64_t)&v41, 8uLL))
      a1[3] = (uint64_t)&v41[v28];
    v33 = 0;
    v13 = sub_20C2B72E8(a1 + 1, (uint64_t)&v33, 8uLL);
    if ((v13 & 1) != 0)
    {
      *((_QWORD *)&v40 + 1) = a1[3];
      a1[3] = *((_QWORD *)&v40 + 1) + 8 * v33;
      v29 = (char *)v38;
      *a2 = v37;
      if (v29)
      {
        v30 = (unsigned int *)(v29 + 24);
        do
          v31 = __ldxr(v30);
        while (__stxr(v31 + 1, v30));
      }
      v41 = (char *)a2[1];
      a2[1] = (uint64_t)v29;
      sub_20C020410((void **)&v41);
      if (&v37 != a2)
        sub_20C328670((uint64_t)(a2 + 2), (_QWORD *)v39, *((uint64_t *)&v39 + 1), (uint64_t)(*((_QWORD *)&v39 + 1) - v39) >> 4);
      a2[5] = *((_QWORD *)&v40 + 1);
    }
    sub_20BEBF29C(&v34);
  }
  else
  {
    v13 = 0;
  }
  v34 = (tbb::spin_rw_mutex_v3 *)&v39;
  sub_20BF8CA20((void ***)&v34);
  sub_20C020410((void **)&v38);
  return v13;
}

void sub_20C3293EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20C020410((void **)(v3 - 56));
  sub_20BEBF29C((uint64_t *)va);
  sub_20C29E4FC((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C329438(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535130;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3294E4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5351B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C329590(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535230;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32963C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5352B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C3296F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32972C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C329750(uint64_t a1, uint64_t *a2)
{
  return sub_20C3297A0((char ***)(a1 + 8), a2);
}

uint64_t sub_20C329758(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535190))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C329794()
{
  return &unk_24C535190;
}

uint64_t sub_20C3297A0(char ***a1, uint64_t *a2)
{
  char **v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = (*a1)[791];
  v5 = a2[1];
  if ((v5 & 4) != 0)
    v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *a2;
  return sub_20C3297F8(v3, v2, (char **)v4 + 32, v6);
}

uint64_t sub_20C3297F8(uint64_t *a1, char **a2, char **a3, uint64_t a4)
{
  _DWORD *v7;
  uint64_t v8;
  _OWORD *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  char v12;
  uint64_t v14;
  void *__p[2];
  uint64_t v16;
  int v17;
  int v18;
  __int128 v19;
  char **v20[2];

  v20[0] = a2;
  v20[1] = a3;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a4 + 16);
  }
  sub_20BFD6E54(&v17, (_DWORD *)(a4 + 24));
  v7 = sub_20BFD6EA4(&v18, (_DWORD *)(a4 + 28));
  v19 = *(_OWORD *)(a4 + 32);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v7);
  sub_20BFD265C(&v17);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  v8 = *a1;
  if (!*a1)
  {
    v9 = operator new(0x28uLL);
    *v9 = 0u;
    v9[1] = 0u;
    *((_DWORD *)v9 + 8) = 1065353216;
    sub_20C2B5A48(a1, (uint64_t)v9);
    v8 = *a1;
  }
  v14 = 0;
  v10 = sub_20C329A28(v8, (int8x16_t *)a4, (__int128 *)a4, &v14);
  v11 = v10;
  if (v12)
  {
    *((_QWORD *)v10 + 8) = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x2F000000000000;
    sub_20C329918(v20, a4);
  }
  return *((_QWORD *)v11 + 8);
}

uint64_t sub_20C329918(char ***a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  void *__p[2];
  char v7;
  uint64_t __src;

  if (!pxrInternal__aapl__pxrReserved__::SdfLayerOffset::IsIdentity((pxrInternal__aapl__pxrReserved__::SdfLayerOffset *)(a2 + 32)))
  {
    v4 = (uint64_t)(*a1)[791];
    sub_20BDDC0E4(__p, "A payload with a non-identity layer offset was detected, which requires crate version 0.8.0.");
    sub_20C312C5C(v4, (const char *)0x800, (char *)__p);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  LODWORD(__src) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a1, (unsigned __int8 *)a2);
  sub_20C2CE770((uint64_t)a1, (char *)&__src);
  LODWORD(__src) = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddPath((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)*a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 24));
  result = sub_20C2CE770((uint64_t)a1, (char *)&__src);
  if ((((*a1)[791][248] << 16) | ((*a1)[791][249] << 8)) >= 0x800u)
  {
    __src = *(_QWORD *)(a2 + 32);
    sub_20C2B7248((uint64_t)a1, (char *)&__src);
    __src = *(_QWORD *)(a2 + 40);
    return sub_20C2B7248((uint64_t)a1, (char *)&__src);
  }
  return result;
}

void sub_20C329A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20C329A28(uint64_t a1, int8x16_t *a2, __int128 *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unsigned __int8 **v22;
  unint64_t v23;
  unsigned __int8 *v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C02F0AC((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, (pxrInternal__aapl__pxrReserved__ *)a2, &a2[1].u32[2], a2 + 2);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfPayload::operator==(i + 16, (unsigned __int8 *)a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  sub_20C329CCC(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *(_QWORD *)v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25)
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  i = v25;
  v25 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C329D50((uint64_t)&v25, 0);
  return i;
}

void sub_20C329CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C329D50((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C329CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x48uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C1307E0(v10 + 2, a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C329D38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C329D50(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C329D50(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C2B5AE8((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

__n128 sub_20C329D9C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5351B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C329DD8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5351B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C329DFC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C329E8C(v5, &v10, v3, v4);
}

uint64_t sub_20C329E44(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535210))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C329E80()
{
  return &unk_24C535210;
}

void sub_20C329E8C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  double v11[2];
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  char v16;
  int v17;
  _DWORD v18[5];

  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v12 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v11, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(&v15, __p, &v12, v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_20BFD265C(&v12);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v9 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C32A0F0((uint64_t *)&v8, (uint64_t)&v15);
  }
  sub_20C329FC8(a4, &v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
  sub_20BFD265C(&v17);
  if (v16 < 0)
    operator delete((void *)v15);
}

void sub_20C329F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  sub_20C02CDE4(v23 - 80);
  _Unwind_Resume(a1);
}

void sub_20C329FC8(pxrInternal__aapl__pxrReserved__::VtValue *a1, __int128 *a2)
{
  __int128 *v4;
  double v5[2];
  uint64_t v6;
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  char v10;
  int v11;
  _DWORD v12[5];

  if ((sub_20C1B1F04(a1) & 1) == 0)
  {
    v7[0] = 0;
    v7[1] = 0;
    v8 = 0;
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v6 + 1);
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v5, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, v7, &v6, v5);
    sub_20C32A42C(a1, (__int128 *)__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v12);
    sub_20BFD265C(&v11);
    if (v10 < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v6 + 1);
    sub_20BFD265C(&v6);
    if (SHIBYTE(v8) < 0)
      operator delete(v7[0]);
  }
  v4 = sub_20C32A4F8((__int128 **)a1);
  sub_20C02DDC8((uint64_t)v4, a2);
}

void sub_20C32A0BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  sub_20C02CDE4((uint64_t)&a18);
  sub_20BFD1A18(&a11);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C32A0F0(uint64_t *a1, uint64_t a2)
{
  uint64_t *EmptyToken;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  const std::string *v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  __sFILE __p;

  memset(&__p._seek, 0, 24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&__p._read);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&__p._read + 1);
  LODWORD(__p._p) = -1;
  EmptyToken = (uint64_t *)sub_20C2CEB84((uint64_t)(a1 + 1), 0, &__p);
  if (!(_DWORD)EmptyToken)
    goto LABEL_17;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 144);
  if (LODWORD(__p._p) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v6) >> 2))
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
    v12 = (const std::string *)&qword_254988388;
  }
  else
  {
    v7 = *(unsigned int *)(v6 + 4 * LODWORD(__p._p));
    v9 = v5 + 120;
    v8 = *(_QWORD *)(v5 + 120);
    if (v7 >= (*(_QWORD *)(v9 + 8) - v8) >> 3)
    {
      EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
      v10 = &qword_2549883A8;
    }
    else
    {
      v10 = (uint64_t *)(v8 + 8 * v7);
    }
    v11 = *v10 & 0xFFFFFFFFFFFFFFF8;
    v12 = v11
        ? (const std::string *)(v11 + 16)
        : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
  }
  std::string::operator=((std::string *)&__p._seek, v12);
  LODWORD(__p._p) = -1;
  v13 = sub_20C2CEB84((uint64_t)(a1 + 1), 0, &__p);
  if (!v13)
    goto LABEL_17;
  v14 = *(_QWORD *)(*a1 + 96);
  if (LODWORD(__p._p) >= (unint64_t)((*(_QWORD *)(*a1 + 104) - v14) >> 3))
    v15 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v13);
  else
    v15 = (uint64_t *)(v14 + 8 * LODWORD(__p._p));
  sub_20C01A074((int *)&__p._read, v15);
  sub_20C01A0C8((int *)&__p._read + 1, (_DWORD *)v15 + 1);
  if (((*(unsigned __int8 *)(*a1 + 6368) << 16) | (*(unsigned __int8 *)(*a1 + 6369) << 8)) < 0x800u)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&__p._cookie, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(&__p, &__p._seek, &__p._read, &__p._cookie);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    goto LABEL_23;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&__p._cookie, 0.0, 1.0);
  *(_QWORD *)&__p._ub._size = 0;
  __p._extra = 0;
  if (!sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&__p._extra)
    || !sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&__p._ub._size))
  {
LABEL_17:
    v16 = 0;
    goto LABEL_18;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&__p, *(double *)&__p._extra, *(double *)&__p._ub._size);
  *(_OWORD *)&__p._cookie = *(_OWORD *)&__p._p;
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(&__p, &__p._seek, &__p._read, &__p._cookie);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
LABEL_23:
  *(_OWORD *)a2 = *(_OWORD *)&__p._p;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&__p._flags;
  *((_BYTE *)&__p._file + 5) = 0;
  LOBYTE(__p._p) = 0;
  sub_20BFD3EBC((int *)(a2 + 24), (int *)&__p._bf);
  sub_20BFD3F10((int *)(a2 + 28), (int *)&__p._bf._base + 1);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&__p._bf._size;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p._bf._base + 1);
  sub_20BFD265C(&__p._bf);
  if (*((char *)&__p._file + 5) < 0)
    operator delete(__p._p);
  v16 = 1;
LABEL_18:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p._read + 1);
  sub_20BFD265C(&__p._read);
  if (SHIBYTE(__p._ub._base) < 0)
    operator delete(__p._seek);
  return v16;
}

void sub_20C32A3F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BFD1A18(&a17);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C32A42C(_QWORD *a1, __int128 *a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C52A340;
  sub_20C1980D0(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C32A4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

__int128 *sub_20C32A4F8(__int128 **a1)
{
  __int128 *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, __int128 **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C197FD0(a1);
}

__n128 sub_20C32A590(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32A5CC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32A5F0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C32A640((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C32A5F8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535290))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32A634()
{
  return &unk_24C535290;
}

void sub_20C32A640(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C32A6BC(v5, &v9, v3, v4);
}

void sub_20C32A6BC(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  double v11[2];
  uint64_t v12;
  void *__p[2];
  uint64_t v14;
  __int128 v15;
  char v16;
  int v17;
  _DWORD v18[5];

  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v12 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v11, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(&v15, __p, &v12, v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  sub_20BFD265C(&v12);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C32A808((uint64_t *)&v8, (uint64_t)&v15);
  }
  sub_20C329FC8(a4, &v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
  sub_20BFD265C(&v17);
  if (v16 < 0)
    operator delete((void *)v15);
}

void sub_20C32A7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  sub_20C02CDE4(v23 - 80);
  _Unwind_Resume(a1);
}

uint64_t sub_20C32A808(uint64_t *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *EmptyToken;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  const std::string *v12;
  pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v19;
  int v20;
  int v21;
  __int128 v22;
  __int128 v23;
  int v24;
  int v25;
  std::string v26;
  double v27;
  double __dst;

  memset(&v26, 0, sizeof(v26));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v25);
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B9BEC((uint64_t)(a1 + 1), __p, 4uLL);
  if (!(_DWORD)EmptyToken)
    goto LABEL_17;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 144);
  if (LODWORD(__p[0]) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v6) >> 2))
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
    v12 = (const std::string *)&qword_254988388;
  }
  else
  {
    v7 = *(unsigned int *)(v6 + 4 * LODWORD(__p[0]));
    v9 = v5 + 120;
    v8 = *(_QWORD *)(v5 + 120);
    if (v7 >= (*(_QWORD *)(v9 + 8) - v8) >> 3)
    {
      EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
      v10 = &qword_2549883A8;
    }
    else
    {
      v10 = (uint64_t *)(v8 + 8 * v7);
    }
    v11 = *v10 & 0xFFFFFFFFFFFFFFF8;
    v12 = v11
        ? (const std::string *)(v11 + 16)
        : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
  }
  std::string::operator=(&v26, v12);
  LODWORD(__p[0]) = -1;
  v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2B9BEC((uint64_t)(a1 + 1), __p, 4uLL);
  if (!(_DWORD)v13)
    goto LABEL_17;
  v14 = *(_QWORD *)(*a1 + 96);
  if (LODWORD(__p[0]) >= (unint64_t)((*(_QWORD *)(*a1 + 104) - v14) >> 3))
    v15 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v13);
  else
    v15 = (uint64_t *)(v14 + 8 * LODWORD(__p[0]));
  sub_20C01A074(&v24, v15);
  sub_20C01A0C8(&v25, (_DWORD *)v15 + 1);
  if (((*(unsigned __int8 *)(*a1 + 6368) << 16) | (*(unsigned __int8 *)(*a1 + 6369) << 8)) < 0x800u)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v23, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, &v26, &v24, &v23);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    goto LABEL_23;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v23, 0.0, 1.0);
  v27 = 0.0;
  __dst = 0.0;
  if (!sub_20C2B9BEC((uint64_t)(a1 + 1), &__dst, 8uLL)
    || !sub_20C2B9BEC((uint64_t)(a1 + 1), &v27, 8uLL))
  {
LABEL_17:
    v16 = 0;
    goto LABEL_18;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, __dst, v27);
  v23 = *(_OWORD *)__p;
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, &v26, &v24, &v23);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
LABEL_23:
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 16) = v19;
  HIBYTE(v19) = 0;
  LOBYTE(__p[0]) = 0;
  sub_20BFD3EBC((int *)(a2 + 24), &v20);
  sub_20BFD3F10((int *)(a2 + 28), &v21);
  *(_OWORD *)(a2 + 32) = v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_20BFD265C(&v20);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  v16 = 1;
LABEL_18:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return v16;
}

void sub_20C32AB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BFD1A18(&a17);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_20C32AB4C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5352B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32AB88(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5352B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32ABAC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C32AC04((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C32ABBC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535310))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32ABF8()
{
  return &unk_24C535310;
}

void sub_20C32AC04(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C32AD20(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C32AD04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C32AD20(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  double v15[2];
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  void *v19[2];
  char v20;
  int v21;
  _DWORD v22[5];

  __p[0] = 0;
  __p[1] = 0;
  v18 = 0;
  v16 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v16 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v15, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(v19, __p, &v16, v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
  sub_20BFD265C(&v16);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  v12 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v13 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v14 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v14 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C32AECC(&v12, (uint64_t)v19);
    v7 = v13;
  }
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_20C329FC8(a4, (__int128 *)v19);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v22);
  sub_20BFD265C(&v21);
  if (v20 < 0)
    operator delete(v19[0]);
}

void sub_20C32AE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v22;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v22);
  sub_20C02CDE4((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_20C32AECC(_QWORD *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *EmptyToken;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  const std::string *v12;
  pxrInternal__aapl__pxrReserved__::SdfPath *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v19;
  int v20;
  int v21;
  __int128 v22;
  __int128 v23;
  int v24;
  int v25;
  std::string v26;
  double v27;
  double v28;

  memset(&v26, 0, sizeof(v26));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v25);
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B72E8(a1 + 1, (uint64_t)__p, 4uLL);
  if (!(_DWORD)EmptyToken)
    goto LABEL_17;
  v5 = *a1;
  v6 = *(_QWORD *)(*a1 + 144);
  if (LODWORD(__p[0]) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v6) >> 2))
  {
    pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
    v12 = (const std::string *)&qword_254988388;
  }
  else
  {
    v7 = *(unsigned int *)(v6 + 4 * LODWORD(__p[0]));
    v9 = v5 + 120;
    v8 = *(_QWORD *)(v5 + 120);
    if (v7 >= (*(_QWORD *)(v9 + 8) - v8) >> 3)
    {
      EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
      v10 = &qword_2549883A8;
    }
    else
    {
      v10 = (uint64_t *)(v8 + 8 * v7);
    }
    v11 = *v10 & 0xFFFFFFFFFFFFFFF8;
    v12 = v11
        ? (const std::string *)(v11 + 16)
        : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
  }
  std::string::operator=(&v26, v12);
  LODWORD(__p[0]) = -1;
  v13 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2B72E8(a1 + 1, (uint64_t)__p, 4uLL);
  if (!(_DWORD)v13)
    goto LABEL_17;
  v14 = *(_QWORD *)(*a1 + 96);
  if (LODWORD(__p[0]) >= (unint64_t)((*(_QWORD *)(*a1 + 104) - v14) >> 3))
    v15 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v13);
  else
    v15 = (uint64_t *)(v14 + 8 * LODWORD(__p[0]));
  sub_20C01A074(&v24, v15);
  sub_20C01A0C8(&v25, (_DWORD *)v15 + 1);
  if (((*(unsigned __int8 *)(*a1 + 6368) << 16) | (*(unsigned __int8 *)(*a1 + 6369) << 8)) < 0x800u)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v23, 0.0, 1.0);
    pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, &v26, &v24, &v23);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    goto LABEL_23;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v23, 0.0, 1.0);
  v27 = 0.0;
  v28 = 0.0;
  if (!sub_20C2B72E8(a1 + 1, (uint64_t)&v28, 8uLL)
    || !sub_20C2B72E8(a1 + 1, (uint64_t)&v27, 8uLL))
  {
LABEL_17:
    v16 = 0;
    goto LABEL_18;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)__p, v28, v27);
  v23 = *(_OWORD *)__p;
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(__p, &v26, &v24, &v23);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
LABEL_23:
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 16) = v19;
  HIBYTE(v19) = 0;
  LOBYTE(__p[0]) = 0;
  sub_20BFD3EBC((int *)(a2 + 24), &v20);
  sub_20BFD3F10((int *)(a2 + 28), &v21);
  *(_OWORD *)(a2 + 32) = v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_20BFD265C(&v20);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  v16 = 1;
LABEL_18:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  return v16;
}

void sub_20C32B1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BFD1A18(&a17);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C32B208(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535330;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32B2B4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5353B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32B360(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5354E8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32B40C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535568;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C32B4C0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32B4FC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C32B520(uint64_t a1, uint64_t *a2)
{
  return sub_20C32B570((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_20C32B528(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535390))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32B564()
{
  return &unk_24C535390;
}

uint64_t sub_20C32B570(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = *(_QWORD *)(*a1 + 6328);
  v5 = a2[1];
  if ((v5 & 4) != 0)
    v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *a2;
  return sub_20C3273AC(v3, v2, (_QWORD *)(v4 + 256), v6);
}

__n128 sub_20C32B5D0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5353B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32B60C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5353B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32B630(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C32B6C0(v5, &v10, v3, v4);
}

uint64_t sub_20C32B678(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5354C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32B6B4()
{
  return &unk_24C5354C8;
}

void sub_20C32B6C0(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;

  __p = 0;
  v10 = 0;
  v11 = 0;
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C328404((uint64_t)&v6, &__p);
  }
  sub_20C32B74C(a4, (uint64_t *)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_20C32B730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C32B74C(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  if ((sub_20C32B7F4(a1) & 1) == 0)
  {
    __p = 0;
    v9 = 0;
    v10 = 0;
    sub_20C32B86C(a1, (uint64_t)&__p);
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
  }
  result = (uint64_t *)sub_20C32BCC8((uint64_t *)a1);
  v5 = *result;
  *result = *a2;
  *a2 = v5;
  v6 = result[1];
  result[1] = a2[1];
  a2[1] = v6;
  v7 = result[2];
  result[2] = a2[2];
  a2[2] = v7;
  return result;
}

void sub_20C32B7D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C32B7F4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CA5A9EBLL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C51BE00);
}

_QWORD *sub_20C32B86C(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C535410;
  sub_20C32BC4C(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C32B8FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C32B938(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void **sub_20C32B960(void **a1, void **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C020410(a1);
}

uint64_t sub_20C32B970()
{
  return 1;
}

unint64_t sub_20C32B978(uint64_t *a1)
{
  char v2;

  return sub_20C29EA4C((uint64_t)&v2, *a1);
}

BOOL sub_20C32B99C(uint64_t **a1, double ***a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  double v6;
  _BOOL8 result;
  BOOL v8;

  v3 = **a1;
  v2 = (*a1)[1];
  v4 = **a2;
  if (v2 - v3 != (char *)(*a2)[1] - (char *)v4)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = *(double *)(v5 - 8) == v6;
    v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

BOOL sub_20C32B9F8(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  double v6;
  _BOOL8 result;
  BOOL v8;

  v3 = **a1;
  v2 = (*a1)[1];
  v4 = *(double **)a2;
  if (v2 - v3 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = *(double *)(v5 - 8) == v6;
    v8 = *(double *)(v5 - 8) != v6 || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

uint64_t sub_20C32BA54()
{
  return 0;
}

_QWORD *sub_20C32BA60(uint64_t **a1, _QWORD *a2)
{
  return sub_20C32BBC8(a2, *a1);
}

void *sub_20C32BA70()
{
  return &unk_24C51BE00;
}

uint64_t sub_20C32BA7C()
{
  return 0;
}

uint64_t sub_20C32BA84()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C32BA90()
{
  return 0;
}

uint64_t sub_20C32BA98()
{
  return 0;
}

BOOL sub_20C32BAA0(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CA5A9EBLL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C32BAD8(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BE00, a2, a3);
}

void *sub_20C32BAF8()
{
  return &unk_24C51BE00;
}

uint64_t sub_20C32BB04(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *sub_20C32BB0C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C535410;
  return sub_20C32BC4C(a2, v2);
}

uint64_t sub_20C32BB24(uint64_t *a1)
{
  unsigned int v2;
  char *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  void *v8;

  v2 = atomic_load((unsigned int *)(*a1 + 24));
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x20uLL);
    v4 = *a1;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = 0;
    sub_20BDDF5DC(v3, *(const void **)v4, *(_QWORD *)(v4 + 8), (uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) >> 3);
    v5 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)v3 + 6);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v8 = (void *)*a1;
    *a1 = (uint64_t)v3;
    sub_20C020410(&v8);
  }
  return *a1;
}

void sub_20C32BBB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C32BBC8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  sub_20BDDC1C8(a1, (uint64_t)"[ ", 2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v4 += 8;
      v6 = (_QWORD *)std::ostream::operator<<();
      sub_20BDDC1C8(v6, (uint64_t)" ", 1);
    }
    while (v4 != v5);
  }
  sub_20BDDC1C8(a1, (uint64_t)"]", 1);
  return a1;
}

_QWORD *sub_20C32BC4C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  _QWORD *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (char *)operator new(0x20uLL);
  *((_QWORD *)v4 + 1) = 0;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = 0;
  result = sub_20BDDF5DC(v4, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)v4 + 6);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C32BCB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C32BCC8(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C32BB24(a1);
}

__n128 sub_20C32BD60(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5354E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32BD9C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5354E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32BDC0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C32BE10((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C32BDC8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535548))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32BE04()
{
  return &unk_24C535548;
}

void sub_20C32BE10(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C32BE8C(v5, &v9, v3, v4);
}

void sub_20C32BE8C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;

  __p = 0;
  v10 = 0;
  v11 = 0;
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v6 + 1) = *(_QWORD *)(*(_QWORD *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C32BF28((uint64_t)&v6, &__p);
  }
  sub_20C32B74C(a4, (uint64_t *)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_20C32BF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C32BF28(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *__p;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  unint64_t __dst;

  __dst = 0;
  v4 = a1 + 8;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __p = "usd/crateFile.cpp";
    v13 = "_Read";
    v14 = 1189;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = double]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_20BDE48D4(&__p, __dst);
  v8 = sub_20C2B9BEC(v4, __p, 8 * __dst);
  v9 = v8;
  if (&__p == a2)
    v10 = 0;
  else
    v10 = v8;
  if ((v10 & 1) != 0)
    sub_20BDDF7E4((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_20C32C040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C32C064(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535568;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32C0A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535568;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32C0C4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C32C11C((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C32C0D4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5355C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32C110()
{
  return &unk_24C5355C8;
}

void sub_20C32C11C(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C32C238(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C32C21C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C32C238(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  void *__p;
  void *v14;
  uint64_t v15;

  __p = 0;
  v14 = 0;
  v15 = 0;
  v10 = *a2;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v11 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v12 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v12 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C328524((uint64_t)&v10, &__p);
    v5 = v11;
  }
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20C32B74C(a4, (uint64_t *)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20C32C308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v15;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C32C334(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5355E8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32C3E0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535668;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32C48C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5356E8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32C538(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535768;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C32C5EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5355E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32C628(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5355E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double *sub_20C32C64C(uint64_t a1, uint64_t *a2)
{
  return sub_20C32C69C((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_20C32C654(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535648))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32C690()
{
  return &unk_24C535648;
}

double *sub_20C32C69C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = *(_QWORD *)(*a1 + 6328);
  v5 = a2[1];
  if ((v5 & 4) != 0)
    v6 = (*(uint64_t (**)(uint64_t *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *a2;
  return sub_20C32C6F4(v3, v2, (_QWORD *)(v4 + 256), v6);
}

double *sub_20C32C6F4(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  _OWORD *v8;
  double **v9;
  double **v10;
  char v11;
  uint64_t v13;
  void *__p;
  void *v15;
  uint64_t v16;
  _QWORD v17[2];

  v17[0] = a2;
  v17[1] = a3;
  v15 = 0;
  v16 = 0;
  __p = 0;
  sub_20BFD45F0(&__p, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 4);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B5C98(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v13 = 0;
  v9 = sub_20C32C814(v7, a4, a4, &v13);
  v10 = v9;
  if (v11)
  {
    v9[5] = (double *)(*a3 & 0xFFFFFFFFFFFFLL | 0x31000000000000);
    sub_20C32C7C8((uint64_t)v17, (uint64_t **)a4);
  }
  return v10[5];
}

uint64_t sub_20C32C7C8(uint64_t a1, uint64_t **a2)
{
  uint64_t __src;

  __src = ((char *)a2[1] - (char *)*a2) >> 4;
  sub_20C2B7248(a1, (char *)&__src);
  return sub_20C32CBAC(*a2, a2[1], a1);
}

double **sub_20C32C814(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  double ***v14;
  double **i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v9 = sub_20C02046C((uint64_t)v26, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(double ****)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (double **)*i)
      {
        v16 = (unint64_t)i[1];
        if (v16 == v10)
        {
          if (sub_20C32CB3C(a1 + 32, i + 2, a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20C32CA94(a1, v10, a3, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (double **)v26[0];
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C32CA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_20C2B1784((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C32CA94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = 0;
  result = sub_20BFD45F0(v10 + 2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
  v10[5] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C32CB20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C2B1784(v3, v2);
  _Unwind_Resume(a1);
}

BOOL sub_20C32CB3C(uint64_t a1, double **a2, uint64_t a3)
{
  double *v3;
  double *v4;
  double *v5;
  _BOOL8 result;

  v3 = *a2;
  v4 = a2[1];
  v5 = *(double **)a3;
  if ((char *)v4 - (char *)*a2 != *(_QWORD *)(a3 + 8) - *(_QWORD *)a3)
    return 0;
  if (v3 == v4)
    return 1;
  do
  {
    result = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator==(v3, v5);
    if (!result)
      break;
    v3 += 2;
    v5 += 2;
  }
  while (v3 != v4);
  return result;
}

uint64_t sub_20C32CBAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t __src;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      __src = *v5;
      sub_20C2B7248(a3, (char *)&__src);
      __src = v5[1];
      sub_20C2B7248(a3, (char *)&__src);
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

__n128 sub_20C32CC28(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32CC64(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32CC88(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C32CD18(v5, &v10, v3, v4);
}

uint64_t sub_20C32CCD0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5356C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32CD0C()
{
  return &unk_24C5356C8;
}

void sub_20C32CD18(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;

  __p = 0;
  v10 = 0;
  v11 = 0;
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C32CE4C((uint64_t)&v6, &__p);
  }
  sub_20C32CDA4(a4, (uint64_t *)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_20C32CD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C32CDA4(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  if ((sub_20BFD4578(a1) & 1) == 0)
  {
    __p = 0;
    v9 = 0;
    v10 = 0;
    sub_20C32D030(a1, (uint64_t)&__p);
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
  }
  result = (uint64_t *)sub_20C32D0FC((uint64_t *)a1);
  v5 = *result;
  *result = *a2;
  *a2 = v5;
  v6 = result[1];
  result[1] = a2[1];
  a2[1] = v6;
  v7 = result[2];
  result[2] = a2[2];
  a2[2] = v7;
  return result;
}

void sub_20C32CE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C32CE4C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  void *__p;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __p = "usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::SdfLayerOffset]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20C020150((double *)&__p, v16);
  v7 = sub_20C32CF6C(a1, __p, v16);
  v8 = v7;
  if (&__p != a2 && v7)
    sub_20BEF5530((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 4);
  if (__p)
  {
    v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_20C32CF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C32CF6C(uint64_t a1, _OWORD *a2, unint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  __int128 v9;
  double v10;
  double _18[9];

  if (a3)
  {
    v5 = a1 + 8;
    v10 = 0.0;
    _18[0] = 0.0;
    v6 = 0;
    if (sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)_18))
    {
      v7 = 1;
      do
      {
        if (!sub_20C2C1BD8(v5, 0, (__sFILE *)&v10))
          break;
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v9, _18[0], v10);
        *a2 = v9;
        if (a3 == v7)
          return 1;
        ++a2;
        v6 = v7 >= a3;
        v10 = 0.0;
        _18[0] = 0.0;
        ++v7;
      }
      while (sub_20C2C1BD8(v5, 0, (__sFILE *)_18));
    }
  }
  else
  {
    return 1;
  }
  return v6;
}

_QWORD *sub_20C32D030(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C526368;
  sub_20C020690(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C32D0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C32D0FC(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C020564(a1);
}

__n128 sub_20C32D194(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5356E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32D1D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5356E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32D1F4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C32D244((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C32D1FC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535748))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32D238()
{
  return &unk_24C535748;
}

void sub_20C32D244(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C32D2C0(v5, &v9, v3, v4);
}

void sub_20C32D2C0(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;

  __p = 0;
  v10 = 0;
  v11 = 0;
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v6 + 1) = *(_QWORD *)(*(_QWORD *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C32D35C((uint64_t)&v6, &__p);
  }
  sub_20C32CDA4(a4, (uint64_t *)&__p);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_20C32D340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C32D35C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  void *__p;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t __dst;

  __dst = 0;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    __p = "usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfLayerOffset]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_20C020150((double *)&__p, __dst);
  v7 = sub_20C32D488(a1, __p, __dst);
  v8 = v7;
  if (&__p != a2 && v7)
    sub_20BEF5530((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 4);
  if (__p)
  {
    v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_20C32D46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C32D488(uint64_t a1, _OWORD *a2, unint64_t a3)
{
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  __int128 v9;
  double v10;
  double __dst;

  if (a3)
  {
    v5 = a1 + 8;
    v10 = 0.0;
    __dst = 0.0;
    v6 = 0;
    if (sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    {
      v7 = 1;
      do
      {
        if ((sub_20C2B9BEC(v5, &v10, 8uLL) & 1) == 0)
          break;
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v9, __dst, v10);
        *a2 = v9;
        if (a3 == v7)
          return 1;
        ++a2;
        v6 = v7 >= a3;
        v10 = 0.0;
        __dst = 0.0;
        ++v7;
      }
      while (sub_20C2B9BEC(v5, &__dst, 8uLL));
    }
  }
  else
  {
    return 1;
  }
  return v6;
}

__n128 sub_20C32D554(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535768;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32D590(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535768;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32D5B4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C32D60C((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C32D5C4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5357C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32D600()
{
  return &unk_24C5357C8;
}

void sub_20C32D60C(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C32D728(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C32D70C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C32D728(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  void *__p;
  void *v14;
  uint64_t v15;

  __p = 0;
  v14 = 0;
  v15 = 0;
  v10 = *a2;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v11 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v12 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v12 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C32D824((uint64_t)&v10, &__p);
    v5 = v11;
  }
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20C32CDA4(a4, (uint64_t *)&__p);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
}

void sub_20C32D7F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v15;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v15);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_20C32D824(uint64_t a1, void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _BOOL8 v9;
  _BOOL8 v10;
  uint64_t v12;
  void *__p;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;

  v19 = 0;
  v4 = (_QWORD *)(a1 + 8);
  if (!sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __p = "usd/crateFile.cpp";
    v15 = "_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::SdfLayerOffset]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20C020150((double *)&__p, v19);
  v9 = sub_20C32D974(a1, __p, v19);
  v10 = v9;
  if (&__p != a2 && v9)
    sub_20BEF5530((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 4);
  if (__p)
  {
    v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_20C32D958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C32D974(uint64_t a1, _OWORD *a2, unint64_t a3)
{
  _QWORD *v5;
  BOOL v6;
  unint64_t v7;
  __int128 v9;
  double v10;
  double v11;

  if (a3)
  {
    v5 = (_QWORD *)(a1 + 8);
    v10 = 0.0;
    v11 = 0.0;
    v6 = 0;
    if (sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v11, 8uLL))
    {
      v7 = 1;
      do
      {
        if ((sub_20C2B72E8(v5, (uint64_t)&v10, 8uLL) & 1) == 0)
          break;
        pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v9, v11, v10);
        *a2 = v9;
        if (a3 == v7)
          return 1;
        ++a2;
        v6 = v7 >= a3;
        v10 = 0.0;
        v11 = 0.0;
        ++v7;
      }
      while (sub_20C2B72E8(v5, (uint64_t)&v11, 8uLL));
    }
  }
  else
  {
    return 1;
  }
  return v6;
}

_QWORD *sub_20C32DA38(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5357E8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32DAE4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535868;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32DB90(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5358E8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32DC3C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535968;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C32DCF0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5357E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32DD2C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5357E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unsigned __int8 *sub_20C32DD50(uint64_t a1, uint64_t a2)
{
  return sub_20C32DDA0((char ***)(a1 + 8), a2);
}

uint64_t sub_20C32DD58(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535848))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32DD94()
{
  return &unk_24C535848;
}

unsigned __int8 *sub_20C32DDA0(char ***a1, uint64_t a2)
{
  char **v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  __int128 **v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = (*a1)[791];
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (__int128 **)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *(__int128 ***)a2;
  return sub_20C32DDF8(v3, v2, (char **)v4 + 32, v6);
}

unsigned __int8 *sub_20C32DDF8(uint64_t *a1, char **a2, char **a3, __int128 **a4)
{
  uint64_t v7;
  _OWORD *v8;
  unsigned __int8 **v9;
  unsigned __int8 **v10;
  char v11;
  _QWORD v13[3];
  char **v14[2];
  void **v15;

  v14[0] = a2;
  v14[1] = a3;
  memset(v13, 0, sizeof(v13));
  sub_20BE78B98((char *)v13, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a4[1] - (char *)*a4) >> 3));
  v15 = (void **)v13;
  sub_20BDE5038(&v15);
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B5ED0(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v15 = 0;
  v9 = sub_20C32DED8(v7, (uint64_t)a4, a4, &v15);
  v10 = v9;
  if (v11)
  {
    v9[5] = (unsigned __int8 *)((unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x32000000000000);
    sub_20C314C08(v14, (unsigned __int8 **)a4);
  }
  return v10[5];
}

unsigned __int8 **sub_20C32DED8(uint64_t a1, uint64_t a2, __int128 **a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 ***v13;
  unsigned __int8 **i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unsigned __int8 **v22;
  unint64_t v23;
  unsigned __int8 **v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20BFB7FC4((unint64_t)&v25, *(uint64_t **)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v9 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
    v13 = *(unsigned __int8 ****)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = (unsigned __int8 **)*i)
      {
        v15 = (unint64_t)i[1];
        if (v15 == v9)
        {
          if ((sub_20C32E248(a1 + 32, i + 2, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  sub_20C32E194(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v25 = *v22;
    *v22 = (unsigned __int8 *)v25;
  }
  else
  {
    *v25 = *(unsigned __int8 **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      v23 = *((_QWORD *)*v25 + 1);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  i = v25;
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C32E170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20C32E2C4((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

char *sub_20C32E194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  void *v10;
  char *result;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  *((_QWORD *)v10 + 3) = 0;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 2) = 0;
  result = sub_20BE78B98((char *)v10 + 16, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  *((_QWORD *)v10 + 5) = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C32E22C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C32E2C4(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C32E248(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t result;
  char v7;

  v3 = *a2;
  v4 = a2[1];
  v5 = *(unsigned __int8 **)a3;
  if (v4 - *a2 != *(_QWORD *)(a3 + 8) - *(_QWORD *)a3)
    return 0;
  if (v3 == v4)
    return 1;
  do
  {
    result = sub_20BEB4EF8((uint64_t)&v7, v3, v5);
    if (!(_DWORD)result)
      break;
    v3 += 24;
    v5 += 24;
  }
  while (v3 != v4);
  return result;
}

void sub_20C32E2C4(uint64_t a1, void **__p)
{
  void **v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = __p + 2;
    sub_20BDE5038(&v3);
  }
  if (__p)
    operator delete(__p);
}

__n128 sub_20C32E314(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535868;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32E350(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535868;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32E374(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C32E404(v5, &v10, v3, v4);
}

uint64_t sub_20C32E3BC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5358C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32E3F8()
{
  return &unk_24C5358C8;
}

void sub_20C32E404(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  std::string *v9[3];
  std::string **v10;

  memset(v9, 0, sizeof(v9));
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v7 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C3150EC((uint64_t *)&v6, v9);
  }
  sub_20C32E490(a4, (__int128 **)v9);
  v10 = v9;
  sub_20BDE5038((void ***)&v10);
}

void sub_20C32E474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  *(_QWORD *)(v15 - 24) = &a15;
  sub_20BDE5038((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

__int128 **sub_20C32E490(pxrInternal__aapl__pxrReserved__::VtValue *a1, __int128 **a2)
{
  __int128 **result;
  __int128 *v5;
  __int128 *v6;
  __int128 *v7;
  __int128 *v8[3];
  __int128 **v9;

  if ((sub_20BFD41F4(a1) & 1) == 0)
  {
    memset(v8, 0, sizeof(v8));
    sub_20C32E53C(a1, v8);
    v9 = v8;
    sub_20BDE5038((void ***)&v9);
  }
  result = sub_20C32E608((__int128 ***)a1);
  v5 = *result;
  *result = *a2;
  *a2 = v5;
  v6 = result[1];
  result[1] = a2[1];
  a2[1] = v6;
  v7 = result[2];
  result[2] = a2[2];
  a2[2] = v7;
  return result;
}

void sub_20C32E524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C32E53C(_QWORD *a1, __int128 **a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C526420;
  sub_20C020E24(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C32E5CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

__int128 **sub_20C32E608(__int128 ***a1)
{
  __int128 **v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, __int128 ***))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C020CD8(a1);
}

__n128 sub_20C32E6A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5358E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32E6DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5358E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32E700(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C32E750((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C32E708(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535948))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32E744()
{
  return &unk_24C535948;
}

void sub_20C32E750(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C32E7CC(v5, &v9, v3, v4);
}

void sub_20C32E7CC(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  std::string *v9[3];
  std::string **v10;

  memset(v9, 0, sizeof(v9));
  v5 = a2[1];
  v6 = *a2;
  v7 = v5;
  v8 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v6 + 1) = *(_QWORD *)(*(_QWORD *)v7 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C3156EC((uint64_t)&v6, v9);
  }
  sub_20C32E490(a4, (__int128 **)v9);
  v10 = v9;
  sub_20BDE5038((void ***)&v10);
}

void sub_20C32E84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  *(_QWORD *)(v15 - 24) = &a15;
  sub_20BDE5038((void ***)(v15 - 24));
  _Unwind_Resume(a1);
}

__n128 sub_20C32E870(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535968;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32E8AC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535968;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32E8D0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C32E928((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C32E8E0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5359C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32E91C()
{
  return &unk_24C5359C8;
}

void sub_20C32E928(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C32EA44(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C32EA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C32EA44(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::string *v13[3];
  std::string **v14;

  memset(v13, 0, sizeof(v13));
  v10 = *a2;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v11 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v12 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v12 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C315E00(&v10, v13);
    v5 = v11;
  }
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20C32E490(a4, (__int128 **)v13);
  v14 = v13;
  sub_20BDE5038((void ***)&v14);
}

void sub_20C32EB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  *(_QWORD *)(v14 - 24) = &a13;
  sub_20BDE5038((void ***)(v14 - 24));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C32EB40(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5359E8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32EBEC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535A68;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32EC98(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535AE8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32ED44(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535B68;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C32EDF8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5359E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32EE34(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5359E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C32EE58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 8);
  if ((v2 & 4) != 0)
    (*(void (**)(uint64_t))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  return 0x4033000000000000;
}

uint64_t sub_20C32EE88(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535A48))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32EEC4()
{
  return &unk_24C535A48;
}

__n128 sub_20C32EED8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535A68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32EF14(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535A68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20C32EF38(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_20C32EFA4(*a3);
}

uint64_t sub_20C32EF5C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535AC8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32EF98()
{
  return &unk_24C535AC8;
}

_QWORD *sub_20C32EFA4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  BOOL v3;

  if ((sub_20C0AA3E8(a1) & 1) == 0)
  {
    v2 = *((_QWORD *)a1 + 1);
    if (v2)
      v3 = (*((_QWORD *)a1 + 1) & 3) == 3;
    else
      v3 = 1;
    if (!v3)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
    *((_QWORD *)a1 + 1) = (char *)&off_24C52AE00 + 3;
  }
  return sub_20C27EB10(a1);
}

__n128 sub_20C32F008(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535AE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32F044(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535AE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_QWORD *sub_20C32F068(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v3;

  v3 = *a3;
  sub_20C2A2B6C();
  return sub_20C32EFA4(v3);
}

uint64_t sub_20C32F09C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535B48))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32F0D8()
{
  return &unk_24C535B48;
}

__n128 sub_20C32F0EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535B68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32F128(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535B68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32F14C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C32F1A4((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C32F15C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535BC8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32F198()
{
  return &unk_24C535BC8;
}

void sub_20C32F1A4(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    v16 = v4;
    v17 = v5;
    v18 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    v16 = v4;
    v17 = v5;
    v18 = 0;
  }
  v19 = 0;
  sub_20C32F2C0(v3, (uint64_t)&v16, a2, a3);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C32F2A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C32F2C0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;

  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return sub_20C32EFA4(a4);
}

_QWORD *sub_20C32F338(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535BE8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32F3E4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535C68;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32F490(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535CE8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C32F53C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535D68;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C32F5F0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535BE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32F62C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535BE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C32F650(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C32F6AC(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C32F664(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535C48))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32F6A0()
{
  return &unk_24C535C48;
}

uint64_t sub_20C32F6AC(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  _QWORD v13[2];
  _QWORD v14[3];
  char __src[8];
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v13[0] = a2;
  v13[1] = a3;
  sub_20BF4C6D0(v16, a4);
  sub_20BF4C2D8((uint64_t)v16);
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C12AA40(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v14[0] = 0;
  v9 = sub_20C32F7B4(v7, a4, a4, v14);
  v10 = v9;
  if (v11)
  {
    v9[4] = *a3 & 0xFFFFFFFFFFFFLL | 0x34000000000000;
    v14[0] = v13;
    v14[1] = a4;
    v14[2] = __src;
    sub_20C3107C8((uint64_t)v13, (uint64_t)v14);
    sub_20C2B7248((uint64_t)v13, __src);
  }
  return v10[4];
}

_QWORD *sub_20C32F7B4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this, _QWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v10 = bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(v15 + 2), (std::type_info *)this, v9) & 1) != 0)return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_20C32FA3C(a1, v10, a3, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  v15 = (_QWORD *)v26[0];
  v26[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C12AF48((uint64_t)v26, 0);
  return v15;
}

void sub_20C32FA24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C12AF48((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C32FA3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x28uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20BF4C6D0(v10 + 2, a3);
  v10[4] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C32FAAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C12AF48(v1, 0);
  _Unwind_Resume(a1);
}

__n128 sub_20C32FACC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535C68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32FB08(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535C68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C32FB2C(uint64_t a1, uint64_t *a2, _QWORD **a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v11 = v6;
  *((_QWORD *)&v11 + 1) = v7;
  v12 = 0;
  v13 = v8;
  v14 = v9;
  return sub_20C32FBBC(v5, &v11, v3, v4);
}

uint64_t sub_20C32FB74(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535CC8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32FBB0()
{
  return &unk_24C535CC8;
}

uint64_t sub_20C32FBBC(uint64_t a1, __int128 *a2, uint64_t a3, _QWORD *a4)
{
  __int128 v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v10[1] = 0;
  v5 = a2[1];
  v7 = *a2;
  v8 = v5;
  v9 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v8 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C310C38((uint64_t *)&v7, v10);
  }
  sub_20BFD3C3C(a4, v10);
  return sub_20BF4C2D8((uint64_t)v10);
}

void sub_20C32FC4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C32FC68(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535CE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32FCA4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535CE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C32FCC8(uint64_t a1, uint64_t *a2, _QWORD **a3)
{
  return sub_20C32FD18((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C32FCD0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535D48))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32FD0C()
{
  return &unk_24C535D48;
}

uint64_t sub_20C32FD18(_QWORD *a1, uint64_t *a2, _QWORD **a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v10 = *a1;
  *((_QWORD *)&v10 + 1) = v8;
  v11 = v6;
  v12 = v7;
  v13 = sub_20C2A2B6C();
  return sub_20C32FD94(v5, &v10, v3, v4);
}

uint64_t sub_20C32FD94(uint64_t a1, __int128 *a2, uint64_t a3, _QWORD *a4)
{
  __int128 v5;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  v10[1] = 0;
  v5 = a2[1];
  v7 = *a2;
  v8 = v5;
  v9 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v7 + 1) = *(_QWORD *)(*(_QWORD *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C311A80((uint64_t)&v7, v10);
  }
  sub_20BFD3C3C(a4, v10);
  return sub_20BF4C2D8((uint64_t)v10);
}

void sub_20C32FE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C32FE50(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535D68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C32FE8C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535D68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C32FEB0(uint64_t a1, uint64_t *a2, _QWORD **a3)
{
  sub_20C32FF08((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C32FEC0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535DC8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C32FEFC()
{
  return &unk_24C535DC8;
}

void sub_20C32FF08(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C330024(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C330008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C330024(uint64_t a1, __int128 *a2, uint64_t a3, _QWORD *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  v14[1] = 0;
  v11 = *a2;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v13 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v13 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C312148((uint64_t *)&v11, v14);
    v5 = v12;
  }
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20BFD3C3C(a4, v14);
  return sub_20BF4C2D8((uint64_t)v14);
}

void sub_20C330110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v6 | 8));
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C33012C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535DE8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3301D8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535E68;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C330284(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535EE8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C330330(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535F68;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C3303E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535DE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C330420(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535DE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C330444(uint64_t a1, uint64_t a2)
{
  return sub_20C330494((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_20C33044C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535E48))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C330488()
{
  return &unk_24C535E48;
}

uint64_t sub_20C330494(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::VtValue *v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = *(_QWORD *)(*a1 + 6328);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8)
                                                                                         + 168))(a2);
  else
    v6 = *(pxrInternal__aapl__pxrReserved__::VtValue **)a2;
  return sub_20C3304EC(v3, v2, (_QWORD *)(v4 + 256), v6);
}

uint64_t sub_20C3304EC(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  _QWORD v13[2];
  _QWORD v14[3];
  char __src[8];
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  v13[0] = a2;
  v13[1] = a3;
  sub_20BF4C6D0(v16, a4);
  sub_20BF4C2D8((uint64_t)v16);
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C12AA40(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v14[0] = 0;
  v9 = sub_20C3305F4(v7, a4, a4, v14);
  v10 = v9;
  if (v11)
  {
    v9[4] = *a3 & 0xFFFFFFFFFFFFLL | 0x35000000000000;
    v14[0] = v13;
    v14[1] = a4;
    v14[2] = __src;
    sub_20C3107C8((uint64_t)v13, (uint64_t)v14);
    sub_20C2B7248((uint64_t)v13, __src);
  }
  return v10[4];
}

_QWORD *sub_20C3305F4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *this, _QWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v9 = bswap64(0x9E3779B97F4A7C55 * pxrInternal__aapl__pxrReserved__::VtValue::GetHash(this));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(v14 + 2, this) & 1) != 0)
              return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_20C32FA3C(a1, v9, a3, a4, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  v14 = (_QWORD *)v25[0];
  v25[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C12AF48((uint64_t)v25, 0);
  return v14;
}

void sub_20C330864(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C12AF48((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

__n128 sub_20C330884(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535E68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3308C0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535E68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C3308E4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v11 = v6;
  *((_QWORD *)&v11 + 1) = v7;
  v12 = 0;
  v13 = v8;
  v14 = v9;
  return sub_20C330974(v5, &v11, v3, v4);
}

uint64_t sub_20C33092C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535EC8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C330968()
{
  return &unk_24C535EC8;
}

uint64_t sub_20C330974(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v12);
  v7 = a2[1];
  v9 = *a2;
  v10 = v7;
  v11 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v10 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C330AD4((uint64_t *)&v9, v12);
  }
  sub_20C330A34(a4, v12);
  return sub_20BF4C2D8((uint64_t)v12);
}

void sub_20C330A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C330A34(pxrInternal__aapl__pxrReserved__::VtValue *a1, _QWORD *a2)
{
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFE4DCC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v5);
    sub_20C018558((uint64_t)a1, v5);
    sub_20BF4C2D8((uint64_t)v5);
  }
  return sub_20C330D2C((unsigned int **)a1, a2);
}

void sub_20C330AB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C330AD4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  const void ****v4;
  const std::type_info *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void **v10;
  void **v11;
  const char *p_p;
  void *__p;
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[4];
  char v19;
  const void ****v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  if (!sub_20C310C38(a1, &v20))
    goto LABEL_25;
  if (!sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
  {
    if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0)
        v4 = (const void ****)(*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      else
        v4 = v20;
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)v18, v4);
      goto LABEL_14;
    }
    if (sub_20BFE4EAC((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0)
        v7 = (*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      else
        v7 = (uint64_t)v20;
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18, v7);
      goto LABEL_14;
    }
    v18[0] = "usd/crateFile.cpp";
    v18[1] = "Read";
    v18[2] = 1362;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::"
             "Usd_CrateFile::_PreadStream>::Read(T &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Pre"
             "adStream, T = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v20, v5, v6, (uint64_t)v16);
    v9 = v17;
    v10 = (void **)v16[0];
    sub_20BF834B0((uint64_t)&v20);
    v11 = v16;
    if (v9 < 0)
      v11 = v10;
    if (v15 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfUnregisteredValue in crate file contains invalid type '%s' = '%s'; expected"
                                          " string, VtDictionary or SdfUnregisteredValueListOp; returning empty",
      (const char *)v11,
      p_p);
    if (v15 < 0)
      operator delete(__p);
    if (v17 < 0)
      operator delete(v16[0]);
    pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18);
    sub_20BF4B5D8(a2, v18);
    sub_20BF4C2D8((uint64_t)v18);
LABEL_25:
    v8 = 0;
    goto LABEL_26;
  }
  if ((v21 & 4) != 0)
    v3 = (*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
  else
    v3 = (uint64_t)v20;
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18, v3);
LABEL_14:
  sub_20BF4B5D8(a2, v18);
  sub_20BF4C2D8((uint64_t)v18);
  v8 = 1;
LABEL_26:
  sub_20BF4C2D8((uint64_t)&v20);
  return v8;
}

void sub_20C330CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

uint64_t sub_20C330D2C(unsigned int **a1, _QWORD *a2)
{
  unsigned int *v3;
  _QWORD v5[3];

  v5[2] = *MEMORY[0x24BDAC8D0];
  v3 = sub_20C330DB0(a1);
  sub_20BF4C200(v5, v3);
  sub_20BF4B5D8(v3, a2);
  sub_20BF4B5D8(a2, v5);
  return sub_20BF4C2D8((uint64_t)v5);
}

unsigned int *sub_20C330DB0(unsigned int **a1)
{
  unsigned int *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C019348(a1);
}

__n128 sub_20C330E48(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535EE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C330E84(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535EE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C330EA8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_20C330EF8((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C330EB0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535F48))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C330EEC()
{
  return &unk_24C535F48;
}

uint64_t sub_20C330EF8(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v10 = *a1;
  *((_QWORD *)&v10 + 1) = v8;
  v11 = v6;
  v12 = v7;
  v13 = sub_20C2A2B6C();
  return sub_20C330F74(v5, &v10, v3, v4);
}

uint64_t sub_20C330F74(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v12);
  v7 = a2[1];
  v9 = *a2;
  v10 = v7;
  v11 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v9 + 1) = *(_QWORD *)(*(_QWORD *)v10 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C331044((uint64_t)&v9, v12);
  }
  sub_20C330A34(a4, v12);
  return sub_20BF4C2D8((uint64_t)v12);
}

void sub_20C331028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C331044(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  const void ****v4;
  const std::type_info *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void **v10;
  void **v11;
  const char *p_p;
  void *__p;
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[4];
  char v19;
  const void ****v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  if ((sub_20C311A80(a1, &v20) & 1) == 0)
    goto LABEL_25;
  if (!sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
  {
    if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0)
        v4 = (const void ****)(*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      else
        v4 = v20;
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)v18, v4);
      goto LABEL_14;
    }
    if (sub_20BFE4EAC((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0)
        v7 = (*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      else
        v7 = (uint64_t)v20;
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18, v7);
      goto LABEL_14;
    }
    v18[0] = "usd/crateFile.cpp";
    v18[1] = "Read";
    v18[2] = 1362;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::"
             "Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::Re"
             "ad(T &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
             "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v20, v5, v6, (uint64_t)v16);
    v9 = v17;
    v10 = (void **)v16[0];
    sub_20BF834B0((uint64_t)&v20);
    v11 = v16;
    if (v9 < 0)
      v11 = v10;
    if (v15 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfUnregisteredValue in crate file contains invalid type '%s' = '%s'; expected"
                                          " string, VtDictionary or SdfUnregisteredValueListOp; returning empty",
      (const char *)v11,
      p_p);
    if (v15 < 0)
      operator delete(__p);
    if (v17 < 0)
      operator delete(v16[0]);
    pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18);
    sub_20BF4B5D8(a2, v18);
    sub_20BF4C2D8((uint64_t)v18);
LABEL_25:
    v8 = 0;
    goto LABEL_26;
  }
  if ((v21 & 4) != 0)
    v3 = (*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
  else
    v3 = (uint64_t)v20;
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18, v3);
LABEL_14:
  sub_20BF4B5D8(a2, v18);
  sub_20BF4C2D8((uint64_t)v18);
  v8 = 1;
LABEL_26:
  sub_20BF4C2D8((uint64_t)&v20);
  return v8;
}

void sub_20C331244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

__n128 sub_20C3312A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535F68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3312E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535F68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C331304(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C33135C((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C331314(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C535FC8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C331350()
{
  return &unk_24C535FC8;
}

void sub_20C33135C(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C331478(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C33145C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C331478(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v16);
  v13 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v14 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v15 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v15 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C3315A8((uint64_t *)&v13, v16);
    v7 = v14;
  }
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_20C330A34(a4, v16);
  return sub_20BF4C2D8((uint64_t)v16);
}

void sub_20C33157C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v14;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v14);
  sub_20BF4C2D8((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3315A8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  const void ****v4;
  const std::type_info *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void **v10;
  void **v11;
  const char *p_p;
  void *__p;
  char v15;
  void *v16[2];
  char v17;
  _QWORD v18[4];
  char v19;
  const void ****v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v21 = 0;
  if ((sub_20C312148(a1, &v20) & 1) == 0)
    goto LABEL_25;
  if (!sub_20BFB4608((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
  {
    if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0)
        v4 = (const void ****)(*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      else
        v4 = v20;
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue *)v18, v4);
      goto LABEL_14;
    }
    if (sub_20BFE4EAC((pxrInternal__aapl__pxrReserved__::VtValue *)&v20))
    {
      if ((v21 & 4) != 0)
        v7 = (*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
      else
        v7 = (uint64_t)v20;
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18, v7);
      goto LABEL_14;
    }
    v18[0] = "usd/crateFile.cpp";
    v18[1] = "Read";
    v18[2] = 1362;
    v18[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::"
             "Usd_CrateFile::_AssetStream>::Read(T &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Ass"
             "etStream, T = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue]";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)&v20, v5, v6, (uint64_t)v16);
    v9 = v17;
    v10 = (void **)v16[0];
    sub_20BF834B0((uint64_t)&v20);
    v11 = v16;
    if (v9 < 0)
      v11 = v10;
    if (v15 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v18, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfUnregisteredValue in crate file contains invalid type '%s' = '%s'; expected"
                                          " string, VtDictionary or SdfUnregisteredValueListOp; returning empty",
      (const char *)v11,
      p_p);
    if (v15 < 0)
      operator delete(__p);
    if (v17 < 0)
      operator delete(v16[0]);
    pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18);
    sub_20BF4B5D8(a2, v18);
    sub_20BF4C2D8((uint64_t)v18);
LABEL_25:
    v8 = 0;
    goto LABEL_26;
  }
  if ((v21 & 4) != 0)
    v3 = (*(uint64_t (**)(const void *****))((v21 & 0xFFFFFFFFFFFFFFF8) + 168))(&v20);
  else
    v3 = (uint64_t)v20;
  pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue((uint64_t)v18, v3);
LABEL_14:
  sub_20BF4B5D8(a2, v18);
  sub_20BF4C2D8((uint64_t)v18);
  v8 = 1;
LABEL_26:
  sub_20BF4C2D8((uint64_t)&v20);
  return v8;
}

void sub_20C3317A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  sub_20BF4C2D8(v22 - 56);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C331800(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C535FE8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3318AC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C536068;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C331958(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5360E8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C331A04(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C536168;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C331AB8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C535FE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C331AF4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C535FE8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C331B18(uint64_t a1, uint64_t a2)
{
  return sub_20C331B68((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_20C331B20(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C536048))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C331B5C()
{
  return &unk_24C536048;
}

uint64_t sub_20C331B68(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = *(_QWORD *)(*a1 + 6328);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *(unsigned __int8 **)a2;
  return sub_20C331BC0(v3, v2, (_QWORD *)(v4 + 256), v6);
}

uint64_t sub_20C331BC0(uint64_t *a1, uint64_t a2, _QWORD *a3, unsigned __int8 *a4)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  void **v21;

  v20[0] = a2;
  v20[1] = a3;
  sub_20C036FFC((uint64_t)&v13, (uint64_t)a4);
  v21 = (void **)&v19;
  sub_20BF8CA20(&v21);
  v21 = (void **)&v18;
  sub_20BF8CA20(&v21);
  v21 = (void **)&v17;
  sub_20BF8CA20(&v21);
  v21 = (void **)&v16;
  sub_20BF8CA20(&v21);
  v21 = (void **)&v15;
  sub_20BF8CA20(&v21);
  v21 = (void **)&v14;
  sub_20BF8CA20(&v21);
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B63E8(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v21 = 0;
  v9 = sub_20C331E0C(v7, a4, (uint64_t)a4, &v21);
  v10 = v9;
  if (v11)
  {
    v9[21] = *a3 & 0xFFFFFFFFFFFFLL | 0x36000000000000;
    sub_20C331CD8((uint64_t)v20, (uint64_t *)a4);
  }
  return v10[21];
}

uint64_t sub_20C331CD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  void *__p[2];
  char v8;
  char __src;

  sub_20C312E3C(&__src, (uint64_t)a2);
  if ((__src & 0x60) != 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)a1 + 6328);
    sub_20BDDC0E4(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_20C312C5C(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  result = sub_20C2DC688(a1, &__src);
  v6 = __src;
  if ((__src & 2) != 0)
  {
    result = sub_20C33218C(a1, a2 + 1);
    v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  result = sub_20C33218C(a1, a2 + 4);
  v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  result = sub_20C33218C(a1, a2 + 7);
  v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  result = sub_20C33218C(a1, a2 + 10);
  v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0)
      return result;
    return sub_20C33218C(a1, a2 + 16);
  }
LABEL_16:
  result = sub_20C33218C(a1, a2 + 13);
  if ((__src & 0x10) == 0)
    return result;
  return sub_20C33218C(a1, a2 + 16);
}

void sub_20C331DF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C331E0C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C1D5A40((uint64_t)&v25, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v9)
          {
            if ((pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::operator==(v14 + 2, a2) & 1) != 0)return v14;
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  sub_20C3320C0(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v25)
    {
      v23 = *(_QWORD *)(*v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  v14 = v25;
  v25 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C332148((uint64_t)&v25, 0);
  return v14;
}

void sub_20C3320A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C332148((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3320C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0xB0uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C036FFC((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C332130(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C332148(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C332148(uint64_t a1, uint64_t a2)
{
  void **v2;

  v2 = *(void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C2B6488(v2 + 2);
    operator delete(v2);
  }
}

uint64_t sub_20C33218C(uint64_t a1, uint64_t *a2)
{
  uint64_t __src;

  __src = (a2[1] - *a2) >> 4;
  sub_20C2B7248(a1, (char *)&__src);
  return sub_20C3321D8(*a2, a2[1], a1);
}

uint64_t sub_20C3321D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD v7[3];
  char __src[8];

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v7[0] = a3;
      v7[1] = v5;
      v7[2] = __src;
      sub_20C3107C8(a3, (uint64_t)v7);
      sub_20C2B7248(a3, __src);
      v5 += 16;
    }
    while (v5 != a2);
  }
  return a3;
}

__n128 sub_20C332250(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C536068;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C33228C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C536068;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C3322B0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C332340(v5, &v10, v3, v4);
}

uint64_t sub_20C3322F8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5360C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C332334()
{
  return &unk_24C5360C8;
}

void sub_20C332340(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v9 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C3324FC((uint64_t *)&v8, v11);
  }
  sub_20C332428(a4, v11);
  v18 = (void **)&v17;
  sub_20BF8CA20(&v18);
  v18 = (void **)&v16;
  sub_20BF8CA20(&v18);
  v18 = (void **)&v15;
  sub_20BF8CA20(&v18);
  v18 = (void **)&v14;
  sub_20BF8CA20(&v18);
  v18 = (void **)&v13;
  sub_20BF8CA20(&v18);
  v18 = (void **)&v12;
  sub_20BF8CA20(&v18);
}

void sub_20C332414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C0282CC((void **)va);
  _Unwind_Resume(a1);
}

char *sub_20C332428(pxrInternal__aapl__pxrReserved__::VtValue *a1, char *a2)
{
  char *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  if ((sub_20BFE4EAC(a1) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp((uint64_t)&v6);
    sub_20C332A54((uint64_t)a1, (uint64_t)&v6);
    v13 = (void **)&v12;
    sub_20BF8CA20(&v13);
    v13 = (void **)&v11;
    sub_20BF8CA20(&v13);
    v13 = (void **)&v10;
    sub_20BF8CA20(&v13);
    v13 = (void **)&v9;
    sub_20BF8CA20(&v13);
    v13 = (void **)&v8;
    sub_20BF8CA20(&v13);
    v13 = (void **)&v7;
    sub_20BF8CA20(&v13);
  }
  v4 = (char *)sub_20C332B20((uint64_t *)a1);
  return pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::Swap(v4, a2);
}

void sub_20C3324E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20C0282CC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3324FC(uint64_t *a1, _BYTE *a2)
{
  char p;
  uint64_t v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __sFILE v10;
  char **v11;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp((uint64_t)&v10._p + 1);
  LOBYTE(v10._p) = 0;
  if (!sub_20C3133E4((uint64_t)(a1 + 1), 0, &v10))
    goto LABEL_24;
  p = (char)v10._p;
  if (((uint64_t)v10._p & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ClearAndMakeExplicit((unsigned __int8 *)&v10._p + 1);
    p = (char)v10._p;
  }
  if ((p & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C332858(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems((unsigned __int8 *)&v10._p + 1, (unsigned __int8 *)&v7);
    v11 = &v7;
    sub_20BF8CA20((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C332858(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAddedItems((unsigned __int8 *)&v10._p + 1, (unsigned __int8 *)&v7);
    v11 = &v7;
    sub_20BF8CA20((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C332858(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetPrependedItems((unsigned __int8 *)&v10._p + 1, (unsigned __int8 *)&v7);
    v11 = &v7;
    sub_20BF8CA20((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C332858(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems((unsigned __int8 *)&v10._p + 1, (unsigned __int8 *)&v7);
    v11 = &v7;
    sub_20BF8CA20((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C332858(a1, &v7) & 1) == 0)
  {
LABEL_23:
    v11 = &v7;
    sub_20BF8CA20((void ***)&v11);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetDeletedItems((unsigned __int8 *)&v10._p + 1, (unsigned __int8 *)&v7);
  v11 = &v7;
  sub_20BF8CA20((void ***)&v11);
  p = (char)v10._p;
LABEL_19:
  if ((p & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C332858(a1, &v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetOrderedItems((unsigned __int8 *)&v10._p + 1, (unsigned __int8 *)&v7);
      v11 = &v7;
      sub_20BF8CA20((void ***)&v11);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C3327A8(a2, (uint64_t)&v10._p + 1);
  v5 = 1;
LABEL_25:
  v7 = (char *)&v10._lb._size + 1;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v10._extra + 1;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v10._write + 1;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v10._close + 1;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v10._bf._size + 1;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v10._r + 1;
  sub_20BF8CA20((void ***)&v7);
  return v5;
}

void sub_20C33276C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20BF8CA20((void ***)(v6 - 40));
  sub_20C0282CC((void **)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20C3327A8(_BYTE *a1, uint64_t a2)
{
  *a1 = *(_BYTE *)a2;
  if (a1 != (_BYTE *)a2)
  {
    sub_20C129B64((uint64_t)(a1 + 8), *(_QWORD **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4);
    sub_20C129B64((uint64_t)(a1 + 32), *(_QWORD **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4);
    sub_20C129B64((uint64_t)(a1 + 56), *(_QWORD **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4);
    sub_20C129B64((uint64_t)(a1 + 80), *(_QWORD **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 4);
    sub_20C129B64((uint64_t)(a1 + 104), *(_QWORD **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 4);
    sub_20C129B64((uint64_t)(a1 + 128), *(_QWORD **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 4);
  }
  return a1;
}

uint64_t sub_20C332858(uint64_t *a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  char v17;
  unint64_t v18;
  char **v19;

  v18 = 0;
  if (!sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&v18))
    return 0;
  v5 = a1[2];
  v4 = a1[3];
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v18 > v6)
  {
    v13 = "usd/crateFile.cpp";
    v14 = "_Read";
    v15 = 1189;
    v16 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue]";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v18, v6, v4);
    return 0;
  }
  sub_20C3329C0(&v13, v18);
  v7 = v18;
  if (!v18)
    goto LABEL_10;
  v8 = 0;
  v9 = 0;
  v10 = v13;
  do
  {
    if (!sub_20C330AD4(a1, v10))
      break;
    ++v9;
    v10 += 16;
    v8 = v9 >= v7;
  }
  while (v7 != v9);
  if (!v8)
  {
    v11 = 0;
  }
  else
  {
LABEL_10:
    if (&v13 != a2)
      sub_20C129B64((uint64_t)a2, v13, (uint64_t)v14, (v14 - v13) >> 4);
    v11 = 1;
  }
  v19 = &v13;
  sub_20BF8CA20((void ***)&v19);
  return v11;
}

void sub_20C3329A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_20BF8CA20(&a18);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C3329C0(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE90F0C(a1, a2);
    v4 = a1[1];
    v5 = v4 + 16 * a2;
    v6 = 16 * a2;
    do
    {
      pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::SdfUnregisteredValue(v4);
      v4 += 16;
      v6 -= 16;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C332A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BF8CA20(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C332A54(uint64_t a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, a1);
  *(_QWORD *)(a1 + 8) = &off_24C52AC70;
  sub_20C1D5D98((unsigned int **)a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C332AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C332B20(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C1D5D08(a1);
}

__n128 sub_20C332BB8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5360E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C332BF4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5360E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C332C18(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C332C68((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C332C20(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C536148))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C332C5C()
{
  return &unk_24C536148;
}

void sub_20C332C68(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C332CE4(v5, &v9, v3, v4);
}

void sub_20C332CE4(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C332DDC((uint64_t)&v8, v11);
  }
  sub_20C332428(a4, v11);
  v18 = (void **)&v17;
  sub_20BF8CA20(&v18);
  v18 = (void **)&v16;
  sub_20BF8CA20(&v18);
  v18 = (void **)&v15;
  sub_20BF8CA20(&v18);
  v18 = (void **)&v14;
  sub_20BF8CA20(&v18);
  v18 = (void **)&v13;
  sub_20BF8CA20(&v18);
  v18 = (void **)&v12;
  sub_20BF8CA20(&v18);
}

void sub_20C332DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C0282CC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C332DDC(uint64_t a1, _BYTE *a2)
{
  char v4;
  uint64_t v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char __dst;
  unsigned __int8 v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp((uint64_t)v11);
  __dst = 0;
  if ((sub_20C2B9BEC(a1 + 8, &__dst, 1uLL) & 1) == 0)
    goto LABEL_24;
  v4 = __dst;
  if ((__dst & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ClearAndMakeExplicit(v11);
    v4 = __dst;
  }
  if ((v4 & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C333088(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems(v11, (unsigned __int8 *)&v7);
    v18 = &v7;
    sub_20BF8CA20((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C333088(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAddedItems(v11, (unsigned __int8 *)&v7);
    v18 = &v7;
    sub_20BF8CA20((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C333088(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetPrependedItems(v11, (unsigned __int8 *)&v7);
    v18 = &v7;
    sub_20BF8CA20((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C333088(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems(v11, (unsigned __int8 *)&v7);
    v18 = &v7;
    sub_20BF8CA20((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C333088(a1, &v7) & 1) == 0)
  {
LABEL_23:
    v18 = &v7;
    sub_20BF8CA20((void ***)&v18);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetDeletedItems(v11, (unsigned __int8 *)&v7);
  v18 = &v7;
  sub_20BF8CA20((void ***)&v18);
  v4 = __dst;
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C333088(a1, &v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetOrderedItems(v11, (unsigned __int8 *)&v7);
      v18 = &v7;
      sub_20BF8CA20((void ***)&v18);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C3327A8(a2, (uint64_t)v11);
  v5 = 1;
LABEL_25:
  v7 = (char *)&v17;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v16;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v15;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v14;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v13;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v12;
  sub_20BF8CA20((void ***)&v7);
  return v5;
}

void sub_20C33304C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20BF8CA20((void ***)(v6 - 40));
  sub_20C0282CC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C333088(uint64_t a1, char **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  char v17;
  unint64_t __dst;
  char **v19;

  __dst = 0;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    v13 = "usd/crateFile.cpp";
    v14 = "_Read";
    v15 = 1189;
    v16 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue]";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_20C3329C0(&v13, __dst);
  v7 = __dst;
  if (!__dst)
    goto LABEL_10;
  v8 = 0;
  v9 = 0;
  v10 = v13;
  do
  {
    if (!sub_20C331044(a1, v10))
      break;
    ++v9;
    v10 += 16;
    v8 = v9 >= v7;
  }
  while (v7 != v9);
  if (!v8)
  {
    v11 = 0;
  }
  else
  {
LABEL_10:
    if (&v13 != a2)
      sub_20C129B64((uint64_t)a2, v13, (uint64_t)v14, (v14 - v13) >> 4);
    v11 = 1;
  }
  v19 = &v13;
  sub_20BF8CA20((void ***)&v19);
  return v11;
}

void sub_20C3331DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_20BF8CA20(&a18);
  _Unwind_Resume(a1);
}

__n128 sub_20C333204(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C536168;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C333240(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C536168;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C333264(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C3332BC((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C333274(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5361C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3332B0()
{
  return &unk_24C5361C8;
}

void sub_20C3332BC(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C3333D8(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C3333BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C3333D8(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp((uint64_t)v15);
  v12 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v13 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v14 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v14 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C333530((uint64_t *)&v12, v15);
    v7 = v13;
  }
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_20C332428(a4, v15);
  v22 = (void **)&v21;
  sub_20BF8CA20(&v22);
  v22 = (void **)&v20;
  sub_20BF8CA20(&v22);
  v22 = (void **)&v19;
  sub_20BF8CA20(&v22);
  v22 = (void **)&v18;
  sub_20BF8CA20(&v22);
  v22 = (void **)&v17;
  sub_20BF8CA20(&v22);
  v22 = (void **)&v16;
  sub_20BF8CA20(&v22);
}

void sub_20C33350C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  sub_20C0282CC(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20C333530(uint64_t *a1, _BYTE *a2)
{
  char v4;
  uint64_t v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SdfListOp((uint64_t)v11);
  v10 = 0;
  if ((sub_20C2B72E8(a1 + 1, (uint64_t)&v10, 1uLL) & 1) == 0)
    goto LABEL_24;
  v4 = v10;
  if ((v10 & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::ClearAndMakeExplicit(v11);
    v4 = v10;
  }
  if ((v4 & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3337DC(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetExplicitItems(v11, (unsigned __int8 *)&v7);
    v18 = &v7;
    sub_20BF8CA20((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3337DC(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAddedItems(v11, (unsigned __int8 *)&v7);
    v18 = &v7;
    sub_20BF8CA20((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3337DC(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetPrependedItems(v11, (unsigned __int8 *)&v7);
    v18 = &v7;
    sub_20BF8CA20((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3337DC(a1, &v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetAppendedItems(v11, (unsigned __int8 *)&v7);
    v18 = &v7;
    sub_20BF8CA20((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C3337DC(a1, &v7) & 1) == 0)
  {
LABEL_23:
    v18 = &v7;
    sub_20BF8CA20((void ***)&v18);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetDeletedItems(v11, (unsigned __int8 *)&v7);
  v18 = &v7;
  sub_20BF8CA20((void ***)&v18);
  v4 = v10;
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3337DC(a1, &v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue>::SetOrderedItems(v11, (unsigned __int8 *)&v7);
      v18 = &v7;
      sub_20BF8CA20((void ***)&v18);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C3327A8(a2, (uint64_t)v11);
  v5 = 1;
LABEL_25:
  v7 = (char *)&v17;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v16;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v15;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v14;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v13;
  sub_20BF8CA20((void ***)&v7);
  v7 = (char *)&v12;
  sub_20BF8CA20((void ***)&v7);
  return v5;
}

void sub_20C3337A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20BF8CA20((void ***)(v6 - 40));
  sub_20C0282CC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3337DC(uint64_t *a1, char **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  unint64_t v21;
  char **v22;

  v21 = 0;
  v4 = a1 + 1;
  if (!sub_20C2B72E8(a1 + 1, (uint64_t)&v21, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 16))(a1[1]);
  v6 = a1[3];
  v7 = v5 - v6;
  v8 = v21;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v21 > v7)
  {
    v16 = "usd/crateFile.cpp";
    v17 = "_Read";
    v18 = 1189;
    v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue]";
    v20 = 0;
    v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v14);
    return 0;
  }
  sub_20C3329C0(&v16, v21);
  v9 = v21;
  if (!v21)
    goto LABEL_10;
  v10 = 0;
  v11 = 0;
  v12 = v16;
  do
  {
    if (!sub_20C3315A8(a1, v12))
      break;
    ++v11;
    v12 += 16;
    v10 = v11 >= v9;
  }
  while (v9 != v11);
  if (!v10)
  {
    v13 = 0;
  }
  else
  {
LABEL_10:
    if (&v16 != a2)
      sub_20C129B64((uint64_t)a2, v16, (uint64_t)v17, (v17 - v16) >> 4);
    v13 = 1;
  }
  v22 = &v16;
  sub_20BF8CA20((void ***)&v22);
  return v13;
}

void sub_20C33394C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_20BF8CA20(&a18);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C33396C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5361E8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C333A18(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C536268;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C333AC4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5362E8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C333B70(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C536368;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C333C24(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5361E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C333C60(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5361E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C333C84(uint64_t a1, uint64_t a2)
{
  return sub_20C333CD4((char ***)(a1 + 8), a2);
}

uint64_t sub_20C333C8C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C536248))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C333CC8()
{
  return &unk_24C536248;
}

uint64_t sub_20C333CD4(char ***a1, uint64_t a2)
{
  char **v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  unsigned __int8 *v6;

  v2 = *a1;
  v3 = (uint64_t *)a1[1];
  v4 = (*a1)[791];
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 4) != 0)
    v6 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v6 = *(unsigned __int8 **)a2;
  return sub_20C333D2C(v3, v2, (char **)v4 + 32, v6);
}

uint64_t sub_20C333D2C(uint64_t *a1, char **a2, char **a3, unsigned __int8 *a4)
{
  uint64_t v7;
  _OWORD *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char **v20[2];
  void **v21;

  v20[0] = a2;
  v20[1] = a3;
  sub_20C02E924((uint64_t)&v13, (uint64_t)a4);
  v21 = (void **)&v19;
  sub_20C021818(&v21);
  v21 = (void **)&v18;
  sub_20C021818(&v21);
  v21 = (void **)&v17;
  sub_20C021818(&v21);
  v21 = (void **)&v16;
  sub_20C021818(&v21);
  v21 = (void **)&v15;
  sub_20C021818(&v21);
  v21 = (void **)&v14;
  sub_20C021818(&v21);
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B66D8(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v21 = 0;
  v9 = sub_20C333ED4(v7, a4, (uint64_t)a4, &v21);
  v10 = v9;
  if (v11)
  {
    *((_QWORD *)v9 + 21) = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x37000000000000;
    sub_20C333E44(v20, (uint64_t *)a4);
  }
  return *((_QWORD *)v10 + 21);
}

uint64_t sub_20C333E44(char ***a1, uint64_t *a2)
{
  uint64_t v4;
  void *__p[2];
  char v7;

  v4 = (uint64_t)(*a1)[791];
  sub_20BDDC0E4(__p, "A SdfPayloadListOp value was detected which requires crate version 0.8.0.");
  sub_20C312C5C(v4, (const char *)0x800, (char *)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return sub_20C334254(a1, a2);
}

void sub_20C333EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_20C333ED4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unsigned __int8 **v22;
  unint64_t v23;
  unsigned __int8 *v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C02EEB4((unint64_t)&v25, a2, (uint64_t)(a2 + 8), (uint64_t)(a2 + 32), (uint64_t)(a2 + 56), (uint64_t)(a2 + 80), (uint64_t)(a2 + 104), (uint64_t)(a2 + 128));
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::operator==(i + 16, a2))
          {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  sub_20C334188(a1, v9, a3, a4, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *(_QWORD *)v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v25)
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  i = v25;
  v25 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C334210((uint64_t)&v25, 0);
  return i;
}

void sub_20C334170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C334210((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C334188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;

  v9 = a1 + 16;
  v10 = operator new(0xB0uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C02E924((uint64_t)(v10 + 2), a3);
  v10[21] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C3341F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C334210(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C334210(uint64_t a1, uint64_t a2)
{
  void **v2;

  v2 = *(void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C2B6778(v2 + 2);
    operator delete(v2);
  }
}

uint64_t sub_20C334254(char ***a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6;
  void *__p[2];
  char v8;
  char __src;

  sub_20C312E3C(&__src, (uint64_t)a2);
  if ((__src & 0x60) != 0)
  {
    v4 = (uint64_t)(*a1)[791];
    sub_20BDDC0E4(__p, "A SdfListOp value using a prepended or appended value was detected, which requires crate version 0.2.0.");
    sub_20C312C5C(v4, (const char *)0x200, (char *)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  result = sub_20C2DC688((uint64_t)a1, &__src);
  v6 = __src;
  if ((__src & 2) != 0)
  {
    result = sub_20C334388(a1, a2 + 1);
    v6 = __src;
    if ((__src & 4) == 0)
    {
LABEL_6:
      if ((v6 & 0x20) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
  }
  else if ((__src & 4) == 0)
  {
    goto LABEL_6;
  }
  result = sub_20C334388(a1, a2 + 4);
  v6 = __src;
  if ((__src & 0x20) == 0)
  {
LABEL_7:
    if ((v6 & 0x40) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
LABEL_14:
  result = sub_20C334388(a1, a2 + 7);
  v6 = __src;
  if ((__src & 0x40) == 0)
  {
LABEL_8:
    if ((v6 & 8) == 0)
      goto LABEL_9;
    goto LABEL_16;
  }
LABEL_15:
  result = sub_20C334388(a1, a2 + 10);
  v6 = __src;
  if ((__src & 8) == 0)
  {
LABEL_9:
    if ((v6 & 0x10) == 0)
      return result;
    return sub_20C334388(a1, a2 + 16);
  }
LABEL_16:
  result = sub_20C334388(a1, a2 + 13);
  if ((__src & 0x10) == 0)
    return result;
  return sub_20C334388(a1, a2 + 16);
}

void sub_20C33436C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C334388(char ***a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t __src;

  __src = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4);
  result = sub_20C2B7248((uint64_t)a1, (char *)&__src);
  v5 = *a2;
  v6 = a2[1] - *a2;
  if (v6)
  {
    v7 = 48 * (v6 / 48);
    do
    {
      result = sub_20C329918(a1, v5);
      v5 += 48;
      v7 -= 48;
    }
    while (v7);
  }
  return result;
}

__n128 sub_20C334428(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C536268;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C334464(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C536268;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C334488(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  *(_QWORD *)&v10 = v6;
  *((_QWORD *)&v10 + 1) = v7;
  v11 = 0;
  v12 = v8;
  v13 = v9;
  sub_20C334518(v5, &v10, v3, v4);
}

uint64_t sub_20C3344D0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5362C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C33450C()
{
  return &unk_24C5362C8;
}

void sub_20C334518(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *(_QWORD *)&v9 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C334600((uint64_t *)&v8, v11);
  }
  sub_20C02EAC8(a4, v11);
  v18 = (void **)&v17;
  sub_20C021818(&v18);
  v18 = (void **)&v16;
  sub_20C021818(&v18);
  v18 = (void **)&v15;
  sub_20C021818(&v18);
  v18 = (void **)&v14;
  sub_20C021818(&v18);
  v18 = (void **)&v13;
  sub_20C021818(&v18);
  v18 = (void **)&v12;
  sub_20C021818(&v18);
}

void sub_20C3345EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C02C9C4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C334600(uint64_t *a1, _BYTE *a2)
{
  char p;
  uint64_t v5;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  __sFILE v10;
  void ***v11;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)&v10._p + 1);
  LOBYTE(v10._p) = 0;
  if (!sub_20C3133E4((uint64_t)(a1 + 1), 0, &v10))
    goto LABEL_24;
  p = (char)v10._p;
  if (((uint64_t)v10._p & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ClearAndMakeExplicit((unsigned __int8 *)&v10._p + 1);
    p = (char)v10._p;
  }
  if ((p & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3348AC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems((unsigned __int8 *)&v10._p + 1, (std::string **)&v7);
    v11 = &v7;
    sub_20C021818((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3348AC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAddedItems((unsigned __int8 *)&v10._p + 1, (std::string **)&v7);
    v11 = &v7;
    sub_20C021818((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3348AC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetPrependedItems((unsigned __int8 *)&v10._p + 1, (std::string **)&v7);
    v11 = &v7;
    sub_20C021818((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3348AC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems((unsigned __int8 *)&v10._p + 1, (std::string **)&v7);
    v11 = &v7;
    sub_20C021818((void ***)&v11);
    p = (char)v10._p;
  }
  if ((p & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C3348AC(a1, (std::string **)&v7) & 1) == 0)
  {
LABEL_23:
    v11 = &v7;
    sub_20C021818((void ***)&v11);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetDeletedItems((unsigned __int8 *)&v10._p + 1, (std::string **)&v7);
  v11 = &v7;
  sub_20C021818((void ***)&v11);
  p = (char)v10._p;
LABEL_19:
  if ((p & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3348AC(a1, (std::string **)&v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetOrderedItems((unsigned __int8 *)&v10._p + 1, (std::string **)&v7);
      v11 = &v7;
      sub_20C021818((void ***)&v11);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C0E3694(a2, (uint64_t)&v10._p + 1);
  v5 = 1;
LABEL_25:
  v7 = (void **)((char *)&v10._lb._size + 1);
  sub_20C021818(&v7);
  v7 = (void **)((char *)&v10._extra + 1);
  sub_20C021818(&v7);
  v7 = (void **)((char *)&v10._write + 1);
  sub_20C021818(&v7);
  v7 = (void **)((char *)&v10._close + 1);
  sub_20C021818(&v7);
  v7 = (void **)((char *)&v10._bf._size + 1);
  sub_20C021818(&v7);
  v7 = (void **)((char *)&v10._r + 1);
  sub_20C021818(&v7);
  return v5;
}

void sub_20C334870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20C021818((void ***)(v6 - 40));
  sub_20C02C9C4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3348AC(uint64_t *a1, std::string **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::string *v13;
  std::string *v14;
  uint64_t v15;
  const char *v16;
  char v17;
  unint64_t v18;
  std::string **v19;

  v18 = 0;
  if (!sub_20C2C1BD8((uint64_t)(a1 + 1), 0, (__sFILE *)&v18))
    return 0;
  v5 = a1[2];
  v4 = a1[3];
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v18 > v6)
  {
    v13 = (std::string *)"usd/crateFile.cpp";
    v14 = (std::string *)"_Read";
    v15 = 1189;
    v16 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::SdfPayload]";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v18, v6, v4);
    return 0;
  }
  sub_20C334A20(&v13, v18);
  v7 = v18;
  if (!v18)
    goto LABEL_10;
  v8 = 0;
  v9 = 0;
  v10 = v13;
  do
  {
    if (!sub_20C32A0F0(a1, (uint64_t)v10))
      break;
    ++v9;
    v10 += 2;
    v8 = v9 >= v7;
  }
  while (v7 != v9);
  if (!v8)
  {
    v11 = 0;
  }
  else
  {
LABEL_10:
    if (&v13 != a2)
      sub_20C0E376C((uint64_t)a2, v13, v14, 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v13) >> 4));
    v11 = 1;
  }
  v19 = &v13;
  sub_20C021818((void ***)&v19);
  return v11;
}

void sub_20C334A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_20C021818(&a18);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C334A20(_QWORD *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C02CC00(a1, a2);
    sub_20C334A88((uint64_t)a1, a2);
  }
  return a1;
}

void sub_20C334A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C021818(&a9);
  _Unwind_Resume(a1);
}

void sub_20C334A88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  if (a2)
  {
    v4 = v3 + 48 * a2;
    v5 = 48 * a2;
    do
    {
      sub_20C334AF8(a1 + 16, v3);
      v3 += 48;
      v5 -= 48;
    }
    while (v5);
    v3 = v4;
  }
  *(_QWORD *)(a1 + 8) = v3;
}

void sub_20C334AF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C334AF8(uint64_t a1, uint64_t a2)
{
  double v3[2];
  uint64_t v4;
  void *__p[2];
  uint64_t v6;

  __p[0] = 0;
  __p[1] = 0;
  v6 = 0;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v4 + 1);
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset(v3, 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::SdfPayload::SdfPayload(a2, __p, &v4, v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v4 + 1);
  sub_20BFD265C(&v4);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[0]);
}

void sub_20C334B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20BFD1A18(&a11);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__n128 sub_20C334BBC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5362E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C334BF8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5362E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C334C1C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C334C6C((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C334C24(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C536348))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C334C60()
{
  return &unk_24C536348;
}

void sub_20C334C6C(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  *(_QWORD *)&v9 = *a1;
  *((_QWORD *)&v9 + 1) = v8;
  v10 = v6;
  v11 = v7;
  v12 = sub_20C2A2B6C();
  sub_20C334CE8(v5, &v9, v3, v4);
}

void sub_20C334CE8(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v11);
  v7 = a2[1];
  v8 = *a2;
  v9 = v7;
  v10 = *((_QWORD *)a2 + 4);
  if ((a3 & 0x4000000000000000) == 0)
  {
    *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    sub_20C334DE0((uint64_t)&v8, v11);
  }
  sub_20C02EAC8(a4, v11);
  v18 = (void **)&v17;
  sub_20C021818(&v18);
  v18 = (void **)&v16;
  sub_20C021818(&v18);
  v18 = (void **)&v15;
  sub_20C021818(&v18);
  v18 = (void **)&v14;
  sub_20C021818(&v18);
  v18 = (void **)&v13;
  sub_20C021818(&v18);
  v18 = (void **)&v12;
  sub_20C021818(&v18);
}

void sub_20C334DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C02C9C4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C334DE0(uint64_t a1, _BYTE *a2)
{
  char v4;
  uint64_t v5;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  char __dst;
  unsigned __int8 v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void ***v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v11);
  __dst = 0;
  if ((sub_20C2B9BEC(a1 + 8, &__dst, 1uLL) & 1) == 0)
    goto LABEL_24;
  v4 = __dst;
  if ((__dst & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ClearAndMakeExplicit(v11);
    v4 = __dst;
  }
  if ((v4 & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C33508C(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems(v11, (std::string **)&v7);
    v18 = &v7;
    sub_20C021818((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C33508C(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAddedItems(v11, (std::string **)&v7);
    v18 = &v7;
    sub_20C021818((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C33508C(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetPrependedItems(v11, (std::string **)&v7);
    v18 = &v7;
    sub_20C021818((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C33508C(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems(v11, (std::string **)&v7);
    v18 = &v7;
    sub_20C021818((void ***)&v18);
    v4 = __dst;
  }
  if ((v4 & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C33508C(a1, (std::string **)&v7) & 1) == 0)
  {
LABEL_23:
    v18 = &v7;
    sub_20C021818((void ***)&v18);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetDeletedItems(v11, (std::string **)&v7);
  v18 = &v7;
  sub_20C021818((void ***)&v18);
  v4 = __dst;
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C33508C(a1, (std::string **)&v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetOrderedItems(v11, (std::string **)&v7);
      v18 = &v7;
      sub_20C021818((void ***)&v18);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C0E3694(a2, (uint64_t)v11);
  v5 = 1;
LABEL_25:
  v7 = (void **)&v17;
  sub_20C021818(&v7);
  v7 = (void **)&v16;
  sub_20C021818(&v7);
  v7 = (void **)&v15;
  sub_20C021818(&v7);
  v7 = (void **)&v14;
  sub_20C021818(&v7);
  v7 = (void **)&v13;
  sub_20C021818(&v7);
  v7 = (void **)&v12;
  sub_20C021818(&v7);
  return v5;
}

void sub_20C335050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20C021818((void ***)(v6 - 40));
  sub_20C02C9C4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C33508C(uint64_t a1, std::string **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::string *v10;
  uint64_t v11;
  std::string *v13;
  std::string *v14;
  uint64_t v15;
  const char *v16;
  char v17;
  unint64_t __dst;
  std::string **v19;

  __dst = 0;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v4 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v5 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || __dst > v6)
  {
    v13 = (std::string *)"usd/crateFile.cpp";
    v14 = (std::string *)"_Read";
    v15 = 1189;
    v16 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfPayload]";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v6, v4);
    return 0;
  }
  sub_20C334A20(&v13, __dst);
  v7 = __dst;
  if (!__dst)
    goto LABEL_10;
  v8 = 0;
  v9 = 0;
  v10 = v13;
  do
  {
    if (!sub_20C32A808((uint64_t *)a1, (uint64_t)v10))
      break;
    ++v9;
    v10 += 2;
    v8 = v9 >= v7;
  }
  while (v7 != v9);
  if (!v8)
  {
    v11 = 0;
  }
  else
  {
LABEL_10:
    if (&v13 != a2)
      sub_20C0E376C((uint64_t)a2, v13, v14, 0xAAAAAAAAAAAAAAABLL * (((char *)v14 - (char *)v13) >> 4));
    v11 = 1;
  }
  v19 = &v13;
  sub_20C021818((void ***)&v19);
  return v11;
}

void sub_20C3351EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_20C021818(&a18);
  _Unwind_Resume(a1);
}

__n128 sub_20C335214(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C536368;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C335250(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C536368;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C335274(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C3352CC((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C335284(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5363C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3352C0()
{
  return &unk_24C5363C8;
}

void sub_20C3352CC(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C3353E8(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C3353CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C3353E8(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char v15[8];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v15);
  v12 = *a2;
  v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
  v13 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v14 = *((_QWORD *)a2 + 3);
  if ((a3 & 0x4000000000000000) == 0)
  {
    v14 = a3 & 0xFFFFFFFFFFFFLL;
    sub_20C335540(&v12, v15);
    v7 = v13;
  }
  if (v7)
  {
    v10 = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  sub_20C02EAC8(a4, v15);
  v22 = (void **)&v21;
  sub_20C021818(&v22);
  v22 = (void **)&v20;
  sub_20C021818(&v22);
  v22 = (void **)&v19;
  sub_20C021818(&v22);
  v22 = (void **)&v18;
  sub_20C021818(&v22);
  v22 = (void **)&v17;
  sub_20C021818(&v22);
  v22 = (void **)&v16;
  sub_20C021818(&v22);
}

void sub_20C33551C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  sub_20C02C9C4(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_20C335540(_QWORD *a1, _BYTE *a2)
{
  char v4;
  uint64_t v5;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unsigned __int8 v11[8];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void ***v18;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)v11);
  v10 = 0;
  if ((sub_20C2B72E8(a1 + 1, (uint64_t)&v10, 1uLL) & 1) == 0)
    goto LABEL_24;
  v4 = v10;
  if ((v10 & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ClearAndMakeExplicit(v11);
    v4 = v10;
  }
  if ((v4 & 2) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3357EC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetExplicitItems(v11, (std::string **)&v7);
    v18 = &v7;
    sub_20C021818((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 4) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3357EC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAddedItems(v11, (std::string **)&v7);
    v18 = &v7;
    sub_20C021818((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 0x20) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3357EC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetPrependedItems(v11, (std::string **)&v7);
    v18 = &v7;
    sub_20C021818((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 0x40) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3357EC(a1, (std::string **)&v7) & 1) == 0)
      goto LABEL_23;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetAppendedItems(v11, (std::string **)&v7);
    v18 = &v7;
    sub_20C021818((void ***)&v18);
    v4 = v10;
  }
  if ((v4 & 8) == 0)
    goto LABEL_19;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  if ((sub_20C3357EC(a1, (std::string **)&v7) & 1) == 0)
  {
LABEL_23:
    v18 = &v7;
    sub_20C021818((void ***)&v18);
LABEL_24:
    v5 = 0;
    goto LABEL_25;
  }
  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetDeletedItems(v11, (std::string **)&v7);
  v18 = &v7;
  sub_20C021818((void ***)&v18);
  v4 = v10;
LABEL_19:
  if ((v4 & 0x10) != 0)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    if ((sub_20C3357EC(a1, (std::string **)&v7) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SetOrderedItems(v11, (std::string **)&v7);
      v18 = &v7;
      sub_20C021818((void ***)&v18);
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_22:
  sub_20C0E3694(a2, (uint64_t)v11);
  v5 = 1;
LABEL_25:
  v7 = (void **)&v17;
  sub_20C021818(&v7);
  v7 = (void **)&v16;
  sub_20C021818(&v7);
  v7 = (void **)&v15;
  sub_20C021818(&v7);
  v7 = (void **)&v14;
  sub_20C021818(&v7);
  v7 = (void **)&v13;
  sub_20C021818(&v7);
  v7 = (void **)&v12;
  sub_20C021818(&v7);
  return v5;
}

void sub_20C3357B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  va_list va;

  va_start(va, a5);
  *(_QWORD *)(v6 - 40) = v5;
  sub_20C021818((void ***)(v6 - 40));
  sub_20C02C9C4((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3357EC(_QWORD *a1, std::string **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  std::string *v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v16;
  std::string *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  unint64_t v21;
  std::string **v22;

  v21 = 0;
  v4 = a1 + 1;
  if (!sub_20C2B72E8(a1 + 1, (uint64_t)&v21, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 16))(a1[1]);
  v6 = a1[3];
  v7 = v5 - v6;
  v8 = v21;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v21 > v7)
  {
    v16 = (std::string *)"usd/crateFile.cpp";
    v17 = (std::string *)"_Read";
    v18 = 1189;
    v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::SdfPayload]";
    v20 = 0;
    v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v14);
    return 0;
  }
  sub_20C334A20(&v16, v21);
  v9 = v21;
  if (!v21)
    goto LABEL_10;
  v10 = 0;
  v11 = 0;
  v12 = v16;
  do
  {
    if (!sub_20C32AECC(a1, (uint64_t)v12))
      break;
    ++v11;
    v12 += 2;
    v10 = v11 >= v9;
  }
  while (v9 != v11);
  if (!v10)
  {
    v13 = 0;
  }
  else
  {
LABEL_10:
    if (&v16 != a2)
      sub_20C0E376C((uint64_t)a2, v16, v17, 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - (char *)v16) >> 4));
    v13 = 1;
  }
  v22 = &v16;
  sub_20C021818((void ***)&v22);
  return v13;
}

void sub_20C335968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a12;
  sub_20C021818(&a18);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C335988(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5363E8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C335A34(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C536468;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C335AE0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5364E8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C335B8C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C536568;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C335C40(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5363E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C335C7C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5363E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C335CA0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C335CFC(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C335CB4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C536448))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C335CF0()
{
  return &unk_24C536448;
}

unint64_t sub_20C335CFC(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int IsArrayValued;
  uint64_t v9;
  unint64_t *v10;
  uint64_t v12;
  _OWORD *v13;
  double *v14;
  double *v15;
  char v16;
  uint64_t v17;
  _QWORD v18[2];

  v4 = this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (unint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *(unint64_t **)v4;
    return sub_20C335E14((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    v18[0] = a2;
    v18[1] = a3;
    v12 = *a1;
    if (!*a1)
    {
      v13 = operator new(0x28uLL);
      *v13 = 0u;
      v13[1] = 0u;
      *((_DWORD *)v13 + 8) = 1065353216;
      sub_20BF2B090(a1, (uint64_t)v13);
      v12 = *a1;
    }
    v17 = 0;
    v14 = sub_20C336374(v12, (double *)v4, (double *)v4, &v17);
    v15 = v14;
    if (v16)
    {
      *((_QWORD *)v14 + 3) = *a3 & 0xFFFFFFFFFFFFLL | 0x38000000000000;
      sub_20C3362DC((uint64_t)v18, (uint64_t *)v4);
    }
    return *((_QWORD *)v15 + 3);
  }
}

unint64_t sub_20C335E14(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  unint64_t __src;

  v25[0] = a2;
  v25[1] = a3;
  result = 0x8038000000000000;
  v24 = 0x8038000000000000;
  if (*a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B67FC(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C335FC4(v9, a4, (uint64_t)a4, &v24);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v19 = *(unsigned __int16 *)(v15 + 248);
        v26[0] = a2;
        v26[1] = a3;
        v20 = sub_20C2CE3F0((uint64_t)v26, 8);
        if (((v19 | (v19 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *a4;
          sub_20C2B7248((uint64_t)v26, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *a4;
          sub_20C2CE770((uint64_t)v26, (char *)&__src);
        }
        v21 = *a4;
        if (*a4)
        {
          v22 = (uint64_t *)a4[4];
          v23 = 8 * v21;
          do
          {
            sub_20C3362DC((uint64_t)v26, v22++);
            v23 -= 8;
          }
          while (v23);
        }
        v13[7] = v20 & 0xFFFFFFFFFFFFLL | 0x8038000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v25, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v26[0]) = 1;
        sub_20C2CE770((uint64_t)v25, (char *)v26);
        LODWORD(v26[0]) = *a4;
        sub_20C2CE770((uint64_t)v25, (char *)v26);
        v16 = *a4;
        if (*a4)
        {
          v17 = (uint64_t *)a4[4];
          v18 = 8 * v16;
          do
          {
            sub_20C3362DC((uint64_t)v25, v17++);
            v18 -= 8;
          }
          while (v18);
        }
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C335FC4(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  double *v10;
  unint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD **v18;
  _QWORD *i;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;

  v9 = *a2;
  if (*a2)
  {
    v10 = (double *)a2[4];
    v11 = *a2;
    do
    {
      v12 = *v10++;
      v13 = v12;
      if (v12 == 0.0)
        v13 = 0.0;
      v9 = *(_QWORD *)&v13 + ((*(_QWORD *)&v13 + v9 + (*(_QWORD *)&v13 + v9) * (*(_QWORD *)&v13 + v9)) >> 1);
      --v11;
    }
    while (v11);
    v9 *= 0x9E3779B97F4A7C55;
  }
  v14 = bswap64(v9);
  v15 = *(_QWORD *)(a1 + 8);
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    v17 = v16.u32[0];
    if (v16.u32[0] > 1uLL)
    {
      v4 = v14;
      if (v14 >= v15)
        v4 = v14 % v15;
    }
    else
    {
      v4 = (v15 - 1) & v14;
    }
    v18 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
      for (i = *v18; i; i = (_QWORD *)*i)
      {
        v20 = i[1];
        if (v20 == v14)
        {
          if (sub_20BF57F48(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v17 > 1)
          {
            if (v20 >= v15)
              v20 %= v15;
          }
          else
          {
            v20 &= v15 - 1;
          }
          if (v20 != v4)
            break;
        }
      }
    }
  }
  v21 = (_QWORD *)(a1 + 16);
  v22 = operator new(0x40uLL);
  i = v22;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = v14;
  v23 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v22 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v22 + 2) = v23;
  v24 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v22 + 6) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 - 16);
    if (*((_QWORD *)v22 + 5))
      v25 = (unint64_t *)*((_QWORD *)v22 + 5);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *((_QWORD *)v22 + 7) = *a4;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v15 || (float)(v28 * (float)v15) < v27)
  {
    v29 = 1;
    if (v15 >= 3)
      v29 = (v15 & (v15 - 1)) != 0;
    v30 = v29 | (2 * v15);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      v32 = v31;
    else
      v32 = v30;
    sub_20BDEC6E0(a1, v32);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v4 = v14 % v15;
      else
        v4 = v14;
    }
    else
    {
      v4 = (v15 - 1) & v14;
    }
  }
  v33 = *(_QWORD *)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v34)
  {
    *i = *v34;
LABEL_48:
    *v34 = i;
    goto LABEL_49;
  }
  *i = *v21;
  *v21 = i;
  *(_QWORD *)(v33 + 8 * v4) = v21;
  if (*i)
  {
    v35 = *(_QWORD *)(*i + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v35 >= v15)
        v35 %= v15;
    }
    else
    {
      v35 &= v15 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C33627C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C336298(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C336298(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C3362DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6;
  void *__p[2];
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 6328);
  sub_20BDDC0E4(__p, "A timecode or timecode[] value type was detected which requires crate version 0.9.0.");
  sub_20C312C5C(v4, (const char *)0x900, (char *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  v6 = *a2;
  return sub_20C2B7248(a1, (char *)&v6);
}

void sub_20C336358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double *sub_20C336374(uint64_t a1, double *a2, double *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  double *v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  double **v23;
  unint64_t v24;

  v8 = 0x9E3779B97F4A7C55 * *(_QWORD *)a2;
  if (*a2 == 0.0)
    v8 = 0;
  v9 = bswap64(v8);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (double *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = *(double **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (double *)operator new(0x20uLL);
  *v13 = 0.0;
  *((_QWORD *)v13 + 1) = v9;
  v15 = *a4;
  v13[2] = *a3;
  *((_QWORD *)v13 + 3) = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(double ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v13 = *v23;
LABEL_40:
    *v23 = v13;
    goto LABEL_41;
  }
  *v13 = *(double *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (double **)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20C3365AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C3365C8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C536468;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C336604(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C536468;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C336628(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C3366B8(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C336670(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5364C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3366AC()
{
  return &unk_24C5364C8;
}

void sub_20C3366B8(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  FILE *v5;
  uint64_t v6;
  __int128 v7;
  unint64_t v8;
  __int128 v9[2];
  uint64_t v10;
  __n128 v11[2];
  uint64_t v12;

  if (a3 < 0)
  {
    v12 = 0;
    memset(v11, 0, sizeof(v11));
    v7 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v7;
    v10 = *(_QWORD *)(a2 + 32);
    sub_20C336780(a1, v9, a3, (uint64_t)v11);
    sub_20C1D0E38(a4, v11);
    sub_20BF5618C((uint64_t)v11);
  }
  else
  {
    v8 = 0;
    if ((a3 & 0x4000000000000000) == 0)
    {
      v5 = *(FILE **)(a2 + 32);
      v6 = *(_QWORD *)(a2 + 8);
      v11[0].n128_u64[0] = 0;
      if (pxrInternal__aapl__pxrReserved__::ArchPRead(v5, (__sFILE *)v11, (char *)8, v6 + (a3 & 0xFFFFFFFFFFFFLL)) != -1)
        v8 = v11[0].n128_u64[0];
    }
    sub_20C1D0DE0(a4, (double *)&v8);
  }
}

void sub_20C336768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C336780(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  ssize_t v10;
  ssize_t v11;
  unint64_t v12;
  ssize_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  pxrInternal__aapl__pxrReserved__ *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 2) = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      v9 = a2[1];
      v18 = *a2;
      v19 = v9;
      v20 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)a2 + 4);
      v24 = 0;
      if (v6 > 0x6FF)
      {
        v13 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v20, (__sFILE *)&v24, (char *)8, v19 + *((_QWORD *)&v18 + 1));
        if (v13 == -1)
          return;
        v11 = v13 + v19;
        *(_QWORD *)&v19 = v13 + v19;
        v12 = v24;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (!sub_20C2CEB84((uint64_t)a2 + 8, 0, (__sFILE *)&v21))
        return;
      v7 = a2[1];
      v18 = *a2;
      v19 = v7;
      v20 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)a2 + 4);
    }
    LODWORD(v21) = 0;
    v10 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v20, (__sFILE *)&v21, (char *)4, v19 + *((_QWORD *)&v18 + 1));
    if (v10 == -1)
      return;
    v11 = v10 + v19;
    *(_QWORD *)&v19 = v10 + v19;
    v12 = v21;
    v24 = v21;
LABEL_13:
    v14 = *((_QWORD *)&v19 + 1) - v11;
    if (v11 < 0 || (v14 & 0x8000000000000000) != 0 || (v12 <= v14 ? (v15 = 8 * v12 > v14) : (v15 = 1), v15))
    {
      *(_QWORD *)&v21 = "usd/crateFile.cpp";
      *((_QWORD *)&v21 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v22 = 2053;
      *((_QWORD *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::SdfTimeCode]";
      LOBYTE(v23) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v12, 8 * v12, v14, *((_QWORD *)&v19 + 1));
    }
    else
    {
      v25 = 0;
      *(_QWORD *)&v21 = &v25;
      sub_20C0075EC((unint64_t *)a4, v12, (uint64_t **)&v21);
      sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      sub_20C336980((uint64_t)&v18, *(_QWORD *)(a4 + 32), *(_QWORD *)a4);
    }
    return;
  }
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  if (&v21 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v8 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v8;
    v21 = 0u;
    v22 = 0u;
    *(_QWORD *)(a4 + 32) = v23;
    v23 = 0;
  }
  sub_20BF5618C((uint64_t)&v21);
}

void sub_20C336964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C336980(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  _BOOL8 result;
  unint64_t v7;
  _QWORD _8[9];

  if (!a3)
    return 1;
  v5 = a1 + 8;
  _8[0] = 0;
  result = sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)_8);
  if (result)
  {
    v7 = 0;
    while (1)
    {
      *(_QWORD *)(a2 + 8 * v7) = _8[0];
      if (a3 - 1 == v7)
        break;
      _8[0] = 0;
      ++v7;
      if (!sub_20C2C1BD8(v5, 0, (__sFILE *)_8))
        return v7 >= a3;
    }
    return 1;
  }
  return result;
}

__n128 sub_20C336A2C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5364E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C336A68(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5364E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C336A8C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C336ADC((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C336A94(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C536548))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C336AD0()
{
  return &unk_24C536548;
}

void sub_20C336ADC(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C336B58(v5, (uint64_t)v9, v3, v4);
}

void sub_20C336B58(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v11[2];
  uint64_t v12;
  __n128 __dst[2];
  uint64_t v14;

  if (a3 < 0)
  {
    v14 = 0;
    memset(__dst, 0, sizeof(__dst));
    v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    v12 = *(_QWORD *)(a2 + 32);
    sub_20C336C38(a1, v11, a3, (uint64_t)__dst);
    sub_20C1D0E38(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)a2;
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 32);
    v10 = 0;
    if ((a3 & 0x4000000000000000) == 0)
    {
      *((_QWORD *)&v7 + 1) = *(_QWORD *)(*(_QWORD *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      __dst[0].n128_u64[0] = 0;
      if (sub_20C2B9BEC((uint64_t)&v7 + 8, __dst, 8uLL))
        v10 = __dst[0].n128_u64[0];
    }
    sub_20C1D0DE0(a4, (double *)&v10);
  }
}

void sub_20C336C20(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C336C38(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 __dst;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      v9 = a2[1];
      v17 = *a2;
      v18 = v9;
      v19 = *((_QWORD *)a2 + 4);
      v23 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v17 + 8, &v23, 8uLL))
          return;
        v10 = v23;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(__dst) = 0;
      if (!sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL))
        return;
      v7 = a2[1];
      v17 = *a2;
      v18 = v7;
      v19 = *((_QWORD *)a2 + 4);
    }
    LODWORD(__dst) = 0;
    if (!sub_20C2B9BEC((uint64_t)&v17 + 8, &__dst, 4uLL))
      return;
    v10 = __dst;
    v23 = __dst;
LABEL_13:
    v11 = *(_QWORD *)(*(_QWORD *)v18 + 32);
    v12 = *((_QWORD *)&v17 + 1) - *(_QWORD *)(*(_QWORD *)v18 + 24);
    v13 = v11 - v12;
    if (v12 < 0 || (v13 & 0x8000000000000000) != 0 || (v10 <= v13 ? (v14 = 8 * v10 > v13) : (v14 = 1), v14))
    {
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v21 = 2053;
      *((_QWORD *)&v21 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<"
                              "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = pxrInter"
                              "nal__aapl__pxrReserved__::SdfTimeCode]";
      LOBYTE(v22) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v10, 8 * v10, v13, v11);
    }
    else
    {
      v24 = 0;
      *(_QWORD *)&__dst = &v24;
      sub_20C0075EC((unint64_t *)a4, v10, (uint64_t **)&__dst);
      sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
      sub_20C336E34((uint64_t)&v17, *(_QWORD *)(a4 + 32), *(_QWORD *)a4);
    }
    return;
  }
  v22 = 0;
  __dst = 0u;
  v21 = 0u;
  if (&__dst != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v8 = v21;
    *(_OWORD *)a4 = __dst;
    *(_OWORD *)(a4 + 16) = v8;
    __dst = 0u;
    v21 = 0u;
    *(_QWORD *)(a4 + 32) = v22;
    v22 = 0;
  }
  sub_20BF5618C((uint64_t)&__dst);
}

void sub_20C336E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C336E34(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  uint64_t __dst;

  if (!a3)
    return 1;
  v5 = a1 + 8;
  __dst = 0;
  result = sub_20C2B9BEC(a1 + 8, &__dst, 8uLL);
  if ((_DWORD)result)
  {
    v7 = 0;
    while (1)
    {
      *(_QWORD *)(a2 + 8 * v7) = __dst;
      if (a3 - 1 == v7)
        break;
      __dst = 0;
      ++v7;
      if ((sub_20C2B9BEC(v5, &__dst, 8uLL) & 1) == 0)
        return v7 >= a3;
    }
    return 1;
  }
  return result;
}

__n128 sub_20C336EE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C536568;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C336F1C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C536568;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C336F40(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C336F98((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C336F50(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5365C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C336F8C()
{
  return &unk_24C5365C8;
}

void sub_20C336F98(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C3370B4(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C337098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C3370B4(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  __int128 v27;
  uint64_t v28;

  if (a3 < 0)
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    v22 = *a2;
    v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v23 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v24 = *((_QWORD *)a2 + 3);
    sub_20C33736C(a1, &v22, a3, (uint64_t)&v26);
    v17 = v23;
    if (v23)
    {
      v18 = (unint64_t *)&v23->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    sub_20C1D0E38(a4, &v26);
    sub_20BF5618C((uint64_t)&v26);
  }
  else
  {
    v21 = 0;
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) == 0)
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v25 = 0;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 8 > v10)
      {
        v26.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v26.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v27 = 770;
        *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v28) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 7)
        {
          v26.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v26.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v27 = 779;
          *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v28) = 0;
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v11, v20);
        }
        else if ((unint64_t)((*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, &v25, 8, v9)+ 1) >= 2)
        {
          v21 = v25;
        }
      }
    }
    if (v6)
    {
      v12 = (unint64_t *)&v6->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_20C1D0DE0(a4, (double *)&v21);
  }
}

void sub_20C337334(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_20C33736C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  ptrdiff_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  ptrdiff_t v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = *a2;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 <= 0x4FF)
    {
      LODWORD(v43) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v43, 4uLL))
        return;
      v6 = *a2;
    }
    v8 = a2[1];
    v9 = (std::__shared_weak_count *)a2[2];
    v36 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = a2[3];
      v37 = v6;
      v38 = v8;
      v39 = v9;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    else
    {
      v12 = a2[3];
      v37 = v6;
      v38 = v8;
      v39 = 0;
    }
    v40 = v12;
    v41 = 0;
    if (v7 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v40 < 0 || v40 + 8 > v18)
      {
        *(_QWORD *)&v43 = "usd/crateFile.cpp";
        *((_QWORD *)&v43 + 1) = "Read";
        *(_QWORD *)&v44 = 770;
        *((_QWORD *)&v44 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v45) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v40, v18);
        goto LABEL_35;
      }
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38) - v40;
      if (v19 < 8 || ((v19 | v40) & 0x8000000000000000) != 0)
      {
        *(_QWORD *)&v43 = "usd/crateFile.cpp";
        *((_QWORD *)&v43 + 1) = "Read";
        *(_QWORD *)&v44 = 779;
        *((_QWORD *)&v44 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v45) = 0;
        v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v34);
        goto LABEL_35;
      }
      v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v38 + 32))(v38, &v41, 8);
      if ((unint64_t)(v20 + 1) < 2)
        goto LABEL_35;
      v40 += v20;
    }
    else
    {
      LODWORD(v42) = 0;
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v40 < 0 || v40 + 4 > v15)
      {
        *(_QWORD *)&v43 = "usd/crateFile.cpp";
        *((_QWORD *)&v43 + 1) = "Read";
        *(_QWORD *)&v44 = 770;
        *((_QWORD *)&v44 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v45) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v40, v15);
        goto LABEL_35;
      }
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38) - v40;
      if (v16 < 4 || ((v16 | v40) & 0x8000000000000000) != 0)
      {
        *(_QWORD *)&v43 = "usd/crateFile.cpp";
        *((_QWORD *)&v43 + 1) = "Read";
        *(_QWORD *)&v44 = 779;
        *((_QWORD *)&v44 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v45) = 0;
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v16, v33);
        goto LABEL_35;
      }
      v17 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v38 + 32))(v38, &v42, 4);
      if ((unint64_t)(v17 + 1) < 2)
        goto LABEL_35;
      v40 += v17;
      v41 = v42;
    }
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
    v22 = v41;
    v23 = v21 - v40;
    v24 = 8 * v41;
    if (v40 < 0 || (v23 & 0x8000000000000000) != 0 || (v41 <= v23 ? (v25 = v24 > v23) : (v25 = 1), v25))
    {
      *(_QWORD *)&v43 = "usd/crateFile.cpp";
      *((_QWORD *)&v43 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v44 = 2053;
      *((_QWORD *)&v44 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::SdfTimeCode]";
      LOBYTE(v45) = 0;
      v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v24, v23, v35);
    }
    else
    {
      v42 = 0;
      *(_QWORD *)&v43 = &v42;
      sub_20C0075EC((unint64_t *)a4, v41, (uint64_t **)&v43);
      sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v26, v27);
      sub_20C33785C((uint64_t)&v37, *(_QWORD *)(a4 + 32), *(_QWORD *)a4);
    }
LABEL_35:
    v28 = v39;
    if (v39)
    {
      v29 = (unint64_t *)&v39->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (v36)
    {
      v31 = (unint64_t *)&v36->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
    return;
  }
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  if (&v43 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v14 = v44;
    *(_OWORD *)a4 = v43;
    *(_OWORD *)(a4 + 16) = v14;
    v43 = 0u;
    v44 = 0u;
    *(_QWORD *)(a4 + 32) = v45;
    v45 = 0;
  }
  sub_20BF5618C((uint64_t)&v43);
}

void sub_20C337828(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_20C33785C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  uint64_t result;
  unint64_t v7;
  uint64_t v8;

  if (!a3)
    return 1;
  v5 = (_QWORD *)(a1 + 8);
  v8 = 0;
  result = sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v8, 8uLL);
  if ((_DWORD)result)
  {
    v7 = 0;
    while (1)
    {
      *(_QWORD *)(a2 + 8 * v7) = v8;
      if (a3 - 1 == v7)
        break;
      v8 = 0;
      ++v7;
      if ((sub_20C2B72E8(v5, (uint64_t)&v8, 8uLL) & 1) == 0)
        return v7 >= a3;
    }
    return 1;
  }
  return result;
}

_QWORD *sub_20C337900(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5365E8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C3379AC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C536668;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C337A58(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5366E8;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C337B04(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C536768;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C337BB8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5365E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C337BF4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5365E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C337C18(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C337C74(*(uint64_t **)(a1 + 16), *(char ***)(a1 + 8), (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C337C2C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C536648))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C337C68()
{
  return &unk_24C536648;
}

unint64_t sub_20C337C74(uint64_t *a1, char **a2, char **a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t *v10;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v12;

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(this);
    else
      v10 = *(uint64_t **)this;
    return sub_20C337D1C((uint64_t)a1, (uint64_t)a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v12 = *(pxrInternal__aapl__pxrReserved__::SdfPathExpression **)this;
    return sub_20C337ED4(a1, a2, a3, v12);
  }
}

unint64_t sub_20C337D1C(uint64_t a1, uint64_t a2, char **a3, uint64_t *a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v22;
  uint64_t v23;
  unint64_t v24;
  char **v25[2];
  char **v26[2];
  uint64_t __src;

  v25[0] = (char **)a2;
  v25[1] = a3;
  result = 0x8039000000000000;
  v24 = 0x8039000000000000;
  if (*a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B68A0(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C337FCC(v9, a4, (uint64_t)a4, &v24);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v19 = *(unsigned __int16 *)(v15 + 248);
        v26[0] = (char **)a2;
        v26[1] = a3;
        v20 = sub_20C2CE3F0((uint64_t)v26, 8);
        if (((v19 | (v19 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *a4;
          sub_20C2B7248((uint64_t)v26, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *a4;
          sub_20C2CE770((uint64_t)v26, (char *)&__src);
        }
        v21 = *a4;
        if (*a4)
        {
          v22 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)a4[4];
          v23 = 96 * v21;
          do
          {
            sub_20C3382D4(v26, v22);
            v22 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)((char *)v22 + 96);
            v23 -= 96;
          }
          while (v23);
        }
        v13[7] = v20 & 0xFFFFFFFFFFFFLL | 0x8039000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v25, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v26[0]) = 1;
        sub_20C2CE770((uint64_t)v25, (char *)v26);
        LODWORD(v26[0]) = *a4;
        sub_20C2CE770((uint64_t)v25, (char *)v26);
        v16 = *a4;
        if (*a4)
        {
          v17 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)a4[4];
          v18 = 96 * v16;
          do
          {
            sub_20C3382D4(v25, v17);
            v17 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)((char *)v17 + 96);
            v18 -= 96;
          }
          while (v18);
        }
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t sub_20C337ED4(uint64_t *a1, char **a2, char **a3, pxrInternal__aapl__pxrReserved__::SdfPathExpression *a4)
{
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char v11;
  void *v13[3];
  uint64_t v14;
  uint64_t v15;
  void *__p;
  char v17;
  char **v18[2];
  void **v19;

  v18[0] = a2;
  v18[1] = a3;
  sub_20C00D1F0(v13, (uint64_t)a4);
  if (v17 < 0)
    operator delete(__p);
  v19 = (void **)&v15;
  sub_20C00E25C(&v19);
  v19 = (void **)&v14;
  sub_20C00D5A8(&v19);
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
  v7 = *a1;
  if (!*a1)
  {
    v8 = operator new(0x28uLL);
    *v8 = 0u;
    v8[1] = 0u;
    *((_DWORD *)v8 + 8) = 1065353216;
    sub_20C2B6944(a1, (uint64_t)v8);
    v7 = *a1;
  }
  v19 = 0;
  v9 = sub_20C3383A4(v7, a4, (uint64_t)a4, &v19);
  v10 = v9;
  if (v11)
  {
    v9[14] = (unint64_t)*a3 & 0xFFFFFFFFFFFFLL | 0x39000000000000;
    sub_20C3382D4(v18, a4);
  }
  return v10[14];
}

uint64_t *sub_20C337FCC(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  uint64_t *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v9 = *a2;
  LOBYTE(v34) = 1;
  v33 = v9;
  sub_20C00E718((unint64_t)&v33, a2[4], v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * v33);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if ((sub_20C00E774(i + 2, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (uint64_t *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = (uint64_t *)v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = (uint64_t)i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = (uint64_t)i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (uint64_t *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C338274(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_20C338290(v2, v1);
  _Unwind_Resume(a1);
}

void sub_20C338290(uint64_t a1, _QWORD *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20C00E910(__p + 2);
  if (__p)
    operator delete(__p);
}

void sub_20C3382D4(char ***a1, pxrInternal__aapl__pxrReserved__::SdfPathExpression *a2)
{
  uint64_t v4;
  void *v5[2];
  char v6;
  void *__p[2];
  char v8;
  int __src;

  v4 = (uint64_t)(*a1)[791];
  sub_20BDDC0E4(__p, "A pathExpression value type was detected which requires crate version 0.10.0.");
  sub_20C312C5C(v4, (const char *)0xA00, (char *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)v5, a2);
  __src = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a1, (unsigned __int8 *)v5);
  sub_20C2CE770((uint64_t)a1, (char *)&__src);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_20C338374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C3383A4(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[4];
  _QWORD v27[4];
  char v28;

  v9 = sub_20C00C25C((uint64_t)v27, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (_QWORD *)*v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v10)
          {
            v27[0] = v15 + 2;
            v27[1] = v15 + 5;
            v27[2] = v15 + 8;
            v27[3] = v15 + 11;
            v26[0] = a2;
            v26[1] = a2 + 3;
            v26[2] = a2 + 6;
            v26[3] = a2 + 9;
            if ((sub_20C00C814((uint64_t)&v28, (uint64_t)v27, (uint64_t)v26) & 1) != 0)
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v16 >= v11)
                v16 %= v11;
            }
            else
            {
              v16 &= v11 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_20C338658(a1, v10, a3, a4, (uint64_t)v27);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v27[0] = *v23;
    *v23 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v27[0];
    }
  }
  v15 = (_QWORD *)v27[0];
  v27[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C3386E0((uint64_t)v27, 0);
  return v15;
}

void sub_20C338640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20C3386E0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C338658@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x78uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  result = sub_20C00D1F0(v10 + 2, a3);
  v10[14] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C3386C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C3386E0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C3386E0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C00EDC4((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

__n128 sub_20C33872C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C536668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C338768(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C536668;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C33878C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C33881C(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C3387D4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5366C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C338810()
{
  return &unk_24C5366C8;
}

void sub_20C33881C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *__p[2];
  __int128 v15;
  __int128 v16[2];
  uint64_t v17;
  void **v18;

  if (a3 < 0)
  {
    *(_QWORD *)&v12 = 0;
    *(_OWORD *)v10 = 0u;
    v11 = 0u;
    v6 = *(_OWORD *)(a2 + 16);
    v16[0] = *(_OWORD *)a2;
    v16[1] = v6;
    v17 = *(_QWORD *)(a2 + 32);
    sub_20C338938(a1, v16, a3, (uint64_t)v10);
    sub_20C1D23BC(a4, (__n128 *)v10);
    sub_20C00E910(v10);
  }
  else
  {
    *(_OWORD *)__p = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    *(_OWORD *)v10 = 0u;
    v11 = 0u;
    v5 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)a2;
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) == 0)
    {
      *(_QWORD *)&v8 = a3 & 0xFFFFFFFFFFFFLL;
      sub_20C338ED0((uint64_t *)&v7, (uint64_t)v10);
    }
    sub_20C1D2304(a4, (uint64_t)v10);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[1]);
    v18 = (void **)&v13;
    sub_20C00E25C(&v18);
    v18 = (void **)&v11 + 1;
    sub_20C00D5A8(&v18);
    if (v10[0])
    {
      v10[1] = v10[0];
      operator delete(v10[0]);
    }
  }
}

void sub_20C338910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C00E910((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20C338938(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  ssize_t v10;
  ssize_t v11;
  unint64_t v12;
  ssize_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  BOOL v23;
  __int128 v24;
  __int128 v25;
  pxrInternal__aapl__pxrReserved__ *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 2) = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      v9 = a2[1];
      v24 = *a2;
      v25 = v9;
      v26 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)a2 + 4);
      v30 = 0;
      if (v6 > 0x6FF)
      {
        v13 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v26, (__sFILE *)&v30, (char *)8, v25 + *((_QWORD *)&v24 + 1));
        if (v13 == -1)
          return;
        v11 = v13 + v25;
        *(_QWORD *)&v25 = v13 + v25;
        v12 = v30;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v27) = 0;
      if (!sub_20C2CEB84((uint64_t)a2 + 8, 0, (__sFILE *)&v27))
        return;
      v7 = a2[1];
      v24 = *a2;
      v25 = v7;
      v26 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)a2 + 4);
    }
    LODWORD(v27) = 0;
    v10 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v26, (__sFILE *)&v27, (char *)4, v25 + *((_QWORD *)&v24 + 1));
    if (v10 == -1)
      return;
    v11 = v10 + v25;
    *(_QWORD *)&v25 = v10 + v25;
    v12 = v27;
    v30 = v27;
LABEL_13:
    v14 = *((_QWORD *)&v25 + 1) - v11;
    if (v11 < 0 || (v14 & 0x8000000000000000) != 0 || (v12 <= v14 ? (v15 = 96 * v12 > v14) : (v15 = 1), v15))
    {
      *(_QWORD *)&v27 = "usd/crateFile.cpp";
      *((_QWORD *)&v27 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v28 = 2053;
      *((_QWORD *)&v28 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::SdfPathExpression]";
      LOBYTE(v29) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v12, 96 * v12, v14, *((_QWORD *)&v25 + 1));
    }
    else
    {
      sub_20C338B4C((unint64_t *)a4, v12);
      sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      v18 = *(_QWORD *)a4;
      if (*(_QWORD *)a4)
      {
        v19 = *(_QWORD *)(a4 + 32);
        v20 = v18 - 1;
        do
        {
          v21 = sub_20C338ED0((uint64_t *)&v24, v19);
          v23 = v20-- != 0;
          if (!v21)
            break;
          v19 += 96;
        }
        while (v23);
      }
    }
    return;
  }
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  if (&v27 != (__int128 *)a4)
  {
    sub_20C00E910((_QWORD *)a4);
    v8 = v28;
    *(_OWORD *)a4 = v27;
    *(_OWORD *)(a4 + 16) = v8;
    v27 = 0u;
    v28 = 0u;
    *(_QWORD *)(a4 + 32) = v29;
    v29 = 0;
  }
  sub_20C00E910(&v27);
}

void sub_20C338B30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00E910((_QWORD *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_20C338B4C(unint64_t *a1, unint64_t a2)
{
  void *v2[2];
  _OWORD v3[2];
  __int128 v4;
  void *__p[2];
  __int128 v6;
  void **v7;

  *(_OWORD *)__p = 0u;
  v6 = 0u;
  v4 = 0u;
  *(_OWORD *)v2 = 0u;
  memset(v3, 0, sizeof(v3));
  v7 = v2;
  sub_20C338BE4(a1, a2, (uint64_t *)&v7);
  if (SHIBYTE(v6) < 0)
    operator delete(__p[1]);
  v7 = (void **)&v4;
  sub_20C00E25C(&v7);
  v7 = (void **)v3 + 1;
  sub_20C00D5A8(&v7);
  if (v2[0])
  {
    v2[1] = v2[0];
    operator delete(v2[0]);
  }
}

void sub_20C338BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C00BBB0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C338BE4(unint64_t *a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  void *v25;
  void **v26;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_16;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 >= a2)
        {
          v22 = 96 * v3;
          v23 = 96 * a2;
          do
          {
            v24 = (void **)&v7[(unint64_t)v23 / 8];
            if (SHIBYTE(v7[(unint64_t)v23 / 8 + 11]) < 0)
              operator delete(v24[9]);
            v26 = v24 + 6;
            sub_20C00E25C(&v26);
            v26 = v24 + 3;
            sub_20C00D5A8(&v26);
            v25 = *v24;
            if (*v24)
            {
              v7[(unint64_t)v23 / 8 + 1] = v25;
              operator delete(v25);
            }
            v23 += 96;
          }
          while (v22 != v23);
        }
        else
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v7 = sub_20C00EC98((uint64_t)a1, a2);
            sub_20C00EE28(v9, v9 + 96 * v3, (uint64_t)v7);
          }
          v10 = 0;
          v11 = &v7[12 * v3];
          v12 = *a3;
          v13 = 96 * a2 - 96 * v3;
          do
          {
            sub_20C00D1F0(&v11[v10 / 8], v12);
            v10 += 96;
          }
          while (v13 != v10);
        }
        goto LABEL_31;
      }
      v7 = (_QWORD *)a1[4];
    }
    v16 = (uint64_t)v7;
    if (v3 >= a2)
      v17 = a2;
    else
      v17 = *a1;
    v7 = sub_20C00EC98((uint64_t)a1, a2);
    sub_20C00EE28(v16, v16 + 96 * v17, (uint64_t)v7);
    if (v3 < a2)
    {
      v18 = 0;
      v19 = &v7[12 * v3];
      v20 = *a3;
      v21 = 96 * a2 - 96 * v3;
      do
      {
        sub_20C00D1F0(&v19[v18 / 8], v20);
        v18 += 96;
      }
      while (v21 != v18);
    }
    goto LABEL_31;
  }
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
  {
LABEL_16:
    sub_20C00EA08(a1);
    return;
  }
  v7 = sub_20C00EC98((uint64_t)a1, a2);
  v14 = 0;
  v15 = *a3;
  do
  {
    sub_20C00D1F0(&v7[v14], v15);
    v14 += 12;
  }
  while (12 * a2 != v14);
LABEL_31:
  if (v7 != (_QWORD *)a1[4])
  {
    sub_20C00E910(a1);
    a1[4] = (unint64_t)v7;
  }
  *a1 = a2;
}

void sub_20C338E30(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 96)
  {
    sub_20C00EDC4(v1);
    v1 += 96;
  }
  __cxa_rethrow();
}

void sub_20C338E50()
{
  __break(1u);
}

void sub_20C338EBC()
{
  __cxa_end_catch();
  JUMPOUT(0x20C338EC4);
}

uint64_t *sub_20C338ED0(uint64_t *a1, uint64_t a2)
{
  uint64_t *EmptyToken;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  const std::string *EmptyString;
  void *v14;
  void **v15;
  void *v17[2];
  uint64_t v18;
  __sFILE __p;

  memset(&__p._ub._size, 0, 24);
  LODWORD(__p._p) = -1;
  EmptyToken = (uint64_t *)sub_20C2CEB84((uint64_t)(a1 + 1), 0, &__p);
  v5 = EmptyToken;
  if ((_DWORD)EmptyToken)
  {
    v6 = *a1;
    v7 = *(_QWORD *)(*a1 + 144);
    if (LODWORD(__p._p) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v7) >> 2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
      EmptyString = (const std::string *)&qword_254988388;
    }
    else
    {
      v8 = *(unsigned int *)(v7 + 4 * LODWORD(__p._p));
      v10 = v6 + 120;
      v9 = *(_QWORD *)(v6 + 120);
      if (v8 >= (*(_QWORD *)(v10 + 8) - v9) >> 3)
      {
        EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
        v11 = &qword_2549883A8;
      }
      else
      {
        v11 = (uint64_t *)(v9 + 8 * v8);
      }
      v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12)
        EmptyString = (const std::string *)(v12 + 16);
      else
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
    }
    std::string::operator=((std::string *)&__p._ub._size, EmptyString);
    v17[0] = 0;
    v17[1] = 0;
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(&__p, &__p._ub._size, v17);
    v14 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v14;
      operator delete(v14);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)&__p._p;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&__p._flags;
    memset(&__p, 0, 24);
    sub_20C00BC18((void **)(a2 + 24));
    *(__sbuf *)(a2 + 24) = __p._bf;
    *(_QWORD *)(a2 + 40) = *(_QWORD *)&__p._lbfsize;
    memset(&__p._bf, 0, 24);
    sub_20C00BCC0((void **)(a2 + 48));
    *(_OWORD *)(a2 + 48) = *(_OWORD *)&__p._cookie;
    *(_QWORD *)(a2 + 64) = __p._read;
    memset(&__p._cookie, 0, 24);
    v15 = (void **)(a2 + 72);
    if (*(char *)(a2 + 95) < 0)
      operator delete(*v15);
    *(_OWORD *)v15 = *(_OWORD *)&__p._seek;
    *(_QWORD *)(a2 + 88) = __p._ub._base;
    HIBYTE(__p._ub._base) = 0;
    LOBYTE(__p._seek) = 0;
    __p._lb._base = (unsigned __int8 *)&__p._cookie;
    sub_20C00E25C((void ***)&__p._lb);
    __p._lb._base = (unsigned __int8 *)&__p._bf;
    sub_20C00D5A8((void ***)&__p._lb);
    if (__p._p)
    {
      *(_QWORD *)&__p._r = __p._p;
      operator delete(__p._p);
    }
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
    if ((char)__p._nbuf[0] < 0)
      operator delete(*(void **)&__p._ub._size);
  }
  return v5;
}

void sub_20C3390B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 - 57) < 0)
    operator delete(*(void **)(v15 - 80));
  _Unwind_Resume(exception_object);
}

__n128 sub_20C3390EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5366E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C339128(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5366E8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C33914C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C33919C((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C339154(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C536748))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C339190()
{
  return &unk_24C536748;
}

void sub_20C33919C(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C339218(v5, (uint64_t)v9, v3, v4);
}

void sub_20C339218(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  void *v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *__p[2];
  __int128 v15;
  __int128 v16[2];
  uint64_t v17;
  void **v18;

  if (a3 < 0)
  {
    *(_QWORD *)&v12 = 0;
    *(_OWORD *)v10 = 0u;
    v11 = 0u;
    v6 = *(_OWORD *)(a2 + 16);
    v16[0] = *(_OWORD *)a2;
    v16[1] = v6;
    v17 = *(_QWORD *)(a2 + 32);
    sub_20C339344(a1, v16, a3, (uint64_t)v10);
    sub_20C1D23BC(a4, (__n128 *)v10);
    sub_20C00E910(v10);
  }
  else
  {
    *(_OWORD *)__p = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    *(_OWORD *)v10 = 0u;
    v11 = 0u;
    v5 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)a2;
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) == 0)
    {
      *((_QWORD *)&v7 + 1) = *(_QWORD *)(*(_QWORD *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C339554((uint64_t *)&v7, (uint64_t)v10);
    }
    sub_20C1D2304(a4, (uint64_t)v10);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[1]);
    v18 = (void **)&v13;
    sub_20C00E25C(&v18);
    v18 = (void **)&v11 + 1;
    sub_20C00D5A8(&v18);
    if (v10[0])
    {
      v10[1] = v10[0];
      operator delete(v10[0]);
    }
  }
}

void sub_20C33931C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C00E910((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20C339344(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  BOOL v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 __dst;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      v9 = a2[1];
      v23 = *a2;
      v24 = v9;
      v25 = *((_QWORD *)a2 + 4);
      v29 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v23 + 8, &v29, 8uLL))
          return;
        v10 = v29;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(__dst) = 0;
      if (!sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL))
        return;
      v7 = a2[1];
      v23 = *a2;
      v24 = v7;
      v25 = *((_QWORD *)a2 + 4);
    }
    LODWORD(__dst) = 0;
    if (!sub_20C2B9BEC((uint64_t)&v23 + 8, &__dst, 4uLL))
      return;
    v10 = __dst;
    v29 = __dst;
LABEL_13:
    v11 = *(_QWORD *)(*(_QWORD *)v24 + 32);
    v12 = *((_QWORD *)&v23 + 1) - *(_QWORD *)(*(_QWORD *)v24 + 24);
    v13 = v11 - v12;
    if (v12 < 0 || (v13 & 0x8000000000000000) != 0 || (v10 <= v13 ? (v14 = 96 * v10 > v13) : (v14 = 1), v14))
    {
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v27 = 2053;
      *((_QWORD *)&v27 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<"
                              "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = pxrInter"
                              "nal__aapl__pxrReserved__::SdfPathExpression]";
      LOBYTE(v28) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v10, 96 * v10, v13, v11);
    }
    else
    {
      sub_20C338B4C((unint64_t *)a4, v10);
      sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
      v17 = *(_QWORD *)a4;
      if (*(_QWORD *)a4)
      {
        v18 = *(_QWORD *)(a4 + 32);
        v19 = v17 - 1;
        do
        {
          v20 = sub_20C339554((uint64_t *)&v23, v18);
          v22 = v19-- != 0;
          if (!v20)
            break;
          v18 += 96;
        }
        while (v22);
      }
    }
    return;
  }
  v28 = 0;
  __dst = 0u;
  v27 = 0u;
  if (&__dst != (__int128 *)a4)
  {
    sub_20C00E910((_QWORD *)a4);
    v8 = v27;
    *(_OWORD *)a4 = __dst;
    *(_OWORD *)(a4 + 16) = v8;
    __dst = 0u;
    v27 = 0u;
    *(_QWORD *)(a4 + 32) = v28;
    v28 = 0;
  }
  sub_20C00E910(&__dst);
}

void sub_20C339538(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00E910((_QWORD *)(v1 - 64));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *sub_20C339554(uint64_t *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *EmptyToken;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  const std::string *EmptyString;
  void *v14;
  void **v15;
  void *v17[2];
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  std::string v27;
  void **v28;

  memset(&v27, 0, sizeof(v27));
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B9BEC((uint64_t)(a1 + 1), __p, 4uLL);
  v5 = EmptyToken;
  if ((_DWORD)EmptyToken)
  {
    v6 = *a1;
    v7 = *(_QWORD *)(*a1 + 144);
    if (LODWORD(__p[0]) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v7) >> 2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
      EmptyString = (const std::string *)&qword_254988388;
    }
    else
    {
      v8 = *(unsigned int *)(v7 + 4 * LODWORD(__p[0]));
      v10 = v6 + 120;
      v9 = *(_QWORD *)(v6 + 120);
      if (v8 >= (*(_QWORD *)(v10 + 8) - v9) >> 3)
      {
        EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
        v11 = &qword_2549883A8;
      }
      else
      {
        v11 = (uint64_t *)(v9 + 8 * v8);
      }
      v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12)
        EmptyString = (const std::string *)(v12 + 16);
      else
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
    }
    std::string::operator=(&v27, EmptyString);
    v17[0] = 0;
    v17[1] = 0;
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(__p, &v27, v17);
    v14 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v14;
      operator delete(v14);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v20;
    __p[1] = 0;
    v20 = 0;
    __p[0] = 0;
    sub_20C00BC18((void **)(a2 + 24));
    *(_OWORD *)(a2 + 24) = v21;
    *(_QWORD *)(a2 + 40) = v22;
    v22 = 0;
    v21 = 0uLL;
    sub_20C00BCC0((void **)(a2 + 48));
    *(_OWORD *)(a2 + 48) = v23;
    *(_QWORD *)(a2 + 64) = v24;
    v24 = 0;
    v23 = 0uLL;
    v15 = (void **)(a2 + 72);
    if (*(char *)(a2 + 95) < 0)
      operator delete(*v15);
    *(_OWORD *)v15 = v25;
    *(_QWORD *)(a2 + 88) = v26;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    v28 = (void **)&v23;
    sub_20C00E25C(&v28);
    v28 = (void **)&v21;
    sub_20C00D5A8(&v28);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_20C339734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 - 57) < 0)
    operator delete(*(void **)(v15 - 80));
  _Unwind_Resume(exception_object);
}

__n128 sub_20C339770(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C536768;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3397AC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C536768;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C3397D0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C339828((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C3397E0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5367C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C33981C()
{
  return &unk_24C5367C8;
}

void sub_20C339828(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C339944(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C339928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C339944(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  void *v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *__p[2];
  __int128 v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  void **v28;

  if (a3 < 0)
  {
    *(_QWORD *)&v21 = 0;
    *(_OWORD *)v19 = 0u;
    v20 = 0u;
    v25 = *a2;
    v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v26 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v27 = *((_QWORD *)a2 + 3);
    sub_20C339B40(a1, &v25, a3, (uint64_t)v19);
    v13 = v26;
    if (v26)
    {
      v14 = (unint64_t *)&v26->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    sub_20C1D23BC(a4, (__n128 *)v19);
    sub_20C00E910(v19);
  }
  else
  {
    *(_OWORD *)__p = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    *(_OWORD *)v19 = 0u;
    v20 = 0u;
    v16 = *a2;
    v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v17 = v5;
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v18 = *((_QWORD *)a2 + 3);
    if ((a3 & 0x4000000000000000) == 0)
    {
      v18 = a3 & 0xFFFFFFFFFFFFLL;
      sub_20C33A04C(&v16, (uint64_t)v19);
      v5 = v17;
    }
    if (v5)
    {
      v8 = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    sub_20C1D2304(a4, (uint64_t)v19);
    if (SHIBYTE(v24) < 0)
      operator delete(__p[1]);
    v28 = (void **)&v22;
    sub_20C00E25C(&v28);
    v28 = (void **)&v20 + 1;
    sub_20C00D5A8(&v28);
    if (v19[0])
    {
      v19[1] = v19[0];
      operator delete(v19[0]);
    }
  }
}

void sub_20C339AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v13;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v13);
  sub_20C00BBB0((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20C339B40(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  ptrdiff_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  ptrdiff_t v45;
  unsigned int v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = *a2;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 <= 0x4FF)
    {
      LODWORD(v48) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v48, 4uLL))
        return;
      v6 = *a2;
    }
    v8 = a2[1];
    v9 = (std::__shared_weak_count *)a2[2];
    v41 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = a2[3];
      v42 = v6;
      v43 = v8;
      v44 = v9;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    else
    {
      v12 = a2[3];
      v42 = v6;
      v43 = v8;
      v44 = 0;
    }
    v45 = v12;
    v47 = 0;
    if (v7 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v45 < 0 || v45 + 8 > v18)
      {
        *(_QWORD *)&v48 = "usd/crateFile.cpp";
        *((_QWORD *)&v48 + 1) = "Read";
        *(_QWORD *)&v49 = 770;
        *((_QWORD *)&v49 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v50) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v45, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43) - v45;
        if (v19 < 8 || ((v19 | v45) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v48 = "usd/crateFile.cpp";
          *((_QWORD *)&v48 + 1) = "Read";
          *(_QWORD *)&v49 = 779;
          *((_QWORD *)&v49 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v50) = 0;
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v39);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v43 + 32))(v43, &v47, 8);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v45 += v20;
LABEL_28:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43) - v45;
            v22 = v47;
            v23 = 96 * v47;
            if (v45 < 0 || (v21 & 0x8000000000000000) != 0 || (v47 <= v21 ? (v24 = v23 > v21) : (v24 = 1), v24))
            {
              *(_QWORD *)&v48 = "usd/crateFile.cpp";
              *((_QWORD *)&v48 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v49 = 2053;
              *((_QWORD *)&v49 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::SdfPathExpression]";
              LOBYTE(v50) = 0;
              v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v40);
            }
            else
            {
              sub_20C338B4C((unint64_t *)a4, v47);
              sub_20C00EEBC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v25, v26);
              v27 = *(_QWORD *)a4;
              if (*(_QWORD *)a4)
              {
                v28 = *(_QWORD *)(a4 + 32);
                v29 = v27 - 1;
                do
                {
                  v30 = sub_20C33A04C(&v42, v28);
                  v28 += 96;
                  if (v29-- != 0)
                    v32 = v30;
                  else
                    v32 = 0;
                }
                while ((v32 & 1) != 0);
              }
            }
          }
        }
      }
    }
    else
    {
      v46 = 0;
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v45 < 0 || v45 + 4 > v15)
      {
        *(_QWORD *)&v48 = "usd/crateFile.cpp";
        *((_QWORD *)&v48 + 1) = "Read";
        *(_QWORD *)&v49 = 770;
        *((_QWORD *)&v49 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v50) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v45, v15);
      }
      else
      {
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43) - v45;
        if (v16 < 4 || ((v16 | v45) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v48 = "usd/crateFile.cpp";
          *((_QWORD *)&v48 + 1) = "Read";
          *(_QWORD *)&v49 = 779;
          *((_QWORD *)&v49 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v50) = 0;
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v16, v38);
        }
        else
        {
          v17 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v43 + 32))(v43, &v46, 4);
          if ((unint64_t)(v17 + 1) >= 2)
          {
            v45 += v17;
            v47 = v46;
            goto LABEL_28;
          }
        }
      }
    }
    v33 = v44;
    if (v44)
    {
      v34 = (unint64_t *)&v44->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v41)
    {
      v36 = (unint64_t *)&v41->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    return;
  }
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  if (&v48 != (__int128 *)a4)
  {
    sub_20C00E910((_QWORD *)a4);
    v14 = v49;
    *(_OWORD *)a4 = v48;
    *(_OWORD *)(a4 + 16) = v14;
    v48 = 0u;
    v49 = 0u;
    *(_QWORD *)(a4 + 32) = v50;
    v50 = 0;
  }
  sub_20C00E910(&v48);
}

void sub_20C33A00C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00E910((_QWORD *)(v1 - 96));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *sub_20C33A04C(_QWORD *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *EmptyToken;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  const std::string *EmptyString;
  void *v14;
  void **v15;
  void *v17[2];
  uint64_t v18;
  void *__p[2];
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  std::string v27;
  void **v28;

  memset(&v27, 0, sizeof(v27));
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B72E8(a1 + 1, (uint64_t)__p, 4uLL);
  v5 = EmptyToken;
  if ((_DWORD)EmptyToken)
  {
    v6 = *a1;
    v7 = *(_QWORD *)(*a1 + 144);
    if (LODWORD(__p[0]) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v7) >> 2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
      EmptyString = (const std::string *)&qword_254988388;
    }
    else
    {
      v8 = *(unsigned int *)(v7 + 4 * LODWORD(__p[0]));
      v10 = v6 + 120;
      v9 = *(_QWORD *)(v6 + 120);
      if (v8 >= (*(_QWORD *)(v10 + 8) - v9) >> 3)
      {
        EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
        v11 = &qword_2549883A8;
      }
      else
      {
        v11 = (uint64_t *)(v9 + 8 * v8);
      }
      v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12)
        EmptyString = (const std::string *)(v12 + 16);
      else
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
    }
    std::string::operator=(&v27, EmptyString);
    v17[0] = 0;
    v17[1] = 0;
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::SdfPathExpression(__p, &v27, v17);
    v14 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v14;
      operator delete(v14);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v20;
    __p[1] = 0;
    v20 = 0;
    __p[0] = 0;
    sub_20C00BC18((void **)(a2 + 24));
    *(_OWORD *)(a2 + 24) = v21;
    *(_QWORD *)(a2 + 40) = v22;
    v22 = 0;
    v21 = 0uLL;
    sub_20C00BCC0((void **)(a2 + 48));
    *(_OWORD *)(a2 + 48) = v23;
    *(_QWORD *)(a2 + 64) = v24;
    v24 = 0;
    v23 = 0uLL;
    v15 = (void **)(a2 + 72);
    if (*(char *)(a2 + 95) < 0)
      operator delete(*v15);
    *(_OWORD *)v15 = v25;
    *(_QWORD *)(a2 + 88) = v26;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    v28 = (void **)&v23;
    sub_20C00E25C(&v28);
    v28 = (void **)&v21;
    sub_20C00D5A8(&v28);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (SHIBYTE(v18) < 0)
      operator delete(v17[0]);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_20C33A22C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 - 57) < 0)
    operator delete(*(void **)(v15 - 80));
  _Unwind_Resume(exception_object);
}

void sub_20C33A260()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ASSIGN_PROTOTYPES_DETERMINISTICALLY))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ASSIGN_PROTOTYPES_DETERMINISTICALLY);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ASSIGN_PROTOTYPES_DETERMINISTICALLY);
  }
}

double pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::Usd_InstanceCache(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this)
{
  double result;

  *(_BYTE *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = (char *)this + 144;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = (char *)this + 168;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 1065353216;
  *((_QWORD *)this + 33) = 0;
  return result;
}

{
  double result;

  *(_BYTE *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 1065353216;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 11) = (char *)this + 96;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = (char *)this + 120;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = (char *)this + 144;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = (char *)this + 168;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_DWORD *)this + 54) = 1065353216;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_DWORD *)this + 64) = 1065353216;
  *((_QWORD *)this + 33) = 0;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::RegisterInstancePrimIndex(uint64_t a1, pxrInternal__aapl__pxrReserved__::PcpPrimIndex *this, char *a3, const pxrInternal__aapl__pxrReserved__::UsdStageLoadRules *a4)
{
  unsigned __int8 v8;
  _QWORD *v9;
  _BOOL4 v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t *Path;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  _QWORD *v17;
  _BOOL8 v18;
  void **v19;
  uint64_t v20;
  int v21;
  void **v23[2];
  uint64_t v24[3];
  const char *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int v31;
  uint64_t *v32;

  v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v8 & 1) != 0)
  {
    v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("InstanceCache::RegisterIndex", 0, a3);
    v10 = v9 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v30 = v9;
  v31 = v10;
  if ((pxrInternal__aapl__pxrReserved__::PcpPrimIndex::IsInstanceable(this) & 1) != 0
    || (v24[0] = (uint64_t)"usd/instanceCache.cpp",
        v24[1] = (uint64_t)"RegisterInstancePrimIndex",
        v24[2] = 60,
        v25 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::RegisterInstancePrimIndex(const PcpPrimIndex &, "
              "const UsdStagePopulationMask *, const UsdStageLoadRules &)",
        v26 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v24, "index.IsInstanceable()", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::Usd_InstanceKey((pxrInternal__aapl__pxrReserved__::Usd_InstanceKey *)v24, this, (const pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)a3, a4);
    v11 = sub_20C33E3FC((_QWORD *)(a1 + 8), v24);
    sub_20BEB3FEC((uint64_t)v23, a1);
    v32 = v24;
    v12 = sub_20C33E500(a1 + 184, v24, (uint64_t)&unk_20CAC184C, (uint64_t *)&v32);
    Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(this);
    v14 = v12[20];
    if (v14 >= v12[21])
    {
      v15 = sub_20BFD7890(v12 + 19, Path);
    }
    else
    {
      sub_20BFD6E54((_DWORD *)v12[20], Path);
      sub_20BFD6EA4((_DWORD *)(v14 + 4), (_DWORD *)Path + 1);
      v15 = v14 + 8;
    }
    v12[20] = v15;
    if (v11)
    {
      v16 = v23[0];
      if (v23[0])
      {
        __dmb(0xBu);
        *(_BYTE *)v16 = 0;
      }
      v17 = sub_20BFE4AF0(a1 + 112, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v11 + 19));
      v18 = (_QWORD *)(a1 + 120) != v17
         && *(_QWORD *)((char *)v17 + 36) == *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(this);
    }
    else
    {
      v18 = v15 - v12[19] == 8;
      v19 = v23[0];
      if (v23[0])
      {
        __dmb(0xBu);
        *(_BYTE *)v19 = 0;
      }
    }
    v23[0] = (void **)&v29;
    sub_20C33CEF4(v23);
    v23[0] = (void **)&v28;
    sub_20BFD6F90(v23);
    v23[0] = (void **)&v27;
    sub_20C287D04(v23);
    v23[0] = (void **)&v25;
    sub_20BE93030(v23);
    v23[0] = (void **)v24;
    sub_20C24064C(v23);
    v10 = v31;
  }
  else
  {
    v18 = 0;
  }
  v31 = v10 - 1;
  if (v10)
  {
    v20 = (uint64_t)v30;
    v21 = v10 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v20);
      v31 = v21--;
    }
    while (v21 != -2);
  }
  return v18;
}

void sub_20C33A5F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEB24F4(v1 - 96);
  _Unwind_Resume(a1);
}

void **sub_20C33A64C(void **a1)
{
  void **v3;

  v3 = a1 + 13;
  sub_20C33CEF4(&v3);
  v3 = a1 + 10;
  sub_20BFD6F90(&v3);
  v3 = a1 + 7;
  sub_20C287D04(&v3);
  v3 = a1 + 3;
  sub_20BE93030(&v3);
  v3 = a1;
  sub_20C24064C(&v3);
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::UnregisterInstancePrimIndexesUnder(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, char *a3)
{
  unsigned __int8 v5;
  unint64_t result;
  _BOOL4 v7;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23[4];
  char v24;
  uint64_t v25;
  int v26;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    result = (unint64_t)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("InstanceCache::UnregisterIndex", 0, a3);
    v7 = result != 0;
  }
  else
  {
    result = 0;
    v7 = 0;
  }
  v25 = result;
  v26 = v7;
  v9 = (unsigned int *)((char *)this + 168);
  v8 = (_QWORD *)*((_QWORD *)this + 21);
  if (v8)
  {
    v10 = (unsigned int *)((char *)this + 168);
    do
    {
      result = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28), a2);
      v11 = v8 + 1;
      if (!(_DWORD)result)
      {
        v11 = v8;
        v10 = (unsigned int *)v8;
      }
      v8 = (_QWORD *)*v11;
    }
    while (*v11);
    if (v10 != v9)
    {
      v12 = (_QWORD *)((char *)this + 48);
      v13 = (char *)this + 224;
      do
      {
        result = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 7), a2);
        if ((result & 1) == 0)
          break;
        v14 = sub_20C0AD934(v12, v10 + 9);
        if (!v14)
        {
          v23[0] = (uint64_t)"usd/instanceCache.cpp";
          v23[1] = (uint64_t)"UnregisterInstancePrimIndexesUnder";
          v23[2] = 118;
          v23[3] = (uint64_t)"void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::UnregisterInstancePrimIndexesUnder"
                            "(const SdfPath &)";
          v24 = 0;
          result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v23, "prototypeToKeyIt != _prototypeToInstanceKeyMap.end()", 0);
          if ((result & 1) == 0)
            continue;
        }
        v23[0] = (uint64_t)(v14 + 3);
        v15 = sub_20C33E500((uint64_t)v13, v14 + 3, (uint64_t)&unk_20CAC184C, v23);
        v16 = v15;
        v17 = v15[20];
        if (v17 >= v15[21])
        {
          result = sub_20BFD7890(v15 + 19, v10 + 7);
        }
        else
        {
          sub_20BFD6E54((_DWORD *)v15[20], v10 + 7);
          sub_20BFD6EA4((_DWORD *)(v17 + 4), v10 + 8);
          result = v17 + 8;
        }
        v16[20] = result;
        v18 = (unsigned int *)*((_QWORD *)v10 + 1);
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = *(unsigned int **)v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (unsigned int *)*((_QWORD *)v10 + 2);
            v20 = *(_QWORD *)v19 == (_QWORD)v10;
            v10 = v19;
          }
          while (!v20);
        }
        v10 = v19;
      }
      while (v19 != v9);
    }
    v7 = v26;
  }
  v26 = v7 - 1;
  if (v7)
  {
    v21 = v25;
    v22 = v7 - 2;
    do
    {
      result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
      v26 = v22--;
    }
    while (v22 != -2);
  }
  return result;
}

void sub_20C33A8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::ProcessChanges(_QWORD *a1, uint64_t *a2, char *a3)
{
  unsigned __int8 v5;
  _QWORD *v6;
  _BOOL4 v7;
  _QWORD *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *i;
  _QWORD *v10;
  uint64_t v11;
  int *v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _QWORD *v19;
  pxrInternal__aapl__pxrReserved__::SdfPath *v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _OWORD *v25;
  uint64_t result;
  int v27;
  uint64_t v28;
  int v29;
  _QWORD *j;
  pxrInternal__aapl__pxrReserved__::SdfPath *v31;
  pxrInternal__aapl__pxrReserved__::SdfPath *v32;
  uint64_t v33;
  const char *v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  int v39;
  _QWORD *v40;
  int v41;
  uint64_t *v42;
  pxrInternal__aapl__pxrReserved__::SdfPath *v43;
  pxrInternal__aapl__pxrReserved__::SdfPath *v44;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v45;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v46;
  void **v47;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("InstanceCache::ProcessChanges", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v40 = v6;
  v41 = v7;
  v8 = a1 + 30;
  memset(v38, 0, sizeof(v38));
  v39 = 1065353216;
  for (i = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 30);
        ;
        pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_RemoveInstances(a1, (uint64_t *)i + 2, (pxrInternal__aapl__pxrReserved__::SdfPath **)i + 19, a2, (uint64_t)v38))
  {
    i = *(pxrInternal__aapl__pxrReserved__::SdfPath **)i;
    if (!i)
      break;
    v10 = sub_20C33E3FC(a1 + 23, (uint64_t *)i + 2);
    if (v10)
    {
      v31 = 0;
      v32 = 0;
      v33 = 0;
      sub_20BFD6D38(&v31, (_DWORD *)v10[19], (_DWORD *)v10[20], (uint64_t)(v10[20] - v10[19]) >> 3);
      v11 = (uint64_t)v31;
      v12 = (int *)v32;
      v13 = 126 - 2 * __clz((v32 - v31) >> 3);
      v14 = v32 == v31;
      v36 = *(_OWORD *)((char *)i + 152);
      *((_QWORD *)i + 19) = 0;
      *((_QWORD *)i + 20) = 0;
      v37 = *((_QWORD *)i + 21);
      *((_QWORD *)i + 21) = 0;
      if (v14)
        v15 = 0;
      else
        v15 = v13;
      sub_20C028540(v11, v12, (uint64_t)&v46, v15, 1);
      v16 = 126 - 2 * __clz((uint64_t)(*((_QWORD *)&v36 + 1) - v36) >> 3);
      if (*((_QWORD *)&v36 + 1) == (_QWORD)v36)
        v17 = 0;
      else
        v17 = v16;
      sub_20C028540(v36, *((int **)&v36 + 1), (uint64_t)&v46, v17, 1);
      v45 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v36 + 1);
      v46 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)v36;
      v43 = v32;
      v44 = v31;
      v42 = (uint64_t *)((char *)i + 152);
      sub_20C33E8C4(&v46, &v45, &v44, &v43, &v42);
      v47 = (void **)&v36;
      sub_20BFD6F90(&v47);
      *(_QWORD *)&v36 = &v31;
      sub_20BFD6F90((void ***)&v36);
    }
  }
  v18 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ASSIGN_PROTOTYPES_DETERMINISTICALLY);
  if (!v18)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_ASSIGN_PROTOTYPES_DETERMINISTICALLY);
    v18 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_ASSIGN_PROTOTYPES_DETERMINISTICALLY);
  }
  if (!*v18)
  {
    for (j = a1 + 25;
          ;
          pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_CreateOrUpdatePrototypeForInstances((uint64_t **)a1, (uint64_t)(j + 2), j + 19, a2, v38))
    {
      j = (_QWORD *)*j;
      if (!j)
        break;
    }
    goto LABEL_34;
  }
  *((_QWORD *)&v36 + 1) = 0;
  v37 = 0;
  *(_QWORD *)&v36 = (char *)&v36 + 8;
  v19 = (_QWORD *)a1[25];
  if (!v19)
    goto LABEL_33;
  do
  {
    v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v19[19];
    if (v20 == (pxrInternal__aapl__pxrReserved__::SdfPath *)v19[20])
    {
      v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)"usd/instanceCache.cpp";
      v32 = (pxrInternal__aapl__pxrReserved__::SdfPath *)"ProcessChanges";
      v33 = 175;
      v34 = "void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::ProcessChanges(Usd_InstanceChanges *)";
      v35 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v31, "!primIndexes.empty()", 0))goto LABEL_22;
      v20 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v19[19];
    }
    sub_20C33EA30((uint64_t **)&v36, v20, v20, (uint64_t)(v19 + 2));
    if ((v21 & 1) == 0)
    {
      v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)"usd/instanceCache.cpp";
      v32 = (pxrInternal__aapl__pxrReserved__::SdfPath *)"ProcessChanges";
      v33 = 177;
      v34 = "void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::ProcessChanges(Usd_InstanceChanges *)";
      v35 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v31, "keysToProcess.emplace(primIndexes.front(), key).second", 0);
    }
LABEL_22:
    v19 = (_QWORD *)*v19;
  }
  while (v19);
  v22 = (_QWORD *)v36;
  if ((__int128 *)v36 != (__int128 *)((char *)&v36 + 8))
  {
    do
    {
      v31 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v22 + 5);
      v23 = sub_20C33E500((uint64_t)(a1 + 23), v22 + 5, (uint64_t)&unk_20CAC184C, (uint64_t *)&v31);
      pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_CreateOrUpdatePrototypeForInstances((uint64_t **)a1, (uint64_t)(v22 + 5), v23 + 19, a2, v38);
      v24 = (_QWORD *)v22[1];
      if (v24)
      {
        do
        {
          v25 = v24;
          v24 = (_QWORD *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (_OWORD *)v22[2];
          v14 = *(_QWORD *)v25 == (_QWORD)v22;
          v22 = v25;
        }
        while (!v14);
      }
      v22 = v25;
    }
    while (v25 != (__int128 *)((char *)&v36 + 8));
  }
LABEL_33:
  sub_20C33E9E8((uint64_t)&v36, *((_QWORD **)&v36 + 1));
LABEL_34:
  while (1)
  {
    v8 = (_QWORD *)*v8;
    if (!v8)
      break;
    pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_RemovePrototypeIfNoInstances((uint64_t)a1, v8 + 2, a2);
  }
  sub_20C33EBE4((uint64_t)(a1 + 23));
  sub_20C33EBE4((uint64_t)(a1 + 28));
  result = sub_20C33E850((uint64_t)v38);
  v27 = v41--;
  if (v27)
  {
    v28 = (uint64_t)v40;
    v29 = v27 - 2;
    do
    {
      result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v28);
      v41 = v29--;
    }
    while (v29 != -2);
  }
  return result;
}

void sub_20C33ACC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_20C33E850((uint64_t)va);
  sub_20BEB24F4((uint64_t)va1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_RemoveInstances(_QWORD *result, uint64_t *a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3, uint64_t *a4, uint64_t a5)
{
  uint64_t **v8;
  _DWORD *v9;
  _DWORD *v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  uint64_t **v13;
  int *v14;
  int *v15;
  const char *Text;
  const char *v17;
  const char *v18;
  char *v19;
  _DWORD *v20;
  _DWORD *v21;
  _DWORD *i;
  pxrInternal__aapl__pxrReserved__::SdfPath *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  int *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t **v39;
  _DWORD *v40[4];
  char v41;
  int v42;
  int v43;

  if (*a3 != a3[1])
  {
    v8 = (uint64_t **)result;
    result = sub_20C33E3FC(result + 1, a2);
    if (result)
    {
      v36 = a5;
      v37 = result;
      v38 = a4;
      v9 = result + 19;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v42);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v43);
      v39 = v8;
      v40[0] = v9;
      v10 = sub_20C33F330(v8 + 17, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (uint64_t)&unk_20CAC184C, v40);
      v12 = *a3;
      v11 = a3[1];
      if (*a3 != v11)
      {
        v13 = v8 + 14;
        do
        {
          v15 = (int *)*((_QWORD *)v10 + 5);
          v14 = (int *)*((_QWORD *)v10 + 6);
          if (v15 != v14)
          {
            while (*(_QWORD *)v15 != *(_QWORD *)v12)
            {
              v15 += 2;
              if (v15 == v14)
              {
                v15 = (int *)*((_QWORD *)v10 + 6);
                break;
              }
            }
          }
          if (v15 != v14)
          {
            if (sub_20C286E00(6))
            {
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v12);
              v17 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancing: Removed instance prim index <%s> for prototype <%s>\n", v18, v19, Text, v17);
            }
            sub_20C0D8454((uint64_t)v40, v15 + 2, *((int **)v10 + 6), v15);
            v21 = v20;
            for (i = (_DWORD *)*((_QWORD *)v10 + 6); i != v21; sub_20BFD6F64((uint64_t)(v10 + 14), i))
              i -= 2;
            *((_QWORD *)v10 + 6) = v21;
            sub_20C133060(v39 + 20, v12);
          }
          sub_20BFE4AF0((uint64_t)v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
          if (sub_20C133060(v39 + 11, v12))
          {
            if (!sub_20C133060(v13, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9))
            {
              v40[0] = "usd/instanceCache.cpp";
              v40[1] = "_RemoveInstances";
              v40[2] = (_DWORD *)362;
              v40[3] = "void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_RemoveInstances(const Usd_InstanceKey "
                       "&, const _PrimIndexPaths &, Usd_InstanceChanges *, std::unordered_map<SdfPath, SdfPath, SdfPath::Hash> *)";
              v41 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v40, "_prototypeToSourcePrimIndexMap.erase(prototypePath)", 0);
            }
            sub_20C01A074(&v42, v12);
            sub_20C01A0C8(&v43, (_DWORD *)v12 + 1);
          }
          v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 8);
        }
        while (v12 != v11);
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v42))
      {
        v23 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)v10 + 5);
        if (v23 == *((pxrInternal__aapl__pxrReserved__::SdfPath **)v10 + 6))
        {
          v40[0] = v9;
          v33 = (int *)sub_20C33FD3C(v36, v9, (uint64_t)&unk_20CAC184C, v40);
          sub_20C01A074(v33 + 6, &v42);
          sub_20C01A0C8(v33 + 7, &v43);
        }
        else
        {
          if (sub_20C286E00(6))
          {
            v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v42);
            v25 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v23);
            v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
            pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancing: Changing source <%s> -> <%s> for <%s>\n", v27, v28, v24, v25, v26);
          }
          v40[0] = v23;
          v29 = sub_20C0E4490(v39 + 11, v23, (uint64_t)&unk_20CAC184C, v40);
          sub_20C01A074((int *)v29 + 9, v9);
          sub_20C01A0C8((int *)v29 + 10, (_DWORD *)v37 + 39);
          v40[0] = v9;
          v30 = sub_20C0E4490(v39 + 14, (pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (uint64_t)&unk_20CAC184C, v40);
          sub_20C01A074((int *)v30 + 9, v23);
          sub_20C01A0C8((int *)v30 + 10, (_DWORD *)v23 + 1);
          v31 = v38[7];
          if (v31 >= v38[8])
          {
            v32 = sub_20BFD7890(v38 + 6, v9);
          }
          else
          {
            sub_20BFD6E54((_DWORD *)v38[7], v9);
            sub_20BFD6EA4((_DWORD *)(v31 + 4), (_DWORD *)v37 + 39);
            v32 = v31 + 8;
          }
          v38[7] = v32;
          v34 = v38[10];
          if (v34 >= v38[11])
          {
            v35 = sub_20BFD7890(v38 + 9, v23);
          }
          else
          {
            sub_20BFD6E54((_DWORD *)v38[10], v23);
            sub_20BFD6EA4((_DWORD *)(v34 + 4), (_DWORD *)v23 + 1);
            v35 = v34 + 8;
          }
          v38[10] = v35;
        }
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v43);
      return sub_20BFD265C(&v42);
    }
  }
  return result;
}

void sub_20C33B108(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFD1A18((_DWORD *)(v1 - 92));
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_CreateOrUpdatePrototypeForInstances(uint64_t **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5)
{
  int *v10;
  char v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  uint64_t *String;
  uint64_t *v28;
  uint64_t *v29;
  int v30;
  uint64_t *v31;
  const char *v32;
  char *v33;
  uint64_t *v34;
  void **v35;
  pxrInternal__aapl__pxrReserved__::SdfPath *v36;
  int *v37;
  pxrInternal__aapl__pxrReserved__::SdfPath *v38;
  pxrInternal__aapl__pxrReserved__::SdfPath *v39;
  _DWORD *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  char *v44;
  uint64_t *v45;
  _DWORD *v46;
  int *v47;
  unint64_t v48;
  uint64_t v49;
  int *result;
  int *v51;
  int *v52;
  char *v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  const char *Text;
  const char *v61;
  const char *v62;
  const char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int v67;
  _DWORD v68[5];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  void *__p[2];
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  void **v83[2];

  v66 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v66);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v66 + 1);
  v65 = a2;
  sub_20C33CFA4((uint64_t)&v67, a2, &v66);
  sub_20C33D778((uint64_t)__p, (uint64_t)&v67);
  v10 = (int *)sub_20C33EC38((uint64_t)(a1 + 1), (uint64_t *)__p, (uint64_t)__p);
  v12 = v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v82);
  sub_20BFD265C(&v81);
  v83[0] = (void **)&v80;
  sub_20C33CEF4(v83);
  v83[0] = (void **)&v79;
  sub_20BFD6F90(v83);
  v83[0] = (void **)&v78;
  sub_20C287D04(v83);
  v83[0] = (void **)&v77;
  sub_20BE93030(v83);
  v83[0] = __p;
  sub_20C24064C(v83);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v74);
  sub_20BFD265C(&v73);
  v83[0] = (void **)&v72;
  sub_20C33CEF4(v83);
  v83[0] = (void **)&v71;
  sub_20BFD6F90(v83);
  v83[0] = (void **)&v70;
  sub_20C287D04(v83);
  v83[0] = (void **)&v69;
  sub_20BE93030(v83);
  v83[0] = (void **)&v67;
  sub_20C24064C(v83);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v66 + 1);
  sub_20BFD265C(&v66);
  if (v12)
  {
    pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_GetNextPrototypePath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1, &v67);
    sub_20C01A074(v10 + 38, &v67);
    sub_20C01A0C8(v10 + 39, v68);
    __p[0] = &v67;
    v13 = sub_20C33EFAC((uint64_t)(a1 + 6), &v67, (uint64_t)&unk_20CAC184C, (_DWORD **)__p);
    sub_20C33BBE8((uint64_t)(v13 + 3), a2);
    v14 = *a3;
    sub_20BFD6E54(v83, (_DWORD *)*a3);
    sub_20BFD6EA4((_DWORD *)v83 + 1, (_DWORD *)(v14 + 4));
    __p[0] = v83;
    v15 = sub_20C0E4490(a1 + 11, (pxrInternal__aapl__pxrReserved__::SdfPath *)v83, (uint64_t)&unk_20CAC184C, (_DWORD **)__p);
    sub_20C01A074((int *)v15 + 9, &v67);
    sub_20C01A0C8((int *)v15 + 10, v68);
    __p[0] = &v67;
    v16 = sub_20C0E4490(a1 + 14, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v67, (uint64_t)&unk_20CAC184C, (_DWORD **)__p);
    sub_20C01A074((int *)v16 + 9, v83);
    sub_20C01A0C8((int *)v16 + 10, (_DWORD *)v83 + 1);
    v17 = a4[1];
    if (v17 >= a4[2])
    {
      v18 = sub_20BFD7890(a4, &v67);
    }
    else
    {
      sub_20BFD6E54((_DWORD *)a4[1], &v67);
      sub_20BFD6EA4((_DWORD *)(v17 + 4), v68);
      v18 = v17 + 8;
    }
    a4[1] = v18;
    v24 = a4[4];
    if (v24 >= a4[5])
    {
      v25 = sub_20BFD7890(a4 + 3, v83);
    }
    else
    {
      sub_20BFD6E54((_DWORD *)a4[4], v83);
      sub_20BFD6EA4((_DWORD *)(v24 + 4), (_DWORD *)v83 + 1);
      v25 = v24 + 8;
    }
    a4[4] = v25;
    if (sub_20C286E00(6))
    {
      v26 = v10;
      String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
      v28 = *((char *)String + 23) >= 0 ? String : (uint64_t *)*String;
      v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)v83);
      v30 = *((char *)v29 + 23);
      v31 = (uint64_t *)*v29;
      sub_20C33BCCC(v65);
      v34 = v30 >= 0 ? v29 : v31;
      v35 = v76 >= 0 ? __p : (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancing: Creating prototype <%s> with source prim index <%s> for instancing key: %s\n", v32, v33, v28, v34, v35);
      v10 = v26;
      if (v76 < 0)
        operator delete(__p[0]);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v83 + 1);
    sub_20BFD265C(v83);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v68);
  }
  else
  {
    if (sub_20C222ED4((uint64_t)(a1 + 14), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 38)))
      goto LABEL_25;
    v19 = *a3;
    sub_20BFD6E54(&v67, (_DWORD *)*a3);
    sub_20BFD6EA4(v68, (_DWORD *)(v19 + 4));
    __p[0] = &v67;
    v20 = sub_20C0E4490(a1 + 11, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v67, (uint64_t)&unk_20CAC184C, (_DWORD **)__p);
    sub_20C01A074((int *)v20 + 9, v10 + 38);
    sub_20C01A0C8((int *)v20 + 10, v10 + 39);
    __p[0] = v10 + 38;
    v21 = sub_20C0E4490(a1 + 14, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 38), (uint64_t)&unk_20CAC184C, (_DWORD **)__p);
    sub_20C01A074((int *)v21 + 9, &v67);
    sub_20C01A0C8((int *)v21 + 10, v68);
    v22 = a4[7];
    if (v22 >= a4[8])
    {
      v23 = sub_20BFD7890(a4 + 6, v10 + 38);
    }
    else
    {
      sub_20BFD6E54((_DWORD *)a4[7], v10 + 38);
      sub_20BFD6EA4((_DWORD *)(v22 + 4), v10 + 39);
      v23 = v22 + 8;
    }
    a4[7] = v23;
    v57 = a4[10];
    if (v57 >= a4[11])
    {
      v58 = sub_20BFD7890(a4 + 9, &v67);
    }
    else
    {
      sub_20BFD6E54((_DWORD *)a4[10], &v67);
      sub_20BFD6EA4((_DWORD *)(v57 + 4), v68);
      v58 = v57 + 8;
    }
    a4[10] = v58;
    v59 = sub_20C0E70D0(a5, (unsigned int *)v10 + 38);
    if (sub_20C286E00(6))
    {
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v59 + 3));
      v61 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v67);
      v62 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 38));
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancing: Changing source <%s> -> <%s> for <%s>\n", v63, v64, Text, v61, v62);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v68);
  }
  sub_20BFD265C(&v67);
LABEL_25:
  v36 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v10 + 38);
  v37 = v10;
  v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*a3;
  v39 = (pxrInternal__aapl__pxrReserved__::SdfPath *)a3[1];
  if ((pxrInternal__aapl__pxrReserved__::SdfPath *)*a3 != v39)
  {
    v40 = v37 + 39;
    do
    {
      if (sub_20C286E00(6))
      {
        v41 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v38);
        v42 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v36);
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancing: Added instance prim index <%s> for prototype <%s>\n", v43, v44, v41, v42);
      }
      __p[0] = v38;
      v45 = sub_20C0E4490(a1 + 20, v38, (uint64_t)&unk_20CAC184C, (_DWORD **)__p);
      sub_20C01A074((int *)v45 + 9, v36);
      sub_20C01A0C8((int *)v45 + 10, v40);
      v38 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v38 + 8);
    }
    while (v38 != v39);
  }
  __p[0] = v36;
  v46 = sub_20C33F330(a1 + 17, v36, (uint64_t)&unk_20CAC184C, (_DWORD **)__p);
  v47 = (int *)a3[1];
  v48 = 126 - 2 * __clz(((uint64_t)v47 - *a3) >> 3);
  if (v47 == (int *)*a3)
    v49 = 0;
  else
    v49 = v48;
  result = (int *)sub_20C028540(*a3, v47, (uint64_t)__p, v49, 1);
  v51 = (int *)*((_QWORD *)v46 + 5);
  v52 = (int *)*((_QWORD *)v46 + 6);
  if (v51 == v52)
  {
    *((_QWORD *)v46 + 5) = *a3;
    *a3 = (uint64_t)v51;
    v55 = *((_QWORD *)v46 + 6);
    *((_QWORD *)v46 + 6) = a3[1];
    a3[1] = v55;
    v56 = *((_QWORD *)v46 + 7);
    *((_QWORD *)v46 + 7) = a3[2];
    a3[2] = v56;
  }
  else
  {
    v53 = (char *)((char *)v52 - (char *)v51);
    sub_20C031044((uint64_t *)v46 + 5, v52, (_DWORD *)*a3, (_DWORD *)a3[1], (a3[1] - *a3) >> 3);
    sub_20C33F438(*((_QWORD *)v46 + 5), (int *)&v53[*((_QWORD *)v46 + 5)], *((int **)v46 + 6), (uint64_t)__p);
    v54 = sub_20C29D4D8(*((int **)v46 + 5), *((int **)v46 + 6));
    return sub_20C11D784((uint64_t)(v46 + 10), v54, *((int **)v46 + 6));
  }
  return result;
}

void sub_20C33B7EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, int a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_20BFD1A18(&a16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_RemovePrototypeIfNoInstances(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  uint64_t *v9;
  const char *Text;
  const char *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  char v16;

  v5 = (_QWORD *)(a1 + 8);
  v6 = sub_20C33E3FC((_QWORD *)(a1 + 8), a2);
  if (v6)
  {
    v7 = v6;
    v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 19);
    v9 = sub_20C33FFFC(a1 + 136, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 19));
    if ((uint64_t *)(a1 + 144) != v9
      || (v15[0] = "usd/instanceCache.cpp",
          v15[1] = "_RemovePrototypeIfNoInstances",
          v15[2] = 414,
          v15[3] = "void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_RemovePrototypeIfNoInstances(const Usd_Ins"
                   "tanceKey &, Usd_InstanceChanges *)",
          v16 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "prototypeToPrimIndexesIt != _prototypeToPrimIndexesMap.end()", 0) & 1) != 0))
    {
      if (v9[5] == v9[6])
      {
        if (sub_20C286E00(6))
        {
          Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v8);
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"Instancing: Removing prototype <%s>\n", v11, v12, Text);
        }
        v13 = a3[13];
        if (v13 >= a3[14])
        {
          v14 = sub_20BFD7890(a3 + 12, v8);
        }
        else
        {
          sub_20BFD6E54((_DWORD *)a3[13], v8);
          sub_20BFD6EA4((_DWORD *)(v13 + 4), (_DWORD *)v7 + 39);
          v14 = v13 + 8;
        }
        a3[13] = v14;
        sub_20C340074((_QWORD *)(a1 + 48), (unsigned int *)v8);
        sub_20BEB587C(v5, v7, (uint64_t)v15);
        sub_20C33EF68((uint64_t)v15, 0);
        sub_20BE10B80((uint64_t **)(a1 + 136), v9);
        sub_20C33E3B4((uint64_t)(v9 + 4));
        operator delete(v9);
      }
    }
  }
}

uint64_t sub_20C33B9F0(uint64_t a1)
{
  void **v3;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 140));
  sub_20BFD265C((_DWORD *)(a1 + 136));
  v3 = (void **)(a1 + 104);
  sub_20C33CEF4(&v3);
  v3 = (void **)(a1 + 80);
  sub_20BFD6F90(&v3);
  v3 = (void **)(a1 + 56);
  sub_20C287D04(&v3);
  v3 = (void **)(a1 + 24);
  sub_20BE93030(&v3);
  v3 = (void **)a1;
  sub_20C24064C(&v3);
  return a1;
}

uint64_t sub_20C33BA78(uint64_t a1)
{
  void **v3;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 140));
  sub_20BFD265C((_DWORD *)(a1 + 136));
  v3 = (void **)(a1 + 104);
  sub_20C33CEF4(&v3);
  v3 = (void **)(a1 + 80);
  sub_20BFD6F90(&v3);
  v3 = (void **)(a1 + 56);
  sub_20C287D04(&v3);
  v3 = (void **)(a1 + 24);
  sub_20BE93030(&v3);
  v3 = (void **)a1;
  sub_20C24064C(&v3);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_GetNextPrototypePath(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, _DWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  void *__p;
  char v11;
  uint64_t v12;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  v5 = *((_QWORD *)a1 + 33) + 1;
  *((_QWORD *)a1 + 33) = v5;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"__Prototype_%zu", v6, v7, v5);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v12);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(v4, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12, a2);
  if ((v12 & 7) != 0)
  {
    v8 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  if (v11 < 0)
    operator delete(__p);
}

void sub_20C33BBA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  unsigned int *v18;
  unsigned int v19;

  if ((a17 & 7) != 0)
  {
    v18 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C33BBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if (a1 == a2)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  }
  else
  {
    sub_20C33D858(a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
    sub_20C33DAEC(a1 + 24, *(std::string **)(a2 + 24), *(__int128 **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 4));
    v4 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    sub_20C33DCD8(a1 + 56, v4, *(_QWORD *)(a2 + 64), 0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(a2 + 64) - v4) >> 4));
    sub_20C0E29B0(a1 + 80, *(_DWORD **)(a2 + 80), *(_DWORD **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    sub_20C33E154(a1 + 104, *(_DWORD **)(a2 + 104), *(_DWORD **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2));
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

uint64_t sub_20C33BCCC(uint64_t a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  pxrInternal__aapl__pxrReserved__::operator<<(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C33BD80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _BOOL8 v3;
  const char *Text;
  _BOOL8 v5;
  uint64_t *Name;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  _QWORD v12[4];
  char v13;

  v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(this);
  if (!v3
    || *(_QWORD *)this == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v3))
  {
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(this))
  {
    v12[0] = "usd/instanceCache.cpp";
    v12[1] = "IsPathInPrototype";
    v12[2] = 447;
    v12[3] = "static BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype(const SdfPath &)";
    v13 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"IsPathInPrototype() requires an absolute path but was given <%s>", Text);
    return 0;
  }
  sub_20BFD6E54(v12, this);
  sub_20BFD6EA4((_DWORD *)v12 + 1, (_DWORD *)this + 1);
  while ((pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v12) & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v12, &v10);
    sub_20BFD3EBC((int *)v12, &v10);
    sub_20BFD3F10((int *)v12 + 1, &v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_20BFD265C(&v10);
  }
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)v12);
  v8 = *((unsigned __int8 *)Name + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = Name[1];
  if (v8 >= 0xC)
  {
    if (v9 < 0)
      Name = (uint64_t *)*Name;
    v5 = strncmp((const char *)Name, "__Prototype_", 0xCuLL) == 0;
  }
  else
  {
    v5 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v12 + 1);
  sub_20BFD265C(v12);
  return v5;
}

void sub_20C33BF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPrototypePath(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result;
  uint64_t *Name;
  unint64_t v5;
  int v6;

  result = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath(this);
  if ((_DWORD)result)
  {
    Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
    v5 = *((unsigned __int8 *)Name + 23);
    v6 = (char)v5;
    if ((v5 & 0x80u) != 0)
      v5 = Name[1];
    if (v5 >= 0xC)
    {
      if (v6 < 0)
        Name = (uint64_t *)*Name;
      return strncmp((const char *)Name, "__Prototype_", 0xCuLL) == 0;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetInstancePrimIndexesForPrototype@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *result;

  result = sub_20C33FFFC((uint64_t)this + 136, a2);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if ((_QWORD *)((char *)this + 144) != result)
    return sub_20BFD6D38(a3, (_DWORD *)result[5], (_DWORD *)result[6], (uint64_t)(result[6] - result[5]) >> 3);
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetAllPrototypes@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, uint64_t *a2@<X8>)
{
  _DWORD *result;
  uint64_t *v5;
  _DWORD *v6;
  _DWORD *v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = sub_20C0B8D74(a2, *((_QWORD *)this + 4));
  v5 = (uint64_t *)*((_QWORD *)this + 3);
  if (v5)
  {
    v6 = (_DWORD *)a2[1];
    do
    {
      v7 = v5 + 19;
      if ((unint64_t)v6 >= a2[2])
      {
        result = (_DWORD *)sub_20BFD7890(a2, v7);
        v6 = result;
      }
      else
      {
        sub_20BFD6E54(v6, v7);
        result = sub_20BFD6EA4(v6 + 1, (_DWORD *)v5 + 39);
        v6 += 2;
      }
      a2[1] = (uint64_t)v6;
      v5 = (uint64_t *)*v5;
    }
    while (v5);
  }
  return result;
}

void sub_20C33C090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetNumPrototypes(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this)
{
  return *((_QWORD *)this + 9);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPrototypeUsingPrimIndexPath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;

  v5 = sub_20BFE4AF0((uint64_t)this + 88, a2);
  if ((_DWORD *)((char *)this + 96) == v5)
  {
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  else
  {
    v6 = v5;
    sub_20BFD6E54(a3, v5 + 9);
    return sub_20BFD6EA4(a3 + 1, v6 + 10);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::PrototypeUsesPrimIndexPath(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_PrototypeUsesPrimIndexPath(this, a2, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_PrototypeUsesPrimIndexPath(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t v14[4];
  char v15;
  int v16;
  int v17;
  uint64_t v18;

  sub_20BFD6E54(&v18, a2);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD6EA4((_DWORD *)&v18 + 1, (_DWORD *)a2 + 1);
  v13 = 0;
  while (1)
  {
    v7 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
    if (v18 == *v7)
      break;
    sub_20BFD6E54(&v16, &v18);
    sub_20BFD6EA4(&v17, (_DWORD *)&v18 + 1);
    v8 = sub_20C14177C(a1 + 20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, 0, (uint64_t)v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_20BFD265C(&v16);
    if (a1 + 21 == v8)
      break;
    v9 = sub_20BFE4AF0((uint64_t)(a1 + 14), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 36));
    if (a1 + 15 == v9)
    {
      v14[0] = (uint64_t)"usd/instanceCache.cpp";
      v14[1] = (uint64_t)"_PrototypeUsesPrimIndexPath";
      v14[2] = 618;
      v14[3] = (uint64_t)"BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_PrototypeUsesPrimIndexPath(const SdfP"
                        "ath &, vector<SdfPath> *) const";
      v15 = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v14, "prototypeToSourceIt != _prototypeToSourcePrimIndexMap.end()", 0) & 1) == 0)break;
    }
    if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 36)))
    {
      if (!a3)
      {
        v13 = 1;
        break;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v14, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 36), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 28), 1);
      v10 = a3[1];
      if (v10 >= a3[2])
      {
        v11 = sub_20C12C530(a3, v14);
      }
      else
      {
        sub_20BFD38A4((_DWORD *)a3[1], v14);
        sub_20BFD38DC((_DWORD *)(v10 + 4), (_DWORD *)v14 + 1);
        v11 = v10 + 8;
      }
      a3[1] = v11;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v14 + 1);
      sub_20BFD265C(v14);
      v13 = 1;
    }
    if (*(_QWORD *)((char *)v8 + 28) != v18)
      break;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28), v14);
    sub_20BFD3EBC((int *)&v18, (int *)v14);
    sub_20BFD3F10((int *)&v18 + 1, (int *)v14 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v14 + 1);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD265C(v14);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
  sub_20BFD265C(&v18);
  return v13 & 1;
}

void sub_20C33C37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPrimsInPrototypesUsingPrimIndexPath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::_PrototypeUsesPrimIndexPath(this, a2, a3);
}

void sub_20C33C404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPrototypesUsingPrimIndexPathOrDescendents@<X0>(uint64_t this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  const char *Text;
  const char *v15;
  char *v16;
  char *v17;
  _QWORD v18[4];
  char v19;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = (_QWORD *)(this + 96);
  v3 = *(_QWORD **)(this + 96);
  if (v3)
  {
    v6 = this;
    v8 = (_QWORD *)(this + 96);
    do
    {
      this = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v3 + 28), a2);
      v9 = v3 + 1;
      if (!(_DWORD)this)
      {
        v9 = v3;
        v8 = v3;
      }
      v3 = (_QWORD *)*v9;
    }
    while (*v9);
    if (v8 != v4)
    {
      do
      {
        this = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 28), a2);
        if ((this & 1) == 0)
          break;
        v10 = sub_20BFE4AF0(v6 + 112, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 36));
        if ((_QWORD *)(v6 + 120) != v10
          || (v18[0] = "usd/instanceCache.cpp",
              v18[1] = "GetPrototypesUsingPrimIndexPathOrDescendents",
              v18[2] = 563,
              v18[3] = "vector<std::pair<SdfPath, SdfPath>> pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetProto"
                       "typesUsingPrimIndexPathOrDescendents(const SdfPath &) const",
              v19 = 0,
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 36)),
              v17 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"prototypePath <%s> missing in prototypesToSourceIndexPath map", v15, v16, Text), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v18, "prototypeToSourceIt != _prototypeToSourcePrimIndexMap.end()", v17) & 1) != 0))
        {
          this = sub_20C22B148(a3, (_DWORD *)v8 + 9, (_DWORD *)v10 + 9);
        }
        else
        {
          v18[0] = 0;
          sub_20C019BD0(v18);
          sub_20C33C5F0(a3, (_DWORD *)v8 + 9, v18);
          this = (uint64_t)sub_20BFD1A18(v18);
        }
        v11 = (_QWORD *)v8[1];
        if (v11)
        {
          do
          {
            v12 = v11;
            v11 = (_QWORD *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            v12 = (_QWORD *)v8[2];
            v13 = *v12 == (_QWORD)v8;
            v8 = v12;
          }
          while (!v13);
        }
        v8 = v12;
      }
      while (v12 != v4);
    }
  }
  return this;
}

void sub_20C33C5B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((void ***)va);
  sub_20C22D004((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C33C5F0(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v17;
  char *v18;
  _DWORD *v19;
  char *v20;
  uint64_t v21;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *a1) >> 4;
    if ((unint64_t)(v11 + 1) >> 60)
      sub_20BDDF694();
    v12 = v7 - *a1;
    v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v21 = v6;
    if (v14)
      v15 = (char *)sub_20BDEA2F0(v6, v14);
    else
      v15 = 0;
    v17 = v15;
    v18 = &v15[16 * v11];
    v20 = &v15[16 * v14];
    sub_20C3400C0(v18, a2, a3);
    v19 = v18 + 16;
    sub_20C22D4AC(a1, &v17);
    v10 = a1[1];
    sub_20C22D648(&v17);
  }
  else
  {
    sub_20C3400C0(*(_DWORD **)(v6 - 8), a2, a3);
    v10 = v9 + 16;
    a1[1] = v9 + 16;
  }
  a1[1] = v10;
  return v10 - 16;
}

void sub_20C33C6EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C22D648((void **)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathDescendantToAnInstance(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  return (_QWORD *)((char *)this + 168) != sub_20C33C730((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)((char *)this + 160), a2);
}

_QWORD *sub_20C33C730(pxrInternal__aapl__pxrReserved__::SdfPath *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  char v5;

  if (*(_QWORD *)a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1))
    return (_QWORD *)((char *)a1 + 8);
  else
    return sub_20C14177C(a1, a2, 1, (uint64_t)&v5);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetMostAncestralInstancePath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _QWORD *v7;
  _DWORD *v8;
  int v10;
  int v11;
  uint64_t v12;

  sub_20BFD6E54(&v12, a2);
  sub_20BFD6EA4((_DWORD *)&v12 + 1, (_DWORD *)a2 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  v7 = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  while (v12 != *v7)
  {
    v8 = sub_20C33C730((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)((char *)this + 160), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12);
    if ((_DWORD *)((char *)this + 168) == v8)
      break;
    sub_20C01A074(a3, v8 + 7);
    sub_20C01A0C8(a3 + 1, v8 + 8);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v8 + 7), &v10);
    sub_20BFD3EBC((int *)&v12, &v10);
    sub_20BFD3F10((int *)&v12 + 1, &v11);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
    sub_20BFD265C(&v10);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
  return sub_20BFD265C(&v12);
}

void sub_20C33C8C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _DWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18(v2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPrototypeForInstanceablePrimIndexPath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;

  v5 = sub_20BFE4AF0((uint64_t)this + 160, a2);
  if ((_DWORD *)((char *)this + 168) == v5)
  {
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
  else
  {
    v6 = v5;
    sub_20BFD6E54(a3, v5 + 9);
    return sub_20BFD6EA4(a3 + 1, v6 + 10);
  }
}

_DWORD *pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPathInPrototypeForInstancePath@<X0>(pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, int *a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  int *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  _QWORD *v15;
  _QWORD *v16;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v17;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v18;
  uint64_t v19;
  uint64_t v21[4];
  char v22;
  int v23;
  int v24;
  int v25;
  int v26;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v25);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v26);
  if (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype(a2, v6))
  {
    v7 = a3;
    v8 = (_QWORD *)((char *)this + 120);
    v9 = (_QWORD *)*((_QWORD *)this + 15);
    if (v9)
    {
      do
      {
        v10 = sub_20BFD758C(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9 + 28));
        v11 = v9 + 1;
        if (v10)
        {
          v11 = v9;
          v8 = v9;
        }
        v9 = (_QWORD *)*v11;
      }
      while (*v11);
    }
    a3 = v7;
    if (v8 != *((_QWORD **)this + 14))
    {
      v12 = (_QWORD *)*v8;
      if (*v8)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)v12[1];
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v8[2];
          v14 = *v13 == (_QWORD)v8;
          v8 = v13;
        }
        while (v14);
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v21, a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v13 + 36), 1);
      if (v21[0] != *(_QWORD *)a2)
      {
        sub_20C01A074(&v25, v21);
        sub_20C01A0C8(&v26, (_DWORD *)v21 + 1);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v21 + 1);
      sub_20BFD265C(v21);
    }
  }
  else
  {
    sub_20C01A074(&v25, a2);
    sub_20C01A0C8(&v26, (_DWORD *)a2 + 1);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v25))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
    sub_20BFD6E54(&v23, &v25);
    sub_20BFD6EA4(&v24, &v26);
    while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v23))
    {
      v15 = sub_20C33C730((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)((char *)this + 160), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
      if ((_QWORD *)((char *)this + 168) == v15)
        break;
      v16 = sub_20BFE4AF0((uint64_t)this + 112, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 + 36));
      if ((_QWORD *)((char *)this + 120) == v16)
      {
        v21[0] = (uint64_t)"usd/instanceCache.cpp";
        v21[1] = (uint64_t)"GetPathInPrototypeForInstancePath";
        v21[2] = 783;
        v21[3] = (uint64_t)"SdfPath pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::GetPathInPrototypeForInstancePath"
                          "(const SdfPath &) const";
        v22 = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v21, "prototypeToSourceIt != _prototypeToSourcePrimIndexMap.end()", 0) & 1) == 0)break;
      }
      v17 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 + 28);
      v19 = *(_QWORD *)((char *)v16 + 36);
      v18 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v16 + 36);
      if (*(_QWORD *)((char *)v15 + 28) == v19)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v21, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v15 + 36), 1);
        sub_20BFD3EBC(a3, (int *)v21);
        sub_20BFD3F10(a3 + 1, (int *)v21 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v21 + 1);
        sub_20BFD265C(v21);
        break;
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(v21, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, v17, v18, 1);
      sub_20BFD3EBC(&v23, (int *)v21);
      sub_20BFD3F10(&v24, (int *)v21 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v21 + 1);
      sub_20BFD265C(v21);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
    sub_20BFD265C(&v23);
  }
  else
  {
    sub_20BFD38A4(a3, &v25);
    sub_20BFD38DC(a3 + 1, &v26);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v26);
  return sub_20BFD265C(&v25);
}

void sub_20C33CC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  sub_20BFD1A18(a4);
  sub_20BFD1A18((int *)va1);
  _Unwind_Resume(a1);
}

void sub_20C33CCE8(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      sub_20C33CD24(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C33CD24(void **a1)
{
  void **v2;

  v2 = a1 + 17;
  sub_20BFD6F90(&v2);
  v2 = a1 + 13;
  sub_20C33CEF4(&v2);
  v2 = a1 + 10;
  sub_20BFD6F90(&v2);
  v2 = a1 + 7;
  sub_20C287D04(&v2);
  v2 = a1 + 3;
  sub_20BE93030(&v2);
  v2 = a1;
  sub_20C24064C(&v2);
}

_DWORD *sub_20C33CDA4(uint64_t a1)
{
  void **v2;
  void **v4;

  v2 = (void **)(a1 + 8);
  v4 = (void **)(a1 + 112);
  sub_20C33CEF4(&v4);
  v4 = (void **)(a1 + 88);
  sub_20BFD6F90(&v4);
  v4 = (void **)(a1 + 64);
  sub_20C287D04(&v4);
  v4 = (void **)(a1 + 32);
  sub_20BE93030(&v4);
  v4 = v2;
  sub_20C24064C(&v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

void sub_20C33CE2C(uint64_t a1)
{
  void **v2;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 140));
  sub_20BFD265C((_DWORD *)(a1 + 136));
  v2 = (void **)(a1 + 104);
  sub_20C33CEF4(&v2);
  v2 = (void **)(a1 + 80);
  sub_20BFD6F90(&v2);
  v2 = (void **)(a1 + 56);
  sub_20C287D04(&v2);
  v2 = (void **)(a1 + 24);
  sub_20BE93030(&v2);
  v2 = (void **)a1;
  sub_20C24064C(&v2);
}

void **sub_20C33CEB0(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  sub_20BE93030(&v3);
  v3 = a1;
  sub_20C24064C(&v3);
  return a1;
}

void sub_20C33CEF4(void ***a1)
{
  void **v1;
  _DWORD *v2;
  _DWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_20C33CF78((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_20C33CF78(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);
  return sub_20BFD265C(a2);
}

uint64_t sub_20C33CFA4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;

  v5 = sub_20C33CFE4(a1, a2);
  sub_20BFD38A4((_DWORD *)(v5 + 136), a3);
  sub_20BFD38DC((_DWORD *)(a1 + 140), a3 + 1);
  return a1;
}

uint64_t sub_20C33CFE4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20C33D144((_QWORD *)a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  sub_20C33D358((char *)(a1 + 24), *(__int128 **)(a2 + 24), *(__int128 **)(a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 4));
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  sub_20C33D47C((_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56), *(_QWORD *)(a2 + 64), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BFD6D38((_QWORD *)(a1 + 80), *(_DWORD **)(a2 + 80), *(_DWORD **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  sub_20C33D5D0((_QWORD *)(a1 + 104), *(_DWORD **)(a2 + 104), *(_DWORD **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2));
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

void sub_20C33D0F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  va_list va;

  va_start(va, a2);
  sub_20BFD6F90((void ***)va);
  sub_20C287D04((void ***)va);
  sub_20C33CEB0(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C33D144(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20C33D1C8(result, a4);
    result = (_QWORD *)sub_20C33D21C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C33D1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C24064C(&a9);
  _Unwind_Resume(a1);
}

char *sub_20C33D1C8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924924924924ALL)
    sub_20BDDF694();
  result = (char *)sub_20C240CE4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

uint64_t sub_20C33D21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2 + 8;
    do
    {
      v7 = v6 - 8;
      *(_DWORD *)v4 = *(_DWORD *)(v6 - 8);
      sub_20C240DF8(v4 + 8, v6);
      *(_OWORD *)(v4 + 96) = *(_OWORD *)(v6 + 88);
      v4 = v12 + 112;
      v12 += 112;
      v6 += 112;
    }
    while (v7 + 112 != a3);
  }
  v10 = 1;
  sub_20C33D2D4((uint64_t)v9);
  return v4;
}

void sub_20C33D2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C33D2D4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C33D2D4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C33D308((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C33D308(uint64_t *result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)result[1];
  v1 = (uint64_t *)result[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *result;
    do
    {
      v3 -= 112;
      result = (uint64_t *)sub_20C2406D0(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

char *sub_20C33D358(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_20C02CC00(result, a4);
    result = sub_20C33D3DC((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_20C33D3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BE93030(&a9);
  _Unwind_Resume(a1);
}

char *sub_20C33D3DC(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  char *v10;
  char *v11;

  v4 = __dst;
  v10 = __dst;
  v11 = __dst;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C107F98(v4, v6);
      v6 += 3;
      v4 = v11 + 48;
      v11 += 48;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C2413F0((uint64_t)v8);
  return v4;
}

void sub_20C33D468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C2413F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C33D47C(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20C33D500(result, a4);
    result = (_QWORD *)sub_20C33D550((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C33D4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C287D04(&a9);
  _Unwind_Resume(a1);
}

char *sub_20C33D500(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xF0F0F0F0F0F0F1)
    sub_20BDDF694();
  result = (char *)sub_20C2943A8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[272 * v4];
  return result;
}

uint64_t sub_20C33D550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      sub_20C29447C(a4 + v7, a2 + v7);
      v7 += 272;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_20C33D5AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 272;
    do
    {
      sub_20C287D74(v4 + v2);
      v2 -= 272;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C33D5D0(_QWORD *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20C211DE0(result, a4);
    result = sub_20C33D654((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C33D634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C33CEF4(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C33D654(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *v4;
  _DWORD *v6;
  _QWORD v8[3];
  char v9;
  _DWORD *v10;
  _DWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BFD6E54(v4, v6);
      sub_20BFD6EA4(v4 + 1, v6 + 1);
      v4[2] = v6[2];
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C33D6F4((uint64_t)v8);
  return v4;
}

uint64_t sub_20C33D6F4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C33D728((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C33D728(uint64_t *result)
{
  _DWORD **v1;
  _QWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;

  v2 = (_QWORD *)result[1];
  v1 = (_DWORD **)result[2];
  v3 = *v1;
  v4 = (_DWORD *)*v2;
  if (*v1 != (_DWORD *)*v2)
  {
    v5 = *result;
    do
    {
      v3 -= 3;
      result = (uint64_t *)sub_20C33CF78(v5, v3);
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t sub_20C33D778(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v5 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v5;
  sub_20BFD38A4((_DWORD *)(a1 + 136), (_DWORD *)(a2 + 136));
  sub_20BFD38DC((_DWORD *)(a1 + 140), (_DWORD *)(a2 + 140));
  return a1;
}

uint64_t sub_20C33D858(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_20C33D9F8((void **)a1);
    if (a4 > 0x249249249249249)
      sub_20BDDF694();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)) >= 0x124924924924924)
      v11 = 0x249249249249249;
    else
      v11 = v10;
    sub_20C33D1C8((_QWORD *)a1, v11);
    result = sub_20C33D21C(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = a2 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4);
    sub_20C33DA64((uint64_t)&v17, a2, v13, (uint64_t)v9);
    result = sub_20C33D21C(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = sub_20C33DA64((uint64_t)&v18, a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 112;
      result = sub_20C2406D0(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_20C33D9E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C33D9F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C33D9F8(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 112;
        sub_20C2406D0((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20C33DA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    pxrInternal__aapl__pxrReserved__::PcpLayerStackIdentifier::operator=(a4 + 8, v5 + 8);
    sub_20C01A074((int *)(a4 + 88), (_DWORD *)(v5 + 88));
    sub_20C01A0C8((int *)(a4 + 92), (_DWORD *)(v5 + 92));
    *(_OWORD *)(a4 + 96) = *(_OWORD *)(v5 + 96);
    a4 += 112;
    v5 += 112;
  }
  while (v5 != v6);
  return v6;
}

void sub_20C33DAEC(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_20C241224((void **)a1);
    if (a4 > 0x555555555555555)
      sub_20BDDF694();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    sub_20C02CC00((_QWORD *)a1, v11);
    v12 = sub_20C33D3DC(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = (std::string *)((char *)__str + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    sub_20C33DC6C((int)&v17, __str, v13, v9);
    v12 = sub_20C33D3DC(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20C33DC6C((int)&v18, __str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      sub_20BE930B4(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_20C33DC5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C33DC64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *sub_20C33DC6C(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    std::string::operator=(this + 1, v5 + 1);
    this += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_20C33DCD8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_20C33DE50((void **)a1);
    if (a4 > 0xF0F0F0F0F0F0F0)
      sub_20BDDF694();
    v10 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x78787878787878)
      v11 = 0xF0F0F0F0F0F0F0;
    else
      v11 = v10;
    sub_20C33D500((_QWORD *)a1, v11);
    result = sub_20C33D550(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = a2 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4);
    sub_20C33DEAC((uint64_t)&v16, a2, v13, (uint64_t)v9);
    result = sub_20C33D550(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  sub_20C33DEAC((uint64_t)&v17, a2, a3, (uint64_t)v9);
  v15 = v14;
  result = *(_QWORD *)(a1 + 8);
  if (result != v14)
  {
    do
      result = sub_20C287D74(result - 272);
    while (result != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_20C33DE40(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C33DE48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C33DE50(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = v1;
    if ((void *)v3 != v1)
    {
      do
        v3 = sub_20C287D74(v3 - 272);
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_20C33DEAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_20C33DF70(a4, (__int128 *)v5);
    sub_20C33E000((std::string *)(a4 + 48), (std::string *)(v5 + 48));
    sub_20C1B2170((std::string *)(a4 + 104), (const std::string *)(v5 + 104));
    sub_20C33E0C4(a4 + 136, (__int128 *)(v5 + 136));
    sub_20C33E0C4(a4 + 184, (__int128 *)(v5 + 184));
    *(_WORD *)(a4 + 232) = *(_WORD *)(v5 + 232);
    sub_20BF2D298(a4 + 240, v5 + 240);
    sub_20C01A074((int *)(a4 + 256), (_DWORD *)(v5 + 256));
    sub_20C01A0C8((int *)(a4 + 260), (_DWORD *)(v5 + 260));
    *(_QWORD *)(a4 + 264) = *(_QWORD *)(v5 + 264);
    a4 += 272;
    v5 += 272;
  }
  while (v5 != v6);
  return v6;
}

void sub_20C33DF70(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (*(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40))
  {
    if (*(_BYTE *)(a1 + 40))
      sub_20C28130C(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    sub_20C33DFD0(a1);
  }
  else
  {
    v2 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v2;
    v3 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 32) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 - 16);
      if (*(_QWORD *)(a1 + 24))
        v4 = *(unint64_t **)(a1 + 24);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
}

void sub_20C33DFD0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    sub_20C00A724((_QWORD *)a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
}

void sub_20C33E000(std::string *__dst, std::string *__str)
{
  if (__dst[2].__r_.__value_.__s.__data_[0] == __str[2].__r_.__value_.__s.__data_[0])
  {
    if (__dst[2].__r_.__value_.__s.__data_[0])
    {
      std::string::operator=(__dst, __str);
      std::string::operator=(__dst + 1, __str + 1);
    }
  }
  else if (__dst[2].__r_.__value_.__s.__data_[0])
  {
    sub_20C33E07C((uint64_t)__dst);
  }
  else
  {
    sub_20C294678((char *)__dst, (__int128 *)__str);
    __dst[2].__r_.__value_.__s.__data_[0] = 1;
  }
}

void sub_20C33E07C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)(a1 + 24));
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 48) = 0;
  }
}

void sub_20C33E0C4(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (*(unsigned __int8 *)(a1 + 40) == *((unsigned __int8 *)a2 + 40))
  {
    if (*(_BYTE *)(a1 + 40))
      sub_20C28422C(a1, a2);
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    sub_20C33E124(a1);
  }
  else
  {
    v2 = a2[1];
    *(_OWORD *)a1 = *a2;
    *(_OWORD *)(a1 + 16) = v2;
    v3 = *((_QWORD *)a2 + 4);
    *(_QWORD *)(a1 + 32) = v3;
    if (v3)
    {
      v4 = (unint64_t *)(v3 - 16);
      if (*(_QWORD *)(a1 + 24))
        v4 = *(unint64_t **)(a1 + 24);
      do
        v5 = __ldxr(v4);
      while (__stxr(v5 + 1, v4));
    }
    *(_BYTE *)(a1 + 40) = 1;
  }
}

void sub_20C33E124(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 40))
  {
    sub_20BF5618C(a1);
    *(_BYTE *)(a1 + 40) = 0;
  }
}

_DWORD *sub_20C33E154(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8;
  int *v9;
  unint64_t v10;
  unint64_t v11;
  _DWORD *result;
  _DWORD *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(int **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2) < a4)
  {
    sub_20C33E2D4((_QWORD *)a1);
    if (a4 > 0x1555555555555555)
      sub_20BDDF694();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 2) >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v10;
    sub_20C211DE0((_QWORD *)a1, v11);
    result = sub_20C33D654(v8, a2, a3, *(_DWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 2) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 2];
    sub_20C33E340((uint64_t)&v17, a2, v13, v9);
    result = sub_20C33D654(v8, v13, a3, *(_DWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = sub_20C33E340((uint64_t)&v18, a2, a3, v9);
  v15 = v14;
  v16 = *(_DWORD **)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      result = sub_20C33CF78(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_20C33E2C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C33E2CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C33E2D4(_QWORD *a1)
{
  _DWORD *v1;
  _DWORD *v3;
  _DWORD *v4;

  v1 = (_DWORD *)*a1;
  if (*a1)
  {
    v3 = (_DWORD *)a1[1];
    v4 = (_DWORD *)*a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        sub_20C33CF78((uint64_t)(a1 + 2), v3);
      }
      while (v3 != v1);
      v4 = (_DWORD *)*a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_DWORD *sub_20C33E340(uint64_t a1, _DWORD *a2, _DWORD *a3, int *a4)
{
  _DWORD *v5;
  _DWORD *v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_20C01A074(a4, v5);
    sub_20C01A0C8(a4 + 1, v5 + 1);
    a4[2] = v5[2];
    a4 += 3;
    v5 += 3;
  }
  while (v5 != v6);
  return v6;
}

_DWORD *sub_20C33E3B4(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 8);
  sub_20BFD6F90(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

_QWORD *sub_20C33E3FC(_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v4 = bswap64(0x9E3779B97F4A7C55 * a2[16]);
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  v6 = v5.u32[0];
  if (v5.u32[0] > 1uLL)
  {
    v7 = v4;
    if (v4 >= *(_QWORD *)&v2)
      v7 = v4 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = (*(_QWORD *)&v2 - 1) & v4;
  }
  v8 = *(_QWORD **)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  v9 = (_QWORD *)*v8;
  if (*v8)
  {
    do
    {
      v10 = v9[1];
      if (v10 == v4)
      {
        if (pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::operator==(v9 + 2, a2))
          return v9;
      }
      else
      {
        if (v6 > 1)
        {
          if (v10 >= *(_QWORD *)&v2)
            v10 %= *(_QWORD *)&v2;
        }
        else
        {
          v10 &= *(_QWORD *)&v2 - 1;
        }
        if (v10 != v7)
          return 0;
      }
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  return v9;
}

_QWORD *sub_20C33E500(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[3];

  v7 = bswap64(0x9E3779B97F4A7C55 * a2[16]);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v7)
          {
            if (pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::operator==(v13 + 2, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v8)
                v14 %= v8;
            }
            else
            {
              v14 &= v8 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  sub_20C33E78C(a1, v7, a4, (uint64_t)v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v13 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C33E80C((uint64_t)v24, 0);
  return v13;
}

void sub_20C33E774(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C33E80C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C33E78C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0xB0uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C33CFE4((uint64_t)(v8 + 2), *a3);
  v8[19] = 0;
  v8[20] = 0;
  v8[21] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C33E7F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C33E80C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C33E80C(uint64_t a1, uint64_t a2)
{
  void **v2;

  v2 = *(void ***)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C33CD24(v2 + 2);
    operator delete(v2);
  }
}

uint64_t sub_20C33E850(uint64_t a1)
{
  void *v2;

  sub_20C33E888(a1, *(_DWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C33E888(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(_DWORD **)v2;
      sub_20BFE4CA8(v2 + 4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_20C33E8C4(const pxrInternal__aapl__pxrReserved__::SdfPath **a1, const pxrInternal__aapl__pxrReserved__::SdfPath **a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3, pxrInternal__aapl__pxrReserved__::SdfPath **a4, uint64_t **a5)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath **v12;
  char v13;

  v8 = *a1;
  v9 = *a2;
  if (v8 == v9)
  {
LABEL_8:
    v9 = v8;
  }
  else
  {
    while (*a3 != *a4)
    {
      if (sub_20BFD758C(v8, *a3))
      {
        sub_20BFD7824(a5, *a1);
        v12 = a1;
      }
      else
      {
        v13 = sub_20BFD758C(*a3, *a1);
        v12 = a3;
        if ((v13 & 1) == 0)
        {
          *a1 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*a1 + 8);
          v12 = a3;
        }
      }
      *v12 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)*v12 + 8);
      v8 = *a1;
      v9 = *a2;
      if (*a1 == *a2)
        goto LABEL_8;
    }
  }
  return sub_20C33E988(v8, v9, *a5);
}

_DWORD *sub_20C33E988(_DWORD *a1, _DWORD *a2, uint64_t *a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t *v6;

  v3 = a1;
  v6 = a3;
  if (a1 == a2)
    return a1;
  v4 = a2;
  do
  {
    sub_20BFD7824(&v6, v3);
    v3 += 2;
  }
  while (v3 != v4);
  return v4;
}

void sub_20C33E9E8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C33E9E8(a1, *a2);
    sub_20C33E9E8(a1, a2[1]);
    sub_20C33CDA4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t *sub_20C33EA30(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;

  v7 = (uint64_t **)sub_20C137858((uint64_t)a1, &v12, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    sub_20C33EAD0((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_20BDDE1B4(a1, v12, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    sub_20C33EBA0((uint64_t)v11, 0);
  }
  return v8;
}

_DWORD *sub_20C33EAD0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _DWORD *v8;
  _DWORD *result;

  v7 = a1 + 8;
  v8 = operator new(0xB0uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = sub_20C33EB40(v8 + 8, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C33EB28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C33EBA0(v1, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C33EB40(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v6;

  v6 = sub_20BFD6E54(a1, a2);
  sub_20BFD6EA4(v6 + 1, a2 + 1);
  sub_20C33CFE4((uint64_t)(a1 + 2), a3);
  return a1;
}

void sub_20C33EB8C(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

void sub_20C33EBA0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C33CDA4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C33EBE4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20C33CCE8(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *sub_20C33EC38(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[3];

  v6 = bswap64(0x9E3779B97F4A7C55 * a2[16]);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = (_QWORD *)*v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v6)
          {
            if (pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::operator==(v12 + 2, a2))
              return v12;
          }
          else
          {
            if (v10 > 1)
            {
              if (v13 >= v7)
                v13 %= v7;
            }
            else
            {
              v13 &= v7 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  sub_20C33EEB4(a1, v6, a3, (uint64_t)v23);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23[0] = *v20;
    *v20 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v23[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7)
          v21 %= v7;
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23[0];
    }
  }
  v12 = (_QWORD *)v23[0];
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C33EF68((uint64_t)v23, 0);
  return v12;
}

void sub_20C33EE9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C33EF68((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C33EEB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0xA0uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C33EF28((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C33EF10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C33EF68(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C33EF28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_20C33CFE4(a1, a2);
  sub_20BFD6E54((_DWORD *)(v4 + 136), (_DWORD *)(a2 + 136));
  sub_20BFD6EA4((_DWORD *)(a1 + 140), (_DWORD *)(a2 + 140));
  return a1;
}

void sub_20C33EF68(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C33CE2C((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_20C33EFAC(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C33F218(a1, v6, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C33F2EC((uint64_t)v21, 0);
  return v10;
}

void sub_20C33F200(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C33F2EC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C33F218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _DWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0xA0uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C33F284((_DWORD *)v8 + 4, *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C33F26C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C33F2EC(v1, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C33F284(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54(a1, a2);
  sub_20BFD6EA4(v4 + 1, a2 + 1);
  pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::Usd_InstanceKey((pxrInternal__aapl__pxrReserved__::Usd_InstanceKey *)(a1 + 2));
  return a1;
}

void sub_20C33F2CC(_Unwind_Exception *a1)
{
  _DWORD *v1;
  _DWORD *v2;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v2);
  sub_20BFD265C(v1);
  _Unwind_Resume(a1);
}

void sub_20C33F2EC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C33CDA4((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_DWORD *sub_20C33F330(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  void **v6;
  _DWORD *v7;
  uint64_t **v8;
  _DWORD *v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v6 = (void **)sub_20C137858((uint64_t)a1, &v13, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v11[1] = a1 + 1;
    v9 = *a4;
    sub_20BFD6E54(v7 + 8, v9);
    sub_20BFD6EA4(v7 + 9, v9 + 1);
    *((_QWORD *)v7 + 5) = 0;
    *((_QWORD *)v7 + 6) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v12 = 1;
    sub_20BDDE1B4(a1, v13, v8, (uint64_t *)v7);
    v11[0] = 0;
    sub_20C33F3F4((uint64_t)v11, 0);
  }
  return v7;
}

void sub_20C33F3F4(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C33E3B4((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C33F438(uint64_t a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;

  v8 = ((uint64_t)a2 - a1) >> 3;
  v9 = ((char *)a3 - (char *)a2) >> 3;
  if (v9 >= v8)
    v10 = ((uint64_t)a2 - a1) >> 3;
  else
    v10 = ((char *)a3 - (char *)a2) >> 3;
  v11 = (int *)sub_20C33F4F4(v10);
  sub_20C33F554(a1, a2, a3, a4, v8, v9, v11, v12);
  if (v11)
    operator delete(v11);
}

void sub_20C33F4DC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void *sub_20C33F4F4(uint64_t a1)
{
  unint64_t v1;
  const std::nothrow_t *v2;
  void *result;
  BOOL v4;

  if (a1 < 1)
    return 0;
  if (a1 >= 0xFFFFFFFFFFFFFFFLL)
    v1 = 0xFFFFFFFFFFFFFFFLL;
  else
    v1 = a1;
  v2 = (const std::nothrow_t *)MEMORY[0x24BEDB6B8];
  while (1)
  {
    result = operator new(8 * v1, v2);
    if (result)
      break;
    v4 = v1 > 1;
    v1 >>= 1;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t sub_20C33F554(uint64_t result, int *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7, uint64_t a8)
{
  int *v13;
  unint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::SdfPath *v22;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v23;
  unint64_t v24;
  uint64_t v25;
  int *v26;
  unint64_t v27;
  pxrInternal__aapl__pxrReserved__::SdfPath *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int *v33;
  uint64_t v34;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v44;

  v44 = a6;
  if (a6)
  {
    v13 = (int *)result;
    do
    {
      if (v44 <= a8 || a5 <= a8)
        return (uint64_t)sub_20C33F85C(v13, a2, a3, a4, a5, v44, a7);
      if (!a5)
        return result;
      v14 = 0;
      v15 = -a5;
      while (1)
      {
        v16 = &v13[v14 / 4];
        result = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13[v14 / 4]);
        if ((result & 1) != 0)
          break;
        v14 += 8;
        if (__CFADD__(v15++, 1))
          return result;
      }
      v18 = -v15;
      v19 = v44;
      v41 = a8;
      v42 = a3;
      if (-v15 >= v44)
      {
        if (v15 == -1)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(&v13[v14 / 4], a2);
          return (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(&v13[v14 / 4 + 1], a2 + 1);
        }
        if (v15 > 0)
          v18 = 1 - v15;
        v25 = v18 >> 1;
        v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13[2 * (v18 >> 1) + v14 / 4];
        v26 = a3;
        v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)a2;
        if (a2 != v26)
        {
          v40 = v25;
          v27 = ((char *)v42 - (char *)a2) >> 3;
          v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)a2;
          do
          {
            v28 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v22 + 8 * (v27 >> 1));
            v29 = sub_20BFD758C(v28, v23);
            if (v29)
              v27 += ~(v27 >> 1);
            else
              v27 >>= 1;
            if (v29)
              v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v28 + 8);
          }
          while (v27);
          v25 = v40;
          v19 = v44;
        }
        v21 = (v22 - (pxrInternal__aapl__pxrReserved__::SdfPath *)a2) >> 3;
      }
      else
      {
        if (v44 >= 0)
          v20 = v44;
        else
          v20 = v44 + 1;
        v21 = v20 >> 1;
        v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)&a2[2 * (v20 >> 1)];
        v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2;
        if ((char *)a2 - (char *)v13 != v14)
        {
          v39 = v20 >> 1;
          v24 = (uint64_t)((char *)a2 - (char *)v13 - v14) >> 3;
          v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13[v14 / 4];
          do
          {
            if (sub_20BFD758C(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v23 + 8 * (v24 >> 1))))
            {
              v24 >>= 1;
            }
            else
            {
              v23 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v23 + 8 * (v24 >> 1) + 8);
              v24 += ~(v24 >> 1);
            }
          }
          while (v24);
          v21 = v39;
          v19 = v44;
        }
        v25 = (uint64_t)(v23 - (const pxrInternal__aapl__pxrReserved__::SdfPath *)v13 - v14) >> 3;
      }
      if (v23 == (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2)
      {
        v33 = (int *)v22;
      }
      else if (v22 == (pxrInternal__aapl__pxrReserved__::SdfPath *)a2)
      {
        v33 = (int *)v23;
      }
      else
      {
        v30 = v25;
        v31 = v21;
        v32 = sub_20C33FC64((int *)v23, a2, (int *)v22);
        v21 = v31;
        v25 = v30;
        v19 = v44;
        v33 = v32;
      }
      a5 = -v25 - v15;
      v34 = v19 - v21;
      if (v25 + v21 >= v19 - (v25 + v21) - v15)
      {
        v36 = v25;
        v37 = -v25 - v15;
        v38 = v21;
        result = sub_20C33F554(v33, v22, v42, a4, v37, v34, a7, v41);
        a3 = v33;
        a2 = (int *)v23;
        a8 = v41;
        v34 = v38;
        a5 = v36;
      }
      else
      {
        v35 = v23;
        a8 = v41;
        result = sub_20C33F554(&v13[v14 / 4], v35, v33, a4, v25, v21, a7, v41);
        v16 = v33;
        a2 = (int *)v22;
        a3 = v42;
      }
      v44 = v34;
      v13 = v16;
    }
    while (v34);
  }
  return result;
}

int *sub_20C33F85C(int *a1, int *a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, int *a7)
{
  unint64_t v11;
  int *v12;
  int *v13;
  unint64_t v14;
  int *v15;
  int *v16;
  int *result;
  unint64_t v18;

  if (a5 <= a6)
  {
    if (a1 == a2)
    {
      v14 = 0;
      v15 = a7;
    }
    else
    {
      v14 = 0;
      v15 = a7;
      v16 = a1;
      do
      {
        sub_20BFD38A4(v15, v16);
        sub_20BFD38DC(v15 + 1, v16 + 1);
        ++v14;
        v16 += 2;
        v15 += 2;
      }
      while (v16 != a2);
    }
    v18 = v14;
    result = sub_20C33F9D0(a7, v15, a2, a3, a1);
  }
  else
  {
    if (a2 == a3)
    {
      v11 = 0;
      v12 = a7;
    }
    else
    {
      v11 = 0;
      v12 = a7;
      v13 = a2;
      do
      {
        sub_20BFD38A4(v12, v13);
        sub_20BFD38DC(v12 + 1, v13 + 1);
        ++v11;
        v13 += 2;
        v12 += 2;
      }
      while (v13 != a3);
    }
    v18 = v11;
    result = sub_20C33FA98(v12, v12, (uint64_t)a7, a7, (uint64_t)a2, a2, (uint64_t)a1, a1, a3, a3);
  }
  if (a7)
    return (int *)sub_20C33FC08(&v18, a7);
  return result;
}

void sub_20C33F9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14)
{
  _DWORD *v14;

  if (v14)
    sub_20C33FC08(&a14, v14);
  _Unwind_Resume(exception_object);
}

int *sub_20C33F9D0(int *result, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t v5;
  uint64_t v6;
  int *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  if (result != a2)
  {
    v13 = v5;
    v14 = v6;
    v11 = result;
    while (a3 != a4)
    {
      if (sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v11))
      {
        sub_20BFD3EBC(a5, a3);
        result = sub_20BFD3F10(a5 + 1, a3 + 1);
        a3 += 2;
      }
      else
      {
        sub_20BFD3EBC(a5, v11);
        result = sub_20BFD3F10(a5 + 1, v11 + 1);
        v11 += 2;
      }
      a5 += 2;
      if (v11 == a2)
        return result;
    }
    return sub_20C0D8454((uint64_t)&v12, v11, a2, a5);
  }
  return result;
}

int *sub_20C33FA98(int *result, int *a2, uint64_t a3, int *a4, uint64_t a5, int *a6, uint64_t a7, int *a8, int *a9, int *a10)
{
  int *v13;
  int *v14;
  int *v15;
  int v16;
  int *v17;
  int *v18;
  int *v19;
  int *v20;

  v19 = result;
  if (a2 != a4)
  {
    v13 = a2;
    v14 = a10;
    v15 = a10 - 2;
    while (a6 != a8)
    {
      v16 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(v13 - 2), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a6 - 2));
      if (v16)
        v17 = a6 - 2;
      else
        v17 = v13 - 2;
      if (v16)
        v18 = a6;
      else
        v18 = v13;
      if (v16)
        a6 -= 2;
      else
        v13 -= 2;
      sub_20BFD3EBC(v15, v17);
      result = sub_20BFD3F10(v15 + 1, v18 - 1);
      v14 -= 2;
      v15 -= 2;
      if (v13 == a4)
        return result;
    }
    return sub_20C33FB78(v19, v13, a4, a9, v14, &v20);
  }
  return result;
}

int *sub_20C33FB78@<X0>(int *result@<X0>, int *a2@<X1>, int *a3@<X3>, int *a4@<X4>, int *a5@<X5>, int **a6@<X8>)
{
  int *v6;
  int *v8;
  int *v9;
  int *v12;

  v6 = a5;
  v8 = a2;
  v9 = result;
  if (a2 != a3)
  {
    v12 = a5 - 1;
    do
    {
      sub_20BFD3EBC(v12 - 1, v8 - 2);
      result = sub_20BFD3F10(v12, v8 - 1);
      v12 -= 2;
      v6 -= 2;
      v8 -= 2;
    }
    while (v8 != a3);
    v8 = a3;
  }
  *a6 = v9;
  a6[1] = v8;
  a6[2] = a4;
  a6[3] = v6;
  return result;
}

unint64_t *sub_20C33FC08(unint64_t *result, _DWORD *a2)
{
  unint64_t *v3;
  unint64_t v4;

  if (*result)
  {
    v3 = result;
    v4 = 0;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);
      result = (unint64_t *)sub_20BFD265C(a2);
      ++v4;
      a2 += 2;
    }
    while (v4 < *v3);
  }
  return result;
}

int *sub_20C33FC64(int *a1, int *a2, int *a3)
{
  int *v4;
  int *v6;
  int *i;
  int *v8;
  int *v9;

  v4 = a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, v4 + 1);
  v6 = a1 + 2;
  for (i = v4 + 2; i != a3; i += 2)
  {
    if (v6 == v4)
      v4 = i;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v6, i);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v6 + 1, i + 1);
    v6 += 2;
  }
  if (v6 != v4)
  {
    v8 = v6;
    v9 = v4;
    do
    {
      while (1)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v8, v9);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v8 + 1, v9 + 1);
        v8 += 2;
        v9 += 2;
        if (v9 == a3)
          break;
        if (v8 == v4)
          v4 = v9;
      }
      v9 = v4;
    }
    while (v8 != v4);
  }
  return v6;
}

_QWORD *sub_20C33FD3C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *(_QWORD *)a2)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x20uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  sub_20C0E453C((_DWORD *)v14 + 4, *a4);
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C33FFB8((uint64_t)v24, 0);
  return v11;
}

void sub_20C33FFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C33FFB8((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C33FFB8(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BFE4CA8(v2 + 4);
    operator delete(v2);
  }
}

_QWORD *sub_20C33FFFC(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  int v6;
  _QWORD *v7;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (_QWORD *)(a1 + 8);
  do
  {
    v6 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 4), a2);
    v7 = v3 + 1;
    if (!v6)
    {
      v7 = v3;
      v5 = v3;
    }
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_20BFD758C(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 4)))
    return v2;
  return v5;
}

uint64_t sub_20C340074(_QWORD *a1, unsigned int *a2)
{
  uint64_t result;
  _BYTE v4[24];

  result = (uint64_t)sub_20C0AD934(a1, a2);
  if (result)
  {
    sub_20BEB587C(a1, (_QWORD *)result, (uint64_t)v4);
    sub_20C33F2EC((uint64_t)v4, 0);
    return 1;
  }
  return result;
}

_DWORD *sub_20C3400C0(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  _DWORD *v6;

  v6 = sub_20BFD6E54(a1, a2);
  sub_20BFD6EA4(v6 + 1, a2 + 1);
  sub_20BFD38A4(a1 + 2, a3);
  sub_20BFD38DC(a1 + 3, a3 + 1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::Usd_InstanceKey *pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::Usd_InstanceKey(pxrInternal__aapl__pxrReserved__::Usd_InstanceKey *this)
{
  uint64_t v2;
  uint64_t v4;
  char v5;

  pxrInternal__aapl__pxrReserved__::PcpInstanceKey::PcpInstanceKey(this);
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_QWORD *)(v2 + 120) = 0;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  v4 = 0;
  v5 = 0;
  sub_20C341770((uint64_t)&v4, (uint64_t)this, (uint64_t *)(v2 + 56), (unsigned int **)(v2 + 80), v2 + 104);
  *((_QWORD *)this + 16) = bswap64(0x9E3779B97F4A7C55 * v4);
  return this;
}

void sub_20C3401B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void **v4;
  va_list va;

  va_start(va, a4);
  sub_20C33CEF4((void ***)va);
  sub_20BFD6F90((void ***)va);
  sub_20C287D04((void ***)va);
  sub_20C33CEB0(v4);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::_ComputeHash(pxrInternal__aapl__pxrReserved__::Usd_InstanceKey *this)
{
  uint64_t v2;
  char v3;

  v2 = 0;
  v3 = 0;
  sub_20C341770((uint64_t)&v2, (uint64_t)this, (uint64_t *)this + 7, (unsigned int **)this + 10, (uint64_t)this + 104);
  return bswap64(0x9E3779B97F4A7C55 * v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::Usd_InstanceKey(uint64_t a1, const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *a2, pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *a3, char **a4)
{
  uint64_t v8;
  uint64_t *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  uint64_t *Path;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  int *v13;
  int *v14;
  int *v15;
  void ***v16;
  int *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v20;
  int *v21;
  int *v22;
  int *v23;
  int *i;
  _QWORD *v26;
  unsigned int **v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  int EffectiveRuleForPath;
  void **v33;

  v8 = pxrInternal__aapl__pxrReserved__::PcpInstanceKey::PcpInstanceKey((pxrInternal__aapl__pxrReserved__::PcpInstanceKey *)a1, a2);
  *(_OWORD *)(v8 + 56) = 0u;
  v9 = (uint64_t *)(v8 + 56);
  *(_OWORD *)(v8 + 104) = 0u;
  v26 = (_QWORD *)(v8 + 104);
  *(_QWORD *)(v8 + 120) = 0;
  v27 = (unsigned int **)(v8 + 80);
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  pxrInternal__aapl__pxrReserved__::Usd_ComputeClipSetDefinitionsForPrimIndex(a2, (uint64_t *)(v8 + 56), 0);
  if (a3)
  {
    Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(a2);
    v12 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)Path);
    pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::GetPaths(a3, &v30);
    v13 = (int *)*((_QWORD *)&v30 + 1);
    v14 = (int *)v30;
    if ((_QWORD)v30 == *((_QWORD *)&v30 + 1))
    {
      v15 = (int *)v30;
    }
    else
    {
      do
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)Path))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v33, (pxrInternal__aapl__pxrReserved__::SdfPath *)v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)Path, v12, 1);
        }
        else
        {
          v33 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
        }
        sub_20BFD3EBC(v14, (int *)&v33);
        sub_20BFD3F10(v14 + 1, (int *)&v33 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
        sub_20BFD265C(&v33);
        v14 += 2;
      }
      while (v14 != v13);
      v14 = (int *)*((_QWORD *)&v30 + 1);
      v15 = (int *)v30;
    }
    v33 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
    v17 = sub_20C11D810(v15, v14, &v33);
    sub_20C340AF8((pxrInternal__aapl__pxrReserved__::SdfPath **)&v28, (char *)v15, (char *)v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    sub_20BFD265C(&v33);
    v33 = (void **)&v30;
    sub_20BFD6F90(&v33);
    sub_20BFD7014(v27);
    *(_OWORD *)(a1 + 80) = v28;
    *(_QWORD *)(a1 + 96) = v29;
    v29 = 0;
    v28 = 0uLL;
    *(_QWORD *)&v30 = &v28;
    v16 = (void ***)&v30;
  }
  else
  {
    sub_20C3407F4(v10, &v30);
    sub_20BFD7014(v27);
    *(_OWORD *)(a1 + 80) = v30;
    *(_QWORD *)(a1 + 96) = v31;
    v31 = 0;
    v30 = 0uLL;
    *(_QWORD *)&v28 = &v30;
    v16 = (void ***)&v28;
  }
  sub_20BFD6F90(v16);
  v18 = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(a2);
  EffectiveRuleForPath = pxrInternal__aapl__pxrReserved__::UsdStageLoadRules::GetEffectiveRuleForPath(a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v18);
  v30 = 0uLL;
  v31 = 0;
  v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C33D5D0(&v30, *a4, a4[1], 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 2));
  v20 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v19);
  v21 = (int *)*((_QWORD *)&v30 + 1);
  v22 = (int *)v30;
  if ((_QWORD)v30 != *((_QWORD *)&v30 + 1))
  {
    do
    {
      if (*(_QWORD *)v22 == *v18)
      {
        sub_20C01A074(v22, v20);
        sub_20C01A0C8(v22 + 1, (_DWORD *)v20 + 1);
        v22[2] = EffectiveRuleForPath;
      }
      else
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v18))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v33, (pxrInternal__aapl__pxrReserved__::SdfPath *)v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v18, v20, 1);
        }
        else
        {
          v33 = 0;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
        }
        sub_20BFD3EBC(v22, (int *)&v33);
        sub_20BFD3F10(v22 + 1, (int *)&v33 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
        sub_20BFD265C(&v33);
      }
      v22 += 3;
    }
    while (v22 != v21);
    v23 = (int *)*((_QWORD *)&v30 + 1);
    v22 = (int *)v30;
    if ((_QWORD)v30 != *((_QWORD *)&v30 + 1))
    {
      while (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v22))
      {
        v22 += 3;
        if (v22 == v23)
        {
          v22 = v23;
          goto LABEL_29;
        }
      }
      if (v22 != v23)
      {
        for (i = v22 + 3; i != v23; i += 3)
        {
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(i))
          {
            sub_20BFD3EBC(v22, i);
            sub_20BFD3F10(v22 + 1, i + 1);
            v22[2] = i[2];
            v22 += 3;
          }
        }
      }
    }
  }
LABEL_29:
  sub_20C340BD8((uint64_t)&v30, v22, *((int **)&v30 + 1));
  if ((_QWORD)v30 == *((_QWORD *)&v30 + 1) || *(_QWORD *)v30 != *(_QWORD *)v20)
    sub_20C340C64((uint64_t *)&v30, (int *)v30, v20, &EffectiveRuleForPath);
  else
    *(_DWORD *)(v30 + 8) = EffectiveRuleForPath;
  v28 = 0uLL;
  v29 = 0;
  pxrInternal__aapl__pxrReserved__::UsdStageLoadRules::SetRules(&v28, (_DWORD **)&v30);
  pxrInternal__aapl__pxrReserved__::UsdStageLoadRules::Minimize((pxrInternal__aapl__pxrReserved__::UsdStageLoadRules *)&v28);
  v33 = (void **)&v30;
  sub_20C33CEF4(&v33);
  sub_20C33E2D4(v26);
  *(_OWORD *)(a1 + 104) = v28;
  *(_QWORD *)(a1 + 120) = v29;
  v29 = 0;
  v28 = 0uLL;
  *(_QWORD *)&v30 = &v28;
  sub_20C33CEF4((void ***)&v30);
  *(_QWORD *)&v30 = 0;
  BYTE8(v30) = 0;
  sub_20C341770((uint64_t)&v30, a1, v9, v27, (uint64_t)v26);
  *(_QWORD *)(a1 + 128) = bswap64(0x9E3779B97F4A7C55 * v30);
  return a1;
}

void sub_20C340724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11)
{
  void **v11;

  a11 = a9;
  sub_20C33CEF4(&a11);
  a11 = a10;
  sub_20BFD6F90(&a11);
  sub_20C287D04(&a11);
  sub_20C33CEB0(v11);
  _Unwind_Resume(a1);
}

void sub_20C3407F4(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, _QWORD *a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *v4;
  _QWORD v5[3];
  void **v6;

  memset(v5, 0, sizeof(v5));
  v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  v4 = sub_20C340A98((pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *)v5, v3);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_20BFD6D38(a2, *(_DWORD **)v4, *((_DWORD **)v4 + 1), (uint64_t)(*((_QWORD *)v4 + 1) - *(_QWORD *)v4) >> 3);
  v6 = (void **)v5;
  sub_20BFD6F90(&v6);
}

void sub_20C34085C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BFD6F90(&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_InstanceKey::operator==(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;

  if (a1[16] != a2[16])
    return 0;
  if (!pxrInternal__aapl__pxrReserved__::PcpInstanceKey::operator==(a1, a2))
    return 0;
  v4 = a1[7];
  v5 = a1[8];
  v6 = a2[7];
  if (v5 - v4 != a2[8] - v6)
    return 0;
  while (v4 != v5)
  {
    if (!sub_20C341504(v4, v6))
      return 0;
    v4 += 272;
    v6 += 272;
  }
  v8 = (char *)a1[10];
  v7 = (char *)a1[11];
  v9 = (_QWORD *)a2[10];
  if (v7 - v8 != a2[11] - (_QWORD)v9)
    return 0;
  while (v8 != v7)
  {
    if (*(_QWORD *)v8 != *v9)
      return 0;
    v8 += 8;
    ++v9;
  }
  return pxrInternal__aapl__pxrReserved__::UsdStageLoadRules::operator==(a1 + 13, a2 + 13);
}

void sub_20C340A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *sub_20C340A98(pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  __int128 v4;
  uint64_t v5;
  void **v6;

  pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::GetUnion(a1, a2, (uint64_t)&v4);
  sub_20BFD7014(a1);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a1 + 2) = v5;
  v5 = 0;
  v4 = 0uLL;
  v6 = (void **)&v4;
  sub_20BFD6F90(&v6);
  return a1;
}

pxrInternal__aapl__pxrReserved__::SdfPath **sub_20C340AF8(pxrInternal__aapl__pxrReserved__::SdfPath **a1, char *a2, char *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  sub_20C340B54(a1, a2, a3, (a3 - a2) >> 3);
  pxrInternal__aapl__pxrReserved__::UsdStagePopulationMask::_ValidateAndNormalize(a1);
  return a1;
}

void sub_20C340B3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C340B54(_QWORD *result, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDDF654(result, a4);
    result = sub_20BFD6DBC((uint64_t)(v6 + 2), a2, a3, (_DWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C340BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BFD6F90(&a9);
  _Unwind_Resume(a1);
}

int *sub_20C340BD8(uint64_t a1, int *a2, int *a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  char v9;

  if (a2 != a3)
  {
    sub_20C340E5C((uint64_t)&v9, a3, *(int **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_DWORD **)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 3;
        sub_20C33CF78(a1 + 16, v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

int *sub_20C340C64(uint64_t *a1, int *a2, _DWORD *a3, int *a4)
{
  int *v6;
  int *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v6 = a2;
  v9 = *a1;
  v8 = (int *)a1[1];
  v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - *a1) >> 2);
  v13 = a1[2];
  v11 = (uint64_t)(a1 + 2);
  v12 = v13;
  if ((unint64_t)v8 >= v13)
  {
    v14 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v9) >> 2) + 1;
    if (v14 > 0x1555555555555555)
      sub_20BDDF694();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v9) >> 2);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0xAAAAAAAAAAAAAAALL)
      v16 = 0x1555555555555555;
    else
      v16 = v14;
    v23 = v11;
    if (v16)
      v17 = (char *)sub_20C152228(v11, v16);
    else
      v17 = 0;
    v19 = v17;
    v20 = (uint64_t)&v17[12 * v10];
    v21 = v20;
    v22 = &v17[12 * v16];
    sub_20C340F9C(&v19, a3, a4);
    v6 = (int *)sub_20C3410F4((uint64_t)a1, &v19, v6);
    sub_20C341490(&v19);
  }
  else if (a2 == v8)
  {
    sub_20BFD6E54(a2, a3);
    sub_20BFD6EA4(v6 + 1, a3 + 1);
    *(_DWORD *)(v9 + 12 * v10 + 8) = *a4;
    a1[1] = (uint64_t)(v6 + 3);
  }
  else
  {
    v21 = v11;
    sub_20BFD6E54(&v19, a3);
    sub_20BFD6EA4((_DWORD *)&v19 + 1, a3 + 1);
    LODWORD(v20) = *a4;
    sub_20C340ED0((uint64_t)a1, (uint64_t)v6, a1[1], (uint64_t)(v6 + 3));
    sub_20BFD3EBC(v6, (int *)&v19);
    sub_20BFD3F10(v6 + 1, (int *)&v19 + 1);
    *(_DWORD *)(v9 + 12 * v10 + 8) = v20;
    sub_20C33CF78(v21, &v19);
  }
  return v6;
}

void sub_20C340E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12)
{
  sub_20C33CF78(a12, &a10);
  _Unwind_Resume(a1);
}

int *sub_20C340E5C(uint64_t a1, int *a2, int *a3, int *a4)
{
  int *v5;
  int *v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_20BFD3EBC(a4, v5);
    sub_20BFD3F10(a4 + 1, v5 + 1);
    a4[2] = v5[2];
    a4 += 3;
    v5 += 3;
  }
  while (v5 != v6);
  return v6;
}

uint64_t sub_20C340ED0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  _DWORD *v10;
  _DWORD *v11;
  _DWORD *v12;
  char v14;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = (_DWORD *)v6;
  if (v7 < a3)
  {
    v10 = (_DWORD *)(a2 + 4 * ((v6 - a4) >> 2) + 4);
    v11 = (_DWORD *)(v6 + 4);
    do
    {
      sub_20BFD38A4(v11 - 1, v10 - 1);
      sub_20BFD38DC(v11, v10);
      v11[1] = v10[1];
      v12 = v10 + 2;
      v10 += 3;
      v11 += 3;
    }
    while ((unint64_t)v12 < a3);
    v8 = v11 - 1;
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C3411A4((uint64_t)&v14, a2, v7, v6);
}

_DWORD *sub_20C340F9C(_QWORD *a1, _DWORD *a2, int *a3)
{
  int *v6;
  int *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _DWORD *result;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v6 = (int *)a1[2];
  if (v6 == (int *)a1[3])
  {
    v7 = (int *)a1[1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (int *)*a1)
        v12 = 1;
      else
        v12 = 0x5555555555555556 * (((uint64_t)v6 - *a1) >> 2);
      v13 = v12 >> 2;
      v14 = a1[4];
      v22 = a1[4];
      *(_QWORD *)&v20 = sub_20C152228(v14, v12);
      *((_QWORD *)&v20 + 1) = v20 + 12 * v13;
      *(_QWORD *)&v21 = *((_QWORD *)&v20 + 1);
      *((_QWORD *)&v21 + 1) = v20 + 12 * v15;
      sub_20C341228(&v20, a1[1], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - a1[1]) >> 2));
      v16 = v21;
      v17 = *(_OWORD *)a1;
      v18 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v20;
      *((_OWORD *)a1 + 1) = v16;
      v20 = v17;
      v21 = v18;
      sub_20C341490((void **)&v20);
      v6 = (int *)a1[2];
    }
    else
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 2);
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = -3 * (v9 >> 1);
      sub_20C340E5C((uint64_t)&v20, v7, v6, &v7[-3 * (v9 >> 1)]);
      v6 = v11;
      a1[1] += 4 * v10;
      a1[2] = v11;
    }
  }
  sub_20BFD6E54(v6, a2);
  result = sub_20BFD6EA4(v6 + 1, a2 + 1);
  v6[2] = *a3;
  a1[2] += 12;
  return result;
}

void sub_20C3410E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20C341490(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3410F4(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  sub_20C3412B0(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20C34136C(v7, a3, *(_DWORD **)(a1 + 8), (_DWORD *)a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20C3411A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      sub_20BFD3EBC((int *)(a4 + v7 - 12), (int *)(a3 + v7 - 12));
      sub_20BFD3F10((int *)(a4 + v7 - 8), (int *)(a3 + v7 - 8));
      *(_DWORD *)(a4 + v7 - 4) = *(_DWORD *)(a3 + v7 - 4);
      v7 -= 12;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

_DWORD *sub_20C341228(_DWORD *result, uint64_t a2, uint64_t a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;

  v3 = result;
  v4 = *((_QWORD *)result + 2);
  if (a3)
  {
    v5 = v4 + 12 * a3;
    v6 = (_DWORD *)(v4 + 4);
    v7 = 12 * a3;
    v8 = (_DWORD *)(a2 + 4);
    do
    {
      sub_20BFD38A4(v6 - 1, v8 - 1);
      result = sub_20BFD38DC(v6, v8);
      v6[1] = v8[1];
      v6 += 3;
      v8 += 3;
      v7 -= 12;
    }
    while (v7);
  }
  else
  {
    v5 = *((_QWORD *)result + 2);
  }
  *((_QWORD *)v3 + 2) = v5;
  return result;
}

uint64_t sub_20C3412B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      sub_20BFD38A4((_DWORD *)(v7 - 12), (_DWORD *)(v9 - 12));
      sub_20BFD38DC((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      *(_DWORD *)(v7 - 4) = *(_DWORD *)(v9 - 4);
      v7 = *((_QWORD *)&v15 + 1) - 12;
      *((_QWORD *)&v15 + 1) -= 12;
      v9 -= 12;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C34140C((uint64_t)v12);
  return v10;
}

_DWORD *sub_20C34136C(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _DWORD *v4;
  _DWORD *v6;
  _QWORD v8[3];
  char v9;
  _DWORD *v10;
  _DWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BFD38A4(v4, v6);
      sub_20BFD38DC(v4 + 1, v6 + 1);
      v4[2] = v6[2];
      v4 = v11 + 3;
      v11 += 3;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C33D6F4((uint64_t)v8);
  return v4;
}

uint64_t sub_20C34140C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C341440((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C341440(uint64_t *result)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = *(_DWORD **)(result[2] + 8);
  v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C33CF78(v3, v1);
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C341490(void **a1)
{
  sub_20C3414C0(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C3414C0(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 12;
      result = sub_20C33CF78(v4, (_DWORD *)(v1 - 12));
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C341504(uint64_t a1, uint64_t a2)
{
  int v4;
  BOOL v5;
  char v6;
  int v7;
  BOOL v8;
  char v9;
  uint64_t result;

  v4 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a1 + 40))
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if ((*(_BYTE *)(a1 + 40) != 0) != (v4 != 0))
      return 0;
  }
  else
  {
    v6 = sub_20C00A5B4((uint64_t *)a1, a2);
    if ((v6 & 1) == 0)
      return 0;
  }
  v7 = *(unsigned __int8 *)(a2 + 96);
  if (*(_BYTE *)(a1 + 96))
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((*(_BYTE *)(a1 + 96) != 0) != (v7 != 0))
      return 0;
  }
  else
  {
    v9 = sub_20C009E8C((unsigned __int8 *)(a1 + 48), (unsigned __int8 *)(a2 + 48));
    if ((v9 & 1) == 0)
      return 0;
  }
  result = sub_20C3416A0((unsigned __int8 *)(a1 + 104), (unsigned __int8 *)(a2 + 104));
  if (!(_DWORD)result)
    return result;
  if (*(_BYTE *)(a1 + 176) && *(_BYTE *)(a2 + 176))
  {
    if (!sub_20BF5A4C0((_QWORD *)(a1 + 136), a2 + 136))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 176) != 0) != (*(_BYTE *)(a2 + 176) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 224) && *(_BYTE *)(a2 + 224))
  {
    if (!sub_20BF5A4C0((_QWORD *)(a1 + 184), a2 + 184))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 224) != 0) != (*(_BYTE *)(a2 + 224) != 0))
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 233) && *(_BYTE *)(a2 + 233))
  {
    if (*(unsigned __int8 *)(a1 + 232) != *(unsigned __int8 *)(a2 + 232))
      return 0;
  }
  else if ((*(_BYTE *)(a1 + 233) != 0) != (*(_BYTE *)(a2 + 233) != 0))
  {
    return 0;
  }
  result = sub_20BEB560C(a1 + 240, a2 + 240);
  if (!(_DWORD)result)
    return result;
  if (*(_QWORD *)(a1 + 256) == *(_QWORD *)(a2 + 256))
    return *(_QWORD *)(a1 + 264) == *(_QWORD *)(a2 + 264);
  return 0;
}

uint64_t sub_20C3416A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;

  if (a1[24])
    v2 = a2[24] == 0;
  else
    v2 = 1;
  if (v2)
    return (a1[24] != 0) == (a2[24] != 0);
  v4 = a1[23];
  if ((v4 & 0x80u) == 0)
    v5 = a1[23];
  else
    v5 = *((_QWORD *)a1 + 1);
  v6 = a2[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a1++;
    v9 = v10;
    v12 = *a2++;
    v11 = v12;
    v14 = v8-- != 0;
    v2 = v9 == v11;
    v3 = v9 == v11;
  }
  while (v2 && v14);
  return v3;
}

unint64_t sub_20C341770(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int **a4, uint64_t a5)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a2 + 48);
  if (*(_BYTE *)(a1 + 8))
    v5 += (unint64_t)(*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_20C3417AC(a1, a3, a4, a5);
}

unint64_t sub_20C3417AC(uint64_t a1, uint64_t *a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v8 = *a2;
  v9 = a2[1] - v8;
  if (v9)
  {
    v10 = 0xF0F0F0F0F0F0F0F1 * (v9 >> 4);
    do
    {
      --v10;
      v11 = v8 + 272;
      sub_20C341880(a1, v8);
      v8 = v11;
    }
    while (v10);
  }
  return sub_20C341828(a1, a3, a4);
}

unint64_t sub_20C341828(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  unint64_t v5;

  v5 = pxrInternal__aapl__pxrReserved__::hash_value(a2);
  if (*(_BYTE *)(a1 + 8))
    v5 += (*(_QWORD *)a1 + v5 + (*(_QWORD *)a1 + v5) * (*(_QWORD *)a1 + v5)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v5;
  return sub_20C341C3C(a1, a3);
}

unint64_t sub_20C341880(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  result = sub_20C3418CC(a2);
  if (*(_BYTE *)(a1 + 8))
    result += (*(_QWORD *)a1 + result + (*(_QWORD *)a1 + result) * (*(_QWORD *)a1 + result)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = result;
  return result;
}

unint64_t sub_20C3418CC(uint64_t a1)
{
  unint64_t result;
  unint64_t v3;
  uint64_t v4;
  char v5;

  v4 = 0;
  v5 = 0;
  sub_20C341A38((uint64_t)&v4, (uint64_t *)(a1 + 264), a1 + 240, (unsigned int *)(a1 + 256));
  result = bswap64(0x9E3779B97F4A7C55 * v4);
  v3 = result;
  if (*(_BYTE *)(a1 + 40))
  {
    v4 = 0;
    v5 = 0;
    sub_20C341AE4((unint64_t)&v4, (uint64_t *)&v3, (uint64_t *)a1);
    result = bswap64(0x9E3779B97F4A7C55 * v4);
    v3 = result;
  }
  if (*(_BYTE *)(a1 + 96))
  {
    v4 = 0;
    v5 = 0;
    sub_20C341B18((uint64_t)&v4, (uint64_t *)&v3, (pxrInternal__aapl__pxrReserved__ *)(a1 + 48));
    result = bswap64(0x9E3779B97F4A7C55 * v4);
    v3 = result;
  }
  if (*(_BYTE *)(a1 + 128))
  {
    v4 = 0;
    v5 = 0;
    sub_20C341B4C((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v4, (uint64_t *)&v3, a1 + 104);
    result = bswap64(0x9E3779B97F4A7C55 * v4);
    v3 = result;
  }
  if (*(_BYTE *)(a1 + 176))
  {
    v4 = 0;
    v5 = 0;
    sub_20C341B94((uint64_t)&v4, (uint64_t *)&v3, (uint64_t *)(a1 + 136));
    result = bswap64(0x9E3779B97F4A7C55 * v4);
    v3 = result;
  }
  if (*(_BYTE *)(a1 + 224))
  {
    v4 = 0;
    v5 = 0;
    sub_20C341B94((uint64_t)&v4, (uint64_t *)&v3, (uint64_t *)(a1 + 184));
    result = bswap64(0x9E3779B97F4A7C55 * v4);
  }
  if (*(_BYTE *)(a1 + 233))
    return bswap64(0x9E3779B97F4A7C55* (*(unsigned __int8 *)(a1 + 232)+ ((result+ *(unsigned __int8 *)(a1 + 232)+ (result + *(unsigned __int8 *)(a1 + 232)) * (result + *(unsigned __int8 *)(a1 + 232))) >> 1)));
  return result;
}

uint64_t sub_20C341A38(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v4;

  v4 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v4 += (unint64_t)(*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_20C341A70(a1, a3, a4);
}

uint64_t sub_20C341A70(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(a2 + 8);
  v5 = (uint64_t *)(a2 + 8);
  if (v6)
  {
    v7 = sub_20BEB47BC(v5);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
  else
  {
    v8 = 0;
  }
  if (*(_BYTE *)(a1 + 8))
    v8 += (unint64_t)(*(_QWORD *)a1 + v8 + (*(_QWORD *)a1 + v8) * (*(_QWORD *)a1 + v8)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v8;
  return sub_20BFD84AC(a1, a3);
}

unint64_t sub_20C341AE4(unint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v3 += (unint64_t)(*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return sub_20C2880B0(a1, a3);
}

unint64_t sub_20C341B18(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v3 += (unint64_t)(*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return sub_20C00A538(a1, a3);
}

unint64_t sub_20C341B4C(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  char *v6;

  v3 = *a2;
  if (*((_BYTE *)a1 + 8))
    v3 += (unint64_t)(*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *((_BYTE *)a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  v4 = *(char *)(a3 + 23);
  if (v4 >= 0)
    v5 = (pxrInternal__aapl__pxrReserved__ *)a3;
  else
    v5 = *(pxrInternal__aapl__pxrReserved__ **)a3;
  if (v4 >= 0)
    v6 = (char *)*(unsigned __int8 *)(a3 + 23);
  else
    v6 = *(char **)(a3 + 8);
  return pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, v5, v6);
}

uint64_t sub_20C341B94(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;

  v3 = *a2;
  if (*(_BYTE *)(a1 + 8))
    v3 += (unint64_t)(*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return sub_20C341BC8(a1, a3);
}

uint64_t sub_20C341BC8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double *v5;
  double *v6;

  v2 = result;
  v3 = *a2;
  if (*(_BYTE *)(result + 8))
    v3 += (unint64_t)(*(_QWORD *)result + v3 + (*(_QWORD *)result + v3) * (*(_QWORD *)result + v3)) >> 1;
  else
    *(_BYTE *)(result + 8) = 1;
  *(_QWORD *)result = v3;
  v4 = *a2;
  if (*a2)
  {
    v5 = (double *)a2[4];
    do
    {
      --v4;
      v6 = v5 + 2;
      result = sub_20BF5A450(v2, v5);
      v5 = v6;
    }
    while (v4);
  }
  return result;
}

unint64_t sub_20C341C3C(uint64_t a1, uint64_t a2)
{
  unint64_t result;

  result = pxrInternal__aapl__pxrReserved__::hash_value(a2);
  if (*(_BYTE *)(a1 + 8))
    result += (*(_QWORD *)a1 + result + (*(_QWORD *)a1 + result) * (*(_QWORD *)a1 + result)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  unint64_t v1;
  BOOL v2;

  if ((unint64_t)this - 0x20000000 >= 0xFFFFFFFFE0000001
    && ((v1 = (unint64_t)(2 * (_QWORD)this + 7) >> 3, 0x7FFFFFFF - v1 >= 4 * (uint64_t)this)
      ? (v2 = 0x7FFFFFFF - v1 - 4 * (_QWORD)this >= 4)
      : (v2 = 0),
        v2))
  {
    return pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)(4 * (_QWORD)this + v1 + 4));
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize(0);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  unint64_t v2;

  if ((unint64_t)this - 0x20000000 < 0xFFFFFFFFE0000001)
    return 0;
  v2 = (unint64_t)(2 * (_QWORD)this + 7) >> 3;
  if (0x7FFFFFFF - v2 >= 4 * (uint64_t)this && 0x7FFFFFFF - v2 - 4 * (_QWORD)this >= 4)
    return 4 * (_QWORD)this + v2 + 4;
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this, const int *a2, char *a3, char *a4)
{
  const int *v5;
  unint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::TfFastCompression *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v13;
  uint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  __int16 *v18;
  unint64_t v19;
  char *v20;
  _BYTE *v21;
  int v22;
  int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void ***v48;
  void **v49;

  v5 = a2;
  v7 = 4 * (_QWORD)a2;
  v8 = 2 * (_QWORD)a2;
  if ((unint64_t)(a2 - 0x8000000) >= 0xFFFFFFFFE0000001)
  {
    v11 = 0x7FFFFFFF - ((unint64_t)(v8 + 7) >> 3);
    if (v11 - 4 * (_QWORD)a2 >= 4 && v11 >= v7)
      v13 = v7 + ((unint64_t)(v8 + 7) >> 3) + 4;
    else
      v13 = 0;
    v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](v13);
    goto LABEL_11;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](0);
  if (v5)
  {
LABEL_11:
    v45 = a3;
    sub_20C343DD8((uint64_t)&v46, 0, 0.0, 0.5);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      LODWORD(v49) = *(_DWORD *)((char *)this + v14) - v16;
      v48 = &v49;
      v18 = sub_20C344050(&v46, (int *)&v49, (uint64_t)&unk_20CAC184C, (int **)&v48);
      v19 = *((_QWORD *)v18 + 2) + 1;
      *((_QWORD *)v18 + 2) = v19;
      if (v19 <= v17)
      {
        if (v19 == v17 && (int)v49 > v15)
          v15 = (int)v49;
      }
      else
      {
        v15 = (int)v49;
        v17 = v19;
      }
      v16 = *(_DWORD *)((char *)this + v14);
      v14 += 4;
    }
    while (v7 != v14);
    v49 = (void **)&v47;
    sub_20C343FF0(&v49);
    *(_DWORD *)v9 = v15;
    v20 = (char *)v9 + 4;
    v21 = (char *)v9 + ((unint64_t)(v8 + 7) >> 3) + 4;
    if ((unint64_t)v5 < 4)
    {
      v22 = 0;
      a3 = v45;
    }
    else
    {
      v22 = 0;
      a3 = v45;
      do
      {
        v23 = 0;
        v24 = 0;
        do
        {
          v25 = v22;
          v26 = *(_DWORD *)this;
          this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)this + 4);
          v22 = v26;
          v27 = v26 - v25;
          if (v26 - v25 != v15)
          {
            if (v27 == (char)v27)
            {
              v28 = 1 << v23;
              *v21 = v27;
              v29 = 1;
            }
            else
            {
              v28 = 3 << v23;
              *(_DWORD *)v21 = v27;
              v29 = 4;
            }
            v21 += v29;
            v24 |= v28;
          }
          v23 += 2;
        }
        while (v23 != 8);
        *v20++ = v24;
        --v5;
      }
      while ((unint64_t)v5 > 3);
    }
    if (v5 == (const int *)1)
    {
      v37 = *(_DWORD *)this - v22;
      if (v37 == v15)
      {
        v31 = 0;
      }
      else if (v37 == (char)v37)
      {
        *v21++ = v37;
        v31 = 1;
      }
      else
      {
        *(_DWORD *)v21 = v37;
        v21 += 4;
        v31 = 3;
      }
    }
    else if (v5 == (const int *)2)
    {
      v38 = *(_DWORD *)this;
      v39 = *(_DWORD *)this - v22;
      if (v39 == v15)
      {
        v31 = 0;
      }
      else if (v39 == (char)v39)
      {
        *v21++ = v39;
        v31 = 1;
      }
      else
      {
        *(_DWORD *)v21 = v39;
        v21 += 4;
        v31 = 3;
      }
      v40 = *((_DWORD *)this + 1) - v38;
      if (v40 != v15)
      {
        if (v40 == (char)v40)
        {
          *v21 = v40;
          v41 = 4;
          v42 = 1;
        }
        else
        {
          *(_DWORD *)v21 = v40;
          v41 = 12;
          v42 = 4;
        }
        v21 += v42;
        v31 |= v41;
      }
    }
    else
    {
      if (v5 != (const int *)3)
      {
LABEL_57:
        v10 = v21 - (_BYTE *)v9;
        goto LABEL_58;
      }
      v30 = 0;
      v31 = 0;
      do
      {
        v33 = *(_DWORD *)this;
        this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)this + 4);
        v32 = v33;
        v34 = v33 - v22;
        if (v33 - v22 != v15)
        {
          if (v34 == (char)v34)
          {
            v35 = 1 << v30;
            *v21 = v34;
            v36 = 1;
          }
          else
          {
            v35 = 3 << v30;
            *(_DWORD *)v21 = v34;
            v36 = 4;
          }
          v21 += v36;
          v31 |= v35;
        }
        v30 += 2;
        v22 = v32;
      }
      while (v30 != 6);
    }
    *v20 = v31;
    goto LABEL_57;
  }
  v10 = 0;
LABEL_58:
  v43 = pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer(v9, a3, v10);
  operator delete[](v9);
  return v43;
}

void sub_20C3420DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete[](v10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this, const unsigned int *a2, char *a3, char *a4)
{
  const unsigned int *v5;
  unint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::TfFastCompression *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  __int16 *v18;
  unint64_t v19;
  char *v20;
  _BYTE *v21;
  int v22;
  int v23;
  char v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void ***v48;
  void **v49;

  v5 = a2;
  v7 = 4 * (_QWORD)a2;
  v8 = 2 * (_QWORD)a2;
  if ((unint64_t)(a2 - 0x10000000) >= 0xFFFFFFFFC0000001)
  {
    v11 = 0xFFFFFFFF - ((unint64_t)(v8 + 7) >> 3);
    if (v11 - 4 * (_QWORD)a2 >= 4 && v11 >= v7)
      v13 = v7 + ((unint64_t)(v8 + 7) >> 3) + 4;
    else
      v13 = 0;
    v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](v13);
    goto LABEL_11;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](0);
  if (v5)
  {
LABEL_11:
    v45 = a3;
    sub_20C343DD8((uint64_t)&v46, 0, 0.0, 0.5);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      LODWORD(v49) = *(_DWORD *)((char *)this + v14) - v15;
      v48 = &v49;
      v18 = sub_20C344050(&v46, (int *)&v49, (uint64_t)&unk_20CAC184C, (int **)&v48);
      v19 = *((_QWORD *)v18 + 2) + 1;
      *((_QWORD *)v18 + 2) = v19;
      if (v19 <= v16)
      {
        if (v19 == v16 && (int)v49 > v17)
          v17 = (int)v49;
      }
      else
      {
        v17 = (int)v49;
        v16 = v19;
      }
      v15 = *(_DWORD *)((char *)this + v14);
      v14 += 4;
    }
    while (v7 != v14);
    v49 = (void **)&v47;
    sub_20C343FF0(&v49);
    *(_DWORD *)v9 = v17;
    v20 = (char *)v9 + 4;
    v21 = (char *)v9 + ((unint64_t)(v8 + 7) >> 3) + 4;
    if ((unint64_t)v5 < 4)
    {
      v22 = 0;
      a3 = v45;
    }
    else
    {
      v22 = 0;
      a3 = v45;
      do
      {
        v23 = 0;
        v24 = 0;
        do
        {
          v25 = v22;
          v26 = *(_DWORD *)this;
          this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)this + 4);
          v22 = v26;
          v27 = v26 - v25;
          if (v26 - v25 != v17)
          {
            if (v27 == (char)v27)
            {
              v28 = 1 << v23;
              *v21 = v27;
              v29 = 1;
            }
            else
            {
              v28 = 3 << v23;
              *(_DWORD *)v21 = v27;
              v29 = 4;
            }
            v21 += v29;
            v24 |= v28;
          }
          v23 += 2;
        }
        while (v23 != 8);
        *v20++ = v24;
        --v5;
      }
      while ((unint64_t)v5 > 3);
    }
    if (v5 == (const unsigned int *)1)
    {
      v37 = *(_DWORD *)this - v22;
      if (v37 == v17)
      {
        v31 = 0;
      }
      else if (v37 == (char)v37)
      {
        *v21++ = v37;
        v31 = 1;
      }
      else
      {
        *(_DWORD *)v21 = v37;
        v21 += 4;
        v31 = 3;
      }
    }
    else if (v5 == (const unsigned int *)2)
    {
      v38 = *(_DWORD *)this;
      v39 = *(_DWORD *)this - v22;
      if (v39 == v17)
      {
        v31 = 0;
      }
      else if (v39 == (char)v39)
      {
        *v21++ = v39;
        v31 = 1;
      }
      else
      {
        *(_DWORD *)v21 = v39;
        v21 += 4;
        v31 = 3;
      }
      v40 = *((_DWORD *)this + 1) - v38;
      if (v40 != v17)
      {
        if (v40 == (char)v40)
        {
          *v21 = v40;
          v41 = 4;
          v42 = 1;
        }
        else
        {
          *(_DWORD *)v21 = v40;
          v41 = 12;
          v42 = 4;
        }
        v21 += v42;
        v31 |= v41;
      }
    }
    else
    {
      if (v5 != (const unsigned int *)3)
      {
LABEL_57:
        v10 = v21 - (_BYTE *)v9;
        goto LABEL_58;
      }
      v30 = 0;
      v31 = 0;
      do
      {
        v33 = *(_DWORD *)this;
        this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)this + 4);
        v32 = v33;
        v34 = v33 - v22;
        if (v33 - v22 != v17)
        {
          if (v34 == (char)v34)
          {
            v35 = 1 << v30;
            *v21 = v34;
            v36 = 1;
          }
          else
          {
            v35 = 3 << v30;
            *(_DWORD *)v21 = v34;
            v36 = 4;
          }
          v21 += v36;
          v31 |= v35;
        }
        v30 += 2;
        v22 = v32;
      }
      while (v30 != 6);
    }
    *v20 = v31;
    goto LABEL_57;
  }
  v10 = 0;
LABEL_58:
  v43 = pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer(v9, a3, v10);
  operator delete[](v9);
  return v43;
}

void sub_20C3424C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete[](v10);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this, char *a2, unint64_t a3, int64_t a4, char *__dst, char *a6)
{
  char *v6;
  unint64_t v7;
  size_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;

  v6 = __dst;
  v7 = a4;
  if ((unint64_t)(a4 - 0x20000000) >= 0xFFFFFFFFE0000001)
  {
    v12 = (unint64_t)(2 * a4 + 7) >> 3;
    if (0x7FFFFFFF - v12 >= 4 * a4 && 0x7FFFFFFF - v12 - 4 * a4 >= 4)
      v10 = 4 * a4 + v12 + 4;
    else
      v10 = 0;
    if (__dst)
      goto LABEL_3;
  }
  else
  {
    v10 = 0;
    if (__dst)
    {
LABEL_3:
      v11 = 0;
      goto LABEL_12;
    }
  }
  v11 = (char *)operator new[](v10);
  v6 = v11;
LABEL_12:
  v14 = pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(this, v6, a2, v10);
  if (!v14)
  {
LABEL_24:
    v7 = 0;
    goto LABEL_25;
  }
  if (v14 <= 3)
  {
    v24 = "usd/integerCoding.cpp";
    v25 = "_DecodeIntegers";
    v26 = 400;
    v27 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = int]";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_24;
  }
  v15 = 2 * v7 + 7;
  v16 = (v15 >> 3) + 4;
  if (v16 > v14)
  {
    v24 = "usd/integerCoding.cpp";
    v25 = "_DecodeIntegers";
    v26 = 413;
    v27 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = int]";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_24;
  }
  v17 = v6 + 4;
  if (v15 >= 8)
  {
    v18 = 0;
    v19 = 0;
    v20 = v6 + 4;
    do
    {
      v22 = *v20++;
      v21 = v22;
      if (v18 < v7)
        __asm { BR              X5 }
      ++v19;
      v18 += 4;
    }
    while (v19 != v15 >> 3);
  }
  if (v16 > v14)
  {
    v24 = "usd/integerCoding.cpp";
    v25 = "_DecodeIntegers";
    v26 = 421;
    v27 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = int]";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read variable length integer data section.");
    goto LABEL_24;
  }
  if (v7 >= 4)
    __asm { BR              X0 }
  if (v7 == 3)
    __asm { BR              X15 }
  if (v7 == 2)
    __asm { BR              X14 }
  if (v7 == 1)
    __asm { BR              X13 }
LABEL_25:
  if (v11)
    operator delete[](v11);
  return v7;
}

{
  char *v6;
  unint64_t v7;
  size_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;

  v6 = __dst;
  v7 = a4;
  if ((unint64_t)(a4 - 0x20000000) >= 0xFFFFFFFFE0000001)
  {
    v12 = (unint64_t)(2 * a4 + 7) >> 3;
    if (0x7FFFFFFF - v12 >= 4 * a4 && 0x7FFFFFFF - v12 - 4 * a4 >= 4)
      v10 = 4 * a4 + v12 + 4;
    else
      v10 = 0;
    if (__dst)
      goto LABEL_3;
  }
  else
  {
    v10 = 0;
    if (__dst)
    {
LABEL_3:
      v11 = 0;
      goto LABEL_12;
    }
  }
  v11 = (char *)operator new[](v10);
  v6 = v11;
LABEL_12:
  v14 = pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(this, v6, a2, v10);
  if (!v14)
  {
LABEL_24:
    v7 = 0;
    goto LABEL_25;
  }
  if (v14 <= 3)
  {
    v24 = "usd/integerCoding.cpp";
    v25 = "_DecodeIntegers";
    v26 = 400;
    v27 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = unsigned int]";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_24;
  }
  v15 = 2 * v7 + 7;
  v16 = (v15 >> 3) + 4;
  if (v16 > v14)
  {
    v24 = "usd/integerCoding.cpp";
    v25 = "_DecodeIntegers";
    v26 = 413;
    v27 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = unsigned int]";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_24;
  }
  v17 = v6 + 4;
  if (v15 >= 8)
  {
    v18 = 0;
    v19 = 0;
    v20 = v6 + 4;
    do
    {
      v22 = *v20++;
      v21 = v22;
      if (v18 < v7)
        __asm { BR              X5 }
      ++v19;
      v18 += 4;
    }
    while (v19 != v15 >> 3);
  }
  if (v16 > v14)
  {
    v24 = "usd/integerCoding.cpp";
    v25 = "_DecodeIntegers";
    v26 = 421;
    v27 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = unsigned int]";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read variable length integer data section.");
    goto LABEL_24;
  }
  if (v7 >= 4)
    __asm { BR              X0 }
  if (v7 == 3)
    __asm { BR              X15 }
  if (v7 == 2)
    __asm { BR              X14 }
  if (v7 == 1)
    __asm { BR              X13 }
LABEL_25:
  if (v11)
    operator delete[](v11);
  return v7;
}

uint64_t sub_20C342890()
{
  char *v0;
  int v1;
  unsigned int v2;
  _DWORD *v3;

  *v3 = *v0 + v1;
  return ((uint64_t (*)(void))((char *)sub_20C3428E0 + 4 * byte_20CADE9C4[(v2 >> 2) & 3]))();
}

void sub_20C342898()
{
  __int16 *v0;
  int v1;
  _DWORD *v2;

  *v2 = *v0 + v1;
  JUMPOUT(0x20C342720);
}

uint64_t sub_20C3428B0()
{
  __int16 *v0;
  int v1;
  unsigned int v2;
  _DWORD *v3;

  *v3 = *v0 + v1;
  return ((uint64_t (*)())((char *)sub_20C3428E0 + 4 * byte_20CADE9C4[(v2 >> 2) & 3]))();
}

void sub_20C3428E0()
{
  char *v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v2 + 4) = *v0 + v1;
  JUMPOUT(0x20C342720);
}

void sub_20C342900(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete[](v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C342CB0()
{
  char *v0;
  int v1;
  unsigned int v2;
  _DWORD *v3;

  *v3 = *v0 + v1;
  return ((uint64_t (*)(void))((char *)sub_20C342D00 + 4 * byte_20CADE9DC[(v2 >> 2) & 3]))();
}

void sub_20C342CB8()
{
  __int16 *v0;
  int v1;
  _DWORD *v2;

  *v2 = *v0 + v1;
  JUMPOUT(0x20C342B40);
}

uint64_t sub_20C342CD0()
{
  __int16 *v0;
  int v1;
  unsigned int v2;
  _DWORD *v3;

  *v3 = *v0 + v1;
  return ((uint64_t (*)())((char *)sub_20C342D00 + 4 * byte_20CADE9DC[(v2 >> 2) & 3]))();
}

void sub_20C342D00()
{
  char *v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v2 + 4) = *v0 + v1;
  JUMPOUT(0x20C342B40);
}

void sub_20C342D20(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete[](v1);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  unint64_t v1;
  BOOL v2;

  if ((unint64_t)this - 0x1000000000000000 >= 0xF000000000000001
    && ((v1 = (unint64_t)(2 * (_QWORD)this + 7) >> 3, (v1 ^ 0x7FFFFFFFFFFFFFFFLL) >= 8 * (uint64_t)this)
      ? (v2 = (v1 ^ 0x7FFFFFFFFFFFFFFFLL) - 8 * (_QWORD)this >= 8)
      : (v2 = 0),
        v2))
  {
    return pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)(8 * (_QWORD)this + v1 + 8));
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize(0);
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  unint64_t v2;

  if ((unint64_t)this - 0x1000000000000000 < 0xF000000000000001)
    return 0;
  v2 = (unint64_t)(2 * (_QWORD)this + 7) >> 3;
  if ((v2 ^ 0x7FFFFFFFFFFFFFFFLL) >= 8 * (uint64_t)this && (v2 ^ 0x7FFFFFFFFFFFFFFFLL) - 8 * (_QWORD)this >= 8)
    return 8 * (_QWORD)this + v2 + 8;
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::CompressToBuffer(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this, const uint64_t *a2, char *a3, char *a4)
{
  const uint64_t *v5;
  unint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::TfFastCompression *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  __int16 *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  void **v39;
  void **v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void ***v48;
  void **v49;

  v5 = a2;
  v7 = 8 * (_QWORD)a2;
  v8 = 2 * (_QWORD)a2;
  if ((unint64_t)(a2 - 0x200000000000000) >= 0xF000000000000001)
  {
    v11 = ((unint64_t)(v8 + 7) >> 3) ^ 0x7FFFFFFFFFFFFFFFLL;
    if (v11 - 8 * (_QWORD)a2 >= 8 && v11 >= v7)
      v13 = v7 + ((unint64_t)(v8 + 7) >> 3) + 8;
    else
      v13 = 0;
    v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](v13);
    goto LABEL_11;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](0);
  if (v5)
  {
LABEL_11:
    v45 = a3;
    sub_20C3444D0((uint64_t)&v46, 0, 0.0, 0.5);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v49 = (void **)(*(_QWORD *)((char *)this + v14) - v16);
      v48 = &v49;
      v18 = sub_20C344700(&v46, (uint64_t *)&v49, (uint64_t)&unk_20CAC184C, &v48);
      v19 = *((_QWORD *)v18 + 2) + 1;
      *((_QWORD *)v18 + 2) = v19;
      if (v19 <= v17)
      {
        if (v19 == v17 && (uint64_t)v49 > (uint64_t)v15)
          v15 = v49;
      }
      else
      {
        v15 = v49;
        v17 = v19;
      }
      v16 = *(_QWORD *)((char *)this + v14);
      v14 += 8;
    }
    while (v7 != v14);
    v49 = (void **)&v47;
    sub_20C343FF0(&v49);
    *(_QWORD *)v9 = v15;
    v20 = (char *)v9 + 8;
    v21 = (char *)v9 + ((unint64_t)(v8 + 7) >> 3) + 8;
    if ((unint64_t)v5 < 4)
    {
      v22 = 0;
      a3 = v45;
    }
    else
    {
      v22 = 0;
      a3 = v45;
      do
      {
        v23 = 0;
        v24 = 0;
        do
        {
          v25 = v22;
          v26 = *(_QWORD *)this;
          this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)((char *)this + 8);
          v22 = v26;
          v27 = v26 - v25;
          if ((void **)(v26 - v25) != v15)
          {
            if (v27 == (__int16)v27)
            {
              v28 = 1 << v23;
              *(_WORD *)v21 = v27;
              v29 = 2;
            }
            else
            {
              v28 = 3 << v23;
              *(_QWORD *)v21 = v27;
              v29 = 8;
            }
            v21 += v29;
            v24 |= v28;
          }
          v23 += 2;
        }
        while (v23 != 8);
        *v20++ = v24;
        v5 = (const uint64_t *)((char *)v5 - 4);
      }
      while ((unint64_t)v5 > 3);
    }
    if (v5 == (const uint64_t *)1)
    {
      v37 = (void **)(*(_QWORD *)this - v22);
      if (v37 == v15)
      {
        v31 = 0;
      }
      else if (v37 == (void **)(__int16)v37)
      {
        *(_WORD *)v21 = (_WORD)v37;
        v21 += 2;
        v31 = 1;
      }
      else
      {
        *(_QWORD *)v21 = v37;
        v21 += 8;
        v31 = 3;
      }
    }
    else if (v5 == (const uint64_t *)2)
    {
      v38 = *(_QWORD *)this;
      v39 = (void **)(*(_QWORD *)this - v22);
      if (v39 == v15)
      {
        v31 = 0;
      }
      else if (v39 == (void **)(__int16)v39)
      {
        *(_WORD *)v21 = (_WORD)v39;
        v21 += 2;
        v31 = 1;
      }
      else
      {
        *(_QWORD *)v21 = v39;
        v21 += 8;
        v31 = 3;
      }
      v40 = (void **)(*((_QWORD *)this + 1) - v38);
      if (v40 != v15)
      {
        if (v40 == (void **)(__int16)v40)
        {
          *(_WORD *)v21 = (_WORD)v40;
          v41 = 4;
          v42 = 2;
        }
        else
        {
          *(_QWORD *)v21 = v40;
          v41 = 12;
          v42 = 8;
        }
        v21 += v42;
        v31 |= v41;
      }
    }
    else
    {
      if (v5 != (const uint64_t *)3)
      {
LABEL_57:
        v10 = v21 - (char *)v9;
        goto LABEL_58;
      }
      v30 = 0;
      v31 = 0;
      do
      {
        v33 = *(_QWORD *)this;
        this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)((char *)this + 8);
        v32 = v33;
        v34 = v33 - v22;
        if ((void **)(v33 - v22) != v15)
        {
          if (v34 == (__int16)v34)
          {
            v35 = 1 << v30;
            *(_WORD *)v21 = v34;
            v36 = 2;
          }
          else
          {
            v35 = 3 << v30;
            *(_QWORD *)v21 = v34;
            v36 = 8;
          }
          v21 += v36;
          v31 |= v35;
        }
        v30 += 2;
        v22 = v32;
      }
      while (v30 != 6);
    }
    *v20 = v31;
    goto LABEL_57;
  }
  v10 = 0;
LABEL_58:
  v43 = pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer(v9, a3, v10);
  operator delete[](v9);
  return v43;
}

void sub_20C343184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete[](v10);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::CompressToBuffer(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this, const unint64_t *a2, char *a3, char *a4)
{
  const unint64_t *v5;
  unint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::TfFastCompression *v9;
  unint64_t v10;
  unint64_t v11;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  void **v17;
  __int16 *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  void **v37;
  uint64_t v38;
  void **v39;
  void **v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void ***v48;
  void **v49;

  v5 = a2;
  v7 = 8 * (_QWORD)a2;
  v8 = 2 * (_QWORD)a2;
  if ((unint64_t)(a2 - 0x400000000000000) >= 0xE000000000000001)
  {
    v11 = ~((unint64_t)(v8 + 7) >> 3);
    if (v11 - 8 * (_QWORD)a2 >= 8 && v11 >= v7)
      v13 = v7 + ((unint64_t)(v8 + 7) >> 3) + 8;
    else
      v13 = 0;
    v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](v13);
    goto LABEL_11;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](0);
  if (v5)
  {
LABEL_11:
    v45 = a3;
    sub_20C3444D0((uint64_t)&v46, 0, 0.0, 0.5);
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    do
    {
      v49 = (void **)(*(_QWORD *)((char *)this + v14) - v15);
      v48 = &v49;
      v18 = sub_20C344700(&v46, (uint64_t *)&v49, (uint64_t)&unk_20CAC184C, &v48);
      v19 = *((_QWORD *)v18 + 2) + 1;
      *((_QWORD *)v18 + 2) = v19;
      if (v19 <= v16)
      {
        if (v19 == v16 && (uint64_t)v49 > (uint64_t)v17)
          v17 = v49;
      }
      else
      {
        v17 = v49;
        v16 = v19;
      }
      v15 = *(_QWORD *)((char *)this + v14);
      v14 += 8;
    }
    while (v7 != v14);
    v49 = (void **)&v47;
    sub_20C343FF0(&v49);
    *(_QWORD *)v9 = v17;
    v20 = (char *)v9 + 8;
    v21 = (char *)v9 + ((unint64_t)(v8 + 7) >> 3) + 8;
    if ((unint64_t)v5 < 4)
    {
      v22 = 0;
      a3 = v45;
    }
    else
    {
      v22 = 0;
      a3 = v45;
      do
      {
        v23 = 0;
        v24 = 0;
        do
        {
          v25 = v22;
          v26 = *(_QWORD *)this;
          this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)((char *)this + 8);
          v22 = v26;
          v27 = v26 - v25;
          if ((void **)(v26 - v25) != v17)
          {
            if (v27 == (__int16)v27)
            {
              v28 = 1 << v23;
              *(_WORD *)v21 = v27;
              v29 = 2;
            }
            else
            {
              v28 = 3 << v23;
              *(_QWORD *)v21 = v27;
              v29 = 8;
            }
            v21 += v29;
            v24 |= v28;
          }
          v23 += 2;
        }
        while (v23 != 8);
        *v20++ = v24;
        v5 = (const unint64_t *)((char *)v5 - 4);
      }
      while ((unint64_t)v5 > 3);
    }
    if (v5 == (const unint64_t *)1)
    {
      v37 = (void **)(*(_QWORD *)this - v22);
      if (v37 == v17)
      {
        v31 = 0;
      }
      else if (v37 == (void **)(__int16)v37)
      {
        *(_WORD *)v21 = (_WORD)v37;
        v21 += 2;
        v31 = 1;
      }
      else
      {
        *(_QWORD *)v21 = v37;
        v21 += 8;
        v31 = 3;
      }
    }
    else if (v5 == (const unint64_t *)2)
    {
      v38 = *(_QWORD *)this;
      v39 = (void **)(*(_QWORD *)this - v22);
      if (v39 == v17)
      {
        v31 = 0;
      }
      else if (v39 == (void **)(__int16)v39)
      {
        *(_WORD *)v21 = (_WORD)v39;
        v21 += 2;
        v31 = 1;
      }
      else
      {
        *(_QWORD *)v21 = v39;
        v21 += 8;
        v31 = 3;
      }
      v40 = (void **)(*((_QWORD *)this + 1) - v38);
      if (v40 != v17)
      {
        if (v40 == (void **)(__int16)v40)
        {
          *(_WORD *)v21 = (_WORD)v40;
          v41 = 4;
          v42 = 2;
        }
        else
        {
          *(_QWORD *)v21 = v40;
          v41 = 12;
          v42 = 8;
        }
        v21 += v42;
        v31 |= v41;
      }
    }
    else
    {
      if (v5 != (const unint64_t *)3)
      {
LABEL_57:
        v10 = v21 - (char *)v9;
        goto LABEL_58;
      }
      v30 = 0;
      v31 = 0;
      do
      {
        v33 = *(_QWORD *)this;
        this = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)((char *)this + 8);
        v32 = v33;
        v34 = v33 - v22;
        if ((void **)(v33 - v22) != v17)
        {
          if (v34 == (__int16)v34)
          {
            v35 = 1 << v30;
            *(_WORD *)v21 = v34;
            v36 = 2;
          }
          else
          {
            v35 = 3 << v30;
            *(_QWORD *)v21 = v34;
            v36 = 8;
          }
          v21 += v36;
          v31 |= v35;
        }
        v30 += 2;
        v22 = v32;
      }
      while (v30 != 6);
    }
    *v20 = v31;
    goto LABEL_57;
  }
  v10 = 0;
LABEL_58:
  v43 = pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer(v9, a3, v10);
  operator delete[](v9);
  return v43;
}

void sub_20C343570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete[](v10);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this, char *a2, unint64_t a3, int64_t a4, char *__dst, char *a6)
{
  char *v6;
  unint64_t v7;
  size_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;

  v6 = __dst;
  v7 = a4;
  if ((unint64_t)(a4 - 0x1000000000000000) >= 0xF000000000000001)
  {
    v12 = (unint64_t)(2 * a4 + 7) >> 3;
    if ((v12 ^ 0x7FFFFFFFFFFFFFFFLL) >= 8 * a4 && (v12 ^ 0x7FFFFFFFFFFFFFFFLL) - 8 * a4 >= 8)
      v10 = 8 * a4 + v12 + 8;
    else
      v10 = 0;
    if (__dst)
      goto LABEL_3;
  }
  else
  {
    v10 = 0;
    if (__dst)
    {
LABEL_3:
      v11 = 0;
      goto LABEL_12;
    }
  }
  v11 = (char *)operator new[](v10);
  v6 = v11;
LABEL_12:
  v14 = pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(this, v6, a2, v10);
  if (!v14)
  {
LABEL_24:
    v7 = 0;
    goto LABEL_25;
  }
  if (v14 <= 7)
  {
    v24 = "usd/integerCoding.cpp";
    v25 = "_DecodeIntegers";
    v26 = 400;
    v27 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = long long]";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_24;
  }
  v15 = 2 * v7 + 7;
  v16 = (v15 >> 3) + 8;
  if (v16 > v14)
  {
    v24 = "usd/integerCoding.cpp";
    v25 = "_DecodeIntegers";
    v26 = 413;
    v27 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = long long]";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_24;
  }
  v17 = v6 + 8;
  if (v15 >= 8)
  {
    v18 = 0;
    v19 = 0;
    v20 = v6 + 8;
    do
    {
      v22 = *v20++;
      v21 = v22;
      if (v18 < v7)
        __asm { BR              X5 }
      ++v19;
      v18 += 4;
    }
    while (v19 != v15 >> 3);
  }
  if (v16 > v14)
  {
    v24 = "usd/integerCoding.cpp";
    v25 = "_DecodeIntegers";
    v26 = 421;
    v27 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = long long]";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read variable length integer data section.");
    goto LABEL_24;
  }
  if (v7 >= 4)
    __asm { BR              X0 }
  if (v7 == 3)
    __asm { BR              X15 }
  if (v7 == 2)
    __asm { BR              X14 }
  if (v7 == 1)
    __asm { BR              X13 }
LABEL_25:
  if (v11)
    operator delete[](v11);
  return v7;
}

{
  char *v6;
  unint64_t v7;
  size_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char v21;
  char v22;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;

  v6 = __dst;
  v7 = a4;
  if ((unint64_t)(a4 - 0x1000000000000000) >= 0xF000000000000001)
  {
    v12 = (unint64_t)(2 * a4 + 7) >> 3;
    if ((v12 ^ 0x7FFFFFFFFFFFFFFFLL) >= 8 * a4 && (v12 ^ 0x7FFFFFFFFFFFFFFFLL) - 8 * a4 >= 8)
      v10 = 8 * a4 + v12 + 8;
    else
      v10 = 0;
    if (__dst)
      goto LABEL_3;
  }
  else
  {
    v10 = 0;
    if (__dst)
    {
LABEL_3:
      v11 = 0;
      goto LABEL_12;
    }
  }
  v11 = (char *)operator new[](v10);
  v6 = v11;
LABEL_12:
  v14 = pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(this, v6, a2, v10);
  if (!v14)
  {
LABEL_24:
    v7 = 0;
    goto LABEL_25;
  }
  if (v14 <= 7)
  {
    v24 = "usd/integerCoding.cpp";
    v25 = "_DecodeIntegers";
    v26 = 400;
    v27 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = unsigned long long]";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_24;
  }
  v15 = 2 * v7 + 7;
  v16 = (v15 >> 3) + 8;
  if (v16 > v14)
  {
    v24 = "usd/integerCoding.cpp";
    v25 = "_DecodeIntegers";
    v26 = 413;
    v27 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = unsigned long long]";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read codes section.");
    goto LABEL_24;
  }
  v17 = v6 + 8;
  if (v15 >= 8)
  {
    v18 = 0;
    v19 = 0;
    v20 = v6 + 8;
    do
    {
      v22 = *v20++;
      v21 = v22;
      if (v18 < v7)
        __asm { BR              X5 }
      ++v19;
      v18 += 4;
    }
    while (v19 != v15 >> 3);
  }
  if (v16 > v14)
  {
    v24 = "usd/integerCoding.cpp";
    v25 = "_DecodeIntegers";
    v26 = 421;
    v27 = "size_t pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_DecodeIntegers(const char *, size_t, size_t, "
          "Int *) [Int = unsigned long long]";
    v28 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Not enough decompressed bytes to read variable length integer data section.");
    goto LABEL_24;
  }
  if (v7 >= 4)
    __asm { BR              X0 }
  if (v7 == 3)
    __asm { BR              X15 }
  if (v7 == 2)
    __asm { BR              X14 }
  if (v7 == 1)
    __asm { BR              X13 }
LABEL_25:
  if (v11)
    operator delete[](v11);
  return v7;
}

uint64_t sub_20C343934()
{
  __int16 *v0;
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;

  *v3 = *v0 + v1;
  return ((uint64_t (*)(void))((char *)sub_20C343984 + 4 * byte_20CADE9F4[(v2 >> 2) & 3]))();
}

void sub_20C34393C()
{
  int *v0;
  uint64_t v1;
  _QWORD *v2;

  *v2 = *v0 + v1;
  JUMPOUT(0x20C3437C4);
}

uint64_t sub_20C343954()
{
  int *v0;
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;

  *v3 = *v0 + v1;
  return ((uint64_t (*)())((char *)sub_20C343984 + 4 * byte_20CADE9F4[(v2 >> 2) & 3]))();
}

void sub_20C343984()
{
  __int16 *v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = *v0 + v1;
  JUMPOUT(0x20C3437C4);
}

void sub_20C3439A4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete[](v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C343D50()
{
  __int16 *v0;
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;

  *v3 = *v0 + v1;
  return ((uint64_t (*)(void))((char *)sub_20C343DA0 + 4 * byte_20CADEA0C[(v2 >> 2) & 3]))();
}

void sub_20C343D58()
{
  int *v0;
  uint64_t v1;
  _QWORD *v2;

  *v2 = *v0 + v1;
  JUMPOUT(0x20C343BE0);
}

uint64_t sub_20C343D70()
{
  int *v0;
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;

  *v3 = *v0 + v1;
  return ((uint64_t (*)())((char *)sub_20C343DA0 + 4 * byte_20CADEA0C[(v2 >> 2) & 3]))();
}

void sub_20C343DA0()
{
  __int16 *v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = *v0 + v1;
  JUMPOUT(0x20C343BE0);
}

void sub_20C343DC0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete[](v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C343DD8(uint64_t a1, unint64_t a2, float a3, float a4)
{
  __int16 *v7;
  unint64_t v8;
  float v9;
  std::logic_error *exception;
  unint64_t v12;

  v12 = a2;
  sub_20BED1408((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0xAAAAAAAAAAAAAABLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  sub_20C343F6C((_QWORD *)(a1 + 8), v12);
  v7 = *(__int16 **)(a1 + 8);
  if (v7 == *(__int16 **)(a1 + 16))
    v7 = sub_20C343EF8();
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 22) = 1;
  v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_20C343EE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__int16 *sub_20C343EF8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25473CA68);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473CA68))
  {
    word_25473CA50 = -1;
    byte_25473CA52 = 1;
    __cxa_atexit((void (*)(void *))sub_20C344038, &word_25473CA50, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473CA68);
  }
  return &word_25473CA50;
}

_QWORD *sub_20C343F6C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE4FA4(a1, a2);
    v4 = a1[1];
    v5 = v4 + 24 * a2;
    do
    {
      *(_WORD *)v4 = -1;
      *(_BYTE *)(v4 + 2) = 0;
      v4 += 24;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C343FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C343FF0(&a9);
  _Unwind_Resume(a1);
}

void sub_20C343FF0(void ***a1)
{
  void **v1;
  __int16 *v2;
  __int16 *v3;
  __int16 *v4;
  int v5;

  v1 = *a1;
  v2 = (__int16 *)**a1;
  if (v2)
  {
    v3 = (__int16 *)v1[1];
    if (v3 != v2)
    {
      v4 = (__int16 *)v1[1];
      do
      {
        v5 = *(v4 - 12);
        v4 -= 12;
        if (v5 != -1)
          *(v3 - 12) = -1;
        v3 = v4;
      }
      while (v4 != v2);
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

__int16 *sub_20C344038(__int16 *result)
{
  if (*result != -1)
    *result = -1;
  return result;
}

__int16 *sub_20C344050(uint64_t *a1, int *a2, uint64_t a3, int **a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *result;
  int v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v6 = *a2;
  v7 = *a1;
  v8 = a1[4];
  v9 = *a1 & v6;
  result = (__int16 *)(v8 + 24 * v9);
  if (*result < 0)
  {
    LOWORD(v11) = 0;
  }
  else
  {
    if (*(_DWORD *)(v8 + 24 * v9 + 8) == (_DWORD)v6)
      return result;
    LOWORD(v11) = 0;
    while (1)
    {
      v11 = (__int16)(v11 + 1);
      v9 = (v9 + 1) & v7;
      result = (__int16 *)(v8 + 24 * v9);
      if (v11 > *result)
        break;
      if (*(_DWORD *)(v8 + 24 * v9 + 8) == (_DWORD)v6)
        return result;
    }
  }
  v12 = sub_20C3441E0((uint64_t)a1);
  v13 = a1[4];
  if ((v12 & 1) != 0)
  {
    v9 = *a1 & v6;
    if (*(__int16 *)(v13 + 24 * v9) < 0)
    {
      LOWORD(v11) = 0;
      v14 = *(unsigned __int16 *)(v13 + 24 * v9);
    }
    else
    {
      LOWORD(v11) = 0;
      do
      {
        v11 = (__int16)(v11 + 1);
        v9 = (v9 + 1) & *a1;
      }
      while (v11 <= *(__int16 *)(v13 + 24 * v9));
      v14 = *(unsigned __int16 *)(v13 + 24 * v9);
    }
  }
  else
  {
    v14 = *(unsigned __int16 *)(v13 + 24 * v9);
  }
  if (v14 == 0xFFFF)
  {
    v15 = v13 + 24 * v9;
    *(_DWORD *)(v15 + 8) = **a4;
    *(_QWORD *)(v15 + 16) = 0;
    *(_WORD *)v15 = v11;
  }
  else
  {
    v16 = **a4;
    v17 = 0;
    sub_20C3443F0(a1, v9, v11, v6, &v16);
    v13 = a1[4];
  }
  ++a1[6];
  return (__int16 *)(v13 + 24 * v9);
}

uint64_t sub_20C3441E0(uint64_t a1)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 48), v2 >= *(_QWORD *)(a1 + 56)))
  {
    v6 = sub_20BED1164((_QWORD *)a1);
    sub_20C3442A4(a1, v6);
    *(_BYTE *)(a1 + 72) = 0;
    return 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    *(_BYTE *)(a1 + 73) = 0;
    v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        v8 = *(float *)(a1 + 68);
        v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        sub_20C3442A4(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_20C3442A4(uint64_t a1, unint64_t a2)
{
  int *v3;
  int *v4;
  int *v5;
  int *v6;
  uint64_t v7;
  _QWORD v8[9];
  void **v9;

  sub_20C343DD8((uint64_t)&v7, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  v3 = *(int **)(a1 + 8);
  v4 = *(int **)(a1 + 16);
  if (v3 != v4)
  {
    v5 = v3 + 2;
    do
    {
      if (*((__int16 *)v5 - 4) != -1)
        sub_20C344378(&v7, v7 & *v5, 0, *v5, v5);
      v6 = v5 + 4;
      v5 += 6;
    }
    while (v6 != v4);
  }
  v8[5] = *(_QWORD *)(a1 + 48);
  sub_20BED1250(&v7, (uint64_t *)a1);
  v9 = (void **)v8;
  sub_20C343FF0(&v9);
}

void sub_20C344358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 40) = &a11;
  sub_20C343FF0((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_20C344378(_QWORD *a1, uint64_t a2, __int16 a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  __int16 *v6;
  int v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;

  v5 = a1[4];
  while (1)
  {
    v6 = (__int16 *)(v5 + 24 * a2);
    v7 = *v6;
    if (v7 >= a3)
      goto LABEL_5;
    v8 = (int *)(v5 + 24 * a2 + 8);
    if (v7 == -1)
      break;
    v9 = *a5;
    *a5 = *v8;
    *v8 = v9;
    v10 = v5 + 24 * a2;
    v11 = *((_QWORD *)a5 + 1);
    *((_QWORD *)a5 + 1) = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(v10 + 16) = v11;
    *v6 = a3;
    a3 = v7;
LABEL_5:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  result = *(__n128 *)a5;
  *(_OWORD *)v8 = *(_OWORD *)a5;
  *v6 = a3;
  return result;
}

__n128 sub_20C3443F0(uint64_t *a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, int *a5)
{
  uint64_t v5;
  unsigned __int16 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _WORD *v12;
  int i;
  uint64_t v14;
  int v15;
  uint64_t v16;
  __n128 result;

  v5 = a1[4];
  v6 = (unsigned __int16 *)(v5 + 24 * a2);
  v7 = *a5;
  *a5 = *((_DWORD *)v6 + 2);
  *((_DWORD *)v6 + 2) = v7;
  v8 = *((_QWORD *)a5 + 1);
  *((_QWORD *)a5 + 1) = *((_QWORD *)v6 + 2);
  *((_QWORD *)v6 + 2) = v8;
  LODWORD(v8) = *v6;
  *v6 = a3;
  v9 = *a1;
  v10 = *a1 & (a2 + 1);
  v11 = v8 + 1;
  v12 = (_WORD *)(v5 + 24 * v10);
  for (i = (unsigned __int16)*v12; i != 0xFFFF; i = (unsigned __int16)*v12)
  {
    if ((__int16)v11 <= (__int16)i)
    {
      i = v11;
    }
    else
    {
      if ((__int16)v11 >= 4096)
        *((_BYTE *)a1 + 72) = 1;
      v14 = v5 + 24 * v10;
      v15 = *a5;
      *a5 = *(_DWORD *)(v14 + 8);
      *(_DWORD *)(v14 + 8) = v15;
      v16 = *((_QWORD *)a5 + 1);
      *((_QWORD *)a5 + 1) = *(_QWORD *)(v14 + 16);
      *(_QWORD *)(v14 + 16) = v16;
      *v12 = v11;
      v9 = *a1;
    }
    v10 = v9 & (v10 + 1);
    v11 = i + 1;
    v12 = (_WORD *)(v5 + 24 * v10);
  }
  result = *(__n128 *)a5;
  *(_OWORD *)(v5 + 24 * v10 + 8) = *(_OWORD *)a5;
  *v12 = v11;
  return result;
}

uint64_t sub_20C3444D0(uint64_t a1, unint64_t a2, float a3, float a4)
{
  __int16 *v7;
  unint64_t v8;
  float v9;
  std::logic_error *exception;
  unint64_t v12;

  v12 = a2;
  sub_20BED1408((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0xAAAAAAAAAAAAAABLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  sub_20C344664((_QWORD *)(a1 + 8), v12);
  v7 = *(__int16 **)(a1 + 8);
  if (v7 == *(__int16 **)(a1 + 16))
    v7 = sub_20C3445F0();
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 22) = 1;
  v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_20C3445DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__int16 *sub_20C3445F0()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25473CA88);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473CA88))
  {
    word_25473CA70 = -1;
    byte_25473CA72 = 1;
    __cxa_atexit((void (*)(void *))sub_20C3446E8, &word_25473CA70, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473CA88);
  }
  return &word_25473CA70;
}

_QWORD *sub_20C344664(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE4FA4(a1, a2);
    v4 = a1[1];
    v5 = v4 + 24 * a2;
    do
    {
      *(_WORD *)v4 = -1;
      *(_BYTE *)(v4 + 2) = 0;
      v4 += 24;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C3446D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C343FF0(&a9);
  _Unwind_Resume(a1);
}

__int16 *sub_20C3446E8(__int16 *result)
{
  if (*result != -1)
    *result = -1;
  return result;
}

__int16 *sub_20C344700(uint64_t *a1, uint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 *result;
  int v11;
  char v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  __n128 v16;

  v6 = *a2;
  v7 = *a1;
  v8 = a1[4];
  v9 = *a2 & *a1;
  result = (__int16 *)(v8 + 24 * v9);
  if (*result < 0)
  {
    LOWORD(v11) = 0;
  }
  else
  {
    if (*(_QWORD *)(v8 + 24 * v9 + 8) == v6)
      return result;
    LOWORD(v11) = 0;
    while (1)
    {
      v11 = (__int16)(v11 + 1);
      v9 = (v9 + 1) & v7;
      result = (__int16 *)(v8 + 24 * v9);
      if (v11 > *result)
        break;
      if (*(_QWORD *)(v8 + 24 * v9 + 8) == v6)
        return result;
    }
  }
  v12 = sub_20C344888((uint64_t)a1);
  v13 = a1[4];
  if ((v12 & 1) != 0)
  {
    v9 = v6 & *a1;
    if (*(__int16 *)(v13 + 24 * v9) < 0)
    {
      LOWORD(v11) = 0;
      v14 = *(unsigned __int16 *)(v13 + 24 * v9);
    }
    else
    {
      LOWORD(v11) = 0;
      do
      {
        v11 = (__int16)(v11 + 1);
        v9 = (v9 + 1) & *a1;
      }
      while (v11 <= *(__int16 *)(v13 + 24 * v9));
      v14 = *(unsigned __int16 *)(v13 + 24 * v9);
    }
  }
  else
  {
    v14 = *(unsigned __int16 *)(v13 + 24 * v9);
  }
  if (v14 == 0xFFFF)
  {
    v15 = v13 + 24 * v9;
    *(_QWORD *)(v15 + 8) = **a4;
    *(_QWORD *)(v15 + 16) = 0;
    *(_WORD *)v15 = v11;
  }
  else
  {
    v16 = (__n128)(unint64_t)**a4;
    sub_20C344A84(a1, v9, v11, v6, &v16);
    v13 = a1[4];
  }
  ++a1[6];
  return (__int16 *)(v13 + 24 * v9);
}

uint64_t sub_20C344888(uint64_t a1)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 48), v2 >= *(_QWORD *)(a1 + 56)))
  {
    v6 = sub_20BED1164((_QWORD *)a1);
    sub_20C34494C(a1, v6);
    *(_BYTE *)(a1 + 72) = 0;
    return 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    *(_BYTE *)(a1 + 73) = 0;
    v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        v8 = *(float *)(a1 + 68);
        v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        sub_20C34494C(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_20C34494C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  __n128 *v4;
  __n128 *v5;
  __n128 *v6;
  uint64_t v7;
  _QWORD v8[9];
  void **v9;

  sub_20C3444D0((uint64_t)&v7, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(__n128 **)(a1 + 16);
  if ((__n128 *)v3 != v4)
  {
    v5 = (__n128 *)(v3 + 8);
    do
    {
      if (v5[-1].n128_i16[4] != -1)
        sub_20C344A20(&v7, v7 & v5->n128_u64[0], 0, v5->n128_u64[0], v5);
      v6 = v5 + 1;
      v5 = (__n128 *)((char *)v5 + 24);
    }
    while (v6 != v4);
  }
  v8[5] = *(_QWORD *)(a1 + 48);
  sub_20BED1250(&v7, (uint64_t *)a1);
  v9 = (void **)v8;
  sub_20C343FF0(&v9);
}

void sub_20C344A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 40) = &a11;
  sub_20C343FF0((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_20C344A20(_QWORD *a1, uint64_t a2, __int16 a3, uint64_t a4, __n128 *a5)
{
  uint64_t v5;
  __int16 *v6;
  int v7;
  __n128 *v8;
  __n128 v9;
  __n128 result;

  v5 = a1[4];
  while (1)
  {
    v6 = (__int16 *)(v5 + 24 * a2);
    v7 = *v6;
    if (v7 >= a3)
      goto LABEL_5;
    v8 = (__n128 *)(v5 + 24 * a2 + 8);
    if (v7 == -1)
      break;
    v9 = *a5;
    *a5 = *v8;
    *v8 = v9;
    *v6 = a3;
    a3 = v7;
LABEL_5:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  result = *a5;
  *v8 = *a5;
  *v6 = a3;
  return result;
}

__n128 sub_20C344A84(uint64_t *a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, __n128 *a5)
{
  uint64_t v5;
  unsigned __int16 *v6;
  __n128 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _WORD *v12;
  int i;
  uint64_t v14;
  __n128 v15;
  __n128 result;

  v5 = a1[4];
  v6 = (unsigned __int16 *)(v5 + 24 * a2);
  v7 = *a5;
  *a5 = *(__n128 *)(v6 + 4);
  *(__n128 *)(v6 + 4) = v7;
  v8 = *v6;
  *v6 = a3;
  v9 = *a1;
  v10 = *a1 & (a2 + 1);
  v11 = v8 + 1;
  v12 = (_WORD *)(v5 + 24 * v10);
  for (i = (unsigned __int16)*v12; i != 0xFFFF; i = (unsigned __int16)*v12)
  {
    if ((__int16)v11 <= (__int16)i)
    {
      i = v11;
    }
    else
    {
      if ((__int16)v11 >= 4096)
        *((_BYTE *)a1 + 72) = 1;
      v14 = v5 + 24 * v10;
      v15 = *a5;
      *a5 = *(__n128 *)(v14 + 8);
      *(__n128 *)(v14 + 8) = v15;
      *v12 = v11;
      v9 = *a1;
    }
    v10 = v9 & (v10 + 1);
    v11 = i + 1;
    v12 = (_WORD *)(v5 + 24 * v10);
  }
  result = *a5;
  *(__n128 *)(v5 + 24 * v10 + 8) = *a5;
  *v12 = v11;
  return result;
}

uint64_t sub_20C344B48(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v12;
  int InterpolationType;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  pxrInternal__aapl__pxrReserved__::VtValue *v57;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v58;
  uint64_t v59;
  unint64_t v60;
  const char *v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *String;
  const char *v66;
  unsigned int *v67;
  unsigned int v68;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const std::type_info *v84;
  char *v85;
  const std::type_info *v86;
  char *v87;
  const std::type_info *v88;
  char *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  const std::type_info *v93;
  char *v94;
  const std::type_info *v95;
  char *v96;
  const std::type_info *v97;
  char *v98;
  const std::type_info *v99;
  char *v100;
  const std::type_info *v101;
  char *v102;
  const std::type_info *v103;
  char *v104;
  const std::type_info *v105;
  char *v106;
  const std::type_info *v107;
  char *v108;
  const std::type_info *v109;
  char *v110;
  const std::type_info *v111;
  char *v112;
  const std::type_info *v113;
  char *v114;
  const std::type_info *v115;
  char *v116;
  const std::type_info *v117;
  char *v118;
  const std::type_info *v119;
  char *v120;
  const std::type_info *v121;
  char *v122;
  const std::type_info *v123;
  char *v124;
  const std::type_info *v125;
  char *v126;
  const std::type_info *v127;
  char *v128;
  const std::type_info *v129;
  char *v130;
  const std::type_info *v131;
  char *v132;
  const std::type_info *v133;
  char *v134;
  const std::type_info *v135;
  char *v136;
  const std::type_info *v137;
  char *v138;
  const std::type_info *v139;
  char *v140;
  const std::type_info *v141;
  char *v142;
  const std::type_info *v143;
  char *v144;
  const std::type_info *v145;
  char *v146;
  const std::type_info *v147;
  char *v148;
  const std::type_info *v149;
  char *v150;
  const std::type_info *v151;
  char *v152;
  const std::type_info *v153;
  char *v154;
  const std::type_info *v155;
  char *v156;
  const std::type_info *v157;
  char *v158;
  const std::type_info *v159;
  char *v160;
  const std::type_info *v161;
  char *v162;
  __int128 v163;
  __int128 v164;
  uint64_t v165;
  unint64_t v166;
  __int128 *v167;
  int v168;
  int v169;
  uint64_t TypeName;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 8), a2, &v163);
  v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v163);
  InterpolationType = pxrInternal__aapl__pxrReserved__::UsdStage::GetInterpolationType(v12);
  v14 = *((_QWORD *)&v163 + 1);
  if (*((_QWORD *)&v163 + 1))
  {
    v15 = (unsigned int *)(*((_QWORD *)&v163 + 1) + 8);
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  if (!InterpolationType)
    goto LABEL_84;
  *(_QWORD *)&v163 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(*(pxrInternal__aapl__pxrReserved__::UsdAttribute **)(a1 + 8));
  v18 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v163);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v163);
  if ((_QWORD)v163 == v18)
  {
    *(_QWORD *)&v163 = "usd/interpolators.cpp";
    *((_QWORD *)&v163 + 1) = "_Interpolate";
    *(_QWORD *)&v164 = 72;
    *((_QWORD *)&v164 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate(const Src &, c"
                             "onst SdfPath &, double, double, double) [Src = pxrInternal__aapl__pxrReserved__::TfRefPtr<p"
                             "xrInternal__aapl__pxrReserved__::SdfLayer>]";
    LOBYTE(v165) = 0;
    TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(*(pxrInternal__aapl__pxrReserved__::UsdAttribute **)(a1 + 8));
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (unsigned int **)&v166);
    v60 = v166 & 0xFFFFFFFFFFFFFFF8;
    if ((v166 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v61 = (const char *)(v60 + 16);
      if (*(char *)(v60 + 39) < 0)
        v61 = *(const char **)v61;
    }
    else
    {
      v61 = "";
    }
    sub_20C348EEC(*(_QWORD *)(a1 + 8), &v168);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v168);
    if (*((char *)String + 23) >= 0)
      v66 = (const char *)String;
    else
      v66 = (const char *)*String;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v163, 3, (pxrInternal__aapl__pxrReserved__ *)"Unknown value type '%s' for attribute '%s'", v61, v66);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v169);
    sub_20BFD265C(&v168);
    if ((v166 & 7) != 0)
    {
      v67 = (unsigned int *)(v166 & 0xFFFFFFFFFFFFFFF8);
      do
        v68 = __ldxr(v67);
      while (__stlxr(v68 - 2, v67));
    }
    return 0;
  }
  if ((v19 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF30, v84, v85);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    *(_QWORD *)&v163 = &unk_24C536868;
    *((_QWORD *)&v163 + 1) = &v166;
    v59 = sub_20C349678((uint64_t)&v163, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
    if ((_DWORD)v59)
    {
      v62 = v166;
      v63 = *(_QWORD *)(a1 + 16);
      v64 = *(_QWORD *)(v63 + 8);
      if (v64 && (*(_QWORD *)(v63 + 8) & 3) != 3)
        (*(void (**)(uint64_t))((v64 & 0xFFFFFFFFFFFFFFF8) + 32))(v63);
      *(_QWORD *)(v63 + 8) = (char *)&off_24C5204D8 + 3;
      *(_WORD *)v63 = v62;
    }
    return v59;
  }
  if ((v20 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DDB0, v86, v87);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v165 = 0;
    v163 = 0u;
    v164 = 0u;
    v166 = (unint64_t)&unk_24C5368A0;
    v167 = &v163;
    v59 = sub_20C349CDC((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20BF57178(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
    goto LABEL_233;
  }
  if ((v21 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB788], v88, v89);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    LODWORD(v166) = 0;
    *(_QWORD *)&v163 = &unk_24C5368D8;
    *((_QWORD *)&v163 + 1) = &v166;
    v59 = sub_20C34A29C((uint64_t)&v163, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
    if ((_DWORD)v59)
    {
      v70 = v166;
      v71 = *(_QWORD *)(a1 + 16);
      v72 = *(_QWORD *)(v71 + 8);
      if (v72 && (*(_QWORD *)(v71 + 8) & 3) != 3)
        (*(void (**)(uint64_t))((v72 & 0xFFFFFFFFFFFFFFF8) + 32))(v71);
      *(_QWORD *)(v71 + 8) = &unk_24C520593;
      *(_DWORD *)v71 = v70;
    }
    return v59;
  }
  if ((v22 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD98, v93, v94);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v165 = 0;
    v163 = 0u;
    v164 = 0u;
    v166 = (unint64_t)&unk_24C536910;
    v167 = &v163;
    v59 = sub_20C34A848((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20BF56628(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
    goto LABEL_233;
  }
  if ((v23 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB780], v95, v96);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v166 = 0;
    *(_QWORD *)&v163 = &unk_24C536948;
    *((_QWORD *)&v163 + 1) = &v166;
    v59 = sub_20C34AD9C((uint64_t)&v163, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
    if (!(_DWORD)v59)
      return v59;
    v73 = v166;
    v74 = *(unint64_t **)(a1 + 16);
    v75 = v74[1];
    if (v75 && (v74[1] & 3) != 3)
      (*(void (**)(unint64_t *))((v75 & 0xFFFFFFFFFFFFFFF8) + 32))(v74);
    v76 = (unint64_t)&unk_24C520648;
LABEL_118:
    v74[1] = v76 | 3;
    *v74 = v73;
    return v59;
  }
  if ((v24 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD80, v97, v98);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v165 = 0;
    v163 = 0u;
    v164 = 0u;
    v166 = (unint64_t)&unk_24C536980;
    v167 = &v163;
    v59 = sub_20C34B32C((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20BF57C64(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
    goto LABEL_233;
  }
  if ((v25 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C525368, v99, v100);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v166 = 0;
    *(_QWORD *)&v163 = &unk_24C5369B8;
    *((_QWORD *)&v163 + 1) = &v166;
    v59 = sub_20C34B86C((uint64_t)&v163, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20C1D0FEC(*(_QWORD **)(a1 + 16), &v166);
    return v59;
  }
  if ((v26 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C525430, v101, v102);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v165 = 0;
    v163 = 0u;
    v164 = 0u;
    v166 = (unint64_t)&unk_24C5369F0;
    v167 = &v163;
    v59 = sub_20C34BDFC((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20C1D118C(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
    goto LABEL_233;
  }
  if ((v27 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF90, v103, v104);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v166 = (unint64_t)&unk_24C536A28;
    v167 = &v163;
    v59 = sub_20C34C380((uint64_t)&v166, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20C1D2948(*(_QWORD **)(a1 + 16), &v163);
    return v59;
  }
  if ((v28 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB28, v105, v106);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v165 = 0;
    v163 = 0u;
    v164 = 0u;
    v166 = (unint64_t)&unk_24C536A60;
    v167 = &v163;
    v59 = sub_20C34C9B0((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20C1D2A70(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
    goto LABEL_233;
  }
  if ((v29 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFC0, v107, v108);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>(pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v166 = (unint64_t)&unk_24C536A98;
    v167 = &v163;
    v59 = sub_20C34D040((uint64_t)&v166, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20C1D2DA4(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
    return v59;
  }
  v30 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_);
  if ((v30 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB10, v109, v110);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_ == v18)
  {
    v165 = 0;
    v163 = 0u;
    v164 = 0u;
    v166 = (unint64_t)&unk_24C536AD0;
    v167 = &v163;
    v59 = sub_20C34D7F4((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20C1D2EDC(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
    goto LABEL_233;
  }
  v31 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_);
  if ((v31 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFE0, v111, v112);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_ == v18)
  {
    v166 = (unint64_t)&unk_24C536B08;
    v167 = &v163;
    v59 = sub_20C34DF6C((uint64_t)&v166, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20C1D3180(*(_QWORD **)(a1 + 16), &v163);
    return v59;
  }
  v32 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_);
  if ((v32 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DAF8, v113, v114);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_ == v18)
  {
    v165 = 0;
    v163 = 0u;
    v164 = 0u;
    v166 = (unint64_t)&unk_24C536B40;
    v167 = &v163;
    v59 = sub_20C34E75C((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20BF5FE00(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
    goto LABEL_233;
  }
  v33 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_);
  if ((v33 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C110, v115, v116);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_ == v18)
  {
    v166 = (unint64_t)&unk_24C536B78;
    v167 = &v163;
    v59 = sub_20C34EDE4((uint64_t)&v166, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20C1D4104(*(unsigned int ***)(a1 + 16), &v163);
    return v59;
  }
  v34 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_);
  if ((v34 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA98, v117, v118);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_ == v18)
  {
    v165 = 0;
    v163 = 0u;
    v164 = 0u;
    v166 = (unint64_t)&unk_24C536BB0;
    v167 = &v163;
    v59 = sub_20C34F380((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20BF5A130(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
    goto LABEL_233;
  }
  v35 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_);
  if ((v35 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C120, v119, v120);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_ == v18)
  {
    *(_QWORD *)&v163 = &unk_24C536BE8;
    *((_QWORD *)&v163 + 1) = &v166;
    v59 = sub_20C34F8D8((uint64_t)&v163, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
    if (!(_DWORD)v59)
      return v59;
    v73 = v166;
    v74 = *(unint64_t **)(a1 + 16);
    v77 = v74[1];
    if (v77 && (v74[1] & 3) != 3)
      (*(void (**)(unint64_t *))((v77 & 0xFFFFFFFFFFFFFFF8) + 32))(v74);
    v76 = (unint64_t)&off_24C51DEB0;
    goto LABEL_118;
  }
  v36 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_);
  if ((v36 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA50, v121, v122);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_ == v18)
  {
    v165 = 0;
    v163 = 0u;
    v164 = 0u;
    v166 = (unint64_t)&unk_24C536C20;
    v167 = &v163;
    v59 = sub_20C34FE90((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
    if ((_DWORD)v59)
      sub_20BF58AE4(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
    goto LABEL_233;
  }
  v37 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_);
  if ((v37 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C130, v123, v124);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_ == v18)
  {
    *(_QWORD *)&v163 = &unk_24C536C58;
    *((_QWORD *)&v163 + 1) = &v166;
    v59 = sub_20C3505DC((uint64_t)&v163, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
    if ((_DWORD)v59)
    {
      v78 = v166;
      v79 = *(_QWORD *)(a1 + 16);
      v80 = *(_QWORD *)(v79 + 8);
      if (v80 && (*(_QWORD *)(v79 + 8) & 3) != 3)
        (*(void (**)(uint64_t))((v80 & 0xFFFFFFFFFFFFFFF8) + 32))(v79);
      *(_QWORD *)(v79 + 8) = (char *)&off_24C51DDF8 + 3;
      *(_DWORD *)v79 = v78;
    }
  }
  else
  {
    v38 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_);
    if ((v38 & 1) == 0
      && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA08, v125, v126);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_ == v18)
    {
      v165 = 0;
      v163 = 0u;
      v164 = 0u;
      v166 = (unint64_t)&unk_24C536C90;
      v167 = &v163;
      v59 = sub_20C350BD4((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
      if ((_DWORD)v59)
        sub_20BF59594(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
      goto LABEL_233;
    }
    v39 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_);
    if ((v39 & 1) == 0
      && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C150, v127, v128);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_ == v18)
    {
      v166 = (unint64_t)&unk_24C536CC8;
      v167 = &v163;
      v59 = sub_20C351178((uint64_t)&v166, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
      if ((_DWORD)v59)
        sub_20C1D4C34(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
    }
    else
    {
      v40 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_);
      if ((v40 & 1) == 0
        && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_))
      {
        _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA80, v129, v130);
        __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_);
      }
      if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_ == v18)
      {
        v165 = 0;
        v163 = 0u;
        v164 = 0u;
        v166 = (unint64_t)&unk_24C536D00;
        v167 = &v163;
        v59 = sub_20C351760((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
        if ((_DWORD)v59)
          sub_20BF5C8C4(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
        goto LABEL_233;
      }
      v41 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_);
      if ((v41 & 1) == 0
        && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_))
      {
        _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C160, v131, v132);
        __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_);
      }
      if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_ == v18)
      {
        *(_QWORD *)&v163 = &unk_24C536D38;
        *((_QWORD *)&v163 + 1) = &v166;
        v59 = sub_20C351D14((uint64_t)&v163, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
        if ((_DWORD)v59)
          sub_20C1D4A60(*(_QWORD **)(a1 + 16), (uint64_t)&v166);
      }
      else
      {
        v42 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_);
        if ((v42 & 1) == 0
          && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_))
        {
          _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA38, v133, v134);
          __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_);
        }
        if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_ == v18)
        {
          v165 = 0;
          v163 = 0u;
          v164 = 0u;
          v166 = (unint64_t)&unk_24C536D70;
          v167 = &v163;
          v59 = sub_20C352340((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
          if ((_DWORD)v59)
            sub_20BF5B150(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
          goto LABEL_233;
        }
        v43 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_);
        if ((v43 & 1) == 0
          && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_))
        {
          _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C170, v135, v136);
          __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_);
        }
        if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_ == v18)
        {
          *(_QWORD *)&v163 = &unk_24C536DA8;
          *((_QWORD *)&v163 + 1) = &v166;
          v59 = sub_20C352938((uint64_t)&v163, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
          if ((_DWORD)v59)
          {
            v81 = v166 | ((unint64_t)WORD2(v166) << 32);
            v82 = *(_QWORD *)(a1 + 16);
            v83 = *(_QWORD *)(v82 + 8);
            if (v83 && (*(_QWORD *)(v82 + 8) & 3) != 3)
              (*(void (**)(uint64_t))((v83 & 0xFFFFFFFFFFFFFFF8) + 32))(v82);
            *(_QWORD *)(v82 + 8) = (char *)&off_24C51E020 + 3;
            *(_DWORD *)v82 = v81;
            *(_WORD *)(v82 + 4) = WORD2(v81);
          }
        }
        else
        {
          v44 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_);
          if ((v44 & 1) == 0
            && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_))
          {
            _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D9F0, v137, v138);
            __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_);
          }
          if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_ == v18)
          {
            v165 = 0;
            v163 = 0u;
            v164 = 0u;
            v166 = (unint64_t)&unk_24C536DE0;
            v167 = &v163;
            v59 = sub_20C352FA8((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
            if ((_DWORD)v59)
              sub_20BF5BC34(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
            goto LABEL_233;
          }
          v45 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_);
          if ((v45 & 1) == 0
            && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_))
          {
            _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C190, v139, v140);
            __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_);
          }
          if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_ == v18)
          {
            v166 = (unint64_t)&unk_24C536E18;
            v167 = &v163;
            v59 = sub_20C353570((uint64_t)&v166, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
            if ((_DWORD)v59)
              sub_20C1D5704(*(_QWORD **)(a1 + 16), &v163);
          }
          else
          {
            v46 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_);
            if ((v46 & 1) == 0
              && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_))
            {
              _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA68, v141, v142);
              __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_);
            }
            if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_ == v18)
            {
              v165 = 0;
              v163 = 0u;
              v164 = 0u;
              v166 = (unint64_t)&unk_24C536E50;
              v167 = &v163;
              v59 = sub_20C353B40((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
              if ((_DWORD)v59)
                sub_20BF5EE20(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
              goto LABEL_233;
            }
            v47 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_);
            if ((v47 & 1) == 0
              && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_))
            {
              _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1A0, v143, v144);
              __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_);
            }
            if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_ == v18)
            {
              v166 = (unint64_t)&unk_24C536E88;
              v167 = &v163;
              v59 = sub_20C3540D8((uint64_t)&v166, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
              if ((_DWORD)v59)
                sub_20C1D5548(*(unsigned int ***)(a1 + 16), &v163);
            }
            else
            {
              v48 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_);
              if ((v48 & 1) == 0
                && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_))
              {
                _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA20, v145, v146);
                __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_);
              }
              if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_ == v18)
              {
                v165 = 0;
                v163 = 0u;
                v164 = 0u;
                v166 = (unint64_t)&unk_24C536EC0;
                v167 = &v163;
                v59 = sub_20C3546C4((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
                if ((_DWORD)v59)
                  sub_20BF5D770(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
                goto LABEL_233;
              }
              v49 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_);
              if ((v49 & 1) == 0
                && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_))
              {
                _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1B0, v147, v148);
                __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_);
              }
              if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_ == v18)
              {
                *(_QWORD *)&v163 = &unk_24C536EF8;
                *((_QWORD *)&v163 + 1) = &v166;
                v59 = sub_20C354F8C((uint64_t)&v163, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
                if ((_DWORD)v59)
                {
                  v90 = v166;
                  v91 = *(unint64_t **)(a1 + 16);
                  v92 = v91[1];
                  if (v92 && (v91[1] & 3) != 3)
                    (*(void (**)(unint64_t *))((v92 & 0xFFFFFFFFFFFFFFF8) + 32))(v91);
                  *v91 = v90;
                  v91[1] = (unint64_t)&off_24C51E248 + 3;
                }
              }
              else
              {
                v50 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_);
                if ((v50 & 1) == 0
                  && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_))
                {
                  _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D9D8, v149, v150);
                  __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_);
                }
                if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_ == v18)
                {
                  v165 = 0;
                  v163 = 0u;
                  v164 = 0u;
                  v166 = (unint64_t)&unk_24C536F30;
                  v167 = &v163;
                  v59 = sub_20C35557C((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
                  if ((_DWORD)v59)
                    sub_20BF5E264(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
                  goto LABEL_233;
                }
                v51 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_);
                if ((v51 & 1) == 0
                  && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_))
                {
                  _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C010, v151, v152);
                  __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_);
                }
                if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_ == v18)
                {
                  v166 = (unint64_t)&unk_24C536F68;
                  v167 = &v163;
                  v59 = sub_20C355AEC((uint64_t)&v166, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
                  if ((_DWORD)v59)
                    sub_20C1D37B4(*(_QWORD **)(a1 + 16), &v163);
                }
                else
                {
                  v52 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_);
                  if ((v52 & 1) == 0
                    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_))
                  {
                    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC30, v153, v154);
                    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_);
                  }
                  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_ == v18)
                  {
                    v165 = 0;
                    v163 = 0u;
                    v164 = 0u;
                    v166 = (unint64_t)&unk_24C536FA0;
                    v167 = &v163;
                    v59 = sub_20C356078((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
                    if ((_DWORD)v59)
                      sub_20BF62CE4(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
                    goto LABEL_233;
                  }
                  v53 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_);
                  if ((v53 & 1) == 0
                    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_))
                  {
                    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C020, v155, v156);
                    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_);
                  }
                  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_ == v18)
                  {
                    v166 = (unint64_t)&unk_24C536FD8;
                    v167 = &v163;
                    v59 = sub_20C3565B0((uint64_t)&v166, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
                    if ((_DWORD)v59)
                      sub_20C1D35A0(*(unsigned int ***)(a1 + 16), &v163);
                  }
                  else
                  {
                    v54 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_);
                    if ((v54 & 1) == 0
                      && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_))
                    {
                      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC18, v157, v158);
                      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_);
                    }
                    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_ == v18)
                    {
                      v165 = 0;
                      v163 = 0u;
                      v164 = 0u;
                      v166 = (unint64_t)&unk_24C537010;
                      v167 = &v163;
                      v59 = sub_20C356B3C((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
                      if ((_DWORD)v59)
                        sub_20BF6163C(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
                      goto LABEL_233;
                    }
                    v55 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_);
                    if ((v55 & 1) == 0
                      && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_))
                    {
                      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C030, v159, v160);
                      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_);
                    }
                    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_ != v18)
                    {
                      v56 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_);
                      if ((v56 & 1) == 0
                        && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_))
                      {
                        _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC00, v161, v162);
                        __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_);
                      }
                      if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_ != v18)
                      {
LABEL_84:
                        v57 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 16);
                        v58 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)a2);
                        return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v58, a3, a5, v57);
                      }
                      v165 = 0;
                      v163 = 0u;
                      v164 = 0u;
                      v166 = (unint64_t)&unk_24C537080;
                      v167 = &v163;
                      v59 = sub_20C3575F0((uint64_t)&v166, (uint64_t *)a2, a3, a4, a5, a6);
                      if ((_DWORD)v59)
                        sub_20BF62138(*(_QWORD **)(a1 + 16), (uint64_t)&v163);
LABEL_233:
                      sub_20BF5618C((uint64_t)&v163);
                      return v59;
                    }
                    *(_QWORD *)&v163 = &unk_24C537048;
                    *((_QWORD *)&v163 + 1) = &v166;
                    v59 = sub_20C357070((uint64_t)&v163, (uint64_t *)a2, (uint64_t)a3, a4, a5, a6);
                    if ((_DWORD)v59)
                      sub_20C1D33E0(*(_QWORD **)(a1 + 16), &v166);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v59;
}

void sub_20C3467D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINS_8TfRefPtrINS_8SdfLayerEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_);
  _Unwind_Resume(a1);
}

BOOL sub_20C346CA0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::UsdStage *v12;
  int InterpolationType;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned __int8 v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  unsigned __int8 v42;
  unsigned __int8 v43;
  unsigned __int8 v44;
  unsigned __int8 v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  unsigned __int8 v48;
  unsigned __int8 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  unsigned __int8 v54;
  unsigned __int8 v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  const char *v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *String;
  const char *v65;
  unsigned int *v66;
  unsigned int v67;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const std::type_info *v83;
  char *v84;
  const std::type_info *v85;
  char *v86;
  const std::type_info *v87;
  char *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  const std::type_info *v92;
  char *v93;
  const std::type_info *v94;
  char *v95;
  const std::type_info *v96;
  char *v97;
  const std::type_info *v98;
  char *v99;
  const std::type_info *v100;
  char *v101;
  const std::type_info *v102;
  char *v103;
  const std::type_info *v104;
  char *v105;
  const std::type_info *v106;
  char *v107;
  const std::type_info *v108;
  char *v109;
  const std::type_info *v110;
  char *v111;
  const std::type_info *v112;
  char *v113;
  const std::type_info *v114;
  char *v115;
  const std::type_info *v116;
  char *v117;
  const std::type_info *v118;
  char *v119;
  const std::type_info *v120;
  char *v121;
  const std::type_info *v122;
  char *v123;
  const std::type_info *v124;
  char *v125;
  const std::type_info *v126;
  char *v127;
  const std::type_info *v128;
  char *v129;
  const std::type_info *v130;
  char *v131;
  const std::type_info *v132;
  char *v133;
  const std::type_info *v134;
  char *v135;
  const std::type_info *v136;
  char *v137;
  const std::type_info *v138;
  char *v139;
  const std::type_info *v140;
  char *v141;
  const std::type_info *v142;
  char *v143;
  const std::type_info *v144;
  char *v145;
  const std::type_info *v146;
  char *v147;
  const std::type_info *v148;
  char *v149;
  const std::type_info *v150;
  char *v151;
  const std::type_info *v152;
  char *v153;
  const std::type_info *v154;
  char *v155;
  const std::type_info *v156;
  char *v157;
  const std::type_info *v158;
  char *v159;
  const std::type_info *v160;
  char *v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  unint64_t v165;
  __int128 *v166;
  int v167;
  int v168;
  uint64_t TypeName;

  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 8), a2, &v162);
  v12 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08((uint64_t *)&v162);
  InterpolationType = pxrInternal__aapl__pxrReserved__::UsdStage::GetInterpolationType(v12);
  v14 = *((_QWORD *)&v162 + 1);
  if (*((_QWORD *)&v162 + 1))
  {
    v15 = (unsigned int *)(*((_QWORD *)&v162 + 1) + 8);
    do
    {
      v16 = __ldxr(v15);
      v17 = v16 - 1;
    }
    while (__stlxr(v17, v15));
    if (!v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  }
  if (!InterpolationType)
    goto LABEL_84;
  *(_QWORD *)&v162 = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(*(pxrInternal__aapl__pxrReserved__::UsdAttribute **)(a1 + 8));
  v18 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&v162);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v162);
  if ((_QWORD)v162 == v18)
  {
    *(_QWORD *)&v162 = "usd/interpolators.cpp";
    *((_QWORD *)&v162 + 1) = "_Interpolate";
    *(_QWORD *)&v163 = 72;
    *((_QWORD *)&v163 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate(const Src &, c"
                             "onst SdfPath &, double, double, double) [Src = std::shared_ptr<pxrInternal__aapl__pxrReserv"
                             "ed__::Usd_ClipSet>]";
    LOBYTE(v164) = 0;
    TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(*(pxrInternal__aapl__pxrReserved__::UsdAttribute **)(a1 + 8));
    pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)&TypeName, (unsigned int **)&v165);
    v59 = v165 & 0xFFFFFFFFFFFFFFF8;
    if ((v165 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v60 = (const char *)(v59 + 16);
      if (*(char *)(v59 + 39) < 0)
        v60 = *(const char **)v60;
    }
    else
    {
      v60 = "";
    }
    sub_20C348EEC(*(_QWORD *)(a1 + 8), &v167);
    String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v167);
    if (*((char *)String + 23) >= 0)
      v65 = (const char *)String;
    else
      v65 = (const char *)*String;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v162, 3, (pxrInternal__aapl__pxrReserved__ *)"Unknown value type '%s' for attribute '%s'", v60, v65);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v168);
    sub_20BFD265C(&v167);
    if ((v165 & 7) != 0)
    {
      v66 = (unsigned int *)(v165 & 0xFFFFFFFFFFFFFFF8);
      do
        v67 = __ldxr(v66);
      while (__stlxr(v67 - 2, v66));
    }
    return 0;
  }
  if ((v19 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF30, v83, v84);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    *(_QWORD *)&v162 = &unk_24C536868;
    *((_QWORD *)&v162 + 1) = &v165;
    v58 = sub_20C3492EC((uint64_t)&v162, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
    {
      v61 = v165;
      v62 = *(_QWORD *)(a1 + 16);
      v63 = *(_QWORD *)(v62 + 8);
      if (v63 && (*(_QWORD *)(v62 + 8) & 3) != 3)
        (*(void (**)(uint64_t))((v63 & 0xFFFFFFFFFFFFFFF8) + 32))(v62);
      *(_QWORD *)(v62 + 8) = (char *)&off_24C5204D8 + 3;
      *(_WORD *)v62 = v61;
    }
    return v58;
  }
  if ((v20 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DDB0, v85, v86);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v164 = 0;
    v162 = 0u;
    v163 = 0u;
    v165 = (unint64_t)&unk_24C5368A0;
    v166 = &v162;
    v58 = sub_20C3497F8((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20BF57178(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
    goto LABEL_233;
  }
  if ((v21 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB788], v87, v88);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    LODWORD(v165) = 0;
    *(_QWORD *)&v162 = &unk_24C5368D8;
    *((_QWORD *)&v162 + 1) = &v165;
    v58 = sub_20C349F60((uint64_t)&v162, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
    {
      v69 = v165;
      v70 = *(_QWORD *)(a1 + 16);
      v71 = *(_QWORD *)(v70 + 8);
      if (v71 && (*(_QWORD *)(v70 + 8) & 3) != 3)
        (*(void (**)(uint64_t))((v71 & 0xFFFFFFFFFFFFFFF8) + 32))(v70);
      *(_QWORD *)(v70 + 8) = &unk_24C520593;
      *(_DWORD *)v70 = v69;
    }
    return v58;
  }
  if ((v22 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD98, v92, v93);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v164 = 0;
    v162 = 0u;
    v163 = 0u;
    v165 = (unint64_t)&unk_24C536910;
    v166 = &v162;
    v58 = sub_20C34A3C4((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20BF56628(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
    goto LABEL_233;
  }
  if ((v23 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(MEMORY[0x24BEDB780], v94, v95);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v165 = 0;
    *(_QWORD *)&v162 = &unk_24C536948;
    *((_QWORD *)&v162 + 1) = &v165;
    v58 = sub_20C34AA6C((uint64_t)&v162, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if (!(_DWORD)v58)
      return v58;
    v72 = v165;
    v73 = *(unint64_t **)(a1 + 16);
    v74 = v73[1];
    if (v74 && (v73[1] & 3) != 3)
      (*(void (**)(unint64_t *))((v74 & 0xFFFFFFFFFFFFFFF8) + 32))(v73);
    v75 = (unint64_t)&unk_24C520648;
LABEL_118:
    v73[1] = v75 | 3;
    *v73 = v72;
    return v58;
  }
  if ((v24 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DD80, v96, v97);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v164 = 0;
    v162 = 0u;
    v163 = 0u;
    v165 = (unint64_t)&unk_24C536980;
    v166 = &v162;
    v58 = sub_20C34AEB8((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20BF57C64(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
    goto LABEL_233;
  }
  if ((v25 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C525368, v98, v99);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v165 = 0;
    *(_QWORD *)&v162 = &unk_24C5369B8;
    *((_QWORD *)&v162 + 1) = &v165;
    v58 = sub_20C34B540((uint64_t)&v162, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20C1D0FEC(*(_QWORD **)(a1 + 16), &v165);
    return v58;
  }
  if ((v26 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C525430, v100, v101);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v164 = 0;
    v162 = 0u;
    v163 = 0u;
    v165 = (unint64_t)&unk_24C5369F0;
    v166 = &v162;
    v58 = sub_20C34B988((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20C1D118C(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
    goto LABEL_233;
  }
  if ((v27 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BF90, v102, v103);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v165 = (unint64_t)&unk_24C536A28;
    v166 = &v162;
    v58 = sub_20C34C010((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20C1D2948(*(_QWORD **)(a1 + 16), &v162);
    return v58;
  }
  if ((v28 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB28, v104, v105);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v164 = 0;
    v162 = 0u;
    v163 = 0u;
    v165 = (unint64_t)&unk_24C536A60;
    v166 = &v162;
    v58 = sub_20C34C4DC((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20C1D2A70(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
    goto LABEL_233;
  }
  if ((v29 & 1) == 0
  {
    pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFC0, v106, v107);
  }
  if (pxrInternal__aapl__pxrReserved__::Usd_UntypedInterpolator::_Interpolate<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet>>(std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_ClipSet> const&,pxrInternal__aapl__pxrReserved__::SdfPath const&,double,double,double)::valueType == v18)
  {
    v165 = (unint64_t)&unk_24C536A98;
    v166 = &v162;
    v58 = sub_20C34CC24((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20C1D2DA4(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
    return v58;
  }
  v30 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_);
  if ((v30 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DB10, v108, v109);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__10_ == v18)
  {
    v164 = 0;
    v162 = 0u;
    v163 = 0u;
    v165 = (unint64_t)&unk_24C536AD0;
    v166 = &v162;
    v58 = sub_20C34D258((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20C1D2EDC(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
    goto LABEL_233;
  }
  v31 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_);
  if ((v31 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51BFE0, v110, v111);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__11_ == v18)
  {
    v165 = (unint64_t)&unk_24C536B08;
    v166 = &v162;
    v58 = sub_20C34DB30((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20C1D3180(*(_QWORD **)(a1 + 16), &v162);
    return v58;
  }
  v32 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_);
  if ((v32 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DAF8, v112, v113);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__12_ == v18)
  {
    v164 = 0;
    v162 = 0u;
    v163 = 0u;
    v165 = (unint64_t)&unk_24C536B40;
    v166 = &v162;
    v58 = sub_20C34E19C((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20BF5FE00(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
    goto LABEL_233;
  }
  v33 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_);
  if ((v33 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C110, v114, v115);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__13_ == v18)
  {
    v165 = (unint64_t)&unk_24C536B78;
    v166 = &v162;
    v58 = sub_20C34EABC((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20C1D4104(*(unsigned int ***)(a1 + 16), &v162);
    return v58;
  }
  v34 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_);
  if ((v34 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA98, v116, v117);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__14_ == v18)
  {
    v164 = 0;
    v162 = 0u;
    v163 = 0u;
    v165 = (unint64_t)&unk_24C536BB0;
    v166 = &v162;
    v58 = sub_20C34EF00((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20BF5A130(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
    goto LABEL_233;
  }
  v35 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_);
  if ((v35 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C120, v118, v119);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__15_ == v18)
  {
    *(_QWORD *)&v162 = &unk_24C536BE8;
    *((_QWORD *)&v162 + 1) = &v165;
    v58 = sub_20C34F5A0((uint64_t)&v162, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if (!(_DWORD)v58)
      return v58;
    v72 = v165;
    v73 = *(unint64_t **)(a1 + 16);
    v76 = v73[1];
    if (v76 && (v73[1] & 3) != 3)
      (*(void (**)(unint64_t *))((v76 & 0xFFFFFFFFFFFFFFF8) + 32))(v73);
    v75 = (unint64_t)&off_24C51DEB0;
    goto LABEL_118;
  }
  v36 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_);
  if ((v36 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA50, v120, v121);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__16_ == v18)
  {
    v164 = 0;
    v162 = 0u;
    v163 = 0u;
    v165 = (unint64_t)&unk_24C536C20;
    v166 = &v162;
    v58 = sub_20C34FA04((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
      sub_20BF58AE4(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
    goto LABEL_233;
  }
  v37 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_);
  if ((v37 & 1) == 0
    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_))
  {
    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C130, v122, v123);
    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_);
  }
  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__17_ == v18)
  {
    *(_QWORD *)&v162 = &unk_24C536C58;
    *((_QWORD *)&v162 + 1) = &v165;
    v58 = sub_20C3500BC((uint64_t)&v162, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
    if ((_DWORD)v58)
    {
      v77 = v165;
      v78 = *(_QWORD *)(a1 + 16);
      v79 = *(_QWORD *)(v78 + 8);
      if (v79 && (*(_QWORD *)(v78 + 8) & 3) != 3)
        (*(void (**)(uint64_t))((v79 & 0xFFFFFFFFFFFFFFF8) + 32))(v78);
      *(_QWORD *)(v78 + 8) = (char *)&off_24C51DDF8 + 3;
      *(_DWORD *)v78 = v77;
    }
  }
  else
  {
    v38 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_);
    if ((v38 & 1) == 0
      && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA08, v124, v125);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__18_ == v18)
    {
      v164 = 0;
      v162 = 0u;
      v163 = 0u;
      v165 = (unint64_t)&unk_24C536C90;
      v166 = &v162;
      v58 = sub_20C350720((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
      if ((_DWORD)v58)
        sub_20BF59594(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
      goto LABEL_233;
    }
    v39 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_);
    if ((v39 & 1) == 0
      && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_))
    {
      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C150, v126, v127);
      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_);
    }
    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__19_ == v18)
    {
      v165 = (unint64_t)&unk_24C536CC8;
      v166 = &v162;
      v58 = sub_20C350E30((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
      if ((_DWORD)v58)
        sub_20C1D4C34(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
    }
    else
    {
      v40 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_);
      if ((v40 & 1) == 0
        && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_))
      {
        _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA80, v128, v129);
        __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_);
      }
      if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__20_ == v18)
      {
        v164 = 0;
        v162 = 0u;
        v163 = 0u;
        v165 = (unint64_t)&unk_24C536D00;
        v166 = &v162;
        v58 = sub_20C3512B4((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
        if ((_DWORD)v58)
          sub_20BF5C8C4(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
        goto LABEL_233;
      }
      v41 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_);
      if ((v41 & 1) == 0
        && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_))
      {
        _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C160, v130, v131);
        __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_);
      }
      if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__21_ == v18)
      {
        *(_QWORD *)&v162 = &unk_24C536D38;
        *((_QWORD *)&v162 + 1) = &v165;
        v58 = sub_20C3519AC((uint64_t)&v162, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
        if ((_DWORD)v58)
          sub_20C1D4A60(*(_QWORD **)(a1 + 16), (uint64_t)&v165);
      }
      else
      {
        v42 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_);
        if ((v42 & 1) == 0
          && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_))
        {
          _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA38, v132, v133);
          __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_);
        }
        if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__22_ == v18)
        {
          v164 = 0;
          v162 = 0u;
          v163 = 0u;
          v165 = (unint64_t)&unk_24C536D70;
          v166 = &v162;
          v58 = sub_20C351E70((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
          if ((_DWORD)v58)
            sub_20BF5B150(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
          goto LABEL_233;
        }
        v43 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_);
        if ((v43 & 1) == 0
          && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_))
        {
          _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C170, v134, v135);
          __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_);
        }
        if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__23_ == v18)
        {
          *(_QWORD *)&v162 = &unk_24C536DA8;
          *((_QWORD *)&v162 + 1) = &v165;
          v58 = sub_20C3525B0((uint64_t)&v162, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
          if ((_DWORD)v58)
          {
            v80 = v165 | ((unint64_t)WORD2(v165) << 32);
            v81 = *(_QWORD *)(a1 + 16);
            v82 = *(_QWORD *)(v81 + 8);
            if (v82 && (*(_QWORD *)(v81 + 8) & 3) != 3)
              (*(void (**)(uint64_t))((v82 & 0xFFFFFFFFFFFFFFF8) + 32))(v81);
            *(_QWORD *)(v81 + 8) = (char *)&off_24C51E020 + 3;
            *(_DWORD *)v81 = v80;
            *(_WORD *)(v81 + 4) = WORD2(v80);
          }
        }
        else
        {
          v44 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_);
          if ((v44 & 1) == 0
            && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_))
          {
            _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D9F0, v136, v137);
            __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_);
          }
          if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__24_ == v18)
          {
            v164 = 0;
            v162 = 0u;
            v163 = 0u;
            v165 = (unint64_t)&unk_24C536DE0;
            v166 = &v162;
            v58 = sub_20C352AB4((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
            if ((_DWORD)v58)
              sub_20BF5BC34(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
            goto LABEL_233;
          }
          v45 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_);
          if ((v45 & 1) == 0
            && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_))
          {
            _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C190, v138, v139);
            __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_);
          }
          if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__25_ == v18)
          {
            v165 = (unint64_t)&unk_24C536E18;
            v166 = &v162;
            v58 = sub_20C35323C((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
            if ((_DWORD)v58)
              sub_20C1D5704(*(_QWORD **)(a1 + 16), &v162);
          }
          else
          {
            v46 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_);
            if ((v46 & 1) == 0
              && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_))
            {
              _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA68, v140, v141);
              __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_);
            }
            if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__26_ == v18)
            {
              v164 = 0;
              v162 = 0u;
              v163 = 0u;
              v165 = (unint64_t)&unk_24C536E50;
              v166 = &v162;
              v58 = sub_20C353698((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
              if ((_DWORD)v58)
                sub_20BF5EE20(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
              goto LABEL_233;
            }
            v47 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_);
            if ((v47 & 1) == 0
              && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_))
            {
              _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1A0, v142, v143);
              __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_);
            }
            if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__27_ == v18)
            {
              v165 = (unint64_t)&unk_24C536E88;
              v166 = &v162;
              v58 = sub_20C353D88((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
              if ((_DWORD)v58)
                sub_20C1D5548(*(unsigned int ***)(a1 + 16), &v162);
            }
            else
            {
              v48 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_);
              if ((v48 & 1) == 0
                && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_))
              {
                _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DA20, v144, v145);
                __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_);
              }
              if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__28_ == v18)
              {
                v164 = 0;
                v162 = 0u;
                v163 = 0u;
                v165 = (unint64_t)&unk_24C536EC0;
                v166 = &v162;
                v58 = sub_20C35421C((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
                if ((_DWORD)v58)
                  sub_20BF5D770(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
                goto LABEL_233;
              }
              v49 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_);
              if ((v49 & 1) == 0
                && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_))
              {
                _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C1B0, v146, v147);
                __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_);
              }
              if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__29_ == v18)
              {
                *(_QWORD *)&v162 = &unk_24C536EF8;
                *((_QWORD *)&v162 + 1) = &v165;
                v58 = sub_20C35490C((uint64_t)&v162, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
                if ((_DWORD)v58)
                {
                  v89 = v165;
                  v90 = *(unint64_t **)(a1 + 16);
                  v91 = v90[1];
                  if (v91 && (v90[1] & 3) != 3)
                    (*(void (**)(unint64_t *))((v91 & 0xFFFFFFFFFFFFFFF8) + 32))(v90);
                  *v90 = v89;
                  v90[1] = (unint64_t)&off_24C51E248 + 3;
                }
              }
              else
              {
                v50 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_);
                if ((v50 & 1) == 0
                  && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_))
                {
                  _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51D9D8, v148, v149);
                  __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_);
                }
                if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__30_ == v18)
                {
                  v164 = 0;
                  v162 = 0u;
                  v163 = 0u;
                  v165 = (unint64_t)&unk_24C536F30;
                  v166 = &v162;
                  v58 = sub_20C3550D0((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
                  if ((_DWORD)v58)
                    sub_20BF5E264(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
                  goto LABEL_233;
                }
                v51 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_);
                if ((v51 & 1) == 0
                  && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_))
                {
                  _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C010, v150, v151);
                  __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_);
                }
                if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__31_ == v18)
                {
                  v165 = (unint64_t)&unk_24C536F68;
                  v166 = &v162;
                  v58 = sub_20C3557D0((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
                  if ((_DWORD)v58)
                    sub_20C1D37B4(*(_QWORD **)(a1 + 16), &v162);
                }
                else
                {
                  v52 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_);
                  if ((v52 & 1) == 0
                    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_))
                  {
                    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC30, v152, v153);
                    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_);
                  }
                  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__32_ == v18)
                  {
                    v164 = 0;
                    v162 = 0u;
                    v163 = 0u;
                    v165 = (unint64_t)&unk_24C536FA0;
                    v166 = &v162;
                    v58 = sub_20C355BFC((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
                    if ((_DWORD)v58)
                      sub_20BF62CE4(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
                    goto LABEL_233;
                  }
                  v53 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_);
                  if ((v53 & 1) == 0
                    && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_))
                  {
                    _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C020, v154, v155);
                    __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_);
                  }
                  if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__33_ == v18)
                  {
                    v165 = (unint64_t)&unk_24C536FD8;
                    v166 = &v162;
                    v58 = sub_20C356294((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
                    if ((_DWORD)v58)
                      sub_20C1D35A0(*(unsigned int ***)(a1 + 16), &v162);
                  }
                  else
                  {
                    v54 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_);
                    if ((v54 & 1) == 0
                      && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_))
                    {
                      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC18, v156, v157);
                      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_);
                    }
                    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__34_ == v18)
                    {
                      v164 = 0;
                      v162 = 0u;
                      v163 = 0u;
                      v165 = (unint64_t)&unk_24C537010;
                      v166 = &v162;
                      v58 = sub_20C3566C0((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
                      if ((_DWORD)v58)
                        sub_20BF6163C(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
                      goto LABEL_233;
                    }
                    v55 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_);
                    if ((v55 & 1) == 0
                      && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_))
                    {
                      _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51C030, v158, v159);
                      __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_);
                    }
                    if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__35_ != v18)
                    {
                      v56 = atomic_load((unsigned __int8 *)&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_);
                      if ((v56 & 1) == 0
                        && __cxa_guard_acquire(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_))
                      {
                        _ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_ = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C51DC00, v160, v161);
                        __cxa_guard_release(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_);
                      }
                      if (_ZZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_ != v18)
                      {
LABEL_84:
                        v57 = *(_QWORD *)(a1 + 16);
                        *(_QWORD *)&v162 = &unk_24C536830;
                        *((_QWORD *)&v162 + 1) = v57;
                        return sub_20C349068((uint64_t)&v162, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5);
                      }
                      v164 = 0;
                      v162 = 0u;
                      v163 = 0u;
                      v165 = (unint64_t)&unk_24C537080;
                      v166 = &v162;
                      v58 = sub_20C35717C((uint64_t)&v165, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
                      if ((_DWORD)v58)
                        sub_20BF62138(*(_QWORD **)(a1 + 16), (uint64_t)&v162);
LABEL_233:
                      sub_20BF5618C((uint64_t)&v162);
                      return v58;
                    }
                    *(_QWORD *)&v162 = &unk_24C537048;
                    *((_QWORD *)&v162 + 1) = &v165;
                    v58 = sub_20C356D58((uint64_t)&v162, (pxrInternal__aapl__pxrReserved__::Usd_ClipSet **)a2, a3, a4, a5, a6);
                    if ((_DWORD)v58)
                      sub_20C1D33E0(*(_QWORD **)(a1 + 16), &v165);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v58;
}

void sub_20C34893C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&_ZGVZN32pxrInternal__aapl__pxrReserved__23Usd_UntypedInterpolator12_InterpolateINSt3__110shared_ptrINS_11Usd_ClipSetEEEEEbRKT_RKNS_7SdfPathEdddE9valueType__36_);
  _Unwind_Resume(a1);
}

uint64_t sub_20C348E08(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::UsdStage>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrReserved__"
            "::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::UsdStage]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CADFCC8 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t sub_20C348EAC(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;

  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v8, a3, a5, *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8));
}

void sub_20C348EEC(uint64_t a1@<X0>, int *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v8;
  int *v9;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16)))
  {
    if (*(_DWORD *)a1 == 1)
    {
      sub_20BFD6E54(a2, v4);
      v5 = a2 + 1;
      v6 = (_DWORD *)(a1 + 20);
LABEL_7:
      sub_20BFD6EA4(v5, v6);
      return;
    }
    v8 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 24);
    v9 = a2;
    v10 = v4;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (!v7)
    {
      *(_QWORD *)a2 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a2);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a2 + 1);
      return;
    }
    if (*(_DWORD *)a1 == 1)
    {
      sub_20BFD6E54(a2, (_DWORD *)(v7 + 16));
      v5 = a2 + 1;
      v6 = (_DWORD *)(v7 + 20);
      goto LABEL_7;
    }
    v8 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 24);
    v9 = a2;
    v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 16);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(v10, v8, v9);
}

BOOL sub_20C349068(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v8;
  pxrInternal__aapl__pxrReserved__::VtValue *v9;
  uint64_t ClipIndexForTime;

  v8 = *a2;
  v9 = *(pxrInternal__aapl__pxrReserved__::VtValue **)(a1 + 8);
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  return (pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>(*(_QWORD *)(*((_QWORD *)v8 + 11) + 16 * ClipIndexForTime), a3, (uint64_t (***)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))a1, v9, a5) & 1) != 0|| sub_20C3490F4((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v8 + 9, a3, v9) == 1;
}

uint64_t sub_20C3490F4(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t result;
  uint64_t v8;
  _QWORD v9[3];

  v9[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    result = sub_20C349220(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
    if ((_DWORD)result)
    {
      if (sub_20C0AA3E8(a3))
      {
        v9[1] = 0;
        sub_20BF4B5D8(a3, v9);
        sub_20BF4C2D8((uint64_t)v9);
        return 2;
      }
      else
      {
        return 1;
      }
    }
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_20C349220(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t HasField;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return HasField;
}

void sub_20C3492C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3492EC(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  int v16;
  int v17;
  float v18;
  unsigned int v19;
  uint64_t (**v21[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v22[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (*v23)(_QWORD, uint64_t);

  v22[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536868;
  v22[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))((char *)&v23 + 2);
  v21[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536868;
  v21[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v23;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::pxr_half::half>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v22, (uint64_t)&v23 + 2, a5)&& sub_20C349498((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))((char *)&v23 + 2)) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::pxr_half::half>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v21, (uint64_t)&v23, a6))
  {
    v16 = WORD1(v23);
  }
  else
  {
    v17 = sub_20C349498((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v23);
    v16 = WORD1(v23);
    if (v17 != 1)
      LOWORD(v23) = WORD1(v23);
  }
  v18 = (1.0 - (a4 - a5) / (a6 - a5)) * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v16]
      + (a4 - a5) / (a6 - a5) * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v23];
  if (v18 == 0.0)
  {
    v19 = HIWORD(LODWORD(v18));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v18) >> 23])
  {
    v19 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v18) >> 23]
        + (((LODWORD(v18) & 0x7FFFFF) + ((LODWORD(v18) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v19) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v18));
  }
  **(_WORD **)(a1 + 8) = v19;
  return 1;
}

uint64_t sub_20C349498(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34955C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34955C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C349624(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C3495FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C349624(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51BF30;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52D778;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C349678(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float v17;
  unsigned int v18;
  unsigned __int16 v20;
  unsigned __int16 v21;
  void *v22;
  unsigned __int16 *v23;
  std::type_info *v24;
  __int16 v25;

  v12 = sub_20C0EEAF8(a2);
  v24 = &stru_24C51BF30;
  v25 = 0;
  v22 = &unk_24C52D778;
  v23 = &v21;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v22, a5);
  if ((_BYTE)v25)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v25 = 0;
    v23 = &v20;
    v24 = &stru_24C51BF30;
    v22 = &unk_24C52D778;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v22, a6)
      || (_BYTE)v25)
    {
      v20 = v21;
      v16 = v21;
    }
    else
    {
      v16 = v20;
    }
    v17 = (1.0 - (a4 - a5) / (a6 - a5)) * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v21]
        + (a4 - a5) / (a6 - a5) * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v16];
    if (v17 == 0.0)
    {
      v18 = HIWORD(LODWORD(v17));
    }
    else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v17) >> 23])
    {
      v18 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v17) >> 23]
          + (((LODWORD(v17) & 0x7FFFFF) + ((LODWORD(v17) >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v18) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v17));
    }
    **(_WORD **)(a1 + 8) = v18;
  }
  return v14;
}

uint64_t sub_20C3497F8(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _WORD *v36;
  int v37;
  double v38;
  int v39;
  float v40;
  unsigned int v41;
  uint64_t (**v42[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v43[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v44;
  __int128 v45;
  unsigned __int16 *v46;
  __int128 v47;
  __int128 v48;
  unsigned __int16 *v49;
  __int16 v50;
  __int16 *v51;

  v49 = 0;
  v47 = 0u;
  v48 = 0u;
  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  v43[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C5368A0;
  v43[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v47;
  v42[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C5368A0;
  v42[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v44;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v43, (uint64_t)&v47, a5)&& sub_20C349AFC((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v47) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v42, (uint64_t)&v44, a6)&& sub_20C349AFC((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v44) != 1)
  {
    sub_20C2801F8((uint64_t)&v44, &v47);
  }
  if ((_QWORD)v47 == (_QWORD)v44 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v50 = 0;
      v51 = &v50;
      sub_20BF56DE0(v17, v47, &v51);
      v30 = v49;
      v31 = v46;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF57030(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = (_WORD *)*((_QWORD *)v32 + 4);
        do
        {
          v37 = *v30++;
          v38 = (1.0 - v16) * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v37];
          v39 = *v31++;
          v40 = v38 + v16 * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v39];
          if (v40 == 0.0)
          {
            v41 = HIWORD(LODWORD(v40));
          }
          else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v40) >> 23])
          {
            v41 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v40) >> 23]
                + (((LODWORD(v40) & 0x7FFFFF) + ((LODWORD(v40) >> 13) & 1) + 4095) >> 13);
          }
          else
          {
            LOWORD(v41) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v40));
          }
          *v36++ = v41;
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v45;
    v17[4] = (unint64_t)v46;
    v46 = (unsigned __int16 *)v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v44;
    v17[2] = v27;
    v44 = v29;
    *(_QWORD *)&v45 = v28;
    v22 = &v44;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v48;
    v17[4] = (unint64_t)v49;
    v49 = (unsigned __int16 *)v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v47;
    v17[2] = v19;
    v47 = v21;
    *(_QWORD *)&v48 = v20;
    v22 = &v47;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v44);
  sub_20BF5618C((uint64_t)&v47);
  return v24;
}

void sub_20C349AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C349AFC(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C349BC0(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C349BC0(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C349C88(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C349C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C349C88(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DDB0;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52D7B0;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C349CDC(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _WORD *v34;
  int v35;
  double v36;
  int v37;
  float v38;
  unsigned int v39;
  __int128 v40;
  __int128 v41;
  unsigned __int16 *v42;
  __int128 v43;
  __int128 v44;
  unsigned __int16 *v45;
  __int16 v46;
  __int16 *v47;

  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C2765A4(v12, a3, (uint64_t)&v43, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C2765A4(v14, a3, (uint64_t)&v40, a6) & 1) == 0)
      sub_20C2801F8((uint64_t)&v40, &v43);
    if ((_QWORD)v43 != (_QWORD)v40 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v44;
      v16[4] = (unint64_t)v45;
      v45 = (unsigned __int16 *)v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v43;
      v16[2] = v18;
      v43 = v20;
      *(_QWORD *)&v44 = v19;
      v21 = &v43;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v41;
      v16[4] = (unint64_t)v42;
      v42 = (unsigned __int16 *)v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v40;
      v16[2] = v25;
      v40 = v27;
      *(_QWORD *)&v41 = v26;
      v21 = &v40;
      goto LABEL_7;
    }
    v46 = 0;
    v47 = &v46;
    sub_20BF56DE0(v16, v43, &v47);
    v28 = v45;
    v29 = v42;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF57030(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = (_WORD *)*((_QWORD *)v30 + 4);
      do
      {
        v35 = *v28++;
        v36 = (1.0 - v15) * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v35];
        v37 = *v29++;
        v38 = v36 + v15 * pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v37];
        if (v38 == 0.0)
        {
          v39 = HIWORD(LODWORD(v38));
        }
        else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v38) >> 23])
        {
          v39 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v38) >> 23]
              + (((LODWORD(v38) & 0x7FFFFF) + ((LODWORD(v38) >> 13) & 1) + 4095) >> 13);
        }
        else
        {
          LOWORD(v39) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v38));
        }
        *v34++ = v39;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v40);
  sub_20BF5618C((uint64_t)&v43);
  return v13;
}

void sub_20C349F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C349F60(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  float v16;
  int v17;
  float v18;
  uint64_t (**v20[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v21[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (*v22)(_QWORD, uint64_t);

  v22 = 0;
  v21[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C5368D8;
  v21[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))((char *)&v22 + 4);
  v20[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C5368D8;
  v20[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v22;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<float>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v21, (uint64_t)&v22 + 4, a5)&& sub_20C34A0BC((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))((char *)&v22 + 4)) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<float>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v20, (uint64_t)&v22, a6))
  {
    v16 = *((float *)&v22 + 1);
  }
  else
  {
    v17 = sub_20C34A0BC((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v22);
    v16 = *((float *)&v22 + 1);
    if (v17 != 1)
      LODWORD(v22) = HIDWORD(v22);
  }
  v18 = (1.0 - (a4 - a5) / (a6 - a5)) * v16 + (a4 - a5) / (a6 - a5) * *(float *)&v22;
  **(float **)(a1 + 8) = v18;
  return 1;
}

uint64_t sub_20C34A0BC(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34A180(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34A180(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34A248(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34A220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34A248(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))MEMORY[0x24BEDB788];
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52D7E8;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34A29C(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int TimeSample;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  float v18;
  float v19;
  uint64_t v21;
  void *v22;
  char *v23;
  uint64_t v24;
  __int16 v25;

  v21 = 0;
  v12 = sub_20C0EEAF8(a2);
  v13 = MEMORY[0x24BEDB788];
  v24 = MEMORY[0x24BEDB788];
  v25 = 0;
  v22 = &unk_24C52D7E8;
  v23 = (char *)&v21 + 4;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v22, a5);
  if ((_BYTE)v25)
    v15 = 0;
  else
    v15 = TimeSample;
  if ((_DWORD)v15 == 1)
  {
    v16 = sub_20C0EEAF8(a2);
    v25 = 0;
    v23 = (char *)&v21;
    v24 = v13;
    v22 = &unk_24C52D7E8;
    v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v16, a3, (uint64_t)&v22, a6);
    v18 = *(float *)&v21;
    if ((v17 & ((_BYTE)v25 == 0)) == 0)
      v18 = *((float *)&v21 + 1);
    v19 = (1.0 - (a4 - a5) / (a6 - a5)) * *((float *)&v21 + 1) + (a4 - a5) / (a6 - a5) * v18;
    **(float **)(a1 + 8) = v19;
  }
  return v15;
}

uint64_t sub_20C34A3C4(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  float *v30;
  float *v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _DWORD *v36;
  float v37;
  double v38;
  float v39;
  uint64_t (**v40[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v41[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v42;
  __int128 v43;
  float *v44;
  __int128 v45;
  __int128 v46;
  float *v47;
  int v48;
  int *v49;

  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v41[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536910;
  v41[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v45;
  v40[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536910;
  v40[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v42;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<float>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v41, (uint64_t)&v45, a5)&& sub_20C34A668((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v45) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<float>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v40, (uint64_t)&v42, a6)&& sub_20C34A668((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v42) != 1)
  {
    sub_20BF9B1F8((uint64_t)&v42, &v45);
  }
  if ((_QWORD)v45 == (_QWORD)v42 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v48 = 0;
      v49 = &v48;
      sub_20BF56258(v17, v45, &v49);
      v30 = v47;
      v31 = v44;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF564A8(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = (_DWORD *)*((_QWORD *)v32 + 4);
        do
        {
          v37 = *v30++;
          v38 = (1.0 - v16) * v37;
          v39 = *v31++;
          *(float *)&v38 = v38 + v16 * v39;
          *v36++ = LODWORD(v38);
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v43;
    v17[4] = (unint64_t)v44;
    v44 = (float *)v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v42;
    v17[2] = v27;
    v42 = v29;
    *(_QWORD *)&v43 = v28;
    v22 = &v42;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v46;
    v17[4] = (unint64_t)v47;
    v47 = (float *)v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v45;
    v17[2] = v19;
    v45 = v21;
    *(_QWORD *)&v46 = v20;
    v22 = &v45;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v45);
  return v24;
}

void sub_20C34A634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34A668(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34A72C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34A72C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34A7F4(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34A7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34A7F4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DD98;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52D820;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34A848(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  float *v28;
  float *v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _DWORD *v34;
  float v35;
  double v36;
  float v37;
  __int128 v38;
  __int128 v39;
  float *v40;
  __int128 v41;
  __int128 v42;
  float *v43;
  int v44;
  int *v45;

  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C27691C(v12, a3, (uint64_t)&v41, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C27691C(v14, a3, (uint64_t)&v38, a6) & 1) == 0)
      sub_20BF9B1F8((uint64_t)&v38, &v41);
    if ((_QWORD)v41 != (_QWORD)v38 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v42;
      v16[4] = (unint64_t)v43;
      v43 = (float *)v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v41;
      v16[2] = v18;
      v41 = v20;
      *(_QWORD *)&v42 = v19;
      v21 = &v41;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v39;
      v16[4] = (unint64_t)v40;
      v40 = (float *)v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v38;
      v16[2] = v25;
      v38 = v27;
      *(_QWORD *)&v39 = v26;
      v21 = &v38;
      goto LABEL_7;
    }
    v44 = 0;
    v45 = &v44;
    sub_20BF56258(v16, v41, &v45);
    v28 = v43;
    v29 = v40;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF564A8(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = (_DWORD *)*((_QWORD *)v30 + 4);
      do
      {
        v35 = *v28++;
        v36 = (1.0 - v15) * v35;
        v37 = *v29++;
        *(float *)&v36 = v36 + v15 * v37;
        *v34++ = LODWORD(v36);
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v38);
  sub_20BF5618C((uint64_t)&v41);
  return v13;
}

void sub_20C34AA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34AA6C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD, uint64_t);
  int v17;
  uint64_t (**v19[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v20[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  double v21;
  uint64_t (*v22)(_QWORD, uint64_t);

  v21 = 0.0;
  v22 = 0;
  v20[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536948;
  v20[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v22;
  v19[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536948;
  v19[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v21;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<double>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v20, (uint64_t)&v22, a5)&& sub_20C34ABBC((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, &v22) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<double>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v19, (uint64_t)&v21, a6))
  {
    v16 = v22;
  }
  else
  {
    v17 = sub_20C34ABBC((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v21);
    v16 = v22;
    if (v17 != 1)
      v21 = *(double *)&v22;
  }
  **(double **)(a1 + 8) = (1.0 - (a4 - a5) / (a6 - a5)) * *(double *)&v16 + (a4 - a5) / (a6 - a5) * v21;
  return 1;
}

uint64_t sub_20C34ABBC(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34AC80(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34AC80(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34AD48(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34AD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34AD48(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))MEMORY[0x24BEDB780];
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52D858;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34AD9C(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int TimeSample;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  double v18;
  double v20;
  double v21;
  void *v22;
  double *v23;
  uint64_t v24;
  __int16 v25;

  v20 = 0.0;
  v21 = 0.0;
  v12 = sub_20C0EEAF8(a2);
  v13 = MEMORY[0x24BEDB780];
  v24 = MEMORY[0x24BEDB780];
  v25 = 0;
  v22 = &unk_24C52D858;
  v23 = &v21;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v22, a5);
  if ((_BYTE)v25)
    v15 = 0;
  else
    v15 = TimeSample;
  if ((_DWORD)v15 == 1)
  {
    v16 = sub_20C0EEAF8(a2);
    v25 = 0;
    v23 = &v20;
    v24 = v13;
    v22 = &unk_24C52D858;
    v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v16, a3, (uint64_t)&v22, a6);
    v18 = v20;
    if ((v17 & ((_BYTE)v25 == 0)) == 0)
      v18 = v21;
    **(double **)(a1 + 8) = (1.0 - (a4 - a5) / (a6 - a5)) * v21 + (a4 - a5) / (a6 - a5) * v18;
  }
  return v15;
}

uint64_t sub_20C34AEB8(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  double *v30;
  double *v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  uint64_t (**v40[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v41[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v42;
  __int128 v43;
  double *v44;
  __int128 v45;
  __int128 v46;
  double *v47;
  uint64_t v48;
  uint64_t *v49;

  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v41[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536980;
  v41[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v45;
  v40[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536980;
  v40[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v42;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<double>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v41, (uint64_t)&v45, a5)&& sub_20C34B14C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v45) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<double>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v40, (uint64_t)&v42, a6)&& sub_20C34B14C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v42) != 1)
  {
    sub_20BF985B0((uint64_t)&v42, &v45);
  }
  if ((_QWORD)v45 == (_QWORD)v42 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v48 = 0;
      v49 = &v48;
      sub_20BF57894(v17, v45, &v49);
      v30 = v47;
      v31 = v44;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF57AE4(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = (double *)*((_QWORD *)v32 + 4);
        do
        {
          v37 = *v30++;
          v38 = v37;
          v39 = *v31++;
          *v36++ = (1.0 - v16) * v38 + v16 * v39;
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v43;
    v17[4] = (unint64_t)v44;
    v44 = (double *)v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v42;
    v17[2] = v27;
    v42 = v29;
    *(_QWORD *)&v43 = v28;
    v22 = &v42;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v46;
    v17[4] = (unint64_t)v47;
    v47 = (double *)v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v45;
    v17[2] = v19;
    v45 = v21;
    *(_QWORD *)&v46 = v20;
    v22 = &v45;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v45);
  return v24;
}

void sub_20C34B118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34B14C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34B210(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34B210(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34B2D8(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34B2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34B2D8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DD80;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52D890;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34B32C(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  double *v28;
  double *v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  __int128 v38;
  __int128 v39;
  double *v40;
  __int128 v41;
  __int128 v42;
  double *v43;
  uint64_t v44;
  uint64_t *v45;

  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C276C94(v12, a3, (uint64_t)&v41, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C276C94(v14, a3, (uint64_t)&v38, a6) & 1) == 0)
      sub_20BF985B0((uint64_t)&v38, &v41);
    if ((_QWORD)v41 != (_QWORD)v38 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v42;
      v16[4] = (unint64_t)v43;
      v43 = (double *)v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v41;
      v16[2] = v18;
      v41 = v20;
      *(_QWORD *)&v42 = v19;
      v21 = &v41;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v39;
      v16[4] = (unint64_t)v40;
      v40 = (double *)v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v38;
      v16[2] = v25;
      v38 = v27;
      *(_QWORD *)&v39 = v26;
      v21 = &v38;
      goto LABEL_7;
    }
    v44 = 0;
    v45 = &v44;
    sub_20BF57894(v16, v41, &v45);
    v28 = v43;
    v29 = v40;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF57AE4(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = (double *)*((_QWORD *)v30 + 4);
      do
      {
        v35 = *v28++;
        v36 = v35;
        v37 = *v29++;
        *v34++ = (1.0 - v15) * v36 + v15 * v37;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v38);
  sub_20BF5618C((uint64_t)&v41);
  return v13;
}

void sub_20C34B508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34B540(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  uint64_t (**v17[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v18[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  double v19;
  double v20;

  v19 = 0.0;
  v20 = 0.0;
  v18[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C5369B8;
  v18[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v20;
  v17[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C5369B8;
  v17[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v19;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if ((pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v18, &v20, a5) & 1) == 0&& sub_20C34B68C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v20) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if ((pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v17, &v19, a6) & 1) == 0&& sub_20C34B68C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v19) != 1)
  {
    v19 = v20;
  }
  **(double **)(a1 + 8) = (1.0 - (a4 - a5) / (a6 - a5)) * v20 + (a4 - a5) / (a6 - a5) * v19;
  return 1;
}

uint64_t sub_20C34B68C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34B750(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34B750(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34B818(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34B7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34B818(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C525368;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52D8C8;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34B86C(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  double v17;
  double v19;
  double v20;
  void *v21;
  double *v22;
  std::type_info *v23;
  __int16 v24;

  v19 = 0.0;
  v20 = 0.0;
  v12 = sub_20C0EEAF8(a2);
  v23 = &stru_24C525368;
  v24 = 0;
  v21 = &unk_24C52D8C8;
  v22 = &v20;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v21, a5);
  if ((_BYTE)v24)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v24 = 0;
    v22 = &v19;
    v23 = &stru_24C525368;
    v21 = &unk_24C52D8C8;
    v16 = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v21, a6);
    v17 = v19;
    if ((v16 & ((_BYTE)v24 == 0)) == 0)
      v17 = v20;
    **(double **)(a1 + 8) = (1.0 - (a4 - a5) / (a6 - a5)) * v20 + (a4 - a5) / (a6 - a5) * v17;
  }
  return v14;
}

uint64_t sub_20C34B988(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  double *v30;
  double *v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  double *v36;
  double v37;
  double v38;
  double v39;
  uint64_t (**v40[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v41[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v42;
  __int128 v43;
  double *v44;
  __int128 v45;
  __int128 v46;
  double *v47;
  uint64_t v48;
  uint64_t *v49;

  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v41[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C5369F0;
  v41[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v45;
  v40[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C5369F0;
  v40[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v42;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if ((pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v41, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v45, a5) & 1) == 0&& sub_20C34BC1C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v45) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if ((pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v40, (pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v42, a6) & 1) == 0&& sub_20C34BC1C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v42) != 1)
  {
    sub_20C280A40((uint64_t)&v42, &v45);
  }
  if ((_QWORD)v45 == (_QWORD)v42 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v48 = 0;
      v49 = &v48;
      sub_20C0075EC(v17, v45, &v49);
      v30 = v47;
      v31 = v44;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20C00783C(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = (double *)*((_QWORD *)v32 + 4);
        do
        {
          v37 = *v30++;
          v38 = v37;
          v39 = *v31++;
          *v36++ = (1.0 - v16) * v38 + v16 * v39;
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v43;
    v17[4] = (unint64_t)v44;
    v44 = (double *)v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v42;
    v17[2] = v27;
    v42 = v29;
    *(_QWORD *)&v43 = v28;
    v22 = &v42;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v46;
    v17[4] = (unint64_t)v47;
    v47 = (double *)v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v45;
    v17[2] = v19;
    v45 = v21;
    *(_QWORD *)&v46 = v20;
    v22 = &v45;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v45);
  return v24;
}

void sub_20C34BBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34BC1C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34BCE0(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34BCE0(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34BDA8(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34BD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34BDA8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C525430;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52D900;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34BDFC(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  double *v28;
  double *v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double *v34;
  double v35;
  double v36;
  double v37;
  __int128 v38;
  __int128 v39;
  double *v40;
  __int128 v41;
  __int128 v42;
  double *v43;
  uint64_t v44;
  uint64_t *v45;

  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C277068(v12, a3, (uint64_t)&v41, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C277068(v14, a3, (uint64_t)&v38, a6) & 1) == 0)
      sub_20C280A40((uint64_t)&v38, &v41);
    if ((_QWORD)v41 != (_QWORD)v38 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v42;
      v16[4] = (unint64_t)v43;
      v43 = (double *)v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v41;
      v16[2] = v18;
      v41 = v20;
      *(_QWORD *)&v42 = v19;
      v21 = &v41;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v39;
      v16[4] = (unint64_t)v40;
      v40 = (double *)v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v38;
      v16[2] = v25;
      v38 = v27;
      *(_QWORD *)&v39 = v26;
      v21 = &v38;
      goto LABEL_7;
    }
    v44 = 0;
    v45 = &v44;
    sub_20C0075EC(v16, v41, &v45);
    v28 = v43;
    v29 = v40;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20C00783C(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = (double *)*((_QWORD *)v30 + 4);
      do
      {
        v35 = *v28++;
        v36 = v35;
        v37 = *v29++;
        *v34++ = (1.0 - v15) * v36 + v15 * v37;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v38);
  sub_20BF5618C((uint64_t)&v41);
  return v13;
}

void sub_20C34BFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34C010(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  float64x2_t v25;
  uint64_t (**v26[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v27[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  float64x2_t v28;
  __int128 v29;
  float64x2_t v30;
  __int128 v31;
  _OWORD v32[2];
  float64x2_t v33;
  __int128 v34;

  v27[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536A28;
  v27[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v30;
  v26[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536A28;
  v26[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v28;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v27, (uint64_t)&v30, a5)&& sub_20C34C1A0((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, &v30) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v26, (uint64_t)&v28, a6)&& sub_20C34C1A0((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v28) != 1)
  {
    v28 = v30;
    v29 = v31;
  }
  v16 = (a4 - a5) / (a6 - a5);
  v33 = v30;
  v34 = v31;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v33, 1.0 - v16);
  v25 = *(float64x2_t *)v17;
  v18 = *(_QWORD *)(v17 + 16);
  v19 = *(_QWORD *)(v17 + 24);
  v33 = v28;
  v34 = v29;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v33, v16);
  v21 = v20[1];
  v32[0] = *v20;
  v32[1] = v21;
  v33 = v25;
  *(_QWORD *)&v34 = v18;
  *((_QWORD *)&v34 + 1) = v19;
  pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v33.f64, (double *)v32);
  v22 = v34;
  v23 = *(_QWORD *)(a1 + 8);
  *(float64x2_t *)v23 = v33;
  *(_OWORD *)(v23 + 16) = v22;
  return 1;
}

uint64_t sub_20C34C1A0(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34C264(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34C264(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34C32C(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34C304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34C32C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51BF90;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DAF8;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34C380(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  float64x2_t v25;
  float64x2_t v26;
  __int128 v27;
  float64x2_t v28;
  __int128 v29;
  _OWORD v30[2];
  float64x2_t v31;
  __int128 v32;

  v12 = sub_20C0EEAF8(a2);
  *(_QWORD *)&v32 = &stru_24C51BF90;
  WORD4(v32) = 0;
  *(_QWORD *)&v31.f64[0] = &unk_24C52DAF8;
  *(_QWORD *)&v31.f64[1] = &v28;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v31, a5);
  if (BYTE8(v32))
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    WORD4(v32) = 0;
    *(_QWORD *)&v31.f64[1] = &v26;
    *(_QWORD *)&v32 = &stru_24C51BF90;
    *(_QWORD *)&v31.f64[0] = &unk_24C52DAF8;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v31, a6)
      || BYTE8(v32))
    {
      v26 = v28;
      v27 = v29;
    }
    v16 = (a4 - a5) / (a6 - a5);
    v31 = v28;
    v32 = v29;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v31, 1.0 - v16);
    v25 = *(float64x2_t *)v17;
    v18 = *(_QWORD *)(v17 + 16);
    v19 = *(_QWORD *)(v17 + 24);
    v31 = v26;
    v32 = v27;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v31, v16);
    v21 = v20[1];
    v30[0] = *v20;
    v30[1] = v21;
    v31 = v25;
    *(_QWORD *)&v32 = v18;
    *((_QWORD *)&v32 + 1) = v19;
    pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v31.f64, (double *)v30);
    v22 = v32;
    v23 = *(_QWORD *)(a1 + 8);
    *(float64x2_t *)v23 = v31;
    *(_OWORD *)(v23 + 16) = v22;
  }
  return v14;
}

uint64_t sub_20C34C4DC(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _OWORD *v36;
  __int128 v37;
  double *v38;
  float64_t v39;
  float64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  uint64_t (**v47[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v48[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  unint64_t v54;
  _OWORD v55[2];
  float64x2_t v56;
  __int128 v57;

  v54 = 0;
  v52 = 0u;
  v53 = 0u;
  v51 = 0;
  v49 = 0u;
  v50 = 0u;
  v48[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536A60;
  v48[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v52;
  v47[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536A60;
  v47[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v49;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v48, (uint64_t)&v52, a5)&& sub_20C34C7D0((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v52) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v47, (uint64_t)&v49, a6)&& sub_20C34C7D0((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v49) != 1)
  {
    sub_20C281F9C((uint64_t)&v49, &v52);
  }
  if ((_QWORD)v52 == (_QWORD)v49 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v56 = 0u;
      v57 = 0u;
      *(_QWORD *)&v55[0] = &v56;
      sub_20C01657C(v17, v52, (_OWORD **)v55);
      v30 = v54;
      v31 = v51;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20C0167DC(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = (_OWORD *)(*((_QWORD *)v32 + 4) + 16);
        do
        {
          v37 = *(_OWORD *)(v30 + 16);
          v56 = *(float64x2_t *)v30;
          v57 = v37;
          pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v56, 1.0 - v16);
          v39 = *v38;
          v40 = v38[1];
          v41 = *((_QWORD *)v38 + 2);
          v42 = *((_QWORD *)v38 + 3);
          v43 = *(_OWORD *)(v31 + 16);
          v56 = *(float64x2_t *)v31;
          v57 = v43;
          pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v56, v16);
          v45 = v44[1];
          v55[0] = *v44;
          v55[1] = v45;
          v56.f64[0] = v39;
          v56.f64[1] = v40;
          *(_QWORD *)&v57 = v41;
          *((_QWORD *)&v57 + 1) = v42;
          pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v56.f64, (double *)v55);
          v46 = v57;
          *(v36 - 1) = v56;
          *v36 = v46;
          v36 += 2;
          v31 += 32;
          v30 += 32;
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v50;
    v17[4] = v51;
    v51 = v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v49;
    v17[2] = v27;
    v49 = v29;
    *(_QWORD *)&v50 = v28;
    v22 = &v49;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v53;
    v17[4] = v54;
    v54 = v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v52;
    v17[2] = v19;
    v52 = v21;
    *(_QWORD *)&v53 = v20;
    v22 = &v52;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v49);
  sub_20BF5618C((uint64_t)&v52);
  return v24;
}

void sub_20C34C798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34C7D0(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34C894(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34C894(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34C95C(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34C934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34C95C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DB28;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DB30;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34C9B0(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 v35;
  double *v36;
  float64_t v37;
  float64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  _OWORD v51[2];
  float64x2_t v52;
  __int128 v53;

  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C278538(v12, a3, (uint64_t)&v48, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C278538(v14, a3, (uint64_t)&v45, a6) & 1) == 0)
      sub_20C281F9C((uint64_t)&v45, &v48);
    if ((_QWORD)v48 != (_QWORD)v45 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v49;
      v16[4] = v50;
      v50 = v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v48;
      v16[2] = v18;
      v48 = v20;
      *(_QWORD *)&v49 = v19;
      v21 = &v48;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v46;
      v16[4] = v47;
      v47 = v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v45;
      v16[2] = v25;
      v45 = v27;
      *(_QWORD *)&v46 = v26;
      v21 = &v45;
      goto LABEL_7;
    }
    v52 = 0u;
    v53 = 0u;
    *(_QWORD *)&v51[0] = &v52;
    sub_20C01657C(v16, v48, (_OWORD **)v51);
    v28 = v50;
    v29 = v47;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20C0167DC(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = (_OWORD *)(*((_QWORD *)v30 + 4) + 16);
      do
      {
        v35 = *(_OWORD *)(v28 + 16);
        v52 = *(float64x2_t *)v28;
        v53 = v35;
        pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, 1.0 - v15);
        v37 = *v36;
        v38 = v36[1];
        v39 = *((_QWORD *)v36 + 2);
        v40 = *((_QWORD *)v36 + 3);
        v41 = *(_OWORD *)(v29 + 16);
        v52 = *(float64x2_t *)v29;
        v53 = v41;
        pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator*=(&v52, v15);
        v43 = v42[1];
        v51[0] = *v42;
        v51[1] = v43;
        v52.f64[0] = v37;
        v52.f64[1] = v38;
        *(_QWORD *)&v53 = v39;
        *((_QWORD *)&v53 + 1) = v40;
        pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator+=(v52.f64, (double *)v51);
        v44 = v53;
        *(v34 - 1) = v52;
        *v34 = v44;
        v34 += 2;
        v29 += 32;
        v28 += 32;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v45);
  sub_20BF5618C((uint64_t)&v48);
  return v13;
}

void sub_20C34CBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34CC24(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t (**v29[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v30[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  float64x2_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  float64x2_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[4];
  uint64_t v42;
  float64x2_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  float64x2_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v30[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536A98;
  v30[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v36;
  v29[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536A98;
  v29[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v31;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v30, (uint64_t)&v36, a5)&& sub_20C34CE60((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, &v36) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v29, (uint64_t)&v31, a6)&& sub_20C34CE60((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v31) != 1)
  {
    v33 = v38;
    v34 = v39;
    v35 = v40;
    v31 = v36;
    v32 = v37;
  }
  v16 = (a4 - a5) / (a6 - a5);
  v45 = v38;
  v46 = v39;
  v47 = v40;
  v43 = v36;
  v44 = v37;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v43, 1.0 - v16);
  v18 = *(_OWORD *)(v17 + 48);
  v50 = *(_OWORD *)(v17 + 32);
  v51 = v18;
  v52 = *(_QWORD *)(v17 + 64);
  v19 = *(_OWORD *)(v17 + 16);
  v48 = *(float64x2_t *)v17;
  v49 = v19;
  v45 = v33;
  v46 = v34;
  v47 = v35;
  v43 = v31;
  v44 = v32;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v43, v16);
  v41[0] = *(_OWORD *)v20;
  v21 = *(_OWORD *)(v20 + 16);
  v22 = *(_OWORD *)(v20 + 32);
  v23 = *(_OWORD *)(v20 + 48);
  v42 = *(_QWORD *)(v20 + 64);
  v41[2] = v22;
  v41[3] = v23;
  v41[1] = v21;
  v45 = v50;
  v46 = v51;
  v47 = v52;
  v43 = v48;
  v44 = v49;
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v43.f64, (double *)v41);
  v24 = *(_QWORD *)(a1 + 8);
  *(float64x2_t *)v24 = v43;
  v25 = v44;
  v26 = v45;
  v27 = v46;
  *(_QWORD *)(v24 + 64) = v47;
  *(_OWORD *)(v24 + 32) = v26;
  *(_OWORD *)(v24 + 48) = v27;
  *(_OWORD *)(v24 + 16) = v25;
  return 1;
}

uint64_t sub_20C34CE60(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34CF24(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34CF24(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34CFEC(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34CFC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34CFEC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51BFC0;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DB68;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34D040(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  float64x2_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  float64x2_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  _OWORD v39[4];
  uint64_t v40;
  float64x2_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  float64x2_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v12 = sub_20C0EEAF8(a2);
  *(_QWORD *)&v42 = &stru_24C51BFC0;
  WORD4(v42) = 0;
  *(_QWORD *)&v41.f64[0] = &unk_24C52DB68;
  *(_QWORD *)&v41.f64[1] = &v34;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v41, a5);
  if (BYTE8(v42))
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    WORD4(v42) = 0;
    *(_QWORD *)&v41.f64[1] = &v29;
    *(_QWORD *)&v42 = &stru_24C51BFC0;
    *(_QWORD *)&v41.f64[0] = &unk_24C52DB68;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v41, a6)
      || BYTE8(v42))
    {
      v31 = v36;
      v32 = v37;
      v33 = v38;
      v29 = v34;
      v30 = v35;
    }
    v16 = (a4 - a5) / (a6 - a5);
    v43 = v36;
    v44 = v37;
    v45 = v38;
    v41 = v34;
    v42 = v35;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v41, 1.0 - v16);
    v18 = *(_OWORD *)(v17 + 48);
    v48 = *(_OWORD *)(v17 + 32);
    v49 = v18;
    v50 = *(_QWORD *)(v17 + 64);
    v19 = *(_OWORD *)(v17 + 16);
    v46 = *(float64x2_t *)v17;
    v47 = v19;
    v43 = v31;
    v44 = v32;
    v45 = v33;
    v41 = v29;
    v42 = v30;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v41, v16);
    v39[0] = *(_OWORD *)v20;
    v21 = *(_OWORD *)(v20 + 16);
    v22 = *(_OWORD *)(v20 + 32);
    v23 = *(_OWORD *)(v20 + 48);
    v40 = *(_QWORD *)(v20 + 64);
    v39[2] = v22;
    v39[3] = v23;
    v39[1] = v21;
    v43 = v48;
    v44 = v49;
    v45 = v50;
    v41 = v46;
    v42 = v47;
    pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=(v41.f64, (double *)v39);
    v24 = *(_QWORD *)(a1 + 8);
    *(float64x2_t *)v24 = v41;
    v25 = v42;
    v26 = v43;
    v27 = v44;
    *(_QWORD *)(v24 + 64) = v45;
    *(_OWORD *)(v24 + 32) = v26;
    *(_OWORD *)(v24 + 48) = v27;
    *(_OWORD *)(v24 + 16) = v25;
  }
  return v14;
}

uint64_t sub_20C34D258(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t (**v56[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v57[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v58;
  __int128 v59;
  unint64_t v60;
  __int128 v61;
  __int128 v62;
  unint64_t v63;
  _OWORD v64[4];
  uint64_t v65;
  float64x2_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v63 = 0;
  v61 = 0u;
  v62 = 0u;
  v60 = 0;
  v58 = 0u;
  v59 = 0u;
  v57[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536AD0;
  v57[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v61;
  v56[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536AD0;
  v56[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v58;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v57, (uint64_t)&v61, a5)&& sub_20C34D614((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v61) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v56, (uint64_t)&v58, a6)&& sub_20C34D614((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v58) != 1)
  {
    sub_20C282374((uint64_t)&v58, &v61);
  }
  if ((_QWORD)v61 == (_QWORD)v58 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v70 = 0;
      v68 = 0u;
      v69 = 0u;
      v66 = 0u;
      v67 = 0u;
      *(_QWORD *)&v71 = &v66;
      sub_20C017334(v17, v61, (uint64_t *)&v71);
      v30 = v63;
      v31 = v60;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20C01764C(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = *((_QWORD *)v32 + 4);
        do
        {
          v66 = *(float64x2_t *)v30;
          v37 = *(_OWORD *)(v30 + 16);
          v38 = *(_OWORD *)(v30 + 32);
          v39 = *(_OWORD *)(v30 + 48);
          v70 = *(_QWORD *)(v30 + 64);
          v68 = v38;
          v69 = v39;
          v67 = v37;
          pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v66, 1.0 - v16);
          v72 = v40[1];
          v73 = v40[2];
          v74 = v40[3];
          v75 = *((_QWORD *)v40 + 8);
          v71 = *v40;
          v66 = *(float64x2_t *)v31;
          v41 = *(_OWORD *)(v31 + 16);
          v42 = *(_OWORD *)(v31 + 32);
          v43 = *(_OWORD *)(v31 + 48);
          v70 = *(_QWORD *)(v31 + 64);
          v68 = v42;
          v69 = v43;
          v67 = v41;
          pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v66, v16);
          v64[0] = *(_OWORD *)v44;
          v45 = *(_OWORD *)(v44 + 16);
          v46 = *(_OWORD *)(v44 + 32);
          v47 = *(_OWORD *)(v44 + 48);
          v65 = *(_QWORD *)(v44 + 64);
          v64[2] = v46;
          v64[3] = v47;
          v64[1] = v45;
          v53 = v73;
          v54 = v74;
          v55 = v75;
          v51 = v71;
          v52 = v72;
          pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=((double *)&v51, (double *)v64);
          *(_OWORD *)v36 = v51;
          v48 = v52;
          v49 = v53;
          v50 = v54;
          *(_QWORD *)(v36 + 64) = v55;
          *(_OWORD *)(v36 + 32) = v49;
          *(_OWORD *)(v36 + 48) = v50;
          *(_OWORD *)(v36 + 16) = v48;
          v36 += 72;
          v31 += 72;
          v30 += 72;
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v59;
    v17[4] = v60;
    v60 = v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v58;
    v17[2] = v27;
    v58 = v29;
    *(_QWORD *)&v59 = v28;
    v22 = &v58;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v62;
    v17[4] = v63;
    v63 = v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v61;
    v17[2] = v19;
    v61 = v21;
    *(_QWORD *)&v62 = v20;
    v22 = &v61;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v58);
  sub_20BF5618C((uint64_t)&v61);
  return v24;
}

void sub_20C34D5CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20BF5618C((uint64_t)&a23);
  sub_20BF5618C((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34D614(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34D6D8(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34D6D8(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34D7A0(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34D778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34D7A0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DB10;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DBA0;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34D7F4(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  _OWORD v60[4];
  uint64_t v61;
  float64x2_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  v56 = 0;
  v54 = 0u;
  v55 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C2788B0(v12, a3, (uint64_t)&v57, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C2788B0(v14, a3, (uint64_t)&v54, a6) & 1) == 0)
      sub_20C282374((uint64_t)&v54, &v57);
    if ((_QWORD)v57 != (_QWORD)v54 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v58;
      v16[4] = v59;
      v59 = v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v57;
      v16[2] = v18;
      v57 = v20;
      *(_QWORD *)&v58 = v19;
      v21 = &v57;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v55;
      v16[4] = v56;
      v56 = v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v54;
      v16[2] = v25;
      v54 = v27;
      *(_QWORD *)&v55 = v26;
      v21 = &v54;
      goto LABEL_7;
    }
    v66 = 0;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    *(_QWORD *)&v67 = &v62;
    sub_20C017334(v16, v57, (uint64_t *)&v67);
    v28 = v59;
    v29 = v56;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20C01764C(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = *((_QWORD *)v30 + 4);
      do
      {
        v62 = *(float64x2_t *)v28;
        v35 = *(_OWORD *)(v28 + 16);
        v36 = *(_OWORD *)(v28 + 32);
        v37 = *(_OWORD *)(v28 + 48);
        v66 = *(_QWORD *)(v28 + 64);
        v64 = v36;
        v65 = v37;
        v63 = v35;
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v62, 1.0 - v15);
        v68 = v38[1];
        v69 = v38[2];
        v70 = v38[3];
        v71 = *((_QWORD *)v38 + 8);
        v67 = *v38;
        v62 = *(float64x2_t *)v29;
        v39 = *(_OWORD *)(v29 + 16);
        v40 = *(_OWORD *)(v29 + 32);
        v41 = *(_OWORD *)(v29 + 48);
        v66 = *(_QWORD *)(v29 + 64);
        v64 = v40;
        v65 = v41;
        v63 = v39;
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator*=(&v62, v15);
        v60[0] = *(_OWORD *)v42;
        v43 = *(_OWORD *)(v42 + 16);
        v44 = *(_OWORD *)(v42 + 32);
        v45 = *(_OWORD *)(v42 + 48);
        v61 = *(_QWORD *)(v42 + 64);
        v60[2] = v44;
        v60[3] = v45;
        v60[1] = v43;
        v51 = v69;
        v52 = v70;
        v53 = v71;
        v49 = v67;
        v50 = v68;
        pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator+=((double *)&v49, (double *)v60);
        *(_OWORD *)v34 = v49;
        v46 = v50;
        v47 = v51;
        v48 = v52;
        *(_QWORD *)(v34 + 64) = v53;
        *(_OWORD *)(v34 + 32) = v47;
        *(_OWORD *)(v34 + 48) = v48;
        *(_OWORD *)(v34 + 16) = v46;
        v34 += 72;
        v29 += 72;
        v28 += 72;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v54);
  sub_20BF5618C((uint64_t)&v57);
  return v13;
}

void sub_20C34DAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34DB30(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  uint64_t (**v37[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v38[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  _OWORD v55[8];
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  v38[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536B08;
  v38[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v47;
  v37[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536B08;
  v37[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v39;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v38, (uint64_t)&v47, a5)&& sub_20C34DD8C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, &v47) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v37, (uint64_t)&v39, a6)&& sub_20C34DD8C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v39) != 1)
  {
    v43 = v51;
    v44 = v52;
    v45 = v53;
    v46 = v54;
    v39 = v47;
    v40 = v48;
    v41 = v49;
    v42 = v50;
  }
  v16 = (a4 - a5) / (a6 - a5);
  v60 = v51;
  v61 = v52;
  v62 = v53;
  v63 = v54;
  v56 = v47;
  v57 = v48;
  v58 = v49;
  v59 = v50;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v56, 1.0 - v16);
  v18 = v17[5];
  v68 = v17[4];
  v69 = v18;
  v19 = v17[7];
  v70 = v17[6];
  v71 = v19;
  v20 = v17[1];
  v64 = *v17;
  v65 = v20;
  v21 = v17[3];
  v66 = v17[2];
  v67 = v21;
  v60 = v43;
  v61 = v44;
  v62 = v45;
  v63 = v46;
  v56 = v39;
  v57 = v40;
  v58 = v41;
  v59 = v42;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v56, v16);
  v23 = *v22;
  v24 = v22[1];
  v25 = v22[3];
  v55[2] = v22[2];
  v55[3] = v25;
  v55[0] = v23;
  v55[1] = v24;
  v26 = v22[4];
  v27 = v22[5];
  v28 = v22[7];
  v55[6] = v22[6];
  v55[7] = v28;
  v55[4] = v26;
  v55[5] = v27;
  v62 = v70;
  v63 = v71;
  v60 = v68;
  v61 = v69;
  v58 = v66;
  v59 = v67;
  v56 = v64;
  v57 = v65;
  pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v56.f64, (double *)v55);
  v29 = *(float64x2_t **)(a1 + 8);
  v30 = v56;
  v31 = v57;
  v32 = v59;
  v29[2] = v58;
  v29[3] = v32;
  *v29 = v30;
  v29[1] = v31;
  v33 = v60;
  v34 = v61;
  v35 = v63;
  v29[6] = v62;
  v29[7] = v35;
  v29[4] = v33;
  v29[5] = v34;
  return 1;
}

uint64_t sub_20C34DD8C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34DE50(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34DE50(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34DF18(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34DEF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34DF18(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51BFE0;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DBD8;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34DF6C(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float64x2_t *v17;
  float64x2_t v18;
  float64x2_t v19;
  float64x2_t v20;
  float64x2_t v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  float64x2_t *v29;
  float64x2_t v30;
  float64x2_t v31;
  float64x2_t v32;
  float64x2_t v33;
  float64x2_t v34;
  float64x2_t v35;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  _OWORD v53[8];
  float64x2_t v54;
  float64x2_t v55;
  float64x2_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float64x2_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float64x2_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  v12 = sub_20C0EEAF8(a2);
  *(_QWORD *)&v55.f64[0] = &stru_24C51BFE0;
  LOWORD(v55.f64[1]) = 0;
  *(_QWORD *)&v54.f64[0] = &unk_24C52DBD8;
  *(_QWORD *)&v54.f64[1] = &v45;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v54, a5);
  if (LOBYTE(v55.f64[1]))
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    LOWORD(v55.f64[1]) = 0;
    *(_QWORD *)&v54.f64[1] = &v37;
    *(_QWORD *)&v55.f64[0] = &stru_24C51BFE0;
    *(_QWORD *)&v54.f64[0] = &unk_24C52DBD8;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v54, a6)
      || LOBYTE(v55.f64[1]))
    {
      v41 = v49;
      v42 = v50;
      v43 = v51;
      v44 = v52;
      v37 = v45;
      v38 = v46;
      v39 = v47;
      v40 = v48;
    }
    v16 = (a4 - a5) / (a6 - a5);
    v58 = v49;
    v59 = v50;
    v60 = v51;
    v61 = v52;
    v54 = v45;
    v55 = v46;
    v56 = v47;
    v57 = v48;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v54, 1.0 - v16);
    v18 = v17[5];
    v66 = v17[4];
    v67 = v18;
    v19 = v17[7];
    v68 = v17[6];
    v69 = v19;
    v20 = v17[1];
    v62 = *v17;
    v63 = v20;
    v21 = v17[3];
    v64 = v17[2];
    v65 = v21;
    v58 = v41;
    v59 = v42;
    v60 = v43;
    v61 = v44;
    v54 = v37;
    v55 = v38;
    v56 = v39;
    v57 = v40;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v54, v16);
    v23 = *v22;
    v24 = v22[1];
    v25 = v22[3];
    v53[2] = v22[2];
    v53[3] = v25;
    v53[0] = v23;
    v53[1] = v24;
    v26 = v22[4];
    v27 = v22[5];
    v28 = v22[7];
    v53[6] = v22[6];
    v53[7] = v28;
    v53[4] = v26;
    v53[5] = v27;
    v60 = v68;
    v61 = v69;
    v58 = v66;
    v59 = v67;
    v56 = v64;
    v57 = v65;
    v54 = v62;
    v55 = v63;
    pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=(v54.f64, (double *)v53);
    v29 = *(float64x2_t **)(a1 + 8);
    v30 = v54;
    v31 = v55;
    v32 = v57;
    v29[2] = v56;
    v29[3] = v32;
    *v29 = v30;
    v29[1] = v31;
    v33 = v58;
    v34 = v59;
    v35 = v61;
    v29[6] = v60;
    v29[7] = v35;
    v29[4] = v33;
    v29[5] = v34;
  }
  return v14;
}

uint64_t sub_20C34E19C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  float64x2_t *v30;
  float64x2_t *v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _OWORD *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  __int128 *v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  float64x2_t v49;
  __int128 *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t (**v71[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v72[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v73;
  __int128 v74;
  float64x2_t *v75;
  __int128 v76;
  __int128 v77;
  float64x2_t *v78;
  _OWORD v79[8];
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;

  v96 = *MEMORY[0x24BDAC8D0];
  v78 = 0;
  v76 = 0u;
  v77 = 0u;
  v75 = 0;
  v73 = 0u;
  v74 = 0u;
  v72[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536B40;
  v72[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v76;
  v71[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536B40;
  v71[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v73;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v72, (uint64_t)&v76, a5)&& sub_20C34E57C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v76) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v71, (uint64_t)&v73, a6)&& sub_20C34E57C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v73) != 1)
  {
    sub_20C282748((uint64_t)&v73, &v76);
  }
  if ((_QWORD)v76 == (_QWORD)v73 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      *(_QWORD *)&v88 = &v80;
      sub_20BF5F980(v17, v76, (__int128 **)&v88);
      v30 = v78;
      v31 = v75;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF5FC60(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = (_OWORD *)*((_QWORD *)v32 + 4);
        do
        {
          v37 = *v30;
          v38 = v30[1];
          v39 = v30[3];
          v82 = v30[2];
          v83 = v39;
          v80 = v37;
          v81 = v38;
          v40 = v30[4];
          v41 = v30[5];
          v42 = v30[7];
          v86 = v30[6];
          v87 = v42;
          v84 = v40;
          v85 = v41;
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v80, 1.0 - v16);
          v92 = v43[4];
          v93 = v43[5];
          v94 = v43[6];
          v95 = v43[7];
          v88 = *v43;
          v89 = v43[1];
          v90 = v43[2];
          v91 = v43[3];
          v44 = *v31;
          v45 = v31[1];
          v46 = v31[3];
          v82 = v31[2];
          v83 = v46;
          v80 = v44;
          v81 = v45;
          v47 = v31[4];
          v48 = v31[5];
          v49 = v31[7];
          v86 = v31[6];
          v87 = v49;
          v84 = v47;
          v85 = v48;
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v80, v16);
          v51 = *v50;
          v52 = v50[1];
          v53 = v50[3];
          v79[2] = v50[2];
          v79[3] = v53;
          v79[0] = v51;
          v79[1] = v52;
          v54 = v50[4];
          v55 = v50[5];
          v56 = v50[7];
          v79[6] = v50[6];
          v79[7] = v56;
          v79[4] = v54;
          v79[5] = v55;
          v67 = v92;
          v68 = v93;
          v69 = v94;
          v70 = v95;
          v63 = v88;
          v64 = v89;
          v65 = v90;
          v66 = v91;
          pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=((double *)&v63, (double *)v79);
          v57 = v63;
          v58 = v64;
          v59 = v66;
          v36[2] = v65;
          v36[3] = v59;
          *v36 = v57;
          v36[1] = v58;
          v60 = v67;
          v61 = v68;
          v62 = v70;
          v36[6] = v69;
          v36[7] = v62;
          v36[4] = v60;
          v36[5] = v61;
          v36 += 8;
          v31 += 8;
          v30 += 8;
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v74;
    v17[4] = (unint64_t)v75;
    v75 = (float64x2_t *)v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v73;
    v17[2] = v27;
    v73 = v29;
    *(_QWORD *)&v74 = v28;
    v22 = &v73;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v77;
    v17[4] = (unint64_t)v78;
    v78 = (float64x2_t *)v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v76;
    v17[2] = v19;
    v76 = v21;
    *(_QWORD *)&v77 = v20;
    v22 = &v76;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v73);
  sub_20BF5618C((uint64_t)&v76);
  return v24;
}

void sub_20C34E534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_20BF5618C((uint64_t)&a29);
  sub_20BF5618C((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34E57C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34E640(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34E640(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34E708(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34E6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34E708(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DAF8;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DC10;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34E75C(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  float64x2_t *v28;
  float64x2_t *v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _OWORD *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  __int128 *v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  __int128 *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  float64x2_t *v71;
  __int128 v72;
  __int128 v73;
  float64x2_t *v74;
  _OWORD v75[8];
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  float64x2_t v81;
  float64x2_t v82;
  float64x2_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  v74 = 0;
  v72 = 0u;
  v73 = 0u;
  v71 = 0;
  v69 = 0u;
  v70 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C278C28(v12, a3, (uint64_t)&v72, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C278C28(v14, a3, (uint64_t)&v69, a6) & 1) == 0)
      sub_20C282748((uint64_t)&v69, &v72);
    if ((_QWORD)v72 != (_QWORD)v69 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v73;
      v16[4] = (unint64_t)v74;
      v74 = (float64x2_t *)v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v72;
      v16[2] = v18;
      v72 = v20;
      *(_QWORD *)&v73 = v19;
      v21 = &v72;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v70;
      v16[4] = (unint64_t)v71;
      v71 = (float64x2_t *)v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v69;
      v16[2] = v25;
      v69 = v27;
      *(_QWORD *)&v70 = v26;
      v21 = &v69;
      goto LABEL_7;
    }
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    *(_QWORD *)&v84 = &v76;
    sub_20BF5F980(v16, v72, (__int128 **)&v84);
    v28 = v74;
    v29 = v71;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF5FC60(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = (_OWORD *)*((_QWORD *)v30 + 4);
      do
      {
        v35 = *v28;
        v36 = v28[1];
        v37 = v28[3];
        v78 = v28[2];
        v79 = v37;
        v76 = v35;
        v77 = v36;
        v38 = v28[4];
        v39 = v28[5];
        v40 = v28[7];
        v82 = v28[6];
        v83 = v40;
        v80 = v38;
        v81 = v39;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v76, 1.0 - v15);
        v88 = v41[4];
        v89 = v41[5];
        v90 = v41[6];
        v91 = v41[7];
        v84 = *v41;
        v85 = v41[1];
        v86 = v41[2];
        v87 = v41[3];
        v42 = *v29;
        v43 = v29[1];
        v44 = v29[3];
        v78 = v29[2];
        v79 = v44;
        v76 = v42;
        v77 = v43;
        v45 = v29[4];
        v46 = v29[5];
        v47 = v29[7];
        v82 = v29[6];
        v83 = v47;
        v80 = v45;
        v81 = v46;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator*=(&v76, v15);
        v49 = *v48;
        v50 = v48[1];
        v51 = v48[3];
        v75[2] = v48[2];
        v75[3] = v51;
        v75[0] = v49;
        v75[1] = v50;
        v52 = v48[4];
        v53 = v48[5];
        v54 = v48[7];
        v75[6] = v48[6];
        v75[7] = v54;
        v75[4] = v52;
        v75[5] = v53;
        v65 = v88;
        v66 = v89;
        v67 = v90;
        v68 = v91;
        v61 = v84;
        v62 = v85;
        v63 = v86;
        v64 = v87;
        pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator+=((double *)&v61, (double *)v75);
        v55 = v61;
        v56 = v62;
        v57 = v64;
        v34[2] = v63;
        v34[3] = v57;
        *v34 = v55;
        v34[1] = v56;
        v58 = v65;
        v59 = v66;
        v60 = v68;
        v34[6] = v67;
        v34[7] = v60;
        v34[4] = v58;
        v34[5] = v59;
        v34 += 8;
        v29 += 8;
        v28 += 8;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v69);
  sub_20BF5618C((uint64_t)&v72);
  return v13;
}

void sub_20C34EA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20BF5618C((uint64_t)&a25);
  sub_20BF5618C((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34EABC(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  uint64_t (**v17[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v18[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  float64x2_t v19;
  float64x2_t v20;

  v18[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536B78;
  v18[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v20;
  v17[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536B78;
  v17[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v19;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2d>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v18, (uint64_t)&v20, a5)&& sub_20C34EC04((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, &v20) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2d>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v17, (uint64_t)&v19, a6)&& sub_20C34EC04((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v19) != 1)
  {
    v19 = v20;
  }
  *(float64x2_t *)*(_QWORD *)(a1 + 8) = vaddq_f64(vmulq_n_f64(v20, 1.0 - (a4 - a5) / (a6 - a5)), vmulq_n_f64(v19, (a4 - a5) / (a6 - a5)));
  return 1;
}

uint64_t sub_20C34EC04(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34ECC8(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34ECC8(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34ED90(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34ED68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34ED90(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51C110;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DEE8;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34EDE4(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  float64x2_t v17;
  float64x2_t v18;
  void *v19;
  float64x2_t *v20;
  std::type_info *v21;
  __int16 v22;

  v12 = sub_20C0EEAF8(a2);
  v21 = &stru_24C51C110;
  v22 = 0;
  v19 = &unk_24C52DEE8;
  v20 = &v18;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v19, a5);
  if ((_BYTE)v22)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v22 = 0;
    v20 = &v17;
    v21 = &stru_24C51C110;
    v19 = &unk_24C52DEE8;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v19, a6)
      || (_BYTE)v22)
    {
      v17 = v18;
    }
    *(float64x2_t *)*(_QWORD *)(a1 + 8) = vaddq_f64(vmulq_n_f64(v18, 1.0 - (a4 - a5) / (a6 - a5)), vmulq_n_f64(v17, (a4 - a5) / (a6 - a5)));
  }
  return v14;
}

uint64_t sub_20C34EF00(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  float64x2_t *v30;
  float64x2_t *v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  float64x2_t *v36;
  float64x2_t v37;
  float64x2_t v38;
  float64x2_t v39;
  uint64_t (**v40[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v41[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v42;
  __int128 v43;
  float64x2_t *v44;
  __int128 v45;
  __int128 v46;
  float64x2_t *v47;
  _QWORD v48[2];
  _OWORD *v49;

  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v41[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536BB0;
  v41[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v45;
  v40[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536BB0;
  v40[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v42;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v41, (uint64_t)&v45, a5)&& sub_20C34F1A0((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v45) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v40, (uint64_t)&v42, a6)&& sub_20C34F1A0((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v42) != 1)
  {
    sub_20C28422C((uint64_t)&v42, &v45);
  }
  if ((_QWORD)v45 == (_QWORD)v42 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v48[0] = 0;
      v48[1] = 0;
      v49 = v48;
      sub_20BF59D64(v17, v45, &v49);
      v30 = v47;
      v31 = v44;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF59FB0(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = (float64x2_t *)*((_QWORD *)v32 + 4);
        do
        {
          v37 = *v30++;
          v38 = v37;
          v39 = *v31++;
          *v36++ = vaddq_f64(vmulq_n_f64(v38, 1.0 - (a4 - a5) / (a6 - a5)), vmulq_n_f64(v39, (a4 - a5) / (a6 - a5)));
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v43;
    v17[4] = (unint64_t)v44;
    v44 = (float64x2_t *)v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v42;
    v17[2] = v27;
    v42 = v29;
    *(_QWORD *)&v43 = v28;
    v22 = &v42;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v46;
    v17[4] = (unint64_t)v47;
    v47 = (float64x2_t *)v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v45;
    v17[2] = v19;
    v45 = v21;
    *(_QWORD *)&v46 = v20;
    v22 = &v45;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v45);
  return v24;
}

void sub_20C34F16C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34F1A0(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34F264(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34F264(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34F32C(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34F304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34F32C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DA98;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DF20;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34F380(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  float64x2_t *v28;
  float64x2_t *v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  float64x2_t *v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  __int128 v38;
  __int128 v39;
  float64x2_t *v40;
  __int128 v41;
  __int128 v42;
  float64x2_t *v43;
  _QWORD v44[2];
  _OWORD *v45;

  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v40 = 0;
  v38 = 0u;
  v39 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C27A470(v12, a3, (uint64_t)&v41, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C27A470(v14, a3, (uint64_t)&v38, a6) & 1) == 0)
      sub_20C28422C((uint64_t)&v38, &v41);
    if ((_QWORD)v41 != (_QWORD)v38 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v42;
      v16[4] = (unint64_t)v43;
      v43 = (float64x2_t *)v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v41;
      v16[2] = v18;
      v41 = v20;
      *(_QWORD *)&v42 = v19;
      v21 = &v41;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v39;
      v16[4] = (unint64_t)v40;
      v40 = (float64x2_t *)v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v38;
      v16[2] = v25;
      v38 = v27;
      *(_QWORD *)&v39 = v26;
      v21 = &v38;
      goto LABEL_7;
    }
    v44[0] = 0;
    v44[1] = 0;
    v45 = v44;
    sub_20BF59D64(v16, v41, &v45);
    v28 = v43;
    v29 = v40;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF59FB0(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = (float64x2_t *)*((_QWORD *)v30 + 4);
      do
      {
        v35 = *v28++;
        v36 = v35;
        v37 = *v29++;
        *v34++ = vaddq_f64(vmulq_n_f64(v36, 1.0 - (a4 - a5) / (a6 - a5)), vmulq_n_f64(v37, (a4 - a5) / (a6 - a5)));
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v38);
  sub_20BF5618C((uint64_t)&v41);
  return v13;
}

void sub_20C34F568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34F5A0(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  uint64_t (**v17[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v18[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  float32x2_t v19;
  float32x2_t v20;

  v18[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536BE8;
  v18[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v20;
  v17[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536BE8;
  v17[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v19;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2f>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v18, (uint64_t)&v20, a5)&& sub_20C34F6F8((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, &v20) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2f>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v17, (uint64_t)&v19, a6)&& sub_20C34F6F8((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v19) != 1)
  {
    v19 = v20;
  }
  **(float32x2_t **)(a1 + 8) = vadd_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v20), 1.0 - (a4 - a5) / (a6 - a5))), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v19), (a4 - a5) / (a6 - a5))));
  return 1;
}

uint64_t sub_20C34F6F8(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34F7BC(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34F7BC(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34F884(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34F85C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34F884(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51C120;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DE78;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34F8D8(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  float32x2_t v16;
  float32x2_t v17;
  float32x2_t v19;
  float32x2_t v20;
  void *v21;
  float32x2_t *v22;
  std::type_info *v23;
  __int16 v24;

  v12 = sub_20C0EEAF8(a2);
  v23 = &stru_24C51C120;
  v24 = 0;
  v21 = &unk_24C52DE78;
  v22 = &v20;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v21, a5);
  if ((_BYTE)v24)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v24 = 0;
    v22 = &v19;
    v23 = &stru_24C51C120;
    v21 = &unk_24C52DE78;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v21, a6)
      || (_BYTE)v24)
    {
      v16 = v20;
      v17 = v20;
    }
    else
    {
      v17 = v19;
      v16 = v20;
    }
    **(float32x2_t **)(a1 + 8) = vadd_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v16), 1.0 - (a4 - a5) / (a6 - a5))), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v17), (a4 - a5) / (a6 - a5))));
  }
  return v14;
}

uint64_t sub_20C34FA04(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  float32x2_t *v30;
  float32x2_t *v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  float32x2_t *v36;
  float32x2_t v37;
  float32x2_t v38;
  float32x2_t v39;
  double v40;
  uint64_t (**v41[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v42[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v43;
  __int128 v44;
  float32x2_t *v45;
  __int128 v46;
  __int128 v47;
  float32x2_t *v48;
  uint64_t v49;
  uint64_t *v50;

  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v42[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536C20;
  v42[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v46;
  v41[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536C20;
  v41[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v43;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v42, (uint64_t)&v46, a5)&& sub_20C34FCB0((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v46) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v41, (uint64_t)&v43, a6)&& sub_20C34FCB0((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v43) != 1)
  {
    sub_20C283E98((uint64_t)&v43, &v46);
  }
  if ((_QWORD)v46 == (_QWORD)v43 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v40 = (a4 - a5) / (a6 - a5);
      v49 = 0;
      v50 = &v49;
      sub_20BF58714(v17, v46, &v50);
      v30 = v48;
      v31 = v45;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF58964(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = (float32x2_t *)*((_QWORD *)v32 + 4);
        do
        {
          v37 = *v30++;
          v38 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v37), 1.0 - v40));
          v39 = *v31++;
          *v36++ = vadd_f32(v38, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v39), v40)));
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v44;
    v17[4] = (unint64_t)v45;
    v45 = (float32x2_t *)v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v43;
    v17[2] = v27;
    v43 = v29;
    *(_QWORD *)&v44 = v28;
    v22 = &v43;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v47;
    v17[4] = (unint64_t)v48;
    v48 = (float32x2_t *)v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v46;
    v17[2] = v19;
    v46 = v21;
    *(_QWORD *)&v47 = v20;
    v22 = &v46;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v43);
  sub_20BF5618C((uint64_t)&v46);
  return v24;
}

void sub_20C34FC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34FCB0(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C34FD74(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C34FD74(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C34FE3C(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C34FE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C34FE3C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DA50;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DEB0;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C34FE90(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  float32x2_t *v28;
  float32x2_t *v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  float32x2_t *v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x2_t v37;
  double v38;
  __int128 v39;
  __int128 v40;
  float32x2_t *v41;
  __int128 v42;
  __int128 v43;
  float32x2_t *v44;
  uint64_t v45;
  uint64_t *v46;

  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C27A0F8(v12, a3, (uint64_t)&v42, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C27A0F8(v14, a3, (uint64_t)&v39, a6) & 1) == 0)
      sub_20C283E98((uint64_t)&v39, &v42);
    if ((_QWORD)v42 != (_QWORD)v39 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v43;
      v16[4] = (unint64_t)v44;
      v44 = (float32x2_t *)v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v42;
      v16[2] = v18;
      v42 = v20;
      *(_QWORD *)&v43 = v19;
      v21 = &v42;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v40;
      v16[4] = (unint64_t)v41;
      v41 = (float32x2_t *)v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v39;
      v16[2] = v25;
      v39 = v27;
      *(_QWORD *)&v40 = v26;
      v21 = &v39;
      goto LABEL_7;
    }
    v38 = (a4 - a5) / (a6 - a5);
    v45 = 0;
    v46 = &v45;
    sub_20BF58714(v16, v42, &v46);
    v28 = v44;
    v29 = v41;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF58964(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = (float32x2_t *)*((_QWORD *)v30 + 4);
      do
      {
        v35 = *v28++;
        v36 = vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v35), 1.0 - v38));
        v37 = *v29++;
        *v34++ = vadd_f32(v36, vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v37), v38)));
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v39);
  sub_20BF5618C((uint64_t)&v42);
  return v13;
}

void sub_20C350084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3500BC(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  int v16;
  int v17;
  double v18;
  int v19;
  uint64_t (**v21[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v22[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (*v23)(_QWORD, uint64_t);
  int v24;
  int v25;

  v22[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536C58;
  v22[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))((char *)&v23 + 4);
  v21[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536C58;
  v21[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v23;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2h>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v22, (uint64_t)&v23 + 4, a5)&& sub_20C350234((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))((char *)&v23 + 4)) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec2h>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v21, (uint64_t)&v23, a6))
  {
    v16 = HIDWORD(v23);
  }
  else
  {
    v17 = sub_20C350234((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v23);
    v16 = HIDWORD(v23);
    if (v17 != 1)
      LODWORD(v23) = HIDWORD(v23);
  }
  v18 = (a4 - a5) / (a6 - a5);
  v25 = v16;
  v19 = *(_DWORD *)sub_20C350500((unsigned __int16 *)&v25, 1.0 - v18);
  v25 = (int)v23;
  v24 = *(_DWORD *)sub_20C350500((unsigned __int16 *)&v25, v18);
  v25 = v19;
  **(_DWORD **)(a1 + 8) = *(_DWORD *)sub_20C350414((unsigned __int16 *)&v25, (unsigned __int16 *)&v24);
  return 1;
}

uint64_t sub_20C350234(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C3502F8(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C3502F8(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C3503C0(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C350398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3503C0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51C130;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DE08;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

unsigned __int16 *sub_20C350414(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;

  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  return a1;
}

unsigned __int16 *sub_20C350500(unsigned __int16 *a1, double a2)
{
  float v3;
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;

  v3 = a2;
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] * v3;
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] * v3;
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  return a1;
}

uint64_t sub_20C3505DC(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  double v16;
  int v17;
  int v19;
  int v20;
  int v21;
  void *v22;
  int *v23;
  std::type_info *v24;
  __int16 v25;

  v12 = sub_20C0EEAF8(a2);
  v24 = &stru_24C51C130;
  v25 = 0;
  v22 = &unk_24C52DE08;
  v23 = &v20;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v22, a5);
  if ((_BYTE)v25)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v25 = 0;
    v23 = &v19;
    v24 = &stru_24C51C130;
    v22 = &unk_24C52DE08;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v22, a6)
      || (_BYTE)v25)
    {
      v19 = v20;
    }
    v16 = (a4 - a5) / (a6 - a5);
    LODWORD(v22) = v20;
    v17 = *(_DWORD *)sub_20C350500((unsigned __int16 *)&v22, 1.0 - v16);
    LODWORD(v22) = v19;
    v21 = *(_DWORD *)sub_20C350500((unsigned __int16 *)&v22, v16);
    LODWORD(v22) = v17;
    **(_DWORD **)(a1 + 8) = *(_DWORD *)sub_20C350414((unsigned __int16 *)&v22, (unsigned __int16 *)&v21);
  }
  return v14;
}

uint64_t sub_20C350720(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  int *v30;
  _DWORD *v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  int v38;
  uint64_t (**v39[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v40[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v41;
  __int128 v42;
  _DWORD *v43;
  __int128 v44;
  __int128 v45;
  int *v46;
  unsigned __int16 v47[6];
  int v48;

  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v40[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536C90;
  v40[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v44;
  v39[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536C90;
  v39[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v41;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v40, (uint64_t)&v44, a5)&& sub_20C3509F4((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v44) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v39, (uint64_t)&v41, a6)&& sub_20C3509F4((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v41) != 1)
  {
    sub_20C283B04((uint64_t)&v41, &v44);
  }
  if ((_QWORD)v44 == (_QWORD)v41 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v48 = 0;
      *(_QWORD *)v47 = &v48;
      sub_20BF591FC(v17, v44, (_DWORD **)v47);
      v30 = v46;
      v31 = v43;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF5944C(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = (_DWORD *)*((_QWORD *)v32 + 4);
        do
        {
          v37 = *v30++;
          *(_DWORD *)v47 = v37;
          v38 = *(_DWORD *)sub_20C350500(v47, 1.0 - v16);
          *(_DWORD *)v47 = *v31;
          v48 = *(_DWORD *)sub_20C350500(v47, v16);
          *(_DWORD *)v47 = v38;
          *v36++ = *(_DWORD *)sub_20C350414(v47, (unsigned __int16 *)&v48);
          ++v31;
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v42;
    v17[4] = (unint64_t)v43;
    v43 = (_DWORD *)v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v41;
    v17[2] = v27;
    v41 = v29;
    *(_QWORD *)&v42 = v28;
    v22 = &v41;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v45;
    v17[4] = (unint64_t)v46;
    v46 = (int *)v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v44;
    v17[2] = v19;
    v44 = v21;
    *(_QWORD *)&v45 = v20;
    v22 = &v44;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v44);
  return v24;
}

void sub_20C3509BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3509F4(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C350AB8(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C350AB8(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C350B80(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C350B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C350B80(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DA08;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DE40;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C350BD4(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  int *v28;
  _DWORD *v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _DWORD *v34;
  int v35;
  int v36;
  __int128 v37;
  __int128 v38;
  _DWORD *v39;
  __int128 v40;
  __int128 v41;
  int *v42;
  unsigned __int16 v43[6];
  int v44;

  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C279D80(v12, a3, (uint64_t)&v40, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C279D80(v14, a3, (uint64_t)&v37, a6) & 1) == 0)
      sub_20C283B04((uint64_t)&v37, &v40);
    if ((_QWORD)v40 != (_QWORD)v37 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v41;
      v16[4] = (unint64_t)v42;
      v42 = (int *)v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v40;
      v16[2] = v18;
      v40 = v20;
      *(_QWORD *)&v41 = v19;
      v21 = &v40;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v38;
      v16[4] = (unint64_t)v39;
      v39 = (_DWORD *)v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v37;
      v16[2] = v25;
      v37 = v27;
      *(_QWORD *)&v38 = v26;
      v21 = &v37;
      goto LABEL_7;
    }
    v44 = 0;
    *(_QWORD *)v43 = &v44;
    sub_20BF591FC(v16, v40, (_DWORD **)v43);
    v28 = v42;
    v29 = v39;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF5944C(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = (_DWORD *)*((_QWORD *)v30 + 4);
      do
      {
        v35 = *v28++;
        *(_DWORD *)v43 = v35;
        v36 = *(_DWORD *)sub_20C350500(v43, 1.0 - v15);
        *(_DWORD *)v43 = *v29;
        v44 = *(_DWORD *)sub_20C350500(v43, v15);
        *(_DWORD *)v43 = v36;
        *v34++ = *(_DWORD *)sub_20C350414(v43, (unsigned __int16 *)&v44);
        ++v29;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v37);
  sub_20BF5618C((uint64_t)&v40);
  return v13;
}

void sub_20C350DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C350E30(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  double v17;
  float64x2_t *v18;
  uint64_t (**v20[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v21[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  double v25;

  v21[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536CC8;
  v21[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v24;
  v20[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536CC8;
  v20[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v22;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3d>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v21, (uint64_t)&v24, a5)&& sub_20C350F98((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, &v24) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3d>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v20, (uint64_t)&v22, a6)&& sub_20C350F98((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v22) != 1)
  {
    v22 = v24;
    v23 = v25;
  }
  v16 = (a4 - a5) / (a6 - a5);
  v17 = (1.0 - v16) * v25 + v16 * v23;
  v18 = *(float64x2_t **)(a1 + 8);
  *v18 = vaddq_f64(vmulq_n_f64(v24, 1.0 - v16), vmulq_n_f64(v22, v16));
  v18[1].f64[0] = v17;
  return 1;
}

uint64_t sub_20C350F98(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C35105C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C35105C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C351124(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C3510FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C351124(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51C150;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E0A8;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C351178(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  float64x2_t *v18;
  float64x2_t v20;
  double v21;
  float64x2_t v22;
  double v23;
  void *v24;
  float64x2_t *v25;
  std::type_info *v26;
  __int16 v27;

  v12 = sub_20C0EEAF8(a2);
  v26 = &stru_24C51C150;
  v27 = 0;
  v24 = &unk_24C52E0A8;
  v25 = &v22;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v24, a5);
  if ((_BYTE)v27)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v27 = 0;
    v25 = &v20;
    v26 = &stru_24C51C150;
    v24 = &unk_24C52E0A8;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v24, a6)
      || (_BYTE)v27)
    {
      v20 = v22;
      v21 = v23;
    }
    v16 = (a4 - a5) / (a6 - a5);
    v17 = (1.0 - v16) * v23 + v16 * v21;
    v18 = *(float64x2_t **)(a1 + 8);
    *v18 = vaddq_f64(vmulq_n_f64(v22, 1.0 - v16), vmulq_n_f64(v20, v16));
    v18[1].f64[0] = v17;
  }
  return v14;
}

uint64_t sub_20C3512B4(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  double v36;
  double *v37;
  double *v38;
  double *v39;
  double v40;
  double v41;
  uint64_t (**v42[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v43[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  _QWORD v50[3];
  __int128 *v51;

  v49 = 0;
  v47 = 0u;
  v48 = 0u;
  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  v43[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536D00;
  v43[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v47;
  v42[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536D00;
  v42[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v44;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v43, (uint64_t)&v47, a5)&& sub_20C351580((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v47) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v42, (uint64_t)&v44, a6)&& sub_20C351580((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v44) != 1)
  {
    sub_20C285168((uint64_t)&v44, &v47);
  }
  if ((_QWORD)v47 == (_QWORD)v44 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v41 = (a4 - a5) / (a6 - a5);
      memset(v50, 0, sizeof(v50));
      v51 = (__int128 *)v50;
      sub_20BF5C478(v17, v47, &v51);
      v30 = v49;
      v31 = v46;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF5C734(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = 1.0 - v41;
        v37 = (double *)(*((_QWORD *)v32 + 4) + 16);
        v38 = (double *)(v31 + 16);
        v39 = (double *)(v30 + 16);
        do
        {
          v40 = v36 * *v39 + v41 * *v38;
          *((float64x2_t *)v37 - 1) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v39 - 2), v36), vmulq_n_f64(*(float64x2_t *)(v38 - 2), v41));
          *v37 = v40;
          v37 += 3;
          v38 += 3;
          v39 += 3;
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v45;
    v17[4] = v46;
    v46 = v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v44;
    v17[2] = v27;
    v44 = v29;
    *(_QWORD *)&v45 = v28;
    v22 = &v44;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v48;
    v17[4] = v49;
    v49 = v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v47;
    v17[2] = v19;
    v47 = v21;
    *(_QWORD *)&v48 = v20;
    v22 = &v47;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v44);
  sub_20BF5618C((uint64_t)&v47);
  return v24;
}

void sub_20C35154C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C351580(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C351644(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C351644(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C35170C(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C3516E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35170C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DA80;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E0E0;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C351760(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  double *v35;
  double *v36;
  double *v37;
  double v38;
  double v39;
  __int128 v40;
  __int128 v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  _QWORD v46[3];
  __int128 *v47;

  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C27B250(v12, a3, (uint64_t)&v43, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C27B250(v14, a3, (uint64_t)&v40, a6) & 1) == 0)
      sub_20C285168((uint64_t)&v40, &v43);
    if ((_QWORD)v43 != (_QWORD)v40 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v44;
      v16[4] = v45;
      v45 = v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v43;
      v16[2] = v18;
      v43 = v20;
      *(_QWORD *)&v44 = v19;
      v21 = &v43;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v41;
      v16[4] = v42;
      v42 = v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v40;
      v16[2] = v25;
      v40 = v27;
      *(_QWORD *)&v41 = v26;
      v21 = &v40;
      goto LABEL_7;
    }
    v39 = (a4 - a5) / (a6 - a5);
    memset(v46, 0, sizeof(v46));
    v47 = (__int128 *)v46;
    sub_20BF5C478(v16, v43, &v47);
    v28 = v45;
    v29 = v42;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF5C734(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = 1.0 - v39;
      v35 = (double *)(*((_QWORD *)v30 + 4) + 16);
      v36 = (double *)(v29 + 16);
      v37 = (double *)(v28 + 16);
      do
      {
        v38 = v34 * *v37 + v39 * *v36;
        *((float64x2_t *)v35 - 1) = vaddq_f64(vmulq_n_f64(*(float64x2_t *)(v37 - 2), v34), vmulq_n_f64(*(float64x2_t *)(v36 - 2), v39));
        *v35 = v38;
        v35 += 3;
        v36 += 3;
        v37 += 3;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v40);
  sub_20BF5618C((uint64_t)&v43);
  return v13;
}

void sub_20C351974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3519AC(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  float v17;
  float v18;
  float32x2_t *v19;
  uint64_t (**v21[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v22[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  float32x2_t v23;
  float v24;
  float32x2_t v25;
  float v26;

  v22[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536D38;
  v22[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v25;
  v21[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536D38;
  v21[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v23;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3f>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v22, (uint64_t)&v25, a5)&& sub_20C351B34((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, &v25) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3f>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v21, (uint64_t)&v23, a6)&& sub_20C351B34((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v23) != 1)
  {
    v23 = v25;
    v24 = v26;
  }
  v16 = (a4 - a5) / (a6 - a5);
  v17 = (1.0 - v16) * v26;
  v18 = v16 * v24;
  v19 = *(float32x2_t **)(a1 + 8);
  *v19 = vadd_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v25), 1.0 - v16)), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v23), v16)));
  v19[1].f32[0] = v17 + v18;
  return 1;
}

uint64_t sub_20C351B34(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C351BF8(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C351BF8(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C351CC0(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C351C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C351CC0(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51C160;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E038;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C351D14(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float v17;
  float v18;
  float32x2_t *v19;
  float32x2_t v21;
  float v22;
  float32x2_t v23;
  float v24;
  void *v25;
  float32x2_t *v26;
  std::type_info *v27;
  __int16 v28;

  v12 = sub_20C0EEAF8(a2);
  v27 = &stru_24C51C160;
  v28 = 0;
  v25 = &unk_24C52E038;
  v26 = &v23;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v25, a5);
  if ((_BYTE)v28)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v28 = 0;
    v26 = &v21;
    v27 = &stru_24C51C160;
    v25 = &unk_24C52E038;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v25, a6)
      || (_BYTE)v28)
    {
      v21 = v23;
      v22 = v24;
    }
    v16 = (a4 - a5) / (a6 - a5);
    v17 = (1.0 - v16) * v24;
    v18 = v16 * v22;
    v19 = *(float32x2_t **)(a1 + 8);
    *v19 = vadd_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v23), 1.0 - v16)), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(v21), v16)));
    v19[1].f32[0] = v17 + v18;
  }
  return v14;
}

uint64_t sub_20C351E70(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  double v36;
  float *v37;
  float *v38;
  float *v39;
  float v40;
  float v41;
  double v42;
  uint64_t (**v43[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v44[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t *v53;

  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v44[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536D70;
  v44[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v48;
  v43[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536D70;
  v43[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v45;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v44, (uint64_t)&v48, a5)&& sub_20C352160((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v48) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v43, (uint64_t)&v45, a6)&& sub_20C352160((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v45) != 1)
  {
    sub_20C284DC8((uint64_t)&v45, &v48);
  }
  if ((_QWORD)v48 == (_QWORD)v45 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v42 = (a4 - a5) / (a6 - a5);
      v52 = 0;
      v51 = 0;
      v53 = &v51;
      sub_20BF5AD04(v17, v48, &v53);
      v30 = v50;
      v31 = v47;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF5AFC0(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = 1.0 - v42;
        v37 = (float *)(*((_QWORD *)v32 + 4) + 8);
        v38 = (float *)(v31 + 8);
        v39 = (float *)(v30 + 8);
        do
        {
          v40 = v36 * *v39;
          v41 = v42 * *v38;
          *((float32x2_t *)v37 - 1) = vadd_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(v39 - 2)), v36)), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(v38 - 2)), v42)));
          *v37 = v40 + v41;
          v37 += 3;
          v38 += 3;
          v39 += 3;
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v46;
    v17[4] = v47;
    v47 = v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v45;
    v17[2] = v27;
    v45 = v29;
    *(_QWORD *)&v46 = v28;
    v22 = &v45;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v49;
    v17[4] = v50;
    v50 = v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v48;
    v17[2] = v19;
    v48 = v21;
    *(_QWORD *)&v49 = v20;
    v22 = &v48;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v45);
  sub_20BF5618C((uint64_t)&v48);
  return v24;
}

void sub_20C35212C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C352160(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C352224(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C352224(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C3522EC(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C3522C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3522EC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DA38;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E070;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C352340(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  float *v35;
  float *v36;
  float *v37;
  float v38;
  float v39;
  double v40;
  __int128 v41;
  __int128 v42;
  unint64_t v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t *v49;

  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C27AED8(v12, a3, (uint64_t)&v44, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C27AED8(v14, a3, (uint64_t)&v41, a6) & 1) == 0)
      sub_20C284DC8((uint64_t)&v41, &v44);
    if ((_QWORD)v44 != (_QWORD)v41 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v45;
      v16[4] = v46;
      v46 = v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v44;
      v16[2] = v18;
      v44 = v20;
      *(_QWORD *)&v45 = v19;
      v21 = &v44;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v42;
      v16[4] = v43;
      v43 = v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v41;
      v16[2] = v25;
      v41 = v27;
      *(_QWORD *)&v42 = v26;
      v21 = &v41;
      goto LABEL_7;
    }
    v40 = (a4 - a5) / (a6 - a5);
    v48 = 0;
    v47 = 0;
    v49 = &v47;
    sub_20BF5AD04(v16, v44, &v49);
    v28 = v46;
    v29 = v43;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF5AFC0(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = 1.0 - v40;
      v35 = (float *)(*((_QWORD *)v30 + 4) + 8);
      v36 = (float *)(v29 + 8);
      v37 = (float *)(v28 + 8);
      do
      {
        v38 = v34 * *v37;
        v39 = v40 * *v36;
        *((float32x2_t *)v35 - 1) = vadd_f32(vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(v37 - 2)), v34)), vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)(v36 - 2)), v40)));
        *v35 = v38 + v39;
        v35 += 3;
        v36 += 3;
        v37 += 3;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v44);
  return v13;
}

void sub_20C352578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3525B0(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unsigned __int16 *v17;
  int v18;
  unsigned __int16 v19;
  unsigned __int16 *v20;
  int v21;
  unsigned __int16 *v22;
  int v23;
  uint64_t v24;
  uint64_t (**v26[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v27[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  int v28;
  unsigned __int16 v29;
  int v30;
  unsigned __int16 v31;
  int v32;
  unsigned __int16 v33;
  int v34;
  unsigned __int16 v35;

  v27[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536DA8;
  v27[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v30;
  v26[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536DA8;
  v26[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v28;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3h>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v27, (uint64_t)&v30, a5)&& sub_20C352758((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v30) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec3h>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v26, (uint64_t)&v28, a6)&& sub_20C352758((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v28) != 1)
  {
    v28 = v30;
    v29 = v31;
  }
  v16 = (a4 - a5) / (a6 - a5);
  v34 = v30;
  v35 = v31;
  v17 = sub_20BEF7204((unsigned __int16 *)&v34, 1.0 - v16);
  v18 = *(_DWORD *)v17;
  v19 = v17[2];
  v34 = v28;
  v35 = v29;
  v20 = sub_20BEF7204((unsigned __int16 *)&v34, v16);
  v21 = *(_DWORD *)v20;
  v33 = v20[2];
  v32 = v21;
  v35 = v19;
  v34 = v18;
  v22 = sub_20BEF7510((unsigned __int16 *)&v34, (unsigned __int16 *)&v32);
  v23 = *(_DWORD *)v22;
  v24 = *(_QWORD *)(a1 + 8);
  *(_WORD *)(v24 + 4) = v22[2];
  *(_DWORD *)v24 = v23;
  return 1;
}

uint64_t sub_20C352758(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C35281C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C35281C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C3528E4(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C3528BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3528E4(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51C170;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DFC8;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C352938(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  double v16;
  unsigned __int16 *v17;
  int v18;
  unsigned __int16 v19;
  unsigned __int16 *v20;
  int v21;
  unsigned __int16 *v22;
  int v23;
  uint64_t v24;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  unsigned __int16 v31;
  void *v32;
  int *v33;
  std::type_info *v34;
  __int16 v35;

  v12 = sub_20C0EEAF8(a2);
  v34 = &stru_24C51C170;
  v35 = 0;
  v32 = &unk_24C52DFC8;
  v33 = &v28;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v32, a5);
  if ((_BYTE)v35)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v35 = 0;
    v33 = &v26;
    v34 = &stru_24C51C170;
    v32 = &unk_24C52DFC8;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v32, a6)
      || (_BYTE)v35)
    {
      v26 = v28;
      v27 = v29;
    }
    v16 = (a4 - a5) / (a6 - a5);
    LODWORD(v32) = v28;
    WORD2(v32) = v29;
    v17 = sub_20BEF7204((unsigned __int16 *)&v32, 1.0 - v16);
    v18 = *(_DWORD *)v17;
    v19 = v17[2];
    LODWORD(v32) = v26;
    WORD2(v32) = v27;
    v20 = sub_20BEF7204((unsigned __int16 *)&v32, v16);
    v21 = *(_DWORD *)v20;
    v31 = v20[2];
    v30 = v21;
    WORD2(v32) = v19;
    LODWORD(v32) = v18;
    v22 = sub_20BEF7510((unsigned __int16 *)&v32, (unsigned __int16 *)&v30);
    v23 = *(_DWORD *)v22;
    v24 = *(_QWORD *)(a1 + 8);
    *(_WORD *)(v24 + 4) = v22[2];
    *(_DWORD *)v24 = v23;
  }
  return v14;
}

uint64_t sub_20C352AB4(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  unint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  unsigned __int16 *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  unsigned __int16 *v42;
  int v43;
  unsigned __int16 *v44;
  int v45;
  uint64_t (**v46[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v47[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  int *v54;
  int v55;
  unsigned __int16 v56;

  v53 = 0;
  v51 = 0u;
  v52 = 0u;
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  v47[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536DE0;
  v47[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v51;
  v46[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536DE0;
  v46[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v48;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v47, (uint64_t)&v51, a5)&& sub_20C352DC8((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v51) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v46, (uint64_t)&v48, a6)&& sub_20C352DC8((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v48) != 1)
  {
    sub_20C284A28((uint64_t)&v48, &v51);
  }
  if ((_QWORD)v51 == (_QWORD)v48 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v56 = 0;
      v55 = 0;
      v54 = &v55;
      sub_20BF5B820(v17, v51, &v54);
      v30 = v53;
      v31 = v50;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF5BADC(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = *((_QWORD *)v32 + 4);
        do
        {
          v37 = *(_DWORD *)v30;
          WORD2(v54) = *(_WORD *)(v30 + 4);
          LODWORD(v54) = v37;
          v38 = sub_20BEF7204((unsigned __int16 *)&v54, 1.0 - v16);
          v39 = v38[2];
          v40 = *(unsigned int *)v38;
          v41 = *(_DWORD *)v31;
          WORD2(v54) = *(_WORD *)(v31 + 4);
          LODWORD(v54) = v41;
          v42 = sub_20BEF7204((unsigned __int16 *)&v54, v16);
          v43 = *(_DWORD *)v42;
          v56 = v42[2];
          v55 = v43;
          WORD2(v54) = (v40 | (unint64_t)(v39 << 32)) >> 32;
          LODWORD(v54) = v40;
          v44 = sub_20BEF7510((unsigned __int16 *)&v54, (unsigned __int16 *)&v55);
          v45 = *(_DWORD *)v44;
          *(_WORD *)(v36 + 4) = v44[2];
          *(_DWORD *)v36 = v45;
          v36 += 6;
          v31 += 6;
          v30 += 6;
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v49;
    v17[4] = v50;
    v50 = v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v48;
    v17[2] = v27;
    v48 = v29;
    *(_QWORD *)&v49 = v28;
    v22 = &v48;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v52;
    v17[4] = v53;
    v53 = v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v51;
    v17[2] = v19;
    v51 = v21;
    *(_QWORD *)&v52 = v20;
    v22 = &v51;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v48);
  sub_20BF5618C((uint64_t)&v51);
  return v24;
}

void sub_20C352D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C352DC8(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C352E8C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C352E8C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C352F54(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C352F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C352F54(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51D9F0;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E000;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C352FA8(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned __int16 *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  unsigned __int16 *v40;
  int v41;
  unsigned __int16 *v42;
  int v43;
  __int128 v44;
  __int128 v45;
  unint64_t v46;
  __int128 v47;
  __int128 v48;
  unint64_t v49;
  int *v50;
  int v51;
  unsigned __int16 v52;

  v49 = 0;
  v47 = 0u;
  v48 = 0u;
  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C27AB60(v12, a3, (uint64_t)&v47, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C27AB60(v14, a3, (uint64_t)&v44, a6) & 1) == 0)
      sub_20C284A28((uint64_t)&v44, &v47);
    if ((_QWORD)v47 != (_QWORD)v44 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v48;
      v16[4] = v49;
      v49 = v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v47;
      v16[2] = v18;
      v47 = v20;
      *(_QWORD *)&v48 = v19;
      v21 = &v47;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v45;
      v16[4] = v46;
      v46 = v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v44;
      v16[2] = v25;
      v44 = v27;
      *(_QWORD *)&v45 = v26;
      v21 = &v44;
      goto LABEL_7;
    }
    v52 = 0;
    v51 = 0;
    v50 = &v51;
    sub_20BF5B820(v16, v47, &v50);
    v28 = v49;
    v29 = v46;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF5BADC(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = *((_QWORD *)v30 + 4);
      do
      {
        v35 = *(_DWORD *)v28;
        WORD2(v50) = *(_WORD *)(v28 + 4);
        LODWORD(v50) = v35;
        v36 = sub_20BEF7204((unsigned __int16 *)&v50, 1.0 - v15);
        v37 = v36[2];
        v38 = *(unsigned int *)v36;
        v39 = *(_DWORD *)v29;
        WORD2(v50) = *(_WORD *)(v29 + 4);
        LODWORD(v50) = v39;
        v40 = sub_20BEF7204((unsigned __int16 *)&v50, v15);
        v41 = *(_DWORD *)v40;
        v52 = v40[2];
        v51 = v41;
        WORD2(v50) = (v38 | (unint64_t)(v37 << 32)) >> 32;
        LODWORD(v50) = v38;
        v42 = sub_20BEF7510((unsigned __int16 *)&v50, (unsigned __int16 *)&v51);
        v43 = *(_DWORD *)v42;
        *(_WORD *)(v34 + 4) = v42[2];
        *(_DWORD *)v34 = v43;
        v34 += 6;
        v29 += 6;
        v28 += 6;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v44);
  sub_20BF5618C((uint64_t)&v47);
  return v13;
}

void sub_20C353200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35323C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  float64x2_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  uint64_t (**v21[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v22[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  float64x2_t v26;

  v22[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536E18;
  v22[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v25;
  v21[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536E18;
  v21[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v23;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4d>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v22, (uint64_t)&v25, a5)&& sub_20C353390((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, &v25) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4d>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v21, (uint64_t)&v23, a6)&& sub_20C353390((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v23) != 1)
  {
    v23 = v25;
    v24 = v26;
  }
  v16 = (a4 - a5) / (a6 - a5);
  v17 = vaddq_f64(vmulq_n_f64(v25, 1.0 - v16), vmulq_n_f64(v23, v16));
  v18 = *(float64x2_t **)(a1 + 8);
  v19 = vaddq_f64(vmulq_n_f64(v26, 1.0 - v16), vmulq_n_f64(v24, v16));
  *v18 = v17;
  v18[1] = v19;
  return 1;
}

uint64_t sub_20C353390(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C353454(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C353454(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C35351C(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C3534F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35351C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51C190;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E268;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C353570(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float64x2_t v17;
  float64x2_t *v18;
  float64x2_t v19;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  void *v25;
  float64x2_t *v26;
  std::type_info *v27;
  __int16 v28;

  v12 = sub_20C0EEAF8(a2);
  v27 = &stru_24C51C190;
  v28 = 0;
  v25 = &unk_24C52E268;
  v26 = &v23;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v25, a5);
  if ((_BYTE)v28)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v28 = 0;
    v26 = &v21;
    v27 = &stru_24C51C190;
    v25 = &unk_24C52E268;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v25, a6)
      || (_BYTE)v28)
    {
      v21 = v23;
      v22 = v24;
    }
    v16 = (a4 - a5) / (a6 - a5);
    v17 = vaddq_f64(vmulq_n_f64(v23, 1.0 - v16), vmulq_n_f64(v21, v16));
    v18 = *(float64x2_t **)(a1 + 8);
    v19 = vaddq_f64(vmulq_n_f64(v24, 1.0 - v16), vmulq_n_f64(v22, v16));
    *v18 = v17;
    v18[1] = v19;
  }
  return v14;
}

uint64_t sub_20C353698(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  float64x2_t *v30;
  float64x2_t *v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  double v36;
  float64x2_t *v37;
  float64x2_t *v38;
  float64x2_t *v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  double v43;
  uint64_t (**v44[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v45[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  unint64_t v51;
  _OWORD v52[2];
  _OWORD *v53;

  v51 = 0;
  v49 = 0u;
  v50 = 0u;
  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v45[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536E50;
  v45[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v49;
  v44[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536E50;
  v44[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v46;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v45, (uint64_t)&v49, a5)&& sub_20C353960((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v49) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v44, (uint64_t)&v46, a6)&& sub_20C353960((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v46) != 1)
  {
    sub_20C28606C((uint64_t)&v46, &v49);
  }
  if ((_QWORD)v49 == (_QWORD)v46 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v43 = (a4 - a5) / (a6 - a5);
      memset(v52, 0, sizeof(v52));
      v53 = v52;
      sub_20BF5EA40(v17, v49, &v53);
      v30 = (float64x2_t *)v51;
      v31 = (float64x2_t *)v48;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF5ECA0(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = 1.0 - v43;
        v37 = (float64x2_t *)(*((_QWORD *)v32 + 4) + 16);
        v38 = v31 + 1;
        v39 = v30 + 1;
        do
        {
          v40 = vaddq_f64(vmulq_n_f64(v39[-1], v36), vmulq_n_f64(v38[-1], v43));
          v41 = *v39;
          v39 += 2;
          v42 = vaddq_f64(vmulq_n_f64(v41, v36), vmulq_n_f64(*v38, v43));
          v37[-1] = v40;
          *v37 = v42;
          v37 += 2;
          v38 += 2;
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v47;
    v17[4] = v48;
    v48 = v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v46;
    v17[2] = v27;
    v46 = v29;
    *(_QWORD *)&v47 = v28;
    v22 = &v46;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v50;
    v17[4] = v51;
    v51 = v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v49;
    v17[2] = v19;
    v49 = v21;
    *(_QWORD *)&v50 = v20;
    v22 = &v49;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v46);
  sub_20BF5618C((uint64_t)&v49);
  return v24;
}

void sub_20C35392C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C353960(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C353A24(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C353A24(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C353AEC(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C353AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C353AEC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DA68;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E2A0;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C353B40(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  float64x2_t *v28;
  float64x2_t *v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  float64x2_t *v35;
  float64x2_t *v36;
  float64x2_t *v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  double v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  unint64_t v47;
  _OWORD v48[2];
  _OWORD *v49;

  v47 = 0;
  v45 = 0u;
  v46 = 0u;
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C27C030(v12, a3, (uint64_t)&v45, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C27C030(v14, a3, (uint64_t)&v42, a6) & 1) == 0)
      sub_20C28606C((uint64_t)&v42, &v45);
    if ((_QWORD)v45 != (_QWORD)v42 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v46;
      v16[4] = v47;
      v47 = v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v45;
      v16[2] = v18;
      v45 = v20;
      *(_QWORD *)&v46 = v19;
      v21 = &v45;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v43;
      v16[4] = v44;
      v44 = v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v42;
      v16[2] = v25;
      v42 = v27;
      *(_QWORD *)&v43 = v26;
      v21 = &v42;
      goto LABEL_7;
    }
    v41 = (a4 - a5) / (a6 - a5);
    memset(v48, 0, sizeof(v48));
    v49 = v48;
    sub_20BF5EA40(v16, v45, &v49);
    v28 = (float64x2_t *)v47;
    v29 = (float64x2_t *)v44;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF5ECA0(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = 1.0 - v41;
      v35 = (float64x2_t *)(*((_QWORD *)v30 + 4) + 16);
      v36 = v29 + 1;
      v37 = v28 + 1;
      do
      {
        v38 = vaddq_f64(vmulq_n_f64(v37[-1], v34), vmulq_n_f64(v36[-1], v41));
        v39 = *v37;
        v37 += 2;
        v40 = vaddq_f64(vmulq_n_f64(v39, v34), vmulq_n_f64(*v36, v41));
        v35[-1] = v38;
        *v35 = v40;
        v35 += 2;
        v36 += 2;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v42);
  sub_20BF5618C((uint64_t)&v45);
  return v13;
}

void sub_20C353D50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C353D88(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  uint64_t (**v17[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v18[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  float32x4_t v19;
  float32x4_t v20;

  v18[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536E88;
  v18[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v20;
  v17[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536E88;
  v17[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v19;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4f>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v18, (uint64_t)&v20, a5)&& sub_20C353EF8((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, &v20) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4f>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v17, (uint64_t)&v19, a6)&& sub_20C353EF8((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v19) != 1)
  {
    v19 = v20;
  }
  *(float32x4_t *)*(_QWORD *)(a1 + 8) = vaddq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v20.f32), 1.0 - (a4 - a5) / (a6 - a5))), vmulq_n_f64(vcvt_hight_f64_f32(v20), 1.0 - (a4 - a5) / (a6 - a5))), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v19.f32), (a4 - a5) / (a6 - a5))), vmulq_n_f64(vcvt_hight_f64_f32(v19), (a4 - a5) / (a6 - a5))));
  return 1;
}

uint64_t sub_20C353EF8(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C353FBC(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C353FBC(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C354084(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C35405C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C354084(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51C1A0;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E1F8;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C3540D8(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v17;
  float32x4_t v18;
  void *v19;
  float32x4_t *v20;
  std::type_info *v21;
  __int16 v22;

  v12 = sub_20C0EEAF8(a2);
  v21 = &stru_24C51C1A0;
  v22 = 0;
  v19 = &unk_24C52E1F8;
  v20 = &v18;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v19, a5);
  if ((_BYTE)v22)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v22 = 0;
    v20 = &v17;
    v21 = &stru_24C51C1A0;
    v19 = &unk_24C52E1F8;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v19, a6)
      || (_BYTE)v22)
    {
      v17 = v18;
    }
    *(float32x4_t *)*(_QWORD *)(a1 + 8) = vaddq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v18.f32), 1.0 - (a4 - a5) / (a6 - a5))), vmulq_n_f64(vcvt_hight_f64_f32(v18), 1.0 - (a4 - a5) / (a6 - a5))), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v17.f32), (a4 - a5) / (a6 - a5))), vmulq_n_f64(vcvt_hight_f64_f32(v17), (a4 - a5) / (a6 - a5))));
  }
  return v14;
}

uint64_t sub_20C35421C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  float32x4_t *v30;
  float32x4_t *v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  float32x4_t *v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  double v40;
  uint64_t (**v41[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v42[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v43;
  __int128 v44;
  float32x4_t *v45;
  __int128 v46;
  __int128 v47;
  float32x4_t *v48;
  _QWORD v49[2];
  _OWORD *v50;

  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v42[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536EC0;
  v42[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v46;
  v41[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536EC0;
  v41[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v43;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v42, (uint64_t)&v46, a5)&& sub_20C3544E4((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v46) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v41, (uint64_t)&v43, a6)&& sub_20C3544E4((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v43) != 1)
  {
    sub_20C285CD4((uint64_t)&v43, &v46);
  }
  if ((_QWORD)v46 == (_QWORD)v43 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v40 = (a4 - a5) / (a6 - a5);
      v49[0] = 0;
      v49[1] = 0;
      v50 = v49;
      sub_20BF5D3A4(v17, v46, &v50);
      v30 = v48;
      v31 = v45;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF5D5F0(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = (float32x4_t *)*((_QWORD *)v32 + 4);
        do
        {
          v37 = *v30++;
          v38 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v37.f32), 1.0 - v40)), vmulq_n_f64(vcvt_hight_f64_f32(v37), 1.0 - v40));
          v39 = *v31++;
          *v36++ = vaddq_f32(v38, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v39.f32), v40)), vmulq_n_f64(vcvt_hight_f64_f32(v39), v40)));
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v44;
    v17[4] = (unint64_t)v45;
    v45 = (float32x4_t *)v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v43;
    v17[2] = v27;
    v43 = v29;
    *(_QWORD *)&v44 = v28;
    v22 = &v43;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v47;
    v17[4] = (unint64_t)v48;
    v48 = (float32x4_t *)v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v46;
    v17[2] = v19;
    v46 = v21;
    *(_QWORD *)&v47 = v20;
    v22 = &v46;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v43);
  sub_20BF5618C((uint64_t)&v46);
  return v24;
}

void sub_20C3544B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3544E4(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C3545A8(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C3545A8(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C354670(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C354648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C354670(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DA20;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E230;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C3546C4(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  float32x4_t *v28;
  float32x4_t *v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  double v38;
  __int128 v39;
  __int128 v40;
  float32x4_t *v41;
  __int128 v42;
  __int128 v43;
  float32x4_t *v44;
  _QWORD v45[2];
  _OWORD *v46;

  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C27BCB8(v12, a3, (uint64_t)&v42, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C27BCB8(v14, a3, (uint64_t)&v39, a6) & 1) == 0)
      sub_20C285CD4((uint64_t)&v39, &v42);
    if ((_QWORD)v42 != (_QWORD)v39 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v43;
      v16[4] = (unint64_t)v44;
      v44 = (float32x4_t *)v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v42;
      v16[2] = v18;
      v42 = v20;
      *(_QWORD *)&v43 = v19;
      v21 = &v42;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v40;
      v16[4] = (unint64_t)v41;
      v41 = (float32x4_t *)v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v39;
      v16[2] = v25;
      v39 = v27;
      *(_QWORD *)&v40 = v26;
      v21 = &v39;
      goto LABEL_7;
    }
    v38 = (a4 - a5) / (a6 - a5);
    v45[0] = 0;
    v45[1] = 0;
    v46 = v45;
    sub_20BF5D3A4(v16, v42, &v46);
    v28 = v44;
    v29 = v41;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF5D5F0(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = (float32x4_t *)*((_QWORD *)v30 + 4);
      do
      {
        v35 = *v28++;
        v36 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v35.f32), 1.0 - v38)), vmulq_n_f64(vcvt_hight_f64_f32(v35), 1.0 - v38));
        v37 = *v29++;
        *v34++ = vaddq_f32(v36, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(vcvtq_f64_f32(*(float32x2_t *)v37.f32), v38)), vmulq_n_f64(vcvt_hight_f64_f32(v37), v38)));
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v39);
  sub_20BF5618C((uint64_t)&v42);
  return v13;
}

void sub_20C3548D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35490C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  uint64_t (*v16)(_QWORD, uint64_t);
  int v17;
  double v18;
  uint64_t (*v19)(_QWORD, uint64_t);
  uint64_t (**v21[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v22[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (*v23)(_QWORD, uint64_t);
  uint64_t (*v24)(_QWORD, uint64_t);
  uint64_t v25;
  uint64_t (*v26)(_QWORD, uint64_t);

  v22[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536EF8;
  v22[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v24;
  v21[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536EF8;
  v21[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v23;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4h>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v22, (uint64_t)&v24, a5)&& sub_20C354A84((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, &v24) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfVec4h>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v21, (uint64_t)&v23, a6))
  {
    v16 = v24;
  }
  else
  {
    v17 = sub_20C354A84((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v23);
    v16 = v24;
    if (v17 != 1)
      v23 = v24;
  }
  v18 = (a4 - a5) / (a6 - a5);
  v26 = v16;
  v19 = *(uint64_t (**)(_QWORD, uint64_t))sub_20C354E08((unsigned __int16 *)&v26, 1.0 - v18);
  v26 = v23;
  v25 = *(_QWORD *)sub_20C354E08((unsigned __int16 *)&v26, v18);
  v26 = v19;
  **(_QWORD **)(a1 + 8) = *(_QWORD *)sub_20C354C64((unsigned __int16 *)&v26, (unsigned __int16 *)&v25);
  return 1;
}

uint64_t sub_20C354A84(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C354B48(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C354B48(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C354C10(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C354BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C354C10(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51C1B0;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E188;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

unsigned __int16 *sub_20C354C64(unsigned __int16 *a1, unsigned __int16 *a2)
{
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  unsigned int v9;
  float v10;
  unsigned int v11;

  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a2];
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[1]];
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]]
     + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[2]];
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]]
      + pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]];
  if (v10 == 0.0)
  {
    v11 = HIWORD(LODWORD(v10));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
  {
    v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
        + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
  }
  a1[3] = v11;
  return a1;
}

unsigned __int16 *sub_20C354E08(unsigned __int16 *a1, double a2)
{
  float v3;
  float v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  unsigned int v9;
  float v10;
  unsigned int v11;

  v3 = a2;
  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1] * v3;
  if (v4 == 0.0)
  {
    v5 = HIWORD(LODWORD(v4));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23])
  {
    v5 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v4) >> 23]
       + (((LODWORD(v4) & 0x7FFFFF) + ((LODWORD(v4) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v5) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v4));
  }
  *a1 = v5;
  v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[1]] * v3;
  if (v6 == 0.0)
  {
    v7 = HIWORD(LODWORD(v6));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23])
  {
    v7 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v6) >> 23]
       + (((LODWORD(v6) & 0x7FFFFF) + ((LODWORD(v6) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v7) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v6));
  }
  a1[1] = v7;
  v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[2]] * v3;
  if (v8 == 0.0)
  {
    v9 = HIWORD(LODWORD(v8));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23])
  {
    v9 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v8) >> 23]
       + (((LODWORD(v8) & 0x7FFFFF) + ((LODWORD(v8) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v9) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v8));
  }
  a1[2] = v9;
  v10 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a1[3]] * v3;
  if (v10 == 0.0)
  {
    v11 = HIWORD(LODWORD(v10));
  }
  else if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23])
  {
    v11 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[LODWORD(v10) >> 23]
        + (((LODWORD(v10) & 0x7FFFFF) + ((LODWORD(v10) >> 13) & 1) + 4095) >> 13);
  }
  else
  {
    LOWORD(v11) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert((pxrInternal__aapl__pxrReserved__::pxr_half::half *)LODWORD(v10));
  }
  a1[3] = v11;
  return a1;
}

uint64_t sub_20C354F8C(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  double v16;
  void *v17;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void **v23;
  std::type_info *v24;
  __int16 v25;

  v12 = sub_20C0EEAF8(a2);
  v24 = &stru_24C51C1B0;
  v25 = 0;
  v22 = &unk_24C52E188;
  v23 = &v20;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v22, a5);
  if ((_BYTE)v25)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v25 = 0;
    v23 = &v19;
    v24 = &stru_24C51C1B0;
    v22 = &unk_24C52E188;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v22, a6)
      || (_BYTE)v25)
    {
      v19 = v20;
    }
    v16 = (a4 - a5) / (a6 - a5);
    v22 = v20;
    v17 = *(void **)sub_20C354E08((unsigned __int16 *)&v22, 1.0 - v16);
    v22 = v19;
    v21 = *(_QWORD *)sub_20C354E08((unsigned __int16 *)&v22, v16);
    v22 = v17;
    **(_QWORD **)(a1 + 8) = *(_QWORD *)sub_20C354C64((unsigned __int16 *)&v22, (unsigned __int16 *)&v21);
  }
  return v14;
}

uint64_t sub_20C3550D0(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t **v30;
  uint64_t **v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t (**v39[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v40[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v41;
  __int128 v42;
  uint64_t **v43;
  __int128 v44;
  __int128 v45;
  uint64_t **v46;
  uint64_t v47;
  uint64_t *v48;

  v46 = 0;
  v44 = 0u;
  v45 = 0u;
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  v40[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536F30;
  v40[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v44;
  v39[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536F30;
  v39[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v41;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v40, (uint64_t)&v44, a5)&& sub_20C35539C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v44) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v39, (uint64_t)&v41, a6)&& sub_20C35539C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v41) != 1)
  {
    sub_20C28593C((uint64_t)&v41, &v44);
  }
  if ((_QWORD)v44 == (_QWORD)v41 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v47 = 0;
      v48 = &v47;
      sub_20BF5DECC(v17, v44, &v48);
      v30 = v46;
      v31 = v43;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF5E11C(v32, v33, v34);
      v35 = **(_QWORD **)(a1 + 8);
      if (v35)
      {
        v36 = (_QWORD *)*((_QWORD *)v32 + 4);
        do
        {
          v37 = *v30++;
          v48 = v37;
          v38 = *(uint64_t **)sub_20C354E08((unsigned __int16 *)&v48, 1.0 - v16);
          v48 = *v31;
          v47 = *(_QWORD *)sub_20C354E08((unsigned __int16 *)&v48, v16);
          v48 = v38;
          *v36++ = *(_QWORD *)sub_20C354C64((unsigned __int16 *)&v48, (unsigned __int16 *)&v47);
          ++v31;
          --v35;
        }
        while (v35);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v42;
    v17[4] = (unint64_t)v43;
    v43 = (uint64_t **)v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v41;
    v17[2] = v27;
    v41 = v29;
    *(_QWORD *)&v42 = v28;
    v22 = &v41;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v45;
    v17[4] = (unint64_t)v46;
    v46 = (uint64_t **)v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v44;
    v17[2] = v19;
    v44 = v21;
    *(_QWORD *)&v45 = v20;
    v22 = &v44;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v41);
  sub_20BF5618C((uint64_t)&v44);
  return v24;
}

void sub_20C355364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35539C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C355460(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C355460(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C355528(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C355500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C355528(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51D9D8;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52E1C0;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C35557C(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t **v28;
  uint64_t **v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t *v36;
  __int128 v37;
  __int128 v38;
  uint64_t **v39;
  __int128 v40;
  __int128 v41;
  uint64_t **v42;
  uint64_t v43;
  uint64_t *v44;

  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C27B940(v12, a3, (uint64_t)&v40, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C27B940(v14, a3, (uint64_t)&v37, a6) & 1) == 0)
      sub_20C28593C((uint64_t)&v37, &v40);
    if ((_QWORD)v40 != (_QWORD)v37 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v41;
      v16[4] = (unint64_t)v42;
      v42 = (uint64_t **)v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v40;
      v16[2] = v18;
      v40 = v20;
      *(_QWORD *)&v41 = v19;
      v21 = &v40;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v38;
      v16[4] = (unint64_t)v39;
      v39 = (uint64_t **)v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v37;
      v16[2] = v25;
      v37 = v27;
      *(_QWORD *)&v38 = v26;
      v21 = &v37;
      goto LABEL_7;
    }
    v43 = 0;
    v44 = &v43;
    sub_20BF5DECC(v16, v40, &v44);
    v28 = v42;
    v29 = v39;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF5E11C(v30, v31, v32);
    v33 = **(_QWORD **)(a1 + 8);
    if (v33)
    {
      v34 = (_QWORD *)*((_QWORD *)v30 + 4);
      do
      {
        v35 = *v28++;
        v44 = v35;
        v36 = *(uint64_t **)sub_20C354E08((unsigned __int16 *)&v44, 1.0 - v15);
        v44 = *v29;
        v43 = *(_QWORD *)sub_20C354E08((unsigned __int16 *)&v44, v15);
        v44 = v36;
        *v34++ = *(_QWORD *)sub_20C354C64((unsigned __int16 *)&v44, (unsigned __int16 *)&v43);
        ++v29;
        --v33;
      }
      while (v33);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v37);
  sub_20BF5618C((uint64_t)&v40);
  return v13;
}

void sub_20C355794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3557D0(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  const pxrInternal__aapl__pxrReserved__::GfQuatd *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v23[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v24[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  _OWORD v25[2];
  _OWORD v26[2];

  v24[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536F68;
  v24[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))v26;
  v23[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536F68;
  v23[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))v25;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfQuatd>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v24, (uint64_t)v26, a5)&& sub_20C35590C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))v26) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfQuatd>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v23, (uint64_t)v25, a6)&& sub_20C35590C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))v25) != 1)
  {
    v25[0] = v26[0];
    v25[1] = v26[1];
  }
  v17 = pxrInternal__aapl__pxrReserved__::GfSlerp((pxrInternal__aapl__pxrReserved__ *)v26, (a4 - a5) / (a6 - a5), (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v25, v16);
  v18 = *(_QWORD *)(a1 + 8);
  *(double *)v18 = v17;
  *(_QWORD *)(v18 + 8) = v19;
  *(_QWORD *)(v18 + 16) = v20;
  *(_QWORD *)(v18 + 24) = v21;
  return 1;
}

uint64_t sub_20C35590C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C3559D0(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C3559D0(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C355A98(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C355A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C355A98(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51C010;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DD28;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C355AEC(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  const pxrInternal__aapl__pxrReserved__::GfQuatd *v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v23[2];
  _OWORD v24[2];
  void *v25;
  _OWORD *v26;
  std::type_info *v27;
  __int16 v28;

  v12 = sub_20C0EEAF8(a2);
  v27 = &stru_24C51C010;
  v28 = 0;
  v25 = &unk_24C52DD28;
  v26 = v24;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v25, a5);
  if ((_BYTE)v28)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v28 = 0;
    v26 = v23;
    v27 = &stru_24C51C010;
    v25 = &unk_24C52DD28;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v25, a6)
      || (_BYTE)v28)
    {
      v23[0] = v24[0];
      v23[1] = v24[1];
    }
    v17 = pxrInternal__aapl__pxrReserved__::GfSlerp((pxrInternal__aapl__pxrReserved__ *)v24, (a4 - a5) / (a6 - a5), (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v23, v16);
    v18 = *(_QWORD *)(a1 + 8);
    *(double *)v18 = v17;
    *(_QWORD *)(v18 + 8) = v19;
    *(_QWORD *)(v18 + 16) = v20;
    *(_QWORD *)(v18 + 24) = v21;
  }
  return v14;
}

uint64_t sub_20C355BFC(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  pxrInternal__aapl__pxrReserved__ *v30;
  const pxrInternal__aapl__pxrReserved__::GfQuatd *v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  const pxrInternal__aapl__pxrReserved__::GfQuatd *v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t (**v41[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v42[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v43;
  __int128 v44;
  const pxrInternal__aapl__pxrReserved__::GfQuatd *v45;
  __int128 v46;
  __int128 v47;
  pxrInternal__aapl__pxrReserved__ *v48;
  char v49;
  char *v50;

  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v42[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536FA0;
  v42[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v46;
  v41[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536FA0;
  v41[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v43;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v42, (uint64_t)&v46, a5)&& sub_20C355E98((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v46) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v41, (uint64_t)&v43, a6)&& sub_20C355E98((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v43) != 1)
  {
    sub_20C28333C((uint64_t)&v43, &v46);
  }
  if ((_QWORD)v46 == (_QWORD)v43 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v50 = &v49;
      sub_20BF62904(v17, v46, (_OWORD **)&v50);
      v30 = v48;
      v31 = v45;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF62B64(v32, v33, v34);
      v36 = **(_QWORD **)(a1 + 8);
      if (v36)
      {
        v37 = (double *)(*((_QWORD *)v32 + 4) + 16);
        do
        {
          *(v37 - 2) = pxrInternal__aapl__pxrReserved__::GfSlerp(v30, v16, v31, v35);
          *((_QWORD *)v37 - 1) = v38;
          *(_QWORD *)v37 = v39;
          *((_QWORD *)v37 + 1) = v40;
          v37 += 4;
          v31 = (const pxrInternal__aapl__pxrReserved__::GfQuatd *)((char *)v31 + 32);
          v30 = (pxrInternal__aapl__pxrReserved__ *)((char *)v30 + 32);
          --v36;
        }
        while (v36);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v44;
    v17[4] = (unint64_t)v45;
    v45 = (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v43;
    v17[2] = v27;
    v43 = v29;
    *(_QWORD *)&v44 = v28;
    v22 = &v43;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v47;
    v17[4] = (unint64_t)v48;
    v48 = (pxrInternal__aapl__pxrReserved__ *)v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v46;
    v17[2] = v19;
    v46 = v21;
    *(_QWORD *)&v47 = v20;
    v22 = &v46;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v43);
  sub_20BF5618C((uint64_t)&v46);
  return v24;
}

void sub_20C355E60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C355E98(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C355F5C(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C355F5C(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C356024(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C355FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C356024(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DC30;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DD60;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C356078(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  pxrInternal__aapl__pxrReserved__ *v28;
  const pxrInternal__aapl__pxrReserved__::GfQuatd *v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  const pxrInternal__aapl__pxrReserved__::GfQuatd *v33;
  uint64_t v34;
  double *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  const pxrInternal__aapl__pxrReserved__::GfQuatd *v41;
  __int128 v42;
  __int128 v43;
  pxrInternal__aapl__pxrReserved__ *v44;
  char v45;
  char *v46;

  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C279690(v12, a3, (uint64_t)&v42, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C279690(v14, a3, (uint64_t)&v39, a6) & 1) == 0)
      sub_20C28333C((uint64_t)&v39, &v42);
    if ((_QWORD)v42 != (_QWORD)v39 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v43;
      v16[4] = (unint64_t)v44;
      v44 = (pxrInternal__aapl__pxrReserved__ *)v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v42;
      v16[2] = v18;
      v42 = v20;
      *(_QWORD *)&v43 = v19;
      v21 = &v42;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v40;
      v16[4] = (unint64_t)v41;
      v41 = (const pxrInternal__aapl__pxrReserved__::GfQuatd *)v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v39;
      v16[2] = v25;
      v39 = v27;
      *(_QWORD *)&v40 = v26;
      v21 = &v39;
      goto LABEL_7;
    }
    v46 = &v45;
    sub_20BF62904(v16, v42, (_OWORD **)&v46);
    v28 = v44;
    v29 = v41;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF62B64(v30, v31, v32);
    v34 = **(_QWORD **)(a1 + 8);
    if (v34)
    {
      v35 = (double *)(*((_QWORD *)v30 + 4) + 16);
      do
      {
        *(v35 - 2) = pxrInternal__aapl__pxrReserved__::GfSlerp(v28, v15, v29, v33);
        *((_QWORD *)v35 - 1) = v36;
        *(_QWORD *)v35 = v37;
        *((_QWORD *)v35 + 1) = v38;
        v35 += 4;
        v29 = (const pxrInternal__aapl__pxrReserved__::GfQuatd *)((char *)v29 + 32);
        v28 = (pxrInternal__aapl__pxrReserved__ *)((char *)v28 + 32);
        --v34;
      }
      while (v34);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v39);
  sub_20BF5618C((uint64_t)&v42);
  return v13;
}

void sub_20C356258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C356294(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  const pxrInternal__aapl__pxrReserved__::GfQuatf *v16;
  float v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  uint64_t (**v23[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v24[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v25;
  __int128 v26;

  v24[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536FD8;
  v24[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v26;
  v23[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C536FD8;
  v23[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v25;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfQuatf>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v24, (uint64_t)&v26, a5)&& sub_20C3563D0((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v26) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfQuatf>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v23, (uint64_t)&v25, a6)&& sub_20C3563D0((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v25) != 1)
  {
    v25 = v26;
  }
  v17 = pxrInternal__aapl__pxrReserved__::GfSlerp((pxrInternal__aapl__pxrReserved__ *)&v26, (a4 - a5) / (a6 - a5), (const pxrInternal__aapl__pxrReserved__::GfQuatf *)&v25, v16);
  v18 = *(_QWORD *)(a1 + 8);
  *(float *)v18 = v17;
  *(_DWORD *)(v18 + 4) = v19;
  *(_DWORD *)(v18 + 8) = v20;
  *(_DWORD *)(v18 + 12) = v21;
  return 1;
}

uint64_t sub_20C3563D0(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C356494(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C356494(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C35655C(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C356534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35655C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51C020;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DCB8;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C3565B0(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  const pxrInternal__aapl__pxrReserved__::GfQuatf *v16;
  float v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  __int128 v23;
  __int128 v24;
  void *v25;
  __int128 *v26;
  std::type_info *v27;
  __int16 v28;

  v12 = sub_20C0EEAF8(a2);
  v27 = &stru_24C51C020;
  v28 = 0;
  v25 = &unk_24C52DCB8;
  v26 = &v24;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v25, a5);
  if ((_BYTE)v28)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v28 = 0;
    v26 = &v23;
    v27 = &stru_24C51C020;
    v25 = &unk_24C52DCB8;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v25, a6)
      || (_BYTE)v28)
    {
      v23 = v24;
    }
    v17 = pxrInternal__aapl__pxrReserved__::GfSlerp((pxrInternal__aapl__pxrReserved__ *)&v24, (a4 - a5) / (a6 - a5), (const pxrInternal__aapl__pxrReserved__::GfQuatf *)&v23, v16);
    v18 = *(_QWORD *)(a1 + 8);
    *(float *)v18 = v17;
    *(_DWORD *)(v18 + 4) = v19;
    *(_DWORD *)(v18 + 8) = v20;
    *(_DWORD *)(v18 + 12) = v21;
  }
  return v14;
}

uint64_t sub_20C3566C0(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  pxrInternal__aapl__pxrReserved__ *v30;
  const pxrInternal__aapl__pxrReserved__::GfQuatf *v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  const pxrInternal__aapl__pxrReserved__::GfQuatf *v35;
  uint64_t v36;
  float *v37;
  int v38;
  int v39;
  int v40;
  uint64_t (**v41[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v42[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v43;
  __int128 v44;
  const pxrInternal__aapl__pxrReserved__::GfQuatf *v45;
  __int128 v46;
  __int128 v47;
  pxrInternal__aapl__pxrReserved__ *v48;
  char v49;
  char *v50;

  v48 = 0;
  v46 = 0u;
  v47 = 0u;
  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v42[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C537010;
  v42[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v46;
  v41[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C537010;
  v41[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v43;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v42, (uint64_t)&v46, a5)&& sub_20C35695C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v46) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v41, (uint64_t)&v43, a6)&& sub_20C35695C((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v43) != 1)
  {
    sub_20C282F34((uint64_t)&v43, &v46);
  }
  if ((_QWORD)v46 == (_QWORD)v43 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v50 = &v49;
      sub_20BF61270(v17, v46, (_OWORD **)&v50);
      v30 = v48;
      v31 = v45;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF614BC(v32, v33, v34);
      v36 = **(_QWORD **)(a1 + 8);
      if (v36)
      {
        v37 = (float *)(*((_QWORD *)v32 + 4) + 8);
        do
        {
          *(v37 - 2) = pxrInternal__aapl__pxrReserved__::GfSlerp(v30, v16, v31, v35);
          *((_DWORD *)v37 - 1) = v38;
          *(_DWORD *)v37 = v39;
          *((_DWORD *)v37 + 1) = v40;
          v37 += 4;
          v31 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)((char *)v31 + 16);
          v30 = (pxrInternal__aapl__pxrReserved__ *)((char *)v30 + 16);
          --v36;
        }
        while (v36);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v44;
    v17[4] = (unint64_t)v45;
    v45 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v43;
    v17[2] = v27;
    v43 = v29;
    *(_QWORD *)&v44 = v28;
    v22 = &v43;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v47;
    v17[4] = (unint64_t)v48;
    v48 = (pxrInternal__aapl__pxrReserved__ *)v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v46;
    v17[2] = v19;
    v46 = v21;
    *(_QWORD *)&v47 = v20;
    v22 = &v46;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v43);
  sub_20BF5618C((uint64_t)&v46);
  return v24;
}

void sub_20C356924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35695C(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C356A20(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C356A20(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C356AE8(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C356AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C356AE8(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DC18;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DCF0;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C356B3C(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  pxrInternal__aapl__pxrReserved__ *v28;
  const pxrInternal__aapl__pxrReserved__::GfQuatf *v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  const pxrInternal__aapl__pxrReserved__::GfQuatf *v33;
  uint64_t v34;
  float *v35;
  int v36;
  int v37;
  int v38;
  __int128 v39;
  __int128 v40;
  const pxrInternal__aapl__pxrReserved__::GfQuatf *v41;
  __int128 v42;
  __int128 v43;
  pxrInternal__aapl__pxrReserved__ *v44;
  char v45;
  char *v46;

  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C279318(v12, a3, (uint64_t)&v42, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C279318(v14, a3, (uint64_t)&v39, a6) & 1) == 0)
      sub_20C282F34((uint64_t)&v39, &v42);
    if ((_QWORD)v42 != (_QWORD)v39 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v43;
      v16[4] = (unint64_t)v44;
      v44 = (pxrInternal__aapl__pxrReserved__ *)v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v42;
      v16[2] = v18;
      v42 = v20;
      *(_QWORD *)&v43 = v19;
      v21 = &v42;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v40;
      v16[4] = (unint64_t)v41;
      v41 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v39;
      v16[2] = v25;
      v39 = v27;
      *(_QWORD *)&v40 = v26;
      v21 = &v39;
      goto LABEL_7;
    }
    v46 = &v45;
    sub_20BF61270(v16, v42, (_OWORD **)&v46);
    v28 = v44;
    v29 = v41;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF614BC(v30, v31, v32);
    v34 = **(_QWORD **)(a1 + 8);
    if (v34)
    {
      v35 = (float *)(*((_QWORD *)v30 + 4) + 8);
      do
      {
        *(v35 - 2) = pxrInternal__aapl__pxrReserved__::GfSlerp(v28, v15, v29, v33);
        *((_DWORD *)v35 - 1) = v36;
        *(_DWORD *)v35 = v37;
        *((_DWORD *)v35 + 1) = v38;
        v35 += 4;
        v29 = (const pxrInternal__aapl__pxrReserved__::GfQuatf *)((char *)v29 + 16);
        v28 = (pxrInternal__aapl__pxrReserved__ *)((char *)v28 + 16);
        --v34;
      }
      while (v34);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v39);
  sub_20BF5618C((uint64_t)&v42);
  return v13;
}

void sub_20C356D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C356D58(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  const pxrInternal__aapl__pxrReserved__::GfQuath *v16;
  uint64_t (**v18[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v19[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (*v20)(_QWORD, uint64_t);
  uint64_t (*v21)(_QWORD, uint64_t);

  v19[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C537048;
  v19[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v21;
  v18[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C537048;
  v18[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v20;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfQuath>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v19, (uint64_t)&v21, a5)&& sub_20C356E90((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, &v21) != 1)
  {
    return 0;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::GfQuath>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v18, (uint64_t)&v20, a6)&& sub_20C356E90((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, &v20) != 1)
  {
    v20 = v21;
  }
  **(_QWORD **)(a1 + 8) = pxrInternal__aapl__pxrReserved__::GfSlerp((pxrInternal__aapl__pxrReserved__ *)&v21, (a4 - a5) / (a6 - a5), (const pxrInternal__aapl__pxrReserved__::GfQuath *)&v20, v16);
  return 1;
}

uint64_t sub_20C356E90(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C356F54(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C356F54(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C35701C(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C356FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35701C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51C030;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DC48;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C357070(uint64_t a1, uint64_t *a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v12;
  unsigned int TimeSample;
  uint64_t v14;
  uint64_t v15;
  const pxrInternal__aapl__pxrReserved__::GfQuath *v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t *v21;
  std::type_info *v22;
  __int16 v23;

  v12 = sub_20C0EEAF8(a2);
  v22 = &stru_24C51C030;
  v23 = 0;
  v20 = &unk_24C52DC48;
  v21 = &v19;
  TimeSample = pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v12, a3, (uint64_t)&v20, a5);
  if ((_BYTE)v23)
    v14 = 0;
  else
    v14 = TimeSample;
  if ((_DWORD)v14 == 1)
  {
    v15 = sub_20C0EEAF8(a2);
    v23 = 0;
    v21 = &v18;
    v22 = &stru_24C51C030;
    v20 = &unk_24C52DC48;
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(v15, a3, (uint64_t)&v20, a6)
      || (_BYTE)v23)
    {
      v18 = v19;
    }
    **(_QWORD **)(a1 + 8) = pxrInternal__aapl__pxrReserved__::GfSlerp((pxrInternal__aapl__pxrReserved__ *)&v19, (a4 - a5) / (a6 - a5), (const pxrInternal__aapl__pxrReserved__::GfQuath *)&v18, v16);
  }
  return v14;
}

uint64_t sub_20C35717C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_ClipSet **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v12;
  uint64_t ClipIndexForTime;
  pxrInternal__aapl__pxrReserved__::Usd_ClipSet *v14;
  uint64_t v15;
  double v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int128 v29;
  pxrInternal__aapl__pxrReserved__ *v30;
  const pxrInternal__aapl__pxrReserved__::GfQuath *v31;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v32;
  uint64_t v33;
  char *v34;
  const pxrInternal__aapl__pxrReserved__::GfQuath *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t (**v38[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  uint64_t (**v39[2])(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double);
  __int128 v40;
  __int128 v41;
  const pxrInternal__aapl__pxrReserved__::GfQuath *v42;
  __int128 v43;
  __int128 v44;
  pxrInternal__aapl__pxrReserved__ *v45;
  char v46;
  char *v47;

  v45 = 0;
  v43 = 0u;
  v44 = 0u;
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v39[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C537080;
  v39[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v43;
  v38[0] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&unk_24C537080;
  v38[1] = (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t *, double, double))&v40;
  v12 = *a2;
  ClipIndexForTime = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(*a2, a5);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(*(_QWORD *)(*((_QWORD *)v12 + 11) + 16 * ClipIndexForTime), a3, v39, (uint64_t)&v43, a5)&& sub_20C357410((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v12 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v43) != 1)
  {
    v24 = 0;
    goto LABEL_12;
  }
  v14 = *a2;
  v15 = pxrInternal__aapl__pxrReserved__::Usd_ClipSet::_FindClipIndexForTime(v14, a6);
  if (!pxrInternal__aapl__pxrReserved__::Usd_Clip::QueryTimeSample<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(*(_QWORD *)(*((_QWORD *)v14 + 11) + 16 * v15), a3, v38, (uint64_t)&v40, a6)&& sub_20C357410((pxrInternal__aapl__pxrReserved__::Usd_Clip **)v14 + 9, a3, (uint64_t (**)(_QWORD, uint64_t))&v40) != 1)
  {
    sub_20C282B2C((uint64_t)&v40, &v43);
  }
  if ((_QWORD)v43 == (_QWORD)v40 && (v16 = (a4 - a5) / (a6 - a5), v16 != 0.0))
  {
    v17 = *(unint64_t **)(a1 + 8);
    if (v16 != 1.0)
    {
      v47 = &v46;
      sub_20BF61DA0(v17, v43, (uint64_t **)&v47);
      v30 = v45;
      v31 = v42;
      v32 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
      sub_20BF61FF0(v32, v33, v34);
      v36 = **(_QWORD **)(a1 + 8);
      if (v36)
      {
        v37 = (uint64_t *)*((_QWORD *)v32 + 4);
        do
        {
          *v37++ = pxrInternal__aapl__pxrReserved__::GfSlerp(v30, v16, v31, v35);
          v31 = (const pxrInternal__aapl__pxrReserved__::GfQuath *)((char *)v31 + 8);
          v30 = (pxrInternal__aapl__pxrReserved__ *)((char *)v30 + 8);
          --v36;
        }
        while (v36);
      }
      goto LABEL_10;
    }
    v26 = v17[4];
    v27 = v41;
    v17[4] = (unint64_t)v42;
    v42 = (const pxrInternal__aapl__pxrReserved__::GfQuath *)v26;
    v28 = v17[2];
    v29 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v40;
    v17[2] = v27;
    v40 = v29;
    *(_QWORD *)&v41 = v28;
    v22 = &v40;
  }
  else
  {
    v17 = *(unint64_t **)(a1 + 8);
    v18 = v17[4];
    v19 = v44;
    v17[4] = (unint64_t)v45;
    v45 = (pxrInternal__aapl__pxrReserved__ *)v18;
    v20 = v17[2];
    v21 = *(_OWORD *)v17;
    *(_OWORD *)v17 = v43;
    v17[2] = v19;
    v43 = v21;
    *(_QWORD *)&v44 = v20;
    v22 = &v43;
  }
  v23 = v17[3];
  v17[3] = *((_QWORD *)v22 + 3);
  *((_QWORD *)v22 + 3) = v23;
LABEL_10:
  v24 = 1;
LABEL_12:
  sub_20BF5618C((uint64_t)&v40);
  sub_20BF5618C((uint64_t)&v43);
  return v24;
}

void sub_20C3573D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  sub_20BF5618C((uint64_t)va);
  sub_20BF5618C((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C357410(pxrInternal__aapl__pxrReserved__::Usd_Clip **a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::Usd_Clip *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v8;

  v4 = *a1;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (a3)
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return sub_20C3574D4(v4, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v5 + 88), a3);
  }
  else
  {
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v8 = sub_20C28E170(v4, a2, (uint64_t)v5 + 88);
    if (sub_20BDE150C(v8, MEMORY[0x24BEDB7C8]))
    {
      return 0;
    }
    else if (sub_20BDE150C(v8, (uint64_t)&stru_24C527B78))
    {
      return 2;
    }
    else
    {
      return 1;
    }
  }
}

uint64_t sub_20C3574D4(pxrInternal__aapl__pxrReserved__::Usd_Clip *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;

  pxrInternal__aapl__pxrReserved__::Usd_Clip::_GetLayerForClip(a1, (uint64_t *)&v12);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v12);
  pxrInternal__aapl__pxrReserved__::Usd_Clip::_TranslatePathToClip(a1, a2, &v11);
  v9 = sub_20C35759C(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v11, a3, a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  sub_20C103234(&v12);
  return v9;
}

void sub_20C357574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a10)
{
  sub_20BFD1A18(&a9);
  sub_20C103234(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35759C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DC00;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52DC80;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t sub_20C3575F0(uint64_t a1, uint64_t *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, double a4, double a5, double a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t v13;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  double v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  __int128 *v21;
  unint64_t v22;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  pxrInternal__aapl__pxrReserved__ *v28;
  const pxrInternal__aapl__pxrReserved__::GfQuath *v29;
  pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *v30;
  uint64_t v31;
  char *v32;
  const pxrInternal__aapl__pxrReserved__::GfQuath *v33;
  uint64_t v34;
  uint64_t *v35;
  __int128 v36;
  __int128 v37;
  const pxrInternal__aapl__pxrReserved__::GfQuath *v38;
  __int128 v39;
  __int128 v40;
  pxrInternal__aapl__pxrReserved__ *v41;
  char v42;
  char *v43;

  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v38 = 0;
  v36 = 0u;
  v37 = 0u;
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
  v13 = sub_20C278FA0(v12, a3, (uint64_t)&v39, a5);
  if ((v13 & 1) != 0)
  {
    v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8(a2);
    if ((sub_20C278FA0(v14, a3, (uint64_t)&v36, a6) & 1) == 0)
      sub_20C282B2C((uint64_t)&v36, &v39);
    if ((_QWORD)v39 != (_QWORD)v36 || (v15 = (a4 - a5) / (a6 - a5), v15 == 0.0))
    {
      v16 = *(unint64_t **)(a1 + 8);
      v17 = v16[4];
      v18 = v40;
      v16[4] = (unint64_t)v41;
      v41 = (pxrInternal__aapl__pxrReserved__ *)v17;
      v19 = v16[2];
      v20 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v39;
      v16[2] = v18;
      v39 = v20;
      *(_QWORD *)&v40 = v19;
      v21 = &v39;
LABEL_7:
      v22 = v16[3];
      v16[3] = *((_QWORD *)v21 + 3);
      *((_QWORD *)v21 + 3) = v22;
      goto LABEL_8;
    }
    v16 = *(unint64_t **)(a1 + 8);
    if (v15 == 1.0)
    {
      v24 = v16[4];
      v25 = v37;
      v16[4] = (unint64_t)v38;
      v38 = (const pxrInternal__aapl__pxrReserved__::GfQuath *)v24;
      v26 = v16[2];
      v27 = *(_OWORD *)v16;
      *(_OWORD *)v16 = v36;
      v16[2] = v25;
      v36 = v27;
      *(_QWORD *)&v37 = v26;
      v21 = &v36;
      goto LABEL_7;
    }
    v43 = &v42;
    sub_20BF61DA0(v16, v39, (uint64_t **)&v43);
    v28 = v41;
    v29 = v38;
    v30 = *(pxrInternal__aapl__pxrReserved__::Vt_ArrayBase **)(a1 + 8);
    sub_20BF61FF0(v30, v31, v32);
    v34 = **(_QWORD **)(a1 + 8);
    if (v34)
    {
      v35 = (uint64_t *)*((_QWORD *)v30 + 4);
      do
      {
        *v35++ = pxrInternal__aapl__pxrReserved__::GfSlerp(v28, v15, v29, v33);
        v29 = (const pxrInternal__aapl__pxrReserved__::GfQuath *)((char *)v29 + 8);
        v28 = (pxrInternal__aapl__pxrReserved__ *)((char *)v28 + 8);
        --v34;
      }
      while (v34);
    }
  }
LABEL_8:
  sub_20BF5618C((uint64_t)&v36);
  sub_20BF5618C((uint64_t)&v39);
  return v13;
}

void sub_20C3577C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_20BF5618C((uint64_t)&a9);
  sub_20BF5618C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Usd_PrimTypeInfoCache::ComputeInvalidPrimTypeToFallbackMap(uint64_t *a1, pxrInternal__aapl__pxrReserved__::VtDictionary *this, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  char v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  unint64_t v40;
  const char *v41;
  unsigned int *v42;
  unsigned int v43;
  BOOL v44;
  char v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  char *v54;
  __int128 v55;
  _BYTE v56[24];
  __int128 v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;

  v6 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(this);
  v8 = v7;
  v59 = (_QWORD *)v6;
  v60 = v7;
  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtDictionary::end(this);
  v11 = result;
  v12 = v10;
  if (v10)
    v13 = v6 == (_QWORD)result;
  else
    v13 = 1;
  v14 = v13;
  if (v8 != v10 || (v14 & 1) == 0)
  {
    v54 = (char *)&v55 + 8;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v58);
      *(_QWORD *)v56 = v58;
      if ((v58 & 7) != 0)
      {
        v15 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 2, v15));
        if ((v16 & 1) == 0)
          *(_QWORD *)v56 &= 0xFFFFFFFFFFFFFFF8;
      }
      *(_OWORD *)&v56[8] = 0u;
      v57 = 0u;
      v17 = sub_20C357C3C(a1, v56);
      pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v55);
      v18 = *(_QWORD *)(v17 + 40);
      v19 = v55;
      *(_QWORD *)&v55 = &v56[16];
      sub_20BEEB2B8((void ***)&v55);
      if ((v56[8] & 7) != 0)
      {
        v22 = (unsigned int *)(*(_QWORD *)&v56[8] & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((v56[0] & 7) != 0)
      {
        v24 = (unsigned int *)(*(_QWORD *)v56 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      if (v18 == v19)
      {
        if ((sub_20BFED450((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 56)) & 1) != 0)
        {
          v26 = *(_QWORD *)(v6 + 64);
          if ((v26 & 4) != 0)
            v27 = (_QWORD *)(*(uint64_t (**)(uint64_t))((v26 & 0xFFFFFFFFFFFFFFF8) + 168))(v6 + 56);
          else
            v27 = *(_QWORD **)(v6 + 56);
          if (*v27)
          {
            v28 = (uint64_t *)v27[4];
            v29 = &v28[*v27];
            while (1)
            {
              v30 = *v28;
              *(_QWORD *)v56 = v30;
              if ((v30 & 7) != 0)
              {
                v31 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
                do
                  v32 = __ldxr(v31);
                while (__stxr(v32 + 2, v31));
                if ((v32 & 1) == 0)
                  *(_QWORD *)v56 &= 0xFFFFFFFFFFFFFFF8;
              }
              *(_OWORD *)&v56[8] = 0u;
              v57 = 0u;
              v33 = sub_20C357C3C(a1, v56);
              pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v55);
              v34 = *(_QWORD *)(v33 + 40);
              v35 = v55;
              *(_QWORD *)&v55 = &v56[16];
              sub_20BEEB2B8((void ***)&v55);
              if ((v56[8] & 7) != 0)
              {
                v36 = (unsigned int *)(*(_QWORD *)&v56[8] & 0xFFFFFFFFFFFFFFF8);
                do
                  v37 = __ldxr(v36);
                while (__stlxr(v37 - 2, v36));
              }
              if ((v56[0] & 7) != 0)
              {
                v38 = (unsigned int *)(*(_QWORD *)v56 & 0xFFFFFFFFFFFFFFF8);
                do
                  v39 = __ldxr(v38);
                while (__stlxr(v39 - 2, v38));
              }
              if (v34 != v35)
                break;
              if (++v28 == v29)
                goto LABEL_46;
            }
            sub_20C157C64((uint64_t *)&v55, &v58, v28);
            *(_OWORD *)v56 = v55;
            v55 = 0uLL;
            sub_20C358C48(a3, v56, (uint64_t *)v56);
            if ((v56[8] & 7) != 0)
            {
              v46 = (unsigned int *)(*(_QWORD *)&v56[8] & 0xFFFFFFFFFFFFFFF8);
              do
                v47 = __ldxr(v46);
              while (__stlxr(v47 - 2, v46));
            }
            if ((v56[0] & 7) != 0)
            {
              v48 = (unsigned int *)(*(_QWORD *)v56 & 0xFFFFFFFFFFFFFFF8);
              do
                v49 = __ldxr(v48);
              while (__stlxr(v49 - 2, v48));
            }
            if ((BYTE8(v55) & 7) != 0)
            {
              v50 = (unsigned int *)(*((_QWORD *)&v55 + 1) & 0xFFFFFFFFFFFFFFF8);
              do
                v51 = __ldxr(v50);
              while (__stlxr(v51 - 2, v50));
            }
            if ((v55 & 7) != 0)
            {
              v52 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
              do
                v53 = __ldxr(v52);
              while (__stlxr(v53 - 2, v52));
            }
          }
        }
        else
        {
          *(_QWORD *)v56 = "usd/primTypeInfoCache.cpp";
          *(_QWORD *)&v56[8] = "ComputeInvalidPrimTypeToFallbackMap";
          *(_QWORD *)&v56[16] = 47;
          *(_QWORD *)&v57 = "void pxrInternal__aapl__pxrReserved__::Usd_PrimTypeInfoCache::ComputeInvalidPrimTypeToFallba"
                            "ckMap(const VtDictionary &, TfHashMap<TfToken, TfToken, TfHash> *)";
          BYTE8(v57) = 0;
          v40 = v58 & 0xFFFFFFFFFFFFFFF8;
          if ((v58 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v41 = (const char *)(v40 + 16);
            if (*(char *)(v40 + 39) < 0)
              v41 = *(const char **)v41;
          }
          else
          {
            v41 = "";
          }
          pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v56, (pxrInternal__aapl__pxrReserved__ *)"Value for key '%s' in fallbackPrimTypes metadata dictionary is not a VtTokenArray.", v21, v41, v54);
        }
      }
LABEL_46:
      if ((v58 & 7) != 0)
      {
        v42 = (unsigned int *)(v58 & 0xFFFFFFFFFFFFFFF8);
        do
          v43 = __ldxr(v42);
        while (__stlxr(v43 - 2, v42));
      }
      result = sub_20BF4D2AC(&v59, v20, v21);
      v6 = (uint64_t)v59;
      if (v12)
        v44 = v59 == v11;
      else
        v44 = 1;
      v45 = v44;
    }
    while (v60 != v12 || (v45 & 1) == 0);
  }
  return result;
}

void sub_20C357BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unsigned int *v18;
  unsigned int v19;

  if ((a18 & 7) != 0)
  {
    v18 = (unsigned int *)(a18 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C357C3C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v8;

  if (*(_OWORD *)a2 == 0 && a2[2] == a2[3])
    return a1[73];
  v4 = sub_20C357D88(a1, a2);
  if (!v4)
  {
    v5 = (char *)operator new(0x48uLL);
    pxrInternal__aapl__pxrReserved__::UsdPrimTypeInfo::UsdPrimTypeInfo(v5, a2);
    v8 = v5;
    v4 = sub_20C357DFC(a1, (_QWORD **)&v8);
    v6 = v8;
    v8 = 0;
    if (v6)
      sub_20C358A40((uint64_t)&v8, v6);
  }
  return v4;
}

void sub_20C357CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10)
{
  char *v11;

  v11 = a10;
  a10 = 0;
  if (v11)
    sub_20C358A40((uint64_t)&a10, v11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C357D10(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  void **v8;

  v8 = (void **)(a1 + 16);
  sub_20BEEB2B8(&v8);
  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v5 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return a1;
}

uint64_t sub_20C357D88(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v4 = 0;
  v5 = 0;
  v6 = 0;
  if (sub_20C357E8C(a1, (uint64_t)&v4, a2))
    v2 = *(_QWORD *)(v6 + 56);
  else
    v2 = 0;
  v6 = 0;
  sub_20BEBF29C(&v4);
  return v2;
}

void sub_20C357DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_20BEBF29C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C357DFC(uint64_t *a1, _QWORD **a2)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v3 = *a2;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v4 = sub_20C358820(a1, (uint64_t)&v10, v3);
  v5 = v12;
  if (v4)
  {
    v6 = *a2;
    *a2 = 0;
    v7 = *(char **)(v5 + 56);
    *(_QWORD *)(v5 + 56) = v6;
    if (v7)
    {
      sub_20C358A40(v5 + 56, v7);
      v5 = v12;
    }
  }
  v8 = *(_QWORD *)(v5 + 56);
  v12 = 0;
  sub_20BEBF29C(&v10);
  return v8;
}

void sub_20C357E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  a11 = 0;
  sub_20BEBF29C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C357E8C(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C357EF0(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, _QWORD *, uint64_t))sub_20C358240, 0);
}

uint64_t sub_20C357EF0(uint64_t *a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, _QWORD *, uint64_t), _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v32;
  unint64_t v33;
  tbb::spin_rw_mutex_v3 *v35;
  char v36;
  uint64_t v37;

  v35 = 0;
  v36 = 0;
  sub_20C35840C((uint64_t)&v35, a3, a3 + 1, (uint64_t)(a3 + 2));
  v33 = 0;
  v13 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v35);
  v14 = *a1;
  __dmb(0xBu);
  v32 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_20C358480((uint64_t)&v35, (uint64_t)a1, v14 & v13, 0);
    v15 = (_QWORD *)(v37 + 16);
    do
      v15 = (_QWORD *)*v15;
    while ((unint64_t)v15 >= 0x40 && !sub_20C358710(a3, v15 + 2));
    if (a2)
      break;
    if (v15)
    {
      v16 = 1;
LABEL_10:
      v17 = (uint64_t)a8;
      if (!a5)
        goto LABEL_51;
      goto LABEL_11;
    }
    v26 = *a1;
    __dmb(0xBu);
    if (v14 == v26 || !sub_20BECF7E4((uint64_t)a1, v13, v14, v26))
    {
      sub_20BEBF29C(&v35);
      return 0;
    }
LABEL_34:
    sub_20BEBF29C(&v35);
    v14 = v26;
  }
  if (v15)
  {
LABEL_7:
    v16 = 0;
    goto LABEL_10;
  }
  if (!a8)
    a8 = (_QWORD *)a7(v32, a3, a4);
  if (!v36)
  {
    v36 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade(v35) & 1) == 0)
    {
      v15 = (_QWORD *)(v37 + 16);
      while (1)
      {
        v15 = (_QWORD *)*v15;
        if ((unint64_t)v15 < 0x40)
          break;
        if (sub_20C358710(a3, v15 + 2))
        {
          if (!v36)
            goto LABEL_7;
          v27 = (unint64_t *)v35;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 3, v27));
          v16 = 0;
          v36 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  v26 = *a1;
  __dmb(0xBu);
  if (v14 != v26)
  {
    if (!sub_20BECF7E4((uint64_t)a1, v13, v14, v26))
      goto LABEL_36;
    goto LABEL_34;
  }
  v26 = v14;
LABEL_36:
  v33 = sub_20BECF26C((uint64_t)a1, v37, a8, v26);
  v17 = 0;
  v16 = 1;
  v15 = a8;
  if (!a5)
  {
LABEL_51:
    sub_20BEBF29C(&v35);
    goto LABEL_46;
  }
LABEL_11:
  if ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v15 + 1), a6) & 1) == 0)
  {
    sched_yield();
    v18 = 2;
    while ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v15 + 1), a6) & 1) == 0)
    {
      sched_yield();
      v19 = v18 < 16;
      v18 *= 2;
      if (!v19)
      {
        v20 = (unint64_t *)v35;
        v35 = 0;
        if (v36)
        {
          while (1)
          {
            v21 = *v20;
            v22 = *v20 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v23 = __ldaxr(v20);
                if (v23 != v21)
                  break;
                if (!__stlxr(v22, v20))
                  goto LABEL_25;
              }
              __clrex();
              do
                v24 = __ldxr(v20);
              while (__stxr(v24, v20));
            }
            while (v24 == v21);
            sched_yield();
          }
        }
        do
          v25 = __ldaxr(v20);
        while (__stlxr(v25 - 4, v20));
LABEL_25:
        sched_yield();
        v26 = *a1;
        __dmb(0xBu);
        a8 = (_QWORD *)v17;
        goto LABEL_34;
      }
    }
  }
  sub_20BEBF29C(&v35);
  *(_QWORD *)(a5 + 16) = v15;
  *(_QWORD *)(a5 + 24) = v13;
LABEL_46:
  if (v33)
    sub_20C358248(a1, v33, v32, 0);
  if (v17)
    sub_20C3583DC((uint64_t)a1, v17);
  return v16;
}

void sub_20C358218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C358240()
{
  return 0;
}

void sub_20C358248(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;

  if (a2 < 8)
  {
    v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    v10 = v9;
    if ((a4 & 1) != 0)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      v14 = -6096;
      do
      {
        v15 = &v9[v14];
        *((_QWORD *)v15 + 763) = 0;
        *((_QWORD *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    v16 = 0;
    v17 = (int64x2_t)xmmword_20CA59F60;
    v18 = v10 - 48;
    v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    v22 = vdupq_n_s64(2uLL);
    v13 = 255;
    do
    {
      v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_20CA59F70);
      v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if ((vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0] & 1) != 0)
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1] & 1) != 0)
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      v16 += 2;
      v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    v7 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    v8 = v7;
    if ((a4 & 1) != 0)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      v11 = 1 << a2;
      v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_20C3583CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20C3583DC(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_20C35879C(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_20C35840C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;

  v4 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (*(_BYTE *)(a1 + 8))
    v4 += (*(_QWORD *)a1 + v4 + (*(_QWORD *)a1 + v4) * (*(_QWORD *)a1 + v4)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v4;
  return sub_20C358448(a1, a3, a4);
}

uint64_t sub_20C358448(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;

  v3 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (*(_BYTE *)(a1 + 8))
    v3 += (*(_QWORD *)a1 + v3 + (*(_QWORD *)a1 + v3) * (*(_QWORD *)a1 + v3)) >> 1;
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = v3;
  return sub_20C036E20(a1, a3);
}

uint64_t sub_20C358480(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  tbb::spin_rw_mutex_v3 *v10;
  uint64_t v11;
  tbb::spin_rw_mutex_v3 *v12;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (v10 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(_QWORD *)a1 = v10;
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v11 + 16) == 3)
      sub_20C358558(a2, v11, a3);
  }
  else
  {
    v12 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v12;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v12);
  }
  return a1;
}

void sub_20C358544(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF29C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C358558(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  tbb::spin_rw_mutex_v3 *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  __dmb(0xBu);
  *(_QWORD *)(a2 + 16) = 0;
  if (a3)
  {
    v5 = HIDWORD(a3);
    if (!HIDWORD(a3))
      v5 = a3;
    v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    v7 = v5 >= 4;
    if (v5 >= 4)
      LODWORD(v5) = v5 >> 2;
    v8 = (v5 >> 1) & 1;
    if (v7)
      v6 += 2;
    v9 = v8 + v6;
  }
  else
  {
    v9 = -1;
  }
  v10 = ~(-1 << v9);
  sub_20C358480(&v15, a1, v10 & a3, 0);
  v11 = (_QWORD *)(v17 + 16);
  v12 = *(_QWORD **)(v17 + 16);
  __dmb(0xBu);
  if ((unint64_t)v12 >= 0x40)
  {
    v13 = (2 * v10) | 1;
    while (1)
    {
      v18 = 0;
      v19 = 0;
      sub_20C35840C((uint64_t)&v18, v12 + 2, v12 + 3, (uint64_t)(v12 + 4));
      if ((bswap64(0x9E3779B97F4A7C55 * v18) & v13) != a3)
        break;
      if (v16 || (v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v15) & 1) != 0))
      {
        *v11 = *v12;
        *v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v12;
LABEL_24:
        v12 = (_QWORD *)*v11;
        if (*v11 <= 0x3FuLL)
          return sub_20BEBF29C(&v15);
      }
      else
      {
        v11 = (_QWORD *)(v17 + 16);
        v12 = *(_QWORD **)(v17 + 16);
        __dmb(0xBu);
        if ((unint64_t)v12 < 0x40)
          return sub_20BEBF29C(&v15);
      }
    }
    v11 = v12;
    goto LABEL_24;
  }
  return sub_20BEBF29C(&v15);
}

void sub_20C3586FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C358710(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;
  BOOL v8;

  if ((*a1 & 0xFFFFFFFFFFFFFFF8) != (*a2 & 0xFFFFFFFFFFFFFFF8))
    return 0;
  if ((a1[1] & 0xFFFFFFFFFFFFFFF8) != (a2[1] & 0xFFFFFFFFFFFFFFF8))
    return 0;
  v3 = a1[2];
  v2 = a1[3];
  v4 = (uint64_t *)a2[2];
  if (v2 - v3 != a2[3] - (_QWORD)v4)
    return 0;
  if (v3 == v2)
    return 1;
  v5 = v3 + 8;
  do
  {
    v6 = *v4++;
    result = (*(_QWORD *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) == (v6 & 0xFFFFFFFFFFFFFFF8);
    v8 = (*(_QWORD *)(v5 - 8) & 0xFFFFFFFFFFFFFFF8) != (v6 & 0xFFFFFFFFFFFFFFF8) || v5 == v2;
    v5 += 8;
  }
  while (!v8);
  return result;
}

void sub_20C35879C(uint64_t a1)
{
  _QWORD *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;
  unsigned int v9;
  void **v10;

  v4 = *(char **)(a1 + 40);
  v2 = (_QWORD *)(a1 + 40);
  v3 = v4;
  *v2 = 0;
  if (v4)
    sub_20C358A40((uint64_t)v2, v3);
  v10 = (void **)(a1 + 16);
  sub_20BEEB2B8(&v10);
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v8 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
}

uint64_t sub_20C358820(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C357EF0(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, _QWORD *, uint64_t))sub_20C358884, 0);
}

uint64_t sub_20C358884(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;

  v3 = a2;
  return sub_20C3588B4(a1, (uint64_t)&unk_20CAC184C, &v3);
}

uint64_t sub_20C3588B4(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v8[2];

  v5 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x40);
  v8[0] = v5;
  v8[1] = a1;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  sub_20C358934((uint64_t *)(v5 + 16), *a3);
  *(_QWORD *)(v5 + 56) = 0;
  v8[0] = 0;
  sub_20C358A10(v8, v6);
  return v5;
}

void sub_20C358920(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C358A10(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C358934(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v6 = a2[1];
  a1[1] = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      a1[1] &= 0xFFFFFFFFFFFFFFF8;
  }
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  sub_20BFE538C(a1 + 2, (uint64_t *)a2[2], (uint64_t *)a2[3], (a2[3] - a2[2]) >> 3);
  return a1;
}

void sub_20C3589DC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = v1[1];
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C96B3E4(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C358A10(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

void sub_20C358A40(uint64_t a1, char *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  void **v11;

  if (a2)
  {
    sub_20C358AEC((uint64_t *)a2 + 8, 0);
    v3 = *((_QWORD *)a2 + 6);
    if ((v3 & 7) != 0)
    {
      v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    v11 = (void **)(a2 + 16);
    sub_20BEEB2B8(&v11);
    v6 = *((_QWORD *)a2 + 1);
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    if ((*(_QWORD *)a2 & 7) != 0)
    {
      v9 = (unsigned int *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    operator delete(a2);
  }
}

void sub_20C358AEC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C358B18(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C358B18(uint64_t a1)
{
  void **v3;

  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 104));
  v3 = (void **)(a1 + 80);
  sub_20BEEB2B8(&v3);
  v3 = (void **)(a1 + 56);
  sub_20BEEB2B8(&v3);
  sub_20C358B84(a1 + 16);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  sub_20BFD265C((_DWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_20C358B84(uint64_t a1)
{
  void *v2;

  sub_20C358BBC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C358BBC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C358BF8((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_20C358BF8(uint64_t a1)
{
  _DWORD *result;
  unsigned int *v3;
  unsigned int v4;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  result = sub_20BFD265C((_DWORD *)(a1 + 16));
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v3 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return result;
}

uint64_t *sub_20C358C48(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v8)
        v3 = v7 % v8;
    }
    else
    {
      v3 = v7 & (v8 - 1);
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if ((i[2] & 0xFFFFFFFFFFFFFFF8) == v6)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v3)
            break;
        }
      }
    }
  }
  v13 = (uint64_t *)(a1 + 16);
  i = (uint64_t *)operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  sub_20C15A32C(i + 2, a3);
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v3 = v7 % v8;
      else
        v3 = v7;
    }
    else
    {
      v3 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *i = *v21;
LABEL_38:
    *v21 = (uint64_t)i;
    goto LABEL_39;
  }
  *i = *v13;
  *v13 = (uint64_t)i;
  *(_QWORD *)(v20 + 8 * v3) = v13;
  if (*i)
  {
    v22 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (uint64_t *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C358E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20BFC9F84(v11, v10);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::GetInstance(pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254988618);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254988618))
  {
    pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::Usd_UsdzResolverCache((pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *)&unk_2549885B8);
    __cxa_atexit((void (*)(void *))sub_20C358F40, &unk_2549885B8, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988618);
  }
  return &unk_2549885B8;
}

void sub_20C358F24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988618);
  _Unwind_Resume(a1);
}

void sub_20C358F4C(unint64_t *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  _OWORD *v22;
  const char *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  __int128 v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;

  if (!a2 || *((_QWORD *)a2 + 1) && (sub_20C35A6BC(a2) & 1) == 0)
  {
    v28 = "ar/threadLocalScopedCache.h";
    v29 = "BeginCacheScope";
    v30 = 79;
    v31 = "void pxrInternal__aapl__pxrReserved__::ArThreadLocalScopedCache<pxrInternal__aapl__pxrReserved__::Usd_UsdzReso"
          "lverCache::_Cache>::BeginCacheScope(VtValue *) [CachedType = pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache]";
    LOBYTE(v32) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected cache scope data");
    return;
  }
  LOBYTE(v28) = 0;
  v4 = sub_20BEB5B80(a1, &v28);
  if (sub_20C35A6BC(a2))
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 4) != 0)
      v6 = (__int128 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
                                                                                              + 168))(a2);
    else
      v6 = *(__int128 **)a2;
  }
  else
  {
    v7 = *(_QWORD *)(v4 + 8);
    if (*(_QWORD *)v4 == v7)
    {
      sub_20C35A7F4(&v27);
      v8 = *(_QWORD *)(v4 + 16);
      v9 = *(_OWORD **)(v4 + 8);
      if ((unint64_t)v9 >= v8)
      {
        v10 = ((uint64_t)v9 - *(_QWORD *)v4) >> 4;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60)
          sub_20BDDF694();
        v12 = v8 - *(_QWORD *)v4;
        if (v12 >> 3 > v11)
          v11 = v12 >> 3;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        v32 = v4 + 16;
        v14 = (char *)sub_20BDEA2F0(v4 + 16, v13);
        v16 = &v14[16 * v10];
        *(_OWORD *)v16 = v27;
        v27 = 0uLL;
        v18 = *(char **)v4;
        v17 = *(char **)(v4 + 8);
        if (v17 == *(char **)v4)
        {
          v21 = *(char **)(v4 + 8);
          v19 = &v14[16 * v10];
        }
        else
        {
          v19 = &v14[16 * v10];
          do
          {
            v20 = *((_OWORD *)v17 - 1);
            v17 -= 16;
            *((_OWORD *)v19 - 1) = v20;
            v19 -= 16;
            *(_QWORD *)v17 = 0;
            *((_QWORD *)v17 + 1) = 0;
          }
          while (v17 != v18);
          v21 = *(char **)v4;
          v17 = *(char **)(v4 + 8);
        }
        v22 = v16 + 16;
        *(_QWORD *)v4 = v19;
        v28 = v21;
        v29 = v21;
        *(_QWORD *)(v4 + 8) = v16 + 16;
        v30 = (uint64_t)v17;
        v23 = *(const char **)(v4 + 16);
        *(_QWORD *)(v4 + 16) = &v14[16 * v15];
        v31 = v23;
        sub_20BDEA324((uint64_t)&v28);
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
        *(_QWORD *)(v4 + 8) = v22;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      else
      {
        *v9 = v27;
        *(_QWORD *)(v4 + 8) = v9 + 1;
      }
      goto LABEL_11;
    }
    v6 = (__int128 *)(v7 - 16);
  }
  sub_20BDEA72C((char **)v4, v6);
LABEL_11:
  sub_20C35A734(a2, (_QWORD *)(*(_QWORD *)(v4 + 8) - 16));
}

void sub_20C359170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C359188(unint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];
  char v5;

  LOBYTE(v4[0]) = 0;
  v1 = (_QWORD *)sub_20BEB5B80(a1, v4);
  v2 = v1[1];
  if (*v1 != v2)
    goto LABEL_2;
  v4[0] = "ar/threadLocalScopedCache.h";
  v4[1] = "EndCacheScope";
  v4[2] = 101;
  v4[3] = "void pxrInternal__aapl__pxrReserved__::ArThreadLocalScopedCache<pxrInternal__aapl__pxrReserved__::Usd_UsdzReso"
          "lverCache::_Cache>::EndCacheScope(VtValue *) [CachedType = pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache]";
  v5 = 0;
  if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v4, "!cacheStack.empty()", 0))
  {
    v2 = v1[1];
LABEL_2:
    pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 - 16));
    v1[1] = v3;
  }
}

_QWORD *sub_20C35921C@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  char v9;

  v9 = 0;
  result = (_QWORD *)sub_20BEB5B80(a1, &v9);
  v4 = result[1];
  if (*result == v4)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    v6 = *(_QWORD *)(v4 - 16);
    v5 = *(_QWORD *)(v4 - 8);
    *a2 = v6;
    a2[1] = v5;
    if (v5)
    {
      v7 = (unint64_t *)(v5 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_OpenZipFile(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *v4;
  uint64_t *Resolver;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *__p[2];
  uint64_t v10;
  __int128 v11;

  v4 = (pxrInternal__aapl__pxrReserved__ *)sub_20C359FEC(a2);
  Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v4);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v10 = *(_QWORD *)(a1 + 16);
  }
  pxrInternal__aapl__pxrReserved__::ArResolver::OpenAsset((uint64_t)Resolver);
  sub_20BDE82DC((uint64_t)a2, &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
  if (*a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Open(a2, (uint64_t)__p);
    sub_20BDE881C(a2 + 2, (uint64_t *)__p);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)__p);
  }
}

void sub_20C359374(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)(v14 + 16));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v14);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::FindOrOpenZipFile(unint64_t *a1@<X0>, __int128 *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  void *__dst[2];
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  void *__p[2];
  uint64_t v41;
  __int128 v42;
  _QWORD v43[3];
  uint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;

  sub_20C35921C(a1, &v47);
  v5 = v47;
  if (!v47)
  {
    pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_OpenZipFile((uint64_t)a2, a3);
    goto LABEL_38;
  }
  v44 = 0;
  v45 = 0;
  v46 = 0;
  sub_20C359FEC(&v32);
  sub_20C35A028((char *)__dst, a2, (uint64_t)&v32);
  *(_OWORD *)__p = *(_OWORD *)__dst;
  v41 = v36;
  __dst[0] = 0;
  __dst[1] = 0;
  v42 = v37;
  v36 = 0;
  v37 = 0uLL;
  v43[0] = v38;
  v43[1] = v39;
  if (v39)
  {
    v6 = (unint64_t *)(v39 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = sub_20C35AD20(v5, (uint64_t)&v44, __p);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v43);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (SHIBYTE(v41) < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&v38);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (SHIBYTE(v36) < 0)
    operator delete(__dst[0]);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&v34);
  v15 = v33;
  if (!v33)
    goto LABEL_23;
  p_shared_owners = (unint64_t *)&v33->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v8)
      goto LABEL_24;
  }
  else
  {
LABEL_23:
    if (v8)
    {
LABEL_24:
      pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_OpenZipFile((uint64_t)a2, __p);
      v18 = v46;
      sub_20BDE82DC((uint64_t)(v46 + 5), (__int128 *)__p);
      sub_20BDE881C(v18 + 7, &v41);
      pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&v41);
      v19 = (std::__shared_weak_count *)__p[1];
      if (__p[1])
      {
        v20 = (unint64_t *)((char *)__p[1] + 8);
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
  v22 = v46;
  *a3 = v46[5];
  v23 = v22[6];
  a3[1] = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  a3[2] = v22[7];
  v26 = v22[8];
  a3[3] = v26;
  if (v26)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v46 = 0;
  sub_20BEBF29C(&v44);
LABEL_38:
  v29 = v48;
  if (v48)
  {
    v30 = (unint64_t *)&v48->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20C359688(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 80) = 0;
  sub_20BEBF29C((_QWORD *)(v1 - 96));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v1 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_20C3596E8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C35972C()
{
  uint64_t *v0;

  v0 = sub_20C35A0A4();
  return sub_20C35A1C4(v0);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::Usd_UsdzResolver(pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver *this)
{
  _QWORD *result;

  result = pxrInternal__aapl__pxrReserved__::ArPackageResolver::ArPackageResolver(this);
  *result = &off_24C5370B8;
  return result;
}

{
  _QWORD *result;

  result = pxrInternal__aapl__pxrReserved__::ArPackageResolver::ArPackageResolver(this);
  *result = &off_24C5370B8;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::BeginCacheScope(pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver *this, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::GetInstance(this);
  sub_20C358F4C(qword_2549885B8, a2);
}

void pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::EndCacheScope(pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver *this, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::GetInstance(this);
  sub_20C359188(qword_2549885B8);
}

void pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::Resolve(__int128 *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  __int128 v14;
  uint64_t v15[2];
  _QWORD *v16[2];
  uint64_t v17;
  std::__shared_weak_count *v18;

  v17 = 0;
  v18 = 0;
  v6 = (pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *)pxrInternal__aapl__pxrReserved__::UsdZipFile::UsdZipFile(v16);
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::GetInstance(v6);
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::FindOrOpenZipFile(qword_2549885B8, a1, &v14);
  sub_20BDE82DC((uint64_t)&v17, &v14);
  sub_20BDE881C(v16, v15);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v15);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v16[0])
  {
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Find(v16, (unsigned __int8 *)a2, &v14);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::end(&v13);
    if (pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator!=((_QWORD **)&v14, (_QWORD **)&v13))
    {
      if (*(char *)(a2 + 23) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)a2;
        *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      }
    }
    else
    {
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&v13);
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator((void **)&v14);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v16);
  v10 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20C359954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator((void **)va);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)va1);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v3 - 48));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::OpenAsset(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _BOOL4 v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char *v18;
  uint64_t File;
  __int128 v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;
  __int128 v30;
  uint64_t v31[2];
  __int16 v32;
  char v33;
  void *v34;
  _QWORD *v35[2];
  __int128 v36;

  v36 = 0uLL;
  v6 = (pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *)pxrInternal__aapl__pxrReserved__::UsdZipFile::UsdZipFile(v35);
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::GetInstance(v6);
  pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::FindOrOpenZipFile(qword_2549885B8, (__int128 *)a1, &v30);
  sub_20BDE82DC((uint64_t)&v36, &v30);
  sub_20BDE881C(v35, v31);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v31);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v30 + 1);
  if (*((_QWORD *)&v30 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v30 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (!v35[0])
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_27;
  }
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Find(v35, (unsigned __int8 *)a2, &v34);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::end(&v30);
  v10 = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::operator==((_QWORD **)&v34, (_QWORD **)&v30);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator((void **)&v30);
  if (!v10)
  {
    pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::GetFileInfo((pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator *)&v34, (uint64_t)&v30);
    if (v32)
    {
      v25 = "usd/usdzResolver.cpp";
      v26 = "OpenAsset";
      v27 = 237;
      v28 = "virtual std::shared_ptr<ArAsset> pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::OpenAsset(const std::st"
            "ring &, const std::string &)";
      v29 = 0;
      if (*(char *)(a2 + 23) >= 0)
        v11 = (const char *)a2;
      else
        v11 = *(const char **)a2;
      if (*(char *)(a1 + 23) >= 0)
        v12 = (const char *)a1;
      else
        v12 = *(const char **)a1;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot open %s in %s: compressed files are not supported", v11, v12);
    }
    else
    {
      if (!v33)
      {
        v18 = (char *)operator new(0x40uLL);
        File = pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::GetFile((pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator *)&v34);
        v20 = v30;
        pxrInternal__aapl__pxrReserved__::ArAsset::ArAsset(v18);
        *(_QWORD *)v18 = off_24C537248;
        *(_OWORD *)(v18 + 8) = v36;
        v36 = 0uLL;
        v21 = v35[1];
        *((_QWORD **)v18 + 3) = v35[0];
        *((_QWORD *)v18 + 4) = v21;
        if (v21)
        {
          v22 = v21 + 1;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        *((_QWORD *)v18 + 5) = File;
        *((_OWORD *)v18 + 3) = v20;
        *a3 = v18;
        v24 = operator new(0x20uLL);
        *v24 = &off_24C537420;
        v24[1] = 0;
        v24[2] = 0;
        v24[3] = v18;
        a3[1] = v24;
        goto LABEL_26;
      }
      v25 = "usd/usdzResolver.cpp";
      v26 = "OpenAsset";
      v27 = 244;
      v28 = "virtual std::shared_ptr<ArAsset> pxrInternal__aapl__pxrReserved__::Usd_UsdzResolver::OpenAsset(const std::st"
            "ring &, const std::string &)";
      v29 = 0;
      if (*(char *)(a2 + 23) >= 0)
        v13 = (const char *)a2;
      else
        v13 = *(const char **)a2;
      if (*(char *)(a1 + 23) >= 0)
        v14 = (const char *)a1;
      else
        v14 = *(const char **)a1;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot open %s in %s: encrypted files are not supported", v13, v14);
    }
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_26:
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator(&v34);
LABEL_27:
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v35);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C359C58(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::Iterator::~Iterator((void **)(v2 - 88));
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)(v2 - 80));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_20C359CD8(pxrInternal__aapl__pxrReserved__::ArPackageResolver *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::ArPackageResolver::~ArPackageResolver(a1);
  operator delete(v1);
}

_QWORD *sub_20C359CF0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C537110;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20BEB4954((uint64_t)a1);
  sub_20C359E0C(a1 + 4);
  *a1 = &unk_24C51AE78;
  return a1;
}

uint64_t sub_20C359D58(uint64_t a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((tbb::internal::concurrent_vector_base_v3 *)(a1 + 40), 1, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>>>::initialize_array, 0);
  v3 = sub_20BEB4B94((unint64_t)v2);
  v4 = *(_QWORD *)(a1 + 64);
  __dmb(0xBu);
  v5 = *(_QWORD *)(v4 + 8 * v3) + (((_QWORD)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5);
  *(_BYTE *)(v5 + 24) = 1;
  return v5;
}

uint64_t sub_20C359DDC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_20C359DF0(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_20C359DF8(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20C359CF0(a1);
  operator delete(v1);
}

unint64_t *sub_20C359E0C(unint64_t *a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  _QWORD *v3;
  unint64_t v4;
  void *v5;

  v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  v3 = (_QWORD *)a1[4];
  v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>>>::destroy_array);
  sub_20BEB4AD0((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>>>::destroy_array(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    v3 = a1 + (a2 << 7) - 128;
    do
    {
      if (*(_BYTE *)(v3 + 24))
      {
        v4 = (void **)v3;
        sub_20BDE9EB0(&v4);
        *(_BYTE *)(v3 + 24) = 0;
      }
      v3 -= 128;
      --v2;
    }
    while (v2);
  }
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::vector<std::shared_ptr<pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::_Cache>>>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    bzero(a1, a3 << 7);
}

pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache::Usd_UsdzResolverCache(pxrInternal__aapl__pxrReserved__::Usd_UsdzResolverCache *this)
{
  _QWORD *v2;
  uint64_t i;

  *(_QWORD *)this = &unk_24C51AE78;
  __dmb(0xBu);
  *((_QWORD *)this + 1) = 0;
  __dmb(0xBu);
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = &unk_24C537110;
  v2 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *v2 = &unk_24C537170;
  *((_QWORD *)this + 3) = v2;
  for (i = 72; i != 96; i += 8)
    *(_QWORD *)((char *)this + i) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 8) = (char *)this + 72;
  *((_QWORD *)this + 5) = sub_20C359FDC;
  return this;
}

void sub_20C359F6C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20C359F74()
{
  _QWORD *result;

  result = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *result = &unk_24C537170;
  return result;
}

uint64_t sub_20C359F9C(uint64_t a1)
{
  void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_20C359FD0(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t sub_20C359FDC(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

_QWORD *sub_20C359FEC(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  pxrInternal__aapl__pxrReserved__::UsdZipFile::UsdZipFile(a1 + 2);
  return a1;
}

void sub_20C35A014(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

char *sub_20C35A028(char *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *(_OWORD *)(__dst + 24) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v6 = *(_QWORD *)(a3 + 24);
  *((_QWORD *)__dst + 5) = *(_QWORD *)(a3 + 16);
  *((_QWORD *)__dst + 6) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return __dst;
}

uint64_t *sub_20C35A0A4()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C35A24C((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C35A178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35A1C4(uint64_t *a1)
{
  _QWORD *v2;
  char *v3;
  uint64_t result;
  _QWORD *v5;

  v2 = operator new(8uLL);
  *v2 = &unk_24C537208;
  v5 = v2;
  pxrInternal__aapl__pxrReserved__::TfType::SetFactory(a1, (uint64_t *)&v5, v3);
  result = (uint64_t)v5;
  v5 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20C35A228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20C35A24C(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C35A2B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C35A2E0(pxrInternal__aapl__pxrReserved__::Ar_PackageResolverFactoryBase *a1)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::Ar_PackageResolverFactoryBase::~Ar_PackageResolverFactoryBase(a1);
  operator delete(v1);
}

_QWORD *sub_20C35A2F4()
{
  _QWORD *v0;

  v0 = operator new(8uLL);
  pxrInternal__aapl__pxrReserved__::ArPackageResolver::ArPackageResolver(v0);
  *v0 = &off_24C5370B8;
  return v0;
}

void sub_20C35A32C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C35A340(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;

  *(_QWORD *)a1 = off_24C537248;
  v2 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset((pxrInternal__aapl__pxrReserved__::ArAsset *)a1);
}

void sub_20C35A380(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;
  void *v3;

  *(_QWORD *)a1 = off_24C537248;
  v2 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 8);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)(a1 + 24));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  pxrInternal__aapl__pxrReserved__::ArAsset::~ArAsset((pxrInternal__aapl__pxrReserved__::ArAsset *)a1);
  operator delete(v3);
}

uint64_t sub_20C35A3C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

void sub_20C35A3CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  pxrInternal__aapl__pxrReserved__::UsdZipFile::UsdZipFile(&v16);
  sub_20BDE881C(&v16, (uint64_t *)(a1 + 24));
  v4 = *(_QWORD *)(a1 + 40);
  v5 = v16;
  v6 = v17;
  v15[0] = v16;
  v15[1] = v17;
  if (v17)
  {
    v7 = (unint64_t *)(v17 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *a2 = v4;
  v9 = operator new(0x30uLL);
  v10 = v9;
  v18[0] = v5;
  v18[1] = v6;
  if (v6)
  {
    v11 = (unint64_t *)(v6 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
    v9[1] = 0;
    v9[2] = 0;
    *v9 = off_24C5372A8;
    v19 = v5;
    v20 = v6;
    do
      v13 = __ldxr(v11);
    while (__stxr(v13 + 1, v11));
    v9[3] = v4;
    v9[4] = v5;
    v9[5] = v6;
    do
      v14 = __ldxr(v11);
    while (__stxr(v14 + 1, v11));
  }
  else
  {
    *v9 = off_24C5372A8;
    v9[1] = 0;
    v19 = v5;
    v20 = 0;
    v9[2] = 0;
    v9[3] = v4;
    v9[4] = v5;
    v9[5] = 0;
  }
  v18[2] = v4;
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&v19);
  a2[1] = v10;
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v18);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v15);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&v16);
}

void sub_20C35A4F4(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  __cxa_begin_catch(a1);
  sub_20C35A5AC((uint64_t *)va);
  __cxa_rethrow();
}

void sub_20C35A508(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  __cxa_end_catch();
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)va);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)va1);
  _Unwind_Resume(a1);
}

size_t sub_20C35A52C(uint64_t a1, void *__dst, size_t a3, uint64_t a4)
{
  size_t v4;

  if (a4 + a3 > *(_QWORD *)(a1 + 56))
    return 0;
  v4 = a3;
  memcpy(__dst, (const void *)(*(_QWORD *)(a1 + 40) + a4), a3);
  return v4;
}

uint64_t sub_20C35A578(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

void sub_20C35A5AC(_QWORD *a1)
{
  uint64_t v2[2];

  pxrInternal__aapl__pxrReserved__::UsdZipFile::UsdZipFile(v2);
  sub_20BDE881C(a1, v2);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)v2);
}

void sub_20C35A5EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C5372A8;
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);
}

void sub_20C35A61C(std::__shared_weak_count *a1)
{
  void *v2;

  a1->__vftable = (std::__shared_weak_count_vtbl *)off_24C5372A8;
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)&a1[1].__shared_owners_);
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v2);
}

void sub_20C35A650(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::UsdZipFile *v1;

  v1 = (pxrInternal__aapl__pxrReserved__::UsdZipFile *)(a1 + 32);
  sub_20C35A5AC((_QWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile(v1);
}

uint64_t sub_20C35A67C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5372E8))
    return a1 + 32;
  else
    return 0;
}

uint64_t sub_20C35A6BC(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CADF55ELL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C5372F8);
}

_QWORD *sub_20C35A734(_QWORD *a1, _QWORD *a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  sub_20C35AAB8(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C35A7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

double sub_20C35A7F4@<D0>(_QWORD *a1@<X8>)
{
  char *v2;
  _OWORD *v3;
  uint64_t i;
  double result;

  v2 = (char *)operator new(0x260uLL);
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = &unk_24C537318;
  *((_QWORD *)v2 + 1) = 0;
  bzero(v2 + 24, 0x248uLL);
  v3 = v2 + 552;
  for (i = 560; i != 608; i += 24)
    *(_QWORD *)&v2[i] = 0;
  result = 0.0;
  *((_OWORD *)v2 + 32) = 0u;
  *((_OWORD *)v2 + 33) = 0u;
  *((_OWORD *)v2 + 30) = 0u;
  *((_OWORD *)v2 + 31) = 0u;
  *((_OWORD *)v2 + 28) = 0u;
  *((_OWORD *)v2 + 29) = 0u;
  *((_OWORD *)v2 + 26) = 0u;
  *((_OWORD *)v2 + 27) = 0u;
  *((_OWORD *)v2 + 24) = 0u;
  *((_OWORD *)v2 + 25) = 0u;
  *((_OWORD *)v2 + 22) = 0u;
  *((_OWORD *)v2 + 23) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 21) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  __dmb(0xBu);
  *((_QWORD *)v2 + 3) = 0;
  __dmb(0xBu);
  *((_QWORD *)v2 + 68) = 0;
  *v3 = 0u;
  *(_OWORD *)(v2 + 568) = 0u;
  *(_OWORD *)(v2 + 584) = 0u;
  *((_QWORD *)v2 + 4) = v3;
  __dmb(0xBu);
  *((_QWORD *)v2 + 3) = 1;
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_20C35A8D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C537318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20C35A8E4(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C537318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C35A908(uint64_t a1)
{
  return sub_20C35A928((unint64_t *)(a1 + 24));
}

uint64_t sub_20C35A928(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t result;

  v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  v3 = sub_20BEB4B94(v2);
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = a1[v3 + 1];
    if (v3-- > 1)
      v8 = v5;
    else
      v8 = 1;
    do
    {
      v9 = v6 + 24 * v4;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = (_QWORD *)(v9 + 16);
      v10 = (_QWORD *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *v11 = *v10;
          sub_20C35A9F4((uint64_t)a1, (uint64_t)v10);
          v10 = (_QWORD *)*v11;
        }
        while (*v11 > 0x3FuLL);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    result = sub_20C35AA24((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_20C35A9F4(uint64_t a1, uint64_t a2)
{
  void *v3;

  sub_20C35AA70(a2 + 16);
  return tbb::internal::deallocate_via_handler_v3(a2, v3);
}

uint64_t sub_20C35AA24(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  v2 = a1 + 8 * a2;
  v5 = *(_QWORD *)(v2 + 8);
  v4 = (_QWORD *)(v2 + 8);
  result = v5;
  if (a2 < 8)
  {
    if (!a2)
      return result;
    if (a2 == 1)
      result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
  }
  else
  {
    result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *v4 = 0;
  return result;
}

void sub_20C35AA70(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 24);
  pxrInternal__aapl__pxrReserved__::UsdZipFile::~UsdZipFile((pxrInternal__aapl__pxrReserved__::UsdZipFile *)(a1 + 40));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

char *sub_20C35AAB8(_QWORD *a1, _QWORD *a2)
{
  char *result;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  a1[1] = &off_24C537358;
  result = (char *)operator new(0x18uLL);
  v5 = a2[1];
  *(_QWORD *)result = *a2;
  *((_QWORD *)result + 1) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (unsigned int *)(result + 16);
  atomic_store(0, (unsigned int *)result + 4);
  *a1 = result;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  return result;
}

uint64_t *sub_20C35AB28(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **sub_20C35AB50(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **a1, pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20BFC3FD4(a1);
}

uint64_t sub_20C35AB60()
{
  return 0;
}

uint64_t sub_20C35AB68(uint64_t a1, const std::type_info *a2)
{
  pxrInternal__aapl__pxrReserved__::Vt_HashDetail::_IssueUnimplementedHashError((pxrInternal__aapl__pxrReserved__::Vt_HashDetail *)&stru_24C5372F8, a2);
  return 0;
}

BOOL sub_20C35AB88(_QWORD **a1, _QWORD **a2)
{
  return **a1 == **a2;
}

BOOL sub_20C35ABA4(_QWORD **a1, _QWORD *a2)
{
  return **a1 == *a2;
}

uint64_t sub_20C35ABC0()
{
  return 0;
}

uint64_t sub_20C35ABCC()
{
  return std::ostream::operator<<();
}

void *sub_20C35ABE0()
{
  return &unk_24C5372F8;
}

uint64_t sub_20C35ABEC()
{
  return 0;
}

uint64_t sub_20C35ABF4()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C35AC00()
{
  return 0;
}

uint64_t sub_20C35AC08()
{
  return 0;
}

BOOL sub_20C35AC10(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CADF55ELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C35AC48(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C5372F8, a2, a3);
}

void *sub_20C35AC68()
{
  return &unk_24C5372F8;
}

uint64_t sub_20C35AC74(uint64_t a1)
{
  return *(_QWORD *)a1;
}

char *sub_20C35AC7C@<X0>(_QWORD **a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  v2 = *a1;
  a2[1] = 0;
  return sub_20C35AAB8(a2, v2);
}

pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *sub_20C35AC8C(pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **a1)
{
  unsigned int v2;
  char *v3;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v11;

  v2 = atomic_load((unsigned int *)*a1 + 4);
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x18uLL);
    v4 = *a1;
    v5 = *((_QWORD *)*a1 + 1);
    *(_QWORD *)v3 = *(_QWORD *)*a1;
    *((_QWORD *)v3 + 1) = v5;
    if (v5)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v4 = *a1;
    }
    v8 = (unsigned int *)(v3 + 16);
    atomic_store(0, (unsigned int *)v3 + 4);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v11 = v4;
    *a1 = (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v3;
    sub_20BFC3FD4(&v11);
  }
  return *a1;
}

uint64_t sub_20C35AD20(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20C35AD84(a1, 1, a3, (uint64_t)(a3 + 24), a2, 1, (uint64_t (*)(uint64_t, _BYTE *, uint64_t))sub_20C35B0E0, 0);
}

uint64_t sub_20C35AD84(uint64_t *a1, int a2, _BYTE *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, _BYTE *, uint64_t), _QWORD *a8)
{
  _BYTE *v13;
  char v14;
  unint64_t v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v36;
  unint64_t v37;
  tbb::spin_rw_mutex_v3 *v39;
  char v40;
  uint64_t v41;

  if ((char)a3[23] >= 0)
    v13 = a3;
  else
    v13 = *(_BYTE **)a3;
  v14 = *v13;
  if (*v13)
  {
    v15 = 0;
    v16 = v13 + 1;
    do
    {
      v15 = (0x9E3779B97F4A7C15 * v15) ^ v14;
      v17 = *v16++;
      v14 = v17;
    }
    while (v17);
  }
  else
  {
    v15 = 0;
  }
  v37 = 0;
  v18 = *a1;
  __dmb(0xBu);
  v36 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_20C35B278((uint64_t)&v39, (uint64_t)a1, v18 & v15, 0);
    v19 = v41 + 16;
    do
      v19 = *(_QWORD *)v19;
    while (v19 >= 0x40 && !sub_20BF772F0(a3, (unsigned __int8 *)(v19 + 16)));
    if (a2)
      break;
    if (v19)
    {
      v20 = 1;
LABEL_18:
      v21 = (uint64_t)a8;
      if (!a5)
        goto LABEL_59;
      goto LABEL_19;
    }
    v30 = *a1;
    __dmb(0xBu);
    if (v18 == v30 || !sub_20BECF7E4((uint64_t)a1, v15, v18, v30))
    {
      sub_20BEBF29C(&v39);
      return 0;
    }
LABEL_42:
    sub_20BEBF29C(&v39);
    v18 = v30;
  }
  if (v19)
  {
LABEL_15:
    v20 = 0;
    goto LABEL_18;
  }
  if (!a8)
    a8 = (_QWORD *)a7(v36, a3, a4);
  if (!v40)
  {
    v40 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade(v39) & 1) == 0)
    {
      v19 = v41 + 16;
      while (1)
      {
        v19 = *(_QWORD *)v19;
        if (v19 < 0x40)
          break;
        if (sub_20BF772F0(a3, (unsigned __int8 *)(v19 + 16)))
        {
          if (!v40)
            goto LABEL_15;
          v31 = (unint64_t *)v39;
          do
            v32 = __ldaxr(v31);
          while (__stlxr(v32 + 3, v31));
          v20 = 0;
          v40 = 0;
          goto LABEL_18;
        }
      }
    }
  }
  v30 = *a1;
  __dmb(0xBu);
  if (v18 != v30)
  {
    if (!sub_20BECF7E4((uint64_t)a1, v15, v18, v30))
      goto LABEL_44;
    goto LABEL_42;
  }
  v30 = v18;
LABEL_44:
  v37 = sub_20BECF26C((uint64_t)a1, v41, a8, v30);
  v21 = 0;
  v20 = 1;
  v19 = (unint64_t)a8;
  if (!a5)
  {
LABEL_59:
    sub_20BEBF29C(&v39);
    goto LABEL_54;
  }
LABEL_19:
  if ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v19 + 8), a6) & 1) == 0)
  {
    sched_yield();
    v22 = 2;
    while ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v19 + 8), a6) & 1) == 0)
    {
      sched_yield();
      v23 = v22 < 16;
      v22 *= 2;
      if (!v23)
      {
        v24 = (unint64_t *)v39;
        v39 = 0;
        if (v40)
        {
          while (1)
          {
            v25 = *v24;
            v26 = *v24 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v27 = __ldaxr(v24);
                if (v27 != v25)
                  break;
                if (!__stlxr(v26, v24))
                  goto LABEL_33;
              }
              __clrex();
              do
                v28 = __ldxr(v24);
              while (__stxr(v28, v24));
            }
            while (v28 == v25);
            sched_yield();
          }
        }
        do
          v29 = __ldaxr(v24);
        while (__stlxr(v29 - 4, v24));
LABEL_33:
        sched_yield();
        v30 = *a1;
        __dmb(0xBu);
        a8 = (_QWORD *)v21;
        goto LABEL_42;
      }
    }
  }
  sub_20BEBF29C(&v39);
  *(_QWORD *)(a5 + 16) = v19;
  *(_QWORD *)(a5 + 24) = v15;
LABEL_54:
  if (v37)
    sub_20C35B0E4(a1, v37, v36, 0);
  if (v21)
    sub_20C35A9F4((uint64_t)a1, v21);
  return v20;
}

void sub_20C35B0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20C35B0E4(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;

  if (a2 < 8)
  {
    v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    v10 = v9;
    if ((a4 & 1) != 0)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      v14 = -6096;
      do
      {
        v15 = &v9[v14];
        *((_QWORD *)v15 + 763) = 0;
        *((_QWORD *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    v16 = 0;
    v17 = (int64x2_t)xmmword_20CA59F60;
    v18 = v10 - 48;
    v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    v22 = vdupq_n_s64(2uLL);
    v13 = 255;
    do
    {
      v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_20CA59F70);
      v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if ((vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0] & 1) != 0)
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1] & 1) != 0)
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      v16 += 2;
      v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    v7 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    v8 = v7;
    if ((a4 & 1) != 0)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      v11 = 1 << a2;
      v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_20C35B268(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20C35B278(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  tbb::spin_rw_mutex_v3 *v11;
  uint64_t v12;
  tbb::spin_rw_mutex_v3 *v13;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BEB4B94(a3);
  v9 = *(_QWORD *)(a2 + 8 * v8 + 8) + 24 * (a3 - ((1 << v8) & 0xFFFFFFFFFFFFFFFELL));
  *(_QWORD *)(a1 + 16) = v9;
  v10 = *(_QWORD *)(v9 + 16);
  __dmb(0xBu);
  if (v10 == 3
    && (v11 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v11)))
  {
    *(_QWORD *)a1 = v11;
    v12 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v12 + 16) == 3)
      sub_20C35B368(a2, v12, a3);
  }
  else
  {
    v13 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v13;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v13);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v13);
  }
  return a1;
}

void sub_20C35B354(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF29C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C35B368(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  char v15;
  unint64_t v16;
  unsigned __int8 *v17;
  int v18;
  tbb::spin_rw_mutex_v3 *v20;
  char v21;
  uint64_t v22;

  __dmb(0xBu);
  *(_QWORD *)(a2 + 16) = 0;
  if (a3)
  {
    v5 = HIDWORD(a3);
    if (!HIDWORD(a3))
      v5 = a3;
    v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    v7 = v5 >= 4;
    if (v5 >= 4)
      LODWORD(v5) = v5 >> 2;
    v8 = (v5 >> 1) & 1;
    if (v7)
      v6 += 2;
    v9 = v8 + v6;
  }
  else
  {
    v9 = -1;
  }
  v10 = ~(-1 << v9);
  sub_20C35B278(&v20, a1, v10 & a3, 0);
  v11 = (unint64_t *)(v22 + 16);
  v12 = *(_QWORD *)(v22 + 16);
  __dmb(0xBu);
  if (v12 >= 0x40)
  {
    v13 = (2 * v10) | 1;
    while (1)
    {
      v14 = *(_BYTE **)(v12 + 16);
      if (*(char *)(v12 + 39) >= 0)
        v14 = (_BYTE *)(v12 + 16);
      v15 = *v14;
      if (*v14)
      {
        v16 = 0;
        v17 = v14 + 1;
        do
        {
          v16 = (0x9E3779B97F4A7C15 * v16) ^ v15;
          v18 = *v17++;
          v15 = v18;
        }
        while (v18);
      }
      else
      {
        v16 = 0;
      }
      if ((v16 & v13) != a3)
        break;
      if (v21 || (v21 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v20) & 1) != 0))
      {
        *v11 = *(_QWORD *)v12;
        *(_QWORD *)v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v12;
LABEL_31:
        v12 = *v11;
        if (*v11 <= 0x3F)
          return sub_20BEBF29C(&v20);
      }
      else
      {
        v11 = (unint64_t *)(v22 + 16);
        v12 = *(_QWORD *)(v22 + 16);
        __dmb(0xBu);
        if (v12 < 0x40)
          return sub_20BEBF29C(&v20);
      }
    }
    v11 = (unint64_t *)v12;
    goto LABEL_31;
  }
  return sub_20BEBF29C(&v20);
}

void sub_20C35B524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35B538(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  uint64_t v9[2];

  v6 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x48);
  v9[1] = a1;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_QWORD *)(v6 + 64) = 0;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  sub_20C35A028((char *)(v6 + 16), a2, a3);
  v9[0] = 0;
  sub_20C35B5C0(v9, v7);
  return v6;
}

void sub_20C35B5AC(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35B5C0(&a9, a2);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C35B5C0(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

void sub_20C35B5F4(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C35B608(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C35B620(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C537470))
    return a1 + 24;
  else
    return 0;
}

void pxrInternal__aapl__pxrReserved__::Usd_MergeTimeSamples(void **a1, double **a2, void **a3)
{
  void **p_p;
  double *v7;
  double *v8;
  double *v9;
  double *v10;
  double *v11;
  double v12;
  _BOOL4 v13;
  size_t v14;
  double *v15;
  double *v16;
  void **v17;
  void *v18;
  void *v19;
  void *__p;
  void *v21;
  uint64_t v22;

  __p = 0;
  v21 = 0;
  v22 = 0;
  if (a3)
    p_p = a3;
  else
    p_p = &__p;
  sub_20BDDEC88((uint64_t)p_p, a2[1] - *a2 + (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3));
  v7 = (double *)*a1;
  v8 = (double *)a1[1];
  v9 = *a2;
  v10 = a2[1];
  v11 = (double *)*p_p;
  while (v7 != v8)
  {
    if (v9 == v10)
    {
      v14 = (char *)v8 - (char *)v7;
      v15 = v11;
      v9 = v7;
      goto LABEL_13;
    }
    v12 = *v9;
    v13 = *v9 >= *v7;
    if (*v9 >= *v7)
      v12 = *v7;
    v9 += *v9 <= *v7;
    v7 += v13;
    *v11++ = v12;
  }
  v14 = (char *)v10 - (char *)v9;
  if (v10 == v9)
    goto LABEL_14;
  v15 = v11;
LABEL_13:
  memmove(v15, v9, v14);
LABEL_14:
  sub_20BDDEC88((uint64_t)p_p, ((char *)v11 + v14 - (_BYTE *)*p_p) >> 3);
  v16 = (double *)*a1;
  *a1 = *p_p;
  *p_p = v16;
  v17 = &__p;
  if (a3)
    v17 = a3;
  v18 = a1[1];
  a1[1] = v17[1];
  v17[1] = v18;
  v19 = a1[2];
  a1[2] = v17[2];
  v17[2] = v19;
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_20C35B79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Usd_ApplyLayerOffsetToValue(const void *****this, pxrInternal__aapl__pxrReserved__::VtValue *a2, const pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a3)
{
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  double *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  double *v15;
  uint64_t v16;
  char *v17;
  double *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  double *v22;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  __int128 v29;
  __int128 v30;
  double *v31;
  _QWORD **v32;

  if (sub_20C1D0F74((pxrInternal__aapl__pxrReserved__::VtValue *)this))
  {
    v5 = sub_20C1D1088(this);
    v6 = *v5;
    *v5 = 0;
    *(_QWORD *)&v29 = v6;
    *(_QWORD *)&v29 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)a2, (double *)&v29);
    v7 = sub_20C1D1088(this);
    *v7 = v29;
  }
  else if (sub_20C1D1114((pxrInternal__aapl__pxrReserved__::VtValue *)this))
  {
    v31 = 0;
    v29 = 0u;
    v30 = 0u;
    v8 = sub_20C1D1258(this);
    v9 = *(double **)(v8 + 32);
    *(_QWORD *)(v8 + 32) = 0;
    v31 = v9;
    v10 = *(_OWORD *)v8;
    *(_OWORD *)v8 = v29;
    v11 = *(_QWORD *)(v8 + 16);
    v12 = *(_QWORD *)(v8 + 24);
    *(_OWORD *)(v8 + 16) = __PAIR128__(*((unint64_t *)&v30 + 1), 0);
    v29 = v10;
    *(_QWORD *)&v30 = v11;
    *((_QWORD *)&v30 + 1) = v12;
    sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v29, v13, v14);
    v15 = v31;
    sub_20C00783C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)&v29, v16, v17);
    v18 = &v31[v29];
    while (v15 != v18)
    {
      *v15 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*((double *)a2, v15);
      ++v15;
    }
    v21 = sub_20C1D1258(this);
    v22 = *(double **)(v21 + 32);
    v23 = v30;
    *(_QWORD *)(v21 + 32) = v31;
    v31 = v22;
    v24 = *(_OWORD *)v21;
    *(_OWORD *)v21 = v29;
    v25 = *(_QWORD *)(v21 + 16);
    v26 = *(_QWORD *)(v21 + 24);
    *(_OWORD *)(v21 + 16) = __PAIR128__(*((unint64_t *)&v30 + 1), v23);
    v29 = v24;
    *(_QWORD *)&v30 = v25;
    *((_QWORD *)&v30 + 1) = v26;
    sub_20BF5618C((uint64_t)&v29);
  }
  else if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)this))
  {
    v32 = 0;
    v19 = (uint64_t *)sub_20BF4D190(this);
    pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v19, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v32);
    *(_QWORD *)&v29 = a2;
    sub_20C35B9F8(&v32, &v29);
    v20 = (uint64_t *)sub_20BF4D190(this);
    pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v20, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v32);
    sub_20BF49F14(&v32, 0);
  }
  else if (sub_20BFEB19C((pxrInternal__aapl__pxrReserved__::VtValue *)this))
  {
    *(_QWORD *)&v30 = 0;
    v29 = (unint64_t)&v29 + 8;
    v27 = (uint64_t *)sub_20C0E7B94((uint64_t *)this);
    sub_20BF07C64(v27, (uint64_t)&v29);
    sub_20C35BB00((uint64_t)&v29, (double *)a2);
    v28 = (uint64_t *)sub_20C0E7B94((uint64_t *)this);
    sub_20BF07C64(v28, (uint64_t)&v29);
    sub_20BFED2B4((uint64_t)&v29, *((_QWORD **)&v29 + 1));
  }
}

void sub_20C35B9B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20BFED2B4((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C35B9F8(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, pxrInternal__aapl__pxrReserved__::VtValue **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  const void *****v13;
  const pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  char *v18;
  BOOL v19;
  char v20;
  _QWORD **v21;
  uint64_t v22;
  uint64_t v23;

  v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(a1);
  v6 = v5;
  v22 = v4;
  v23 = v5;
  result = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtDictionary::end(a1);
  v9 = result;
  v10 = v8;
  if (v8)
    v11 = v4 == (_QWORD)result;
  else
    v11 = 1;
  v12 = v11;
  if (v6 != v8 || (v12 & 1) == 0)
  {
    do
    {
      v13 = (const void *****)(v4 + 56);
      if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)v13))
      {
        v21 = 0;
        v15 = (uint64_t *)sub_20BF4D190(v13);
        pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v15, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v21);
        sub_20C35B9F8(&v21, a2);
        v16 = (uint64_t *)sub_20BF4D190(v13);
        pxrInternal__aapl__pxrReserved__::VtDictionary::swap(v16, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v21);
        sub_20BF49F14(&v21, 0);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::Usd_ApplyLayerOffsetToValue(v13, *a2, v14);
      }
      result = sub_20BF4D354(&v22, v17, v18);
      v4 = v22;
      if (v10)
        v19 = v22 == (_QWORD)v9;
      else
        v19 = 1;
      v20 = v19;
    }
    while (v23 != v10 || (v20 & 1) == 0);
  }
  return result;
}

void sub_20C35BAE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF49F14((_QWORD ***)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C35BB00(uint64_t a1, double *a2)
{
  uint64_t **v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v8;
  const pxrInternal__aapl__pxrReserved__::SdfLayerOffset *v9;
  uint64_t *v10;
  uint64_t *v11;
  BOOL v12;
  double v13;
  uint64_t *v14;
  _QWORD v15[2];
  double *v16;

  v3 = &v14;
  v4 = *(_QWORD **)(a1 + 8);
  v14 = *(uint64_t **)a1;
  v15[0] = v4;
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v15[1] = v5;
  if (v5)
    v3 = (uint64_t **)(v4 + 2);
  *v3 = v15;
  *(_QWORD *)a1 = a1 + 8;
  v6 = v14;
  if (v14 != v15)
  {
    do
    {
      v13 = pxrInternal__aapl__pxrReserved__::SdfLayerOffset::operator*(a2, *((double *)v6 + 4));
      v16 = &v13;
      v8 = sub_20C0E7D0C((uint64_t **)a1, &v13, (uint64_t)&unk_20CAC184C, (uint64_t **)&v16) + 5;
      sub_20BF4A9BC(v8, v6 + 5);
      pxrInternal__aapl__pxrReserved__::Usd_ApplyLayerOffsetToValue((pxrInternal__aapl__pxrReserved__ *)v8, (pxrInternal__aapl__pxrReserved__::VtValue *)a2, v9);
      v10 = (uint64_t *)v6[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (uint64_t *)v6[2];
          v12 = *v11 == (_QWORD)v6;
          v6 = v11;
        }
        while (!v12);
      }
      v6 = v11;
    }
    while (v11 != v15);
    v4 = (_QWORD *)v15[0];
  }
  sub_20BFED2B4((uint64_t)&v14, v4);
}

void sub_20C35BC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20BFED2B4((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  *(_QWORD *)this = &unk_24C537498;
  v1 = *((_QWORD *)this + 3);
  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::~UsdSchemaBase(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  return 1;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254988628);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254988628))
  {
    __cxa_guard_release(&qword_254988628);
  }
  return &qword_254988620;
}

void sub_20C35BCE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988628);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_254988638);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)__cxa_guard_acquire(&qword_254988638);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetStaticTfType(v3);
      byte_254988630 = sub_20C35BD7C((char *)&qword_254988620, v4, v5);
      __cxa_guard_release(&qword_254988638);
    }
  }
  return byte_254988630;
}

void sub_20C35BD64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988638);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35BD7C(char *a1, const std::type_info *a2, char *a3)
{
  uint64_t v4;
  char *v5;

  return pxrInternal__aapl__pxrReserved__::TfType::IsA(a1, v4, v5);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetStaticTfType(this);
  return &qword_254988620;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **v5;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_254988658);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254988658))
  {
    qword_254988640 = 0;
    *(_QWORD *)algn_254988648 = 0;
    qword_254988650 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254988640, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988658);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254988678);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254988678))
  {
    v5 = (uint64_t **)sub_20C35BEDC();
    qword_254988660 = 0;
    *(_QWORD *)algn_254988668 = 0;
    qword_254988670 = 0;
    sub_20BFE538C(&qword_254988660, *v5, v5[1], v5[1] - *v5);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254988660, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988678);
  }
  if (v1)
    return &qword_254988660;
  else
    return &qword_254988640;
}

void sub_20C35BEC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988678);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35BEDC()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473CF58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473CF58))
  {
    v2 = operator new(0x18uLL);
    *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
    qword_25473CF50 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473CF58);
  }
  return qword_25473CF50;
}

void sub_20C35BF40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473CF58);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetMultipleApplyInstanceNames(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int **v6;
  unsigned int **i;
  _QWORD *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  char *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unsigned int **v22;
  unsigned int **v23;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(this, a2, &v22);
  if (v22 != v23)
  {
    pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetAPISchemaTypeName(a2, (unsigned int **)&v21);
    v6 = v22;
    for (i = v23; v6 != i; ++v6)
    {
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetTypeNameAndInstance(v6, (unsigned int **)&v19);
      if ((v19 & 0xFFFFFFFFFFFFFFF8) == (v21 & 0xFFFFFFFFFFFFFFF8))
      {
        v8 = *(_QWORD **)(a3 + 8);
        if ((unint64_t)v8 >= *(_QWORD *)(a3 + 16))
        {
          v12 = sub_20BFCA068((char **)a3, &v20);
        }
        else
        {
          v9 = v20;
          *v8 = v20;
          if ((v9 & 7) != 0)
          {
            v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
            do
              v11 = __ldxr(v10);
            while (__stxr(v11 + 2, v10));
            if ((v11 & 1) == 0)
              *v8 &= 0xFFFFFFFFFFFFFFF8;
          }
          v12 = (char *)(v8 + 1);
        }
        *(_QWORD *)(a3 + 8) = v12;
      }
      if ((v20 & 7) != 0)
      {
        v13 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stlxr(v14 - 2, v13));
      }
      if ((v19 & 7) != 0)
      {
        v15 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stlxr(v16 - 2, v15));
      }
    }
    if ((v21 & 7) != 0)
    {
      v17 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  v19 = (unint64_t)&v22;
  sub_20BEEB2B8((void ***)&v19);
}

void sub_20C35C0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void ***a9, uint64_t a10, uint64_t a11, void **a12)
{
  a9 = &a12;
  sub_20BEEB2B8((void ***)&a9);
  sub_20BEEB2B8(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_IsCompatible(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *this)
{
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::TfType *v3;
  char HasAPI;
  unsigned int *v5;
  unsigned int v6;
  const pxrInternal__aapl__pxrReserved__::TfType *v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;

  result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_IsCompatible(this);
  if ((_DWORD)result)
  {
    if ((*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *))(*(_QWORD *)this + 16))(this) != 5
      && (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *))(*(_QWORD *)this + 16))(this) != 6)
    {
      return 1;
    }
    if ((*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *))(*(_QWORD *)this + 16))(this) == 6)
    {
      if (!*((_QWORD *)this + 3))
        return 0;
      sub_20C35C4F8((uint64_t)&v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
      v3 = (const pxrInternal__aapl__pxrReserved__::TfType *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *))(*(_QWORD *)this + 40))(this);
      HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10, v3, (pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)((char *)this + 24));
      if ((v14 & 7) != 0)
      {
        v5 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
    }
    else
    {
      sub_20C35C4F8((uint64_t)&v10, (uint64_t *)this + 1, (_DWORD *)this + 4);
      v7 = (const pxrInternal__aapl__pxrReserved__::TfType *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *))(*(_QWORD *)this + 40))(this);
      HasAPI = pxrInternal__aapl__pxrReserved__::UsdPrim::HasAPI((pxrInternal__aapl__pxrReserved__::UsdPrim *)&v10, v7);
      if ((v14 & 7) != 0)
      {
        v8 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
    sub_20BFD265C(&v12);
    if (v11)
      sub_20C35C614(v11);
    return (HasAPI & 1) != 0;
  }
  return result;
}

void sub_20C35C2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35C2E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35C2E0(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

uint64_t sub_20C35C340()
{
  return 1;
}

uint64_t *sub_20C35C348()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C35C468((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C35C41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C35C468(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C35C4D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C35C4F8(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[4];
  char v12;

  *(_DWORD *)a1 = 1;
  v5 = *a2;
  *(_QWORD *)(a1 + 8) = *a2;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (_QWORD *)(a1 + 16);
  sub_20BFD6E54((_DWORD *)(a1 + 16), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a3 + 1);
  *(_QWORD *)(a1 + 24) = 0;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 && (*(_BYTE *)(v9 + 57) & 8) == 0 && *(_QWORD *)(v9 + 16) == *v8)
  {
    v11[0] = "usd/object.h";
    v11[1] = "UsdObject";
    v11[2] = 704;
    v11[3] = "pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(const Usd_PrimDataHandle &, const SdfPath &)";
    v12 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v11, "!_prim || _prim->GetPath() != _proxyPrimPath", 0);
  }
  return a1;
}

void sub_20C35C5D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;

  v4 = *(_QWORD *)(v1 + 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20BFD1A18(v2);
  v7 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v1 + 8);
  if (v7)
    sub_20C35C614(v7);
  _Unwind_Resume(a1);
}

void sub_20C35C614(pxrInternal__aapl__pxrReserved__::Usd_PrimData *a1)
{
  unint64_t *v1;
  unint64_t v2;
  void *v3;

  v1 = (unint64_t *)((char *)a1 + 48);
  do
    v2 = __ldxr(v1);
  while (__stlxr(v2 - 1, v1));
  if (a1)
  {
    if (v2 == 1)
    {
      pxrInternal__aapl__pxrReserved__::Usd_PrimData::~Usd_PrimData(a1);
      operator delete(v3);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B92088);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetIbEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B92010);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayIbEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<BOOL>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<BOOL>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayIbEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<unsigned char>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B920ACLL);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B92034);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayIhEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<unsigned char>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<unsigned char>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayIhEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<int>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B920B8);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetIiEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B92040);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayIiEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<int>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<int>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<int>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<int>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayIiEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<unsigned int>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B920C4);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B9204CLL);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayIjEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<unsigned int>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<unsigned int>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayIjEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<long long>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B920D0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B92058);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayIxEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<long long>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<long long>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayIxEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<unsigned long long>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B920DCLL);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B92064);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<unsigned long long>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<unsigned long long>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::pxr_half::half>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B92070);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91FF8);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::pxr_half::half>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::pxr_half::half>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<float>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B920A0);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetIfEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B92028);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayIfEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<float>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<float>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetIfEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<float>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<float>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayIfEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<double>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B92094);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetIdEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B9201CLL);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayIdEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<double>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<double>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<double>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<double>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayIdEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91DF4);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91F08);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B90BACLL);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B90CCCLL);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<std::string>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B9207CLL);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B92004);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<std::string>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<std::string>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91ED8);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7TfTokenEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91FECLL);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_7TfTokenEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::TfToken>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::TfToken>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7TfTokenEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayINS_7TfTokenEEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E00);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_12SdfAssetPathEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91F14);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_12SdfAssetPathEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_12SdfAssetPathEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E0CLL);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91F20);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E18);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_17SdfPathExpressionEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91F2CLL);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B90BDCLL);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B90CF0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91DD0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91EE4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91DDCLL);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91EF0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91DE8);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_10GfMatrix4dEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91EFCLL);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_10GfMatrix4dEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_10GfMatrix4dEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E3CLL);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91F50);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_7GfQuathEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfQuath>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfQuath>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E30);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7GfQuatfEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91F44);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_7GfQuatfEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfQuatf>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfQuatf>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayINS_7GfQuatfEEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfQuatd>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E24);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91F38);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfQuatd>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfQuatd>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E6CLL);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7GfVec2iEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91F80);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_7GfVec2iEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec2i>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2i>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayINS_7GfVec2iEEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E60);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91F74);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec2h>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2h>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E54);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7GfVec2fEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91F68);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_7GfVec2fEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec2f>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2f>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7GfVec2fEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayINS_7GfVec2fEEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec2d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E48);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91F5CLL);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_7GfVec2dEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec2d>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec2d>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayINS_7GfVec2dEEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E9CLL);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91FB0);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_7GfVec3iEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3i>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3i>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayINS_7GfVec3iEEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E90);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91FA4);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_7GfVec3hEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3h>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3h>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayINS_7GfVec3hEEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E84);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7GfVec3fEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91F98);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_7GfVec3fEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3f>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3f>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7GfVec3fEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayINS_7GfVec3fEEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91E78);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7GfVec3dEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91F8CLL);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_7GfVec3dEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec3d>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec3d>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7GfVec3dEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayINS_7GfVec3dEEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91ECCLL);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91FE0);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_7GfVec4iEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec4i>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4i>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayINS_7GfVec4iEEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91EC0);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91FD4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec4h>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4h>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec4f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91EB4);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7GfVec4fEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91FC8);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_7GfVec4fEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec4f>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4f>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7GfVec4fEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayINS_7GfVec4fEEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::GfVec4d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91EA8);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2 || (*(_BYTE *)(v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  JUMPOUT(0x212B91FBCLL);
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_GetINS_7VtArrayINS_7GfVec4dEEEEEbPT_NS_11UsdTimeCodeE(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::GfVec4d>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::GfVec4d>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12UsdAttribute4_SetINS_7VtArrayINS_7GfVec4dEEEEEbRKT_NS_11UsdTimeCodeE(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue<pxrInternal__aapl__pxrReserved__::SdfValueBlock>(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetVariability(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetVariability(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v3, this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::SetVariability(uint64_t a1, int a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;

  v7 = a2;
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C361DB4(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 464), (uint64_t (**)(_QWORD, uint64_t))&v7, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v5 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  unsigned int *v3;
  unsigned int v4;
  unint64_t ***Instance;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v10 = 0;
  sub_20C361F00((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 448), (uint64_t)&v9, &v10);
  if ((v10 & 7) != 0)
  {
    v3 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  Instance = (unint64_t ***)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = (unint64_t ***)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Instance, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v9);
  if ((v9 & 7) != 0)
  {
    v7 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return result;
}

unsigned int **pxrInternal__aapl__pxrReserved__::UsdAttribute::GetRoleName@<X0>(pxrInternal__aapl__pxrReserved__::UsdAttribute *this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int **result;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t TypeName;

  TypeName = pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTypeName(this);
  result = (unsigned int **)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetRole((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
  v4 = *result;
  *a2 = *result;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a2 = v5;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::SetTypeName(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 448);
  pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a2, (unsigned int **)&v11);
  v12 = 0;
  result = sub_20C361C9C((uint64_t)this, v5, (uint64_t (**)(_QWORD, uint64_t))&v11, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v12);
  if ((v12 & 7) != 0)
  {
    v7 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  if ((v11 & 7) != 0)
  {
    v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Block(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  _BYTE v4[8];
  char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear(this, a2);
  v5 = (char *)&off_24C52AE00 + 3;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::Set((pxrInternal__aapl__pxrReserved__ **)this, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v4, NAN);
  return sub_20BF4C2D8((uint64_t)v4);
}

void sub_20C35F9E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Clear(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  result = pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearAtTime((uint64_t)this, a2, NAN);
  if ((_DWORD)result)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4)
      v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 432));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Set(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetValue(*(_QWORD *)v6, (pxrInternal__aapl__pxrReserved__ *)a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamples(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4 || (*(_BYTE *)(v4 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v5 = *(_QWORD *)v4;
  v7 = 0xFFF0000000000000;
  v8 = 0;
  v9 = 0x7FF0000000000000;
  v10 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInInterval(v5, (_DWORD *)a1, (uint64_t)&v7, (uint64_t)a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetNumTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetNumTimeSamples(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v3, this);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::GetBracketingTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, double a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, double *a4, BOOL *a5)
{
  uint64_t v10;

  v10 = *((_QWORD *)this + 1);
  if (!v10 || (*(_BYTE *)(v10 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a3);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetBracketingTimeSamples(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v10, this, a2, 0, (double *)a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetTimeSamplesInInterval(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInInterval(*(_QWORD *)v6, (_DWORD *)a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetUnionedTimeSamples(pxrInternal__aapl__pxrReserved__::UsdObject **a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = 0xFFF0000000000000;
  v4 = 0;
  v5 = 0x7FF0000000000000;
  v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdAttribute::GetUnionedTimeSamplesInInterval(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::GetUnionedTimeSamplesInInterval(pxrInternal__aapl__pxrReserved__::UsdObject **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v3;
  pxrInternal__aapl__pxrReserved__::UsdObject *v4;
  uint64_t v7;
  uint64_t v8;
  int TimeSamplesInInterval;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;

  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
    return 1;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  __p = 0;
  v18 = 0;
  LODWORD(v7) = 1;
  v19 = 0;
  do
  {
    if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, a2) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v3, a2, &v15);
      v8 = sub_20C348E08(&v15);
      TimeSamplesInInterval = pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInInterval(v8, v3, (uint64_t)a2, (uint64_t)&v20);
      v10 = v16;
      if (v16)
      {
        v11 = (unsigned int *)(v16 + 8);
        do
        {
          v12 = __ldxr(v11);
          v13 = v12 - 1;
        }
        while (__stlxr(v13, v11));
        if (!v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
      pxrInternal__aapl__pxrReserved__::Usd_MergeTimeSamples((void **)a3, (double **)&v20, &__p);
      v7 = TimeSamplesInInterval & v7;
    }
    else
    {
      v7 = 0;
    }
    v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v3 + 32);
  }
  while (v3 != v4);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
  return v7;
}

void sub_20C35FD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValueOpinion(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _DWORD v20[2];
  unsigned __int8 v21;

  sub_20C361C1C((uint64_t)&v16);
  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(*(_QWORD *)v3, this, &v16, 0);
  v4 = v20[1];
  v5 = v21;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v20);
  sub_20BFD265C(&v19);
  v6 = v18;
  if (v18)
  {
    v7 = (unsigned int *)(v18 + 8);
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = v17;
  if (v17)
  {
    v11 = (unsigned int *)(v17 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return (v4 - 2) < 3 || v5 != 0;
}

void sub_20C35FED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35FEE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C35FEE4(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_20BFD265C((_DWORD *)(a1 + 64));
  v2 = *(unsigned int **)(a1 + 24);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = *(unsigned int **)(a1 + 8);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD v18[3];

  sub_20C361C1C((uint64_t)&v14);
  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(*(_QWORD *)v3, this, &v14, 0);
  v4 = v18[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
  sub_20BFD265C(&v17);
  v5 = v16;
  if (v16)
  {
    v6 = (unsigned int *)(v16 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unsigned int *)(v15 + 8);
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return (v4 - 2) < 3;
}

void sub_20C36004C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35FEE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::HasValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD v18[3];

  sub_20C361C1C((uint64_t)&v14);
  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(*(_QWORD *)v3, this, &v14, 0);
  v4 = v18[1];
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v18);
  sub_20BFD265C(&v17);
  v5 = v16;
  if (v16)
  {
    v6 = (unsigned int *)(v16 + 8);
    do
    {
      v7 = __ldxr(v6);
      v8 = v7 - 1;
    }
    while (__stlxr(v8, v6));
    if (!v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unsigned int *)(v15 + 8);
    do
    {
      v11 = __ldxr(v10);
      v12 = v11 - 1;
    }
    while (__stlxr(v12, v10));
    if (!v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  return v4 != 0;
}

void sub_20C360138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C35FEE4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasFallbackValue(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3;
  uint64_t result;
  unsigned int *v5;
  unsigned int v6;
  _QWORD v7[2];

  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetSchemaAttribute(this, v7);
  result = pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property::IsAttribute((pxrInternal__aapl__pxrReserved__::UsdPrimDefinition::Property *)v7);
  if ((_DWORD)result)
    result = sub_20C3601F4((uint64_t)v7, 0);
  if ((v7[0] & 7) != 0)
  {
    v5 = (unsigned int *)(v7[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  return result;
}

uint64_t sub_20C3601F4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer **v3;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v3 = *(pxrInternal__aapl__pxrReserved__::SdfLayer ***)(a1 + 8);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(*v3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 1), (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 88), a2);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::ValueMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_ValueMightBeTimeVarying(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v3, this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Get(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValue(*(_QWORD *)v6, a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::GetResolveInfo(uint64_t a1@<X0>, _DWORD *a2@<X8>, void *a3@<D0>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t v6;
  void *v7;

  v7 = a3;
  sub_20C361C1C((uint64_t)a2);
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), v5);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(*(_QWORD *)v6, (_DWORD *)a1, a2, &v7);
}

void sub_20C360344(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C35FEE4(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::GetResolveInfo(pxrInternal__aapl__pxrReserved__::UsdAttribute *this@<X0>, _DWORD *a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  uint64_t v5;

  sub_20C361C1C((uint64_t)a2);
  v5 = *((_QWORD *)this + 1);
  if (!v5 || (*(_BYTE *)(v5 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v4);
  pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(*(_QWORD *)v5, this, a2, 0);
}

void sub_20C3603B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C35FEE4(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::Set(pxrInternal__aapl__pxrReserved__ **a1, char *a2, double a3)
{
  uint64_t v5;
  void *__p[2];
  char v8;

  sub_20BDDC0E4(__p, a2);
  v5 = pxrInternal__aapl__pxrReserved__::UsdAttribute::_Set<std::string>(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)__p, a3);
  if (v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_20C360428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearDefault(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearAtTime((uint64_t)this, a2, NAN);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearAtTime(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  if (!v5 || (*(_BYTE *)(v5 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_ClearValue(*(uint64_t **)v5, a1, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::GetColorSpace@<W0>(pxrInternal__aapl__pxrReserved__::UsdAttribute *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  *a2 = 0;
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C361F00((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 40), (uint64_t)a2, &v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

void sub_20C360520(_Unwind_Exception *a1)
{
  _QWORD *v1;
  unsigned int *v2;
  unsigned int v3;

  if ((*v1 & 7) != 0)
  {
    v2 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::SetColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t result;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v8 = 0;
  result = sub_20C361C9C((uint64_t)this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 40), (uint64_t (**)(_QWORD, uint64_t))a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v8);
  if ((v8 & 7) != 0)
  {
    v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 40));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearColorSpace(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::ClearMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 40));
}

void pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2@<X1>, char a3@<W2>, int *a4@<X3>, pxrInternal__aapl__pxrReserved__::SdfSpec *a5@<X8>)
{
  uint64_t *v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::UsdStage *v12;
  void *v13;
  unint64_t *Instance;
  unint64_t v15;
  unint64_t v16;
  pxrInternal__aapl__pxrReserved__::TfToken *v17;
  uint64_t *EmptyString;
  void *v19;
  unsigned int *v20;
  unsigned int v21;
  char v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v27;
  char v28[8];
  unint64_t v29;

  v10 = (uint64_t *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11 || (*(_BYTE *)(v11 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v12 = *(pxrInternal__aapl__pxrReserved__::UsdStage **)v11;
  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v29);
  pxrInternal__aapl__pxrReserved__::UsdStage::_CreateAttributeSpecForEditing(v12, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a5) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v13, a5);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v15 = v29;
    v16 = atomic_load(Instance + 18);
    if (v15 >= v16
      || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v29, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
    {
      pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v28);
      sub_20C35C4F8((uint64_t)v22, v10, (_DWORD *)(a1 + 16));
      v17 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::UsdStage::_CreatePrimSpecForEditing(v12, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, &v27);
      if ((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(&v27, (uint64_t)EmptyString, a2, *a4, a3, (unsigned int **)a5);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v19, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v27);
      if ((v26 & 7) != 0)
      {
        v20 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v21 = __ldxr(v20);
        while (__stlxr(v21 - 2, v20));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
      sub_20BFD265C(&v24);
      if (v23)
        sub_20C35C614(v23);
      sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v28);
    }
    else
    {
      *(_QWORD *)a5 = 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v29);
}

void sub_20C36082C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  sub_20C35C2E0((uint64_t)va);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_CreateAttributeSpecForEditing(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v3, this);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::_Create(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, char a3, int *a4)
{
  uint64_t v4;
  void *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v7;

  pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(a1, a2, a3, a4, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  v4 = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v7) ^ 1;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v5, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  return v4;
}

void sub_20C360910(_Unwind_Exception *a1@<X0>, void *a2@<X8>, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(a2, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::UsdAttribute::_GetPathForAuthoring@<D0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X2>, int *a4@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  double result;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  char **v13;
  BOOL v14;
  char v15;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  const char *Text;
  pxrInternal__aapl__pxrReserved__ *v18;
  uint64_t *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  uint64_t Identifier;
  const char *v22;
  char *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  char *v33;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a4 + 1);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    sub_20C348EEC(a1, &v31);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAbsoluteRootOrPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, &v33);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, (int *)&v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    sub_20BFD265C(&v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
    sub_20BFD265C(&v31);
    if (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache::IsPathInPrototype((pxrInternal__aapl__pxrReserved__::Usd_InstanceCache *)&v25, v9))
    {
      if (a3)
        MEMORY[0x212B929D0](a3, "Cannot refer to a prototype or an object within a prototype.");
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_20BFD265C(&v25);
      return result;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
    sub_20BFD265C(&v25);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (!v11 || (*(_BYTE *)(v11 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), v8);
  EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v11);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, a2, &v33);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, (int *)&v25);
    sub_20BFD3EBC(a4, (int *)&v25);
    sub_20BFD3F10(a4 + 1, (int *)&v25 + 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
    sub_20BFD265C(&v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    v13 = &v33;
  }
  else
  {
    sub_20C348EEC(a1, (int *)&v33);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, &v25);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    sub_20BFD265C(&v33);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, &v31);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, (int *)&v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
    sub_20BFD265C(&v31);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, &v27);
    pxrInternal__aapl__pxrReserved__::UsdEditTarget::MapToSpecPath(EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27, &v29);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v29, &v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_20BFD265C(&v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v28);
    sub_20BFD265C(&v27);
    pxrInternal__aapl__pxrReserved__::SdfPath::MakeRelativePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v31, &v33, &v29);
    sub_20BFD3EBC(a4, &v29);
    sub_20BFD3F10(a4 + 1, &v30);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
    sub_20BFD265C(&v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v32);
    sub_20BFD265C(&v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
    sub_20BFD265C(&v33);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
    v13 = (char **)&v25;
  }
  sub_20BFD265C(v13);
  v14 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
  if (a3)
    v15 = v14;
  else
    v15 = 1;
  if ((v15 & 1) == 0)
  {
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    v18 = *(pxrInternal__aapl__pxrReserved__ **)(a1 + 8);
    if (!v18 || (*((_BYTE *)v18 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(v18, v16);
    v19 = (uint64_t *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v18);
    v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v19);
    Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v20);
    if (*(char *)(Identifier + 23) >= 0)
      v24 = Identifier;
    else
      v24 = *(_QWORD *)Identifier;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot map <%s> to layer @%s@ via stage's EditTarget", v22, v23, Text, v24);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    result = *(double *)&v25;
    *(_OWORD *)a3 = v25;
    *(_QWORD *)(a3 + 16) = v26;
  }
  return result;
}

void sub_20C360C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  _DWORD *v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v12 = va_arg(va2, _QWORD);
  sub_20BFD1A18((uint64_t *)va1);
  sub_20BFD1A18((int *)va2);
  sub_20BFD1A18((uint64_t *)va);
  sub_20BFD1A18(v4);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::AddConnection(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  unint64_t *p_shared_owners;
  int IsDormant;
  unsigned int **v9;
  std::__shared_weak_count *v10;
  unint64_t v11;
  uint64_t v12;
  const char *Text;
  const char *v14;
  const char *v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v19;
  _QWORD v20[4];
  char v21;
  int v22;
  int v23;
  void *v24[2];
  uint64_t v25;

  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_GetPathForAuthoring((uint64_t)a1, a2, (uint64_t)v24, &v22);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v22))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(a1, v6);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v19);
    if ((IsDormant & 1) == 0)
    {
      v9 = (unsigned int **)sub_20C0AEAB8(&v19);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(v9, &v17);
      sub_20C360F84(&v17, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, a3);
      v10 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    v12 = IsDormant ^ 1u;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(p_shared_owners, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v19);
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
  }
  else
  {
    v20[0] = "usd/attribute.cpp";
    v20[1] = "AddConnection";
    v20[2] = 425;
    v20[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::AddConnection(const SdfPath &, UsdListPosition) const";
    v21 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    sub_20C348EEC((uint64_t)a1, (int *)&v19);
    v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v19);
    v15 = (const char *)v24;
    if (v25 < 0)
      v15 = (const char *)v24[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot append connection <%s> to attribute <%s>: %s", Text, v14, v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v19 + 1);
    sub_20BFD265C(&v19);
    v12 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_20BFD265C(&v22);
  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
  return v12;
}

void sub_20C360F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  void *v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v7, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va1);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va2);
  sub_20BFD1A18((_DWORD *)(v5 - 64));
  if (*(char *)(v5 - 33) < 0)
    operator delete(*(void **)(v5 - 56));
  _Unwind_Resume(a1);
}

void sub_20C360F7C()
{
  JUMPOUT(0x20C360F60);
}

void sub_20C360F84(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  int v34;

  v32 = 0;
  v33 = 0;
  v34 = 0;
  switch(a3)
  {
    case 0:
      v6 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v32 = v6;
      v9 = 1;
      goto LABEL_11;
    case 1:
      v10 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      if (v5)
      {
        v11 = (unint64_t *)&v5->__shared_owners_;
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v9 = 0;
      v32 = v10;
LABEL_11:
      v13 = 4;
      goto LABEL_21;
    case 2:
      v14 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      if (v5)
      {
        v15 = (unint64_t *)&v5->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      v32 = v14;
      v9 = 1;
      goto LABEL_20;
    case 3:
      v17 = *a1;
      v5 = (std::__shared_weak_count *)a1[1];
      if (v5)
      {
        v18 = (unint64_t *)&v5->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v9 = 0;
      v32 = v17;
LABEL_20:
      v13 = 5;
LABEL_21:
      v33 = v5;
      v34 = v13;
      break;
    default:
      v9 = 0;
      break;
  }
  if (!sub_20BFE71C4((uint64_t)a1)
    || (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1))
  {
    v21 = *a1;
    v20 = (std::__shared_weak_count *)a1[1];
    if (v20)
    {
      v22 = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = v33;
    v32 = v21;
    v33 = v20;
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v34 = 0;
  }
  if (sub_20BFE7238((uint64_t)&v32))
  {
    v27 = sub_20C19C024((uint64_t)&v32, a2);
    if (v27 != -1)
    {
      if ((v9 & 1) != 0)
        v28 = 0;
      else
        v28 = sub_20BFE7238((uint64_t)&v32) - 1;
      if (v27 == v28)
        goto LABEL_42;
      sub_20C19C068((unsigned int *)&v32, v27);
    }
    sub_20C361F94((unsigned int *)&v32, (v9 - 1), a2);
  }
  else
  {
    sub_20C361F94((unsigned int *)&v32, 0xFFFFFFFFLL, a2);
  }
LABEL_42:
  v29 = v33;
  if (v33)
  {
    v30 = (unint64_t *)&v33->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20C3611BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::RemoveConnection(pxrInternal__aapl__pxrReserved__::UsdAttribute *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  unint64_t *v5;
  int IsDormant;
  unsigned int **v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  uint64_t v10;
  const char *Text;
  const char *v12;
  const char *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v15;
  int v16;
  int v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;
  int v23;
  int v24;
  void *v25[2];
  uint64_t v26;

  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_GetPathForAuthoring((uint64_t)this, a2, (uint64_t)v25, &v23);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v23))
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v16);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(this, v4);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v15);
    if ((IsDormant & 1) == 0)
    {
      v7 = (unsigned int **)sub_20C0AEAB8(&v15);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(v7, &v18);
      sub_20C3613EC((uint64_t *)&v18, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v23);
      v8 = (std::__shared_weak_count *)v19;
      if (v19)
      {
        v5 = (unint64_t *)(v19 + 8);
        do
          v9 = __ldaxr(v5);
        while (__stlxr(v9 - 1, v5));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
    v10 = IsDormant ^ 1u;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v5, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v15);
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v16);
  }
  else
  {
    v18 = "usd/attribute.cpp";
    v19 = "RemoveConnection";
    v20 = 453;
    v21 = "BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::RemoveConnection(const SdfPath &) const";
    v22 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    sub_20C348EEC((uint64_t)this, &v16);
    v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16);
    v13 = (const char *)v25;
    if (v26 < 0)
      v13 = (const char *)v25[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot remove connection <%s> from attribute <%s>: %s", Text, v12, v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_20BFD265C(&v16);
    v10 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  sub_20BFD265C(&v23);
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
  return v10;
}

void sub_20C361368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void *v6;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  va_list va1;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, _QWORD);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v6, (pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va1);
  sub_20BFD1A18((_DWORD *)(v4 - 48));
  if (*(char *)(v4 - 17) < 0)
    operator delete(*(void **)(v4 - 40));
  _Unwind_Resume(a1);
}

void sub_20C3613E4()
{
  JUMPOUT(0x20C3613C8);
}

void sub_20C3613EC(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  int v30;

  if (sub_20C0AA0E4((uint64_t)a1))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 16))(*a1))
    {
      v4 = a1[1];
      v28 = *a1;
      v29 = (std::__shared_weak_count *)v4;
      if (v4)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldxr(v5);
        while (__stxr(v6 + 1, v5));
      }
      v30 = 0;
      sub_20C19BF70((unsigned int *)&v28, a2);
      v7 = v29;
      if (v29)
      {
        p_shared_owners = (unint64_t *)&v29->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1) & 1) == 0)
    {
      v10 = a1[1];
      v28 = *a1;
      v29 = (std::__shared_weak_count *)v10;
      if (v10)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 1, v11));
      }
      v30 = 1;
      sub_20C19BF70((unsigned int *)&v28, a2);
      v13 = v29;
      if (v29)
      {
        v14 = (unint64_t *)&v29->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = a1[1];
      v28 = *a1;
      v29 = (std::__shared_weak_count *)v16;
      if (v16)
      {
        v17 = (unint64_t *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      v30 = 4;
      sub_20C19BF70((unsigned int *)&v28, a2);
      v19 = v29;
      if (v29)
      {
        v20 = (unint64_t *)&v29->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v22 = a1[1];
      v28 = *a1;
      v29 = (std::__shared_weak_count *)v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v30 = 5;
      sub_20C19BF70((unsigned int *)&v28, a2);
      v25 = v29;
      if (v29)
      {
        v26 = (unint64_t *)&v29->__shared_owners_;
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      sub_20C362048(a1, 2, a2);
    }
  }
}

void sub_20C36160C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  _DWORD *v6;
  _DWORD *v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  unint64_t *v9;
  int IsDormant;
  unsigned int **v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int **v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t v21;
  uint64_t v22;
  const char *Text;
  const char *v24;
  const char *p_p;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v27;
  int v28;
  int v29;
  void (***v30)(void **);
  const char *v31;
  uint64_t v32;
  const char *v33;
  char v34;
  void *__p;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _DWORD *v39;
  unint64_t v40;

  v38 = 0;
  v39 = 0;
  v40 = 0;
  sub_20C0B8D74(&v38, (a2[1] - *a2) >> 3);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
LABEL_9:
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v28);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(a1, v8);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v27);
    if ((IsDormant & 1) == 0)
    {
      v11 = (unsigned int **)sub_20C0AEAB8(&v27);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(v11, &v30);
      if (sub_20C0AA0E4((uint64_t)&v30))
        (*v30)[7]((void **)v30);
      v12 = (std::__shared_weak_count *)v31;
      if (v31)
      {
        v13 = (unint64_t *)(v31 + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = (unsigned int **)sub_20C0AEAB8(&v27);
      pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(v15, &__p);
      v30 = (void (***)(void **))__p;
      v31 = (const char *)v36;
      if (v36)
      {
        v16 = (unint64_t *)(v36 + 8);
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      LODWORD(v32) = 0;
      sub_20C3619E0((unsigned int *)&v30, &v38);
      v18 = (std::__shared_weak_count *)v31;
      if (v31)
      {
        v9 = (unint64_t *)(v31 + 8);
        do
          v19 = __ldaxr(v9);
        while (__stlxr(v19 - 1, v9));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v20 = (std::__shared_weak_count *)v36;
      if (v36)
      {
        v9 = (unint64_t *)(v36 + 8);
        do
          v21 = __ldaxr(v9);
        while (__stlxr(v21 - 1, v9));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    v22 = IsDormant ^ 1u;
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v9, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v27);
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v28);
  }
  else
  {
    while (1)
    {
      __p = 0;
      v36 = 0;
      v37 = 0;
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_GetPathForAuthoring((uint64_t)a1, v4, (uint64_t)&__p, (int *)&v30);
      v6 = v39;
      if ((unint64_t)v39 >= v40)
      {
        v7 = (_DWORD *)sub_20C12C530(&v38, &v30);
      }
      else
      {
        sub_20BFD38A4(v39, &v30);
        sub_20BFD38DC(v6 + 1, (_DWORD *)&v30 + 1);
        v7 = v6 + 2;
      }
      v39 = v7;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
      sub_20BFD265C(&v30);
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v39 - 2))
        break;
      if (SHIBYTE(v37) < 0)
        operator delete(__p);
      v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 8);
      if (v4 == v5)
        goto LABEL_9;
    }
    v30 = (void (***)(void **))"usd/attribute.cpp";
    v31 = "SetConnections";
    v32 = 484;
    v33 = "BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::SetConnections(const SdfPathVector &) const";
    v34 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(v4);
    sub_20C348EEC((uint64_t)a1, &v28);
    v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v28);
    p_p = (const char *)&__p;
    if (v37 < 0)
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v30, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set connection <%s> on attribute <%s>: %s", Text, v24, p_p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
    sub_20BFD265C(&v28);
    if (SHIBYTE(v37) < 0)
      operator delete(__p);
    v22 = 0;
  }
  v30 = (void (***)(void **))&v38;
  sub_20BFD6F90((void ***)&v30);
  return v22;
}

void sub_20C361930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (a27 < 0)
    operator delete(__p);
  a17 = v27 - 72;
  sub_20BFD6F90((void ***)&a17);
  _Unwind_Resume(a1);
}

unsigned int *sub_20C3619E0(unsigned int *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *(_QWORD *)a1;
  if (v4)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 112))(v4, a1[4]);
    v6 = (uint64_t)(v5[1] - *v5) >> 3;
  }
  else
  {
    v6 = 0;
  }
  sub_20C19C0C8(a1, 0, v6, a2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::ClearConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  unint64_t *p_shared_owners;
  int IsDormant;
  unsigned int **v5;
  std::__shared_weak_count *v6;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v11;
  _BYTE v12[8];

  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v12);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_CreateSpec(this, v2);
  IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v11);
  if ((IsDormant & 1) == 0)
  {
    v5 = (unsigned int **)sub_20C0AEAB8(&v11);
    pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(v5, &v9);
    if (sub_20C0AA0E4((uint64_t)&v9))
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
    v6 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(p_shared_owners, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v12);
  return IsDormant ^ 1u;
}

void sub_20C361B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  void *v16;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v16, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&a11);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a13);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttribute::GetConnections(uint64_t a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::UsdProperty::_GetTargets(a1, 1, a2, 0);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttribute::HasAuthoredConnections(pxrInternal__aapl__pxrReserved__::UsdAttribute *this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::UsdObject::HasAuthoredMetadata(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 56));
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(pxrInternal__aapl__pxrReserved__::UsdProperty *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v4;
  uint64_t result;

  if (*(_DWORD *)this > 4u || ((1 << *(_DWORD *)this) & 0x1A) == 0)
    return 0;
  v4 = *((_QWORD *)this + 1);
  if (!v4 || (*(_BYTE *)(v4 + 57) & 8) != 0)
    return 0;
  if (*(_DWORD *)this == 1)
    return 1;
  result = pxrInternal__aapl__pxrReserved__::UsdObject::_GetDefiningSpecType(this, a2);
  if (*(_DWORD *)this != 3 || (_DWORD)result != 1)
    return *(_DWORD *)this == 4 && (_DWORD)result == 8;
  return result;
}

uint64_t sub_20C361C1C(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = -1;
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)(a1 + 48), 0.0, 1.0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 68));
  *(_DWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 76) = 0;
  return a1;
}

void sub_20C361C7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 24);
  if (v3)
    sub_20C96B4E8(v3);
  sub_20C96BB34(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C361C9C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t (**a3)(_QWORD, uint64_t), const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v11[3])(_QWORD, uint64_t);

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD **)v8;
  v11[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51BCE0;
  v11[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C5374F0;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v9, (int *)a1, a2, a4, v11);
}

uint64_t sub_20C361D28(uint64_t a1, uint64_t *a2)
{
  sub_20C1D1768(a2, *(uint64_t **)(a1 + 8));
  return 1;
}

uint64_t sub_20C361D4C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t result;
  uint64_t v5;

  v2 = a2;
  result = sub_20BFB5E50(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)v2 + 1);
    if ((v5 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    return (*(_QWORD *)v2 & 0xFFFFFFFFFFFFFFF8) == (**(_QWORD **)(a1 + 8) & 0xFFFFFFFFFFFFFFF8);
  }
  return result;
}

uint64_t sub_20C361DB4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t (**a3)(_QWORD, uint64_t), const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v11[3])(_QWORD, uint64_t);

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD **)v8;
  v11[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C5269D8;
  v11[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C537528;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v9, (int *)a1, a2, a4, v11);
}

uint64_t sub_20C361E40(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  BOOL v5;

  v3 = **(_DWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  *(_QWORD *)(a2 + 8) = (char *)&off_24C5269E8 + 3;
  *(_DWORD *)a2 = v3;
  return 1;
}

uint64_t sub_20C361EA0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v2 = (uint64_t)a2;
  result = sub_20C030CF4(a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((v5 & 4) != 0)
      v2 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    return *(_DWORD *)v2 == **(_DWORD **)(a1 + 8);
  }
  return result;
}

BOOL sub_20C361F00(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  __int16 v12;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD *)v8;
  v11[2] = &stru_24C51BCE0;
  v12 = 0;
  v11[0] = &unk_24C5286B0;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

void sub_20C361F94(unsigned int *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];
  void **v9;

  if ((_DWORD)a2 == -1)
  {
    v5 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 112))(v5, a1[4]);
      a2 = (v6[1] - *v6) >> 3;
    }
    else
    {
      LODWORD(a2) = 0;
    }
  }
  v7 = (int)a2;
  sub_20C105C98(v8, 1uLL, a3);
  sub_20C19C0C8(a1, v7, 0, v8);
  v9 = (void **)v8;
  sub_20BFD6F90(&v9);
}

void sub_20C362030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C362048(uint64_t *a1, int a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  int v12;

  v4 = (std::__shared_weak_count *)a1[1];
  v10 = *a1;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v12 = a2;
  if (sub_20C19C024((uint64_t)&v10, a3) == -1)
    sub_20C3620FC((unsigned int *)&v10, a3);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20C3620E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C3620FC(unsigned int *a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v7[3];
  void **v8;

  v4 = *(_QWORD *)a1;
  if (v4)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 112))(v4, a1[4]);
    v6 = (uint64_t)(v5[1] - *v5) >> 3;
  }
  else
  {
    v6 = 0;
  }
  sub_20C105C98(v7, 1uLL, a2);
  sub_20C19C0C8(a1, v6, 0, v7);
  v8 = (void **)v7;
  sub_20BFD6F90(&v8);
}

void sub_20C36218C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdClipsAPI::~UsdClipsAPI(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdClipsAPI::Get(uint64_t *a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  unsigned int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;

  v6 = sub_20C369024(a1);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v8, a2, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C537560;
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
  }
  else
  {
    v13 = "usd/clipsAPI.cpp";
    v14 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v15 = 51;
    v16 = (unint64_t)"static UsdClipsAPI pxrInternal__aapl__pxrReserved__::UsdClipsAPI::Get(const UsdStagePtr &, const SdfPath &)";
    v17 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v13) = 1;
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v15 + 1);
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v13);
    *((_QWORD *)a3 + 3) = 0;
    *(_QWORD *)a3 = off_24C537560;
    if ((v16 & 7) != 0)
    {
      v11 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
}

void sub_20C362338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this)
{
  return 4;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254988688);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254988688))
  {
    __cxa_guard_release(&qword_254988688);
  }
  return &qword_254988680;
}

void sub_20C3623C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988688);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_254988698);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPI *)__cxa_guard_acquire(&qword_254988698);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdClipsAPI::_GetStaticTfType(v3);
      byte_254988690 = sub_20C35BD7C((char *)&qword_254988680, v4, v5);
      __cxa_guard_release(&qword_254988698);
    }
  }
  return byte_254988690;
}

void sub_20C362440(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988698);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdClipsAPI::_GetStaticTfType(this);
  return &qword_254988680;
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  uint64_t **SchemaAttributeNames;

  v1 = (int)this;
  v2 = atomic_load((unsigned __int8 *)&qword_2549886B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2549886B8))
  {
    qword_2549886A0 = 0;
    *(_QWORD *)algn_2549886A8 = 0;
    qword_2549886B0 = 0;
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_2549886A0, &dword_20BDBC000);
    __cxa_guard_release(&qword_2549886B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2549886D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2549886D8))
  {
    SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    qword_2549886C0 = 0;
    *(_QWORD *)algn_2549886C8 = 0;
    qword_2549886D0 = 0;
    sub_20BFE538C(&qword_2549886C0, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_2549886C0, &dword_20BDBC000);
    __cxa_guard_release(&qword_2549886D8);
  }
  if (v1)
    return &qword_2549886C0;
  else
    return &qword_2549886A0;
}

void sub_20C362570(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549886D8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType::~UsdClipsAPIInfoKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  void **v34;

  v34 = (void **)((char *)this + 88);
  sub_20BEEB2B8(&v34);
  v2 = *((_QWORD *)this + 10);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  v5 = *((_QWORD *)this + 9);
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stlxr(v7 - 2, v6));
  }
  v8 = *((_QWORD *)this + 8);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  v11 = *((_QWORD *)this + 7);
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  v14 = *((_QWORD *)this + 6);
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  v17 = *((_QWORD *)this + 5);
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  v20 = *((_QWORD *)this + 4);
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  v23 = *((_QWORD *)this + 3);
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  v26 = *((_QWORD *)this + 2);
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  v29 = *((_QWORD *)this + 1);
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v32 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
}

pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType::UsdClipsAPIInfoKeys_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int *v43;
  unsigned int v44;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v46 = (uint64_t *)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "active", 0) + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v46, "assetPaths", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 16, "interpolateMissingClipValues", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 24, "manifestAssetPath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 32, "primPath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 40, "templateAssetPath", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 48, "templateEndTime", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 56, "templateStartTime", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 64, "templateStride", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 72, "templateActiveOffset", 0);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken((char *)this + 80, "times", 0);
  v2 = *(_QWORD *)this;
  v47 = v2;
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 2, v3));
    if ((v4 & 1) == 0)
      v47 &= 0xFFFFFFFFFFFFFFF8;
  }
  v5 = *v46;
  v48 = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v48 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = *((_QWORD *)this + 2);
  v49 = v8;
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v49 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = *((_QWORD *)this + 3);
  v50 = v11;
  if ((v11 & 7) != 0)
  {
    v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 2, v12));
    if ((v13 & 1) == 0)
      v50 &= 0xFFFFFFFFFFFFFFF8;
  }
  v14 = *((_QWORD *)this + 4);
  v51 = v14;
  if ((v14 & 7) != 0)
  {
    v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 2, v15));
    if ((v16 & 1) == 0)
      v51 &= 0xFFFFFFFFFFFFFFF8;
  }
  v17 = *((_QWORD *)this + 5);
  v52 = v17;
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v52 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = *((_QWORD *)this + 6);
  v53 = v20;
  if ((v20 & 7) != 0)
  {
    v21 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 2, v21));
    if ((v22 & 1) == 0)
      v53 &= 0xFFFFFFFFFFFFFFF8;
  }
  v23 = *((_QWORD *)this + 7);
  v54 = v23;
  if ((v23 & 7) != 0)
  {
    v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 2, v24));
    if ((v25 & 1) == 0)
      v54 &= 0xFFFFFFFFFFFFFFF8;
  }
  v26 = *((_QWORD *)this + 8);
  v55 = v26;
  if ((v26 & 7) != 0)
  {
    v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 2, v27));
    if ((v28 & 1) == 0)
      v55 &= 0xFFFFFFFFFFFFFFF8;
  }
  v29 = *((_QWORD *)this + 9);
  v56 = v29;
  if ((v29 & 7) != 0)
  {
    v30 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 2, v30));
    if ((v31 & 1) == 0)
      v56 &= 0xFFFFFFFFFFFFFFF8;
  }
  v32 = *((_QWORD *)this + 10);
  v57 = v32;
  if ((v32 & 7) != 0)
  {
    v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 2, v33));
    if ((v34 & 1) == 0)
      v57 &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  v35 = operator new(0x58uLL);
  v36 = 0;
  *((_QWORD *)this + 11) = v35;
  *((_QWORD *)this + 12) = v35;
  *((_QWORD *)this + 13) = v35 + 11;
  do
  {
    v37 = *(&v47 + v36);
    *v35 = v37;
    if ((v37 & 7) != 0)
    {
      v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 2, v38));
      if ((v39 & 1) == 0)
        *v35 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v36;
    ++v35;
  }
  while (v36 != 11);
  v40 = &v58;
  *((_QWORD *)this + 12) = v35;
  do
  {
    v42 = *--v40;
    v41 = v42;
    if ((v42 & 7) != 0)
    {
      v43 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
      do
        v44 = __ldxr(v43);
      while (__stlxr(v44 - 2, v43));
    }
  }
  while (v40 != &v47);
  return this;
}

void sub_20C362B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, _QWORD *a10, void **a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;

  sub_20BEEB2B8(&a11);
  v34 = (char *)&a24;
  while (1)
  {
    v36 = *((_QWORD *)v34 - 1);
    v34 -= 8;
    v35 = v36;
    if ((v36 & 7) != 0)
    {
      v37 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
      do
        v38 = __ldxr(v37);
      while (__stlxr(v38 - 2, v37));
    }
    if (v34 == &a13)
    {
      if ((*v25 & 7) != 0)
      {
        v39 = (unsigned int *)(*v25 & 0xFFFFFFFFFFFFFFF8);
        do
          v40 = __ldxr(v39);
        while (__stlxr(v40 - 2, v39));
      }
      if ((*v33 & 7) != 0)
      {
        v41 = (unsigned int *)(*v33 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      if ((*v32 & 7) != 0)
      {
        v43 = (unsigned int *)(*v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v44 = __ldxr(v43);
        while (__stlxr(v44 - 2, v43));
      }
      if ((*v31 & 7) != 0)
      {
        v45 = (unsigned int *)(*v31 & 0xFFFFFFFFFFFFFFF8);
        do
          v46 = __ldxr(v45);
        while (__stlxr(v46 - 2, v45));
      }
      if ((*v30 & 7) != 0)
      {
        v47 = (unsigned int *)(*v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v48 = __ldxr(v47);
        while (__stlxr(v48 - 2, v47));
      }
      if ((*v29 & 7) != 0)
      {
        v49 = (unsigned int *)(*v29 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      if ((*v28 & 7) != 0)
      {
        v51 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v52 = __ldxr(v51);
        while (__stlxr(v52 - 2, v51));
      }
      if ((*v27 & 7) != 0)
      {
        v53 = (unsigned int *)(*v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v54 = __ldxr(v53);
        while (__stlxr(v54 - 2, v53));
      }
      if ((*v26 & 7) != 0)
      {
        v55 = (unsigned int *)(*v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v56 = __ldxr(v55);
        while (__stlxr(v56 - 2, v55));
      }
      if ((*a10 & 7) != 0)
      {
        v57 = (unsigned int *)(*a10 & 0xFFFFFFFFFFFFFFF8);
        do
          v58 = __ldxr(v57);
        while (__stlxr(v58 - 2, v57));
      }
      if ((*v24 & 7) != 0)
      {
        v59 = (unsigned int *)(*v24 & 0xFFFFFFFFFFFFFFF8);
        do
          v60 = __ldxr(v59);
        while (__stlxr(v60 - 2, v59));
      }
      _Unwind_Resume(a1);
    }
  }
}

void sub_20C362D68()
{
  JUMPOUT(0x20C362D1CLL);
}

void sub_20C362D70()
{
  JUMPOUT(0x20C362D40);
}

void pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType::~UsdClipsAPISetNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType *this)
{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType::UsdClipsAPISetNames_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "default", 0);
  v3 = *v2;
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v6 = operator new(8uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *v6 = v3;
  v7 = v6 + 1;
  *((_QWORD *)this + 3) = v6 + 1;
  if ((v3 & 7) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *v6 &= 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
  }
  else
  {
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

void sub_20C362F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;

  v11 = v10;
  sub_20BEEB2B8(&a9);
  if ((v11 & 7) != 0)
  {
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_20C96B3E4(v9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClips(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0((uint64_t)this, &v15);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v15;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v6 == v7)
    return 0;
  sub_20C35C4F8((uint64_t)&v15, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v9 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v9)
    v9 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v20 = 0;
  v8 = sub_20C3690B8((uint64_t)&v15, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v9 + 8), (uint64_t)a2, &v20);
  if ((v20 & 7) != 0)
  {
    v10 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if ((v19 & 7) != 0)
  {
    v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  return v8;
}

void sub_20C36306C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C3630C0@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  _DWORD *v4;
  _BOOL8 v5;
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t *v9;

  v4 = (_DWORD *)(a1 + 16);
  v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
  if (v5)
  {
    sub_20BFD6E54(a2, v4);
    v6 = a2 + 1;
    v7 = (_DWORD *)(a1 + 20);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 8);
    if (v8)
    {
      sub_20BFD6E54(a2, (_DWORD *)(v8 + 16));
      v7 = (_DWORD *)(v8 + 20);
    }
    else
    {
      v9 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v5);
      sub_20BFD6E54(a2, v9);
      v7 = (_DWORD *)v9 + 1;
    }
    v6 = a2 + 1;
  }
  return sub_20BFD6EA4(v6, v7);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClips(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0((uint64_t)this, &v15);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v15;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v6 == v7)
    return 0;
  sub_20C35C4F8((uint64_t)&v15, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v9 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v9)
    v9 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v20 = 0;
  v8 = sub_20C369120((uint64_t)&v15, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v9 + 8), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20);
  if ((v20 & 7) != 0)
  {
    v10 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if ((v19 & 7) != 0)
  {
    v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  return v8;
}

void sub_20C363270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipSets(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  pxrInternal__aapl__pxrReserved__::UsdStage *v10;
  pxrInternal__aapl__pxrReserved__::UsdEditTarget *EditTarget;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v18;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v19;
  void *v20;
  int v22;
  int v23;
  uint64_t v24;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v31;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v24);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v24;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
  sub_20BFD265C(&v24);
  if (v6 == v7)
    return 0;
  sub_20C35C4F8((uint64_t)&v24, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v24, v9, &v29);
  v10 = (pxrInternal__aapl__pxrReserved__::UsdStage *)sub_20C348E08(&v29);
  EditTarget = (pxrInternal__aapl__pxrReserved__::UsdEditTarget *)pxrInternal__aapl__pxrReserved__::UsdStage::GetEditTarget(v10);
  sub_20C3630C0(a1, &v22);
  pxrInternal__aapl__pxrReserved__::UsdEditTarget::GetPrimSpecForScenePath(EditTarget, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v22, &v31);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v23);
  sub_20BFD265C(&v22);
  v12 = v30;
  if (v30)
  {
    v13 = (unsigned int *)(v30 + 8);
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  if ((v28 & 7) != 0)
  {
    v16 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v17 = __ldxr(v16);
    while (__stlxr(v17 - 2, v16));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  sub_20BFD265C(&v26);
  if (v25)
    sub_20C35C614(v25);
  v18 = sub_20C0B0CA4(&v31);
  v19 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v19)
    v19 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v8 = sub_20C3634D0(v18, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v19 + 16), a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v20, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v31);
  return v8;
}

void sub_20C363450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  sub_20BFD1A18(&a9);
  v17 = a16;
  if (a16)
  {
    v18 = (unsigned int *)(a16 + 8);
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  sub_20C35C2E0((uint64_t)&a11);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *sub_20C3634D0(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t (**a3)(_QWORD, uint64_t))
{
  uint64_t (**v4[3])(_QWORD, uint64_t);
  __int16 v5;

  if (!a3)
    return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(a1, a2);
  v4[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C524D30;
  v5 = 0;
  v4[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C52BEB0;
  v4[1] = a3;
  return pxrInternal__aapl__pxrReserved__::SdfSpec::_HasField(a1, a2, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipSets(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v15;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v15);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v15;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v15 + 1);
  sub_20BFD265C(&v15);
  if (v6 == v7)
    return 0;
  sub_20C35C4F8((uint64_t)&v15, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v9 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v9)
    v9 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v20 = 0;
  v8 = sub_20C369184((uint64_t)&v15, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v9 + 16), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20);
  if ((v20 & 7) != 0)
  {
    v10 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  if ((v19 & 7) != 0)
  {
    v12 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  if (v16)
    sub_20C35C614(v16);
  return v8;
}

void sub_20C363638(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipAssetPaths(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipAssetPaths(a1, a2, (uint64_t)EmptyString);
}

void sub_20C363748(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipAssetPaths(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t), uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipAssetPaths";
    v34 = 268;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipAssetPaths(const VtArray<SdfAsset"
                            "Path> &, const std::string &)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipAssetPaths";
    v34 = 268;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipAssetPaths(const VtArray<SdfAsset"
                            "Path> &, const std::string &)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 1, (uint64_t)&v31);
  v23 = sub_20C369358((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C363998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C3639F0(const void **a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  size_t v6;
  std::string *v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  const void *v9;
  uint64_t *EmptyString;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  std::string v16;
  void *__p[2];
  std::string::size_type v18;

  if (*((char *)a1 + 23) >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  v7 = &v16;
  v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDF6BDC((uint64_t)&v16, v6 + 1);
  if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
  if (v6)
  {
    if (*((char *)a1 + 23) >= 0)
      v9 = a1;
    else
      v9 = *a1;
    v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)memmove(v7, v9, v6);
  }
  *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 58;
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  v11 = *((char *)EmptyString + 23);
  if (v11 >= 0)
    v12 = (const std::string::value_type *)EmptyString;
  else
    v12 = (const std::string::value_type *)*EmptyString;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)EmptyString + 23);
  else
    v13 = EmptyString[1];
  v14 = std::string::append(&v16, v12, v13);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v18 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(a3);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_20C363B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipAssetPaths(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipAssetPaths(a1, a2, (uint64_t)EmptyString);
}

void sub_20C363BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipAssetPaths(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipAssetPaths";
    v34 = 327;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipAssetPaths(VtArray<SdfAssetPath> "
                            "*, const std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipAssetPaths";
    v34 = 327;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipAssetPaths(VtArray<SdfAssetPath> "
                            "*, const std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 1, (uint64_t)&v31);
  v23 = sub_20C369464((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C363E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::ComputeClipAssetPaths@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *result;
  uint64_t v11;
  int v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__ *v15;
  uint64_t *Resolver;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v17;
  uint64_t *Layers;
  uint64_t v19;
  uint64_t v20;
  pxrInternal__aapl__pxrReserved__::PcpLayerStack *v21;
  uint64_t Identifier;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  void *v35;
  char v36;
  __int128 v37;
  void **v38;
  __int128 v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  unint64_t *v43;
  unint64_t v44;
  unsigned int *v45;
  unsigned int v46;
  void *__p[2];
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  void *__dst[2];
  uint64_t v52;
  void *v53;
  char v54;
  _OWORD v55[2];
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58[4];
  char v59[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v60;
  int v61;
  int v62;
  uint64_t v63;
  _BYTE v64[16];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, v55);
  v7 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = *(_QWORD *)&v55[0];
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v55 + 1);
  result = sub_20BFD265C(v55);
  if (v8 == v9)
  {
    *(_QWORD *)(a3 + 32) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    return result;
  }
  sub_20C29110C((uint64_t)v55);
  v11 = sub_20C35C4F8((uint64_t)v59, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  if (sub_20C36433C(v11, a2, (uint64_t)v55))
  {
    v12 = v57;
    if ((v63 & 7) != 0)
    {
      v13 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
    sub_20BFD265C(&v61);
    if (v60)
      sub_20C35C614(v60);
    if (v12)
    {
      v15 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v64);
      Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver(v15);
      v17 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(v58);
      Layers = (uint64_t *)pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetLayers(v17);
      v19 = v58[3];
      v20 = *Layers;
      v21 = (pxrInternal__aapl__pxrReserved__::PcpLayerStack *)sub_20C1FF3C0(v58);
      Identifier = pxrInternal__aapl__pxrReserved__::PcpLayerStack::GetIdentifier(v21);
      pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v59, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(Identifier + 32));
      sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v55, v23, v24);
      v25 = v56;
      sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)v55, v26, v27);
      v28 = v56;
      v29 = v56 + 48 * *(_QWORD *)&v55[0];
      if (v25 != v29)
      {
        v30 = (uint64_t *)(v20 + 8 * v19);
        do
        {
          sub_20C1034E8((uint64_t *)__p, v30);
          pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer((uint64_t *)__p, v25, (uint64_t)&v53);
          v31 = __p[1];
          if (__p[1])
          {
            v32 = (unsigned int *)((char *)__p[1] + 8);
            do
            {
              v33 = __ldxr(v32);
              v34 = v33 - 1;
            }
            while (__stlxr(v34, v32));
            if (!v34)
              (*(void (**)(void *))(*(_QWORD *)v31 + 8))(v31);
          }
          pxrInternal__aapl__pxrReserved__::ArResolver::Resolve((uint64_t)Resolver);
          if (SHIBYTE(v48) < 0)
          {
            sub_20BDDBFAC(__dst, __p[0], (unint64_t)__p[1]);
            if (SHIBYTE(v48) < 0)
              operator delete(__p[0]);
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)__p;
            v52 = v48;
          }
          v35 = (void *)HIBYTE(v52);
          v36 = HIBYTE(v52);
          if (v52 < 0)
            v35 = __dst[1];
          if (v35)
          {
            pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p, v25, __dst);
            if (*(char *)(v25 + 23) < 0)
              operator delete(*(void **)v25);
            v37 = *(_OWORD *)__p;
            *(_QWORD *)(v25 + 16) = v48;
            *(_OWORD *)v25 = v37;
            HIBYTE(v48) = 0;
            LOBYTE(__p[0]) = 0;
            v38 = (void **)(v25 + 24);
            if (*(char *)(v25 + 47) < 0)
            {
              operator delete(*v38);
              v40 = SHIBYTE(v48);
              v41 = v50;
              *(_OWORD *)v38 = v49;
              *(_QWORD *)(v25 + 40) = v41;
              HIBYTE(v50) = 0;
              LOBYTE(v49) = 0;
              if (v40 < 0)
                operator delete(__p[0]);
            }
            else
            {
              v39 = v49;
              *(_QWORD *)(v25 + 40) = v50;
              *(_OWORD *)v38 = v39;
            }
            v36 = HIBYTE(v52);
          }
          if (v36 < 0)
            operator delete(__dst[0]);
          if (v54 < 0)
            operator delete(v53);
          v25 += 48;
        }
        while (v25 != v29);
        v28 = v56;
      }
      v42 = v55[1];
      *(_OWORD *)a3 = v55[0];
      *(_OWORD *)(a3 + 16) = v42;
      *(_QWORD *)(a3 + 32) = v28;
      if (v28)
      {
        v43 = (unint64_t *)(v28 - 16);
        if (*(_QWORD *)(a3 + 24))
          v43 = *(unint64_t **)(a3 + 24);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)v59);
      pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v64);
      return (_DWORD *)sub_20C287D74((uint64_t)v55);
    }
  }
  else
  {
    if ((v63 & 7) != 0)
    {
      v45 = (unsigned int *)(v63 & 0xFFFFFFFFFFFFFFF8);
      do
        v46 = __ldxr(v45);
      while (__stlxr(v46 - 2, v45));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v62);
    sub_20BFD265C(&v61);
    if (v60)
      sub_20C35C614(v60);
  }
  *(_QWORD *)(a3 + 32) = 0;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  return (_DWORD *)sub_20C287D74((uint64_t)v55);
}

void sub_20C36423C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  uint64_t v31;

  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder((pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)(v31 - 136));
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)(v31 - 88));
  sub_20C287D74((uint64_t)&a31);
  _Unwind_Resume(a1);
}

uint64_t sub_20C36433C(uint64_t a1, char *a2, uint64_t a3)
{
  const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  void **v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v22 = 0;
  v23 = 0;
  v24 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v5 = (const pxrInternal__aapl__pxrReserved__::PcpPrimIndex *)sub_20C368FF0(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)a2);
  pxrInternal__aapl__pxrReserved__::Usd_ComputeClipSetDefinitionsForPrimIndex(v5, &v22, &v19);
  v6 = sub_20C020210(v19, v20, (unsigned __int8 **)a2);
  if (v6 == v20)
  {
    v14 = (void **)"usd/clipsAPI.cpp";
    v15 = "_ComputeClipSetDefinition";
    v16 = 150;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ComputeClipSetDefinition(const UsdPrim &, const"
          " std::string &, Usd_ClipSetDefinition *)";
    v18 = 0;
    if (a2[23] >= 0)
      v12 = a2;
    else
      v12 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v14, 1, (pxrInternal__aapl__pxrReserved__ *)"No clip set named '%s'", v12);
    goto LABEL_8;
  }
  v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v19) >> 3);
  v8 = v22;
  if (v7 >= 0xF0F0F0F0F0F0F0F1 * ((v23 - v22) >> 4))
  {
    v14 = (void **)"usd/clipsAPI.cpp";
    v15 = "_ComputeClipSetDefinition";
    v16 = 155;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ComputeClipSetDefinition(const UsdPrim &, const"
          " std::string &, Usd_ClipSetDefinition *)";
    v18 = 0;
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v14, "clipDefIndex < clipSetDefs.size()", 0))
    {
      v8 = v22;
      goto LABEL_3;
    }
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
LABEL_3:
  sub_20C33DF70(a3, (__int128 *)(v8 + 272 * v7));
  sub_20C33E000((std::string *)(a3 + 48), (std::string *)(v8 + 272 * v7 + 48));
  sub_20C1B2170((std::string *)(a3 + 104), (const std::string *)(v8 + 272 * v7 + 104));
  sub_20C33E0C4(a3 + 136, (__int128 *)(v8 + 272 * v7 + 136));
  sub_20C33E0C4(a3 + 184, (__int128 *)(v8 + 272 * v7 + 184));
  v9 = v8 + 272 * v7;
  *(_WORD *)(a3 + 232) = *(_WORD *)(v9 + 232);
  sub_20BF2D298(a3 + 240, v9 + 240);
  v10 = v8 + 272 * v7;
  sub_20C01A074((int *)(a3 + 256), (_DWORD *)(v10 + 256));
  sub_20C01A0C8((int *)(a3 + 260), (_DWORD *)(v10 + 260));
  *(_QWORD *)(a3 + 264) = *(_QWORD *)(v10 + 264);
  v11 = 1;
LABEL_9:
  v14 = (void **)&v19;
  sub_20BDE5038(&v14);
  v14 = (void **)&v22;
  sub_20C287D04(&v14);
  return v11;
}

void sub_20C36454C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  a10 = (void **)&a15;
  sub_20BDE5038(&a10);
  a10 = (void **)(v15 - 56);
  sub_20C287D04(&a10);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::ComputeClipAssetPaths@<X0>(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *EmptyString;

  v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v4)
    v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::ComputeClipAssetPaths((uint64_t)this, (char *)EmptyString, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipManifestAssetPath(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0((uint64_t)this, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipManifestAssetPath((uint64_t)this, (uint64_t (**)(_QWORD, uint64_t))a2, (uint64_t)EmptyString);
}

void sub_20C3646A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipManifestAssetPath(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t), uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipManifestAssetPath";
    v34 = 342;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipManifestAssetPath(const SdfAssetP"
                            "ath &, const std::string &)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipManifestAssetPath";
    v34 = 342;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipManifestAssetPath(const SdfAssetP"
                            "ath &, const std::string &)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 3, (uint64_t)&v31);
  v23 = sub_20C3694CC((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C3648F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipManifestAssetPath(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0((uint64_t)this, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipManifestAssetPath((uint64_t)this, (uint64_t)a2, (uint64_t)EmptyString);
}

void sub_20C364A08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipManifestAssetPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipManifestAssetPath";
    v34 = 357;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipManifestAssetPath(SdfAssetPath *,"
                            " const std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipManifestAssetPath";
    v34 = 357;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipManifestAssetPath(SdfAssetPath *,"
                            " const std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 3, (uint64_t)&v31);
  v23 = sub_20C3695D8((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C364C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GenerateClipManifest@<X0>(uint64_t a1@<X0>, char *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *result;
  char v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *__p;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[34];

  v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, v32);
  v9 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v8);
  v10 = v32[0];
  v11 = *v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v32 + 1);
  result = sub_20BFD265C(v32);
  if (v10 == v11)
  {
    *a4 = 0;
  }
  else
  {
    sub_20C29110C((uint64_t)v32);
    sub_20C35C4F8((uint64_t)&__p, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    v13 = sub_20C36433C((uint64_t)&__p, a2, (uint64_t)v32);
    if ((v25 & 7) != 0)
    {
      v14 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
    sub_20BFD265C(&v24);
    if (v23)
      sub_20C35C614(v23);
    if ((v13 & 1) != 0)
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      pxrInternal__aapl__pxrReserved__::Usd_ClipSet::New((__int128 *)a2, (uint64_t)v32, (uint64_t)&v29, &v27);
      if (v27)
      {
        __p = 0;
        v23 = 0;
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest((pxrInternal__aapl__pxrReserved__::Usd_Clip ***)(v27 + 88), (pxrInternal__aapl__pxrReserved__::SdfPath *)(v27 + 64), (uint64_t *)&__p, a3, a4);
        if (SHIBYTE(v24) < 0)
          operator delete(__p);
      }
      else
      {
        v16 = HIBYTE(v31);
        if (v31 < 0)
          v16 = v30;
        if (v16)
        {
          __p = "usd/clipsAPI.cpp";
          v23 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GenerateClipManifest";
          v24 = 381;
          v25 = (unint64_t)"SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GenerateClipManifest(con"
                                  "st std::string &, BOOL) const";
          v26 = 0;
          if (a2[23] >= 0)
            v17 = a2;
          else
            v17 = *(const char **)a2;
          v18 = (const char *)&v29;
          if (v31 < 0)
            v18 = (const char *)v29;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid clips in clip set '%s': %s", v17, v18);
        }
        *a4 = 0;
      }
      v19 = v28;
      if (v28)
      {
        p_shared_owners = (unint64_t *)&v28->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (SHIBYTE(v31) < 0)
        operator delete(v29);
    }
    else
    {
      *a4 = 0;
    }
    return (_DWORD *)sub_20C287D74((uint64_t)v32);
  }
  return result;
}

void sub_20C364ECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a19);
  if (a26 < 0)
    operator delete(__p);
  sub_20C287D74((uint64_t)&a27);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GenerateClipManifest@<X0>(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v6;
  uint64_t *EmptyString;

  v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v6)
    v6 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v6);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GenerateClipManifest((uint64_t)this, (char *)EmptyString, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GenerateClipManifestFromLayers(std::string::size_type *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t *a3@<X8>)
{
  void *__p[2];
  uint64_t v4;

  __p[0] = 0;
  __p[1] = 0;
  v4 = 0;
  pxrInternal__aapl__pxrReserved__::Usd_GenerateClipManifest(a2, a1, (uint64_t *)__p, 0, a3);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

void sub_20C365000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetInterpolateMissingClipValues(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, char a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0((uint64_t)this, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetInterpolateMissingClipValues((uint64_t)this, a2, (uint64_t)EmptyString);
}

void sub_20C3650D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetInterpolateMissingClipValues(uint64_t a1, char a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  char **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  BOOL v13;
  char *v15;
  char v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v24;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t (*v36)(_QWORD, uint64_t);

  LOBYTE(v36) = a2;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v31);
  v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  v7 = v31;
  v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
  sub_20BFD265C(&v31);
  if (v7 == v8)
    return 0;
  v9 = *(unsigned __int8 *)(a3 + 23);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a3 + 8);
  if (!v9)
  {
    v31 = "usd/clipsAPI.cpp";
    v32 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetInterpolateMissingClipValues";
    v33 = 420;
    v34 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetInterpolateMissingClipValues(BOOL, co"
                            "nst std::string &)";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v11 = *(char **)a3;
  if (v10 >= 0)
    v11 = (char *)a3;
  v12 = *v11;
  if (*v11)
    v13 = (v12 - 48) >= 0xA;
  else
    v13 = 0;
  if (!v13)
    goto LABEL_26;
  if (v12 != 95 && (v12 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v15 = v11;
  do
  {
    v17 = *v15++;
    v16 = v17;
    v18 = (v17 & 0xFFFFFFDF) - 65;
    v19 = v17 - 48;
  }
  while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
  if (v16)
  {
LABEL_26:
    v31 = "usd/clipsAPI.cpp";
    v32 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetInterpolateMissingClipValues";
    v33 = 420;
    v34 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetInterpolateMissingClipValues(BOOL, co"
                            "nst std::string &)";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v31, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v24 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v24)
    v24 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v25 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v25)
    v25 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v25 + 2, (uint64_t)&v30);
  v22 = sub_20C369640((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v24 + 8), &v36, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v30);
  if ((v30 & 7) != 0)
  {
    v26 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  if ((v34 & 7) != 0)
  {
    v28 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
  sub_20BFD265C(&v33);
  if (v32)
    sub_20C35C614(v32);
  return v22;
}

void sub_20C365328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetInterpolateMissingClipValues(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, BOOL *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0((uint64_t)this, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetInterpolateMissingClipValues((uint64_t)this, (uint64_t)a2, (uint64_t)EmptyString);
}

void sub_20C36543C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetInterpolateMissingClipValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetInterpolateMissingClipValues";
    v34 = 435;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetInterpolateMissingClipValues(BOOL *, "
                            "const std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetInterpolateMissingClipValues";
    v34 = 435;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetInterpolateMissingClipValues(BOOL *, "
                            "const std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 2, (uint64_t)&v31);
  v23 = sub_20C36978C((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C36568C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipPrimPath(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipPrimPath(a1, a2, (uint64_t)EmptyString);
}

void sub_20C3657A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipPrimPath(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t), uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipPrimPath";
    v34 = 450;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipPrimPath(const std::string &, con"
                            "st std::string &)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipPrimPath";
    v34 = 450;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipPrimPath(const std::string &, con"
                            "st std::string &)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 4, (uint64_t)&v31);
  v23 = sub_20C369820((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C3659F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipPrimPath(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipPrimPath(a1, a2, (uint64_t)EmptyString);
}

void sub_20C365B04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipPrimPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipPrimPath";
    v34 = 465;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipPrimPath(std::string *, const std"
                            "::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipPrimPath";
    v34 = 465;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipPrimPath(std::string *, const std"
                            "::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 4, (uint64_t)&v31);
  v23 = sub_20C3699B0((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C365D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipActive(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipActive(a1, a2, (uint64_t)EmptyString);
}

void sub_20C365E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipActive(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t), uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipActive";
    v34 = 480;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipActive(const VtVec2dArray &, cons"
                            "t std::string &)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipActive";
    v34 = 480;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipActive(const VtVec2dArray &, cons"
                            "t std::string &)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, v26, (uint64_t)&v31);
  v23 = sub_20C369A44((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C3660B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipActive(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipActive(a1, a2, (uint64_t)EmptyString);
}

void sub_20C3661CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipActive(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipActive";
    v34 = 495;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipActive(VtVec2dArray *, const std:"
                            ":string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipActive";
    v34 = 495;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipActive(VtVec2dArray *, const std:"
                            ":string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, v26, (uint64_t)&v31);
  v23 = sub_20C369B50((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C36641C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTimes(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTimes(a1, a2, (uint64_t)EmptyString);
}

void sub_20C366530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTimes(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t), uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipTimes";
    v34 = 510;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTimes(const VtVec2dArray &, const std::string &)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipTimes";
    v34 = 510;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTimes(const VtVec2dArray &, const std::string &)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 10, (uint64_t)&v31);
  v23 = sub_20C369A44((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C366780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTimes(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTimes(a1, a2, (uint64_t)EmptyString);
}

void sub_20C366894(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTimes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipTimes";
    v34 = 525;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTimes(VtVec2dArray *, const std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipTimes";
    v34 = 525;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTimes(VtVec2dArray *, const std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 10, (uint64_t)&v31);
  v23 = sub_20C369B50((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C366AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateAssetPath(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateAssetPath(a1, a2, (uint64_t)EmptyString);
}

void sub_20C366BF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateAssetPath(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipTemplateAssetPath";
    v34 = 540;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateAssetPath(std::string *, "
                            "const std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipTemplateAssetPath";
    v34 = 540;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateAssetPath(std::string *, "
                            "const std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 5, (uint64_t)&v31);
  v23 = sub_20C3699B0((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C366E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateAssetPath(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t))
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateAssetPath(a1, a2, (uint64_t)EmptyString);
}

void sub_20C366F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateAssetPath(uint64_t a1, uint64_t (**a2)(_QWORD, uint64_t), uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipTemplateAssetPath";
    v34 = 555;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateAssetPath(const std::stri"
                            "ng &, const std::string &)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipTemplateAssetPath";
    v34 = 555;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateAssetPath(const std::stri"
                            "ng &, const std::string &)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 5, (uint64_t)&v31);
  v23 = sub_20C369820((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C3671AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStride(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0((uint64_t)this, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStride((uint64_t)this, (uint64_t)a2, (uint64_t)EmptyString);
}

void sub_20C3672C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStride(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipTemplateStride";
    v34 = 570;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStride(double *, const st"
                            "d::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipTemplateStride";
    v34 = 570;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStride(double *, const st"
                            "d::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 8, (uint64_t)&v31);
  v23 = sub_20C369BE4((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C367510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t *EmptyString;
  const char *Text;
  unsigned int *v11;
  unsigned int v12;
  _BYTE v14[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  _QWORD v21[4];
  char v22;

  if (a2 <= 0.0)
  {
    v21[0] = "usd/clipsAPI.cpp";
    v21[1] = "SetClipTemplateStride";
    v21[2] = 580;
    v21[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride(const double)";
    v22 = 0;
    sub_20C35C4F8((uint64_t)v14, (uint64_t *)this + 1, (_DWORD *)this + 4);
    sub_20C348EEC((uint64_t)v14, &v19);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v19);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid clipTemplateStride %f for prim <%s>. clipTemplateStride must be greater than 0.", a2, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v20);
    sub_20BFD265C(&v19);
    if ((v18 & 7) != 0)
    {
      v11 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_20BFD265C(&v16);
    if (v15)
      sub_20C35C614(v15);
    return 0;
  }
  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0((uint64_t)this, v21);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v21[0];
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v21 + 1);
  sub_20BFD265C(v21);
  if (v6 == v7)
    return 0;
  v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v8)
    v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride((uint64_t)this, (uint64_t)EmptyString, a2);
}

void sub_20C3676F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride(uint64_t a1, uint64_t a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  char **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  BOOL v13;
  char *v15;
  char v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  const char *Text;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v28;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  char *v41;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t (*v46)(_QWORD, uint64_t);

  v46 = *(uint64_t (**)(_QWORD, uint64_t))&a3;
  if (a3 <= 0.0)
  {
    v41 = "usd/clipsAPI.cpp";
    v42 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipTemplateStride";
    v43 = 596;
    v44 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride(const double, cons"
                            "t std::string &)";
    v45 = 0;
    sub_20C35C4F8((uint64_t)&v34, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    sub_20C348EEC((uint64_t)&v34, &v39);
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v39);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid clipTemplateStride %f for prim <%s>. clipTemplateStride must be greater than 0.", a3, Text);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
    sub_20BFD265C(&v39);
    if ((v38 & 7) != 0)
    {
      v24 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stlxr(v25 - 2, v24));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v37);
    sub_20BFD265C(&v36);
    if (v35)
      sub_20C35C614(v35);
    return 0;
  }
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v41);
  v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  v7 = v41;
  v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
  sub_20BFD265C(&v41);
  if (v7 == v8)
    return 0;
  v9 = *(unsigned __int8 *)(a2 + 23);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 8);
  if (!v9)
  {
    v41 = "usd/clipsAPI.cpp";
    v42 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipTemplateStride";
    v43 = 601;
    v44 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride(const double, cons"
                            "t std::string &)";
    v45 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v11 = *(char **)a2;
  if (v10 >= 0)
    v11 = (char *)a2;
  v12 = *v11;
  if (*v11)
    v13 = (v12 - 48) >= 0xA;
  else
    v13 = 0;
  if (!v13)
    goto LABEL_27;
  if (v12 != 95 && (v12 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_27;
  v15 = v11;
  do
  {
    v17 = *v15++;
    v16 = v17;
    v18 = (v17 & 0xFFFFFFDF) - 65;
    v19 = v17 - 48;
  }
  while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
  if (v16)
  {
LABEL_27:
    v41 = "usd/clipsAPI.cpp";
    v42 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipTemplateStride";
    v43 = 601;
    v44 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStride(const double, cons"
                            "t std::string &)";
    v45 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v41, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v28 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v28)
    v28 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v29 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v29)
    v29 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a2, (_QWORD *)v29 + 8, (uint64_t)&v34);
  v26 = sub_20C369C78((uint64_t)&v41, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v28 + 8), &v46, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
  if ((v34 & 7) != 0)
  {
    v30 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  if ((v44 & 7) != 0)
  {
    v32 = (unsigned int *)(v44 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
  sub_20BFD265C(&v43);
  if (v42)
    sub_20C35C614(v42);
  return v26;
}

void sub_20C367A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateActiveOffset(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double *a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *EmptyString;

  v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v4)
    v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateActiveOffset((uint64_t)this, (uint64_t)a2, (uint64_t)EmptyString);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateActiveOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipTemplateActiveOffset";
    v34 = 617;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateActiveOffset(double *, co"
                            "nst std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipTemplateActiveOffset";
    v34 = 617;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateActiveOffset(double *, co"
                            "nst std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 9, (uint64_t)&v31);
  v23 = sub_20C369BE4((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C367D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateActiveOffset(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double a2)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  uint64_t *EmptyString;

  v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v4)
    v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateActiveOffset((uint64_t)this, (uint64_t)EmptyString, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateActiveOffset(uint64_t a1, uint64_t a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  char **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  BOOL v13;
  char *v15;
  char v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v24;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t (*v36)(_QWORD, uint64_t);

  v36 = *(uint64_t (**)(_QWORD, uint64_t))&a3;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v31);
  v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  v7 = v31;
  v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
  sub_20BFD265C(&v31);
  if (v7 == v8)
    return 0;
  v9 = *(unsigned __int8 *)(a2 + 23);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 8);
  if (!v9)
  {
    v31 = "usd/clipsAPI.cpp";
    v32 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipTemplateActiveOffset";
    v33 = 633;
    v34 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateActiveOffset(const double"
                            ", const std::string &)";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v11 = *(char **)a2;
  if (v10 >= 0)
    v11 = (char *)a2;
  v12 = *v11;
  if (*v11)
    v13 = (v12 - 48) >= 0xA;
  else
    v13 = 0;
  if (!v13)
    goto LABEL_26;
  if (v12 != 95 && (v12 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v15 = v11;
  do
  {
    v17 = *v15++;
    v16 = v17;
    v18 = (v17 & 0xFFFFFFDF) - 65;
    v19 = v17 - 48;
  }
  while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
  if (v16)
  {
LABEL_26:
    v31 = "usd/clipsAPI.cpp";
    v32 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipTemplateActiveOffset";
    v33 = 633;
    v34 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateActiveOffset(const double"
                            ", const std::string &)";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v31, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v24 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v24)
    v24 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v25 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v25)
    v25 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a2, (_QWORD *)v25 + 9, (uint64_t)&v30);
  v22 = sub_20C369C78((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v24 + 8), &v36, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v30);
  if ((v30 & 7) != 0)
  {
    v26 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  if ((v34 & 7) != 0)
  {
    v28 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
  sub_20BFD265C(&v33);
  if (v32)
    sub_20C35C614(v32);
  return v22;
}

void sub_20C368058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStartTime(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0((uint64_t)this, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStartTime((uint64_t)this, (uint64_t)a2, (uint64_t)EmptyString);
}

void sub_20C36816C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStartTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipTemplateStartTime";
    v34 = 648;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStartTime(double *, const"
                            " std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipTemplateStartTime";
    v34 = 648;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateStartTime(double *, const"
                            " std::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 7, (uint64_t)&v31);
  v23 = sub_20C369BE4((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C3683BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStartTime(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0((uint64_t)this, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStartTime((uint64_t)this, (uint64_t)EmptyString, a2);
}

void sub_20C3684D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStartTime(uint64_t a1, uint64_t a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  char **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  BOOL v13;
  char *v15;
  char v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v24;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t (*v36)(_QWORD, uint64_t);

  v36 = *(uint64_t (**)(_QWORD, uint64_t))&a3;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v31);
  v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  v7 = v31;
  v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
  sub_20BFD265C(&v31);
  if (v7 == v8)
    return 0;
  v9 = *(unsigned __int8 *)(a2 + 23);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 8);
  if (!v9)
  {
    v31 = "usd/clipsAPI.cpp";
    v32 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipTemplateStartTime";
    v33 = 663;
    v34 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStartTime(const double, c"
                            "onst std::string &)";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v11 = *(char **)a2;
  if (v10 >= 0)
    v11 = (char *)a2;
  v12 = *v11;
  if (*v11)
    v13 = (v12 - 48) >= 0xA;
  else
    v13 = 0;
  if (!v13)
    goto LABEL_26;
  if (v12 != 95 && (v12 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v15 = v11;
  do
  {
    v17 = *v15++;
    v16 = v17;
    v18 = (v17 & 0xFFFFFFDF) - 65;
    v19 = v17 - 48;
  }
  while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
  if (v16)
  {
LABEL_26:
    v31 = "usd/clipsAPI.cpp";
    v32 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipTemplateStartTime";
    v33 = 663;
    v34 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateStartTime(const double, c"
                            "onst std::string &)";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v31, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v24 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v24)
    v24 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v25 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v25)
    v25 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a2, (_QWORD *)v25 + 7, (uint64_t)&v30);
  v22 = sub_20C369C78((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v24 + 8), &v36, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v30);
  if ((v30 & 7) != 0)
  {
    v26 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  if ((v34 & 7) != 0)
  {
    v28 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
  sub_20BFD265C(&v33);
  if (v32)
    sub_20C35C614(v32);
  return v22;
}

void sub_20C368720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateEndTime(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0((uint64_t)this, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateEndTime((uint64_t)this, (uint64_t)a2, (uint64_t)EmptyString);
}

void sub_20C368834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateEndTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  char **v7;
  char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int v13;
  BOOL v14;
  char *v16;
  char v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  _BOOL8 v23;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v33;
  uint64_t v34;
  unint64_t v35;
  char v36;

  v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v32);
  v7 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v6);
  v8 = v32;
  v9 = *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  if (v8 == v9)
    return 0;
  v10 = *(unsigned __int8 *)(a3 + 23);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
  {
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipTemplateEndTime";
    v34 = 678;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateEndTime(double *, const s"
                            "td::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v12 = *(char **)a3;
  if (v11 >= 0)
    v12 = (char *)a3;
  v13 = *v12;
  if (*v12)
    v14 = (v13 - 48) >= 0xA;
  else
    v14 = 0;
  if (!v14)
    goto LABEL_26;
  if (v13 != 95 && (v13 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v16 = v12;
  do
  {
    v18 = *v16++;
    v17 = v18;
    v19 = (v18 & 0xFFFFFFDF) - 65;
    v20 = v18 - 48;
  }
  while (v18 == 95 || v19 < 0x1A || v20 < 0xA);
  if (v17)
  {
LABEL_26:
    v32 = "usd/clipsAPI.cpp";
    v33 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetClipTemplateEndTime";
    v34 = 678;
    v35 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::GetClipTemplateEndTime(double *, const s"
                            "td::string &) const";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v32, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v25)
    v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v26 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v26)
    v26 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a3, (_QWORD *)v26 + 6, (uint64_t)&v31);
  v23 = sub_20C369BE4((uint64_t)&v32, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v25 + 8), a2, &v31);
  if ((v31 & 7) != 0)
  {
    v27 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  if ((v35 & 7) != 0)
  {
    v29 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v34 + 1);
  sub_20BFD265C(&v34);
  if (v33)
    sub_20C35C614(v33);
  return v23;
}

void sub_20C368A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateEndTime(pxrInternal__aapl__pxrReserved__::UsdClipsAPI *this, double a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v9;
  uint64_t *EmptyString;
  uint64_t v11;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0((uint64_t)this, &v11);
  v5 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v6 = v11;
  v7 = *v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  sub_20BFD265C(&v11);
  if (v6 == v7)
    return 0;
  v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if (!v9)
    v9 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C369290(&pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames);
  if ((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
  return pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateEndTime((uint64_t)this, (uint64_t)EmptyString, a2);
}

void sub_20C368B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateEndTime(uint64_t a1, uint64_t a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  char **v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  BOOL v13;
  char *v15;
  char v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v24;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t (*v36)(_QWORD, uint64_t);

  v36 = *(uint64_t (**)(_QWORD, uint64_t))&a3;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C3630C0(a1, &v31);
  v6 = (char **)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  v7 = v31;
  v8 = *v6;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
  sub_20BFD265C(&v31);
  if (v7 == v8)
    return 0;
  v9 = *(unsigned __int8 *)(a2 + 23);
  v10 = (char)v9;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a2 + 8);
  if (!v9)
  {
    v31 = "usd/clipsAPI.cpp";
    v32 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipTemplateEndTime";
    v33 = 693;
    v34 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateEndTime(const double, con"
                            "st std::string &)";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Empty clip set name not allowed");
    return 0;
  }
  v11 = *(char **)a2;
  if (v10 >= 0)
    v11 = (char *)a2;
  v12 = *v11;
  if (*v11)
    v13 = (v12 - 48) >= 0xA;
  else
    v13 = 0;
  if (!v13)
    goto LABEL_26;
  if (v12 != 95 && (v12 & 0xFFFFFFDF) - 65 > 0x19)
    goto LABEL_26;
  v15 = v11;
  do
  {
    v17 = *v15++;
    v16 = v17;
    v18 = (v17 & 0xFFFFFFDF) - 65;
    v19 = v17 - 48;
  }
  while (v17 == 95 || v18 < 0x1A || v19 < 0xA);
  if (v16)
  {
LABEL_26:
    v31 = "usd/clipsAPI.cpp";
    v32 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"SetClipTemplateEndTime";
    v33 = 693;
    v34 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdClipsAPI::SetClipTemplateEndTime(const double, con"
                            "st std::string &)";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 1, (pxrInternal__aapl__pxrReserved__ *)"Clip set name must be a valid identifier (got '%s')");
    return 0;
  }
  sub_20C35C4F8((uint64_t)&v31, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
  v24 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v24)
    v24 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v25 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  if (!v25)
    v25 = sub_20C28BB20(&pxrInternal__aapl__pxrReserved__::UsdClipsAPIInfoKeys);
  sub_20C3639F0((const void **)a2, (_QWORD *)v25 + 6, (uint64_t)&v30);
  v22 = sub_20C369C78((uint64_t)&v31, (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v24 + 8), &v36, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v30);
  if ((v30 & 7) != 0)
  {
    v26 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  if ((v34 & 7) != 0)
  {
    v28 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
  sub_20BFD265C(&v33);
  if (v32)
    sub_20C35C614(v32);
  return v22;
}

void sub_20C368DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C368E40()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C368F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C368F60(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C368FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_20C368FF0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;

  v2 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (!v2 || (*((_BYTE *)v2 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::Usd_PrimData::GetPrimIndex(v2);
}

uint64_t (*sub_20C369024(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return sub_20C369078;
}

uint64_t sub_20C369078(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(sub_20BEB47BC(v2) + 14))
    return *a1;
  return 0;
}

BOOL sub_20C3690B8(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::VtDictionary>(*(_QWORD *)v8, a1, a2, a4, 1, a3);
}

uint64_t sub_20C369120(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, const pxrInternal__aapl__pxrReserved__::VtDictionary *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetEditTargetMappedMetadata<pxrInternal__aapl__pxrReserved__::VtDictionary>(*(_QWORD **)v8, (int *)a1, a2, a4, a3);
}

uint64_t sub_20C369184(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t (**a3)(_QWORD, uint64_t), const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v11[3])(_QWORD, uint64_t);

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD **)v8;
  v11[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C524D30;
  v11[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C5375B8;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v9, (int *)a1, a2, a4, v11);
}

uint64_t sub_20C369210(uint64_t a1, uint64_t a2)
{
  sub_20C02F8C8(a2, *(_QWORD *)(a1 + 8));
  return 1;
}

uint64_t sub_20C369234(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;

  result = sub_20BFE5104(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 4) != 0)
      v6 = (unsigned __int8 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v6 = *(unsigned __int8 **)a2;
    return pxrInternal__aapl__pxrReserved__::SdfListOp<std::string>::operator==(v6, *(_QWORD **)(a1 + 8));
  }
  return result;
}

unint64_t sub_20C369290(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType *v2;
  pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType *v3;
  unsigned int *v5;
  unsigned int v6;
  void **v8;

  v2 = sub_20C369318();
  v3 = v2;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  if (v2)
  {
    v8 = (void **)((char *)v2 + 8);
    sub_20BEEB2B8(&v8);
    if ((*(_QWORD *)v3 & 7) != 0)
    {
      v5 = (unsigned int *)(*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(v3);
  }
  return atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType *sub_20C369318()
{
  pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::UsdClipsAPISetNames_StaticTokenType::UsdClipsAPISetNames_StaticTokenType(v0);
  return v0;
}

void sub_20C369344(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C369358(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t (**a3)(_QWORD, uint64_t), const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v11[3])(_QWORD, uint64_t);

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD **)v8;
  v11[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C524DC0;
  v11[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C5375F0;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v9, (int *)a1, a2, a4, v11);
}

uint64_t sub_20C3693E4(uint64_t a1, _QWORD *a2)
{
  sub_20C1D1D28(a2, *(_QWORD *)(a1 + 8));
  return 1;
}

uint64_t sub_20C369408(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t *v6;

  result = sub_20BFED500(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 4) != 0)
      v6 = (uint64_t *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
    else
      v6 = *(uint64_t **)a2;
    return sub_20C00A5B4(v6, *(_QWORD *)(a1 + 8));
  }
  return result;
}

BOOL sub_20C369464(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(*(_QWORD *)v8, a1, a2, a4, 1, a3);
}

uint64_t sub_20C3694CC(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t (**a3)(_QWORD, uint64_t), const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v11[3])(_QWORD, uint64_t);

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD **)v8;
  v11[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C524DB0;
  v11[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C537628;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v9, (int *)a1, a2, a4, v11);
}

uint64_t sub_20C369558(uint64_t a1, uint64_t a2)
{
  sub_20C1D1BCC(a2, *(__int128 **)(a1 + 8));
  return 1;
}

uint64_t sub_20C36957C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;
  uint64_t v5;
  unsigned __int8 *v6;

  result = sub_20BFED488(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 4) != 0)
      v6 = (unsigned __int8 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v6 = *(unsigned __int8 **)a2;
    return sub_20C009E8C(v6, *(unsigned __int8 **)(a1 + 8));
  }
  return result;
}

BOOL sub_20C3695D8(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetTypeSpecificResolvedMetadata<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(*(_QWORD *)v8, a1, a2, a4, 1, a3);
}

uint64_t sub_20C369640(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t (**a3)(_QWORD, uint64_t), const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v11[3])(_QWORD, uint64_t);

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD **)v8;
  v11[2] = (uint64_t (**)(_QWORD, uint64_t))MEMORY[0x24BEDB770];
  v11[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C537660;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v9, (int *)a1, a2, a4, v11);
}

uint64_t sub_20C3696CC(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  BOOL v5;

  v3 = **(_BYTE **)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
    v5 = (*(_QWORD *)(a2 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  *(_QWORD *)(a2 + 8) = &unk_24C51FCF3;
  *(_BYTE *)a2 = v3;
  return 1;
}

uint64_t sub_20C36972C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t result;
  uint64_t v5;

  v2 = a2;
  result = sub_20BFB1AC0(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)v2 + 1);
    if ((v5 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    return *(unsigned __int8 *)v2 == **(unsigned __int8 **)(a1 + 8);
  }
  return result;
}

BOOL sub_20C36978C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  __int16 v12;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD *)v8;
  v11[2] = MEMORY[0x24BEDB770];
  v12 = 0;
  v11[0] = &unk_24C52B6E8;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

uint64_t sub_20C369820(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t (**a3)(_QWORD, uint64_t), const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v11[3])(_QWORD, uint64_t);

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD **)v8;
  v11[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C516910;
  v11[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C537698;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v9, (int *)a1, a2, a4, v11);
}

uint64_t sub_20C3698AC(uint64_t a1, uint64_t a2)
{
  sub_20C1D1478(a2, *(_QWORD *)(a1 + 8));
  return 1;
}

BOOL sub_20C3698D0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  BOOL v19;
  _BOOL8 v20;

  if (!sub_20BFB4608(a2))
    return 0;
  v4 = *((_QWORD *)a2 + 1);
  if ((v4 & 4) != 0)
    v5 = (unsigned __int8 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
  else
    v5 = *(unsigned __int8 **)a2;
  v6 = *(unsigned __int8 ***)(a1 + 8);
  v7 = v5[23];
  if ((v7 & 0x80u) == 0)
    v8 = (unsigned __int8 *)v5[23];
  else
    v8 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
  v9 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  v10 = (char)v9;
  if ((char)v9 < 0)
    v9 = v6[1];
  if (v8 != v9)
    return 0;
  if (v10 >= 0)
    v11 = *(unsigned __int8 **)(a1 + 8);
  else
    v11 = *v6;
  if ((v7 & 0x80) != 0)
    return memcmp(*(const void **)v5, v11, *((_QWORD *)v5 + 1)) == 0;
  if (!v5[23])
    return 1;
  v12 = v7 - 1;
  do
  {
    v14 = *v5++;
    v13 = v14;
    v16 = *v11++;
    v15 = v16;
    v18 = v12-- != 0;
    v19 = v13 == v15;
    v20 = v13 == v15;
  }
  while (v19 && v18);
  return v20;
}

BOOL sub_20C3699B0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  __int16 v12;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD *)v8;
  v11[2] = &stru_24C516910;
  v12 = 0;
  v11[0] = &unk_24C52D278;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

uint64_t sub_20C369A44(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t (**a3)(_QWORD, uint64_t), const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v11[3])(_QWORD, uint64_t);

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD **)v8;
  v11[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C51DA98;
  v11[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C5376D0;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v9, (int *)a1, a2, a4, v11);
}

uint64_t sub_20C369AD0(uint64_t a1, _QWORD *a2)
{
  sub_20BF5A130(a2, *(_QWORD *)(a1 + 8));
  return 1;
}

uint64_t sub_20C369AF4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;

  result = sub_20BF5A0F8(a2);
  if ((_DWORD)result)
  {
    v5 = *((_QWORD *)a2 + 1);
    if ((v5 & 4) != 0)
      v6 = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v5 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(a2);
    else
      v6 = *(_QWORD **)a2;
    return sub_20BF5A4C0(v6, *(_QWORD *)(a1 + 8));
  }
  return result;
}

BOOL sub_20C369B50(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  __int16 v12;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD *)v8;
  v11[2] = &stru_24C51DA98;
  v12 = 0;
  v11[0] = &unk_24C52DF20;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

BOOL sub_20C369BE4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  __int16 v12;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD *)v8;
  v11[2] = MEMORY[0x24BEDB780];
  v12 = 0;
  v11[0] = &unk_24C52D858;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetStrongestResolvedMetadata(v9, a1, a2, a4, 1, (uint64_t)v11);
}

uint64_t sub_20C369C78(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t (**a3)(_QWORD, uint64_t), const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t (**v11[3])(_QWORD, uint64_t);

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8 || (*(_BYTE *)(v8 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v9 = *(_QWORD **)v8;
  v11[2] = (uint64_t (**)(_QWORD, uint64_t))MEMORY[0x24BEDB780];
  v11[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C537708;
  v11[1] = a3;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_SetMetadataImpl<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(v9, (int *)a1, a2, a4, v11);
}

uint64_t sub_20C369D04(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = **(_QWORD **)(a1 + 8);
  v4 = a2[1];
  if (v4)
    v5 = (a2[1] & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(_QWORD *))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a2);
  a2[1] = &unk_24C52064B;
  *a2 = v3;
  return 1;
}

uint64_t sub_20C369D6C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  v2 = (uint64_t)a2;
  result = sub_20BF78EEC(a2);
  if ((_DWORD)result)
  {
    v5 = *(_QWORD *)(v2 + 8);
    if ((v5 & 4) != 0)
      v2 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    return *(double *)v2 == **(double **)(a1 + 8);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<BOOL>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<BOOL>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C369FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<BOOL>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36A1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<unsigned char>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<unsigned char>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36A410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned char>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36A630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<int>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<int>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36A850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<int>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__17UsdAttributeQuery4_GetINS_7VtArrayIiEEEEbPT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void sub_20C36AA70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<unsigned int>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<unsigned int>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36AC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned int>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36AEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<long long>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<long long>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36B0D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<long long>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36B2F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<unsigned long long>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<unsigned long long>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36B510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<unsigned long long>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36B730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::pxr_half::half>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::pxr_half::half>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36B950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::pxr_half::half>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36BB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<float>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<float>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36BD90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<float>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<float>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__17UsdAttributeQuery4_GetINS_7VtArrayIfEEEEbPT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void sub_20C36BFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<double>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<double>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36C1D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<double>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<double>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36C3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfTimeCode>(*(_QWORD *)v6, a1 + 32, (_DWORD *)a1, (double *)a2, a3);
}

void sub_20C36C610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfTimeCode>>(*(_QWORD *)v6, a1 + 32, (_DWORD *)a1, (uint64_t)a2, a3);
}

void sub_20C36C830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<std::string>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<std::string>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36CA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<std::string>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36CC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::TfToken>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36CE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::TfToken>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36D0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfAssetPath>(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v6, (uint64_t)(a1 + 4), (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36D2D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(pxrInternal__aapl__pxrReserved__ **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;

  v6 = a1[1];
  if (!v6 || (*((_BYTE *)v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(a1[1], a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfAssetPath>>(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v6, (uint64_t)(a1 + 4), (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a1, (uint64_t)a2, a3);
}

void sub_20C36D4F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36D710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfOpaqueValue>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36D930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::SdfPathExpression>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36DB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::SdfPathExpression>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t)a2, a3);
}

void sub_20C36DD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfMatrix2d>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36DF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix2d>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36E1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfMatrix3d>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36E3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix3d>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36E5F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfMatrix4d>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36E810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfMatrix4d>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36EA30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfQuath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfQuath>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36EC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuath>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36EE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfQuatf>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfQuatf>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36F090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatf>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__17UsdAttributeQuery4_GetINS_7VtArrayINS_7GfQuatfEEEEEbPT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void sub_20C36F2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfQuatd>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfQuatd>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36F4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfQuatd>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36F6F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec2i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2i>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36F910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2i>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36FB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec2h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2h>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36FD50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2h>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C36FF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec2f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2f>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C370190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2f>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C3703B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec2d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec2d>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C3705D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec2d>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C3707F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec3i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3i>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C370A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3i>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C370C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec3h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3h>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C370E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3h>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__17UsdAttributeQuery4_GetINS_7VtArrayINS_7GfVec3hEEEEEbPT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void sub_20C371070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec3f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3f>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__17UsdAttributeQuery4_GetINS_7GfVec3fEEEbPT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void sub_20C371290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3f>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__17UsdAttributeQuery4_GetINS_7VtArrayINS_7GfVec3fEEEEEbPT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void sub_20C3714B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec3d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec3d>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__17UsdAttributeQuery4_GetINS_7GfVec3dEEEbPT_NS_11UsdTimeCodeE(a1, a2, a3);
}

void sub_20C3716D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec3d>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C3718F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec4i>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4i>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C371B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4i>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C371D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec4h>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4h>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C371F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4h>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C372170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec4f>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4f>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C372390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4f>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C3725B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::GfVec4d>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::GfVec4d>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C3727D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Get<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo<pxrInternal__aapl__pxrReserved__::VtArray<pxrInternal__aapl__pxrReserved__::GfVec4d>>(*(_QWORD *)v6, a1 + 32, a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, uint64_t, double, double, double))a2, a3);
}

void sub_20C3729F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v10;

  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_20BFD6EA4((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 3) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *((_QWORD *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20C361C1C((uint64_t)this + 32);
  *((_QWORD *)this + 14) = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Initialize(this, v10);
  return this;
}

void sub_20C372AC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **v3;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **v4;

  v4 = v3;
  sub_20BE7D37C(v4, 0);
  sub_20C35FEE4(v2);
  sub_20C372B54(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Initialize(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v3;
  uint64_t v4;

  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2))
  {
    v4 = *((_QWORD *)this + 1);
    if (!v4 || (*(_BYTE *)(v4 + 57) & 8) != 0)
      pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v3);
    pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfo(*(_QWORD *)v4, this, (_DWORD *)this + 8, 0);
  }
}

uint64_t sub_20C372B54(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a2, a3, (uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(this, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return this;
}

{
  unsigned int *v4;
  unsigned int v5;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute(a2, a3, (uint64_t)&v7);
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(this, (const pxrInternal__aapl__pxrReserved__::UsdAttribute *)&v7);
  if ((v11 & 7) != 0)
  {
    v4 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
  return this;
}

void sub_20C372C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C372CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C372B54((uint64_t)&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::UsdAttribute *a2, const pxrInternal__aapl__pxrReserved__::UsdResolveTarget *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_DWORD *)this = *(_DWORD *)a2;
  v6 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 48);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  sub_20BFD6E54((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_20BFD6EA4((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  v9 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 3) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *((_QWORD *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20C361C1C((uint64_t)this + 32);
  *((_QWORD *)this + 14) = 0;
  pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Initialize(this, a3);
  return this;
}

void sub_20C372DB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **v3;

  sub_20BE7D37C(v3, 0);
  sub_20C35FEE4(v2);
  sub_20C372B54(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Initialize(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::UsdResolveTarget *a2)
{
  uint64_t *v4;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t *v13;
  const char *Text;
  uint64_t *Path;
  const char *v16;
  _QWORD v17[4];
  char v18;

  if (*(_QWORD *)a2)
  {
    if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(this, a2))
    {
      v4 = sub_20C3734F4((uint64_t)this);
      if (*v4 == *pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)a2))
      {
        v6 = *((_QWORD *)this + 1);
        if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
          pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), v5);
        pxrInternal__aapl__pxrReserved__::UsdStage::_GetResolveInfoWithResolveTarget(*(_QWORD *)v6, this, a2, (_DWORD *)this + 8, 0);
        v7 = operator new(0x60uLL);
        v8 = *((_QWORD *)a2 + 1);
        *v7 = *(_QWORD *)a2;
        v7[1] = v8;
        if (v8)
        {
          v9 = (unint64_t *)(v8 + 8);
          do
            v10 = __ldxr(v9);
          while (__stxr(v10 + 1, v9));
        }
        v11 = *((_OWORD *)a2 + 4);
        *((_OWORD *)v7 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)v7 + 4) = v11;
        *((_OWORD *)v7 + 5) = *((_OWORD *)a2 + 5);
        v12 = *((_OWORD *)a2 + 2);
        *((_OWORD *)v7 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)v7 + 2) = v12;
        sub_20BE7D37C((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **)this + 14, (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v7);
      }
      else
      {
        v17[0] = "usd/attributeQuery.cpp";
        v17[1] = "_Initialize";
        v17[2] = 129;
        v17[3] = "void pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Initialize(const UsdResolveTarget &)";
        v18 = 0;
        v13 = sub_20C3734F4((uint64_t)this);
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)v13);
        Path = pxrInternal__aapl__pxrReserved__::PcpPrimIndex::GetPath(*(pxrInternal__aapl__pxrReserved__::PcpPrimIndex **)a2);
        v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)Path);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid resolve target for attribute '%s'. The given resolve target is only valid for attributes on the prim '%s'.", Text, v16);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::_Initialize(this, a2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::CreateQueries@<X0>(const pxrInternal__aapl__pxrReserved__::UsdPrim *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v8;
  _BYTE v9[120];

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  result = sub_20C373004(a3, (a2[1] - *a2) >> 3);
  v7 = *a2;
  v8 = a2[1];
  while (v7 != v8)
  {
    pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery((pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *)v9, a1, v7);
    sub_20C3730B4(a3, (uint64_t)v9);
    result = sub_20C373B34((uint64_t)v9);
    v7 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v7 + 8);
  }
  return result;
}

void sub_20C372FD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C373C0C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C373004(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xEEEEEEEEEEEEEEEFLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x222222222222223)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20C373D00(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 120 * v6;
    sub_20C373C7C(a1, v7);
    return sub_20C373DF4((uint64_t)v7);
  }
  return result;
}

void sub_20C3730A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C373DF4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C3730B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x222222222222222)
      sub_20BDDF694();
    v11 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x111111111111111)
      v13 = 0x222222222222222;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)sub_20C373D00(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[120 * v10];
    v18 = &v14[120 * v13];
    sub_20C373D44((uint64_t)v16, a2);
    v17 = v16 + 120;
    sub_20C373C7C(a1, &v15);
    v9 = a1[1];
    result = sub_20C373DF4((uint64_t)&v15);
  }
  else
  {
    result = sub_20C373D44(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 120;
    a1[1] = v7 + 120;
  }
  a1[1] = v9;
  return result;
}

void sub_20C3731C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C373DF4((uint64_t)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  *(_DWORD *)this = 3;
  *((_QWORD *)this + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)this + 5);
  *((_QWORD *)this + 3) = 0;
  sub_20C361C1C((uint64_t)this + 32);
  *((_QWORD *)this + 14) = 0;
  return this;
}

void sub_20C373228(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C372B54(v1);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::UsdAttributeQuery(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  __int128 v16;
  int v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  *(_DWORD *)this = *(_DWORD *)a2;
  v4 = *((_QWORD *)a2 + 1);
  *((_QWORD *)this + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)this + 4, (_DWORD *)a2 + 4);
  sub_20BFD6EA4((_DWORD *)this + 5, (_DWORD *)a2 + 5);
  v7 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 3) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *((_QWORD *)this + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  v10 = *((_QWORD *)a2 + 5);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 5) = v10;
  if (v10)
  {
    v11 = (unsigned int *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *((_QWORD *)a2 + 7);
  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  *((_QWORD *)this + 7) = v13;
  if (v13)
  {
    v14 = (unsigned int *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = *((_OWORD *)a2 + 5);
  *((_OWORD *)this + 4) = *((_OWORD *)a2 + 4);
  *((_OWORD *)this + 5) = v16;
  sub_20BFD6E54((_DWORD *)this + 24, (_DWORD *)a2 + 24);
  sub_20BFD6EA4((_DWORD *)this + 25, (_DWORD *)a2 + 25);
  v17 = *((_DWORD *)a2 + 26);
  v18 = *((_BYTE *)a2 + 108);
  *((_QWORD *)this + 14) = 0;
  *((_BYTE *)this + 108) = v18;
  *((_DWORD *)this + 26) = v17;
  v19 = *((_QWORD *)a2 + 14);
  if (v19)
  {
    v20 = operator new(0x60uLL);
    v21 = *(_QWORD *)(v19 + 8);
    *v20 = *(_QWORD *)v19;
    v20[1] = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    *((_OWORD *)v20 + 1) = *(_OWORD *)(v19 + 16);
    v24 = *(_OWORD *)(v19 + 32);
    v25 = *(_OWORD *)(v19 + 48);
    v26 = *(_OWORD *)(v19 + 80);
    *((_OWORD *)v20 + 4) = *(_OWORD *)(v19 + 64);
    *((_OWORD *)v20 + 5) = v26;
    *((_OWORD *)v20 + 2) = v24;
    *((_OWORD *)v20 + 3) = v25;
    sub_20BE7D37C((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **)this + 14, (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v20);
  }
  return this;
}

void sub_20C3733B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **v3;

  sub_20BE7D37C(v3, 0);
  sub_20C35FEE4(v2);
  sub_20C372B54(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;
  __int128 v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  if (v7)
    sub_20C35C614(v7);
  sub_20C01A074((int *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20C01A0C8((int *)(a1 + 20), (_DWORD *)(a2 + 20));
  sub_20BF32220((_QWORD *)(a1 + 24), (_QWORD *)(a2 + 24));
  sub_20BF2D298(a1 + 32, a2 + 32);
  sub_20BF2D298(a1 + 48, a2 + 48);
  v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v8;
  sub_20C01A074((int *)(a1 + 96), (_DWORD *)(a2 + 96));
  sub_20C01A0C8((int *)(a1 + 100), (_DWORD *)(a2 + 100));
  v9 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v9;
  v10 = *(_QWORD *)(a2 + 112);
  if (v10)
  {
    v11 = operator new(0x60uLL);
    v12 = *(_QWORD *)(v10 + 8);
    *v11 = *(_QWORD *)v10;
    v11[1] = v12;
    if (v12)
    {
      v13 = (unint64_t *)(v12 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    *((_OWORD *)v11 + 1) = *(_OWORD *)(v10 + 16);
    v15 = *(_OWORD *)(v10 + 32);
    v16 = *(_OWORD *)(v10 + 48);
    v17 = *(_OWORD *)(v10 + 80);
    *((_OWORD *)v11 + 4) = *(_OWORD *)(v10 + 64);
    *((_OWORD *)v11 + 5) = v17;
    *((_OWORD *)v11 + 2) = v15;
    *((_OWORD *)v11 + 3) = v16;
    sub_20BE7D37C((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **)(a1 + 112), (pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)v11);
  }
  return a1;
}

uint64_t *sub_20C3734F4(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v4;

  v2 = a1 + 16;
  v3 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
  if (v3)
    return (uint64_t *)v2;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    return (uint64_t *)(v4 + 16);
  return pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v3);
}

uint64_t sub_20C373548(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, double a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetValueFromResolveInfo(*(pxrInternal__aapl__pxrReserved__::UsdStage **)v6, (uint64_t *)(a1 + 32), (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double))a1, (uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **, const pxrInternal__aapl__pxrReserved__::SdfPath *, double, double, double))a2, a3);
}

void sub_20C37374C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20C35FEE4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamples(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  char v8;
  uint64_t v9;
  char v10;

  v4 = *(_QWORD *)(a1 + 8);
  if (!v4 || (*(_BYTE *)(v4 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  v5 = *(_QWORD *)v4;
  v7 = 0xFFF0000000000000;
  v8 = 0;
  v9 = 0x7FF0000000000000;
  v10 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInIntervalFromResolveInfo(v5, a1 + 32, a1, (uint64_t)&v7, (uint64_t)a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetTimeSamplesInInterval(uint64_t a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a1 + 8);
  if (!v6 || (*(_BYTE *)(v6 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 8), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInIntervalFromResolveInfo(*(_QWORD *)v6, a1 + 32, a1, (uint64_t)a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetUnionedTimeSamples(pxrInternal__aapl__pxrReserved__::UsdObject **a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = 0xFFF0000000000000;
  v4 = 0;
  v5 = 0x7FF0000000000000;
  v6 = 0;
  return pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetUnionedTimeSamplesInInterval(a1, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetUnionedTimeSamplesInInterval(pxrInternal__aapl__pxrReserved__::UsdObject **a1, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::UsdObject *v3;
  pxrInternal__aapl__pxrReserved__::UsdObject *v4;
  char v7;
  uint64_t v8;
  char TimeSamplesInIntervalFromResolveInfo;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  uint64_t v22;

  *(_QWORD *)(a3 + 8) = *(_QWORD *)a3;
  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4)
  {
    v7 = 1;
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    __p = 0;
    v18 = 0;
    v7 = 1;
    v19 = 0;
    do
    {
      if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined(v3, a2) & 1) != 0)
      {
        pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(v3, a2, &v15);
        v8 = sub_20C348E08(&v15);
        TimeSamplesInIntervalFromResolveInfo = pxrInternal__aapl__pxrReserved__::UsdStage::_GetTimeSamplesInIntervalFromResolveInfo(v8, (uint64_t)v3 + 32, (uint64_t)v3, (uint64_t)a2, (uint64_t)&v20);
        v10 = v16;
        if (v16)
        {
          v11 = (unsigned int *)(v16 + 8);
          do
          {
            v12 = __ldxr(v11);
            v13 = v12 - 1;
          }
          while (__stlxr(v13, v11));
          if (!v13)
            (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
        }
        pxrInternal__aapl__pxrReserved__::Usd_MergeTimeSamples((void **)a3, (double **)&v20, &__p);
        v7 &= TimeSamplesInIntervalFromResolveInfo;
      }
      v3 = (pxrInternal__aapl__pxrReserved__::UsdObject *)((char *)v3 + 120);
    }
    while (v3 != v4);
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    if (v20)
    {
      v21 = v20;
      operator delete(v20);
    }
  }
  return v7 & 1;
}

void sub_20C373984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetNumTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetNumTimeSamplesFromResolveInfo(*(_QWORD *)v3, (uint64_t)this + 32, this);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::GetBracketingTimeSamples(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, double a2, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a3, double *a4, BOOL *a5)
{
  uint64_t v10;

  v10 = *((_QWORD *)this + 1);
  if (!v10 || (*(_BYTE *)(v10 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a3);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_GetBracketingTimeSamplesFromResolveInfo(*(_QWORD *)v10, (uint64_t)this + 32, this, 0, (double *)a3, a4, a5, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasValue(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  return *((_DWORD *)this + 26) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasAuthoredValueOpinion(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  return (*((_DWORD *)this + 26) - 2) < 3 || *((_BYTE *)this + 108) != 0;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::HasAuthoredValue(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this)
{
  return (*((_DWORD *)this + 26) - 2) < 3;
}

BOOL pxrInternal__aapl__pxrReserved__::UsdAttributeQuery::ValueMightBeTimeVarying(pxrInternal__aapl__pxrReserved__::UsdAttributeQuery *this, const pxrInternal__aapl__pxrReserved__::Usd_PrimData *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 1);
  if (!v3 || (*(_BYTE *)(v3 + 57) & 8) != 0)
    pxrInternal__aapl__pxrReserved__::Usd_ThrowExpiredPrimAccessError(*((pxrInternal__aapl__pxrReserved__ **)this + 1), a2);
  return pxrInternal__aapl__pxrReserved__::UsdStage::_ValueMightBeTimeVaryingFromResolveInfo(*(_QWORD *)v3, (uint64_t)this + 32, (uint64_t)this);
}

uint64_t sub_20C373B34(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;

  sub_20BE7D37C((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource **)(a1 + 112), 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 100));
  sub_20BFD265C((_DWORD *)(a1 + 96));
  v2 = *(unsigned int **)(a1 + 56);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v6 = *(unsigned int **)(a1 + 40);
  if (v6)
  {
    v7 = v6 + 2;
    do
    {
      v8 = __ldxr(v7);
      v9 = v8 - 1;
    }
    while (__stlxr(v9, v7));
    if (!v9)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 8))(v6);
  }
  v10 = *(_QWORD *)(a1 + 24);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v13 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v13)
    sub_20C35C614(v13);
  return a1;
}

void sub_20C373C0C(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = sub_20C373B34(v4 - 120);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C373C7C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 120;
    result = sub_20C373D44(result - 120, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_20C373D00(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x222222222222223)
    sub_20BDDF5B4();
  return operator new(120 * a2);
}

uint64_t sub_20C373D44(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  int v5;
  uint64_t v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD38DC((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  sub_20BFD38A4((_DWORD *)(a1 + 96), (_DWORD *)(a2 + 96));
  sub_20BFD38DC((_DWORD *)(a1 + 100), (_DWORD *)(a2 + 100));
  v5 = *(_DWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 108) = *(_BYTE *)(a2 + 108);
  *(_DWORD *)(a1 + 104) = v5;
  v6 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a1 + 112) = v6;
  return a1;
}

uint64_t sub_20C373DF4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 120;
    sub_20C373B34(i - 120);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::~UsdCollectionAPI(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Get(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  char v8;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  const char *Text;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  v6 = sub_20C369024(a1);
  if (v8 & 1 | (unint64_t)v6)
  {
    v24 = 0;
    if ((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IsCollectionAPIPath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v24, v7) & 1) != 0)
    {
      v9 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v23);
      pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, (uint64_t)&v25);
      sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, &v24);
      *(_QWORD *)a3 = off_24C537740;
      if ((v28 & 7) != 0)
      {
        v10 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stlxr(v11 - 2, v10));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_20BFD265C(&v27);
      if (v26)
        sub_20C35C614(v26);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_20BFD265C(&v23);
    }
    else
    {
      v25 = "usd/collectionAPI.cpp";
      v26 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
      v27 = 63;
      v28 = (unint64_t)"static UsdCollectionAPI pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Get(const UsdS"
                              "tagePtr &, const SdfPath &)";
      v29 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid collection path <%s>.", Text);
      LODWORD(v25) = 1;
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v27 + 1);
      v28 = 0;
      v23 = 0;
      sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, &v23);
      *(_QWORD *)a3 = off_24C537740;
      if ((v23 & 7) != 0)
      {
        v17 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
      if ((v28 & 7) != 0)
      {
        v19 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stlxr(v20 - 2, v19));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_20BFD265C(&v27);
      if (v26)
        sub_20C35C614(v26);
    }
    if ((v24 & 7) != 0)
    {
      v21 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
  }
  else
  {
    v25 = "usd/collectionAPI.cpp";
    v26 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"Get";
    v27 = 58;
    v28 = (unint64_t)"static UsdCollectionAPI pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Get(const UsdSta"
                            "gePtr &, const SdfPath &)";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid stage");
    LODWORD(v25) = 1;
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v27);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v27 + 1);
    v28 = 0;
    v24 = 0;
    sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v25, &v24);
    *(_QWORD *)a3 = off_24C537740;
    if ((v24 & 7) != 0)
    {
      v12 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stlxr(v13 - 2, v12));
    }
    if ((v28 & 7) != 0)
    {
      v14 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    sub_20BFD265C(&v27);
    if (v26)
      sub_20C35C614(v26);
  }
}

void sub_20C374160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  va_list va;

  va_start(va, a4);
  if ((a3 & 7) != 0)
  {
    v5 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  if ((a4 & 7) != 0)
  {
    v7 = (unsigned int *)(a4 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IsCollectionAPIPath(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t *Name;
  __int128 v6;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v8;
  unint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  uint64_t *EmptyString;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  std::string v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  std::string __p;
  char v31;

  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(this))
    return 0;
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName(this);
  if (*((char *)Name + 23) < 0)
  {
    sub_20BDDBFAC(&__p, (void *)*Name, Name[1]);
  }
  else
  {
    v6 = *(_OWORD *)Name;
    __p.__r_.__value_.__r.__words[2] = Name[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::TokenizeIdentifierAsTokens((unsigned __int8 *)&__p, (uint64_t *)&v28);
  v9 = *(_QWORD *)(v29 - 8);
  v27 = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
    {
      v27 = v9 & 0xFFFFFFFFFFFFFFF8;
      v9 &= 0xFFFFFFFFFFFFFFF8;
    }
  }
  if (!pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IsSchemaPropertyBaseName((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&v27, v8)&& (v12 = v28, (unint64_t)(v29 - (_QWORD)v28) >= 9)&& (*v12 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)sub_20C3749F0() & 0xFFFFFFFFFFFFFFF8))
  {
    v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C3749F0();
    if ((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
    if (*((char *)EmptyString + 23) < 0)
      v18 = EmptyString[1];
    else
      v18 = *((unsigned __int8 *)EmptyString + 23);
    std::string::basic_string(&v25, &__p, v18 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v26);
    v19 = *(_QWORD *)a2;
    v20 = *(_QWORD *)a2 & 7;
    if (&v26 == (uint64_t *)a2)
    {
      if (v20)
      {
        v23 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
    }
    else
    {
      if (v20)
      {
        v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
        do
          v22 = __ldxr(v21);
        while (__stlxr(v22 - 2, v21));
      }
      *(_QWORD *)a2 = v26;
      v26 = 0;
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v7 = 1;
    v9 = v27;
  }
  else
  {
    v7 = 0;
  }
  if ((v9 & 7) != 0)
  {
    v13 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  sub_20BEEB2B8((void ***)&v25);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_20C374414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  unsigned int *v27;
  unsigned int v28;

  if (a14 < 0)
    operator delete(__p);
  if ((v25 & 7) != 0)
  {
    v27 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  __p = &a17;
  sub_20BEEB2B8((void ***)&__p);
  if (a25 < 0)
    operator delete(a20);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Get@<X0>(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result;

  result = sub_20C37A850(a3, this, (uint64_t *)a2);
  *(_QWORD *)result = off_24C537740;
  return result;
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetAll(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v7;
  uint64_t *v8;
  uint64_t *v9;
  void **v10;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetStaticTfType(this);
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_GetMultipleApplyInstanceNames(this, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&qword_254988708, (uint64_t)&v8);
  v5 = v8;
  v6 = v9;
  if (v8 != v9)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)a2[1];
    do
    {
      if ((unint64_t)v7 >= a2[2])
      {
        v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)sub_20C37B4C4(a2, this, v5);
      }
      else
      {
        sub_20C37A850(v7, this, v5);
        *(_QWORD *)v7 = off_24C537740;
        v7 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v7 + 32);
        a2[1] = (uint64_t)v7;
      }
      a2[1] = (uint64_t)v7;
      ++v5;
    }
    while (v5 != v6);
  }
  v10 = (void **)&v8;
  sub_20BEEB2B8(&v10);
}

void sub_20C374578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C37B438((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetStaticTfType(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  unsigned __int8 v1;
  const std::type_info *v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254988710);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254988710))
  {
    __cxa_guard_release(&qword_254988710);
  }
  return &qword_254988708;
}

void sub_20C37461C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988710);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IsSchemaPropertyBaseName(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unsigned __int8 v2;
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *v5;
  int v6;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v7;
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v9;
  uint64_t *v10;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v11;
  uint64_t *v12;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v13;
  uint64_t *v14;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v15;
  uint64_t *v16;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_2549886F8);
  if ((v2 & 1) == 0)
  {
    v5 = this;
    v6 = __cxa_guard_acquire(&qword_2549886F8);
    this = v5;
    if (v6)
    {
      v7 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v7)
        v7 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if ((*((_QWORD *)v7 + 6) & 0xFFFFFFFFFFFFFFF8) != 0)
        EmptyString = (uint64_t *)((*((_QWORD *)v7 + 6) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)EmptyString, &v24);
      v9 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v9)
        v9 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if ((*((_QWORD *)v9 + 7) & 0xFFFFFFFFFFFFFFF8) != 0)
        v10 = (uint64_t *)((*((_QWORD *)v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v10 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v9);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v10, &v25);
      v11 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v11)
        v11 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if ((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFFFF8) != 0)
        v12 = (uint64_t *)((*((_QWORD *)v11 + 9) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v12 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v12, &v26);
      v13 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v13)
        v13 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if ((*((_QWORD *)v13 + 4) & 0xFFFFFFFFFFFFFFF8) != 0)
        v14 = (uint64_t *)((*((_QWORD *)v13 + 4) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v13);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v14, &v27);
      v15 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v15)
        v15 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if ((*((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFFFF8) != 0)
        v16 = (uint64_t *)((*((_QWORD *)v15 + 8) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v16, &v28);
      v17 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v17)
        v17 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if ((*((_QWORD *)v17 + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
        v18 = (uint64_t *)((*((_QWORD *)v17 + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v17);
      pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::GetMultipleApplyNameTemplateBaseName((uint64_t)v18, &v29);
      sub_20C374970(qword_2549886E0, &v24, 6uLL);
      v19 = &v30;
      do
      {
        v21 = *--v19;
        v20 = v21;
        if ((v21 & 7) != 0)
        {
          v22 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
          do
            v23 = __ldxr(v22);
          while (__stlxr(v23 - 2, v22));
        }
      }
      while (v19 != &v24);
      __cxa_atexit((void (*)(void *))sub_20C1984B4, qword_2549886E0, &dword_20BDBC000);
      __cxa_guard_release(&qword_2549886F8);
      this = v5;
    }
  }
  v3 = (_QWORD *)qword_2549886E0[0];
  if (qword_2549886E0[0] != unk_2549886E8)
  {
    while ((*v3 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8))
    {
      if (++v3 == (_QWORD *)unk_2549886E8)
      {
        v3 = (_QWORD *)unk_2549886E8;
        return v3 != (_QWORD *)unk_2549886E8;
      }
    }
  }
  return v3 != (_QWORD *)unk_2549886E8;
}

void sub_20C3748F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v3 = v1 + 48;
  while (1)
  {
    v5 = *(_QWORD *)(v3 - 8);
    v3 -= 8;
    v4 = v5;
    if ((v5 & 7) != 0)
    {
      v6 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
    if (v3 == v1)
    {
      __cxa_guard_abort(&qword_2549886F8);
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *sub_20C374970(_QWORD *a1, uint64_t *a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_20BDDF654(a1, a3);
    sub_20BFE5400((uint64_t)a1, a2, &a2[a3]);
  }
  return a1;
}

void sub_20C3749DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BEEB2B8(&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_20C3749F0()
{
  char *v0;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  void **v13;
  char v14;

  v0 = (char *)atomic_load(&qword_254988700);
  if (!v0)
  {
    v0 = (char *)operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v0, "collection", 0);
    v2 = *(_QWORD *)v0;
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stxr(v4 + 2, v3));
      if ((v4 & 1) == 0)
        v2 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((_QWORD *)v0 + 1) = 0;
    *((_QWORD *)v0 + 2) = 0;
    *((_QWORD *)v0 + 3) = 0;
    v13 = (void **)(v0 + 8);
    v14 = 0;
    v5 = operator new(8uLL);
    *((_QWORD *)v0 + 1) = v5;
    *((_QWORD *)v0 + 2) = v5;
    *v5 = v2;
    v6 = v5 + 1;
    *((_QWORD *)v0 + 3) = v5 + 1;
    if ((v2 & 7) != 0)
    {
      v7 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        *v5 &= 0xFFFFFFFFFFFFFFF8;
      *((_QWORD *)v0 + 2) = v6;
      do
        v9 = __ldxr(v7);
      while (__stlxr(v9 - 2, v7));
    }
    else
    {
      *((_QWORD *)v0 + 2) = v6;
    }
    while (!__ldaxr(&qword_254988700))
    {
      if (!__stlxr((unint64_t)v0, &qword_254988700))
        return (unint64_t)v0;
    }
    __clrex();
    v13 = (void **)(v0 + 8);
    sub_20BEEB2B8(&v13);
    if ((*(_QWORD *)v0 & 7) != 0)
    {
      v11 = (unsigned int *)(*(_QWORD *)v0 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    operator delete(v0);
    return atomic_load(&qword_254988700);
  }
  return (unint64_t)v0;
}

void sub_20C374B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  sub_20BEEB2B8(&a9);
  if ((v10 & 7) != 0)
  {
    v12 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  if ((*v9 & 7) != 0)
  {
    v14 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  operator delete(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetSchemaKind(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  return 6;
}

uint64_t sub_20C374BA4(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v6;
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *SchemaInfo;
  const std::type_info *v8;
  char *v9;
  pxrInternal__aapl__pxrReserved__::TfType *v11;
  uint64_t TypeName;
  const char *v13;
  _QWORD v14[4];
  char v15;

  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_254988708, v6);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_CanApplyMultipleApplyAPI(a1, SchemaInfo, a2, a3);
  v14[0] = "usd/prim.h";
  v14[1] = "CanApplyAPI";
  v14[2] = 1059;
  v14[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::CanApplyAPI(const TfToken &, std::string *) const [SchemaType"
           " = pxrInternal__aapl__pxrReserved__::UsdCollectionAPI]";
  v15 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v11);
  if (*(char *)(TypeName + 23) >= 0)
    v13 = (const char *)TypeName;
  else
    v13 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v14, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v13);
  return 0;
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Apply(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  int v14;
  int v15;
  uint64_t v16;

  if (sub_20C374DB8(this, a2))
  {
    sub_20C37A850(a3, this, (uint64_t *)a2);
    *(_QWORD *)a3 = off_24C537740;
  }
  else
  {
    v12 = 1;
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v14);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v15);
    v16 = 0;
    v11 = 0;
    sub_20C37A850(a3, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v12, &v11);
    *(_QWORD *)a3 = off_24C537740;
    if ((v11 & 7) != 0)
    {
      v7 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
    if ((v16 & 7) != 0)
    {
      v9 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v10 = __ldxr(v9);
      while (__stlxr(v10 - 2, v9));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    sub_20BFD265C(&v14);
    if (v13)
      sub_20C35C614(v13);
  }
}

void sub_20C374D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a3);
  if ((a3 & 7) != 0)
  {
    v4 = (unsigned int *)(a3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C374DB8(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  const pxrInternal__aapl__pxrReserved__::TfType *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *SchemaInfo;
  const std::type_info *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::TfType *v9;
  uint64_t TypeName;
  const char *v11;
  _QWORD v12[4];
  char v13;

  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetStaticTfType(a1);
  SchemaInfo = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::FindSchemaInfo((pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry *)&qword_254988708, v4);
  if (SchemaInfo)
    return pxrInternal__aapl__pxrReserved__::UsdPrim::_ApplyMultipleApplyAPI((pxrInternal__aapl__pxrReserved__ **)a1, SchemaInfo, a2);
  v12[0] = "usd/prim.h";
  v12[1] = "ApplyAPI";
  v12[2] = 1188;
  v12[3] = "BOOL pxrInternal__aapl__pxrReserved__::UsdPrim::ApplyAPI(const TfToken &) const [SchemaType = pxrInternal__aa"
           "pl__pxrReserved__::UsdCollectionAPI]";
  v13 = 0;
  TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(v9);
  if (*(char *)(TypeName + 23) >= 0)
    v11 = (const char *)TypeName;
  else
    v11 = *(const char **)TypeName;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 1, (pxrInternal__aapl__pxrReserved__ *)"Class '%s' is not correctly registered with the UsdSchemaRegistry as a schema type. The schema may need to be regenerated.", v11);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_IsTypedSchema(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  unsigned __int8 v1;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *v3;
  const std::type_info *v4;
  char *v5;

  v1 = atomic_load((unsigned __int8 *)&qword_254988720);
  if ((v1 & 1) == 0)
  {
    v3 = (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)__cxa_guard_acquire(&qword_254988720);
    if ((_DWORD)v3)
    {
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetStaticTfType(v3);
      byte_254988718 = sub_20C35BD7C((char *)&qword_254988708, v4, v5);
      __cxa_guard_release(&qword_254988720);
    }
  }
  return byte_254988718;
}

void sub_20C374ED8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988720);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetTfType(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_GetStaticTfType(this);
  return &qword_254988708;
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExpansionRuleAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v8 = *((_QWORD *)EmptyString + 6);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C3750A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExpansionRuleAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v12 = *((_QWORD *)EmptyString + 6);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v16 = (uint64_t)(v15 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v16 = (uint64_t)EmptyString;
  }
  v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    v18 = (uint64_t *)(v17 + 4);
  else
    v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v16, (uint64_t)v18, (uint64_t)&v24);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 88), 0, 1, a2, a3, a4);
  if ((v24 & 7) != 0)
  {
    v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if ((v12 & 7) != 0)
  {
    do
      v22 = __ldxr(v15);
    while (__stlxr(v22 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v23 = __ldxr(v17);
    while (__stlxr(v23 - 2, v17));
  }
}

void sub_20C3752AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludeRootAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v8 = *((_QWORD *)EmptyString + 7);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C3754A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludeRootAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v12 = *((_QWORD *)EmptyString + 7);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v16 = (uint64_t)(v15 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v16 = (uint64_t)EmptyString;
  }
  v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    v18 = (uint64_t *)(v17 + 4);
  else
    v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v16, (uint64_t)v18, (uint64_t)&v24);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, v19, 0, 1, a2, a3, a4);
  if ((v24 & 7) != 0)
  {
    v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if ((v12 & 7) != 0)
  {
    do
      v22 = __ldxr(v15);
    while (__stlxr(v22 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v23 = __ldxr(v17);
    while (__stlxr(v23 - 2, v17));
  }
}

void sub_20C3756AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetMembershipExpressionAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v8 = *((_QWORD *)EmptyString + 9);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C3758A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateMembershipExpressionAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v12 = *((_QWORD *)EmptyString + 9);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v16 = (uint64_t)(v15 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v16 = (uint64_t)EmptyString;
  }
  v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    v18 = (uint64_t *)(v17 + 4);
  else
    v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v16, (uint64_t)v18, (uint64_t)&v24);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 440), 0, 1, a2, a3, a4);
  if ((v24 & 7) != 0)
  {
    v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if ((v12 & 7) != 0)
  {
    do
      v22 = __ldxr(v15);
    while (__stlxr(v22 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v23 = __ldxr(v17);
    while (__stlxr(v23 - 2, v17));
  }
}

void sub_20C375AAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v8 = *((_QWORD *)EmptyString + 4);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetAttribute((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C375CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateCollectionAttr(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, std::type_info *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;

  v8 = *((_QWORD *)this + 3);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v12 = *((_QWORD *)EmptyString + 4);
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v16 = (uint64_t)(v15 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v16 = (uint64_t)EmptyString;
  }
  v17 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
    v18 = (uint64_t *)(v17 + 4);
  else
    v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v16, (uint64_t)v18, (uint64_t)&v24);
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  if (!v19)
    v19 = sub_20BFE6DD0((pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType::_Init *)&pxrInternal__aapl__pxrReserved__::SdfValueTypeNames);
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase::_CreateAttr((uint64_t)this, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v24, (pxrInternal__aapl__pxrReserved__::Sdf_ValueTypeNamesType *)((char *)v19 + 424), 0, 1, a2, a3, a4);
  if ((v24 & 7) != 0)
  {
    v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
    do
      v21 = __ldxr(v20);
    while (__stlxr(v21 - 2, v20));
  }
  if ((v12 & 7) != 0)
  {
    do
      v22 = __ldxr(v15);
    while (__stlxr(v22 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v23 = __ldxr(v17);
    while (__stlxr(v23 - 2, v17));
  }
}

void sub_20C375EAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  unsigned int *v2;
  unsigned int v3;

  if ((v1 & 7) != 0)
  {
    v2 = (unsigned int *)(v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludesRel(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v8 = *((_QWORD *)EmptyString + 8);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C3760A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v8 = *((_QWORD *)EmptyString + 8);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, 0, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C3762B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExcludesRel(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v8 = *((_QWORD *)EmptyString + 5);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::GetRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C3764C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExcludesRel(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, pxrInternal__aapl__pxrReserved__::UsdRelationship *a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  _BYTE v22[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  int v24;
  int v25;
  uint64_t v26;

  sub_20C35C4F8((uint64_t)v22, (uint64_t *)this + 1, (_DWORD *)this + 4);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v8 = *((_QWORD *)EmptyString + 5);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v21);
  pxrInternal__aapl__pxrReserved__::UsdPrim::CreateRelationship((pxrInternal__aapl__pxrReserved__::UsdPrim *)v22, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, 0, a2);
  if ((v21 & 7) != 0)
  {
    v15 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  if ((v26 & 7) != 0)
  {
    v19 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
    do
      v20 = __ldxr(v19);
    while (__stlxr(v20 - 2, v19));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v25);
  sub_20BFD265C(&v24);
  if (v23)
    sub_20C35C614(v23);
}

void sub_20C3766D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a3);
  if ((v3 & 7) != 0)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  int v1;
  unsigned __int8 v2;
  unsigned __int8 v3;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t *SchemaAttributeNames;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = (int)this;
  v31 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_254988740);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254988740))
  {
    v5 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v5)
      v5 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    v6 = *((_QWORD *)v5 + 6);
    v27 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 2, v7));
      if ((v8 & 1) == 0)
        v27 &= 0xFFFFFFFFFFFFFFF8;
    }
    v9 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v9)
      v9 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    v10 = *((_QWORD *)v9 + 7);
    v28 = v10;
    if ((v10 & 7) != 0)
    {
      v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 2, v11));
      if ((v12 & 1) == 0)
        v28 &= 0xFFFFFFFFFFFFFFF8;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v13)
      v13 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    v14 = *((_QWORD *)v13 + 9);
    v29 = v14;
    if ((v14 & 7) != 0)
    {
      v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 2, v15));
      if ((v16 & 1) == 0)
        v29 &= 0xFFFFFFFFFFFFFFF8;
    }
    v17 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v17)
      v17 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    v18 = *((_QWORD *)v17 + 4);
    v30 = v18;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        v30 &= 0xFFFFFFFFFFFFFFF8;
    }
    sub_20C374970(&qword_254988728, &v27, 4uLL);
    v21 = &v31;
    do
    {
      v23 = *--v21;
      v22 = v23;
      if ((v23 & 7) != 0)
      {
        v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
    }
    while (v21 != &v27);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254988728, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988740);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254988760);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254988760))
  {
    SchemaAttributeNames = pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::GetSchemaAttributeNames((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)1);
    sub_20C376A8C((uint64_t **)SchemaAttributeNames);
    __cxa_atexit((void (*)(void *))sub_20C1984B4, &qword_254988748, &dword_20BDBC000);
    __cxa_guard_release(&qword_254988760);
  }
  if (v1)
    return &qword_254988748;
  else
    return &qword_254988728;
}

void sub_20C3769FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988740);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C376A8C(uint64_t **a1)
{
  qword_254988750 = 0;
  unk_254988758 = 0;
  qword_254988748 = 0;
  sub_20BFC9A6C((char **)&qword_254988748, ((*(_QWORD *)algn_254988730 - qword_254988728) >> 3) + a1[1] - *a1);
  sub_20C1292A0(&qword_254988748, (_QWORD *)qword_254988750, *a1, a1[1], a1[1] - *a1);
  return sub_20C1292A0(&qword_254988748, (_QWORD *)qword_254988750, (uint64_t *)qword_254988728, *(uint64_t **)algn_254988730, (*(_QWORD *)algn_254988730 - qword_254988728) >> 3);
}

void sub_20C376B20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetSchemaAttributeNames(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t **SchemaAttributeNames;
  uint64_t **v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  int64x2_t v28;
  char *v29;
  unsigned int *v30;
  unsigned int v31;
  uint64_t v32;
  int64x2_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;

  SchemaAttributeNames = (uint64_t **)pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetSchemaAttributeNames(this);
  v7 = SchemaAttributeNames;
  v8 = *a2;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (v8)
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFC9A6C((char **)a3, SchemaAttributeNames[1] - *SchemaAttributeNames);
    v10 = *v7;
    v11 = v7[1];
    if (*v7 != v11)
    {
      do
      {
        if ((*v10 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v12 = (*v10 & 0xFFFFFFFFFFFFFFF8) + 16;
        }
        else
        {
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
          v12 = (uint64_t)EmptyString;
        }
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
          v13 = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v13 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
        pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v13, (uint64_t)&v36);
        v15 = *(_QWORD **)(a3 + 8);
        v14 = *(_QWORD *)(a3 + 16);
        if ((unint64_t)v15 >= v14)
        {
          v18 = ((uint64_t)v15 - *(_QWORD *)a3) >> 3;
          if ((unint64_t)(v18 + 1) >> 61)
            sub_20BDDF694();
          v19 = v14 - *(_QWORD *)a3;
          v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1))
            v20 = v18 + 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          v35 = a3 + 16;
          if (v21)
            v22 = (char *)sub_20BDDF6A8(a3 + 16, v21);
          else
            v22 = 0;
          v23 = &v22[8 * v18];
          v24 = &v22[8 * v21];
          v34 = v24;
          *(_QWORD *)v23 = v36;
          v17 = v23 + 8;
          v36 = 0;
          v33.i64[1] = (uint64_t)(v23 + 8);
          v26 = *(char **)a3;
          v25 = *(char **)(a3 + 8);
          if (v25 == *(char **)a3)
          {
            v28 = vdupq_n_s64((unint64_t)v25);
          }
          else
          {
            do
            {
              v27 = *((_QWORD *)v25 - 1);
              v25 -= 8;
              *((_QWORD *)v23 - 1) = v27;
              v23 -= 8;
              *(_QWORD *)v25 = 0;
            }
            while (v25 != v26);
            v28 = *(int64x2_t *)a3;
            v17 = (_QWORD *)v33.i64[1];
            v24 = v34;
          }
          *(_QWORD *)a3 = v23;
          *(_QWORD *)(a3 + 8) = v17;
          v33 = v28;
          v29 = *(char **)(a3 + 16);
          *(_QWORD *)(a3 + 16) = v24;
          v34 = v29;
          v32 = v28.i64[0];
          EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF1EE98((uint64_t)&v32);
          v16 = v36;
        }
        else
        {
          v16 = 0;
          *v15 = v36;
          v17 = v15 + 1;
          v36 = 0;
        }
        *(_QWORD *)(a3 + 8) = v17;
        if ((v16 & 7) != 0)
        {
          v30 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
          do
            v31 = __ldxr(v30);
          while (__stlxr(v31 - 2, v30));
        }
        ++v10;
      }
      while (v10 != v11);
    }
  }
  else
  {
    sub_20BFE538C((_QWORD *)a3, *SchemaAttributeNames, SchemaAttributeNames[1], SchemaAttributeNames[1] - *SchemaAttributeNames);
  }
}

void sub_20C376D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X1>, uint64_t *a2@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v7;
  unsigned int *v8;
  unsigned int v9;
  const char *Text;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;

  v23 = 0;
  if ((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IsCollectionAPIPath(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, a3) & 1) != 0)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(this, &v17);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v17, (uint64_t)&v18);
    sub_20C37A850(a4, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18, &v23);
    *(_QWORD *)a4 = off_24C537740;
    if ((v21 & 7) != 0)
    {
      v8 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
    sub_20BFD265C(&v20);
    if (v19)
      sub_20C35C614(v19);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_20BFD265C(&v17);
  }
  else
  {
    v18 = "usd/collectionAPI.cpp";
    v19 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"GetCollection";
    v20 = 408;
    v21 = (unint64_t)"static UsdCollectionAPI pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection(co"
                            "nst UsdStagePtr &, const SdfPath &)";
    v22 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid collection path <%s>.", Text);
    LODWORD(v18) = 1;
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v20);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v20 + 1);
    v21 = 0;
    v17 = 0;
    sub_20C37A850(a4, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v18, &v17);
    *(_QWORD *)a4 = off_24C537740;
    if ((v17 & 7) != 0)
    {
      v11 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    if ((v21 & 7) != 0)
    {
      v13 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v20 + 1);
    sub_20BFD265C(&v20);
    if (v19)
      sub_20C35C614(v19);
  }
  if ((v23 & 7) != 0)
  {
    v15 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
}

void sub_20C376F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, _QWORD);
  sub_20C35C2E0((uint64_t)va1);
  sub_20BFD1A18((uint64_t *)va);
  v4 = *(_QWORD *)(v2 - 40);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollection@<X0>(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result;

  result = sub_20C37A850(a3, this, (uint64_t *)a2);
  *(_QWORD *)result = off_24C537740;
  return result;
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, int *a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v20;
  int v21;
  int v22;

  sub_20C3630C0((uint64_t)this, &v21);
  v4 = *((_QWORD *)this + 3);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v4 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v8 = *((_QWORD *)EmptyString + 4);
  if ((v8 & 7) != 0)
  {
    v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v8 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
  if ((v8 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v12 = (uint64_t)(v11 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v12 = (uint64_t)EmptyString;
  }
  v13 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
  if ((v4 & 0xFFFFFFFFFFFFFFF8) != 0)
    v14 = (uint64_t *)(v13 + 4);
  else
    v14 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v12, (uint64_t)v14, (uint64_t)&v20);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v20, a2);
  if ((v20 & 7) != 0)
  {
    v15 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  if ((v8 & 7) != 0)
  {
    do
      v17 = __ldxr(v11);
    while (__stlxr(v17 - 2, v11));
  }
  if ((v4 & 7) != 0)
  {
    do
      v18 = __ldxr(v13);
    while (__stlxr(v18 - 2, v13));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v22);
  return sub_20BFD265C(&v21);
}

void sub_20C3771AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a2);
  if ((v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetNamedCollectionPath@<X0>(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, int *a3@<X8>)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::TfToken *EmptyString;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v22;
  int v23;
  int v24;

  sub_20C348EEC((uint64_t)this, &v23);
  v6 = *(_QWORD *)a2;
  if ((*(_QWORD *)a2 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!EmptyString)
    EmptyString = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  v10 = *((_QWORD *)EmptyString + 4);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      v10 &= 0xFFFFFFFFFFFFFFF8;
  }
  v13 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
  if ((v10 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v14 = (uint64_t)(v13 + 4);
  }
  else
  {
    EmptyString = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
    v14 = (uint64_t)EmptyString;
  }
  v15 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
    v16 = (uint64_t *)(v15 + 4);
  else
    v16 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyString);
  pxrInternal__aapl__pxrReserved__::UsdSchemaRegistry::MakeMultipleApplyNameInstance(v14, (uint64_t)v16, (uint64_t)&v22);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v23, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v22, a3);
  if ((v22 & 7) != 0)
  {
    v17 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  if ((v10 & 7) != 0)
  {
    do
      v19 = __ldxr(v13);
    while (__stlxr(v19 - 2, v13));
  }
  if ((v6 & 7) != 0)
  {
    do
      v20 = __ldxr(v15);
    while (__stlxr(v20 - 2, v15));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v24);
  return sub_20BFD265C(&v23);
}

void sub_20C377388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unsigned int *v4;
  unsigned int v5;
  va_list va;

  va_start(va, a2);
  if ((v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetAllCollections(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2@<X1>, uint64_t a3@<X8>)
{
  size_t AppliedSchemas;
  unsigned __int8 v6;
  _QWORD *v7;
  _QWORD *i;
  uint64_t *v9;
  std::string::size_type v10;
  const char *v11;
  int v12;
  size_t v13;
  size_t v14;
  const char *v15;
  const std::string *v16;
  std::string::size_type v17;
  _QWORD *v18;
  _QWORD *v19;
  unsigned int *v20;
  unsigned int v21;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v22;
  uint64_t *EmptyString;
  char v24;
  uint64_t v25;
  std::string v26;
  _QWORD *v27;
  _QWORD *v28;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  AppliedSchemas = (size_t)pxrInternal__aapl__pxrReserved__::UsdPrim::GetAppliedSchemas(this, a2, &v27);
  if (v27 != v28)
  {
    v6 = atomic_load((unsigned __int8 *)&qword_254988780);
    if ((v6 & 1) == 0)
    {
      AppliedSchemas = __cxa_guard_acquire(&qword_254988780);
      if ((_DWORD)AppliedSchemas)
      {
        v22 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v22)
          v22 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if ((*((_QWORD *)v22 + 17) & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((*((_QWORD *)v22 + 17) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v22);
        v24 = sub_20C377708();
        sub_20C1DEE14((const void **)EmptyString, v24, (uint64_t)&qword_254988768);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254988768, &dword_20BDBC000);
        __cxa_guard_release(&qword_254988780);
      }
    }
    v7 = v27;
    for (i = v28; v7 != i; ++v7)
    {
      if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
        v9 = (uint64_t *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v9 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)AppliedSchemas);
      v10 = byte_25498877F;
      if (byte_25498877F >= 0)
        v11 = (const char *)&qword_254988768;
      else
        v11 = (const char *)qword_254988768;
      v12 = *((char *)v9 + 23);
      if (v12 >= 0)
        v13 = *((unsigned __int8 *)v9 + 23);
      else
        v13 = v9[1];
      AppliedSchemas = strlen(v11);
      if (v13 >= AppliedSchemas)
      {
        v14 = AppliedSchemas;
        v15 = v12 >= 0 ? (const char *)v9 : (const char *)*v9;
        AppliedSchemas = strncmp(v15, v11, v14);
        if (!(_DWORD)AppliedSchemas)
        {
          if ((*v7 & 0xFFFFFFFFFFFFFFF8) != 0)
          {
            v16 = (const std::string *)((*v7 & 0xFFFFFFFFFFFFFFF8) + 16);
          }
          else
          {
            v16 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)AppliedSchemas);
            v10 = byte_25498877F;
          }
          if ((v10 & 0x80u) == 0)
            v17 = v10;
          else
            v17 = qword_254988770;
          std::string::basic_string(&v26, v16, v17, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v25);
          pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v25);
          v18 = *(_QWORD **)(a3 + 8);
          if ((unint64_t)v18 >= *(_QWORD *)(a3 + 16))
          {
            AppliedSchemas = sub_20C37B7A0((uint64_t *)a3, this, &v25);
            v19 = (_QWORD *)AppliedSchemas;
          }
          else
          {
            AppliedSchemas = (size_t)sub_20C37A850(*(pxrInternal__aapl__pxrReserved__::UsdSchemaBase **)(a3 + 8), this, &v25);
            *v18 = off_24C537740;
            v19 = v18 + 4;
            *(_QWORD *)(a3 + 8) = v19;
          }
          *(_QWORD *)(a3 + 8) = v19;
          if ((v25 & 7) != 0)
          {
            v20 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
            do
              v21 = __ldxr(v20);
            while (__stlxr(v21 - 2, v20));
          }
          if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v26.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  sub_20BEEB2B8((void ***)&v26);
}

void sub_20C377674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  __cxa_guard_abort(&qword_254988780);
  __p = &a17;
  sub_20BEEB2B8((void ***)&__p);
  sub_20C37B438((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20C377708()
{
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v0;
  unint64_t v1;
  const char *v2;

  v0 = (pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  if (!v0)
    v0 = sub_20C14397C(&pxrInternal__aapl__pxrReserved__::SdfPathTokens);
  v1 = *((_QWORD *)v0 + 10) & 0xFFFFFFFFFFFFFFF8;
  if (v1)
  {
    v2 = (const char *)(v1 + 16);
    if (*(char *)(v1 + 39) < 0)
      v2 = *(const char **)v2;
  }
  else
  {
    v2 = "";
  }
  return *v2;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IncludePath(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  _QWORD v34[5];
  _BYTE v35[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  int v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _BYTE v43[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v44;
  int v45;
  int v46;
  uint64_t v47;
  std::type_info_vtbl *v48;
  _BYTE v49[40];
  _QWORD **v50;
  _QWORD *v51[2];
  char v52;
  __int128 v53;
  void *__p[2];
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  void **v58;
  std::type_info v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  _QWORD **v63;
  _QWORD *v64;
  _QWORD *v65;
  char v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[5];

  v69[4] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery(this, (uint64_t)&v48);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C377DB0((uint64_t)&v48, a2, 0);
  if ((_BYTE)v4)
  {
LABEL_9:
    v7 = 1;
    goto LABEL_10;
  }
  if (*(_QWORD *)a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4))
  {
    v59.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&unk_24C51FCF3;
    LOBYTE(v59.__vftable) = 1;
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludeRootAttr(this, &v59, 0, (uint64_t)v43);
    if ((v47 & 7) != 0)
    {
      v5 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
    sub_20BFD265C(&v45);
    if (v44)
      sub_20C35C614(v44);
    sub_20BF4C2D8((uint64_t)&v59);
    goto LABEL_9;
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExcludesRel(this, (uint64_t)v35);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v35, v15))
  {
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)v35, (uint64_t *)&v40);
    v16 = v40;
    if (v40 != v41)
    {
      while (*v16 != *(_QWORD *)a2)
      {
        if (++v16 == v41)
        {
          v16 = v41;
          break;
        }
      }
    }
    if (v16 != v41)
    {
      pxrInternal__aapl__pxrReserved__::UsdRelationship::RemoveTarget((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v35, a2);
      sub_20C37B958((uint64_t)v34, (uint64_t)v49);
      v17 = sub_20C0AD934(v34, (unsigned int *)a2);
      if (v17
        || (v59.__vftable = (std::type_info_vtbl *)"usd/collectionAPI.cpp",
            v59.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"IncludePath",
            v60 = 493,
            v61 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IncludePath(const SdfPath &) const",
            v62 = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v59, "it != map.end()", 0) & 1) != 0))
      {
        sub_20BEB587C(v34, v17, (uint64_t)&v59);
        sub_20C37BC48((uint64_t)&v59, 0);
        pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase((uint64_t)&v59, (uint64_t)v34, (uint64_t)&v50);
        memset(v69, 0, 32);
        v67 = 0u;
        v68 = 0u;
        if ((v48 & 7) != 0)
        {
          v18 = (unsigned int *)((unint64_t)v48 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stlxr(v19 - 2, v18));
        }
        v48 = v59.__vftable;
        v59.__vftable = 0;
        sub_20C37A8B4((uint64_t)v49, (uint64_t *)&v59.__type_name);
        sub_20BFD7C28((uint64_t)&v50, v51[0]);
        v50 = v63;
        v51[0] = v64;
        v51[1] = v65;
        if (v65)
        {
          v64[2] = v51;
          v63 = &v64;
          v64 = 0;
          v65 = 0;
        }
        else
        {
          v50 = v51;
        }
        v52 = v66;
        v20 = (unsigned int *)*((_QWORD *)&v53 + 1);
        v53 = v67;
        *((_QWORD *)&v67 + 1) = 0;
        if (v20)
        {
          v21 = v20 + 2;
          do
          {
            v22 = __ldxr(v21);
            v23 = v22 - 1;
          }
          while (__stlxr(v23, v21));
          if (!v23)
            (*(void (**)(unsigned int *))(*(_QWORD *)v20 + 8))(v20);
        }
        *(_QWORD *)&v67 = 0;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        *(_OWORD *)__p = v68;
        v55 = v69[0];
        v69[0] = 0;
        v68 = 0uLL;
        sub_20C37AA30((void **)&v56);
        v56 = *(_OWORD *)&v69[1];
        v57 = v69[3];
        memset(&v69[1], 0, 24);
        v58 = (void **)&v69[1];
        sub_20C37B300(&v58);
        if ((_QWORD)v68)
        {
          *((_QWORD *)&v68 + 1) = v68;
          operator delete((void *)v68);
        }
        v24 = *((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v25 = (unsigned int *)(*((_QWORD *)&v67 + 1) + 8);
          do
          {
            v26 = __ldxr(v25);
            v27 = v26 - 1;
          }
          while (__stlxr(v27, v25));
          if (!v27)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        }
        sub_20BFD7C28((uint64_t)&v63, v64);
        sub_20C37B898((uint64_t)&v59.__type_name);
        if (((uint64_t)v59.__vftable & 7) != 0)
        {
          v28 = (unsigned int *)((unint64_t)v59.__vftable & 0xFFFFFFFFFFFFFFF8);
          do
            v29 = __ldxr(v28);
          while (__stlxr(v29 - 2, v28));
        }
      }
      sub_20C37B898((uint64_t)v34);
    }
  }
  if ((v39 & 7) != 0)
  {
    v30 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
  sub_20BFD265C(&v37);
  if (v36)
    sub_20C35C614(v36);
  if (sub_20C377DB0((uint64_t)&v48, a2, 0) == 1)
  {
    v7 = 1;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludesRel(this, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v59);
    v7 = pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v59, a2, 1);
    if ((v61 & 7) != 0)
    {
      v32 = (unsigned int *)(v61 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v60 + 1);
    sub_20BFD265C(&v60);
    if (v59.__type_name)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v59.__type_name);
  }
  v59.__vftable = (std::type_info_vtbl *)&v40;
  sub_20BFD6F90((void ***)&v59);
LABEL_10:
  v59.__vftable = (std::type_info_vtbl *)&v56;
  sub_20C37B300((void ***)&v59);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v8 = *((_QWORD *)&v53 + 1);
  if (*((_QWORD *)&v53 + 1))
  {
    v9 = (unsigned int *)(*((_QWORD *)&v53 + 1) + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  sub_20BFD7C28((uint64_t)&v50, v51[0]);
  sub_20C37B898((uint64_t)v49);
  if ((v48 & 7) != 0)
  {
    v12 = (unsigned int *)((unint64_t)v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return v7;
}

void sub_20C377CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  sub_20C37B898((uint64_t)&a9);
  sub_20C377F1C((uint64_t)&a14);
  *(_QWORD *)(v25 - 232) = &a18;
  sub_20BFD6F90((void ***)(v25 - 232));
  sub_20C377E74((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 40) = 1065353216;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 48) = a2 + 56;
  *(_BYTE *)(a2 + 72) = 0;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery((uint64_t)this, a2);
}

void sub_20C377D9C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C377E74(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20C377DB0(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  unint64_t v6;
  BOOL IsPathIncludedByRuleMap;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *v9;

  if (pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_HasEmptyRuleMap((pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase *)a1))
  {
    v6 = pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator::Match((pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator *)(a1 + 80), a2);
    IsPathIncludedByRuleMap = v6;
    v8 = v6 >> 8;
    if (a3)
    {
      v9 = (pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens);
      if ((_BYTE)v6)
      {
        if (!v9)
          v9 = sub_20C37B8D0(&pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens);
      }
      else
      {
        if (!v9)
          v9 = sub_20C37B8D0(&pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens);
        v9 = (pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *)((char *)v9 + 8);
      }
      sub_20BF32220(a3, v9);
    }
  }
  else
  {
    IsPathIncludedByRuleMap = pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_IsPathIncludedByRuleMap((pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase *)a1, a2, a3);
    v8 = 0x1000000;
  }
  return IsPathIncludedByRuleMap | (unint64_t)(v8 << 8);
}

uint64_t sub_20C377E74(uint64_t a1)
{
  void *v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  void **v10;

  v10 = (void **)(a1 + 120);
  sub_20C37B300(&v10);
  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    *(_QWORD *)(a1 + 104) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int **)(a1 + 88);
  if (v3)
  {
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  sub_20BFD7C28(a1 + 48, *(_QWORD **)(a1 + 56));
  sub_20C37B898(a1 + 8);
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v7 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  return a1;
}

uint64_t sub_20C377F1C(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ExcludePath(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int *v31;
  unsigned int v32;
  _QWORD v34[5];
  _BYTE v35[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v36;
  int v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _BYTE v43[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v44;
  int v45;
  int v46;
  uint64_t v47;
  std::type_info_vtbl *v48;
  _BYTE v49[24];
  uint64_t v50;
  _QWORD **v51;
  _QWORD *v52[2];
  char v53;
  __int128 v54;
  void *__p[2];
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  void **v59;
  std::type_info v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  _QWORD **v64;
  _QWORD *v65;
  _QWORD *v66;
  char v67;
  __int128 v68;
  __int128 v69;
  _QWORD v70[5];

  v70[4] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery(this, (uint64_t)&v48);
  if (v50)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C377DB0((uint64_t)&v48, a2, 0);
    if (v4 != 1)
    {
LABEL_10:
      v7 = 1;
      goto LABEL_56;
    }
  }
  if (*(_QWORD *)a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4))
  {
    v60.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)&unk_24C51FCF3;
    LOBYTE(v60.__vftable) = 0;
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateIncludeRootAttr(this, &v60, 0, (uint64_t)v43);
    if ((v47 & 7) != 0)
    {
      v5 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v46);
    sub_20BFD265C(&v45);
    if (v44)
      sub_20C35C614(v44);
    sub_20BF4C2D8((uint64_t)&v60);
    goto LABEL_10;
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludesRel(this, (uint64_t)v35);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v35, v8))
  {
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)v35, (uint64_t *)&v40);
    v9 = v40;
    if (v40 != v41)
    {
      while (*v9 != *(_QWORD *)a2)
      {
        if (++v9 == v41)
        {
          v9 = v41;
          break;
        }
      }
    }
    if (v9 != v41)
    {
      pxrInternal__aapl__pxrReserved__::UsdRelationship::RemoveTarget((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v35, a2);
      sub_20C37B958((uint64_t)v34, (uint64_t)v49);
      v10 = sub_20C0AD934(v34, (unsigned int *)a2);
      if (v10
        || (v60.__vftable = (std::type_info_vtbl *)"usd/collectionAPI.cpp",
            v60.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"ExcludePath",
            v61 = 538,
            v62 = (unint64_t)"BOOL pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ExcludePath(const SdfPath &) const",
            v63 = 0,
            (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v60, "it != map.end()", 0) & 1) != 0))
      {
        sub_20BEB587C(v34, v10, (uint64_t)&v60);
        sub_20C37BC48((uint64_t)&v60, 0);
        pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase((uint64_t)&v60, (uint64_t)v34, (uint64_t)&v51);
        memset(v70, 0, 32);
        v68 = 0u;
        v69 = 0u;
        if ((v48 & 7) != 0)
        {
          v11 = (unsigned int *)((unint64_t)v48 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
        v48 = v60.__vftable;
        v60.__vftable = 0;
        sub_20C37A8B4((uint64_t)v49, (uint64_t *)&v60.__type_name);
        sub_20BFD7C28((uint64_t)&v51, v52[0]);
        v51 = v64;
        v52[0] = v65;
        v52[1] = v66;
        if (v66)
        {
          v65[2] = v52;
          v64 = &v65;
          v65 = 0;
          v66 = 0;
        }
        else
        {
          v51 = v52;
        }
        v53 = v67;
        v13 = (unsigned int *)*((_QWORD *)&v54 + 1);
        v54 = v68;
        *((_QWORD *)&v68 + 1) = 0;
        if (v13)
        {
          v14 = v13 + 2;
          do
          {
            v15 = __ldxr(v14);
            v16 = v15 - 1;
          }
          while (__stlxr(v16, v14));
          if (!v16)
            (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
        }
        *(_QWORD *)&v68 = 0;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        *(_OWORD *)__p = v69;
        v56 = v70[0];
        v70[0] = 0;
        v69 = 0uLL;
        sub_20C37AA30((void **)&v57);
        v57 = *(_OWORD *)&v70[1];
        v58 = v70[3];
        memset(&v70[1], 0, 24);
        v59 = (void **)&v70[1];
        sub_20C37B300(&v59);
        if ((_QWORD)v69)
        {
          *((_QWORD *)&v69 + 1) = v69;
          operator delete((void *)v69);
        }
        v17 = *((_QWORD *)&v68 + 1);
        if (*((_QWORD *)&v68 + 1))
        {
          v18 = (unsigned int *)(*((_QWORD *)&v68 + 1) + 8);
          do
          {
            v19 = __ldxr(v18);
            v20 = v19 - 1;
          }
          while (__stlxr(v20, v18));
          if (!v20)
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
        }
        sub_20BFD7C28((uint64_t)&v64, v65);
        sub_20C37B898((uint64_t)&v60.__type_name);
        if (((uint64_t)v60.__vftable & 7) != 0)
        {
          v21 = (unsigned int *)((unint64_t)v60.__vftable & 0xFFFFFFFFFFFFFFF8);
          do
            v22 = __ldxr(v21);
          while (__stlxr(v22 - 2, v21));
        }
      }
      sub_20C37B898((uint64_t)v34);
    }
  }
  if ((v39 & 7) != 0)
  {
    v23 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
    do
      v24 = __ldxr(v23);
    while (__stlxr(v24 - 2, v23));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
  sub_20BFD265C(&v37);
  if (v36)
    sub_20C35C614(v36);
  if (v50 && !sub_20C377DB0((uint64_t)&v48, a2, 0))
  {
    v7 = 1;
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CreateExcludesRel(this, (pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v60);
    v7 = pxrInternal__aapl__pxrReserved__::UsdRelationship::AddTarget((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v60, a2, 1);
    if ((v62 & 7) != 0)
    {
      v25 = (unsigned int *)(v62 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
    sub_20BFD265C(&v61);
    if (v60.__type_name)
      sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v60.__type_name);
  }
  v60.__vftable = (std::type_info_vtbl *)&v40;
  sub_20BFD6F90((void ***)&v60);
LABEL_56:
  v60.__vftable = (std::type_info_vtbl *)&v57;
  sub_20C37B300((void ***)&v60);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v27 = *((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1))
  {
    v28 = (unsigned int *)(*((_QWORD *)&v54 + 1) + 8);
    do
    {
      v29 = __ldxr(v28);
      v30 = v29 - 1;
    }
    while (__stlxr(v30, v28));
    if (!v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
  sub_20BFD7C28((uint64_t)&v51, v52[0]);
  sub_20C37B898((uint64_t)v49);
  if ((v48 & 7) != 0)
  {
    v31 = (unsigned int *)((unint64_t)v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  return v7;
}

void sub_20C3784CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  sub_20C37B898((uint64_t)&a9);
  sub_20C377F1C((uint64_t)&a14);
  *(_QWORD *)(v25 - 232) = &a18;
  sub_20BFD6F90((void ***)(v25 - 232));
  sub_20C377E74((uint64_t)&a25);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::HasNoIncludedPaths(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  _BOOL8 v7;
  char v9;
  void **v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludesRel(this, (uint64_t)&v10);
  pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)&v10, &v15);
  if ((v14 & 7) != 0)
  {
    v2 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  v9 = 0;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludeRootAttr(this, (uint64_t)&v10);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>((uint64_t)&v10, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v9);
  if ((v14 & 7) != 0)
  {
    v4 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  v7 = v15 == v16 && v9 == 0;
  v10 = (void **)&v15;
  sub_20BFD6F90(&v10);
  return v7;
}

void sub_20C37867C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_20C372B54((uint64_t)&a10);
  a10 = (void **)&a14;
  sub_20BFD6F90(&a10);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ResolveCompleteMembershipExpression(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this@<X0>, uint64_t a2@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  char v5;
  char v6;
  unsigned int *v7;
  unsigned int v8;
  __int128 v9;
  unsigned int *v10;
  unsigned int v11;
  void **v12;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v13;
  void ***v14;
  uint64_t v15;
  void **v16;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  int v18;
  int v19;
  uint64_t v20;
  void *v21[2];
  _OWORD v22[2];
  __int128 v23;
  void *__p[4];

  memset(__p, 0, sizeof(__p));
  v23 = 0u;
  *(_OWORD *)v21 = 0u;
  memset(v22, 0, sizeof(v22));
  sub_20C35C4F8((uint64_t)&v16, (uint64_t *)this + 1, (_DWORD *)this + 4);
  if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v16, v4))goto LABEL_9;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetMembershipExpressionAttr(this, (uint64_t)&v12);
  pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::SdfPathExpression>((uint64_t)&v12, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v21);
  v6 = v5;
  if ((v15 & 7) != 0)
  {
    v7 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
  sub_20BFD265C(&v14);
  if (v13)
    sub_20C35C614(v13);
  if ((v6 & 1) != 0)
  {
    v12 = v21;
    v13 = this;
    v14 = &v16;
    sub_20C3788D0((uint64_t)v21, (uint64_t)&v12, (uint64_t)sub_20C37ACF4, a2);
  }
  else
  {
LABEL_9:
    *(_OWORD *)a2 = *(_OWORD *)v21;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)&v22[0];
    v21[0] = 0;
    v21[1] = 0;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)((char *)v22 + 8);
    *(_QWORD *)(a2 + 40) = *((_QWORD *)&v22[1] + 1);
    memset(v22, 0, sizeof(v22));
    *(_OWORD *)(a2 + 48) = v23;
    *(void **)(a2 + 64) = __p[0];
    v23 = 0uLL;
    v9 = *(_OWORD *)&__p[1];
    *(void **)(a2 + 88) = __p[3];
    *(_OWORD *)(a2 + 72) = v9;
    memset(__p, 0, sizeof(__p));
  }
  if ((v20 & 7) != 0)
  {
    v10 = (unsigned int *)(v20 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v19);
  sub_20BFD265C(&v18);
  if (v17)
    sub_20C35C614(v17);
  if (SHIBYTE(__p[3]) < 0)
    operator delete(__p[1]);
  v16 = (void **)&v23;
  sub_20C00E25C(&v16);
  v16 = (void **)v22 + 1;
  sub_20C00D5A8(&v16);
  if (v21[0])
  {
    v21[1] = v21[0];
    operator delete(v21[0]);
  }
}

void sub_20C37888C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20C35C2E0((uint64_t)va);
  sub_20C00BBB0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20C3788D0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void *v7[3];
  uint64_t v8;
  uint64_t v9;
  void *__p;
  char v11;
  void **v12;

  sub_20C00D1F0(v7, a1);
  pxrInternal__aapl__pxrReserved__::SdfPathExpression::ResolveReferences(v7, a2, a3, a4);
  if (v11 < 0)
    operator delete(__p);
  v12 = (void **)&v9;
  sub_20C00E25C(&v12);
  v12 = (void **)&v8;
  sub_20C00D5A8(&v12);
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
}

void sub_20C378968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C00BBB0((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  void *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int *v21;
  unsigned int v22;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48[3];
  uint64_t v49[5];
  uint64_t v50;
  _QWORD v51[3];
  const char **v52;
  void *v53;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  _QWORD **v58;
  _QWORD *v59;
  uint64_t v60;
  void *v61;
  __int128 v62;
  __int128 __p;
  _QWORD v64[5];

  v64[4] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)a1, (int *)&v53);
    sub_20C37BC8C((uint64_t)v51, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
    sub_20BFD265C(&v53);
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_ComputeMembershipQueryImpl(a1, a2, v51, 0);
    v50 = 0;
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExpansionRuleAttr((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)a1, (uint64_t)&v53);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v53, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v50);
    if ((v56 & 7) != 0)
    {
      v4 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
    sub_20BFD265C(&v55);
    if (v54)
      sub_20C35C614(v54);
    if (!v50)
    {
      v6 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v6)
        v6 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      sub_20BF32220(&v50, (_QWORD *)v6 + 11);
    }
    sub_20C37B958((uint64_t)v49, a2 + 8);
    sub_20C37BD08(v48, a2 + 48);
    pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase((uint64_t)&v53, v49, v48, &v50);
    memset(v64, 0, 32);
    v62 = 0u;
    __p = 0u;
    if (&v53 != (void **)a2)
    {
      if ((*(_QWORD *)a2 & 7) != 0)
      {
        v7 = (unsigned int *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
      *(_QWORD *)a2 = v53;
      v53 = 0;
    }
    sub_20C37A8B4(a2 + 8, (uint64_t *)&v54);
    v9 = a2 + 56;
    sub_20BFD7C28(a2 + 48, *(_QWORD **)(a2 + 56));
    v10 = v59;
    *(_QWORD *)(a2 + 48) = v58;
    *(_QWORD *)(a2 + 56) = v10;
    v11 = v60;
    *(_QWORD *)(a2 + 64) = v60;
    if (v11)
    {
      v10[2] = v9;
      v58 = &v59;
      v59 = 0;
      v60 = 0;
    }
    else
    {
      *(_QWORD *)(a2 + 48) = v9;
    }
    *(_BYTE *)(a2 + 72) = (_BYTE)v61;
    v12 = *(unsigned int **)(a2 + 88);
    *(_OWORD *)(a2 + 80) = v62;
    *((_QWORD *)&v62 + 1) = 0;
    if (v12)
    {
      v13 = v12 + 2;
      do
      {
        v14 = __ldxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(unsigned int *))(*(_QWORD *)v12 + 8))(v12);
    }
    *(_QWORD *)&v62 = 0;
    v16 = *(void **)(a2 + 96);
    if (v16)
    {
      *(_QWORD *)(a2 + 104) = v16;
      operator delete(v16);
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 112) = 0;
    }
    *(_OWORD *)(a2 + 96) = __p;
    *(_QWORD *)(a2 + 112) = v64[0];
    v64[0] = 0;
    __p = 0uLL;
    sub_20C37AA30((void **)(a2 + 120));
    *(_OWORD *)(a2 + 120) = *(_OWORD *)&v64[1];
    *(_QWORD *)(a2 + 136) = v64[3];
    memset(&v64[1], 0, 24);
    v43 = (void **)&v64[1];
    sub_20C37B300(&v43);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    v17 = *((_QWORD *)&v62 + 1);
    if (*((_QWORD *)&v62 + 1))
    {
      v18 = (unsigned int *)(*((_QWORD *)&v62 + 1) + 8);
      do
      {
        v19 = __ldxr(v18);
        v20 = v19 - 1;
      }
      while (__stlxr(v20, v18));
      if (!v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
    sub_20BFD7C28((uint64_t)&v58, v59);
    sub_20C37B898((uint64_t)&v54);
    if ((v53 & 7) != 0)
    {
      v21 = (unsigned int *)((unint64_t)v53 & 0xFFFFFFFFFFFFFFF8);
      do
        v22 = __ldxr(v21);
      while (__stlxr(v22 - 2, v21));
    }
    sub_20C35C4F8((uint64_t)&v36, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v36, v23, &v41);
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ResolveCompleteMembershipExpression((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)a1, (uint64_t)&v53);
    pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator::UsdObjectCollectionExpressionEvaluator(&v43, &v41, &v53);
    sub_20C379C1C(a2, (uint64_t)&v43);
    v52 = (const char **)&v47;
    sub_20C37B300((void ***)&v52);
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
    v24 = v44;
    if (v44)
    {
      v25 = (unsigned int *)(v44 + 8);
      do
      {
        v26 = __ldxr(v25);
        v27 = v26 - 1;
      }
      while (__stlxr(v27, v25));
      if (!v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    }
    if (SHIBYTE(v62) < 0)
      operator delete(v61);
    v52 = (const char **)&v58;
    sub_20C00E25C((void ***)&v52);
    v52 = (const char **)&v56;
    sub_20C00D5A8((void ***)&v52);
    if (v53)
    {
      v54 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v53;
      operator delete(v53);
    }
    v28 = v42;
    if (v42)
    {
      v29 = (unsigned int *)(v42 + 8);
      do
      {
        v30 = __ldxr(v29);
        v31 = v30 - 1;
      }
      while (__stlxr(v31, v29));
      if (!v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    }
    if ((v40 & 7) != 0)
    {
      v32 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
      do
        v33 = __ldxr(v32);
      while (__stlxr(v33 - 2, v32));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v39);
    sub_20BFD265C(&v38);
    if (v37)
      sub_20C35C614(v37);
    sub_20BFD7C28((uint64_t)v48, (_QWORD *)v48[1]);
    sub_20C37B898((uint64_t)v49);
    if ((v50 & 7) != 0)
    {
      v34 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    sub_20BFD7C28((uint64_t)v51, (_QWORD *)v51[1]);
  }
  else
  {
    v53 = "usd/collectionAPI.cpp";
    v54 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)"ComputeMembershipQuery";
    v55 = 635;
    v56 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ComputeMembershipQuery(UsdCollectio"
                            "nMembershipQuery *) const";
    v57 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid query pointer.");
  }
}

void sub_20C378E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,_QWORD *a33)
{
  unsigned int *v34;
  unsigned int v35;

  if ((a31 & 7) != 0)
  {
    v34 = (unsigned int *)(a31 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  sub_20BFD7C28((uint64_t)&a32, a33);
  _Unwind_Resume(a1);
}

void sub_20C378F5C()
{
  JUMPOUT(0x20C378F48);
}

void sub_20C378F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36)
{
  sub_20BFD1A18(&a36);
  JUMPOUT(0x20C378F54);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_ComputeMembershipQueryImpl(uint64_t a1, uint64_t a2, _QWORD *a3, _BYTE *a4)
{
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v15;
  unsigned int *v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::SdfPath *v18;
  _DWORD *v19;
  pxrInternal__aapl__pxrReserved__::SdfPath *v20;
  pxrInternal__aapl__pxrReserved__::SdfPath *v21;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v22;
  unsigned int *v23;
  unsigned int v24;
  char *v25;
  pxrInternal__aapl__pxrReserved__::SdfPath *v26;
  pxrInternal__aapl__pxrReserved__::SdfPath *v27;
  _QWORD *v28;
  _QWORD *v29;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v30;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v31;
  unsigned int *v32;
  _QWORD *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t *String;
  int v42;
  const std::string::value_type *v43;
  std::string::size_type v44;
  _QWORD *v45;
  _QWORD *v46;
  BOOL v47;
  std::string *v48;
  char *v49;
  const char *Text;
  unint64_t v51;
  const char *v52;
  uint64_t v53;
  unsigned int *v54;
  unsigned int v55;
  unint64_t v56;
  const char *v57;
  unsigned int v58;
  unsigned int *v59;
  unsigned int v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int *v63;
  unsigned int *i;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v65;
  _QWORD *v66;
  unsigned int *v67;
  unsigned int v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned int *v72;
  unsigned int *v73;
  unsigned int v74;
  unsigned int v75;
  void *v76;
  uint64_t v77;
  unsigned int *v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int *v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int *v87;
  unsigned int v88;
  uint64_t result;
  _QWORD *v90;
  _BYTE *v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  int v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  char v100;
  __int128 v101;
  void *__p[2];
  _OWORD v103[2];
  uint64_t *v104[3];
  _QWORD v105[4];
  std::string v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  unsigned int *v114;
  uint64_t v115;
  pxrInternal__aapl__pxrReserved__::SdfPath *v116;
  pxrInternal__aapl__pxrReserved__::SdfPath *v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t *v120[3];
  uint64_t v121[5];
  _DWORD *v122[2];

  if (a2
    || (*(_QWORD *)&v93 = "usd/collectionAPI.cpp",
        *((_QWORD *)&v93 + 1) = "_ComputeMembershipQueryImpl",
        *(_QWORD *)&v94 = 665,
        *((_QWORD *)&v94 + 1) = "void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_ComputeMembershipQueryImpl(Usd"
                                "CollectionMembershipQuery *, const SdfPathSet &, BOOL *) const",
        LOBYTE(v95) = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v93, "query", 0),
        (result & 1) != 0))
  {
    sub_20C37B958((uint64_t)v121, a2 + 8);
    v90 = (_QWORD *)(a2 + 48);
    sub_20C37BD08((uint64_t *)v120, a2 + 48);
    v119 = 0;
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExpansionRuleAttr((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)a1, (uint64_t)&v93);
    pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)&v93, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v119);
    if ((BYTE8(v94) & 7) != 0)
    {
      v8 = (unsigned int *)(*((_QWORD *)&v94 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
    sub_20BFD265C(&v94);
    if (*((_QWORD *)&v93 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v93 + 1));
    if (!v119)
    {
      v10 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v10)
        v10 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      sub_20BF32220(&v119, (_QWORD *)v10 + 11);
    }
    v116 = 0;
    v117 = 0;
    v118 = 0;
    v113 = 0;
    v114 = 0;
    v115 = 0;
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludesRel((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)a1, (uint64_t)&v93);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)&v93, (uint64_t *)&v116);
    if ((BYTE8(v94) & 7) != 0)
    {
      v11 = (unsigned int *)(*((_QWORD *)&v94 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
    sub_20BFD265C(&v94);
    if (*((_QWORD *)&v93 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v93 + 1));
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExcludesRel((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)a1, (uint64_t)&v93);
    pxrInternal__aapl__pxrReserved__::UsdRelationship::GetTargets((uint64_t)&v93, (uint64_t *)&v113);
    if ((BYTE8(v94) & 7) != 0)
    {
      v13 = (unsigned int *)(*((_QWORD *)&v94 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v14 = __ldxr(v13);
      while (__stlxr(v14 - 2, v13));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
    sub_20BFD265C(&v94);
    if (*((_QWORD *)&v93 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v93 + 1));
    v15 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v15)
      v15 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if ((v119 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v15 + 13) & 0xFFFFFFFFFFFFFFF8))
    {
      v106.__r_.__value_.__s.__data_[0] = 0;
      pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludeRootAttr((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)a1, (uint64_t)&v93);
      pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<BOOL>((uint64_t)&v93, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v106);
      if ((BYTE8(v94) & 7) != 0)
      {
        v16 = (unsigned int *)(*((_QWORD *)&v94 + 1) & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
      sub_20BFD265C(&v94);
      v18 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)&v93 + 1);
      if (*((_QWORD *)&v93 + 1))
        sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v93 + 1));
      if (v106.__r_.__value_.__s.__data_[0])
      {
        v19 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v18);
        v20 = v117;
        if ((unint64_t)v117 >= v118)
        {
          v21 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD7890((uint64_t *)&v116, v19);
        }
        else
        {
          sub_20BFD6E54(v117, v19);
          sub_20BFD6EA4((_DWORD *)v20 + 1, v19 + 1);
          v21 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v20 + 8);
        }
        v117 = v21;
      }
    }
    sub_20C35C4F8((uint64_t)&v93, (uint64_t *)(a1 + 8), (_DWORD *)(a1 + 16));
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage((pxrInternal__aapl__pxrReserved__::UsdObject *)&v93, v22, &v111);
    if ((BYTE8(v94) & 7) != 0)
    {
      v23 = (unsigned int *)(*((_QWORD *)&v94 + 1) & 0xFFFFFFFFFFFFFFF8);
      do
        v24 = __ldxr(v23);
      while (__stlxr(v24 - 2, v23));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v94 + 1);
    v92 = a1;
    sub_20BFD265C(&v94);
    if (*((_QWORD *)&v93 + 1))
      sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v93 + 1));
    v27 = v116;
    v26 = v117;
    if (v116 != v117)
    {
      v28 = a3 + 1;
      v91 = a4;
      do
      {
        v110 = 0;
        if (pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::IsCollectionAPIPath(v27, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110, (pxrInternal__aapl__pxrReserved__::TfToken *)v25))
        {
          if (sub_20C222ED4((uint64_t)a3, v27))
          {
            if (a4)
            {
              *a4 = 1;
            }
            else
            {
              memset(&v106, 0, sizeof(v106));
              v40 = (_QWORD *)*a3;
              if ((_QWORD *)*a3 != v28)
              {
                do
                {
                  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v40 + 28));
                  v42 = *((char *)String + 23);
                  if (v42 >= 0)
                    v43 = (const std::string::value_type *)String;
                  else
                    v43 = (const std::string::value_type *)*String;
                  if (v42 >= 0)
                    v44 = *((unsigned __int8 *)String + 23);
                  else
                    v44 = String[1];
                  std::string::append(&v106, v43, v44);
                  std::string::append(&v106, ", ");
                  v45 = (_QWORD *)v40[1];
                  if (v45)
                  {
                    do
                    {
                      v46 = v45;
                      v45 = (_QWORD *)*v45;
                    }
                    while (v45);
                  }
                  else
                  {
                    do
                    {
                      v46 = (_QWORD *)v40[2];
                      v47 = *v46 == (_QWORD)v40;
                      v40 = v46;
                    }
                    while (!v47);
                  }
                  v40 = v46;
                }
                while (v46 != v28);
              }
              *(_QWORD *)&v93 = "usd/collectionAPI.cpp";
              *((_QWORD *)&v93 + 1) = "_ComputeMembershipQueryImpl";
              *(_QWORD *)&v94 = 717;
              *((_QWORD *)&v94 + 1) = "void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_ComputeMembershipQueryIm"
                                      "pl(UsdCollectionMembershipQuery *, const SdfPathSet &, BOOL *) const";
              LOBYTE(v95) = 0;
              v48 = &v106;
              if ((v106.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v48 = (std::string *)v106.__r_.__value_.__r.__words[0];
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v93, (pxrInternal__aapl__pxrReserved__ *)"Found circular dependency involving the following collections: [%s]", v25, v48);
              if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v106.__r_.__value_.__l.__data_);
            }
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(v27, &v108);
            v30 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(&v111);
            pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v30, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v108, (uint64_t)&v106);
            if ((pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v106, v31) & 1) != 0)
            {
              sub_20C37A850((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)v105, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v106, &v110);
              v105[0] = off_24C537740;
              sub_20C37BD08((uint64_t *)v104, (uint64_t)a3);
              sub_20C0A7BE0(v104, v27, v27);
              v95 = 0;
              v93 = 0u;
              v94 = 0u;
              v96 = 1065353216;
              v98 = 0;
              v99 = 0;
              v97 = &v98;
              v100 = 0;
              v101 = 0u;
              *(_OWORD *)__p = 0u;
              memset(v103, 0, sizeof(v103));
              pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_ComputeMembershipQueryImpl(v105, &v93, v104, a4);
              v32 = (unsigned int *)*((_QWORD *)&v94 + 1);
              if (*((_QWORD *)&v94 + 1))
              {
                do
                {
                  v122[0] = v32 + 4;
                  v33 = sub_20C37BD5C((uint64_t)v121, v32 + 4, (uint64_t)&unk_20CAC184C, v122);
                  sub_20BF32220(v33 + 3, (_QWORD *)v32 + 3);
                  v32 = *(unsigned int **)v32;
                }
                while (v32);
              }
              sub_20C0A7BE0(v120, v27, v27);
              sub_20C379CA4((uint64_t *)v120, v97, &v98);
              v122[0] = (_DWORD *)v103 + 2;
              sub_20C37B300((void ***)v122);
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              v34 = *((_QWORD *)&v101 + 1);
              if (*((_QWORD *)&v101 + 1))
              {
                v35 = (unsigned int *)(*((_QWORD *)&v101 + 1) + 8);
                do
                {
                  v36 = __ldxr(v35);
                  v37 = v36 - 1;
                }
                while (__stlxr(v37, v35));
                if (!v37)
                  (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
              }
              sub_20BFD7C28((uint64_t)&v97, v98);
              sub_20C37B898((uint64_t)&v93 + 8);
              if ((v93 & 7) != 0)
              {
                v38 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
                do
                  v39 = __ldxr(v38);
                while (__stlxr(v39 - 2, v38));
              }
              sub_20BFD7C28((uint64_t)v104, v104[1]);
              pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)v105);
            }
            else
            {
              *(_QWORD *)&v93 = "usd/collectionAPI.cpp";
              *((_QWORD *)&v93 + 1) = "_ComputeMembershipQueryImpl";
              *(_QWORD *)&v94 = 733;
              *((_QWORD *)&v94 + 1) = "void pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_ComputeMembershipQueryIm"
                                      "pl(UsdCollectionMembershipQuery *, const SdfPathSet &, BOOL *) const";
              LOBYTE(v95) = 0;
              Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v108);
              v51 = v110 & 0xFFFFFFFFFFFFFFF8;
              if ((v110 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v52 = (const char *)(v51 + 16);
                if (*(char *)(v51 + 39) < 0)
                  v52 = *(const char **)v52;
              }
              else
              {
                v52 = "";
              }
              v53 = *(_QWORD *)(v92 + 24);
              if ((v53 & 7) != 0)
              {
                v54 = (unsigned int *)(v53 & 0xFFFFFFFFFFFFFFF8);
                do
                  v55 = __ldxr(v54);
                while (__stxr(v55 + 2, v54));
                if ((v55 & 1) == 0)
                  v53 &= 0xFFFFFFFFFFFFFFF8;
              }
              v56 = v53 & 0xFFFFFFFFFFFFFFF8;
              if ((v53 & 0xFFFFFFFFFFFFFFF8) != 0)
              {
                v57 = (const char *)(v56 + 16);
                if (*(char *)(v56 + 39) < 0)
                  v57 = *(const char **)v57;
              }
              else
              {
                v57 = "";
              }
              pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v93, (pxrInternal__aapl__pxrReserved__ *)"Could not get prim at path <%s>, therefore cannot include its collection '%s' in collection '%s'.", v49, Text, v52, v57);
              if ((v53 & 7) != 0)
              {
                do
                  v58 = __ldxr((unsigned int *)v56);
                while (__stlxr(v58 - 2, (unsigned int *)v56));
              }
              a4 = v91;
            }
            if ((v107 & 7) != 0)
            {
              v59 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
              do
                v60 = __ldxr(v59);
              while (__stlxr(v60 - 2, v59));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v106.__r_.__value_.__r.__words[2] + 1);
            sub_20BFD265C(&v106.__r_.__value_.__r.__words[2]);
            if (v106.__r_.__value_.__l.__size_)
              sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v106.__r_.__value_.__l.__size_);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v109);
            sub_20BFD265C(&v108);
          }
        }
        else
        {
          v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
          v29 = sub_20C37BD5C((uint64_t)v121, (unsigned int *)v27, (uint64_t)&unk_20CAC184C, &v106);
          sub_20BF32220(v29 + 3, &v119);
        }
        if ((v110 & 7) != 0)
        {
          v61 = (unsigned int *)(v110 & 0xFFFFFFFFFFFFFFF8);
          do
            v62 = __ldxr(v61);
          while (__stlxr(v62 - 2, v61));
        }
        v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8);
      }
      while (v27 != v26);
    }
    v63 = v113;
    for (i = v114; v63 != i; v63 += 2)
    {
      v65 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v65)
        v65 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
      v66 = sub_20C37BD5C((uint64_t)v121, v63, (uint64_t)&unk_20CAC184C, &v106);
      sub_20BF32220(v66 + 3, (_QWORD *)v65 + 10);
    }
    pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase((uint64_t)&v93, v121, v120);
    memset(v103, 0, sizeof(v103));
    v101 = 0u;
    *(_OWORD *)__p = 0u;
    if (&v93 != (__int128 *)a2)
    {
      if ((*(_QWORD *)a2 & 7) != 0)
      {
        v67 = (unsigned int *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
        do
          v68 = __ldxr(v67);
        while (__stlxr(v68 - 2, v67));
      }
      *(_QWORD *)a2 = v93;
      *(_QWORD *)&v93 = 0;
    }
    sub_20C37A8B4(a2 + 8, (uint64_t *)&v93 + 1);
    v69 = a2 + 56;
    sub_20BFD7C28((uint64_t)v90, *(_QWORD **)(a2 + 56));
    v70 = v98;
    *(_QWORD *)(a2 + 48) = v97;
    *(_QWORD *)(a2 + 56) = v70;
    v71 = v99;
    *(_QWORD *)(a2 + 64) = v99;
    if (v71)
    {
      v70[2] = v69;
      v97 = &v98;
      v98 = 0;
      v99 = 0;
    }
    else
    {
      *v90 = v69;
    }
    *(_BYTE *)(a2 + 72) = v100;
    v72 = *(unsigned int **)(a2 + 88);
    *(_OWORD *)(a2 + 80) = v101;
    *((_QWORD *)&v101 + 1) = 0;
    if (v72)
    {
      v73 = v72 + 2;
      do
      {
        v74 = __ldxr(v73);
        v75 = v74 - 1;
      }
      while (__stlxr(v75, v73));
      if (!v75)
        (*(void (**)(unsigned int *))(*(_QWORD *)v72 + 8))(v72);
    }
    *(_QWORD *)&v101 = 0;
    v76 = *(void **)(a2 + 96);
    if (v76)
    {
      *(_QWORD *)(a2 + 104) = v76;
      operator delete(v76);
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 104) = 0;
      *(_QWORD *)(a2 + 112) = 0;
    }
    *(_OWORD *)(a2 + 96) = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)&v103[0];
    __p[1] = 0;
    *(_QWORD *)&v103[0] = 0;
    __p[0] = 0;
    sub_20C37AA30((void **)(a2 + 120));
    *(_OWORD *)(a2 + 120) = *(_OWORD *)((char *)v103 + 8);
    *(_QWORD *)(a2 + 136) = *((_QWORD *)&v103[1] + 1);
    memset((char *)v103 + 8, 0, 24);
    v106.__r_.__value_.__r.__words[0] = (std::string::size_type)v103 + 8;
    sub_20C37B300((void ***)&v106);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v77 = *((_QWORD *)&v101 + 1);
    if (*((_QWORD *)&v101 + 1))
    {
      v78 = (unsigned int *)(*((_QWORD *)&v101 + 1) + 8);
      do
      {
        v79 = __ldxr(v78);
        v80 = v79 - 1;
      }
      while (__stlxr(v80, v78));
      if (!v80)
        (*(void (**)(uint64_t))(*(_QWORD *)v77 + 8))(v77);
    }
    sub_20BFD7C28((uint64_t)&v97, v98);
    sub_20C37B898((uint64_t)&v93 + 8);
    if ((v93 & 7) != 0)
    {
      v81 = (unsigned int *)(v93 & 0xFFFFFFFFFFFFFFF8);
      do
        v82 = __ldxr(v81);
      while (__stlxr(v82 - 2, v81));
    }
    v83 = v112;
    if (v112)
    {
      v84 = (unsigned int *)(v112 + 8);
      do
      {
        v85 = __ldxr(v84);
        v86 = v85 - 1;
      }
      while (__stlxr(v86, v84));
      if (!v86)
        (*(void (**)(uint64_t))(*(_QWORD *)v83 + 8))(v83);
    }
    *(_QWORD *)&v93 = &v113;
    sub_20BFD6F90((void ***)&v93);
    *(_QWORD *)&v93 = &v116;
    sub_20BFD6F90((void ***)&v93);
    if ((v119 & 7) != 0)
    {
      v87 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
      do
        v88 = __ldxr(v87);
      while (__stlxr(v88 - 2, v87));
    }
    sub_20BFD7C28((uint64_t)v120, v120[1]);
    return sub_20C37B898((uint64_t)v121);
  }
  return result;
}

void sub_20C379A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;
  uint64_t v56;
  unsigned int *v57;
  unsigned int v58;

  v56 = *(_QWORD *)(v54 - 176);
  if ((v56 & 7) != 0)
  {
    v57 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stlxr(v58 - 2, v57));
  }
  sub_20BFD7C28(v54 - 168, *(_QWORD **)(v54 - 160));
  sub_20C37B898(v54 - 144);
  _Unwind_Resume(a1);
}

__n128 sub_20C379C1C(uint64_t a1, uint64_t a2)
{
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  __n128 result;

  v4 = *(unsigned int **)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)a2;
  *(_QWORD *)(a2 + 8) = 0;
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  *(_QWORD *)a2 = 0;
  sub_20C14D5BC(a1 + 96, (__n128 *)(a2 + 16));
  sub_20C37AA30((void **)(a1 + 120));
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 120) = result;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return result;
}

uint64_t *sub_20C379CA4(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20BFD72BC(v5, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28), (_DWORD *)v4 + 7);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::Validate(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *a1, uint64_t a2)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  unsigned int *v5;
  unsigned int v6;
  const char *v7;
  char *v8;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v9;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v10;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v11;
  unint64_t v12;
  const char *v13;
  int v14;
  void ***v15;
  uint64_t v16;
  int v17;
  void ***v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  void **v29;
  std::string::size_type v30;
  _QWORD v31[3];
  char v32;
  uint64_t v33;
  void **v34[3];
  void ***v35;
  void *v36[2];
  __int128 v37;
  uint64_t v38;
  int v39;
  _QWORD **v40;
  _QWORD *v41[2];
  char v42;
  __int128 v43;
  __int128 __p;
  _BYTE v45[40];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v33 = 0;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExpansionRuleAttr(a1, (uint64_t)v36);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v36, v4))pxrInternal__aapl__pxrReserved__::UsdAttribute::_Get<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t)v36, (const pxrInternal__aapl__pxrReserved__::Usd_PrimData *)&v33);
  if ((BYTE8(v37) & 7) != 0)
  {
    v5 = (unsigned int *)(*((_QWORD *)&v37 + 1) & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
  sub_20BFD265C(&v37);
  if (v36[1])
    sub_20C35C614((pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v36[1]);
  if (v33)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v9)
      v9 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if ((v33 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v9 + 13) & 0xFFFFFFFFFFFFFFF8))
    {
      v10 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v10)
        v10 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if ((v33 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v10 + 11) & 0xFFFFFFFFFFFFFFF8))
      {
        v11 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v11)
          v11 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        v12 = v33 & 0xFFFFFFFFFFFFFFF8;
        if ((v33 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v11 + 12) & 0xFFFFFFFFFFFFFFF8))
        {
          if (a2)
          {
            if (v12)
            {
              v13 = (const char *)(v12 + 16);
              if (*(char *)(v12 + 39) < 0)
                v13 = *(const char **)v13;
            }
            else
            {
              v13 = "";
            }
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Invalid expansionRule value '%s'\n", v7, v8, v13);
            if ((SBYTE7(v37) & 0x80u) == 0)
              v29 = v36;
            else
              v29 = (void **)v36[0];
            if ((SBYTE7(v37) & 0x80u) == 0)
              v30 = BYTE7(v37);
            else
              v30 = (std::string::size_type)v36[1];
            std::string::append((std::string *)a2, (const std::string::value_type *)v29, v30);
            if (SBYTE7(v37) < 0)
              operator delete(v36[0]);
            a2 = 0;
          }
          goto LABEL_50;
        }
      }
    }
  }
  v32 = 0;
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetCollectionPath(a1, (int *)v36);
  sub_20C37BC8C((uint64_t)v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v36, 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v36 + 1);
  sub_20BFD265C(v36);
  v38 = 0;
  *(_OWORD *)v36 = 0u;
  v37 = 0u;
  v39 = 1065353216;
  v41[0] = 0;
  v41[1] = 0;
  v40 = v41;
  v42 = 0;
  v43 = 0u;
  __p = 0u;
  memset(v45, 0, 32);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::_ComputeMembershipQueryImpl((uint64_t)a1, (uint64_t)v36, v31, &v32);
  if (!v32)
  {
    if (!v42)
      goto LABEL_38;
    v34[0] = (void **)&off_24C537798;
    v35 = v34;
    v14 = sub_20C37A224(&v36[1], (uint64_t)v34);
    v15 = v35;
    if (v35 == v34)
    {
      v16 = 4;
      v15 = v34;
    }
    else
    {
      if (!v35)
        goto LABEL_32;
      v16 = 5;
    }
    ((void (*)(void))(*v15)[v16])();
LABEL_32:
    v34[0] = (void **)&off_24C537828;
    v35 = v34;
    v17 = sub_20C37A224(&v36[1], (uint64_t)v34);
    v18 = v35;
    if (v35 == v34)
    {
      v19 = 4;
      v18 = v34;
    }
    else
    {
      if (!v35)
        goto LABEL_37;
      v19 = 5;
    }
    ((void (*)(void))(*v18)[v19])();
LABEL_37:
    if (((v14 | v17) & 1) == 0)
    {
      if (!a2)
        goto LABEL_39;
      std::string::append((std::string *)a2, "Found both includes and excludes among the root-most rules -- interpretation is ambiguous");
      goto LABEL_25;
    }
LABEL_38:
    a2 = 1;
    goto LABEL_39;
  }
  if (a2)
  {
    std::string::append((std::string *)a2, "Found one or more circular dependencies amongst the set of included (directly and transitively) collections.");
LABEL_25:
    a2 = 0;
  }
LABEL_39:
  v34[0] = (void **)&v45[8];
  sub_20C37B300(v34);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  v20 = *((_QWORD *)&v43 + 1);
  if (*((_QWORD *)&v43 + 1))
  {
    v21 = (unsigned int *)(*((_QWORD *)&v43 + 1) + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  sub_20BFD7C28((uint64_t)&v40, v41[0]);
  sub_20C37B898((uint64_t)&v36[1]);
  if (((uint64_t)v36[0] & 7) != 0)
  {
    v24 = (unsigned int *)((unint64_t)v36[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20BFD7C28((uint64_t)v31, (_QWORD *)v31[1]);
LABEL_50:
  if ((v33 & 7) != 0)
  {
    v26 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  return a2;
}

void sub_20C37A148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  unsigned int *v24;
  unsigned int v25;

  if ((a14 & 7) != 0)
  {
    v24 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C37A224(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::SdfPath *i;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  if (!a1[3])
    return 0;
  v3 = (_QWORD *)a1[2];
  if (v3)
  {
    while (2)
    {
      for (i = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v3 + 2), &v12);
            ;
            i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD265C(&v14))
      {
        v6 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(i);
        if (v12 == *v6)
          break;
        if (sub_20C0E70D0(a1, (unsigned int *)&v12))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
          sub_20BFD265C(&v12);
          goto LABEL_14;
        }
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, &v14);
        sub_20BFD3EBC((int *)&v12, &v14);
        sub_20BFD3F10((int *)&v12 + 1, &v15);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
      sub_20BFD265C(&v12);
      sub_20C37B3D0((uint64_t)&v12, (uint64_t)(v3 + 2));
      v7 = *(_QWORD *)(a2 + 24);
      if (!v7)
        sub_20BE9E974();
      v8 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 48))(v7, &v12);
      if ((v13 & 7) != 0)
      {
        v9 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
      sub_20BFD265C(&v12);
      if (!v8)
        return 0;
LABEL_14:
      v3 = (_QWORD *)*v3;
      if (v3)
        continue;
      break;
    }
  }
  return 1;
}

void sub_20C37A388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C37B384((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ResetCollection(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;

  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludesRel(this, (uint64_t)&v10);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v10, v2))v3 = pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v10, 1);
  else
    v3 = 1;
  if ((v14 & 7) != 0)
  {
    v4 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExcludesRel(this, (uint64_t)&v10);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v10, v6))v3 = pxrInternal__aapl__pxrReserved__::UsdRelationship::ClearTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)&v10, 1) & v3;
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  return v3;
}

void sub_20C37A4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C377F1C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::BlockCollection(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this)
{
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v14;
  int v15;
  int v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::SdfPath **v18;

  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetIncludesRel(this, (uint64_t)v13);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v13, v2))
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v3 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v13, &v10);
    v18 = &v10;
    sub_20BFD6F90((void ***)&v18);
  }
  else
  {
    v3 = 1;
  }
  if ((v17 & 7) != 0)
  {
    v4 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
  pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::GetExcludesRel(this, (uint64_t)v13);
  if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v13, v6))
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v3 = pxrInternal__aapl__pxrReserved__::UsdRelationship::SetTargets((pxrInternal__aapl__pxrReserved__::UsdRelationship *)v13, &v10) & v3;
    v18 = &v10;
    sub_20BFD6F90((void ***)&v18);
  }
  if ((v17 & 7) != 0)
  {
    v7 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  if (v14)
    sub_20C35C614(v14);
  return v3;
}

void sub_20C37A61C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  va_list va;

  va_start(va, a4);
  *(_QWORD *)(v5 - 40) = v4;
  sub_20BFD6F90((void ***)(v5 - 40));
  sub_20C377F1C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::CanContainPropertyName(pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t *EmptyString;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v3;
  uint64_t *v4;
  const char *v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v10;
  const char *v11;

  if ((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(this);
  v3 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v3)
    v3 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if ((*((_QWORD *)v3 + 3) & 0xFFFFFFFFFFFFFFF8) != 0)
    v4 = (uint64_t *)((*((_QWORD *)v3 + 3) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v4 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v3);
  if (*((char *)v4 + 23) >= 0)
    v5 = (const char *)v4;
  else
    v5 = (const char *)*v4;
  v6 = *((char *)EmptyString + 23);
  if (v6 >= 0)
    v7 = *((unsigned __int8 *)EmptyString + 23);
  else
    v7 = EmptyString[1];
  v8 = strlen(v5);
  if (v7 < v8)
    return 0;
  v10 = v8;
  if (v6 >= 0)
    v11 = (const char *)EmptyString;
  else
    v11 = (const char *)*EmptyString;
  return strncmp(v11, v5, v10) == 0;
}

uint64_t *sub_20C37A72C()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C368F60((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C37A800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C37A850(pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(a1, a2);
  *(_QWORD *)result = &unk_24C537498;
  v5 = *a3;
  *((_QWORD *)result + 3) = *a3;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *((_QWORD *)result + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void sub_20C37A8B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  sub_20C37A954(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void sub_20C37A954(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_20C37A9A8(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_20C37A9A8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C37A9E4((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_20C37A9E4(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

void sub_20C37AA30(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 136;
        sub_20C37AA9C((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

_DWORD *sub_20C37AA9C(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void **v6;

  v6 = (void **)(a2 + 112);
  sub_20C37AB24(&v6);
  v6 = (void **)(a2 + 80);
  sub_20C37AC84(&v6);
  v6 = (void **)(a2 + 56);
  sub_20BDE5038(&v6);
  v3 = *(void **)(a2 + 32);
  if (v3)
  {
    *(_QWORD *)(a2 + 40) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)(a2 + 16) = v4;
    operator delete(v4);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 4));
  return sub_20BFD265C((_DWORD *)a2);
}

void sub_20C37AB24(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_20C37ABA8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C37ABA8(uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v4 = (void **)(a2 + 24);
  sub_20C37ABEC(&v4);
  v3 = *(void **)a2;
  if (*(_QWORD *)a2)
  {
    *(_QWORD *)(a2 + 8) = v3;
    operator delete(v3);
  }
}

void sub_20C37ABEC(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = (char *)**a1;
  if (!v2)
    return;
  v4 = (char *)v1[1];
  v5 = **a1;
  if (v4 == v2)
    goto LABEL_10;
  do
  {
    v6 = v4 - 32;
    v7 = (char *)*((_QWORD *)v4 - 1);
    if (v4 - 32 == v7)
    {
      v7 = v4 - 32;
      v8 = 4;
    }
    else
    {
      if (!v7)
        goto LABEL_8;
      v8 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
LABEL_8:
    v4 = v6;
  }
  while (v6 != v2);
  v5 = **a1;
LABEL_10:
  v1[1] = v2;
  operator delete(v5);
}

void sub_20C37AC84(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)(v4 - 48));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C37ACF4(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v8;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v9;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v10;
  const char *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  const char *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unint64_t v19;
  const char *v20;
  void **v21;
  void **v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  unint64_t v26;
  const char *v27;
  const char *p_p;
  unsigned int v29;
  uint64_t v30;
  char *v31;
  void **v32;
  pxrInternal__aapl__pxrReserved__::SdfPathExpression *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int v39;
  int v40;
  int v41;
  void *v42[2];
  char v43;
  void *v44[2];
  char v45;
  void *v46[2];
  char v47;
  void *__p;
  uint64_t v49;
  char v50;
  void *v51;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  char v61;

  v5 = *(_QWORD *)(a1 + 8);
  v6 = a2[31];
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a2 + 2);
  if (!v6)
  {
    v57 = "usd/collectionAPI.cpp";
    v58 = "operator()";
    v59 = 586;
    v60 = "auto pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ResolveCompleteMembershipExpression()::(anonymous cla"
          "ss)::operator()(const SdfPathExpression::ExpressionReference &) const";
    v61 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)&v51, *(pxrInternal__aapl__pxrReserved__::SdfPathExpression **)a1);
    if (v54 >= 0)
      v15 = (const char *)&v51;
    else
      v15 = (const char *)v51;
    v16 = *(_QWORD *)(v5 + 24);
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 2, v17));
      if ((v18 & 1) == 0)
        v16 &= 0xFFFFFFFFFFFFFFF8;
    }
    v19 = v16 & 0xFFFFFFFFFFFFFFF8;
    if ((v16 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v20 = (const char *)(v19 + 16);
      if (*(char *)(v19 + 39) < 0)
        v20 = *(const char **)v20;
    }
    else
    {
      v20 = "";
    }
    sub_20C348EEC(*(_QWORD *)(a1 + 16), (int *)v46);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v46, (uint64_t)&__p);
    if (v50 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v57, 1, (pxrInternal__aapl__pxrReserved__ *)"Unexpected reference to empty name in expression '%s' from collection '%s' on prim <%s>; substituting empty expression",
      v15,
      v20,
      p_p);
    if (v50 < 0)
      operator delete(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v46 + 1);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_20BFD265C(v46);
    if ((v16 & 7) != 0)
    {
      do
        v29 = __ldxr((unsigned int *)v19);
      while (__stlxr(v29 - 2, (unsigned int *)v19));
    }
    if (SHIBYTE(v54) < 0)
      operator delete(v51);
    goto LABEL_51;
  }
  v57 = a2;
  v58 = a2 + 8;
  v51 = (void *)pxrInternal__aapl__pxrReserved__::SdfPathExpression::ExpressionReference::Weaker((pxrInternal__aapl__pxrReserved__::SdfPathExpression::ExpressionReference *)a1);
  v52 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)((char *)v51 + 8);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_20C00CA54((uint64_t)&__p, (uint64_t)&v57, (uint64_t)&v51);
  if ((_DWORD)v8)
  {
LABEL_51:
    v30 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v8);
    sub_20C00D1F0(a3, v30);
    return;
  }
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v56);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    pxrInternal__aapl__pxrReserved__::UsdObject::GetStage(*(pxrInternal__aapl__pxrReserved__::UsdObject **)(a1 + 16), v9, &v57);
    v10 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08((uint64_t *)&v57);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v10, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (uint64_t)&v51);
    v11 = v58;
    if (v58)
    {
      v12 = (unsigned int *)(v58 + 8);
      do
      {
        v13 = __ldxr(v12);
        v14 = v13 - 1;
      }
      while (__stlxr(v14, v12));
      if (!v14)
        (*(void (**)(const char *))(*(_QWORD *)v11 + 8))(v11);
    }
  }
  else
  {
    sub_20C35C4F8((uint64_t)&v51, (uint64_t *)(v5 + 8), (_DWORD *)(v5 + 16));
  }
  sub_20C37A850((pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&__p, (const pxrInternal__aapl__pxrReserved__::UsdPrim *)&v51, &v56);
  __p = off_24C537740;
  if (v49
    && (*(_BYTE *)(v49 + 57) & 8) == 0
    && (pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::_IsCompatible((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&__p) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ResolveCompleteMembershipExpression((pxrInternal__aapl__pxrReserved__::UsdCollectionAPI *)&__p);
  }
  else
  {
    v57 = "usd/collectionAPI.cpp";
    v58 = "operator()";
    v59 = 611;
    v60 = "auto pxrInternal__aapl__pxrReserved__::UsdCollectionAPI::ResolveCompleteMembershipExpression()::(anonymous cla"
          "ss)::operator()(const SdfPathExpression::ExpressionReference &) const";
    v61 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (uint64_t)v46);
    if (v47 >= 0)
      v21 = v46;
    else
      v21 = (void **)v46[0];
    pxrInternal__aapl__pxrReserved__::SdfPathExpression::GetText((uint64_t *)v44, *(pxrInternal__aapl__pxrReserved__::SdfPathExpression **)a1);
    if (v45 >= 0)
      v22 = v44;
    else
      v22 = (void **)v44[0];
    v23 = *(_QWORD *)(v5 + 24);
    if ((v23 & 7) != 0)
    {
      v24 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 2, v24));
      if ((v25 & 1) == 0)
        v23 &= 0xFFFFFFFFFFFFFFF8;
    }
    v26 = v23 & 0xFFFFFFFFFFFFFFF8;
    if ((v23 & 0xFFFFFFFFFFFFFFF8) != 0)
    {
      v27 = (const char *)(v26 + 16);
      if (*(char *)(v26 + 39) < 0)
        v27 = *(const char **)v27;
    }
    else
    {
      v27 = "";
    }
    sub_20C348EEC(*(_QWORD *)(a1 + 16), &v40);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)&v40, (uint64_t)v42);
    if (v43 >= 0)
      v32 = v42;
    else
      v32 = (void **)v42[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v57, (pxrInternal__aapl__pxrReserved__ *)"No collection at path <%s> resolving references in expression '%s' from collection '%s' on prim <%s>; substituting empty expression",
      v31,
      v21,
      v22,
      v27,
      v32);
    if (v43 < 0)
      operator delete(v42[0]);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
    v33 = (pxrInternal__aapl__pxrReserved__::SdfPathExpression *)sub_20BFD265C(&v40);
    if ((v23 & 7) != 0)
    {
      do
        v34 = __ldxr((unsigned int *)v26);
      while (__stlxr(v34 - 2, (unsigned int *)v26));
    }
    if (v45 < 0)
      operator delete(v44[0]);
    if (v47 < 0)
      operator delete(v46[0]);
    v35 = pxrInternal__aapl__pxrReserved__::SdfPathExpression::Nothing(v33);
    sub_20C00D1F0(a3, v35);
  }
  pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase::~UsdAPISchemaBase((pxrInternal__aapl__pxrReserved__::UsdAPISchemaBase *)&__p);
  if ((v55 & 7) != 0)
  {
    v36 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
  sub_20BFD265C(&v53);
  if (v52)
    sub_20C35C614(v52);
  if ((v56 & 7) != 0)
  {
    v38 = (unsigned int *)(v56 & 0xFFFFFFFFFFFFFFF8);
    do
      v39 = __ldxr(v38);
    while (__stlxr(v39 - 2, v38));
  }
}

void sub_20C37B144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45)
{
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;

  v46 = *(_QWORD *)(v45 - 112);
  if ((v46 & 7) != 0)
  {
    v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
    do
      v48 = __ldxr(v47);
    while (__stlxr(v48 - 2, v47));
  }
  _Unwind_Resume(exception_object);
}

void sub_20C37B300(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        sub_20C37AA9C((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_20C37B384(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *(_QWORD *)(a1 + 8);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C37B3D0(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v4 = sub_20BFD6E54((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD6EA4(v4 + 1, (_DWORD *)(a2 + 4));
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)(a1 + 8) &= 0xFFFFFFFFFFFFFFF8;
  }
  return a1;
}

void sub_20C37B438(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 32;
      v7 = v4 - 32;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 32;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C37B4C4(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v16;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BED2F10(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12[32 * v5];
  v17 = v16;
  v18 = &v12[32 * v11];
  *(_QWORD *)sub_20C37A850(v16, a2, a3) = off_24C537740;
  v17 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v17 + 32);
  sub_20C37B5BC(a1, &v15);
  v13 = a1[1];
  sub_20C37B750((uint64_t)&v15);
  return v13;
}

void sub_20C37B5A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C37B750((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C37B5BC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C37B630((int)a1 + 16, a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C37B630(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v13;

  v11 = 0;
  v12 = a7 - 32;
  while (a3 + v11 != a5)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v12 + v11);
    v11 -= 32;
    sub_20C37B6D8(a1, v13, (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)(v11 + a3));
  }
  return a6;
}

pxrInternal__aapl__pxrReserved__::UsdSchemaBase *sub_20C37B6D8(int a1, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *this, pxrInternal__aapl__pxrReserved__::UsdSchemaBase *a3)
{
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *result;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = pxrInternal__aapl__pxrReserved__::UsdSchemaBase::UsdSchemaBase(this, a3);
  *(_QWORD *)result = &unk_24C537498;
  v5 = *((_QWORD *)a3 + 3);
  *((_QWORD *)result + 3) = v5;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *((_QWORD *)result + 3) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)result = off_24C537740;
  return result;
}

uint64_t sub_20C37B750(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 32);
    *(_QWORD *)(a1 + 16) = i - 32;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C37B7A0(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::UsdPrim *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v15;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v16;
  pxrInternal__aapl__pxrReserved__::UsdSchemaBase *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BED2F10(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)&v12[32 * v5];
  v17 = v16;
  v18 = &v12[32 * v11];
  *(_QWORD *)sub_20C37A850(v16, a2, a3) = off_24C537740;
  v17 = (pxrInternal__aapl__pxrReserved__::UsdSchemaBase *)((char *)v17 + 32);
  sub_20C37B5BC(a1, &v15);
  v13 = a1[1];
  sub_20C37B750((uint64_t)&v15);
  return v13;
}

void sub_20C37B884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C37B750((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C37B898(uint64_t a1)
{
  void *v2;

  sub_20C37A9A8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *sub_20C37B8D0(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C37B918();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType::~UsdCollectionMembershipQueryTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *sub_20C37B918()
{
  pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *)operator new(0x28uLL);
  pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType::UsdCollectionMembershipQueryTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C37B944(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C37B958(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20BDEC6E0(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    sub_20C37B9CC(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_20C37B9B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C37B898(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C37B9CC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD v23[2];
  char v24;

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v12 = a1 + 16;
  v13 = operator new(0x20uLL);
  v23[0] = v13;
  v23[1] = a1 + 16;
  *v13 = 0;
  v13[1] = v6;
  sub_20C37B3D0((uint64_t)(v13 + 2), a3);
  v24 = 1;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v7 || (float)(v15 * (float)v7) < v14)
  {
    v16 = 1;
    if (v7 >= 3)
      v16 = (v7 & (v7 - 1)) != 0;
    v17 = v16 | (2 * v7);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v20)
  {
    *(_QWORD *)v23[0] = *v20;
    *v20 = v23[0];
  }
  else
  {
    *(_QWORD *)v23[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v23[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = v12;
    if (*(_QWORD *)v23[0])
    {
      v21 = *(_QWORD *)(*(_QWORD *)v23[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v21 >= v7)
          v21 %= v7;
      }
      else
      {
        v21 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v21) = v23[0];
    }
  }
  v10 = (_QWORD *)v23[0];
  v23[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C37BC48((uint64_t)v23, 0);
  return v10;
}

void sub_20C37BC30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C37BC48((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20C37BC48(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C37A9E4((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t sub_20C37BC8C(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 8 * a3;
    do
    {
      sub_20BFD72BC((uint64_t **)a1, v4, a2, a2);
      a2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 + 8);
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_20C37BCF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFD7C28(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C37BD08(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20C379CA4(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_20C37BD44(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFD7C28(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C37BD5C(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C12C484(a1, v6, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C37BC48((uint64_t)v21, 0);
  return v10;
}

void sub_20C37BFB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C37BC48((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C37BFD0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C537798;
  return result;
}

void sub_20C37BFF4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C537798;
}

BOOL sub_20C37C00C(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v3)
    v3 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  return (*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v3 + 10) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_20C37C060(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C537808))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C37C09C()
{
  return &unk_24C537808;
}

_QWORD *sub_20C37C0B0()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C537828;
  return result;
}

void sub_20C37C0D4(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C537828;
}

BOOL sub_20C37C0EC(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  if (!v3)
    v3 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
  return (*(_QWORD *)(a2 + 8) & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v3 + 10) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_20C37C140(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C537888))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C37C17C()
{
  return &unk_24C537888;
}

void pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType::~UsdCollectionMembershipQueryTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *this)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int *v5;
  unsigned int v6;
  void **v7;

  v7 = (void **)((char *)this + 16);
  sub_20BEEB2B8(&v7);
  v2 = *((_QWORD *)this + 1);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  if ((*(_QWORD *)this & 7) != 0)
  {
    v5 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
}

pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType::UsdCollectionMembershipQueryTokens_StaticTokenType(unsigned int **this)
{
  unsigned int **v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int **v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v20;
  unsigned int *v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned int **)(pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "IncludedByMembershipExpression", 0)
                       + 8);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v2, "ExcludedByMembershipExpression", 0);
  v3 = *this;
  v20 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v20 = v4;
  }
  v6 = *v2;
  v21 = v6;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v21 = v7;
  }
  this[2] = 0;
  this[3] = 0;
  this[4] = 0;
  v9 = (unsigned int *)operator new(0x10uLL);
  v10 = 0;
  this[2] = v9;
  this[3] = v9;
  this[4] = v9 + 4;
  do
  {
    v11 = (&v20)[v10];
    *(_QWORD *)v9 = v11;
    if ((v11 & 7) != 0)
    {
      v12 = (unsigned int *)((unint64_t)v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 2, v12));
      if ((v13 & 1) == 0)
        *(_QWORD *)v9 &= 0xFFFFFFFFFFFFFFF8;
    }
    ++v10;
    v9 += 2;
  }
  while (v10 != 2);
  v14 = (unsigned int **)&v22;
  this[3] = v9;
  do
  {
    v16 = (uint64_t)*--v14;
    v15 = v16;
    if ((v16 & 7) != 0)
    {
      v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
  }
  while (v14 != &v20);
  return (pxrInternal__aapl__pxrReserved__::UsdCollectionMembershipQueryTokens_StaticTokenType *)this;
}

void sub_20C37C388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;

  sub_20BEEB2B8(&a10);
  v17 = &a14;
  while (1)
  {
    v19 = *--v17;
    v18 = v19;
    if ((v19 & 7) != 0)
    {
      v20 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v21 = __ldxr(v20);
      while (__stlxr(v21 - 2, v20));
    }
    if (v17 == (uint64_t *)&a12)
    {
      if ((*v15 & 7) != 0)
      {
        v22 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v23 = __ldxr(v22);
        while (__stlxr(v23 - 2, v22));
      }
      if ((*v14 & 7) != 0)
      {
        v24 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v25 = __ldxr(v24);
        while (__stlxr(v25 - 2, v24));
      }
      _Unwind_Resume(a1);
    }
  }
}

pxrInternal__aapl__pxrReserved__ *pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator::UsdObjectCollectionExpressionEvaluator(pxrInternal__aapl__pxrReserved__ *a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::SdfPathExpression *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t CollectionPredicateLibrary;

  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *((_QWORD *)a1 + 1) = v5;
  if (v5)
  {
    v6 = (unsigned int *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  CollectionPredicateLibrary = pxrInternal__aapl__pxrReserved__::UsdGetCollectionPredicateLibrary(a1);
  sub_20C37C488(a3, CollectionPredicateLibrary, (uint64_t)a1 + 16);
  return a1;
}

void sub_20C37C470(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B4E8(v3);
  _Unwind_Resume(exception_object);
}

void sub_20C37C488(pxrInternal__aapl__pxrReserved__::SdfPathExpression *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v4;
  _QWORD v5[3];
  _QWORD v6[2];
  void **v7;

  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v6[0] = a3;
  v6[1] = a2;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_MakePathExpressionEvalImpl((char *)a3, this, (uint64_t)v6, (void (*)(uint64_t, uint64_t))sub_20C37FFDC))
  {
    v4 = *(void **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v4;
      operator delete(v4);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_20C37AA30((void **)(a3 + 24));
    *(_QWORD *)(a3 + 24) = 0;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    memset(v5, 0, sizeof(v5));
    v7 = (void **)v5;
    sub_20C37B300(&v7);
  }
}

void sub_20C37C540(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C37FF94(v1);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator::Match(pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  unint64_t v2;
  uint64_t (*v5)(uint64_t *);
  char v6;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v7;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int IsDefined;
  char v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _BYTE v24[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v25;
  int v26;
  int v27;
  uint64_t v28;

  v5 = sub_20C369024(this);
  if (!(v6 & 1 | (unint64_t)v5))
    return 0;
  v7 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08((uint64_t *)this);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v7, a2, (uint64_t)v24);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v24, v8);
  v10 = IsDefined;
  if (IsDefined)
  {
    v11 = *((_QWORD *)this + 1);
    v21 = *(_QWORD *)this;
    v22 = v11;
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v2 = sub_20C37C698((uint64_t)this + 16, (uint64_t)v24, (uint64_t)&v23, (uint64_t)&v21);
    v14 = v22;
    if (v22)
    {
      v15 = (unsigned int *)(v22 + 8);
      do
      {
        v16 = __ldxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
  }
  if ((v28 & 7) != 0)
  {
    v18 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
  sub_20BFD265C(&v26);
  if (v25)
    sub_20C35C614(v25);
  if ((v10 & 1) == 0)
    return 0;
  return v2;
}

void sub_20C37C66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  if (a4)
    sub_20C96B340(a4);
  sub_20C37C6E8((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20C37C698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[4];
  uint64_t v6;

  if (*(_QWORD *)(a1 + 24) == *(_QWORD *)(a1 + 32))
    return 0;
  v6 = *(_QWORD *)(a1 + 24);
  v5[0] = &v6;
  v5[1] = a2;
  v5[2] = a3;
  v5[3] = a4;
  return pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_EvalExpr((int **)a1, (uint64_t)v5, (uint64_t (*)(uint64_t, uint64_t))sub_20C381858);
}

uint64_t sub_20C37C6E8(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator::Match(uint64_t *a1, uint64_t a2)
{
  uint64_t (*v4)(uint64_t *);
  char v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v4 = sub_20C369024(a1);
  if (!(v5 & 1 | (unint64_t)v4))
    return 0;
  v6 = a1[1];
  v15 = *a1;
  v16 = v6;
  if (v6)
  {
    v7 = (unsigned int *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = sub_20C37C698((uint64_t)(a1 + 2), a2, (uint64_t)&v17, (uint64_t)&v15);
  v10 = v16;
  if (v16)
  {
    v11 = (unsigned int *)(v16 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
  return v9;
}

void sub_20C37C7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    sub_20C96B340(a11);
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator::MakeIncrementalSearcher@<X0>(pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  result = (unint64_t)sub_20C369024(this);
  if (v5 & 1 | result)
  {
    v7 = *(_QWORD *)this;
    v6 = *((_QWORD *)this + 1);
    if (v6)
    {
      v8 = (unsigned int *)(v6 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    *(_QWORD *)a2 = (char *)this + 16;
    result = (unint64_t)sub_20C3819B8((_QWORD *)(a2 + 8), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3));
    *(_QWORD *)(a2 + 40) = v7;
    *(_QWORD *)(a2 + 48) = v6;
  }
  else
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
  }
  *(_DWORD *)(a2 + 56) = 0;
  return result;
}

void sub_20C37C89C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    sub_20C96B4E8(v1);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::UsdComputeIncludedObjectsFromCollection(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = a4 + 8;
  sub_20C37C900(a1, a2, a3, (uint64_t **)a4, 0);
}

void sub_20C37C8E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C37FF4C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_20C37C900(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t **a4, uint64_t **a5)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *i;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v11;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v12;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v13;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v14;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v16;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v17;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v18;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v19;
  _BOOL4 v20;
  char v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  __int128 *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  uint64_t j;
  uint64_t v31;
  _QWORD *v32;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v33;
  _DWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  const pxrInternal__aapl__pxrReserved__::TfToken *k;
  const pxrInternal__aapl__pxrReserved__::TfToken *v38;
  _QWORD *v39;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v40;
  unsigned int *v41;
  unsigned int v42;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v43;
  unsigned int *v44;
  unsigned int v45;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int *v49;
  unsigned int v50;
  unsigned int *v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int *v55;
  unsigned int v56;
  unsigned int *v57;
  unsigned int v58;
  BOOL v59;
  unsigned int *v60;
  uint64_t (*v61)(uint64_t *);
  char v62;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v63;
  unint64_t v64;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v65;
  unsigned int *v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int *v69;
  unsigned int v70;
  unsigned int v71;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unsigned int *v77;
  unsigned int v78;
  char v79;
  unsigned int *v80;
  unsigned int v81;
  int *v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  __int128 *v88;
  uint64_t v89;
  unsigned int *v90;
  unsigned int v91;
  unsigned int *v92;
  unsigned int v93;
  void **v94;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v95;
  uint64_t v96;
  unsigned int *v97;
  unsigned int v98;
  unsigned int v99;
  unsigned int *v101;
  int v104;
  unint64_t v105;
  uint64_t v106[3];
  void **v107;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v108;
  int v109;
  int v110;
  uint64_t v111;
  const char **v112;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v113;
  int v114;
  int v115;
  uint64_t v116;
  int **v117;
  const char *v118;
  uint64_t v119;
  unint64_t v120;
  char v121;
  uint64_t v122;
  __int128 v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  uint64_t v127;
  int v128;
  __int16 v129;
  char v130;
  _QWORD v131[5];
  uint64_t v132;
  uint64_t v133;
  _QWORD **v134;
  _QWORD *v135[2];
  int v136;
  _DWORD v137[5];
  int *v138;
  __int128 v139;
  uint64_t v140;
  __int128 *v141;
  __int128 v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  if ((a4 != 0) == (a5 != 0))
  {
    v117 = (int **)"usd/collectionMembershipQuery.cpp";
    v118 = "_ComputeIncludedImpl";
    v119 = 56;
    v120 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ComputeIncludedImpl(const Us"
                             "dCollectionMembershipQuery &, const UsdStageWeakPtr &, const Usd_PrimFlagsPredicate &, std:"
                             ":set<UsdObject> *, SdfPathSet *)";
    v121 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v117, 1, (pxrInternal__aapl__pxrReserved__ *)"Either includedObjects or includedPaths must be valid, but not both");
  }
  v135[0] = 0;
  v135[1] = 0;
  v104 = *(unsigned __int8 *)(a1 + 72);
  v7 = a2[1];
  v132 = *a2;
  v133 = v7;
  v134 = v135;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v130 = v104;
  sub_20C37B958((uint64_t)v131, a1 + 8);
  for (i = *(_QWORD **)(a1 + 24); i; i = (_QWORD *)*i)
  {
    v11 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v11)
      v11 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if ((i[3] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v11 + 10) & 0xFFFFFFFFFFFFFFF8))
      continue;
    v12 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v12)
      v12 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if ((i[3] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v12 + 13) & 0xFFFFFFFFFFFFFFF8))
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2)))
      {
        v16 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a2);
        pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v16, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2), (uint64_t)&v117);
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v117, v17)&& pxrInternal__aapl__pxrReserved__::Usd_PrimFlagsPredicate::operator()(a3, (pxrInternal__aapl__pxrReserved__::UsdProperty *)&v117))
        {
          if (a4)
          {
            sub_20C37F090(a4, (uint64_t)&v117, (uint64_t)&v117);
          }
          else if (a5)
          {
            sub_20C348EEC((uint64_t)&v117, (int *)&v112);
            sub_20C37F3F8(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v112, &v112);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v112 + 1);
            sub_20BFD265C(&v112);
          }
        }
        if ((v120 & 7) != 0)
        {
          v51 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
          do
            v52 = __ldxr(v51);
          while (__stlxr(v52 - 2, v51));
        }
      }
      else
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2)))
        {
          v117 = (int **)"usd/collectionMembershipQuery.cpp";
          v118 = "_ComputeIncludedImpl";
          v119 = 118;
          v120 = (unint64_t)"void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_ComputeIncludedImpl(co"
                                   "nst UsdCollectionMembershipQuery &, const UsdStageWeakPtr &, const Usd_PrimFlagsPredi"
                                   "cate &, std::set<UsdObject> *, SdfPathSet *)";
          v121 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v117, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown path type in membership-map.");
          continue;
        }
        sub_20C37EB30(&v132, (pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2), (uint64_t)&v117);
        if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v117, v43))
        {
          sub_20C37F4B0((uint64_t)&v112, (int)v117, (uint64_t *)&v118, &v119, (uint64_t *)&v120);
          if (a4)
          {
            sub_20C37F090(a4, (uint64_t)&v112, (uint64_t)&v112);
          }
          else if (a5)
          {
            sub_20C348EEC((uint64_t)&v112, (int *)&v126);
            sub_20C37F3F8(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v126, &v126);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v126 + 1);
            sub_20BFD265C(&v126);
          }
          if ((v116 & 7) != 0)
          {
            v53 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
            do
              v54 = __ldxr(v53);
            while (__stlxr(v54 - 2, v53));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v115);
          sub_20BFD265C(&v114);
          if (v113)
            sub_20C35C614(v113);
        }
        if ((v120 & 7) != 0)
        {
          v55 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
          do
            v56 = __ldxr(v55);
          while (__stlxr(v56 - 2, v55));
        }
      }
LABEL_133:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v119 + 1);
      sub_20BFD265C(&v119);
      v46 = (pxrInternal__aapl__pxrReserved__::Usd_PrimData *)v118;
      if (!v118)
        continue;
LABEL_134:
      sub_20C35C614(v46);
      continue;
    }
    v13 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v13)
      v13 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if ((i[3] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v13 + 11) & 0xFFFFFFFFFFFFFFF8))
    {
      v14 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v14)
        v14 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if ((i[3] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v14 + 12) & 0xFFFFFFFFFFFFFFF8))
        continue;
    }
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2)))
    {
      sub_20C37EB30(&v132, (pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2), (uint64_t)&v117);
      if (pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v117, v15))
      {
        sub_20C37F4B0((uint64_t)&v112, (int)v117, (uint64_t *)&v118, &v119, (uint64_t *)&v120);
        if (a4)
        {
          sub_20C37F090(a4, (uint64_t)&v112, (uint64_t)&v112);
        }
        else if (a5)
        {
          sub_20C348EEC((uint64_t)&v112, (int *)&v126);
          sub_20C37F3F8(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v126, &v126);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v126 + 1);
          sub_20BFD265C(&v126);
        }
        if ((v116 & 7) != 0)
        {
          v47 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
          do
            v48 = __ldxr(v47);
          while (__stlxr(v48 - 2, v47));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v115);
        sub_20BFD265C(&v114);
        if (v113)
          sub_20C35C614(v113);
      }
      if ((v120 & 7) != 0)
      {
        v49 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
        do
          v50 = __ldxr(v49);
        while (__stlxr(v50 - 2, v49));
      }
      goto LABEL_133;
    }
    v18 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a2);
    pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v18, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(i + 2), (uint64_t)&v112);
    if (!pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)&v112, v19))goto LABEL_100;
    sub_20C37F5FC((uint64_t)&v117, (uint64_t)&v112, a3);
    sub_20C37ECB8((uint64_t *)&v117, (uint64_t)&v126);
    while (1)
    {
      *(_QWORD *)&v123 = v118;
      *((_QWORD *)&v123 + 1) = &v117;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v124);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v124 + 1);
      LODWORD(v125) = 0;
      WORD2(v125) = 0;
      if (v126 == v123)
      {
        v20 = 1;
        if (v127 == v124 && !v128 && !(_BYTE)v129)
          v20 = HIBYTE(v129) != 0;
      }
      else
      {
        v20 = 1;
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v124 + 1);
      sub_20BFD265C(&v124);
      if (!v20)
        break;
      sub_20C37ED84((uint64_t)&v126, (uint64_t)&v123);
      if (v104)
      {
        sub_20C348EEC((uint64_t)&v123, (int *)&v142);
        v21 = sub_20C377DB0(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v142, 0);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v142 + 1);
        sub_20BFD265C(&v142);
        if (v21 != 1)
        {
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v126);
          goto LABEL_89;
        }
      }
      v22 = sub_20C37F4B0((uint64_t)&v142, v123, (uint64_t *)&v123 + 1, &v124, &v125);
      if (a4)
      {
        sub_20C37F090(a4, (uint64_t)&v142, (uint64_t)&v142);
      }
      else if (a5)
      {
        sub_20C348EEC(v22, (int *)&v139);
        sub_20C37F3F8(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v139, &v139);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v139 + 1);
        sub_20BFD265C(&v139);
      }
      if ((v144 & 7) != 0)
      {
        v23 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stlxr(v24 - 2, v23));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
      sub_20BFD265C(&v143);
      if (*((_QWORD *)&v142 + 1))
        sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v142 + 1));
      v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v25)
        v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if ((i[3] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 12) & 0xFFFFFFFFFFFFFFF8))
      {
        if (a4)
        {
          v144 = 0;
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties((uint64_t)&v123, (uint64_t)&v142, (uint64_t *)&v139);
          v26 = (__int128 *)v144;
          if ((__int128 *)v144 == &v142)
          {
            v26 = &v142;
            v27 = 4;
LABEL_60:
            (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
          }
          else if (v144)
          {
            v27 = 5;
            goto LABEL_60;
          }
          v31 = *((_QWORD *)&v139 + 1);
          for (j = v139; j != v31; j += 32)
          {
            sub_20C348EEC(j, (int *)&v142);
            if (v130)
            {
              v32 = sub_20C0E70D0(v131, (unsigned int *)&v142);
              if (v32)
              {
                v33 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
                if (!v33)
                  v33 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
                LOBYTE(v32) = (v32[3] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v33 + 10) & 0xFFFFFFFFFFFFFFF8);
              }
            }
            else
            {
              LOBYTE(v32) = 0;
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v142 + 1);
            v34 = sub_20BFD265C(&v142);
            if ((v32 & 1) == 0)
            {
              sub_20C37F4B0((uint64_t)v34, *(_DWORD *)j, (uint64_t *)(j + 8), (_DWORD *)(j + 16), (uint64_t *)(j + 24));
              sub_20C37F090(a4, (uint64_t)&v142, (uint64_t)&v142);
              if ((v144 & 7) != 0)
              {
                v35 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
                do
                  v36 = __ldxr(v35);
                while (__stlxr(v36 - 2, v35));
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
              sub_20BFD265C(&v143);
              if (*((_QWORD *)&v142 + 1))
                sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v142 + 1));
            }
          }
          *(_QWORD *)&v142 = &v139;
          sub_20C37FA04((void ***)&v142);
          goto LABEL_89;
        }
        v144 = 0;
        pxrInternal__aapl__pxrReserved__::UsdPrim::GetPropertyNames((uint64_t)&v123, (uint64_t)&v142, &v139);
        v28 = (__int128 *)v144;
        if ((__int128 *)v144 == &v142)
        {
          v28 = &v142;
          v29 = 4;
LABEL_78:
          (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
        }
        else if (v144)
        {
          v29 = 5;
          goto LABEL_78;
        }
        v38 = (const pxrInternal__aapl__pxrReserved__::TfToken *)*((_QWORD *)&v139 + 1);
        for (k = (const pxrInternal__aapl__pxrReserved__::TfToken *)v139;
              k != v38;
              k = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)k + 8))
        {
          sub_20C348EEC((uint64_t)&v123, (int *)&v107);
          pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v107, k, (int *)&v142);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v107 + 1);
          sub_20BFD265C(&v107);
          if (!v130)
            goto LABEL_86;
          v39 = sub_20C0E70D0(v131, (unsigned int *)&v142);
          if (!v39)
            goto LABEL_86;
          v40 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v40)
            v40 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if ((v39[3] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v40 + 10) & 0xFFFFFFFFFFFFFFF8))
LABEL_86:
            sub_20C0A7BE0(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v142, &v142);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v142 + 1);
          sub_20BFD265C(&v142);
        }
        *(_QWORD *)&v142 = &v139;
        sub_20BEEB2B8((void ***)&v142);
      }
LABEL_89:
      if ((v125 & 7) != 0)
      {
        v41 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
        do
          v42 = __ldxr(v41);
        while (__stlxr(v42 - 2, v41));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v124 + 1);
      sub_20BFD265C(&v124);
      if (*((_QWORD *)&v123 + 1))
        sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v123 + 1));
      pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v126);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v127 + 1);
    sub_20BFD265C(&v127);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v119 + 1);
    sub_20BFD265C(&v119);
LABEL_100:
    if ((v116 & 7) != 0)
    {
      v44 = (unsigned int *)(v116 & 0xFFFFFFFFFFFFFFF8);
      do
        v45 = __ldxr(v44);
      while (__stlxr(v45 - 2, v44));
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v115);
    sub_20BFD265C(&v114);
    v46 = v113;
    if (v113)
      goto LABEL_134;
  }
  v101 = *(unsigned int **)a1;
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v57 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v58 = __ldxr(v57);
    while (__stxr(v58 + 2, v57));
    v59 = (v58 & 1) == 0;
    v60 = v101;
    if (v59)
      v60 = v57;
    v101 = v60;
  }
  v61 = sub_20C369024((_QWORD *)(a1 + 80));
  if (v62 & 1 | (unint64_t)v61 && *(_QWORD *)(a1 + 120) != *(_QWORD *)(a1 + 128))
  {
    v63 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v63)
      v63 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    v64 = (unint64_t)v101 & 0xFFFFFFFFFFFFFFF8;
    if (((unint64_t)v101 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v63 + 11) & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_159;
    v65 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v65)
      v65 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (v64 == (*((_QWORD *)v65 + 12) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_159:
      v72 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v72)
        v72 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      v73 = *((_QWORD *)v72 + 12);
      pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator::MakeIncrementalSearcher((pxrInternal__aapl__pxrReserved__::UsdObjectCollectionExpressionEvaluator *)(a1 + 80), (uint64_t)&v117);
      v74 = sub_20C348E08(a2);
      pxrInternal__aapl__pxrReserved__::UsdStage::Traverse(v74, a3, (uint64_t)&v112);
      sub_20C37ECB8((uint64_t *)&v112, (uint64_t)&v126);
      v75 = v73 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)&v123 = v113;
      *((_QWORD *)&v123 + 1) = &v112;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v124);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v124 + 1);
      LODWORD(v125) = 0;
      WORD2(v125) = 0;
      while (1)
      {
        if (v126 == v123
          && v127 == v124
          && v128 == (_DWORD)v125
          && v129 == BYTE4(v125)
          && HIBYTE(v129) == BYTE5(v125))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v124 + 1);
          sub_20BFD265C(&v124);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v127 + 1);
          sub_20BFD265C(&v127);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v115);
          sub_20BFD265C(&v114);
          v96 = v122;
          if (v122)
          {
            v97 = (unsigned int *)(v122 + 8);
            do
            {
              v98 = __ldxr(v97);
              v99 = v98 - 1;
            }
            while (__stlxr(v99, v97));
            if (!v99)
              (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
          }
          v112 = &v118;
          sub_20C37FEB8((void ***)&v112);
          break;
        }
        sub_20C37ED84((uint64_t)&v126, (uint64_t)&v142);
        v76 = sub_20C37EE30(&v117, (uint64_t)&v142);
        if ((v144 & 7) != 0)
        {
          v77 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
          do
            v78 = __ldxr(v77);
          while (__stlxr(v78 - 2, v77));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
        sub_20BFD265C(&v143);
        if (*((_QWORD *)&v142 + 1))
          sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v142 + 1));
        if (!(_BYTE)v76)
        {
          v105 = HIDWORD(v76);
          if (v64 == v75)
            goto LABEL_215;
          goto LABEL_241;
        }
        if (HIDWORD(v76))
        {
          sub_20C37ED84((uint64_t)&v126, (uint64_t)&v142);
          if (a4)
          {
            sub_20C37F090(a4, (uint64_t)&v142, (uint64_t)&v142);
          }
          else if (a5)
          {
            sub_20C348EEC((uint64_t)&v142, (int *)&v139);
            sub_20C37F3F8(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v139, &v139);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v139 + 1);
            sub_20BFD265C(&v139);
          }
          if ((v144 & 7) != 0)
          {
            v90 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
            do
              v91 = __ldxr(v90);
            while (__stlxr(v91 - 2, v90));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
          sub_20BFD265C(&v143);
          if (*((_QWORD *)&v142 + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v142 + 1));
          goto LABEL_243;
        }
        LODWORD(v105) = 0;
        v142 = v126;
        sub_20BFD6E54(&v143, &v127);
        sub_20BFD6EA4((_DWORD *)&v143 + 1, (_DWORD *)&v127 + 1);
        LODWORD(v144) = v128;
        WORD2(v144) = v129;
        v139 = v142;
        sub_20BFD6E54(&v140, &v143);
        sub_20BFD6EA4((_DWORD *)&v140 + 1, (_DWORD *)&v143 + 1);
        LODWORD(v141) = v144;
        WORD2(v141) = WORD2(v144);
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v139);
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v139);
        v79 = 0;
        while (v142 != v139
             || v143 != v140
             || (_DWORD)v144 != (_DWORD)v141
             || BYTE4(v144) != BYTE4(v141)
             || BYTE5(v144) != BYTE5(v141))
        {
          sub_20C37ED84((uint64_t)&v142, (uint64_t)&v107);
          if (a4)
          {
            sub_20C37F090(a4, (uint64_t)&v107, (uint64_t)&v107);
          }
          else if (a5)
          {
            sub_20C348EEC((uint64_t)&v107, &v136);
            sub_20C37F3F8(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v136, &v136);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v137);
            sub_20BFD265C(&v136);
          }
          if ((v111 & 7) != 0)
          {
            v80 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
            do
              v81 = __ldxr(v80);
            while (__stlxr(v81 - 2, v80));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v110);
          sub_20BFD265C(&v109);
          if (v108)
            sub_20C35C614(v108);
          if (v64 == v75)
          {
            sub_20C37EEF4((uint64_t)&v142, (uint64_t)&v107);
            v138 = 0;
            pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties((uint64_t)&v107, (uint64_t)&v136, v106);
            v82 = v138;
            if (v138 == &v136)
            {
              v82 = &v136;
              v83 = 4;
LABEL_198:
              (*(void (**)(void))(*(_QWORD *)v82 + 8 * v83))();
            }
            else if (v138)
            {
              v83 = 5;
              goto LABEL_198;
            }
            if ((v111 & 7) != 0)
            {
              v84 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
              do
                v85 = __ldxr(v84);
              while (__stlxr(v85 - 2, v84));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v110);
            sub_20BFD265C(&v109);
            if (v108)
              sub_20C35C614(v108);
            v86 = v106[0];
            v87 = v106[1];
            while (v86 != v87)
            {
              if (a4)
              {
                sub_20C37F090(a4, v86, v86);
              }
              else if (a5)
              {
                sub_20C348EEC(v86, &v136);
                sub_20C37F3F8(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v136, &v136);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v137);
                sub_20BFD265C(&v136);
              }
              v86 += 32;
            }
            v107 = (void **)v106;
            sub_20C37FA04(&v107);
            v79 = 1;
          }
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v142);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v140 + 1);
        sub_20BFD265C(&v140);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
        sub_20BFD265C(&v143);
        if (v64 == v75 && (v79 & 1) == 0)
        {
LABEL_215:
          sub_20C37EEF4((uint64_t)&v126, (uint64_t)&v142);
          v141 = 0;
          pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperties((uint64_t)&v142, (uint64_t)&v139, (uint64_t *)&v107);
          v88 = v141;
          if (v141 == &v139)
          {
            v88 = &v139;
            v89 = 4;
LABEL_226:
            (*(void (**)(void))(*(_QWORD *)v88 + 8 * v89))();
          }
          else if (v141)
          {
            v89 = 5;
            goto LABEL_226;
          }
          if ((v144 & 7) != 0)
          {
            v92 = (unsigned int *)(v144 & 0xFFFFFFFFFFFFFFF8);
            do
              v93 = __ldxr(v92);
            while (__stlxr(v93 - 2, v92));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v143 + 1);
          sub_20BFD265C(&v143);
          if (*((_QWORD *)&v142 + 1))
            sub_20C35C614(*((pxrInternal__aapl__pxrReserved__::Usd_PrimData **)&v142 + 1));
          v94 = v107;
          v95 = v108;
          while (v94 != (void **)v95)
          {
            if (sub_20C37EE30(&v117, (uint64_t)v94))
            {
              if (a4)
              {
                sub_20C37F090(a4, (uint64_t)v94, (uint64_t)v94);
              }
              else if (a5)
              {
                sub_20C348EEC((uint64_t)v94, (int *)&v139);
                sub_20C37F3F8(a5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v139, &v139);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v139 + 1);
                sub_20BFD265C(&v139);
              }
            }
            v94 += 4;
          }
          *(_QWORD *)&v142 = &v107;
          sub_20C37FA04((void ***)&v142);
        }
LABEL_241:
        if (!(_DWORD)v105)
          pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::PruneChildren((pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator *)&v126);
LABEL_243:
        pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)&v126);
      }
    }
  }
  if ((v101 & 7) != 0)
  {
    v66 = (unsigned int *)((unint64_t)v101 & 0xFFFFFFFFFFFFFFF8);
    do
      v67 = __ldxr(v66);
    while (__stlxr(v67 - 2, v66));
  }
  sub_20C37B898((uint64_t)v131);
  v68 = v133;
  if (v133)
  {
    v69 = (unsigned int *)(v133 + 8);
    do
    {
      v70 = __ldxr(v69);
      v71 = v70 - 1;
    }
    while (__stlxr(v71, v69));
    if (!v71)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  }
  sub_20C37FF4C((uint64_t)&v134, v135[0]);
}

void sub_20C37DB70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  unsigned int *v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int v36;

  if ((a17 & 7) != 0)
  {
    v31 = (unsigned int *)(a17 & 0xFFFFFFFFFFFFFFF8);
    do
      v32 = __ldxr(v31);
    while (__stlxr(v32 - 2, v31));
  }
  sub_20C37B898(a29);
  v33 = *(unsigned int **)(v29 - 240);
  if (v33)
  {
    v34 = v33 + 2;
    do
    {
      v35 = __ldxr(v34);
      v36 = v35 - 1;
    }
    while (__stlxr(v36, v34));
    if (!v36)
      (*(void (**)(unsigned int *))(*(_QWORD *)v33 + 8))(v33);
  }
  sub_20C37FF4C(v29 - 232, *(_QWORD **)(v29 - 224));
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::UsdComputeIncludedPathsFromCollection(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)a4 = a4 + 8;
  sub_20C37C900(a1, a2, a3, 0, (uint64_t **)a4);
}

void sub_20C37DFEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFD7C28(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7[3];
  uint64_t v8[5];

  sub_20C37B958((uint64_t)v8, a2);
  sub_20C37BD08(v7, a3);
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(a1, v8, v7, &v6);
  sub_20BFD7C28((uint64_t)v7, (_QWORD *)v7[1]);
  sub_20C37B898((uint64_t)v8);
  return a1;
}

{
  uint64_t v6;
  uint64_t v7[3];
  uint64_t v8[5];

  sub_20C37B958((uint64_t)v8, a2);
  sub_20C37BD08(v7, a3);
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(a1, v8, v7, &v6);
  sub_20BFD7C28((uint64_t)v7, (_QWORD *)v7[1]);
  sub_20C37B898((uint64_t)v8);
  return a1;
}

void sub_20C37E070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  _QWORD *v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD *);
  v7 = va_arg(va1, _QWORD);
  sub_20BFD7C28((uint64_t)va, v6);
  sub_20C37B898((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v14;

  v6 = *a4;
  *(_QWORD *)a1 = *a4;
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BF20A20(a1 + 8, a2);
  *(_QWORD *)(a1 + 48) = *a3;
  v9 = a3 + 1;
  v10 = a3[1];
  *(_QWORD *)(a1 + 56) = v10;
  v11 = a1 + 56;
  v12 = a3[2];
  *(_QWORD *)(a1 + 64) = v12;
  if (v12)
  {
    *(_QWORD *)(v10 + 16) = v11;
    *a3 = v9;
    *v9 = 0;
    a3[2] = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v11;
  }
  *(_BYTE *)(a1 + 72) = 0;
  v13 = (_QWORD *)(a1 + 24);
  while (1)
  {
    v13 = (_QWORD *)*v13;
    if (!v13)
      break;
    v14 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v14)
      v14 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if ((v13[3] & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 10) & 0xFFFFFFFFFFFFFFF8))
    {
      *(_BYTE *)(a1 + 72) = 1;
      return a1;
    }
  }
  return a1;
}

void sub_20C37E198(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;

  sub_20BFD7C28(v3, *(_QWORD **)(v1 + 56));
  sub_20C37B898(v2);
  if ((*(_QWORD *)v1 & 7) != 0)
  {
    v5 = (unsigned int *)(*(_QWORD *)v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  _Unwind_Resume(a1);
}

void sub_20C37E244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  _QWORD *v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD *);
  v7 = va_arg(va1, _QWORD);
  sub_20BFD7C28((uint64_t)va, v6);
  sub_20C37B898((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;

  v4 = 0;
  return pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(a1, a2, a3, &v4);
}

{
  uint64_t v4;

  v4 = 0;
  return pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(a1, a2, a3, &v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8[3];
  uint64_t v9[5];

  sub_20C37B958((uint64_t)v9, a2);
  sub_20C37BD08(v8, a3);
  pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(a1, v9, v8, a4);
  sub_20BFD7C28((uint64_t)v8, (_QWORD *)v8[1]);
  sub_20C37B898((uint64_t)v9);
  return a1;
}

{
  uint64_t v8[3];
  uint64_t v9[5];

  sub_20C37B958((uint64_t)v9, a2);
  sub_20C37BD08(v8, a3);
  pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::Usd_CollectionMembershipQueryBase(a1, v9, v8, a4);
  sub_20BFD7C28((uint64_t)v8, (_QWORD *)v8[1]);
  sub_20C37B898((uint64_t)v9);
  return a1;
}

void sub_20C37E32C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12)
{
  sub_20BFD7C28((uint64_t)&a9, a10);
  sub_20C37B898((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_20C37E3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, char a12)
{
  sub_20BFD7C28((uint64_t)&a9, a10);
  sub_20C37B898((uint64_t)&a12);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_IsPathIncludedByRuleMap(pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  BOOL v3;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *j;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v17;
  pxrInternal__aapl__pxrReserved__::SdfPath *i;
  uint64_t *v19;
  _QWORD *v20;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v25;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v26;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v27;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v28;
  int v30;
  int v31;
  _QWORD v32[4];
  char v33;

  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    v32[0] = "usd/collectionMembershipQuery.cpp";
    v32[1] = "_IsPathIncludedByRuleMap";
    v32[2] = 371;
    v32[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_IsPathIncludedByRuleMap(const Sd"
             "fPath &, TfToken *) const";
    v33 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Relative paths are not allowed");
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a2)
    && !pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2))
  {
    return 0;
  }
  v7 = (_QWORD *)((char *)this + 8);
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a2))
  {
    sub_20BFD6E54(v32, a2);
    for (i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD6EA4((_DWORD *)v32 + 1, (_DWORD *)a2 + 1);
          ;
          i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD265C(&v30))
    {
      v19 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(i);
      v10 = v32[0];
      v11 = *v19;
      if (v32[0] == *v19)
        goto LABEL_47;
      v20 = sub_20C0E70D0(v7, (unsigned int *)v32);
      if (v20)
      {
        v21 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v21)
          v21 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        v23 = v20[3];
        v22 = v20 + 3;
        v24 = *((_QWORD *)v21 + 10) & 0xFFFFFFFFFFFFFFF8;
        v3 = (v23 & 0xFFFFFFFFFFFFFFF8) != v24;
        if ((v23 & 0xFFFFFFFFFFFFFFF8) == v24)
        {
          if (!a3)
          {
            v3 = 0;
            goto LABEL_47;
          }
          v27 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          if (!v27)
            v27 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
          v22 = (_QWORD *)((char *)v27 + 80);
LABEL_39:
          sub_20BF32220(a3, v22);
          goto LABEL_47;
        }
        v25 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v25)
          v25 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if ((*v22 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v25 + 12) & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_33;
        v26 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v26)
          v26 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if ((*v22 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v26 + 13) & 0xFFFFFFFFFFFFFFF8) && v32[0] == *(_QWORD *)a2)
        {
LABEL_33:
          if (!a3)
          {
            v3 = 1;
            goto LABEL_47;
          }
          goto LABEL_39;
        }
      }
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v32, &v30);
      sub_20BFD3EBC((int *)v32, &v30);
      sub_20BFD3F10((int *)v32 + 1, &v31);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    }
  }
  sub_20BFD6E54(v32, a2);
  for (j = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD6EA4((_DWORD *)v32 + 1, (_DWORD *)a2 + 1);
        ;
        j = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD265C(&v30))
  {
    v9 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(j);
    v10 = v32[0];
    v11 = *v9;
    if (v32[0] == *v9)
      goto LABEL_47;
    v12 = sub_20C0E70D0(v7, (unsigned int *)v32);
    if (!v12)
      goto LABEL_15;
    v13 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v13)
      v13 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    v15 = v12[3];
    v14 = v12 + 3;
    v16 = *((_QWORD *)v13 + 10) & 0xFFFFFFFFFFFFFFF8;
    v3 = (v15 & 0xFFFFFFFFFFFFFFF8) != v16;
    if ((v15 & 0xFFFFFFFFFFFFFFF8) == v16)
      break;
    v17 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v17)
      v17 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v17 + 13) & 0xFFFFFFFFFFFFFFF8) || v32[0] == *(_QWORD *)a2)
    {
      if (!a3)
      {
        v3 = 1;
        goto LABEL_47;
      }
      goto LABEL_44;
    }
LABEL_15:
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v32, &v30);
    sub_20BFD3EBC((int *)v32, &v30);
    sub_20BFD3F10((int *)v32 + 1, &v31);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
  }
  if (a3)
  {
    v28 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v28)
      v28 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    v14 = (_QWORD *)((char *)v28 + 80);
LABEL_44:
    sub_20BF32220(a3, v14);
    goto LABEL_47;
  }
  v3 = 0;
LABEL_47:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v32 + 1);
  sub_20BFD265C(v32);
  if (v10 == v11)
    return 0;
  return v3;
}

void sub_20C37E778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_IsPathIncludedByRuleMap(pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v11;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v12;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v13;
  unint64_t v14;
  unint64_t v15;
  _BOOL4 v16;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v17;
  unint64_t v18;
  unint64_t v19;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v20;
  _QWORD *v21;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v22;
  pxrInternal__aapl__pxrReserved__::UsdTokensType *v23;
  _QWORD v24[4];
  char v25;

  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2))
  {
    v24[0] = "usd/collectionMembershipQuery.cpp";
    v24[1] = "_IsPathIncludedByRuleMap";
    v24[2] = 431;
    v24[3] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_IsPathIncludedByRuleMap(const Sd"
             "fPath &, const TfToken &, TfToken *) const";
    v25 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v24, 1, (pxrInternal__aapl__pxrReserved__ *)"Relative paths are not allowed");
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a2)
    || (result = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2), (_DWORD)result))
  {
    v9 = sub_20C0E70D0((_QWORD *)this + 1, (unsigned int *)a2);
    if (v9)
    {
      v10 = v9;
      if (a4)
        sub_20BF32220(a4, v9 + 3);
      v11 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v11)
        v11 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      return (v10[3] & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v11 + 10) & 0xFFFFFFFFFFFFFFF8);
    }
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(a2))
    {
      v12 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v12)
        v12 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v12 + 10) & 0xFFFFFFFFFFFFFFF8))
      {
        if (!a4)
        {
          v16 = 1;
          return !v16;
        }
      }
      else
      {
        v13 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        if (!v13)
          v13 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        v14 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
        v15 = *((_QWORD *)v13 + 13) & 0xFFFFFFFFFFFFFFF8;
        v16 = v14 == v15;
        if (!a4)
          return !v16;
        if (v14 != v15)
        {
          v16 = 0;
LABEL_32:
          sub_20BF32220(a4, a3);
          return !v16;
        }
      }
      v22 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v22)
        v22 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      a3 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)((char *)v22 + 80);
      v16 = 1;
      goto LABEL_32;
    }
    if (a4)
    {
      v17 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (!v17)
        v17 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      v18 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
      v19 = *((_QWORD *)v17 + 12) & 0xFFFFFFFFFFFFFFF8;
      v20 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
      if (v18 == v19)
      {
        if (!v20)
          v20 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        v21 = (_QWORD *)((char *)v20 + 96);
      }
      else
      {
        if (!v20)
          v20 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
        v21 = (_QWORD *)((char *)v20 + 80);
      }
      sub_20BF32220(a4, v21);
    }
    v23 = (pxrInternal__aapl__pxrReserved__::UsdTokensType *)atomic_load(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    if (!v23)
      v23 = sub_20C27E60C(&pxrInternal__aapl__pxrReserved__::UsdTokens);
    return (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v23 + 12) & 0xFFFFFFFFFFFFFFF8);
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_HasEmptyRuleMap(pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase *this)
{
  return *((_QWORD *)this + 4) == 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::Usd_CollectionMembershipQueryBase::_Hash::operator()(uint64_t a1, _QWORD *a2)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v10;
  char *v11;
  uint64_t v12;
  char **v13;
  char v14;

  v3 = (_QWORD *)a2[3];
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v4 = 0;
  if (v3)
  {
    v5 = v3;
    do
    {
      ++v4;
      v5 = (_QWORD *)*v5;
    }
    while (v5);
  }
  sub_20C381A3C(&v10, v3, 0, v4);
  v6 = 126 - 2 * __clz((v11 - v10) >> 4);
  if (v11 == v10)
    v7 = 0;
  else
    v7 = v6;
  sub_20C381CA0((uint64_t)v10, v11, (uint64_t)&v13, v7, 1);
  v13 = 0;
  v14 = 0;
  sub_20C383404((uint64_t)&v13, (uint64_t *)&v10, a2);
  v8 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v13);
  v13 = &v10;
  sub_20C381C1C((void ***)&v13);
  return v8;
}

void sub_20C37EB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20C381C1C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C37EB30(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v5;
  const pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;
  int IsDefined;
  char v8;
  unsigned int **NameToken;
  unsigned int *v10;
  unsigned int v11;
  int v12;
  int v13;
  _BYTE v14[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v15;
  int v16;
  int v17;
  uint64_t v18;

  v5 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v12);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetPrimAtPath(v5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v12, (uint64_t)v14);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  IsDefined = pxrInternal__aapl__pxrReserved__::UsdProperty::IsDefined((pxrInternal__aapl__pxrReserved__::UsdProperty *)v14, v6);
  v8 = IsDefined;
  if (IsDefined)
  {
    NameToken = (unsigned int **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
    pxrInternal__aapl__pxrReserved__::UsdPrim::GetProperty((pxrInternal__aapl__pxrReserved__::UsdPrim *)v14, NameToken, a3);
  }
  if ((v18 & 7) != 0)
  {
    v10 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
  sub_20BFD265C(&v16);
  if (v15)
    sub_20C35C614(v15);
  if ((v8 & 1) == 0)
  {
    *(_DWORD *)a3 = 2;
    *(_QWORD *)(a3 + 8) = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 16));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a3 + 20));
    *(_QWORD *)(a3 + 24) = 0;
  }
}

void sub_20C37EC34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C37EC58(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

_DWORD *sub_20C37ECB8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  int v7;
  int v8;

  v4 = *a1;
  sub_20BFD6E54(&v7, (_DWORD *)a1 + 4);
  sub_20BFD6EA4(&v8, (_DWORD *)a1 + 5);
  v5 = *((_DWORD *)a1 + 12);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = a1;
  sub_20BFD6E54((_DWORD *)(a2 + 16), &v7);
  sub_20BFD6EA4((_DWORD *)(a2 + 20), &v8);
  *(_DWORD *)(a2 + 24) = v5;
  *(_WORD *)(a2 + 28) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_20BFD265C(&v7);
}

uint64_t sub_20C37ED50(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

void sub_20C37ED84(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v4;
  unint64_t *v5;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;

  v4 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)a1;
  v7 = v4;
  if (v4)
  {
    v5 = (unint64_t *)((char *)v4 + 48);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20C35C4F8(a2, (uint64_t *)&v7, (_DWORD *)(a1 + 16));
  if (v7)
    sub_20C35C614(v7);
}

void sub_20C37EDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pxrInternal__aapl__pxrReserved__::Usd_PrimData *a10)
{
  if (a10)
    sub_20C35C614(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C37EDFC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  return a1;
}

unint64_t sub_20C37EE30(int ***a1, uint64_t a2)
{
  int **v4;
  int PathElementCount;
  int v6;
  _QWORD v8[5];
  int v9;
  int **v10;
  int *v11;

  v4 = a1[1];
  v11 = (*a1)[3];
  v10 = v4;
  sub_20C348EEC(a2, (int *)v8);
  PathElementCount = pxrInternal__aapl__pxrReserved__::SdfPath::GetPathElementCount((pxrInternal__aapl__pxrReserved__::SdfPath *)v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v8 + 1);
  sub_20BFD265C(v8);
  if (*((_DWORD *)a1 + 14) >= PathElementCount)
    v6 = PathElementCount;
  else
    v6 = 0;
  v9 = v6;
  v8[0] = &v9;
  v8[1] = &v10;
  v8[2] = &v11;
  v8[3] = a2;
  v8[4] = a1;
  *((_DWORD *)a1 + 14) = PathElementCount;
  return pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_EvalExpr(*a1, (uint64_t)v8, (uint64_t (*)(uint64_t, uint64_t))sub_20C37FAEC);
}

void sub_20C37EEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

void sub_20C37EEF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t *v3;
  unint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _BYTE v7[8];
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v8;
  int v9;
  int v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v12;

  v12 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)a1;
  if (v12)
  {
    v3 = (unint64_t *)((char *)v12 + 48);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  sub_20C35C4F8((uint64_t)v7, (uint64_t *)&v12, (_DWORD *)(a1 + 16));
  if (v12)
    sub_20C35C614(v12);
  sub_20C37FE20(a2, (uint64_t)v7);
  if ((v11 & 7) != 0)
  {
    v5 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  if (v8)
    sub_20C35C614(v8);
}

void sub_20C37EFA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C35C2E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C37EFCC(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
  return a1;
}

uint64_t sub_20C37F02C(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  void **v7;

  v2 = *(unsigned int **)(a1 + 48);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  v7 = (void **)(a1 + 8);
  sub_20C37FEB8(&v7);
  return a1;
}

uint64_t *sub_20C37F090(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)sub_20C37F120((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_20C37F1B0((uint64_t)a1, a3, (uint64_t)v9);
    sub_20BDDE1B4(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    sub_20C37F350((uint64_t)v9, 0);
  }
  return v6;
}

_QWORD *sub_20C37F120(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = (uint64_t)(v4 + 4);
        if (!sub_20C37F21C(a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (!sub_20C37F21C(v8, a3))
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_DWORD *sub_20C37F1B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  _DWORD *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = sub_20C37F2BC(v5, (uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C37F204(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C37F350(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C37F21C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v5;
  int v6;
  int v7;
  int v8;

  sub_20C348EEC(a1, &v7);
  sub_20C348EEC(a2, &v5);
  v3 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v6);
  sub_20BFD265C(&v5);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  return v3;
}

void sub_20C37F298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  sub_20BFD1A18(&a9);
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C37F2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _DWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  v5 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)(a2 + 8) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 48);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20BFD6E54((_DWORD *)(a2 + 16), (_DWORD *)(a3 + 16));
  result = sub_20BFD6EA4((_DWORD *)(a2 + 20), (_DWORD *)(a3 + 20));
  v9 = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 24) = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      *(_QWORD *)(a2 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  return result;
}

void sub_20C37F350(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C37F394((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_20C37F394(uint64_t a1)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v5;

  v2 = *(_QWORD *)(a1 + 24);
  if ((v2 & 7) != 0)
  {
    v3 = (unsigned int *)(v2 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 20));
  sub_20BFD265C((_DWORD *)(a1 + 16));
  v5 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a1 + 8);
  if (v5)
    sub_20C35C614(v5);
}

uint64_t *sub_20C37F3F8(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)sub_20BFD74FC((uint64_t)a1, &v11, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v9[1] = a1 + 1;
    sub_20BFD38A4((_DWORD *)v6 + 7, a3);
    sub_20BFD38DC((_DWORD *)v6 + 8, a3 + 1);
    v10 = 1;
    sub_20BDDE1B4(a1, v11, v7, v6);
    v9[0] = 0;
    sub_20BFD7610((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_20C37F4B0(uint64_t a1, int a2, uint64_t *a3, _DWORD *a4, uint64_t *a5)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v17[4];
  char v18;

  *(_DWORD *)a1 = a2;
  v8 = *a3;
  *(_QWORD *)(a1 + 8) = *a3;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 48);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = (_QWORD *)(a1 + 16);
  sub_20BFD6E54((_DWORD *)(a1 + 16), a4);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a4 + 1);
  v12 = *a5;
  *(_QWORD *)(a1 + 24) = *a5;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = *(_QWORD *)(a1 + 8);
  if (v15 && (*(_BYTE *)(v15 + 57) & 8) == 0 && *(_QWORD *)(v15 + 16) == *v11)
  {
    v17[0] = "usd/object.h";
    v17[1] = "UsdObject";
    v17[2] = 717;
    v17[3] = "pxrInternal__aapl__pxrReserved__::UsdObject::UsdObject(UsdObjType, const Usd_PrimDataHandle &, const SdfPat"
             "h &, const TfToken &)";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v17, "!_prim || _prim->GetPath() != _proxyPrimPath", 0);
  }
  return a1;
}

void sub_20C37F5BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _DWORD *v2;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v7;

  v4 = *(_QWORD *)(v1 + 24);
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  sub_20BFD1A18(v2);
  v7 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(v1 + 8);
  if (v7)
    sub_20C35C614(v7);
  _Unwind_Resume(a1);
}

uint64_t sub_20C37F5FC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  uint64_t v11;
  BOOL v13;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
    goto LABEL_20;
  v7 = *(_QWORD *)(v6 + 40) & 7;
  v8 = *(_QWORD *)(v6 + 40) & 0xFFFFFFFFFFFFFFF8;
  if (v8)
    v9 = v7 == 0;
  else
    v9 = 0;
  if (v9)
    goto LABEL_21;
  if (!v7 || v8 == 0)
  {
LABEL_20:
    v8 = 0;
    goto LABEL_21;
  }
  while (1)
  {
    v11 = *(_QWORD *)(v8 + 40);
    v8 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 7) == 0 && v8 != 0)
      break;
    if (v8)
      v13 = (v11 & 7) == 0;
    else
      v13 = 1;
    if (v13)
      goto LABEL_20;
  }
LABEL_21:
  sub_20C37F6C8(a1, v6, v8, (_DWORD *)(a2 + 16), a3);
  return a1;
}

void sub_20C37F6B4(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C37F6C8(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];
  int v13;
  int v14;
  char v15;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  sub_20C01A074((int *)(a1 + 16), a4);
  sub_20C01A0C8((int *)(a1 + 20), a4 + 1);
  v8 = *a5;
  v9 = a5[1];
  if (*(_QWORD *)a1)
  {
    v10 = a5[2];
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4)
      && ((v8 & 0x2000) != 0 || (v9 & 0x2000) == 0))
    {
      v8 |= 0x2000uLL;
      v9 &= ~0x2000uLL;
    }
  }
  else
  {
    LOBYTE(v10) = *((_BYTE *)a5 + 16);
  }
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_BYTE *)(a1 + 40) = v10;
  *(_BYTE *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  sub_20C37ECB8((uint64_t *)a1, (uint64_t)v12);
  if (v12[0] != *(_QWORD *)(a1 + 8) && !sub_20C37F7E8((uint64_t *)(a1 + 24), (uint64_t)v12, a4))
  {
    v15 = 1;
    pxrInternal__aapl__pxrReserved__::UsdPrimRange::iterator::increment((uint64_t)v12);
    sub_20C37F820(a1, (uint64_t)v12);
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  return sub_20BFD265C(&v13);
}

void sub_20C37F7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C37ED50((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C37F7E8(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  _BOOL4 v5;

  v5 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3);
  return sub_20C37F8B8(a1, a2, v5);
}

int *sub_20C37F820(uint64_t a1, uint64_t a2)
{
  int *result;
  _QWORD v5[4];
  char v6;

  if (*(_BYTE *)(a2 + 29))
  {
    v5[0] = "usd/primRange.h";
    v5[1] = "set_begin";
    v5[2] = 364;
    v5[3] = "void pxrInternal__aapl__pxrReserved__::UsdPrimRange::set_begin(const iterator &)";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "!newBegin.IsPostVisit()", 0);
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  sub_20C01A074((int *)(a1 + 16), (_DWORD *)(a2 + 16));
  result = sub_20C01A0C8((int *)(a1 + 20), (_DWORD *)(a2 + 20));
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 24);
  return result;
}

BOOL sub_20C37F8B8(uint64_t *a1, uint64_t a2, int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t v9;

  v3 = 0x2000;
  if (!a3)
    v3 = 0;
  v4 = *(_QWORD *)(*(_QWORD *)a2 + 56) & 0xFFFFFFFFFFFFDFFFLL | v3;
  v5 = *a1;
  v6 = a1[1];
  v9 = *a1 & v4;
  v8 = v6 & v5;
  return *((unsigned __int8 *)a1 + 16) != sub_20C37F938(&v9, 0, (uint64_t)&v9, 0xFu, &v8);
}

uint64_t sub_20C37F938(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, _QWORD *a5)
{
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2))
        v6 = 64 - a2;
      else
        v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0)
        return 0;
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        v7 = v5 - 64;
        ++a1;
        ++a5;
        v8 = v5 <= 127;
        v5 -= 64;
        if (v8)
          goto LABEL_14;
      }
      return 0;
    }
    v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7)
      return 0;
  }
  return 1;
}

void sub_20C37FA04(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 32;
        sub_20C37FA88((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C37FA88(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v6;

  v3 = *(_QWORD *)(a2 + 24);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a2 + 20));
  sub_20BFD265C((_DWORD *)(a2 + 16));
  v6 = *(pxrInternal__aapl__pxrReserved__::Usd_PrimData **)(a2 + 8);
  if (v6)
    sub_20C35C614(v6);
}

unint64_t sub_20C37FAEC(int **a1, char a2)
{
  int *v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;

  v2 = a1[4];
  v3 = **a1;
  if (v3)
  {
    v4 = *(_QWORD *)a1[1];
    v5 = *(_DWORD **)v4;
    v6 = *(_QWORD *)(v4 + 8);
    if (*(_QWORD *)v4 != v6)
    {
      v7 = (_DWORD *)(v6 - 4);
      do
      {
        if (*v7 < v3)
          break;
        *(_QWORD *)(v4 + 8) = v7;
      }
      while (v7-- != v5);
    }
    if (*(_DWORD *)(v4 + 24) >= v3)
      *(_DWORD *)(v4 + 24) = -1;
  }
  v9 = (uint64_t *)a1[2];
  v10 = *v9;
  *v9 += 136;
  if ((a2 & 1) != 0)
    return 0x100000000;
  v12 = (uint64_t)a1[3];
  v13 = (uint64_t *)a1[1];
  v14 = *v13;
  *v13 += 32;
  return sub_20C37FB88(v10, v12, v14, (uint64_t)(v2 + 8), (uint64_t)(v2 + 10));
}

unint64_t sub_20C37FB88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  int v9;
  int v10;
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a5;
  sub_20C348EEC(a2, &v9);
  v7 = pxrInternal__aapl__pxrReserved__::Sdf_PathExpressionEvalBase::_PatternImplBase::_Next(a1, a3, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, (uint64_t)v11, (uint64_t (*)(uint64_t, uint64_t, _QWORD *))sub_20C37FC18);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  sub_20BFD265C(&v9);
  return v7;
}

void sub_20C37FC04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

unint64_t sub_20C37FC1C(uint64_t **a1, int a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  int **v4;
  pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **v5;
  unint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::Usd_PrimData *v11;
  int v12;
  int v13;
  uint64_t v14;

  v4 = (int **)((*a1)[14] + 48 * a2);
  v5 = (pxrInternal__aapl__pxrReserved__::Usd_InstanceCache **)sub_20C348E08(a1[1]);
  pxrInternal__aapl__pxrReserved__::UsdStage::GetObjectAtPath(v5, a3, (uint64_t)&v10);
  v6 = sub_20C37FCCC(v4, (uint64_t)&v10);
  if ((v14 & 7) != 0)
  {
    v7 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  if (v11)
    sub_20C35C614(v11);
  return v6;
}

