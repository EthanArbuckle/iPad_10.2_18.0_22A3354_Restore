_QWORD *sub_20BE86824(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;

  v1 = result[1];
  v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v1 + 24);
    v5 = *(_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 72);
    v7 = result[11];
    v8 = result[15];
    do
    {
      v9 = *(unsigned int *)(v4 + 8 * v3);
      if ((int)v9 >= 1)
      {
        v10 = 0;
        v11 = (8 * v3) | 4;
        v12 = *(int *)(v4 + v11);
        v13 = v5 + 4 * v12;
        v14 = v6 + 4 * v12;
        v15 = v8 + 4 * *(int *)(v7 + v11);
        do
        {
          v16 = *(_DWORD *)(v15 + 4 * v10);
          if (v16 != -1)
          {
            if (v10)
              v17 = v10;
            else
              v17 = v9;
            v18 = *(_DWORD *)(result[21] + 4 * v3);
            LODWORD(v19) = v17 - 1;
            v20 = result[27];
            v21 = *(_DWORD *)(v20 + 4 * *(int *)(v14 + 4 * (v17 - 1)));
            v22 = *(_DWORD *)(result[30] + 4 * *(int *)(v13 + 4 * v10));
            v23 = *(_DWORD *)(v20 + 4 * *(int *)(v14 + 4 * v10));
            v24 = (_DWORD *)(*(_QWORD *)(result[2] + 48)
                           + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v16) | 1)));
            if ((_DWORD)v9 == 4)
            {
              v19 = (int)v19;
              LODWORD(v25) = v17 - 2;
              if (!(_DWORD)v19)
                LODWORD(v25) = 3;
              v24[v10] = v22;
              if ((_DWORD)v25)
                v26 = v25 - 1;
              else
                v26 = 3;
              v24[v26] = v23;
              v25 = (int)v25;
            }
            else
            {
              *v24 = v22;
              v24[1] = v23;
              v25 = 2;
              v19 = 3;
            }
            v24[v25] = v18;
            v24[v19] = v21;
          }
          ++v10;
        }
        while (v9 != v10);
        v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_20BE8695C(_QWORD *a1)
{
  int *v2;

  v2 = (int *)a1[2];
  if (*((_QWORD *)v2 + 4) == *((_QWORD *)v2 + 3))
  {
    sub_20BE867B8((uint64_t)a1);
    v2 = (int *)a1[2];
  }
  sub_20BE81ACC((uint64_t)(v2 + 18), 4 * *v2);
  return sub_20BE869A4(a1);
}

_QWORD *sub_20BE869A4(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  int v26;
  _DWORD *v27;
  _BOOL4 v29;
  _BOOL4 v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  int v39;

  v1 = result[1];
  v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v1 + 24);
    v5 = *(_QWORD *)(v1 + 48);
    v6 = *(_QWORD *)(v1 + 72);
    v7 = result[11];
    v8 = result[15];
    v9 = result[13];
    v10 = result[18];
    do
    {
      v11 = *(unsigned int *)(v4 + 8 * v3);
      if ((int)v11 >= 1)
      {
        v12 = 0;
        v13 = (8 * v3) | 4;
        v14 = *(int *)(v4 + v13);
        v15 = v5 + 4 * v14;
        v16 = v6 + 4 * v14;
        v17 = v8 + 4 * *(int *)(v7 + v13);
        v18 = v10 + 4 * *(int *)(v9 + v13);
        do
        {
          v19 = *(_DWORD *)(v17 + 4 * v12);
          if (v19 != -1)
          {
            if (v12)
              v20 = v12;
            else
              v20 = v11;
            LODWORD(v21) = v20 - 1;
            v22 = *(int *)(v16 + 4 * (v20 - 1));
            v23 = *(_QWORD *)(v1 + 120);
            v24 = (_DWORD *)(v23 + 8 * v22);
            v25 = *(int *)(v16 + 4 * v12);
            v26 = *(_DWORD *)(v15 + 4 * v12);
            v27 = (_DWORD *)(v23 + 8 * v25);
            v29 = *v24 == v24[1] || *v24 != v26;
            v31 = *v27 != v27[1] && *v27 != v26;
            v32 = result[24];
            v33 = *(_DWORD *)(v32 + 8 * v22 + 4 * v29);
            v34 = *(_DWORD *)(v32 + 8 * v25 + 4 * v31);
            v35 = *(_DWORD *)(v18 + 4 * (int)v21);
            v36 = *(_DWORD *)(v18 + 4 * v12);
            v37 = (_DWORD *)(*(_QWORD *)(result[2] + 72)
                           + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v19) | 1)));
            if ((_DWORD)v11 == 4)
            {
              v21 = (int)v21;
              LODWORD(v38) = v20 - 2;
              if (!(_DWORD)v21)
                LODWORD(v38) = 3;
              v37[v12] = v34;
              if ((_DWORD)v38)
                v39 = v38 - 1;
              else
                v39 = 3;
              v37[v39] = v36;
              v38 = (int)v38;
            }
            else
            {
              *v37 = v34;
              v37[1] = v36;
              v38 = 2;
              v21 = 3;
            }
            v37[v38] = v35;
            v37[v21] = v33;
          }
          ++v12;
        }
        while (v11 != v12);
        v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_20BE86B28(_QWORD *a1)
{
  sub_20BE81ACC(a1[2] + 120, 2 * *(int *)(a1[2] + 4));
  sub_20BE86B64(a1);
  return sub_20BE86C04(a1);
}

_QWORD *sub_20BE86B64(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;

  v1 = result[1];
  v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    v3 = 0;
    v4 = *(_QWORD *)(v1 + 24);
    v5 = *(_QWORD *)(v1 + 72);
    v6 = result[13];
    v7 = result[18];
    do
    {
      v8 = *(unsigned int *)(v4 + 8 * v3);
      if ((int)v8 >= 1)
      {
        v9 = (8 * v3) | 4;
        v10 = (int *)(v5 + 4 * *(int *)(v4 + v9));
        v11 = (int *)(v7 + 4 * *(int *)(v6 + v9));
        do
        {
          v13 = *v11++;
          v12 = v13;
          if ((_DWORD)v13 != -1)
          {
            v14 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v12);
            *v14 = *(_DWORD *)(result[21] + 4 * v3);
            v14[1] = *(_DWORD *)(result[27] + 4 * *v10);
          }
          ++v10;
          --v8;
        }
        while (v8);
        v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_20BE86C04(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  _DWORD *v9;

  v1 = result[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    v2 = 0;
    v3 = *(_QWORD *)(v1 + 120);
    v4 = result[24];
    do
    {
      v5 = 0;
      v6 = 1;
      do
      {
        v7 = v6;
        v8 = *(int *)(v4 + 8 * v2 + 4 * v5);
        if ((_DWORD)v8 != -1)
        {
          v9 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v8);
          *v9 = *(_DWORD *)(result[27] + 4 * v2);
          v9[1] = *(_DWORD *)(result[30] + 4 * *(int *)(v3 + 8 * v2 + 4 * v5));
        }
        v6 = 0;
        v5 = 1;
      }
      while ((v7 & 1) != 0);
      ++v2;
    }
    while (v2 < *(int *)(v1 + 4));
  }
  return result;
}

void sub_20BE86C88(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  int *v4;
  unint64_t v5;

  v2 = 2
     * (((*(_QWORD *)(a1[1] + 176) - *(_QWORD *)(a1[1] + 168)) >> 2)
      + ((*(_QWORD *)(a1[1] + 56) - *(_QWORD *)(a1[1] + 48)) >> 2));
  sub_20BE81ACC(a1[2] + 144, 2 * *(int *)(a1[2] + 4));
  sub_20BE81ACC(a1[2] + 168, v2);
  sub_20BE81AFC(a1[2] + 192, v2);
  *(_DWORD *)(a1[2] + 16) = *(_DWORD *)(a1[1] + 16);
  sub_20BE86D50(a1);
  sub_20BE86E8C(a1);
  v3 = a1[2];
  v4 = (int *)(*(_QWORD *)(v3 + 144) + 4 * (2 * *(_DWORD *)(v3 + 4) - 2));
  v5 = v4[1] + (uint64_t)*v4;
  sub_20BE81ACC(v3 + 168, v5);
  sub_20BE81AFC(a1[2] + 192, v5);
}

_QWORD *sub_20BE86D50(_QWORD *result)
{
  int *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  __int16 *v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  int v28;
  __int16 v29;

  v1 = (int *)result[1];
  v2 = *v1;
  if (*v1 >= 1)
  {
    v3 = 0;
    v4 = result[11];
    v5 = result[15];
    v6 = result[13];
    v7 = result[18];
    do
    {
      v8 = *(unsigned int *)(v4 + 8 * v3);
      if ((int)v8 >= 1)
      {
        v9 = 0;
        v10 = (8 * v3) | 4;
        v11 = v5 + 4 * *(int *)(v4 + v10);
        v12 = v7 + 4 * *(int *)(v6 + v10);
        do
        {
          v13 = *(int *)(v12 + 4 * v9);
          if ((_DWORD)v13 == -1)
          {
            ++v9;
          }
          else
          {
            v14 = result[2];
            v15 = *(_QWORD *)(v14 + 144);
            v16 = (_DWORD *)(v15 + 8 * v13);
            *v16 = 2;
            if ((_DWORD)v13)
              v17 = *(v16 - 1) + *(v16 - 2);
            else
              v17 = 0;
            v18 = 2 * v13;
            v16[1] = v17;
            v19 = *(_DWORD *)(v14 + 16);
            if (v19 <= 2)
              v19 = 2;
            *(_DWORD *)(v14 + 16) = v19;
            v20 = *(int *)(v15 + 4 * (v18 | 1));
            v21 = (_DWORD *)(*(_QWORD *)(v14 + 168) + 4 * v20);
            v22 = (__int16 *)(*(_QWORD *)(v14 + 192) + 2 * v20);
            v23 = v9 + 1;
            if (v9 + 1 >= v8)
              v24 = 0;
            else
              v24 = v9 + 1;
            v25 = *(_DWORD *)(v11 + 4 * v9);
            if (v25 == -1)
            {
              v27 = 0;
            }
            else
            {
              *v21 = v25;
              if ((_DWORD)v8 == 4)
                v26 = v24;
              else
                v26 = 1;
              *v22 = v26;
              v27 = 1;
            }
            v28 = *(_DWORD *)(v11 + 4 * v24);
            if (v28 != -1)
            {
              v21[v27] = v28;
              v29 = ((_BYTE)v24 + 2) & 3;
              if ((_DWORD)v8 != 4)
                v29 = 2;
              v22[v27] = v29;
              LODWORD(v27) = v27 + 1;
            }
            *v16 = v27;
            v9 = v23;
          }
        }
        while (v9 != v8);
        v2 = *v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_20BE86E8C(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  int v39;
  int v40;
  __int16 v41;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[24];
    do
    {
      v5 = (_DWORD *)(v4 + 8 * v3);
      if (*v5 != -1 || v5[1] != -1)
      {
        v6 = 0;
        v7 = *(_QWORD *)(v1 + 144);
        v8 = *(int *)(v7 + ((8 * v3) | 4));
        v9 = *(unsigned int *)(v7 + 8 * v3);
        v10 = *(_QWORD *)(v1 + 168) + 4 * v8;
        v11 = *(_QWORD *)(v1 + 192) + 2 * v8;
        v12 = (_DWORD *)(*(_QWORD *)(v1 + 120) + 8 * v3);
        v13 = 1;
        do
        {
          v14 = v13;
          v15 = (int)v5[v6];
          if ((_DWORD)v15 != -1)
          {
            v16 = result[2];
            v17 = *(_QWORD *)(v16 + 144);
            v18 = (_DWORD *)(v17 + 8 * v15);
            *v18 = v9;
            if ((_DWORD)v15)
              v19 = *(v18 - 1) + *(v18 - 2);
            else
              v19 = 0;
            v18[1] = v19;
            v20 = *(_DWORD *)(v16 + 16);
            if (v20 <= (int)v9)
              v20 = v9;
            *(_DWORD *)(v16 + 16) = v20;
            if ((int)v9 < 1)
            {
              v21 = 0;
            }
            else
            {
              v21 = 0;
              v22 = *(int *)(v17 + 4 * (int)((2 * v15) | 1));
              v23 = *(_QWORD *)(v16 + 168) + 4 * v22;
              v24 = *(_QWORD *)(v16 + 192) + 2 * v22;
              v25 = *(_QWORD *)(v1 + 24);
              v26 = result[11];
              v27 = result[15];
              v28 = v9;
              v29 = (int *)v10;
              v30 = (unsigned __int16 *)v11;
              do
              {
                v32 = *v29++;
                v31 = v32;
                LODWORD(v32) = *v30++;
                v33 = v32;
                v34 = (2 * v31) | 1;
                v35 = v6;
                if (*v12 != v12[1])
                  v35 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * *(int *)(v25 + 4 * v34) + 4 * v33) != v12[v6];
                v36 = 2 * v31;
                v37 = v27 + 4 * *(int *)(v26 + 4 * v34);
                if (v35 + v33 == *(_DWORD *)(v26 + 4 * v36))
                  v38 = 0;
                else
                  v38 = v35 + v33;
                v39 = *(_DWORD *)(v37 + 4 * v38);
                if (v39 != -1)
                {
                  v40 = *(_DWORD *)(v25 + 4 * v36);
                  *(_DWORD *)(v23 + 4 * v21) = v39;
                  if (v35)
                    v41 = 3;
                  else
                    v41 = 0;
                  if (v40 != 4)
                    LOWORD(v33) = v41;
                  *(_WORD *)(v24 + 2 * v21++) = v33;
                }
                --v28;
              }
              while (v28);
            }
            *v18 = v21;
          }
          v13 = 0;
          v6 = 1;
        }
        while ((v14 & 1) != 0);
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_20BE87064(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;

  v2 = *(_QWORD **)(a1 + 8);
  v3 = (((v2[22] - v2[21]) >> 1) & 0xFFFFFFFE) + ((v2[7] - v2[6]) >> 2) + ((v2[37] - v2[36]) >> 2);
  sub_20BE81ACC(*(_QWORD *)(a1 + 16) + 264, 2 * *(int *)(*(_QWORD *)(a1 + 16) + 8));
  sub_20BE81ACC(*(_QWORD *)(a1 + 16) + 288, v3);
  sub_20BE81AFC(*(_QWORD *)(a1 + 16) + 312, v3);
  if (*(_DWORD *)(a1 + 84))
  {
    sub_20BE87250((_QWORD *)a1);
    sub_20BE8732C((_QWORD *)a1);
    sub_20BE8715C((_QWORD *)a1);
  }
  else
  {
    sub_20BE8715C((_QWORD *)a1);
    sub_20BE87250((_QWORD *)a1);
    sub_20BE8732C((_QWORD *)a1);
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (int *)(*(_QWORD *)(v4 + 264) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  v6 = v5[1] + (uint64_t)*v5;
  sub_20BE81ACC(v4 + 288, v6);
  sub_20BE81AFC(*(_QWORD *)(a1 + 16) + 312, v6);
}

_QWORD *sub_20BE8715C(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  int v25;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[30];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 288);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 264) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 312);
        v11 = (_QWORD *)result[2];
        v12 = (_DWORD *)(v11[33] + 8 * v5);
        *v12 = v8;
        if ((_DWORD)v5)
          v13 = *(v12 - 1) + *(v12 - 2);
        else
          v13 = 0;
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          v15 = (int *)(v6 + 4 * v9);
          v16 = (unsigned __int16 *)(v10 + 2 * v9);
          v17 = v11[36] + 4 * v13;
          v18 = v11[39] + 2 * v13;
          v19 = result[11];
          v20 = result[15];
          do
          {
            v22 = *v15++;
            v21 = v22;
            LODWORD(v22) = *v16++;
            v23 = v22;
            v24 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 8 * v21 + 4) + 4 * v22);
            if (v24 != -1)
            {
              v25 = *(_DWORD *)(v19 + 8 * (_DWORD)v21);
              *(_DWORD *)(v17 + 4 * v14) = v24;
              if (v25 != 4)
                v23 = 0;
              *(_WORD *)(v18 + 2 * v14++) = v23;
            }
            --v8;
          }
          while (v8);
        }
        *v12 = v14;
        v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_20BE87250(_QWORD *result)
{
  int *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;

  v1 = (int *)result[1];
  v2 = *v1;
  if (*v1 >= 1)
  {
    v3 = 0;
    v4 = result[21];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = (unsigned int *)(result[11] + 8 * v3);
        v7 = result[15];
        v8 = *v6;
        v9 = (int)v6[1];
        v10 = (_QWORD *)result[2];
        v11 = (_DWORD *)(v10[33] + 8 * v5);
        *v11 = v8;
        if ((_DWORD)v5)
          v12 = *(v11 - 1) + *(v11 - 2);
        else
          v12 = 0;
        v11[1] = v12;
        if ((int)v8 < 1)
        {
          v14 = 0;
        }
        else
        {
          v13 = 0;
          v14 = 0;
          v15 = v7 + 4 * v9;
          v16 = v10[36] + 4 * v12;
          v17 = v10[39] + 2 * v12;
          do
          {
            v18 = *(_DWORD *)(v15 + 4 * v13);
            if (v18 != -1)
            {
              *(_DWORD *)(v16 + 4 * v14) = v18;
              v19 = ((_BYTE)v13 + 2) & 3;
              if ((_DWORD)v8 != 4)
                v19 = 2;
              *(_WORD *)(v17 + 2 * v14++) = v19;
            }
            ++v13;
          }
          while (v8 != v13);
        }
        *v11 = v14;
        v2 = *v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_20BE8732C(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[27];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 168);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 144) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 192);
        v11 = (_QWORD *)result[2];
        v12 = (_DWORD *)(v11[33] + 8 * v5);
        *v12 = 2 * v8;
        if ((_DWORD)v5)
          v13 = *(v12 - 1) + *(v12 - 2);
        else
          v13 = 0;
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          v15 = (int *)(v6 + 4 * v9);
          v16 = (unsigned __int16 *)(v10 + 2 * v9);
          v17 = v11[36] + 4 * v13;
          v18 = v11[39] + 2 * v13;
          v19 = result[11];
          v20 = result[15];
          do
          {
            v22 = *v15++;
            v21 = v22;
            LODWORD(v22) = *v16++;
            v23 = v22;
            v24 = v20 + 4 * *(int *)(v19 + 8 * v21 + 4);
            v25 = *(_DWORD *)(v19 + 8 * (_DWORD)v21);
            if ((_DWORD)v22 + 1 == v25)
              v26 = 0;
            else
              v26 = v23 + 1;
            v27 = *(_DWORD *)(v24 + 4 * v26);
            if (v27 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v27;
              if (v25 == 4)
                v28 = v23;
              else
                v28 = 3;
              *(_WORD *)(v18 + 2 * v14++) = v28;
            }
            v29 = *(_DWORD *)(v24 + 4 * v23);
            if (v29 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v29;
              if (v25 == 4)
                v30 = v26;
              else
                v30 = 1;
              *(_WORD *)(v18 + 2 * v14++) = v30;
            }
            --v8;
          }
          while (v8);
        }
        *v12 = v14;
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_20BE8745C(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = ((*(_QWORD *)(v2 + 56) - *(_QWORD *)(v2 + 48)) >> 2)
     + 2 * *(_DWORD *)(v2 + 4)
     + ((*(_QWORD *)(v2 + 176) - *(_QWORD *)(v2 + 168)) >> 2)
     + ((*(_QWORD *)(v2 + 368) - *(_QWORD *)(v2 + 360)) >> 2);
  sub_20BE81ACC(*(_QWORD *)(a1 + 16) + 336, 2 * *(int *)(*(_QWORD *)(a1 + 16) + 8));
  sub_20BE81ACC(*(_QWORD *)(a1 + 16) + 360, v3);
  sub_20BE81AFC(*(_QWORD *)(a1 + 16) + 384, v3);
  if (*(_DWORD *)(a1 + 84))
  {
    sub_20BE87650((_QWORD *)a1);
    sub_20BE87748((_QWORD *)a1);
    sub_20BE87558((_QWORD *)a1);
  }
  else
  {
    sub_20BE87558((_QWORD *)a1);
    sub_20BE87650((_QWORD *)a1);
    sub_20BE87748((_QWORD *)a1);
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (int *)(*(_QWORD *)(v4 + 336) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  v6 = v5[1] + (uint64_t)*v5;
  sub_20BE81ACC(v4 + 360, v6);
  sub_20BE81AFC(*(_QWORD *)(a1 + 16) + 384, v6);
}

_QWORD *sub_20BE87558(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[30];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 360);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 336) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 384);
        v11 = result[2];
        v12 = *(_QWORD *)(v11 + 336);
        v13 = (_DWORD *)(v12 + 8 * v5);
        *v13 = v8;
        if ((_DWORD)v5)
          v14 = *(v13 - 1) + *(v13 - 2);
        else
          v14 = 0;
        v13[1] = v14;
        v15 = *(_DWORD *)(v11 + 20);
        if (v15 <= (int)v8)
          v15 = v8;
        *(_DWORD *)(v11 + 20) = v15;
        if ((int)v8 < 1)
        {
          v16 = 0;
        }
        else
        {
          v16 = 0;
          v17 = (int *)(v6 + 4 * v9);
          v18 = (unsigned __int16 *)(v10 + 2 * v9);
          v19 = *(int *)(v12 + 4 * (int)((2 * v5) | 1));
          v20 = *(_QWORD *)(v11 + 360) + 4 * v19;
          v21 = *(_QWORD *)(v11 + 384) + 2 * v19;
          v22 = result[24];
          do
          {
            v24 = *v17++;
            v23 = v24;
            LODWORD(v24) = *v18++;
            v25 = *(_DWORD *)(v22 + 8 * v23 + 4 * v24);
            if (v25 != -1)
            {
              *(_DWORD *)(v20 + 4 * v16) = v25;
              *(_WORD *)(v21 + 2 * v16++) = 1;
            }
            --v8;
          }
          while (v8);
        }
        *v13 = v16;
        v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_20BE87650(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;

  v1 = result[1];
  v2 = *(_DWORD *)v1;
  if (*(int *)v1 >= 1)
  {
    v3 = 0;
    v4 = result[21];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_DWORD *)(*(_QWORD *)(v1 + 24) + 8 * v3);
        v7 = *(int *)(result[13] + 8 * v3 + 4);
        v8 = result[18];
        v9 = result[2];
        v10 = *(_QWORD *)(v9 + 336);
        v11 = (int *)(v10 + 8 * v5);
        *v11 = v6;
        if ((_DWORD)v5)
          v12 = *(v11 - 1) + *(v11 - 2);
        else
          v12 = 0;
        v11[1] = v12;
        v13 = *(_DWORD *)(v9 + 20);
        if (v13 <= v6)
          v13 = v6;
        *(_DWORD *)(v9 + 20) = v13;
        if (v6 < 1)
        {
          v15 = 0;
        }
        else
        {
          v14 = 0;
          v15 = 0;
          v16 = v8 + 4 * v7;
          v17 = *(int *)(v10 + 4 * (int)((2 * v5) | 1));
          v18 = *(_QWORD *)(v9 + 360) + 4 * v17;
          v19 = *(_QWORD *)(v9 + 384) + 2 * v17;
          do
          {
            if (v14)
              v20 = v14;
            else
              v20 = v6;
            v21 = *(_DWORD *)(v16 + 4 * (v20 - 1));
            if (v21 != -1)
            {
              *(_DWORD *)(v18 + 4 * v15) = v21;
              *(_WORD *)(v19 + 2 * v15++) = 0;
            }
            ++v14;
          }
          while (v6 != v14);
        }
        *v11 = v15;
        v2 = *(_DWORD *)v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_20BE87748(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int *v15;
  int v16;
  int *v17;
  int v18;
  uint64_t v19;
  int *v20;
  __int16 *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  __int16 v34;
  int v35;
  int v36;
  __int16 v37;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[27];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 168);
        v7 = *(unsigned int *)(*(_QWORD *)(v1 + 144) + 8 * v3);
        v8 = *(int *)(*(_QWORD *)(v1 + 144) + 8 * v3 + 4);
        v9 = *(_QWORD *)(v1 + 192);
        v10 = *(_QWORD *)(v1 + 120);
        v11 = result[24];
        v12 = result[2];
        v13 = v7 + 2;
        v14 = *(_QWORD *)(v12 + 336);
        v15 = (int *)(v14 + 8 * v5);
        *v15 = v7 + 2;
        if ((_DWORD)v5)
          v16 = *(v15 - 1) + *(v15 - 2);
        else
          v16 = 0;
        v17 = (int *)(v11 + 8 * v3);
        v18 = 2 * v5;
        v15[1] = v16;
        if (*(_DWORD *)(v12 + 20) > v13)
          v13 = *(_DWORD *)(v12 + 20);
        *(_DWORD *)(v12 + 20) = v13;
        v19 = *(int *)(v14 + 4 * (v18 | 1));
        v20 = (int *)(*(_QWORD *)(v12 + 360) + 4 * v19);
        v21 = (__int16 *)(*(_QWORD *)(v12 + 384) + 2 * v19);
        if (*v17 == -1)
        {
          v22 = 0;
        }
        else
        {
          *v20 = *v17;
          *v21 = 0;
          v22 = 1;
        }
        v23 = v17[1];
        if (v23 != -1)
        {
          v20[v22] = v23;
          v21[v22++] = 0;
        }
        if ((int)v7 >= 1)
        {
          v24 = 0;
          v25 = v6 + 4 * v8;
          v26 = v9 + 2 * v8;
          v27 = result[13];
          v28 = result[18];
          v29 = (_DWORD *)(v10 + 8 * v3);
          do
          {
            v30 = *(unsigned __int16 *)(v26 + 2 * v24);
            v31 = (2 * *(int *)(v25 + 4 * v24)) | 1;
            v32 = *(_DWORD *)(v28 + 4 * *(int *)(v27 + 4 * v31) + 4 * v30);
            if (v32 != -1)
            {
              v20[v22] = v32;
              v21[v22++] = 1;
              if (!v24 && v22 == 3)
              {
                if (*v29 == v29[1])
                {
                  v33 = v20[1];
                  v34 = v21[1];
                }
                else
                {
                  v35 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * *(int *)(*(_QWORD *)(v1 + 24) + 4 * v31) + 4 * v30);
                  v33 = v20[1];
                  v34 = v21[1];
                  if (v35 == *v29)
                  {
                    v36 = *v20;
                    *v20 = v33;
                    v37 = *v21;
                    *v21 = v34;
                    v34 = v37;
                    v33 = v36;
                  }
                }
                v20[1] = v20[2];
                v20[2] = v33;
                v21[1] = v21[2];
                v21[2] = v34;
                v22 = 3;
              }
            }
            ++v24;
          }
          while (v7 != v24);
        }
        *v15 = v22;
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_20BE87914(_QWORD *result)
{
  int *v1;
  uint64_t i;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  int v19;
  char v20;
  int v21;
  char v22;
  int v23;
  uint64_t v24;

  v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    for (i = 0; i < *v1; ++i)
    {
      v3 = (2 * i) | 1;
      v4 = (_DWORD *)(result[15] + 4 * *(int *)(result[11] + 4 * v3));
      v5 = (_DWORD *)(result[18] + 4 * *(int *)(result[13] + 4 * v3));
      v6 = *((_QWORD *)v1 + 3);
      v7 = *(unsigned int *)(v6 + 8 * i);
      v8 = result[51];
      if ((*(_BYTE *)(v8 + i) & 1) != 0)
      {
        if ((int)v7 >= 1)
        {
          do
          {
            *v4++ = 2;
            *v5++ = 2;
            --v7;
          }
          while (v7);
        }
        *(_DWORD *)(result[21] + 4 * i) = 2;
        v22 = *(_BYTE *)(v8 + i) & 0xE1;
      }
      else
      {
        if ((int)v7 < 1)
          goto LABEL_22;
        v9 = 0;
        v10 = 0;
        v11 = *((_QWORD *)v1 + 6) + 4 * *(int *)(v6 + 4 * v3);
        v12 = result[57];
        do
        {
          if ((*(_BYTE *)(v12 + *(int *)(v11 + 4 * v9)) & 1) != 0)
          {
            v10 = 1;
            v4[v9] = 1;
            if (v9)
              v13 = v9;
            else
              v13 = v7;
            v5[v9] = 1;
            v5[v13 - 1] = 1;
          }
          ++v9;
        }
        while (v7 != v9);
        if (!v10)
          goto LABEL_22;
        *(_DWORD *)(result[21] + 4 * i) = 1;
        v14 = (int *)(*((_QWORD *)v1 + 9) + 4 * *(int *)(v6 + 4 * v3));
        v15 = *(unsigned int *)(v6 + 8 * i);
        if ((_DWORD)v15 == 3)
        {
          v21 = *(_BYTE *)(result[54] + v14[1]) & 0xE | (*(unsigned __int8 *)(result[54] + *v14) >> 1) & 0xF | (2 * *(unsigned __int8 *)(result[54] + v14[2])) & 0xC;
          v20 = *(_BYTE *)(v8 + i);
        }
        else
        {
          if ((_DWORD)v15 != 4)
          {
            v23 = *(_BYTE *)(v8 + i) & 0xE1;
            *(_BYTE *)(v8 + i) &= 0xE1u;
            if ((int)v15 >= 1)
            {
              do
              {
                v24 = *v14++;
                v23 |= *(_BYTE *)(result[54] + v24) & 0x1E;
                *(_BYTE *)(v8 + i) = v23;
                --v15;
              }
              while (v15);
            }
            goto LABEL_22;
          }
          v16 = result[54];
          v17 = *(unsigned __int8 *)(v16 + *v14);
          v18 = *(_BYTE *)(v16 + v14[1]) & 0xE;
          v19 = (2 * *(unsigned __int8 *)(v16 + v14[2])) & 0xC;
          LOBYTE(v16) = 4 * *(_BYTE *)(v16 + v14[3]);
          v20 = *(_BYTE *)(v8 + i);
          v21 = v18 | (v17 >> 1) & 0xF | v19 | v16 & 8;
        }
        v22 = v20 & 0xE1 | (2 * (v21 & 0xF));
      }
      *(_BYTE *)(v8 + i) = v22;
LABEL_22:
      v1 = (int *)result[1];
    }
  }
  return result;
}

void sub_20BE87AF8(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      sub_20BDDF694();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_20BDE1330(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

double sub_20BE87C08(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  double result;

  *(_QWORD *)a1 = off_24C51A3A8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = *a4;
  *(_DWORD *)(a1 + 32) = -1;
  *(_WORD *)(a1 + 36) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_DWORD *)(a3 + 12) = *(_DWORD *)(a2 + 12) + 1;
  return result;
}

_QWORD *sub_20BE87CA0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  *a1 = off_24C51A3A8;
  v4 = a1 + 60;
  v2 = (_QWORD *)a1[60];
  v3 = v4[1];
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      if (v2[v5])
      {
        v6 = (void *)sub_20BE830C8(v2[v5]);
        operator delete(v6);
        v2 = (_QWORD *)a1[60];
        v3 = a1[61];
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    a1[61] = v2;
    operator delete(v2);
  }
  v7 = (void *)a1[57];
  if (v7)
  {
    a1[58] = v7;
    operator delete(v7);
  }
  v8 = (void *)a1[54];
  if (v8)
  {
    a1[55] = v8;
    operator delete(v8);
  }
  v9 = (void *)a1[51];
  if (v9)
  {
    a1[52] = v9;
    operator delete(v9);
  }
  v10 = (void *)a1[48];
  if (v10)
  {
    a1[49] = v10;
    operator delete(v10);
  }
  v11 = (void *)a1[45];
  if (v11)
  {
    a1[46] = v11;
    operator delete(v11);
  }
  v12 = (void *)a1[42];
  if (v12)
  {
    a1[43] = v12;
    operator delete(v12);
  }
  v13 = (void *)a1[39];
  if (v13)
  {
    a1[40] = v13;
    operator delete(v13);
  }
  v14 = (void *)a1[36];
  if (v14)
  {
    a1[37] = v14;
    operator delete(v14);
  }
  v15 = (void *)a1[33];
  if (v15)
  {
    a1[34] = v15;
    operator delete(v15);
  }
  v16 = (void *)a1[30];
  if (v16)
  {
    a1[31] = v16;
    operator delete(v16);
  }
  v17 = (void *)a1[27];
  if (v17)
  {
    a1[28] = v17;
    operator delete(v17);
  }
  v18 = (void *)a1[24];
  if (v18)
  {
    a1[25] = v18;
    operator delete(v18);
  }
  v19 = (void *)a1[21];
  if (v19)
  {
    a1[22] = v19;
    operator delete(v19);
  }
  v20 = (void *)a1[18];
  if (v20)
  {
    a1[19] = v20;
    operator delete(v20);
  }
  v21 = (void *)a1[15];
  if (v21)
  {
    a1[16] = v21;
    operator delete(v21);
  }
  return a1;
}

void sub_20BE87E1C(uint64_t a1, char a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;
  int v7;
  uint8x8_t v8;
  uint8x8_t v9;
  char v10;
  char v11[4];

  *(_BYTE *)(a1 + 36) = (a2 & 1) == 0;
  *(_BYTE *)(a1 + 37) = (a2 & 2) != 0;
  v4 = (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 464) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 456)) >> 3;
  sub_20BE87F34(a1);
  v5 = *(_DWORD **)(a1 + 16);
  v6 = *(_DWORD *)(a1 + 52);
  v7 = *(_DWORD *)(a1 + 48) + *(_DWORD *)(a1 + 44);
  *v5 = *(_DWORD *)(a1 + 40);
  v5[1] = v7;
  v5[2] = *(_DWORD *)(a1 + 56) + v6 + *(_DWORD *)(a1 + 60);
  sub_20BE87F70(a1, v8, v9);
  sub_20BE890E4(a1);
  sub_20BE89138(a1);
  sub_20BE891B8(a1);
  if ((a2 & 4) != 0)
    v10 = 1;
  else
    v10 = -1;
  v11[0] = v10;
  if ((int)v4 < 1)
  {
    sub_20BE8801C(a1, v11);
    sub_20BE89468(a1);
    sub_20BE896A4(a1);
    sub_20BE89790(a1);
  }
  else
  {
    v11[0] = v10 | 0x10;
    sub_20BE8801C(a1, v11);
    sub_20BE89468(a1);
    sub_20BE896A4(a1);
    sub_20BE89790(a1);
    sub_20BE88128((_QWORD *)a1);
  }
}

uint64_t sub_20BE87F34(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  if (!*(_BYTE *)(a1 + 36))
    sub_20BE8836C((_QWORD *)a1);
  return sub_20BE883D8(a1);
}

uint64_t sub_20BE87F70(uint64_t a1, uint8x8_t a2, uint8x8_t a3)
{
  int16x8_t v4;
  int16x8_t v5;
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  a3.i32[0] = HIDWORD(v7[0]);
  a2.i32[0] = v7[0];
  v4 = (int16x8_t)vmovl_u8(a2);
  *(int8x8_t *)v4.i8 = vorr_s8((int8x8_t)(v4.i64[0] & 0xFFE0FFE0FFE0FFE0), (int8x8_t)0x18001000080000);
  v4.i32[0] = vmovn_s16(v4).u32[0];
  v5 = (int16x8_t)vmovl_u8(a3);
  *(int8x8_t *)v5.i8 = vorr_s8((int8x8_t)(v5.i64[0] & 0xFFE0FFE0FFE0FFE0), (int8x8_t)0x19001100090001);
  v4.i32[1] = vmovn_s16(v5).u32[0];
  v7[0] = v4.i64[0];
  sub_20BE888BC(a1, v7);
  sub_20BE88928(a1, v7);
  return sub_20BE889A0(a1, v7);
}

uint64_t sub_20BE8801C(uint64_t result, char *a2)
{
  uint64_t v3;
  char v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  int v11;

  v3 = result;
  v4 = *a2;
  if ((*a2 & 1) != 0)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
    v4 = *a2;
    if ((*a2 & 2) == 0)
    {
LABEL_3:
      if ((v4 & 4) == 0)
        goto LABEL_4;
      goto LABEL_24;
    }
  }
  else if ((*a2 & 2) == 0)
  {
    goto LABEL_3;
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  v4 = *a2;
  if ((*a2 & 4) == 0)
  {
LABEL_4:
    if ((v4 & 8) == 0)
      goto LABEL_5;
    goto LABEL_25;
  }
LABEL_24:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  v4 = *a2;
  if ((*a2 & 8) == 0)
  {
LABEL_5:
    if ((v4 & 0x10) == 0)
      goto LABEL_6;
    goto LABEL_26;
  }
LABEL_25:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 56))(v3);
  v4 = *a2;
  if ((*a2 & 0x10) == 0)
  {
LABEL_6:
    if ((v4 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_7;
  }
LABEL_26:
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  if ((*a2 & 0x20) != 0)
LABEL_7:
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
LABEL_8:
  v5 = *(_DWORD *)(v3 + 28);
  v6 = *(_DWORD *)(*(_QWORD *)(v3 + 8) + 20);
  if (v6 <= 6)
    v7 = 6;
  else
    v7 = *(_DWORD *)(*(_QWORD *)(v3 + 8) + 20);
  if (v6 <= 4)
    v6 = 4;
  v8 = v5 == 0;
  if (v5)
    v9 = 2 * *(_DWORD *)(*(_QWORD *)(v3 + 8) + 16);
  else
    v9 = *(_DWORD *)(*(_QWORD *)(v3 + 8) + 16);
  if (v8)
    v10 = v6;
  else
    v10 = v7;
  v11 = v9 + 2;
  if (v10 > v11)
    v11 = v10;
  *(_DWORD *)(*(_QWORD *)(v3 + 16) + 20) = v11;
  return result;
}

void sub_20BE88128(_QWORD *a1)
{
  unint64_t v1;
  uint64_t v3;
  char **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t **v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t **v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;

  v1 = *(_QWORD *)(a1[1] + 464) - *(_QWORD *)(a1[1] + 456);
  if ((int)(v1 >> 3) >= 1)
  {
    v3 = 0;
    v4 = (char **)(a1 + 60);
    v35 = (uint64_t)(a1 + 62);
    v5 = (v1 >> 3);
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1[1] + 456) + 8 * v3);
      v7 = operator new(0xD8uLL);
      sub_20BE81914((uint64_t)v7, a1[2]);
      v8 = (uint64_t *)operator new(0x40uLL);
      sub_20BE830A8(v8, (uint64_t)a1, v6, (uint64_t)v7);
      sub_20BE830F8(v8);
      v9 = (_QWORD *)a1[2];
      v11 = (_QWORD *)v9[58];
      v10 = v9[59];
      if ((unint64_t)v11 >= v10)
      {
        v13 = v9[57];
        v14 = ((uint64_t)v11 - v13) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          sub_20BDDF694();
        v15 = v10 - v13;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)sub_20BDDF6A8((uint64_t)(v9 + 59), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v7;
        v12 = v19 + 8;
        v21 = (char *)v9[57];
        v20 = (char *)v9[58];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = (char *)v9[57];
        }
        v9[57] = v19;
        v9[58] = v12;
        v9[59] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v11 = v7;
        v12 = v11 + 1;
      }
      v9[58] = v12;
      v24 = (uint64_t **)a1[61];
      v23 = a1[62];
      if ((unint64_t)v24 >= v23)
      {
        v26 = ((char *)v24 - *v4) >> 3;
        if ((unint64_t)(v26 + 1) >> 61)
          sub_20BDDF694();
        v27 = v23 - (_QWORD)*v4;
        v28 = v27 >> 2;
        if (v27 >> 2 <= (unint64_t)(v26 + 1))
          v28 = v26 + 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v28;
        if (v29)
          v30 = (char *)sub_20BDDF6A8(v35, v29);
        else
          v30 = 0;
        v31 = (uint64_t **)&v30[8 * v26];
        *v31 = v8;
        v25 = v31 + 1;
        v33 = (char *)a1[60];
        v32 = (char *)a1[61];
        if (v32 != v33)
        {
          do
          {
            v34 = (uint64_t *)*((_QWORD *)v32 - 1);
            v32 -= 8;
            *--v31 = v34;
          }
          while (v32 != v33);
          v32 = *v4;
        }
        a1[60] = v31;
        a1[61] = v25;
        a1[62] = &v30[8 * v29];
        if (v32)
          operator delete(v32);
      }
      else
      {
        *v24 = v8;
        v25 = v24 + 1;
      }
      a1[61] = v25;
      ++v3;
    }
    while (v3 != v5);
  }
}

void sub_20BE8834C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE8836C(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = *(_DWORD *)(v2 + 8);
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = a1[57];
    do
    {
      if ((*(_BYTE *)(v5 + v4) & 1) != 0)
      {
        *(_DWORD *)(a1[30] + 4 * v4) = 2;
        v3 = *(_DWORD *)(v2 + 8);
      }
      ++v4;
    }
    while (v4 < v3);
  }
  sub_20BE89A98(a1);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
}

uint64_t sub_20BE883D8(uint64_t result)
{
  int v1;
  int *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  _DWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  _DWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  unint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  int *v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int *v51;
  unint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  int *v57;
  unint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  _DWORD *v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  _DWORD *v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int *v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  int *v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  int v87;
  int *v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int *v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  int v99;
  int v100;

  v1 = *(unsigned __int8 *)(result + 36);
  *(_DWORD *)(result + 64) = 0;
  v2 = *(int **)(result + 120);
  v3 = *(_QWORD *)(result + 128) - (_QWORD)v2;
  v4 = v3 >> 2;
  if (v1)
  {
    if ((int)v4 >= 1)
    {
      v5 = 0;
      do
      {
        v2[v5] = v5;
        ++v5;
      }
      while ((v3 >> 2) != v5);
    }
    *(_DWORD *)(result + 40) = v4;
    *(_DWORD *)(result + 68) = 0;
    v6 = *(_QWORD *)(result + 144);
    v7 = *(_QWORD *)(result + 152) - v6;
    v8 = v7 >> 2;
    if ((int)(v7 >> 2) >= 1)
    {
      v9 = 0;
      v10 = (v7 >> 2);
      do
      {
        *(_DWORD *)(v6 + 4 * v9) = v9;
        ++v9;
      }
      while (v10 != v9);
    }
    *(_DWORD *)(result + 44) = v8;
    *(_DWORD *)(result + 72) = v8;
    v11 = *(_DWORD **)(result + 192);
    v12 = *(_QWORD *)(result + 200) - (_QWORD)v11;
    v13 = v12 >> 2;
    if ((int)(v12 >> 2) >= 1)
    {
      v14 = (v12 >> 2);
      do
      {
        *v11++ = v8;
        LODWORD(v8) = v8 + 1;
        --v14;
      }
      while (v14);
    }
    *(_DWORD *)(result + 48) = v13;
    if (*(_BYTE *)(result + 37))
    {
      *(_DWORD *)(result + 76) = 0;
      v15 = *(_QWORD *)(result + 168);
      v16 = *(_QWORD *)(result + 176) - v15;
      v17 = v16 >> 2;
      if ((int)(v16 >> 2) < 1)
      {
        v20 = 0;
      }
      else
      {
        v18 = 0;
        v19 = (v16 >> 2);
        do
        {
          *(_DWORD *)(v15 + 4 * v18) = v18;
          ++v18;
        }
        while (v19 != v18);
        v20 = *(_DWORD *)(result + 76);
      }
      *(_DWORD *)(result + 52) = v17;
      v30 = v20 + v17;
      *(_DWORD *)(result + 80) = v30;
      v31 = *(_DWORD **)(result + 216);
      v32 = *(_QWORD *)(result + 224) - (_QWORD)v31;
      v33 = v32 >> 2;
      if ((int)(v32 >> 2) >= 1)
      {
        v34 = (v32 >> 2);
        do
        {
          *v31++ = v30++;
          --v34;
        }
        while (v34);
        v30 = *(_DWORD *)(result + 80);
      }
      *(_DWORD *)(result + 56) = v33;
      v35 = v30 + v33;
      *(_DWORD *)(result + 84) = v30 + v33;
      v36 = *(_DWORD **)(result + 240);
      v37 = *(_QWORD *)(result + 248) - (_QWORD)v36;
      v38 = v37 >> 2;
      if ((int)(v37 >> 2) >= 1)
      {
        v39 = (v37 >> 2);
        do
        {
          *v36++ = v35++;
          --v39;
        }
        while (v39);
      }
      *(_DWORD *)(result + 60) = v38;
    }
    else
    {
      *(_DWORD *)(result + 84) = 0;
      v24 = *(_QWORD *)(result + 240);
      v25 = *(_QWORD *)(result + 248) - v24;
      v26 = v25 >> 2;
      if ((int)(v25 >> 2) < 1)
      {
        v29 = 0;
      }
      else
      {
        v27 = 0;
        v28 = (v25 >> 2);
        do
        {
          *(_DWORD *)(v24 + 4 * v27) = v27;
          ++v27;
        }
        while (v28 != v27);
        v29 = *(_DWORD *)(result + 84);
      }
      *(_DWORD *)(result + 60) = v26;
      v63 = v29 + v26;
      *(_DWORD *)(result + 76) = v63;
      v64 = *(_DWORD **)(result + 168);
      v65 = *(_QWORD *)(result + 176) - (_QWORD)v64;
      v66 = v65 >> 2;
      if ((int)(v65 >> 2) >= 1)
      {
        v67 = (v65 >> 2);
        do
        {
          *v64++ = v63++;
          --v67;
        }
        while (v67);
        v63 = *(_DWORD *)(result + 76);
      }
      *(_DWORD *)(result + 52) = v66;
      v68 = v63 + v66;
      *(_DWORD *)(result + 80) = v63 + v66;
      v69 = *(_DWORD **)(result + 216);
      v70 = *(_QWORD *)(result + 224) - (_QWORD)v69;
      v71 = v70 >> 2;
      if ((int)(v70 >> 2) >= 1)
      {
        v72 = (v70 >> 2);
        do
        {
          *v69++ = v68++;
          --v72;
        }
        while (v72);
      }
      *(_DWORD *)(result + 56) = v71;
    }
  }
  else
  {
    if ((int)v4 < 1)
    {
      v23 = 0;
    }
    else
    {
      v21 = 0;
      v22 = (v3 >> 2);
      do
      {
        if (*v2)
          v23 = v21 + 1;
        else
          v23 = v21;
        if (!*v2)
          v21 = -1;
        *v2++ = v21;
        v21 = v23;
        --v22;
      }
      while (v22);
    }
    *(_DWORD *)(result + 40) = v23;
    *(_DWORD *)(result + 68) = 0;
    v40 = *(int **)(result + 144);
    v41 = *(_QWORD *)(result + 152) - (_QWORD)v40;
    if ((int)(v41 >> 2) < 1)
    {
      v44 = 0;
    }
    else
    {
      v42 = 0;
      v43 = (v41 >> 2);
      do
      {
        if (*v40)
          v44 = v42 + 1;
        else
          v44 = v42;
        if (!*v40)
          v42 = -1;
        *v40++ = v42;
        v42 = v44;
        --v43;
      }
      while (v43);
    }
    *(_DWORD *)(result + 44) = v44;
    *(_DWORD *)(result + 72) = v44;
    v45 = *(int **)(result + 192);
    v46 = *(_QWORD *)(result + 200) - (_QWORD)v45;
    if ((int)(v46 >> 2) < 1)
    {
      v47 = 0;
    }
    else
    {
      v47 = 0;
      v48 = (v46 >> 2);
      do
      {
        v49 = v47 + v44;
        if (*v45)
        {
          ++v47;
          v50 = v49;
        }
        else
        {
          v50 = -1;
        }
        *v45++ = v50;
        --v48;
      }
      while (v48);
    }
    *(_DWORD *)(result + 48) = v47;
    if (*(_BYTE *)(result + 37))
    {
      *(_DWORD *)(result + 76) = 0;
      v51 = *(int **)(result + 168);
      v52 = *(_QWORD *)(result + 176) - (_QWORD)v51;
      if ((int)(v52 >> 2) < 1)
      {
        v56 = 0;
        v53 = 0;
      }
      else
      {
        v53 = 0;
        v54 = (v52 >> 2);
        do
        {
          if (*v51)
            v55 = v53;
          else
            v55 = -1;
          if (*v51)
            ++v53;
          *v51++ = v55;
          --v54;
        }
        while (v54);
        v56 = *(_DWORD *)(result + 76);
      }
      *(_DWORD *)(result + 52) = v53;
      v73 = v56 + v53;
      *(_DWORD *)(result + 80) = v73;
      v74 = *(int **)(result + 216);
      v75 = *(_QWORD *)(result + 224) - (_QWORD)v74;
      if ((int)(v75 >> 2) < 1)
      {
        v76 = 0;
      }
      else
      {
        v76 = 0;
        v77 = (v75 >> 2);
        do
        {
          v78 = v76 + v73;
          if (*v74)
          {
            ++v76;
            v79 = v78;
          }
          else
          {
            v79 = -1;
          }
          *v74++ = v79;
          --v77;
        }
        while (v77);
        v73 = *(_DWORD *)(result + 80);
      }
      *(_DWORD *)(result + 56) = v76;
      v80 = v73 + v76;
      *(_DWORD *)(result + 84) = v80;
      v81 = *(int **)(result + 240);
      v82 = *(_QWORD *)(result + 248) - (_QWORD)v81;
      if ((int)(v82 >> 2) < 1)
      {
        v83 = 0;
      }
      else
      {
        v83 = 0;
        v84 = (v82 >> 2);
        do
        {
          v85 = v83 + v80;
          if (*v81)
          {
            ++v83;
            v86 = v85;
          }
          else
          {
            v86 = -1;
          }
          *v81++ = v86;
          --v84;
        }
        while (v84);
      }
      *(_DWORD *)(result + 60) = v83;
    }
    else
    {
      *(_DWORD *)(result + 84) = 0;
      v57 = *(int **)(result + 240);
      v58 = *(_QWORD *)(result + 248) - (_QWORD)v57;
      if ((int)(v58 >> 2) < 1)
      {
        v62 = 0;
        v59 = 0;
      }
      else
      {
        v59 = 0;
        v60 = (v58 >> 2);
        do
        {
          if (*v57)
            v61 = v59;
          else
            v61 = -1;
          if (*v57)
            ++v59;
          *v57++ = v61;
          --v60;
        }
        while (v60);
        v62 = *(_DWORD *)(result + 84);
      }
      *(_DWORD *)(result + 60) = v59;
      v87 = v62 + v59;
      *(_DWORD *)(result + 76) = v87;
      v88 = *(int **)(result + 168);
      v89 = *(_QWORD *)(result + 176) - (_QWORD)v88;
      if ((int)(v89 >> 2) < 1)
      {
        v90 = 0;
      }
      else
      {
        v90 = 0;
        v91 = (v89 >> 2);
        do
        {
          v92 = v90 + v87;
          if (*v88)
          {
            ++v90;
            v93 = v92;
          }
          else
          {
            v93 = -1;
          }
          *v88++ = v93;
          --v91;
        }
        while (v91);
        v87 = *(_DWORD *)(result + 76);
      }
      *(_DWORD *)(result + 52) = v90;
      v94 = v87 + v90;
      *(_DWORD *)(result + 80) = v94;
      v95 = *(int **)(result + 216);
      v96 = *(_QWORD *)(result + 224) - (_QWORD)v95;
      if ((int)(v96 >> 2) < 1)
      {
        v97 = 0;
      }
      else
      {
        v97 = 0;
        v98 = (v96 >> 2);
        do
        {
          v99 = v97 + v94;
          if (*v95)
          {
            ++v97;
            v100 = v99;
          }
          else
          {
            v100 = -1;
          }
          *v95++ = v100;
          --v98;
        }
        while (v98);
      }
      *(_DWORD *)(result + 56) = v97;
    }
  }
  return result;
}

uint64_t sub_20BE888BC(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  v4 = **(int **)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 336);
  v6 = *(_QWORD *)(a1 + 344) - v5;
  v7 = v4 >= v6;
  v8 = v4 - v6;
  if (v8 != 0 && v7)
  {
    sub_20BE83CA8((void **)(a1 + 336), v8);
    v4 = **(int **)(a1 + 16);
  }
  else if (!v7)
  {
    *(_QWORD *)(a1 + 344) = v5 + v4;
  }
  sub_20BE81ACC(a1 + 264, v4);
  return sub_20BE88A38(a1, a2);
}

uint64_t sub_20BE88928(uint64_t a1, _BYTE *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  BOOL v7;
  unint64_t v8;

  v4 = *(int *)(*(_QWORD *)(a1 + 16) + 4);
  v5 = *(_QWORD *)(a1 + 360);
  v6 = *(_QWORD *)(a1 + 368) - v5;
  v7 = v4 >= v6;
  v8 = v4 - v6;
  if (v8 != 0 && v7)
  {
    sub_20BE83CA8((void **)(a1 + 360), v8);
    v4 = *(int *)(*(_QWORD *)(a1 + 16) + 4);
  }
  else if (!v7)
  {
    *(_QWORD *)(a1 + 368) = v5 + v4;
  }
  sub_20BE81ACC(a1 + 288, v4);
  sub_20BE88C28(a1, a2);
  return sub_20BE88E18(a1, a2);
}

uint64_t sub_20BE889A0(uint64_t a1, _BYTE *a2)
{
  int v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _BYTE *v9;

  v4 = *(unsigned __int8 *)(a1 + 36);
  v5 = (_QWORD *)(a1 + 384);
  v6 = *(int *)(*(_QWORD *)(a1 + 16) + 8);
  v7 = *(_QWORD *)(a1 + 384);
  v8 = *(_QWORD *)(a1 + 392) - v7;
  if (v4)
  {
    if (v6 > v8)
    {
      v9 = a2;
LABEL_6:
      sub_20BE82D08(v5, v6 - v8, v9);
      goto LABEL_9;
    }
  }
  else if (v6 > v8)
  {
    v9 = a2 + 4;
    goto LABEL_6;
  }
  if (v6 < v8)
    *(_QWORD *)(a1 + 392) = v7 + v6;
LABEL_9:
  sub_20BE81ACC(a1 + 312, *(int *)(*(_QWORD *)(a1 + 16) + 8));
  sub_20BE88F28(a1, a2);
  sub_20BE88FC4(a1, a2);
  return sub_20BE89054(a1, a2);
}

uint64_t sub_20BE88A38(uint64_t result, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;

  v2 = **(_DWORD **)(result + 8);
  if (*(_BYTE *)(result + 36))
  {
    if (v2 >= 1)
    {
      v3 = 0;
      v4 = *(_DWORD *)(result + 64);
      do
      {
        v5 = *(_DWORD *)(*(_QWORD *)(result + 88) + 8 * v3);
        if (v5 == 4)
        {
          *(_BYTE *)(*(_QWORD *)(result + 336) + v4) = *a2;
          v6 = v4 + 1;
          *(_BYTE *)(*(_QWORD *)(result + 336) + v6) = a2[1];
          v7 = v4 + 2;
          *(_BYTE *)(*(_QWORD *)(result + 336) + v7) = a2[2];
          v8 = v4 + 3;
          *(_BYTE *)(*(_QWORD *)(result + 336) + v8) = a2[3];
          v9 = *(_QWORD *)(result + 264);
          *(_DWORD *)(v9 + 4 * v4) = v3;
          *(_DWORD *)(v9 + 4 * v6) = v3;
          *(_DWORD *)(v9 + 4 * v7) = v3;
          *(_DWORD *)(v9 + 4 * v8) = v3;
          v4 += 4;
        }
        else if (v5 >= 1)
        {
          v10 = 0;
          v11 = v4;
          do
          {
            if (v5 <= 4)
              v12 = v10;
            else
              v12 = 0;
            *(_BYTE *)(*(_QWORD *)(result + 336) + v11) = a2[v12];
            *(_DWORD *)(*(_QWORD *)(result + 264) + 4 * v11) = v3;
            ++v10;
            ++v11;
          }
          while (v5 != v10);
          v4 += v10;
        }
        ++v3;
      }
      while (v3 < **(int **)(result + 8));
    }
  }
  else if (v2 >= 1)
  {
    v13 = 0;
    do
    {
      v14 = (unsigned int *)(*(_QWORD *)(result + 88) + 8 * v13);
      v15 = *v14;
      v16 = (int *)(*(_QWORD *)(result + 120) + 4 * (int)v14[1]);
      if ((*(_BYTE *)(*(_QWORD *)(result + 408) + v13) & 1) != 0 && (_DWORD)v15 == 4)
      {
        *(_BYTE *)(*(_QWORD *)(result + 336) + *v16) = *a2;
        *(_BYTE *)(*(_QWORD *)(result + 336) + v16[1]) = a2[1];
        *(_BYTE *)(*(_QWORD *)(result + 336) + v16[2]) = a2[2];
        *(_BYTE *)(*(_QWORD *)(result + 336) + v16[3]) = a2[3];
        v17 = *(_QWORD *)(result + 264);
        *(_DWORD *)(v17 + 4 * *v16) = v13;
        *(_DWORD *)(v17 + 4 * v16[1]) = v13;
        *(_DWORD *)(v17 + 4 * v16[2]) = v13;
        *(_DWORD *)(v17 + 4 * v16[3]) = v13;
      }
      else if ((int)v15 >= 1)
      {
        v18 = 0;
        v19 = (*(_BYTE *)(*(_QWORD *)(result + 408) + v13) & 1) == 0;
        do
        {
          v20 = v16[v18];
          if ((_DWORD)v20 != -1)
          {
            if ((int)v15 <= 4)
              v21 = v18;
            else
              v21 = 0;
            *(_BYTE *)(*(_QWORD *)(result + 336) + v20) = a2[4 * v19 + v21];
            *(_DWORD *)(*(_QWORD *)(result + 264) + 4 * v16[v18]) = v13;
          }
          ++v18;
        }
        while (v15 != v18);
      }
      ++v13;
    }
    while (v13 < **(int **)(result + 8));
  }
  return result;
}

uint64_t sub_20BE88C28(uint64_t result, _BYTE *a2)
{
  int v2;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  uint64_t v21;

  v2 = **(_DWORD **)(result + 8);
  if (*(_BYTE *)(result + 36))
  {
    if (v2 >= 1)
    {
      v3 = 0;
      v4 = *(_DWORD *)(result + 68);
      do
      {
        v5 = *(_DWORD *)(*(_QWORD *)(result + 104) + 8 * v3);
        if (v5 == 4)
        {
          *(_BYTE *)(*(_QWORD *)(result + 360) + v4) = *a2;
          v6 = v4 + 1;
          *(_BYTE *)(*(_QWORD *)(result + 360) + v6) = a2[1];
          v7 = v4 + 2;
          *(_BYTE *)(*(_QWORD *)(result + 360) + v7) = a2[2];
          v8 = v4 + 3;
          *(_BYTE *)(*(_QWORD *)(result + 360) + v8) = a2[3];
          v9 = *(_QWORD *)(result + 288);
          *(_DWORD *)(v9 + 4 * v4) = v3;
          *(_DWORD *)(v9 + 4 * v6) = v3;
          *(_DWORD *)(v9 + 4 * v7) = v3;
          *(_DWORD *)(v9 + 4 * v8) = v3;
          v4 += 4;
        }
        else if (v5 >= 1)
        {
          v10 = 0;
          v11 = v4;
          do
          {
            if (v5 <= 4)
              v12 = v10;
            else
              v12 = 0;
            *(_BYTE *)(*(_QWORD *)(result + 360) + v11) = a2[v12];
            *(_DWORD *)(*(_QWORD *)(result + 288) + 4 * v11) = v3;
            ++v10;
            ++v11;
          }
          while (v5 != v10);
          v4 += v10;
        }
        ++v3;
      }
      while (v3 < **(int **)(result + 8));
    }
  }
  else if (v2 >= 1)
  {
    v13 = 0;
    do
    {
      v14 = (unsigned int *)(*(_QWORD *)(result + 104) + 8 * v13);
      v15 = *v14;
      v16 = (int *)(*(_QWORD *)(result + 144) + 4 * (int)v14[1]);
      if ((*(_BYTE *)(*(_QWORD *)(result + 408) + v13) & 1) != 0 && (_DWORD)v15 == 4)
      {
        *(_BYTE *)(*(_QWORD *)(result + 360) + *v16) = *a2;
        *(_BYTE *)(*(_QWORD *)(result + 360) + v16[1]) = a2[1];
        *(_BYTE *)(*(_QWORD *)(result + 360) + v16[2]) = a2[2];
        *(_BYTE *)(*(_QWORD *)(result + 360) + v16[3]) = a2[3];
        v17 = *(_QWORD *)(result + 288);
        *(_DWORD *)(v17 + 4 * *v16) = v13;
        *(_DWORD *)(v17 + 4 * v16[1]) = v13;
        *(_DWORD *)(v17 + 4 * v16[2]) = v13;
        *(_DWORD *)(v17 + 4 * v16[3]) = v13;
      }
      else if ((int)v15 >= 1)
      {
        v18 = 0;
        v19 = (*(_BYTE *)(*(_QWORD *)(result + 408) + v13) & 1) == 0;
        do
        {
          v20 = v16[v18];
          if ((_DWORD)v20 != -1)
          {
            if ((int)v15 <= 4)
              v21 = v18;
            else
              v21 = 0;
            *(_BYTE *)(*(_QWORD *)(result + 360) + v20) = a2[4 * v19 + v21];
            *(_DWORD *)(*(_QWORD *)(result + 288) + 4 * v16[v18]) = v13;
          }
          ++v18;
        }
        while (v15 != v18);
      }
      ++v13;
    }
    while (v13 < **(int **)(result + 8));
  }
  return result;
}

uint64_t sub_20BE88E18(uint64_t result, _BYTE *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_DWORD *)(*(_QWORD *)(result + 8) + 4);
  if (*(_BYTE *)(result + 36))
  {
    if (v2 >= 1)
    {
      v3 = 0;
      v4 = *(int *)(result + 72);
      do
      {
        *(_BYTE *)(*(_QWORD *)(result + 360) + v4) = *a2;
        *(_BYTE *)(*(_QWORD *)(result + 360) + v4 + 1) = a2[1];
        v5 = (_DWORD *)(*(_QWORD *)(result + 288) + 4 * v4);
        *v5 = v3;
        v5[1] = v3++;
        v4 += 2;
      }
      while (v3 < *(_DWORD *)(*(_QWORD *)(result + 8) + 4));
    }
  }
  else if (v2 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (int *)(*(_QWORD *)(result + 192) + 8 * v6);
      if ((*(_BYTE *)(*(_QWORD *)(result + 432) + v6) & 1) != 0)
      {
        *(_BYTE *)(*(_QWORD *)(result + 360) + *v7) = *a2;
        *(_BYTE *)(*(_QWORD *)(result + 360) + v7[1]) = a2[1];
        v12 = *(_QWORD *)(result + 288);
        *(_DWORD *)(v12 + 4 * *v7) = v6;
        *(_DWORD *)(v12 + 4 * v7[1]) = v6;
      }
      else
      {
        v8 = 0;
        v9 = 1;
        do
        {
          v10 = v9;
          v11 = v7[v8];
          if ((_DWORD)v11 != -1)
          {
            *(_BYTE *)(*(_QWORD *)(result + 360) + v11) = a2[v8 + 4];
            *(_DWORD *)(*(_QWORD *)(result + 288) + 4 * v7[v8]) = v6;
          }
          v9 = 0;
          v8 = 1;
        }
        while ((v10 & 1) != 0);
      }
      ++v6;
    }
    while (v6 < *(int *)(*(_QWORD *)(result + 8) + 4));
  }
  return result;
}

uint64_t sub_20BE88F28(uint64_t result, _BYTE *a2)
{
  int *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;

  if (*(_DWORD *)(result + 52))
  {
    v2 = *(int **)(result + 8);
    v3 = *v2;
    if (*(_BYTE *)(result + 36))
    {
      if (v3 >= 1)
      {
        v4 = 0;
        v5 = *(_QWORD *)(result + 312) + 4 * *(int *)(result + 76);
        do
        {
          *(_DWORD *)(v5 + 4 * v4) = v4;
          ++v4;
        }
        while ((int)v4 < *v2);
      }
    }
    else if (v3 >= 1)
    {
      for (i = 0; i < v3; ++i)
      {
        v7 = *(int *)(*(_QWORD *)(result + 168) + 4 * i);
        if ((_DWORD)v7 != -1)
        {
          if ((*(_BYTE *)(*(_QWORD *)(result + 408) + i) & 1) != 0)
          {
            *(_BYTE *)(*(_QWORD *)(result + 384) + v7) = *a2;
            v2 = *(int **)(result + 8);
          }
          *(_DWORD *)(*(_QWORD *)(result + 312) + 4 * v7) = i;
          v3 = *v2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20BE88FC4(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(v2 + 4);
  if (*(_BYTE *)(result + 36))
  {
    if (v3 >= 1)
    {
      v4 = 0;
      v5 = *(_QWORD *)(result + 312) + 4 * *(int *)(result + 80);
      do
      {
        *(_DWORD *)(v5 + 4 * v4) = v4;
        ++v4;
      }
      while ((int)v4 < *(_DWORD *)(v2 + 4));
    }
  }
  else if (v3 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(int *)(*(_QWORD *)(result + 216) + 4 * v6);
      if ((_DWORD)v7 != -1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(result + 432) + v6) & 1) != 0)
        {
          *(_BYTE *)(*(_QWORD *)(result + 384) + v7) = *a2;
          v2 = *(_QWORD *)(result + 8);
        }
        *(_DWORD *)(*(_QWORD *)(result + 312) + 4 * v7) = v6;
      }
      ++v6;
    }
    while (v6 < *(int *)(v2 + 4));
  }
  return result;
}

uint64_t sub_20BE89054(uint64_t result, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(v2 + 8);
  if (*(_BYTE *)(result + 36))
  {
    if (v3 >= 1)
    {
      v4 = 0;
      v5 = *(_QWORD *)(result + 312) + 4 * *(int *)(result + 84);
      do
      {
        *(_DWORD *)(v5 + 4 * v4) = v4;
        ++v4;
      }
      while ((int)v4 < *(_DWORD *)(v2 + 8));
    }
  }
  else if (v3 >= 1)
  {
    v6 = 0;
    do
    {
      v7 = *(int *)(*(_QWORD *)(result + 240) + 4 * v6);
      if ((_DWORD)v7 != -1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(result + 456) + v6) & 1) != 0)
        {
          *(_BYTE *)(*(_QWORD *)(result + 384) + v7) = *a2;
          v2 = *(_QWORD *)(result + 8);
        }
        *(_DWORD *)(*(_QWORD *)(result + 312) + 4 * v7) = v6;
      }
      ++v6;
    }
    while (v6 < *(int *)(v2 + 8));
  }
  return result;
}

uint64_t sub_20BE890E4(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(int **)(a1 + 16);
  v3 = *((_QWORD *)v2 + 12);
  v4 = *v2;
  v5 = *((_QWORD *)v2 + 13) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5)
      *((_QWORD *)v2 + 13) = v3 + v4;
  }
  else
  {
    sub_20BE83CA8((void **)v2 + 12, v4 - v5);
  }
  return sub_20BE89248(a1);
}

uint64_t sub_20BE89138(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(v2 + 240);
  v4 = *(int *)(v2 + 4);
  v5 = *(_QWORD *)(v2 + 248) - v3;
  if (v4 <= v5)
  {
    if (v4 < v5)
      *(_QWORD *)(v2 + 248) = v3 + v4;
  }
  else
  {
    sub_20BE83CA8((void **)(v2 + 240), v4 - v5);
  }
  v6 = *(int *)(a1 + 44);
  if ((int)v6 >= 1)
  {
    v7 = *(int *)(a1 + 68);
    v8 = v7 + v6;
    do
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 240) + v7++) = 0;
    while (v7 < v8);
  }
  return sub_20BE89288(a1);
}

uint64_t sub_20BE891B8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  sub_20BE862E8(*(_QWORD *)(a1 + 16) + 432, *(int *)(*(_QWORD *)(a1 + 16) + 8));
  sub_20BE892C8(a1);
  sub_20BE89374((_QWORD *)a1);
  result = sub_20BE89414(a1);
  if (!*(_BYTE *)(a1 + 36))
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (*(int *)(v3 + 8) >= 1)
    {
      v4 = 0;
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 384) + v4) & 1) != 0)
        {
          *(_WORD *)(*(_QWORD *)(v3 + 432) + 2 * v4) |= 0x800u;
          v3 = *(_QWORD *)(a1 + 16);
        }
        ++v4;
      }
      while (v4 < *(int *)(v3 + 8));
    }
  }
  return result;
}

uint64_t sub_20BE89248(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(result + 40);
  if ((int)v1 >= 1)
  {
    v2 = *(int *)(result + 64);
    v3 = v1 + v2;
    do
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 96) + v2) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8)
                                                                                           + 96)
                                                                               + *(int *)(*(_QWORD *)(result + 264)
                                                                                        + 4 * v2));
      ++v2;
    }
    while (v2 < v3);
  }
  return result;
}

uint64_t sub_20BE89288(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(result + 48);
  if ((int)v1 >= 1)
  {
    v2 = *(int *)(result + 72);
    v3 = v1 + v2;
    do
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 240) + v2) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 8)
                                                                                            + 240)
                                                                                + *(int *)(*(_QWORD *)(result + 288)
                                                                                         + 4 * v2));
      ++v2;
    }
    while (v2 < v3);
  }
  return result;
}

uint64_t sub_20BE892C8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(result + 52);
  if ((_DWORD)v1)
  {
    v2 = *(int *)(result + 76);
    v3 = v2 + v1;
    if (*(int *)(*(_QWORD *)(result + 8) + 12) <= 0)
    {
      if ((int)v1 >= 1)
      {
        do
        {
          *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 432) + 2 * v2) = 128;
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 8) + 24)
                         + 8 * *(int *)(*(_QWORD *)(result + 312) + 4 * v2)) != *(_DWORD *)(result + 32))
            *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 432) + 2 * v2) |= 2u;
          ++v2;
        }
        while (v2 < v3);
      }
    }
    else if ((int)v1 >= 1)
    {
      do
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 432) + 2 * v2++) = 128;
      while (v2 < (int)v3);
    }
  }
  return result;
}

_QWORD *sub_20BE89374(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  __int16 v8;
  __int16 v9;

  v1 = result[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *(int *)(result[27] + 4 * v2);
      if ((_DWORD)v4 != -1)
      {
        v5 = *(unsigned __int8 *)(*(_QWORD *)(v1 + 240) + v2);
        v6 = v3 & 0x183A | v5 & 1 | (4 * ((v5 >> 1) & 1)) & 0xFFFFFFBF | (((v5 >> 3) & 1) << 6);
        v7 = v5 >> 2;
        v8 = (~v5 & 5) == 0;
        if ((v5 & 0xC) != 0)
          v9 = 512;
        else
          v9 = 128;
        v3 = v6 & 0x9FFF | (v8 << 15) | ((v7 & 1) << 13) & 0xBFFF | ((v7 & 1) << 14) | v9;
        *(_WORD *)(*(_QWORD *)(result[2] + 432) + 2 * v4) = v3;
        v1 = result[1];
      }
      ++v2;
    }
    while (v2 < *(int *)(v1 + 4));
  }
  return result;
}

uint64_t sub_20BE89414(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(int *)(result + 60);
  if ((int)v1 >= 1)
  {
    v2 = *(int *)(result + 84);
    v3 = v1 + v2;
    do
    {
      *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 432) + 2 * v2) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 8)
                                                                                                + 432)
                                                                                    + 2
                                                                                    * *(int *)(*(_QWORD *)(result + 312)
                                                                                             + 4 * v2));
      *(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 432) + 2 * v2++) &= ~0x1000u;
    }
    while (v2 < v3);
  }
  return result;
}

void sub_20BE89468(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float *v20;
  int *v21;
  uint64_t v22;
  float *v23;
  uint64_t v24;
  float v25;
  int v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  void *__p;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v26 = *(_DWORD *)(a1 + 24);
  v2 = v26;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 + 216);
  v3 += 216;
  *(_QWORD *)(v3 + 8) = v4;
  sub_20BE89A68(v3, *(int *)(v3 - 212), &OpenSubdiv::__aapl__::Sdc::Crease::SHARPNESS_SMOOTH);
  v27 = (float *)&v29;
  v28 = 0x1000000000;
  __p = 0;
  if ((v2 & 0xFF0000) != 0 && (v5 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 20), v5 >= 0x11))
  {
    operator delete(0);
    v6 = operator new(4 * v5);
    __p = v6;
    v27 = (float *)v6;
    HIDWORD(v28) = v5;
  }
  else
  {
    v6 = 0;
  }
  v7 = *(int *)(a1 + 48);
  if ((int)v7 >= 1)
  {
    v8 = *(int *)(a1 + 72);
    v9 = v7 + v8;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 16);
      v11 = *(_QWORD *)(v10 + 216);
      v12 = *(_QWORD *)(v10 + 240);
      if ((*(_BYTE *)(v12 + v8) & 4) != 0)
      {
        *(_DWORD *)(v11 + 4 * v8) = 1092616192;
      }
      else if ((*(_BYTE *)(v12 + v8) & 8) != 0)
      {
        v13 = *(int *)(*(_QWORD *)(a1 + 288) + 4 * v8);
        v14 = *(_QWORD **)(a1 + 8);
        v15 = v14[27];
        v16 = *(float *)(v15 + 4 * v13);
        if (BYTE2(v26))
        {
          v17 = *(int *)(v14[15]
                       + 8 * v13
                       + 4 * (((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(a1 + 360) + v8) >> 3) & 3));
          v18 = v14[42];
          v19 = *(_DWORD *)(v18 + 8 * (_DWORD)v17);
          v20 = v27;
          if (v19 >= 1)
          {
            v21 = (int *)(v14[45] + 4 * *(int *)(v18 + 8 * v17 + 4));
            v22 = *(unsigned int *)(v18 + 8 * (_DWORD)v17);
            v23 = v27;
            do
            {
              v24 = *v21++;
              *v23++ = *(float *)(v15 + 4 * v24);
              --v22;
            }
            while (v22);
          }
          v25 = sub_20BE815C0((uint64_t)&v26, v19, v20, v16);
          goto LABEL_14;
        }
        if (v16 <= 0.0)
          goto LABEL_21;
        v25 = 10.0;
        if (v16 >= 10.0)
        {
LABEL_14:
          *(float *)(v11 + 4 * v8) = v25;
          if (v25 > 0.0)
            goto LABEL_23;
        }
        else
        {
          if (v16 > 1.0)
          {
            v25 = v16 + -1.0;
            goto LABEL_14;
          }
LABEL_21:
          *(_DWORD *)(v11 + 4 * v8) = 0;
        }
        *(_BYTE *)(v12 + v8) &= ~8u;
      }
LABEL_23:
      if (++v8 >= v9)
      {
        v6 = __p;
        break;
      }
    }
  }
  operator delete(v6);
}

void sub_20BE8968C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p)
{
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20BE896A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  float v10;
  float v11;

  v2 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 416) = *(_QWORD *)(v2 + 408);
  sub_20BE89A68(v2 + 408, *(int *)(v2 + 8), &OpenSubdiv::__aapl__::Sdc::Crease::SHARPNESS_SMOOTH);
  v3 = *(int *)(a1 + 60);
  if ((int)v3 >= 1)
  {
    v4 = *(int *)(a1 + 84);
    v5 = v3 + v4;
    do
    {
      v6 = *(_QWORD *)(a1 + 16);
      v7 = *(_QWORD *)(v6 + 408);
      v8 = *(_QWORD *)(v6 + 432);
      v9 = *(_WORD *)(v8 + 2 * v4);
      if ((v9 & 0x10) != 0)
      {
        *(_DWORD *)(v7 + 4 * v4) = 1092616192;
      }
      else if ((v9 & 0x20) != 0)
      {
        v10 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 408) + 4 * *(int *)(*(_QWORD *)(a1 + 312) + 4 * v4));
        if (v10 <= 0.0)
          goto LABEL_12;
        v11 = 10.0;
        if (v10 >= 10.0)
        {
LABEL_9:
          *(float *)(v7 + 4 * v4) = v11;
          if (v11 > 0.0)
            goto LABEL_14;
        }
        else
        {
          if (v10 > 1.0)
          {
            v11 = v10 + -1.0;
            goto LABEL_9;
          }
LABEL_12:
          *(_DWORD *)(v7 + 4 * v4) = 0;
        }
        *(_WORD *)(v8 + 2 * v4) &= ~0x20u;
      }
LABEL_14:
      ++v4;
    }
    while (v4 < v5);
  }
}

uint64_t sub_20BE89790(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  int *v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int32x2_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int32 v39;
  __int16 v40;
  __int32 v41;
  int v42;

  v1 = result;
  v42 = *(_DWORD *)(result + 24);
  v2 = *(int *)(result + 56);
  if ((int)v2 >= 1)
  {
    v3 = *(int *)(result + 80);
    v4 = v2 + v3;
    do
    {
      v5 = *(_QWORD *)(v1 + 16);
      v6 = *(_QWORD *)(v5 + 432);
      v7 = *(_WORD *)(v6 + 2 * v3);
      if ((v7 & 0x40) != 0)
      {
        v8 = (int *)(*(_QWORD *)(v1 + 192) + 8 * *(int *)(*(_QWORD *)(v1 + 312) + 4 * v3));
        if ((*(_BYTE *)(*(_QWORD *)(v1 + 384) + v3) & 1) != 0)
        {
          v11 = *v8;
          if ((_DWORD)v11 != -1 && (*(_BYTE *)(*(_QWORD *)(v5 + 240) + v11) & 8) != 0)
          {
            v13 = v7 & 0xF83F | 0x40;
            v14 = 512;
          }
          else
          {
            v12 = v8[1];
            if ((_DWORD)v12 == -1)
            {
              v13 = v7 & 0xF83F;
              v14 = 128;
            }
            else
            {
              v13 = v7 & 0xF83F;
              if ((*(_BYTE *)(*(_QWORD *)(v5 + 240) + v12) & 8) != 0)
              {
                v13 |= 0x40u;
                v14 = 512;
              }
              else
              {
                v14 = 128;
              }
            }
          }
          v10 = v14 | v13;
        }
        else
        {
          v9 = ((*(unsigned __int8 *)(*(_QWORD *)(v5 + 240) + v8[1]) >> 3) & 1)
             + ((*(unsigned __int8 *)(*(_QWORD *)(v5 + 240) + *v8) >> 3) & 1);
          *(_WORD *)(v6 + 2 * v3) = v7 & 0xFFBF | ((v9 != 0) << 6);
          result = sub_20BE81480(0.0, (uint64_t)&v42, v9);
          v10 = *(_WORD *)(v6 + 2 * v3) & 0xF87F | ((result & 0xF) << 7);
        }
        *(_WORD *)(v6 + 2 * v3) = v10;
      }
      ++v3;
    }
    while (v3 < v4);
  }
  v15 = *(int *)(v1 + 60);
  if ((int)v15 >= 1)
  {
    v16 = *(int *)(v1 + 84);
    v17 = v15 + v16;
    do
    {
      v18 = *(int *)(*(_QWORD *)(v1 + 312) + 4 * v16);
      v19 = *(_QWORD **)(v1 + 8);
      v20 = *(unsigned __int16 *)(v19[54] + 2 * v18);
      if ((v20 & 0x60) == 0)
        goto LABEL_34;
      v21 = *(_QWORD **)(v1 + 16);
      v22 = v21[54];
      v23 = *(_WORD *)(v22 + 2 * v16);
      if ((v20 & 0x40) == 0 && (((v23 & 0x20) == 0) & (v20 >> 5)) == 0)
        goto LABEL_34;
      v24 = v21[45];
      if ((int)((unint64_t)(v21[46] - v24) >> 2) < 1)
      {
        v31 = v19[42];
        v32 = *(unsigned int *)(v31 + 8 * (_DWORD)v18);
        if ((int)v32 >= 1)
        {
          v33 = *(int *)(v31 + 8 * v18 + 4);
          v34 = (int *)(v19[45] + 4 * v33);
          v35 = (unsigned __int16 *)(v19[48] + 2 * v33);
          v28 = 0;
          v36 = v21[30];
          do
          {
            v37 = *v34++;
            v38 = *(_QWORD *)(v1 + 192) + 8 * v37;
            LODWORD(v37) = *v35++;
            v28 = vadd_s32(v28, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(*(unsigned __int8 *)(v36 + *(int *)(v38 + 4 * v37))), (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xFFFFFFFDFFFFFFFELL) & 0xFFFFFFC1FFFFFFC1));
            --v32;
          }
          while (v32);
          goto LABEL_30;
        }
      }
      else
      {
        v25 = v21[42];
        v26 = *(unsigned int *)(v25 + 8 * (int)v16);
        if ((int)v26 >= 1)
        {
          v27 = (int *)(v24 + 4 * *(int *)(v25 + 8 * (_DWORD)v16 + 4));
          v28 = 0;
          v29 = v21[30];
          do
          {
            v30 = *v27++;
            v28 = vadd_s32(v28, (int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(*(unsigned __int8 *)(v29 + v30)), (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xFFFFFFFDFFFFFFFELL) & 0xFFFFFFC1FFFFFFC1));
            --v26;
          }
          while (v26);
LABEL_30:
          v39 = v28.i32[1];
          v40 = (v28.i32[1] > 0) << 6;
          v41 = v28.i32[0];
          goto LABEL_32;
        }
      }
      v39 = 0;
      v41 = 0;
      v40 = 0;
LABEL_32:
      *(_WORD *)(v22 + 2 * v16) = v40 | v23 & 0xFFBF;
      if ((v23 & 0x30) == 0)
      {
        result = sub_20BE81480(0.0, (uint64_t)&v42, v39 + v41);
        *(_WORD *)(v22 + 2 * v16) = ((result & 0xF) << 7) | *(_WORD *)(v22 + 2 * v16) & 0xF87F;
      }
LABEL_34:
      ++v16;
    }
    while (v16 < v17);
  }
  return result;
}

void sub_20BE89A68(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_20BE89BD0((void **)a1, a2 - v3, a3);
  }
}

_QWORD *sub_20BE89A98(_QWORD *result)
{
  uint64_t v1;
  uint64_t i;
  _DWORD *v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int *v13;
  int *v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;

  v1 = result[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    for (i = 0; i < *(int *)(v1 + 4); ++i)
    {
      v3 = (_DWORD *)(result[24] + 8 * i);
      v4 = result[54];
      if ((*(_BYTE *)(v4 + i) & 1) != 0)
      {
        v7 = 2;
        *v3 = 2;
      }
      else
      {
        v5 = (int *)(*(_QWORD *)(v1 + 120) + 8 * i);
        v6 = result[57];
        if ((*(_BYTE *)(v6 + *v5) & 1) != 0)
        {
          *v3 = 1;
          *(_DWORD *)(result[27] + 4 * i) = 1;
        }
        if ((*(_BYTE *)(v6 + v5[1]) & 1) == 0)
          goto LABEL_10;
        v7 = 1;
      }
      v3[1] = v7;
      *(_DWORD *)(result[27] + 4 * i) = v7;
LABEL_10:
      v8 = *(_QWORD *)(v1 + 168);
      v9 = *(_QWORD *)(v1 + 144);
      v10 = *(int *)(v9 + ((8 * i) | 4));
      v11 = *(unsigned int *)(v9 + 8 * i);
      if ((_DWORD)v11 == 2)
      {
        v12 = *(_BYTE *)(v4 + i) & 0xE1 | (2
                                         * ((*(_BYTE *)(result[51] + *(int *)(v8 + 4 * v10 + 4)) ^ *(_BYTE *)(result[51] + *(int *)(v8 + 4 * v10))) & 1));
      }
      else if ((int)v11 > 1)
      {
        v13 = (int *)(v8 + 4 * v10);
        v15 = *v13;
        v14 = v13 + 1;
        v16 = *(unsigned __int8 *)(result[51] + v15);
        v17 = *(_BYTE *)(v4 + i) & 0xE1;
        *(_BYTE *)(v4 + i) = v17;
        v18 = v11 - 1;
        while (1)
        {
          v19 = *v14++;
          if (((*(unsigned __int8 *)(result[51] + v19) ^ v16) & 1) != 0)
            break;
          if (!--v18)
            goto LABEL_20;
        }
        v12 = v17 | 2;
      }
      else
      {
        v12 = *(_BYTE *)(v4 + i) & 0xE1;
      }
      *(_BYTE *)(v4 + i) = v12;
LABEL_20:
      v1 = result[1];
    }
  }
  return result;
}

void sub_20BE89BD0(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      sub_20BDDF694();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)sub_20BDE1330(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

double sub_20BE89CE0(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  _QWORD *v4;
  double result;

  sub_20BE87C08(a1, a2, a3, a4);
  *v4 = off_24C51A418;
  v4[65] = 0;
  v4[63] = 0;
  v4[64] = 0;
  *(_QWORD *)&result = 0x300000001;
  *(_QWORD *)((char *)v4 + 28) = 0x300000001;
  return result;
}

_QWORD *sub_20BE89D14(_QWORD *a1)
{
  void *v2;

  *a1 = off_24C51A418;
  v2 = (void *)a1[63];
  if (v2)
  {
    a1[64] = v2;
    operator delete(v2);
  }
  return sub_20BE87CA0(a1);
}

void sub_20BE89D54(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20BE89D14(a1);
  operator delete(v1);
}

void sub_20BE89D68(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;

  v2 = *(int **)(a1 + 8);
  v4 = *((_QWORD *)v2 + 9);
  v3 = *((_QWORD *)v2 + 10);
  v6 = *((_QWORD *)v2 + 15);
  v5 = *((_QWORD *)v2 + 16);
  v8 = *v2;
  v7 = v2[1];
  v9 = v2[2];
  v19 = 4;
  sub_20BE86740(a1 + 504, 2 * v8, &v19);
  v10 = *(int **)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 504);
  if (*v10 >= 1)
  {
    v12 = 0;
    v13 = 0;
    v14 = (_DWORD *)(v11 + 4);
    do
    {
      *v14 = v12;
      v14 += 2;
      ++v13;
      v12 += 4;
    }
    while (v13 < *v10);
  }
  v15 = (unint64_t)(*(_QWORD *)(a1 + 512) - v11) >> 2;
  *(_QWORD *)(a1 + 88) = v11;
  *(_DWORD *)(a1 + 96) = v15;
  v16 = *((_QWORD *)v10 + 3);
  v17 = (unint64_t)(*((_QWORD *)v10 + 4) - v16) >> 2;
  *(_QWORD *)(a1 + 104) = v16;
  *(_DWORD *)(a1 + 112) = v17;
  v18 = 0;
  sub_20BE86740(a1 + 120, 4 * v8, &v18);
  sub_20BE86740(a1 + 144, (int)((v3 - v4) >> 2), &v18);
  sub_20BE86740(a1 + 192, (int)((v5 - v6) >> 2), &v18);
  sub_20BE86740(a1 + 168, 0, &v18);
  sub_20BE86740(a1 + 216, v7, &v18);
  sub_20BE86740(a1 + 240, v9, &v18);
}

_QWORD *sub_20BE89E9C(_QWORD *a1)
{
  int *v2;

  v2 = (int *)a1[2];
  if (*((_QWORD *)v2 + 4) == *((_QWORD *)v2 + 3))
  {
    sub_20BE89EE4((uint64_t)a1);
    v2 = (int *)a1[2];
  }
  sub_20BE81ACC((uint64_t)(v2 + 12), 3 * *v2);
  return sub_20BE89F5C(a1);
}

void sub_20BE89EE4(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  int v8;

  v2 = *(int **)(a1 + 16);
  v3 = *v2;
  v8 = 3;
  sub_20BE86740((uint64_t)(v2 + 6), 2 * v3, &v8);
  v4 = *(int **)(a1 + 16);
  if (*v4 >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = (_DWORD *)(*((_QWORD *)v4 + 3) + 4);
    do
    {
      *v7 = v5;
      v7 += 2;
      ++v6;
      v5 += 3;
    }
    while (v6 < *v4);
  }
}

_QWORD *sub_20BE89F5C(_QWORD *result)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int v13;
  int v14;
  _DWORD *v15;
  int v16;
  _DWORD *v17;
  int v18;
  _DWORD *v19;
  int v20;
  _DWORD *v21;
  int v22;
  _DWORD *v23;

  v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    v2 = 0;
    v3 = *((_QWORD *)v1 + 6);
    v4 = *((_QWORD *)v1 + 9);
    v5 = result[15];
    v6 = result[27];
    v7 = (int *)(result[11] + 4);
    v8 = (int *)(*((_QWORD *)v1 + 3) + 4);
    do
    {
      v9 = *v8;
      v8 += 2;
      v10 = (int *)(v3 + 4 * v9);
      v11 = (int *)(v4 + 4 * v9);
      v12 = *v7;
      v7 += 2;
      v13 = *(_DWORD *)(v6 + 4 * *v11);
      v14 = *(_DWORD *)(v6 + 4 * v11[1]);
      v15 = (_DWORD *)(v5 + 4 * v12);
      v16 = *(_DWORD *)(v6 + 4 * v11[2]);
      if (*v15 != -1)
      {
        v17 = (_DWORD *)(*(_QWORD *)(result[2] + 48)
                       + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * *v15) | 1)));
        *v17 = *(_DWORD *)(result[30] + 4 * *v10);
        v17[1] = v13;
        v17[2] = v16;
      }
      v18 = v15[1];
      if (v18 != -1)
      {
        v19 = (_DWORD *)(*(_QWORD *)(result[2] + 48)
                       + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v18) | 1)));
        *v19 = v13;
        v19[1] = *(_DWORD *)(result[30] + 4 * v10[1]);
        v19[2] = v14;
      }
      v20 = v15[2];
      if (v20 != -1)
      {
        v21 = (_DWORD *)(*(_QWORD *)(result[2] + 48)
                       + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v20) | 1)));
        *v21 = v16;
        v21[1] = v14;
        v21[2] = *(_DWORD *)(result[30] + 4 * v10[2]);
      }
      v22 = v15[3];
      if (v22 != -1)
      {
        v23 = (_DWORD *)(*(_QWORD *)(result[2] + 48)
                       + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v22) | 1)));
        *v23 = v14;
        v23[1] = v16;
        v23[2] = v13;
      }
      ++v2;
    }
    while (v2 < *v1);
  }
  return result;
}

_QWORD *sub_20BE8A0A4(_QWORD *a1)
{
  int *v2;

  v2 = (int *)a1[2];
  if (*((_QWORD *)v2 + 4) == *((_QWORD *)v2 + 3))
  {
    sub_20BE89EE4((uint64_t)a1);
    v2 = (int *)a1[2];
  }
  sub_20BE81ACC((uint64_t)(v2 + 18), 3 * *v2);
  return sub_20BE8A0EC(a1);
}

_QWORD *sub_20BE8A0EC(_QWORD *result)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _BOOL4 v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  _DWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;

  v40 = *MEMORY[0x24BDAC8D0];
  v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    v2 = 0;
    v3 = *((_QWORD *)v1 + 3);
    v4 = *((_QWORD *)v1 + 6);
    v5 = *((_QWORD *)v1 + 9);
    v6 = result[11];
    v7 = result[15];
    v8 = result[13];
    v9 = result[18];
    v10 = result[24];
    v11 = *((_QWORD *)v1 + 15);
    do
    {
      v12 = (8 * v2) | 4;
      v13 = *(int *)(v3 + v12);
      v14 = (_DWORD *)(v4 + 4 * v13);
      v15 = (int *)(v5 + 4 * v13);
      v16 = *(int *)(v6 + v12);
      v17 = *(int *)(v8 + v12);
      for (i = 4; i != 28; i += 8)
      {
        v20 = *v15++;
        v19 = v20;
        v21 = (_DWORD *)(v11 + 8 * v20);
        v22 = *v21 != v21[1] && *v14 != *v21;
        v23 = v10 + 8 * v19;
        v24 = *(_DWORD *)(v23 + 4 * v22);
        v25 = (int *)((char *)&v36 + i);
        LODWORD(v23) = *(_DWORD *)(v23 + 4 * !v22);
        *(v25 - 1) = v24;
        *v25 = v23;
        ++v14;
      }
      v26 = (_DWORD *)(v7 + 4 * v16);
      v27 = (_DWORD *)(v9 + 4 * v17);
      if (*v26 != -1)
      {
        v28 = (_DWORD *)(*(_QWORD *)(result[2] + 72)
                       + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * *v26) | 1)));
        v29 = v39;
        *v28 = v36;
        v28[1] = *v27;
        v28[2] = v29;
      }
      v30 = v26[1];
      if (v30 != -1)
      {
        v31 = *(_QWORD *)(result[2] + 72) + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v30) | 1));
        *(_QWORD *)v31 = v37;
        *(_DWORD *)(v31 + 8) = v27[1];
      }
      v32 = v26[2];
      if (v32 != -1)
      {
        v33 = *(_QWORD *)(result[2] + 72) + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v32) | 1));
        *(_DWORD *)v33 = v27[2];
        *(_QWORD *)(v33 + 4) = v38;
      }
      v34 = v26[3];
      if (v34 != -1)
      {
        v35 = (_DWORD *)(*(_QWORD *)(result[2] + 72)
                       + 4 * *(int *)(*(_QWORD *)(result[2] + 24) + 4 * ((2 * v34) | 1)));
        *v35 = v27[2];
        v35[1] = *v27;
        v35[2] = v27[1];
      }
      ++v2;
    }
    while (v2 < *v1);
  }
  return result;
}

_QWORD *sub_20BE8A2EC(_QWORD *a1)
{
  sub_20BE81ACC(a1[2] + 120, 2 * *(int *)(a1[2] + 4));
  sub_20BE8A328(a1);
  return sub_20BE8A3E4(a1);
}

_QWORD *sub_20BE8A328(_QWORD *result)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int *v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  _DWORD *v20;

  v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    v2 = 0;
    v3 = *((_QWORD *)v1 + 9);
    v4 = result[18];
    v5 = result[27];
    v6 = (int *)(result[13] + 4);
    v7 = (int *)(*((_QWORD *)v1 + 3) + 4);
    do
    {
      v8 = *v7;
      v7 += 2;
      v9 = (int *)(v3 + 4 * v8);
      v10 = *v6;
      v6 += 2;
      v11 = *(_DWORD *)(v5 + 4 * *v9);
      v12 = *(_DWORD *)(v5 + 4 * v9[1]);
      v13 = (int *)(v4 + 4 * v10);
      v14 = *(_DWORD *)(v5 + 4 * v9[2]);
      v15 = *v13;
      if ((_DWORD)v15 != -1)
      {
        v16 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v15);
        *v16 = v11;
        v16[1] = v14;
      }
      v17 = v13[1];
      if ((_DWORD)v17 != -1)
      {
        v18 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v17);
        *v18 = v12;
        v18[1] = v11;
      }
      v19 = v13[2];
      if ((_DWORD)v19 != -1)
      {
        v20 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v19);
        *v20 = v14;
        v20[1] = v12;
      }
      ++v2;
    }
    while (v2 < *v1);
  }
  return result;
}

_QWORD *sub_20BE8A3E4(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;

  v1 = result[1];
  if (*(int *)(v1 + 4) >= 1)
  {
    v2 = 0;
    v3 = (int *)(result[24] + 4);
    v4 = (int *)(*(_QWORD *)(v1 + 120) + 4);
    do
    {
      v5 = *(v3 - 1);
      if ((_DWORD)v5 != -1)
      {
        v6 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v5);
        *v6 = *(_DWORD *)(result[27] + 4 * v2);
        v6[1] = *(_DWORD *)(result[30] + 4 * *(v4 - 1));
      }
      v7 = *v3;
      if ((_DWORD)v7 != -1)
      {
        v8 = (_DWORD *)(*(_QWORD *)(result[2] + 120) + 8 * v7);
        *v8 = *(_DWORD *)(result[27] + 4 * v2);
        v8[1] = *(_DWORD *)(result[30] + 4 * *v4);
      }
      ++v2;
      v3 += 2;
      v4 += 2;
    }
    while (v2 < *(int *)(v1 + 4));
  }
  return result;
}

void sub_20BE8A48C(_QWORD *a1)
{
  int v2;
  uint64_t v3;
  int *v4;
  unint64_t v5;

  v2 = 2 * (((*(_QWORD *)(a1[1] + 176) - *(_QWORD *)(a1[1] + 168)) >> 2) + ((a1[19] - a1[18]) >> 2));
  sub_20BE81ACC(a1[2] + 144, 2 * *(int *)(a1[2] + 4));
  sub_20BE81ACC(a1[2] + 168, v2);
  sub_20BE81AFC(a1[2] + 192, v2);
  *(_DWORD *)(a1[2] + 16) = *(_DWORD *)(a1[1] + 16);
  sub_20BE8A554(a1);
  sub_20BE8A688(a1);
  v3 = a1[2];
  v4 = (int *)(*(_QWORD *)(v3 + 144) + 4 * (2 * *(_DWORD *)(v3 + 4) - 2));
  v5 = v4[1] + (uint64_t)*v4;
  sub_20BE81ACC(v3 + 168, v5);
  sub_20BE81AFC(a1[2] + 192, v5);
}

_QWORD *sub_20BE8A554(_QWORD *result)
{
  int *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  _WORD *v25;
  uint64_t v26;

  v1 = (int *)result[1];
  v2 = *v1;
  if (*v1 >= 1)
  {
    v3 = 0;
    v4 = result[11];
    v5 = result[15];
    v6 = result[13];
    v7 = result[18];
    do
    {
      v8 = *(unsigned int *)(v6 + 8 * v3);
      if ((int)v8 >= 1)
      {
        v9 = (8 * v3) | 4;
        v10 = (_DWORD *)(v5 + 4 * *(int *)(v4 + v9));
        v11 = (int *)(v7 + 4 * *(int *)(v6 + v9));
        v12 = v10[3];
        v13 = 1;
        do
        {
          v15 = *v11++;
          v14 = v15;
          if ((_DWORD)v15 != -1)
          {
            v16 = result[2];
            v17 = *(_QWORD *)(v16 + 144);
            v18 = (_DWORD *)(v17 + 8 * v14);
            *v18 = 2;
            if ((_DWORD)v14)
              v19 = *(v18 - 1) + *(v18 - 2);
            else
              v19 = 0;
            v20 = v13 % 3;
            v21 = 2 * v14;
            v18[1] = v19;
            v22 = *(_DWORD *)(v16 + 16);
            if (v22 <= 2)
              v22 = 2;
            *(_DWORD *)(v16 + 16) = v22;
            v23 = *(int *)(v17 + 4 * (v21 | 1));
            v24 = (_DWORD *)(*(_QWORD *)(v16 + 168) + 4 * v23);
            v25 = (_WORD *)(*(_QWORD *)(v16 + 192) + 2 * v23);
            if (*v10 == -1)
            {
              v26 = 0;
            }
            else
            {
              *v24 = *v10;
              *v25 = v20;
              v26 = 1;
            }
            if (v12 != -1)
            {
              v24[v26] = v12;
              v25[v26] = v20;
              LODWORD(v26) = v26 + 1;
            }
            *v18 = v26;
          }
          ++v13;
          ++v10;
          --v8;
        }
        while (v8);
        v2 = *v1;
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_20BE8A688(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BOOL4 v35;
  uint64_t v36;
  unsigned int v37;
  unsigned int v38;
  int v39;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[24];
    do
    {
      v5 = (_DWORD *)(v4 + 8 * v3);
      if (*v5 != -1 || v5[1] != -1)
      {
        v6 = 0;
        v7 = *(_QWORD *)(v1 + 144);
        v8 = *(int *)(v7 + ((8 * v3) | 4));
        v9 = *(unsigned int *)(v7 + 8 * v3);
        v10 = *(_QWORD *)(v1 + 168) + 4 * v8;
        v11 = *(_QWORD *)(v1 + 192) + 2 * v8;
        v12 = (_DWORD *)(*(_QWORD *)(v1 + 120) + 8 * v3);
        v13 = 1;
        do
        {
          v14 = v13;
          v15 = (int)v5[v6];
          if ((_DWORD)v15 != -1)
          {
            v16 = result[2];
            v17 = *(_QWORD *)(v16 + 144);
            v18 = (_DWORD *)(v17 + 8 * v15);
            *v18 = v9;
            if ((_DWORD)v15)
              v19 = *(v18 - 1) + *(v18 - 2);
            else
              v19 = 0;
            v18[1] = v19;
            v20 = *(_DWORD *)(v16 + 16);
            if (v20 <= (int)v9)
              v20 = v9;
            *(_DWORD *)(v16 + 16) = v20;
            if ((int)v9 < 1)
            {
              v21 = 0;
            }
            else
            {
              v21 = 0;
              v22 = *(int *)(v17 + 4 * (int)((2 * v15) | 1));
              v23 = *(_QWORD *)(v16 + 168) + 4 * v22;
              v24 = *(_QWORD *)(v16 + 192) + 2 * v22;
              v25 = *(_QWORD *)(v1 + 24);
              v26 = result[11];
              v27 = result[15];
              v28 = v9;
              v29 = (int *)v10;
              v30 = (unsigned __int16 *)v11;
              do
              {
                v32 = *v29++;
                v31 = v32;
                LODWORD(v32) = *v30++;
                v33 = v32;
                v34 = (2 * v31) | 1;
                v35 = v6;
                if (*v12 != v12[1])
                  v35 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * *(int *)(v25 + 4 * v34) + 4 * v33) != v12[v6];
                v36 = v27 + 4 * *(int *)(v26 + 4 * v34);
                v37 = v35 + v33;
                if (v37 == *(_DWORD *)(v25 + 8 * (_DWORD)v31))
                  v38 = 0;
                else
                  v38 = v37;
                v39 = *(_DWORD *)(v36 + 4 * v38);
                if (v39 != -1)
                {
                  *(_DWORD *)(v23 + 4 * v21) = v39;
                  *(_WORD *)(v24 + 2 * v21++) = v33;
                }
                --v28;
              }
              while (v28);
            }
            *v18 = v21;
          }
          v13 = 0;
          v6 = 1;
        }
        while ((v14 & 1) != 0);
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_20BE8A848(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int *v4;
  unint64_t v5;

  v2 = ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 296) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 288)) >> 2)
     + 3 * ((*(_QWORD *)(*(_QWORD *)(a1 + 8) + 176) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 168)) >> 2);
  sub_20BE81ACC(*(_QWORD *)(a1 + 16) + 264, 2 * *(int *)(*(_QWORD *)(a1 + 16) + 8));
  sub_20BE81ACC(*(_QWORD *)(a1 + 16) + 288, v2);
  sub_20BE81AFC(*(_QWORD *)(a1 + 16) + 312, v2);
  if (*(_DWORD *)(a1 + 84))
  {
    sub_20BE8AA04((_QWORD *)a1);
    sub_20BE8A920((_QWORD *)a1);
  }
  else
  {
    sub_20BE8A920((_QWORD *)a1);
    sub_20BE8AA04((_QWORD *)a1);
  }
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (int *)(*(_QWORD *)(v3 + 264) + 4 * (2 * *(_DWORD *)(v3 + 8) - 2));
  v5 = v4[1] + (uint64_t)*v4;
  sub_20BE81ACC(v3 + 288, v5);
  sub_20BE81AFC(*(_QWORD *)(a1 + 16) + 312, v5);
}

_QWORD *sub_20BE8A920(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  int v24;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[30];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 288);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 264) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 312);
        v11 = (_QWORD *)result[2];
        v12 = (_DWORD *)(v11[33] + 8 * v5);
        *v12 = v8;
        if ((_DWORD)v5)
          v13 = *(v12 - 1) + *(v12 - 2);
        else
          v13 = 0;
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          v15 = (int *)(v6 + 4 * v9);
          v16 = (unsigned __int16 *)(v10 + 2 * v9);
          v17 = v11[36] + 4 * v13;
          v18 = v11[39] + 2 * v13;
          v19 = result[11];
          v20 = result[15];
          do
          {
            v22 = *v15++;
            v21 = v22;
            LODWORD(v22) = *v16++;
            v23 = v22;
            v24 = *(_DWORD *)(v20 + 4 * *(int *)(v19 + 8 * v21 + 4) + 4 * v22);
            if (v24 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v24;
              *(_WORD *)(v18 + 2 * v14++) = v23;
            }
            --v8;
          }
          while (v8);
        }
        *v12 = v14;
        v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_20BE8AA04(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  int v14;
  int *v15;
  unsigned __int16 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[27];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 168);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 144) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 192);
        v11 = (_QWORD *)result[2];
        v12 = (_DWORD *)(v11[33] + 8 * v5);
        *v12 = 2 * v8;
        if ((_DWORD)v5)
          v13 = *(v12 - 1) + *(v12 - 2);
        else
          v13 = 0;
        v12[1] = v13;
        if ((int)v8 < 1)
        {
          v14 = 0;
        }
        else
        {
          v14 = 0;
          v15 = (int *)(v6 + 4 * v9);
          v16 = (unsigned __int16 *)(v10 + 2 * v9);
          v17 = v11[36] + 4 * v13;
          v18 = v11[39] + 2 * v13;
          v19 = result[11];
          v20 = result[15];
          do
          {
            v22 = *v15++;
            v21 = v22;
            LODWORD(v22) = *v16++;
            v23 = v22;
            v24 = v22 + 1 - 3 * ((1431655766 * (unint64_t)(v22 + 1)) >> 32);
            v25 = v20 + 4 * *(int *)(v19 + 8 * v21 + 4);
            v26 = *(_DWORD *)(v25 + 4 * v24);
            if (v26 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v26;
              *(_WORD *)(v18 + 2 * v14++) = v23;
            }
            v27 = *(_DWORD *)(v25 + 12);
            if (v27 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v27;
              *(_WORD *)(v18 + 2 * v14++) = v23
                                            + 2
                                            - 3 * ((1431655766 * (unint64_t)(v23 + 2)) >> 32);
            }
            v28 = *(_DWORD *)(v25 + 4 * v23);
            if (v28 != -1)
            {
              *(_DWORD *)(v17 + 4 * v14) = v28;
              *(_WORD *)(v18 + 2 * v14++) = v24;
            }
            --v8;
          }
          while (v8);
        }
        *v12 = v14;
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

void sub_20BE8AB54(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = ((*(_QWORD *)(v2 + 368) - *(_QWORD *)(v2 + 360)) >> 2)
     + 2 * (*(_DWORD *)(v2 + 4) + ((*(_QWORD *)(v2 + 176) - *(_QWORD *)(v2 + 168)) >> 2));
  sub_20BE81ACC(*(_QWORD *)(a1 + 16) + 336, 2 * *(int *)(*(_QWORD *)(a1 + 16) + 8));
  sub_20BE81ACC(*(_QWORD *)(a1 + 16) + 360, v3);
  sub_20BE81AFC(*(_QWORD *)(a1 + 16) + 384, v3);
  if (*(_DWORD *)(a1 + 84))
  {
    sub_20BE8AD28((_QWORD *)a1);
    sub_20BE8AC30((_QWORD *)a1);
  }
  else
  {
    sub_20BE8AC30((_QWORD *)a1);
    sub_20BE8AD28((_QWORD *)a1);
  }
  v4 = *(_QWORD *)(a1 + 16);
  v5 = (int *)(*(_QWORD *)(v4 + 336) + 4 * (2 * *(_DWORD *)(v4 + 8) - 2));
  v6 = v5[1] + (uint64_t)*v5;
  sub_20BE81ACC(v4 + 360, v6);
  sub_20BE81AFC(*(_QWORD *)(a1 + 16) + 384, v6);
}

_QWORD *sub_20BE8AC30(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  int v16;
  int *v17;
  unsigned __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 8);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[30];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 360);
        v7 = (unsigned int *)(*(_QWORD *)(v1 + 336) + 8 * v3);
        v8 = *v7;
        v9 = (int)v7[1];
        v10 = *(_QWORD *)(v1 + 384);
        v11 = result[2];
        v12 = *(_QWORD *)(v11 + 336);
        v13 = (_DWORD *)(v12 + 8 * v5);
        *v13 = v8;
        if ((_DWORD)v5)
          v14 = *(v13 - 1) + *(v13 - 2);
        else
          v14 = 0;
        v13[1] = v14;
        v15 = *(_DWORD *)(v11 + 20);
        if (v15 <= (int)v8)
          v15 = v8;
        *(_DWORD *)(v11 + 20) = v15;
        if ((int)v8 < 1)
        {
          v16 = 0;
        }
        else
        {
          v16 = 0;
          v17 = (int *)(v6 + 4 * v9);
          v18 = (unsigned __int16 *)(v10 + 2 * v9);
          v19 = *(int *)(v12 + 4 * (int)((2 * v5) | 1));
          v20 = *(_QWORD *)(v11 + 360) + 4 * v19;
          v21 = *(_QWORD *)(v11 + 384) + 2 * v19;
          v22 = result[24];
          do
          {
            v23 = *v17++;
            v24 = v22 + 8 * v23;
            LODWORD(v23) = *v18++;
            v25 = *(_DWORD *)(v24 + 4 * v23);
            if (v25 != -1)
            {
              *(_DWORD *)(v20 + 4 * v16) = v25;
              *(_WORD *)(v21 + 2 * v16++) = 1;
            }
            --v8;
          }
          while (v8);
        }
        *v13 = v16;
        v2 = *(_DWORD *)(v1 + 8);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_20BE8AD28(_QWORD *result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;

  v1 = result[1];
  v2 = *(_DWORD *)(v1 + 4);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = result[27];
    do
    {
      v5 = *(int *)(v4 + 4 * v3);
      if ((_DWORD)v5 != -1)
      {
        v6 = *(_QWORD *)(v1 + 168);
        v7 = *(unsigned int *)(*(_QWORD *)(v1 + 144) + 8 * v3);
        v8 = *(int *)(*(_QWORD *)(v1 + 144) + 8 * v3 + 4);
        v9 = *(_QWORD *)(v1 + 192);
        v10 = *(_QWORD *)(v1 + 120);
        v11 = result[24];
        v12 = result[2];
        v13 = v7 + 2;
        v14 = *(_QWORD *)(v12 + 336);
        v15 = (_DWORD *)(v14 + 8 * v5);
        *v15 = v7 + 2;
        if ((_DWORD)v5)
          v16 = *(v15 - 1) + *(v15 - 2);
        else
          v16 = 0;
        v15[1] = v16;
        if (*(_DWORD *)(v12 + 20) > v13)
          v13 = *(_DWORD *)(v12 + 20);
        *(_DWORD *)(v12 + 20) = v13;
        if ((int)v7 < 1)
        {
          v19 = 0;
        }
        else
        {
          v17 = 0;
          v18 = 0;
          v19 = 0;
          v20 = v6 + 4 * v8;
          v21 = v9 + 2 * v8;
          v22 = (_DWORD *)(v10 + 8 * v3);
          v23 = v11 + 8 * v3;
          v24 = *(int *)(v14 + 4 * (int)((2 * v5) | 1));
          v25 = *(_QWORD *)(v12 + 360) + 4 * v24;
          v26 = *(_QWORD *)(v12 + 384) + 2 * v24;
          v27 = result[13];
          v28 = result[18];
          v29 = -1;
          do
          {
            v30 = *(unsigned __int16 *)(v21 + 2 * v17);
            v31 = (2 * *(int *)(v20 + 4 * v17)) | 1;
            v32 = v28 + 4 * *(int *)(v27 + 4 * v31);
            if (v17)
            {
              v33 = *(_DWORD *)(v32
                              + 4
                              * (v30
                                             + 1
                                             - 3 * ((1431655766 * (unint64_t)(v30 + 1)) >> 32)));
              v34 = *(_DWORD *)(v32 + 4 * v30);
            }
            else
            {
              if (*v22 != v22[1])
                v18 = *(_DWORD *)(*(_QWORD *)(v1 + 48) + 4 * *(int *)(*(_QWORD *)(v1 + 24) + 4 * v31) + 4 * v30) != *v22;
              v35 = *(_DWORD *)(v23 + 4 * !v18);
              v29 = *(_DWORD *)(v23 + 4 * v18);
              v33 = *(_DWORD *)(v32
                              + 4
                              * (v30
                                             + 1
                                             - 3 * ((1431655766 * (unint64_t)(v30 + 1)) >> 32)));
              v34 = *(_DWORD *)(v32 + 4 * v30);
              if (v35 != -1)
              {
                *(_DWORD *)(v25 + 4 * v19) = v35;
                *(_WORD *)(v26 + 2 * v19++) = 0;
              }
            }
            if (v33 != -1)
            {
              *(_DWORD *)(v25 + 4 * v19) = v33;
              *(_WORD *)(v26 + 2 * v19++) = 1;
            }
            if (v34 != -1)
            {
              *(_DWORD *)(v25 + 4 * v19) = v34;
              *(_WORD *)(v26 + 2 * v19++) = 0;
            }
            if (!v17 && v29 != -1)
            {
              *(_DWORD *)(v25 + 4 * v19) = v29;
              *(_WORD *)(v26 + 2 * v19++) = 0;
            }
            ++v17;
          }
          while (v7 != v17);
        }
        *v15 = v19;
        v2 = *(_DWORD *)(v1 + 4);
      }
      ++v3;
    }
    while (v3 < v2);
  }
  return result;
}

_QWORD *sub_20BE8AF30(_QWORD *result)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;

  v1 = (int *)result[1];
  if (*v1 >= 1)
  {
    v2 = 0;
    v3 = 4;
    *(_QWORD *)&v4 = 0x200000002;
    *((_QWORD *)&v4 + 1) = 0x200000002;
    do
    {
      v5 = result[15] + 4 * *(int *)(result[11] + v3);
      v6 = result[18] + 4 * *(int *)(result[13] + v3);
      v7 = result[51];
      if ((*(_BYTE *)(v7 + v2) & 1) != 0)
      {
        *(_OWORD *)v5 = v4;
        *(_DWORD *)v6 = 2;
        *(_QWORD *)(v6 + 4) = 0x200000002;
        *(_BYTE *)(v7 + v2) &= 0xE1u;
      }
      else
      {
        v8 = *(int *)(*((_QWORD *)v1 + 3) + v3);
        v9 = (int *)(*((_QWORD *)v1 + 6) + 4 * v8);
        if ((*(_BYTE *)(result[57] + v9[1]) & 1)
           + (*(_BYTE *)(result[57] + *v9) & 1)
           + (*(_BYTE *)(result[57] + v9[2]) & 1))
        {
          v10 = *(_BYTE *)(result[54] + *(int *)(*((_QWORD *)v1 + 9) + 4 * v8 + 4)) & 0xE | (*(unsigned __int8 *)(result[54] + *(int *)(*((_QWORD *)v1 + 9) + 4 * v8)) >> 1) & 0xF | (2 * *(unsigned __int8 *)(result[54] + *(int *)(*((_QWORD *)v1 + 9) + 4 * v8 + 8))) & 0xC;
          *(_BYTE *)(v7 + v2) = *(_BYTE *)(v7 + v2) & 0xE1 | (2 * v10);
          if (v10)
          {
            *(_DWORD *)(v5 + 12) = 1;
            *(_DWORD *)v6 = 1;
            *(_QWORD *)(v6 + 4) = 0x100000001;
          }
          v11 = result[57];
          if ((*(_BYTE *)(v11 + *v9) & 1) != 0)
          {
            *(_DWORD *)v5 = 1;
            *(_DWORD *)v6 = 1;
          }
          if ((*(_BYTE *)(v11 + v9[1]) & 1) != 0)
          {
            *(_DWORD *)(v5 + 4) = 1;
            *(_DWORD *)(v6 + 4) = 1;
          }
          if ((*(_BYTE *)(v11 + v9[2]) & 1) != 0)
          {
            *(_DWORD *)(v5 + 8) = 1;
            *(_DWORD *)(v6 + 8) = 1;
          }
        }
      }
      ++v2;
      v1 = (int *)result[1];
      v3 += 8;
    }
    while (v2 < *v1);
  }
  return result;
}

uint64_t sub_20BE8B094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  const char *v10;
  char __str[10240];
  uint64_t v13;

  v9 = MEMORY[0x24BDAC7A8]();
  v13 = *MEMORY[0x24BDAC8D0];
  vsnprintf(__str, 0x2800uLL, v10, &a9);
  if (off_254784EB8)
    return off_254784EB8(v9, __str);
  else
    return printf("%s: %s\n", off_24C51A480[v9], __str);
}

uint64_t sub_20BE8B15C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const char *v9;
  char __str[10240];
  uint64_t v12;

  v9 = (const char *)MEMORY[0x24BDAC7A8]();
  v12 = *MEMORY[0x24BDAC8D0];
  vsnprintf(__str, 0x2800uLL, v9, &a9);
  if (off_254784EC0)
    return off_254784EC0(__str);
  else
    return fprintf((FILE *)*MEMORY[0x24BDAC8E8], "Warning: %s\n", __str);
}

_QWORD *sub_20BE8B214(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDE3738(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20BE8B270(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BE8B28C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDE3738(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20BE8B2E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BE8B304(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDE3738(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20BE8B360(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20BE8B37C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_20BDDF694();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_20BDE3738(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

double OpenSubdiv::__aapl__::Far::TopologyDescriptor::TopologyDescriptor(OpenSubdiv::__aapl__::Far::TopologyDescriptor *this)
{
  double result;

  *((_QWORD *)this + 12) = 0;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((_QWORD *)this + 12) = 0;
  result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::resizeComponentTopology(uint64_t a1, int *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  __int16 v19;

  v4 = *a2;
  v5 = **(_QWORD **)(a1 + 48);
  *(_DWORD *)(v5 + 8) = v4;
  sub_20BE81ACC(v5 + 264, 2 * v4);
  sub_20BE81ACC(v5 + 336, 2 * v4);
  sub_20BE862B8(v5 + 408, v4);
  sub_20BE862E8(v5 + 432, v4);
  bzero(*(void **)(v5 + 432), 2 * *(int *)(v5 + 8));
  v6 = a2[1];
  v7 = **(int ***)(a1 + 48);
  *v7 = v6;
  sub_20BE81ACC((uint64_t)(v7 + 6), 2 * v6);
  v8 = (char *)*((_QWORD *)v7 + 12);
  v9 = *((_QWORD *)v7 + 13) - (_QWORD)v8;
  if (v6 <= v9)
  {
    if (v6 < v9)
      *((_QWORD *)v7 + 13) = &v8[v6];
  }
  else
  {
    sub_20BE83CA8((void **)v7 + 12, v6 - v9);
    v8 = (char *)*((_QWORD *)v7 + 12);
  }
  bzero(v8, *v7);
  if (a2[1] >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = *(uint64_t **)(a1 + 48);
    do
    {
      v13 = *(_DWORD *)(*((_QWORD *)a2 + 1) + 4 * v11);
      v14 = *v12;
      v15 = *(_QWORD *)(*v12 + 24);
      *(_DWORD *)(v15 + v10) = v13;
      if (v10)
        v16 = *(_DWORD *)(v15 + v10 - 4) + *(_DWORD *)(v15 + v10 - 8);
      else
        v16 = 0;
      *(_DWORD *)(v15 + v10 + 4) = v16;
      v17 = *(_DWORD *)(v14 + 20);
      if (v17 <= v13)
        v17 = v13;
      *(_DWORD *)(v14 + 20) = v17;
      v18 = *(unsigned __int16 *)(a1 + 8);
      if ((v18 & 4) != 0)
        v19 = 4;
      else
        v19 = 4 * (v13 != ((v18 >> 3) & 7));
      *(_WORD *)(a1 + 8) = v19 | v18 & 0xFFFB;
      ++v11;
      v10 += 8;
    }
    while (v11 < a2[1]);
  }
  return 1;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignComponentTopology(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  _DWORD *v11;
  unint64_t v12;
  int *v13;
  int v14;
  int *v15;
  int v16;

  if (*(int *)(a2 + 4) >= 1)
  {
    v2 = 0;
    v3 = 0;
    v4 = **(_QWORD **)(a1 + 48);
    v5 = *(_QWORD *)(v4 + 24);
    v6 = *(_QWORD *)(v4 + 48);
    v7 = *(unsigned __int8 *)(a2 + 88);
    v8 = *(_QWORD *)(a2 + 16);
    do
    {
      v9 = (unsigned int *)(v5 + 8 * v2);
      v10 = *v9;
      v11 = (_DWORD *)(v6 + 4 * (int)v9[1]);
      if (v7)
      {
        *v11 = *(_DWORD *)(v8 + 4 * v3++);
        if ((int)v10 >= 2)
        {
          v12 = v10 + 1;
          v13 = (int *)(v8 + 4 * v3);
          do
          {
            v14 = *v13++;
            v11[(v12-- - 2)] = v14;
            ++v3;
          }
          while (v12 > 2);
        }
      }
      else if ((int)v10 >= 1)
      {
        v15 = (int *)(v8 + 4 * v3);
        v3 += v10;
        do
        {
          v16 = *v15++;
          *v11++ = v16;
          --v10;
        }
        while (v10);
      }
      ++v2;
    }
    while (v2 < *(int *)(a2 + 4));
  }
  return 1;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignComponentTags(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  char v30;
  char __str[1024];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (*(int *)(a2 + 24) >= 1)
  {
    v4 = *(_QWORD *)(a2 + 32);
    if (v4)
    {
      if (*(_QWORD *)(a2 + 40))
      {
        v5 = 0;
        v6 = (int *)(v4 + 4);
        do
        {
          v7 = sub_20BE84A3C(**(_QWORD ***)(a1 + 48), *(v6 - 1), *v6);
          if (v7 == -1)
          {
            snprintf(__str, 0x400uLL, "Edge %d specified to be sharp does not exist (%d, %d)", v5, *(v6 - 1), *v6);
            sub_20BE8B15C((uint64_t)__str, v8, v9, v10, v11, v12, v13, v14, v29);
          }
          else
          {
            *(_DWORD *)(*(_QWORD *)(**(_QWORD **)(a1 + 48) + 216) + 4 * v7) = *(_DWORD *)(*(_QWORD *)(a2 + 40)
                                                                                            + 4 * v5);
          }
          ++v5;
          v6 += 2;
        }
        while (v5 < *(int *)(a2 + 24));
      }
    }
  }
  if (*(int *)(a2 + 48) >= 1 && *(_QWORD *)(a2 + 56) && *(_QWORD *)(a2 + 64))
  {
    v15 = 0;
    do
    {
      v16 = *(unsigned int *)(*(_QWORD *)(a2 + 56) + 4 * v15);
      if ((v16 & 0x80000000) != 0 || (v17 = **(_QWORD **)(a1 + 48), (int)v16 >= *(_DWORD *)(v17 + 8)))
      {
        snprintf(__str, 0x400uLL, "Vertex %d specified to be sharp does not exist", *(_DWORD *)(*(_QWORD *)(a2 + 56) + 4 * v15));
        sub_20BE8B15C((uint64_t)__str, v18, v19, v20, v21, v22, v23, v24, v30);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v17 + 408) + 4 * v16) = *(_DWORD *)(*(_QWORD *)(a2 + 64) + 4 * v15);
      }
      ++v15;
    }
    while (v15 < *(int *)(a2 + 48));
  }
  if (*(int *)(a2 + 72) >= 1)
  {
    v25 = 0;
    do
    {
      v26 = *(int *)(*(_QWORD *)(a2 + 80) + 4 * v25);
      v27 = *(_QWORD *)(**(_QWORD **)(a1 + 48) + 96);
      *(_BYTE *)(v27 + v26) |= 1u;
      *(_WORD *)(a1 + 8) |= 2u;
      ++v25;
    }
    while (v25 < *(int *)(a2 + 72));
  }
  return 1;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::reportInvalidTopology(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  return sub_20BE8B15C(a2, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactory<OpenSubdiv::__aapl__::Far::TopologyDescriptor>::assignFaceVaryingTopology(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  _DWORD *v10;
  int v11;
  unint64_t v12;
  int *v13;
  int v14;
  uint64_t v15;
  int *v16;
  int v17;

  if (*(int *)(a2 + 92) >= 1)
  {
    v4 = 0;
    v5 = (_DWORD *)(a1 + 4);
    do
    {
      v6 = *(_QWORD *)(a2 + 96) + 16 * v4;
      v7 = *(_QWORD *)(v6 + 8);
      sub_20BE86134(**(_QWORD ***)(a1 + 48), *(_DWORD *)v6, v5);
      if (*(int *)(a2 + 4) >= 1)
      {
        v8 = 0;
        v9 = 0;
        do
        {
          v10 = (_DWORD *)sub_20BE86278(**(_QWORD **)(a1 + 48), v9, v4);
          if (*(_BYTE *)(a2 + 88))
          {
            *v10 = *(_DWORD *)(v7 + 4 * v8++);
            if (v11 >= 2)
            {
              v12 = v11 + 1;
              v13 = (int *)(v7 + 4 * v8);
              do
              {
                v14 = *v13++;
                v10[(v12-- - 2)] = v14;
                ++v8;
              }
              while (v12 > 2);
            }
          }
          else if (v11 >= 1)
          {
            v15 = v11;
            v16 = (int *)(v7 + 4 * v8);
            v8 += v11;
            do
            {
              v17 = *v16++;
              *v10++ = v17;
              --v15;
            }
            while (v15);
          }
          ++v9;
        }
        while (v9 < *(_DWORD *)(a2 + 4));
      }
      ++v4;
    }
    while (v4 < *(int *)(a2 + 92));
  }
  return 1;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefiner::TopologyRefiner(uint64_t a1, unsigned int a2, int a3)
{
  char **v4;
  _OWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a1 + 8) & 0xFFF8 | 1;
  *(_WORD *)(a1 + 8) = (8 * (sub_20BE81890(a2) & 7)) | *(_WORD *)(a1 + 8) & 0xFC07;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 12) &= 0xC0u;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a1 + 16) & 0xF000 | 0xF0;
  *(_QWORD *)(a1 + 28) = 0;
  *(_QWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  v4 = (char **)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  sub_20BE8BBC4((void **)(a1 + 48), 0xAuLL);
  v5 = operator new(0x1E0uLL);
  sub_20BE83DA0(v5);
  v6 = *(_QWORD *)(a1 + 64);
  v7 = *(_QWORD **)(a1 + 56);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - *v4) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_20BDDF694();
    v10 = v6 - (_QWORD)*v4;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_20BDDF6A8(a1 + 64, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = v5;
    v8 = v14 + 8;
    v17 = *(char **)(a1 + 48);
    v16 = *(char **)(a1 + 56);
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = *v4;
    }
    *(_QWORD *)(a1 + 48) = v14;
    *(_QWORD *)(a1 + 56) = v8;
    *(_QWORD *)(a1 + 64) = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = v5;
    v8 = v7 + 1;
  }
  *(_QWORD *)(a1 + 56) = v8;
  sub_20BE8BC58((void **)(a1 + 96), 0xAuLL);
  sub_20BE8BD34((_QWORD *)a1);
  return a1;
}

{
  return OpenSubdiv::__aapl__::Far::TopologyRefiner::TopologyRefiner(a1, a2, a3);
}

void sub_20BE8BB74(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v4;
  void *v6;
  void *v7;
  void *v8;

  operator delete(v4);
  v6 = *v3;
  if (*v3)
  {
    v1[13] = v6;
    operator delete(v6);
  }
  v7 = (void *)v1[9];
  if (v7)
  {
    v1[10] = v7;
    operator delete(v7);
  }
  v8 = *v2;
  if (*v2)
  {
    v1[7] = v8;
    operator delete(v8);
  }
  _Unwind_Resume(a1);
}

void sub_20BE8BBC4(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_20BDDF694();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_20BDDF6A8(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_20BE8BC58(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20BDDF694();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 24;
    v6 = (char *)sub_20BDE4FF4(v3, a2);
    v7 = &v6[24 * v5];
    v9 = &v6[24 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v10 - 1);
        *(_OWORD *)(v12 - 24) = v13;
        v12 -= 24;
        v10 -= 24;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_20BE8BD34(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  sub_20BE8C144((uint64_t)(a1 + 12), (uint64_t)(a1[7] - a1[6]) >> 3);
  v2 = (_QWORD *)a1[12];
  v2[1] = 0;
  v3 = (_QWORD *)a1[6];
  *v2 = *v3;
  v2[2] = 0;
  v4 = (_QWORD *)a1[9];
  v5 = a1[10] - (_QWORD)v4;
  v6 = v5 >> 3;
  if ((v5 >> 3))
  {
    v2[2] = *v4;
    if ((int)v6 >= 2)
    {
      v7 = (v5 >> 3) - 1;
      v8 = v2 + 5;
      v9 = v3 + 1;
      v10 = v4 + 1;
      do
      {
        *(v8 - 1) = *(v10 - 1);
        v11 = *v9++;
        *(v8 - 2) = v11;
        v12 = *v10++;
        *v8 = v12;
        v8 += 3;
        --v7;
      }
      while (v7);
    }
    v13 = &v2[3 * (int)v6];
    v13[1] = *(_QWORD *)((char *)v4 + ((uint64_t)((v5 << 29) - 0x100000000) >> 29));
    *v13 = *(_QWORD *)((char *)v3 + ((uint64_t)(v5 << 29) >> 29));
    v13[2] = 0;
  }
}

int32x2_t sub_20BE8BE04(uint64_t a1)
{
  int **v1;
  int *v2;
  int32x2_t v3;
  int v4;
  uint64_t v5;
  int v6;
  int32x2_t result;

  v1 = *(int ***)(a1 + 48);
  if (*(int ***)(a1 + 56) == v1)
  {
    v4 = 0;
    LODWORD(v5) = 0;
    v6 = 0;
    v3 = 0;
  }
  else
  {
    v2 = *v1;
    v3 = *(int32x2_t *)(*v1 + 1);
    v4 = **v1;
    v5 = (*((_QWORD *)v2 + 7) - *((_QWORD *)v2 + 6)) >> 2;
    v6 = v2[5];
  }
  result = vrev64_s32(v3);
  *(int32x2_t *)(a1 + 20) = result;
  *(_DWORD *)(a1 + 28) = v4;
  *(_DWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 36) = v6;
  return result;
}

void OpenSubdiv::__aapl__::Far::TopologyRefiner::~TopologyRefiner(OpenSubdiv::__aapl__::Far::TopologyRefiner *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;

  v3 = *((_QWORD *)this + 6);
  v2 = *((_QWORD *)this + 7);
  if ((int)((unint64_t)(v2 - v3) >> 3) >= 1)
  {
    v4 = 0;
    do
    {
      if (v4 || *((_BYTE *)this + 40))
      {
        v5 = *(_QWORD **)(v3 + 8 * v4);
        if (v5)
        {
          v6 = sub_20BE83F7C(v5);
          operator delete(v6);
          v3 = *((_QWORD *)this + 6);
          v2 = *((_QWORD *)this + 7);
        }
      }
      ++v4;
    }
    while (v4 < (int)((unint64_t)(v2 - v3) >> 3));
  }
  v7 = (_QWORD *)*((_QWORD *)this + 9);
  v8 = *((_QWORD *)this + 10);
  if ((int)((unint64_t)(v8 - (_QWORD)v7) >> 3) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = v7[v9];
      if (v10)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v10 + 8))(v7[v9]);
        v7 = (_QWORD *)*((_QWORD *)this + 9);
        v8 = *((_QWORD *)this + 10);
      }
      ++v9;
    }
    while (v9 < (int)((unint64_t)(v8 - (_QWORD)v7) >> 3));
  }
  v11 = (void *)*((_QWORD *)this + 12);
  if (v11)
  {
    *((_QWORD *)this + 13) = v11;
    operator delete(v11);
    v7 = (_QWORD *)*((_QWORD *)this + 9);
  }
  if (v7)
  {
    *((_QWORD *)this + 10) = v7;
    operator delete(v7);
  }
  v12 = (void *)*((_QWORD *)this + 6);
  if (v12)
  {
    *((_QWORD *)this + 7) = v12;
    operator delete(v12);
  }
}

uint64_t sub_20BE8BF40(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;

  *(int32x2_t *)(result + 20) = vadd_s32(*(int32x2_t *)(result + 20), vrev64_s32(*(int32x2_t *)(a2 + 4)));
  v2 = *(_DWORD *)(result + 32) + ((*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2);
  *(_DWORD *)(result + 28) += *(_DWORD *)a2;
  *(_DWORD *)(result + 32) = v2;
  v3 = *(_DWORD *)(a2 + 20);
  if (*(_DWORD *)(result + 36) > v3)
    v3 = *(_DWORD *)(result + 36);
  *(_DWORD *)(result + 36) = v3;
  return result;
}

uint64_t sub_20BE8BF8C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[8];
  v4 = (uint64_t)(a1 + 8);
  v5 = v6;
  v7 = *(uint64_t **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 16);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20BDDF694();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)sub_20BDDF6A8(v4, v14);
    else
      v15 = 0;
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = a2;
    v8 = v16 + 1;
    v19 = (char *)a1[6];
    v18 = (char *)a1[7];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v16 = v20;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    a1[6] = v16;
    a1[7] = v8;
    a1[8] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[7] = v8;
  return sub_20BE8BF40((uint64_t)a1, a2);
}

void sub_20BE8C06C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[11];
  v4 = (uint64_t)(a1 + 11);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 16);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_20BDDF694();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)sub_20BDDF6A8(v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)a1[9];
    v18 = (char *)a1[10];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    a1[9] = v16;
    a1[10] = v8;
    a1[11] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[10] = v8;
}

void sub_20BE8C144(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_20BE8C338((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void OpenSubdiv::__aapl__::Far::TopologyRefiner::RefineUniform(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const char *v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  _OWORD *v19;
  void *v20;
  int v21;
  char v22;

  if (!*(_DWORD *)(**(_QWORD **)(a1 + 48) + 8))
  {
    v10 = "Failure in TopologyRefiner::RefineUniform() -- base level is uninitialized.";
    goto LABEL_5;
  }
  if (*(_QWORD *)(a1 + 80) != *(_QWORD *)(a1 + 72))
  {
    v10 = "Failure in TopologyRefiner::RefineUniform() -- previous refinements already applied.";
LABEL_5:
    sub_20BE8B094(4, (uint64_t)v10, a3, a4, a5, a6, a7, a8, a9);
    return;
  }
  *(_BYTE *)(a1 + 12) = a2;
  v22 = a2;
  v12 = a2 & 0xF;
  *(_WORD *)(a1 + 8) = ((a2 & 0xF) << 6) | *(_WORD *)(a1 + 8) & 0xFC3F | 1;
  v21 = sub_20BE81864(*(_DWORD *)a1);
  if (v12)
  {
    v13 = 0;
    v14 = (a2 >> 3) & 2;
    v15 = 8 * (a2 & 0xF);
    do
    {
      if (v15 - 8 == v13 && (v22 & 0x20) == 0)
        v17 = 4;
      else
        v17 = 0;
      v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + v13);
      v19 = operator new(0x1E0uLL);
      sub_20BE83DA0(v19);
      if (v21)
      {
        v20 = operator new(0x210uLL);
        sub_20BE89CE0((uint64_t)v20, v18, (uint64_t)v19, (_DWORD *)(a1 + 4));
      }
      else
      {
        v20 = operator new(0x1F8uLL);
        sub_20BE86618((uint64_t)v20, v18, (uint64_t)v19, (_DWORD *)(a1 + 4));
      }
      sub_20BE87E1C((uint64_t)v20, v17 | v14);
      sub_20BE8BF8C((_QWORD *)a1, (uint64_t)v19);
      sub_20BE8C06C((_QWORD *)a1, (uint64_t)v20);
      v13 += 8;
    }
    while (v15 != v13);
  }
  sub_20BE8BD34((_QWORD *)a1);
}

void sub_20BE8C314(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20BE8C338(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;

  v4 = (uint64_t)(a1 + 2);
  v5 = a1[2];
  v6 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3) >= a2)
  {
    a1[1] = &v6[24 * (24 * a2 / 0x18)];
  }
  else
  {
    v7 = *a1;
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v7) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      v12 = (char *)sub_20BDE4FF4(v4, v11);
      v7 = *a1;
      v6 = a1[1];
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[24 * v8];
    v14 = &v12[24 * v11];
    v15 = &v13[24 * (24 * a2 / 0x18)];
    if (v6 != v7)
    {
      do
      {
        v16 = *(_OWORD *)(v6 - 24);
        *((_QWORD *)v13 - 1) = *((_QWORD *)v6 - 1);
        *(_OWORD *)(v13 - 24) = v16;
        v13 -= 24;
        v6 -= 24;
      }
      while (v6 != v7);
      v7 = *a1;
    }
    *a1 = v13;
    a1[1] = v15;
    a1[2] = v14;
    if (v7)
      operator delete(v7);
  }
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologySizing(OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *this, OpenSubdiv::__aapl__::Far::TopologyRefiner *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  int *v9;
  int v10;
  int v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v18;
  int *v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  char __str[1024];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t *)*((_QWORD *)this + 6);
  v9 = (int *)*v8;
  v10 = *(_DWORD *)(*v8 + 8);
  if (!v10)
  {
    v12 = "Failure in TopologyRefinerFactory<>::Create() -- mesh contains no vertices.";
    goto LABEL_12;
  }
  v11 = *v9;
  if (!*v9)
  {
    v12 = "Failure in TopologyRefinerFactory<>::Create() -- meshes without faces not yet supported.";
    goto LABEL_12;
  }
  if (v9[5] >= 0x10000)
  {
    snprintf(__str, 0x400uLL, "Failure in TopologyRefinerFactory<>::Create() -- face with %d vertices > %d max.", v9[5], 0xFFFF);
    v12 = __str;
LABEL_12:
    sub_20BE8B094(4, (uint64_t)v12, a3, a4, a5, a6, a7, a8, v25);
    return 0;
  }
  v13 = (int *)(*((_QWORD *)v9 + 3) + 4 * (2 * v11 - 2));
  v15 = *v13;
  v14 = v13[1];
  v16 = v14 + v15;
  if (!((_DWORD)v14 + (_DWORD)v15))
  {
    v12 = "Failure in TopologyRefinerFactory<>::Create() -- mesh contains no face-vertices.";
    goto LABEL_12;
  }
  if (*(_DWORD *)this == 2 && (_DWORD)v16 != 3 * v11)
  {
    v12 = "Failure in TopologyRefinerFactory<>::Create() -- non-triangular faces not supported by Loop scheme.";
    goto LABEL_12;
  }
  sub_20BE81ACC((uint64_t)(v9 + 12), v16);
  v18 = v9[1];
  if (v18 >= 1)
  {
    sub_20BE81ACC((uint64_t)(v9 + 18), (int)((uint64_t)(*((_QWORD *)v9 + 7) - *((_QWORD *)v9 + 6)) >> 2));
    sub_20BE81ACC((uint64_t)(v9 + 30), 2 * v9[1]);
    v19 = (int *)(*((_QWORD *)v9 + 18) + 4 * (2 * v18 - 2));
    v20 = v19[1] + (uint64_t)*v19;
    sub_20BE81ACC((uint64_t)(v9 + 42), v20);
    sub_20BE81AFC((uint64_t)(v9 + 48), v20);
    v21 = 2 * v10 - 2;
    v22 = (8 * ((unint64_t)v21 >> 1)) | 4;
    v23 = *(int *)(*((_QWORD *)v9 + 33) + v22) + (uint64_t)*(int *)(*((_QWORD *)v9 + 33) + 4 * v21);
    sub_20BE81ACC((uint64_t)(v9 + 72), v23);
    sub_20BE81AFC((uint64_t)(v9 + 78), v23);
    v24 = *(int *)(*((_QWORD *)v9 + 42) + v22) + (uint64_t)*(int *)(*((_QWORD *)v9 + 42) + 4 * v21);
    sub_20BE81ACC((uint64_t)(v9 + 90), v24);
    sub_20BE81AFC((uint64_t)(v9 + 96), v24);
  }
  return 1;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTopologyAssignment(uint64_t a1, int a2, void (*a3)(uint64_t, char *, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int **v12;
  unsigned int *v13;
  int v14;
  char *v15;
  char v17;
  char __str[1024];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v12 = *(int ***)(a1 + 48);
  v13 = (unsigned int *)*v12;
  v14 = (*v12)[1];
  if (v14)
  {
    if (!v13[5])
    {
      v15 = "Failure in TopologyRefinerFactory<>::Create() -- maximum valence not assigned.";
      goto LABEL_12;
    }
  }
  else if (!sub_20BE84AD0(*v12))
  {
    snprintf(__str, 0x400uLL, "Failure in TopologyRefinerFactory<>::Create() -- vertex with valence %d > %d max.", v13[5], 0xFFFF);
    v15 = __str;
    goto LABEL_12;
  }
  if (!a2 || sub_20BE83F80(v13, a3, a4))
  {
    sub_20BE8BE04(a1);
    return 1;
  }
  if (v14)
    v15 = "Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected as fully specified.";
  else
    v15 = "Failure in TopologyRefinerFactory<>::Create() -- invalid topology detected from partial specification.";
LABEL_12:
  sub_20BE8B094(4, (uint64_t)v15, (uint64_t)a3, a4, a5, a6, a7, a8, v17);
  return 0;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareComponentTagsAndSharpness(OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *this, OpenSubdiv::__aapl__::Far::TopologyRefiner *a2)
{
  uint64_t v3;
  int v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  char v24;
  char v25;
  int v26;
  float v28;
  char v29;
  char v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int *v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  BOOL v52;
  __int16 v53;
  float v54;
  __int16 v56;
  char v57;
  __int16 v58;
  int v59;
  __int16 v60;
  __int16 v61;
  __int16 v62;
  __int16 v63;
  __int16 v64;
  __int16 v65;
  float v66;
  int v67;
  __int16 v68;
  __int16 v69;
  unsigned int v70;
  unsigned int v71;
  int v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  __int16 v76;
  BOOL v78;
  int v79;
  OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;

  v3 = **((_QWORD **)this + 6);
  v84 = *((_DWORD *)this + 1);
  if ((_BYTE)v84)
  {
    v78 = v84 == 2;
  }
  else
  {
    if ((int)sub_20BE818E8(*(_DWORD *)this) >= 1)
    {
      v4 = *(_DWORD *)(v3 + 8);
      if (v4 >= 1)
      {
        for (i = 0; i < v4; ++i)
        {
          v6 = *(_QWORD *)(v3 + 336);
          v7 = (8 * i) | 4;
          v8 = *(int *)(v6 + v7);
          v9 = *(_DWORD *)(v6 + 8 * i);
          v10 = *(_QWORD *)(v3 + 264);
          v11 = *(int *)(v10 + v7);
          v12 = *(unsigned int *)(v10 + 8 * i);
          if ((v9 != (_DWORD)v12 || (*(_WORD *)(*(_QWORD *)(v3 + 432) + 2 * i) & 1) != 0) && v9 >= 1)
          {
            v13 = (int *)(*(_QWORD *)(v3 + 360) + 4 * v8);
            v14 = (int *)(*(_QWORD *)(v3 + 288) + 4 * v11);
            v15 = v9 & ~(v9 >> 31);
            while (1)
            {
              v17 = *v13++;
              v16 = v17;
              if (*(_DWORD *)(*(_QWORD *)(v3 + 144) + 8 * v17) == 1
                && *(float *)(*(_QWORD *)(v3 + 216) + 4 * v16) < 10.0)
              {
                break;
              }
              if (!--v15)
                goto LABEL_17;
            }
            if ((int)v12 >= 1)
            {
              do
              {
                v18 = *v14++;
                *(_BYTE *)(*(_QWORD *)(v3 + 96) + v18) |= 1u;
                --v12;
              }
              while (v12);
            }
            *((_WORD *)this + 4) |= 2u;
            v4 = *(_DWORD *)(v3 + 8);
          }
LABEL_17:
          ;
        }
      }
    }
    v78 = 0;
  }
  if (*(int *)(v3 + 4) >= 1)
  {
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = *(_QWORD *)(v3 + 240);
      v22 = *(_QWORD *)(v3 + 216);
      v23 = *(_DWORD *)(*(_QWORD *)(v3 + 144) + v19) < 2;
      v24 = *(_BYTE *)(v21 + v20);
      v25 = v24 & 0xFD | (2 * v23);
      *(_BYTE *)(v21 + v20) = v25;
      v26 = v24 & 1;
      if (!v23 && v26 == 0)
      {
        v28 = *(float *)(v22 + 4 * v20);
      }
      else
      {
        *(_DWORD *)(v22 + 4 * v20) = 1092616192;
        v25 = *(_BYTE *)(v21 + v20);
        v28 = 10.0;
      }
      v29 = v25 & 0xFB | (4 * (v28 >= 10.0));
      *(_BYTE *)(v21 + v20) = v29;
      if (v28 < 10.0 && *(float *)(v22 + 4 * v20) > 0.0)
        v31 = 8;
      else
        v31 = 0;
      *(_BYTE *)(v21 + v20++) = v31 | v29 & 0xF7;
      v19 += 8;
    }
    while (v20 < *(int *)(v3 + 4));
  }
  v32 = sub_20BE818BC(*(_DWORD *)this);
  v81 = v32;
  if (v32 >= 0)
    v33 = v32;
  else
    v33 = v32 + 1;
  if (*(int *)(v3 + 8) >= 1)
  {
    v34 = 0;
    v79 = v33 >> 1;
    v80 = this;
    while (1)
    {
      v35 = *(_QWORD *)(v3 + 336);
      v36 = (8 * v34) | 4;
      v37 = (int *)(*(_QWORD *)(v3 + 360) + 4 * *(int *)(v35 + v36));
      v38 = *(unsigned int *)(v35 + 8 * v34);
      if ((int)v38 < 1)
      {
        v42 = 0;
        v41 = 0;
        v40 = 0;
        v39 = 0;
      }
      else
      {
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v42 = 0;
        v43 = v38;
        v44 = v37;
        do
        {
          v45 = *v44++;
          v46 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 240) + v45);
          v42 += (v46 >> 1) & 1;
          v41 += (v46 >> 2) & 1;
          v40 += (v46 >> 3) & 1;
          v39 += v46 & 1;
          --v43;
        }
        while (v43);
      }
      v47 = *(_QWORD *)(v3 + 432);
      v48 = *(_QWORD *)(v3 + 408);
      v49 = *(_QWORD *)(v3 + 264);
      v50 = *(unsigned int *)(v49 + 8 * v34);
      v82 = *(int *)(v49 + v36);
      v83 = *(_QWORD *)(v3 + 288);
      if ((_DWORD)v50 != 1)
        break;
      v51 = (_DWORD)v38 == 2;
      v52 = v78;
      if ((_DWORD)v38 != 2)
        v52 = 0;
      if (!v52)
        goto LABEL_50;
      v51 = 1;
LABEL_54:
      *(_DWORD *)(v48 + 4 * v34) = 1092616192;
LABEL_55:
      v53 = *(_WORD *)(v47 + 2 * v34) & 0xFFEF | (16 * (*(float *)(v48 + 4 * v34) >= 10.0));
      *(_WORD *)(v47 + 2 * v34) = v53;
      v54 = *(float *)(v48 + 4 * v34);
      if (v54 < 10.0 && v54 > 0.0)
        v56 = 32;
      else
        v56 = 0;
      *(_WORD *)(v47 + 2 * v34) = v53 & 0xFF9F | ((v40 != 0) << 6) | v56;
      v57 = sub_20BE81480(*(float *)(v48 + 4 * v34), (uint64_t)&v84, v40 + v41);
      v58 = *(_WORD *)(v47 + 2 * v34);
      v59 = *(_DWORD *)&v51 & ((v58 & 0x10) >> 4);
      if (v59)
        v60 = 8;
      else
        v60 = 0;
      v61 = v58 & 0xF871 | (4 * (v42 != 0)) & 0x7F | ((v57 & 0xF) << 7) | v60;
      v62 = v61 | (2 * ((_DWORD)v50 != v81));
      if (v42)
        v62 = v61 | (2 * ((_DWORD)v50 != v79));
      if ((v59 & 1) != 0)
        v63 = v61;
      else
        v63 = v62;
      if ((v58 & 1) != 0)
        v64 = v61;
      else
        v64 = v63;
      if (v41 | v64 & 0x10)
        v65 = 0x8000;
      else
        v65 = 0;
      *(_WORD *)(v47 + 2 * v34) = v64 & 0x17FF | ((v41 != 0) << 13) | v65;
      if (!v41)
        goto LABEL_90;
      v66 = *(float *)(v48 + 4 * v34);
      if ((v64 & 0x10) == 0)
        v66 = 0.0;
      v67 = sub_20BE81480(v66, (uint64_t)&v84, v41);
      if (v67 == 8)
      {
        if (v41 != (_DWORD)v38)
          goto LABEL_90;
        v69 = *(_WORD *)(v47 + 2 * v34);
        if ((int)v38 <= 2 && (v69 & 0x10) == 0)
          goto LABEL_90;
LABEL_88:
        LOWORD(v70) = v69 & 0x7FFF;
        goto LABEL_89;
      }
      if (v67 != 4)
        goto LABEL_90;
      v68 = *(_WORD *)(v47 + 2 * v34);
      v69 = v68 | 0x4000;
      *(_WORD *)(v47 + 2 * v34) = v68 | 0x4000;
      if ((v68 & 3) != 0)
        goto LABEL_90;
      if ((v68 & 4) != 0)
        goto LABEL_88;
      if (v81 == 6)
      {
        v75 = *(_QWORD *)(v3 + 240);
        if (((*(unsigned __int8 *)(v75 + v37[3]) ^ *(unsigned __int8 *)(v75 + *v37)) & 4) != 0
          || ((*(unsigned __int8 *)(v75 + v37[4]) ^ *(unsigned __int8 *)(v75 + v37[1])) & 4) != 0)
        {
          v76 = 0x8000;
        }
        else
        {
          v76 = 0;
        }
        LOWORD(v70) = v76 | v69 & 0x7FFF;
      }
      else
      {
        if (v81 != 4)
          goto LABEL_90;
        v70 = v68 & 0x3FFF | 0x4000 | ((((*(unsigned __int8 *)(*(_QWORD *)(v3 + 240) + v37[2]) ^ *(unsigned __int8 *)(*(_QWORD *)(v3 + 240) + *v37)) >> 2) & 1) << 15);
      }
LABEL_89:
      *(_WORD *)(v47 + 2 * v34) = v70;
LABEL_90:
      v71 = *((unsigned __int16 *)v80 + 4);
      if ((v71 & 4) != 0 && (int)v50 >= 1)
      {
        v72 = (v71 >> 3) & 7;
        v73 = (int *)(v83 + 4 * v82);
        while (1)
        {
          v74 = *v73++;
          if (*(_DWORD *)(*(_QWORD *)(v3 + 24) + 8 * v74) != v72)
            break;
          if (!--v50)
            goto LABEL_97;
        }
        *(_WORD *)(v47 + 2 * v34) |= 0x1000u;
      }
LABEL_97:
      if (++v34 >= *(int *)(v3 + 8))
        return 1;
    }
    v51 = 0;
LABEL_50:
    if ((*(_WORD *)(v47 + 2 * v34) & 1) == 0 || v39 == 2 && !v42 && (int)v50 > (int)v38)
      goto LABEL_55;
    goto LABEL_54;
  }
  return 1;
}

uint64_t OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase::prepareFaceVaryingChannels(OpenSubdiv::__aapl__::Far::TopologyRefinerFactoryBase *this, OpenSubdiv::__aapl__::Far::TopologyRefiner *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char __str[1024];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = **((_QWORD **)this + 6);
  v4 = sub_20BE818BC(*(_DWORD *)this);
  if (v4 >= 0)
    v5 = v4;
  else
    v5 = v4 + 1;
  if ((int)((*(_QWORD *)(**((_QWORD **)this + 6) + 464) - *(_QWORD *)(**((_QWORD **)this + 6) + 456)) >> 3) < 1)
    return 1;
  v6 = 0;
  v7 = v5 >> 1;
  while (sub_20BE86268(v3, v6))
  {
    sub_20BE862A8(v3, v6++, v7);
    if (v6 >= (int)((*(_QWORD *)(**((_QWORD **)this + 6) + 464) - *(_QWORD *)(**((_QWORD **)this + 6) + 456)) >> 3))
      return 1;
  }
  snprintf(__str, 0x400uLL, "Failure in TopologyRefinerFactory<>::Create() -- face-varying channel %d has no values.", v6);
  sub_20BE8B094(4, (uint64_t)__str, v9, v10, v11, v12, v13, v14, v15);
  return 0;
}

char *sub_20BE8CE1C(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t sub_20BE8CEE0()
{
  const char *v0;
  _BOOL4 v3;
  uint64_t result;
  const char *v5;
  void *v6[2];
  char v7;
  size_t v8;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v6);
  if (v7 < 0)
  {
    if (v6[1] != (void *)3)
    {
      operator delete(v6[0]);
LABEL_19:
      pxrInternal__aapl__pxrReserved__::Arch_Warning((pxrInternal__aapl__pxrReserved__ *)"C++ demangling appears badly broken.", "Arch_ValidateAssumptions", (const char *)0x7C, "arch/assumptions.cpp", v0);
      goto LABEL_20;
    }
    v3 = *(_WORD *)v6[0] != 28265 || *((_BYTE *)v6[0] + 2) != 116;
    operator delete(v6[0]);
    if (v3)
      goto LABEL_19;
  }
  else
  {
    if (v7 != 3)
      goto LABEL_19;
    if (LOWORD(v6[0]) != 28265 || BYTE2(v6[0]) != 116)
      goto LABEL_19;
  }
LABEL_20:
  v6[0] = 0;
  v8 = 8;
  result = sysctlbyname("hw.cachelinesize", v6, &v8, 0, 0);
  if (v6[0] != (void *)128)
    return pxrInternal__aapl__pxrReserved__::Arch_Warning((pxrInternal__aapl__pxrReserved__ *)"ARCH_CACHE_LINE_SIZE != Arch_ObtainCacheLineSize()", "Arch_ValidateAssumptions", (const char *)0x9B, "arch/assumptions.cpp", v5);
  return result;
}

void sub_20BE8CFF4()
{
  const char *v0;
  void **v1;
  void *__p[2];
  char v3;

  sub_20BE9B8BC();
  sub_20BE9900C();
  pxrInternal__aapl__pxrReserved__::ArchGetExecutablePath(__p);
  if (v3 >= 0)
    v1 = __p;
  else
    v1 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::ArchSetProgramNameForErrors((pxrInternal__aapl__pxrReserved__ *)v1, v0);
  if (v3 < 0)
    operator delete(__p[0]);
  sub_20BE8CEE0();
  sub_20BE8D5DC();
}

void sub_20BE8D054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __DarwinGetTemporaryDirectory(void)
{
  if (qword_254784EC8 != -1)
    dispatch_once(&qword_254784EC8, &unk_24C51A4C8);
  return qword_254784ED0;
}

char *sub_20BE8D0B0()
{
  const char *v0;
  size_t v1;

  v0 = -[NSString UTF8String](NSTemporaryDirectory(), "UTF8String");
  v1 = strlen(v0);
  qword_254784ED0 = (uint64_t)operator new[](v1 + 1);
  return strcpy((char *)qword_254784ED0, v0);
}

const char *__DarwinGetTemporaryDirectoryAppropriateForURLPath(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  id v7;

  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  v4 = objc_msgSend(MEMORY[0x24BDBCF48], "fileURLWithPath:", objc_msgSend(MEMORY[0x24BDD17C8], "stringWithUTF8String:", v3));
  v7 = 0;
  v5 = (void *)objc_msgSend((id)objc_msgSend(MEMORY[0x24BDD1580], "defaultManager"), "URLForDirectory:inDomain:appropriateForURL:create:error:", 99, 1, v4, 1, &v7);
  if (v7)
  {
    MEMORY[0x212B929D0](a2, objc_msgSend((id)objc_msgSend(v7, "localizedDescription"), "UTF8String"));
    return "";
  }
  if (!v5)
    return "";
  return (const char *)objc_msgSend((id)objc_msgSend(v5, "path"), "UTF8String");
}

void *pxrInternal__aapl__pxrReserved__::ArchAlignedAlloc(pxrInternal__aapl__pxrReserved__ *this, size_t __size)
{
  size_t v3;
  void *__memptr;

  if ((unint64_t)this <= 8)
    v3 = 8;
  else
    v3 = (size_t)this;
  __memptr = 0;
  if (posix_memalign(&__memptr, v3, __size))
    return 0;
  else
    return __memptr;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchCloseAllFiles(pxrInternal__aapl__pxrReserved__ *this, int *a2, const int *a3)
{
  int v4;
  int rlim_cur;
  int v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  rlimit v20;

  v4 = (int)this;
  getrlimit(8, &v20);
  if (v20.rlim_cur == 0x7FFFFFFFFFFFFFFFLL)
    rlim_cur = 256;
  else
    rlim_cur = v20.rlim_cur;
  v6 = -1;
  if (v4 >= 1)
  {
    v7 = v4;
    v8 = a2;
    do
    {
      v10 = *v8++;
      v9 = v10;
      if (v6 <= v10)
        v6 = v9;
      --v7;
    }
    while (v7);
  }
  if (rlim_cur < 1)
  {
    v13 = 0;
    v12 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      if (v11 <= v6 && (v14 = v4, v15 = a2, v4))
      {
        while (1)
        {
          v16 = *v15++;
          if (v16 == v11)
            break;
          if (!--v14)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        while (1)
        {
          *__error() = 0;
          v17 = close(v11);
          if (!(_DWORD)v17)
            break;
          v18 = v17;
          if (*__error() != 4)
          {
            if (*__error() != 9)
            {
              v12 = *__error();
              v13 = v18;
            }
            break;
          }
        }
      }
      ++v11;
    }
    while (v11 != rlim_cur);
  }
  *__error() = v12;
  return v13;
}

BOOL pxrInternal__aapl__pxrReserved__::Arch_DebuggerRunUnrelatedProcessPosix(pxrInternal__aapl__pxrReserved__ *this, BOOL (*a2)(void *), void *a3)
{
  pid_t v5;
  ssize_t v6;
  ssize_t v7;
  void (__cdecl *v9)(int);
  pid_t v10;
  const int *v11;
  int v12;
  int __buf;
  int __fd[2];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (pipe(__fd) == -1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::Arch_nonLockingFork)
    v5 = pxrInternal__aapl__pxrReserved__::Arch_nonLockingFork();
  else
    v5 = fork();
  if (v5 == -1)
  {
    close(__fd[0]);
    close(__fd[1]);
    return 0;
  }
  if (v5 < 1)
  {
    close(__fd[0]);
    signal(22, (void (__cdecl *)(int))1);
    signal(21, (void (__cdecl *)(int))1);
    if (setsid() == -1)
    {
      __buf = *__error();
      write(__fd[1], &__buf, 4uLL);
      _exit(1);
    }
    v9 = signal(1, (void (__cdecl *)(int))1);
    if (pxrInternal__aapl__pxrReserved__::Arch_nonLockingFork)
      v10 = ((uint64_t (*)(void (__cdecl *)(int)))pxrInternal__aapl__pxrReserved__::Arch_nonLockingFork)(v9);
    else
      v10 = fork();
    if (v10 == -1)
    {
      __buf = *__error();
      write(__fd[1], &__buf, 4uLL);
      _exit(2);
    }
    if (v10 < 1)
    {
      __buf = pxrInternal__aapl__pxrReserved__::ArchCloseAllFiles((pxrInternal__aapl__pxrReserved__ *)1, &__fd[1], v11);
      if (__buf == -1)
      {
        write(__fd[1], &__buf, 4uLL);
        _exit(3);
      }
      __buf = chdir("/");
      if (__buf == -1)
      {
        write(__fd[1], &__buf, 4uLL);
        _exit(4);
      }
      umask(0);
      open("/dev/null", 0);
      open("/dev/null", 1);
      open("/dev/null", 1);
      if (fcntl(__fd[1], 2, 1) == -1)
      {
        v12 = *__error();
        write(__fd[1], &v12, 4uLL);
        _exit(5);
      }
      if ((((uint64_t (*)(_QWORD))this)(a2) & 1) == 0)
      {
        __buf = *__error();
        write(__fd[1], &__buf, 4uLL);
        _exit(6);
      }
    }
    _exit(0);
  }
  close(__fd[1]);
  __buf = 0;
  v6 = read(__fd[0], &__buf, 1uLL);
  if (v6 == -1)
  {
    do
      v7 = read(__fd[0], &__buf, 1uLL);
    while (v7 == -1);
    v6 = v7;
  }
  close(__fd[0]);
  return v6 == 0;
}

void sub_20BE8D5DC()
{
  char *v0;
  char *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  int v13;
  pid_t v14;
  void **v16;
  char *v17;
  __int128 v18;
  unint64_t v19;
  void *__p[2];
  uint64_t v21;

  v0 = getenv("ARCH_DEBUGGER");
  if (v0)
  {
    v1 = v0;
    v2 = *v0;
    if (*v0)
    {
      v3 = 0;
      v4 = 0;
      v5 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v6 = v0;
      v21 = 0;
      while (v2 == 37)
      {
        v8 = v6 + 1;
        v7 = v6[1];
        if (v7 != 101)
        {
          if (v7 == 112)
          {
            v5 += 20;
            goto LABEL_11;
          }
          goto LABEL_10;
        }
        if ((v4 & 0x80u) == 0)
          v9 = v4;
        else
          v9 = v3;
        if (!v9)
        {
          pxrInternal__aapl__pxrReserved__::ArchGetExecutablePath(&v18);
          if ((char)v4 < 0)
            operator delete(__p[0]);
          v21 = v19;
          *(_OWORD *)__p = v18;
          v4 = HIBYTE(v19);
          v3 = *((_QWORD *)&v18 + 1);
        }
        if ((v4 & 0x80u) == 0)
          v10 = v4;
        else
          v10 = v3;
        v5 += v10;
LABEL_11:
        v2 = v8[1];
        v6 = v8 + 1;
      }
      if (!v2)
      {
        v11 = (char *)malloc(v5 + 1);
        qword_254784EE8 = (uint64_t)v11;
        while (1)
        {
          v12 = *v1;
          if (v12 != 37)
            break;
          v13 = v1[1];
          if (v13 == 101)
          {
            if (v21 >= 0)
              v16 = __p;
            else
              v16 = (void **)__p[0];
            strcat(v11, (const char *)v16);
            v17 = (char *)HIBYTE(v21);
            if (v21 < 0)
              v17 = (char *)__p[1];
            v11 = &v17[(_QWORD)v11];
          }
          else
          {
            if (v13 != 112)
              goto LABEL_31;
            v14 = getpid();
            sprintf(v11--, "%d", v14);
            while (*++v11)
              ;
          }
          ++v1;
LABEL_39:
          ++v1;
        }
        if (!*v1)
        {
          *v11 = 0;
          if (SHIBYTE(v21) < 0)
            operator delete(__p[0]);
          return;
        }
LABEL_31:
        *v11++ = v12;
        goto LABEL_39;
      }
LABEL_10:
      ++v5;
      v8 = v6;
      goto LABEL_11;
    }
  }
}

void sub_20BE8D79C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  char v18;

  if (v18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchDebuggerIsAttached(pxrInternal__aapl__pxrReserved__ *this)
{
  size_t v2;
  _BYTE v3[32];
  unsigned int v4;
  int v5[2];
  int v6;
  pid_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_20BE8D880();
  v4 = 0;
  *(_QWORD *)v5 = 0xE00000001;
  v6 = 1;
  v7 = getpid();
  v2 = 648;
  if (sysctl(v5, 4u, v3, &v2, 0, 0))
    return 0;
  else
    return (v4 >> 11) & 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchDebuggerWait(uint64_t this)
{
  atomic_store(this, byte_254784ED8);
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchDebuggerAttach(pxrInternal__aapl__pxrReserved__ *this)
{
  return 0;
}

void sub_20BE8D880()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254784EE0);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254784EE0))
    {
      sub_20BE8D8EC();
      __cxa_guard_release(&qword_254784EE0);
    }
  }
}

void sub_20BE8D8D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254784EE0);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE8D8EC()
{
  uint64_t result;
  const char *v1;
  sigaction v2;

  *(_QWORD *)&v2.sa_mask = 0x1000000000;
  v2.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_20BE8D950;
  result = sigaction(5, &v2, 0);
  if ((_DWORD)result)
    return pxrInternal__aapl__pxrReserved__::Arch_Warning((pxrInternal__aapl__pxrReserved__ *)"Failed to set SIGTRAP handler;  debug trap not enabled",
             "Arch_DebuggerInitPosix",
             (const char *)0x66,
             "arch/debugger.cpp",
             v1);
  return result;
}

uint64_t sub_20BE8D950()
{
  int v0;
  uint64_t result;

  while (1)
  {
    v0 = __ldaxr(byte_254784ED8);
    if (v0 != 1)
      break;
    if (!__stlxr(0, byte_254784ED8))
      return raise(17);
  }
  __clrex();
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchDemangle(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  void *v6;
  char *v7;
  char *v8;
  std::string::size_type v9;
  uint64_t v10;
  char *v11;
  char *v12;
  void *v13;
  char *v14;
  char *v15;

  v2 = sub_20BE8DCA4(a1);
  if ((_DWORD)v2)
  {
    sub_20BE8DDC8((std::string *)a1);
    if (*(char *)(a1 + 23) < 0)
    {
      v4 = *(char **)a1;
      v3 = *(_QWORD *)(a1 + 8);
    }
    else
    {
      v3 = *(unsigned __int8 *)(a1 + 23);
      v4 = (char *)a1;
    }
    if (v3 >= 34)
    {
      v5 = &v4[v3];
      v6 = v4;
      do
      {
        v7 = (char *)memchr(v6, 112, v3 - 33);
        if (!v7)
          break;
        v8 = v7;
        if (!memcmp(v7, "pxrInternal__aapl__pxrReserved__::", 0x22uLL))
        {
          if (v8 != v5)
          {
            v9 = v8 - v4;
            if (v8 - v4 != -1)
            {
LABEL_13:
              std::string::erase((std::string *)a1, v9, 0x22uLL);
              if (*(char *)(a1 + 23) < 0)
              {
                v11 = *(char **)a1;
                v10 = *(_QWORD *)(a1 + 8);
              }
              else
              {
                v10 = *(unsigned __int8 *)(a1 + 23);
                v11 = (char *)a1;
              }
              if (v10 >= 34)
              {
                v12 = &v11[v10];
                v13 = v11;
                while (1)
                {
                  v14 = (char *)memchr(v13, 112, v10 - 33);
                  if (!v14)
                    break;
                  v15 = v14;
                  if (!memcmp(v14, "pxrInternal__aapl__pxrReserved__::", 0x22uLL))
                  {
                    if (v15 != v12)
                    {
                      v9 = v15 - v11;
                      if (v15 - v11 != -1)
                        goto LABEL_13;
                    }
                    return v2;
                  }
                  v13 = v15 + 1;
                  v10 = v12 - (v15 + 1);
                  if (v10 < 34)
                    return v2;
                }
              }
            }
          }
          return v2;
        }
        v6 = v8 + 1;
        v3 = v5 - (v8 + 1);
      }
      while (v3 >= 34);
    }
  }
  return v2;
}

void pxrInternal__aapl__pxrReserved__::Arch_DemangleFunctionName(std::string *a1)
{
  std::string *v1;
  char *v2;
  char *v3;
  __int128 v4;
  std::string::size_type v5;
  int status;

  v1 = a1;
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    if (a1->__r_.__value_.__l.__size_ <= 2)
      return;
    a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
    if (*v1->__r_.__value_.__l.__data_ != 95 || a1->__r_.__value_.__s.__data_[1] != 90)
      return;
  }
  else if (HIBYTE(a1->__r_.__value_.__r.__words[2]) < 3u
         || a1->__r_.__value_.__s.__data_[0] != 95
         || a1->__r_.__value_.__s.__data_[1] != 90)
  {
    return;
  }
  status = 0;
  v2 = __cxa_demangle((const char *)a1, 0, 0, &status);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(&v4, v2);
    if (SHIBYTE(v1->__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1->__r_.__value_.__l.__data_);
    *(_OWORD *)&v1->__r_.__value_.__l.__data_ = v4;
    v1->__r_.__value_.__r.__words[2] = v5;
    free(v3);
    sub_20BE8DDC8(v1);
  }
}

void pxrInternal__aapl__pxrReserved__::ArchGetDemangled(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  uint64_t v4;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a1;
    v4 = *(_QWORD *)(a1 + 16);
  }
  if (pxrInternal__aapl__pxrReserved__::ArchDemangle((uint64_t)__p))
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v4;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
}

void sub_20BE8DC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchGetDemangled(pxrInternal__aapl__pxrReserved__ *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;

  if (this)
  {
    v4 = sub_20BDDC0E4((_QWORD *)a2, (char *)this);
    if ((pxrInternal__aapl__pxrReserved__::ArchDemangle((uint64_t)v4) & 1) != 0)
      return;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
}

void sub_20BE8DC88(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE8DCA4(uint64_t a1)
{
  int v2;
  const std::string::value_type *v3;
  std::string::size_type v4;
  std::string *v5;
  char *v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  __int128 __dst;
  uint64_t v12;
  int status;
  std::string v14;

  sub_20BDDC0E4(&v14, "P");
  v2 = *(char *)(a1 + 23);
  if (v2 >= 0)
    v3 = (const std::string::value_type *)a1;
  else
    v3 = *(const std::string::value_type **)a1;
  if (v2 >= 0)
    v4 = *(unsigned __int8 *)(a1 + 23);
  else
    v4 = *(_QWORD *)(a1 + 8);
  std::string::append(&v14, v3, v4);
  status = 0;
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v14;
  else
    v5 = (std::string *)v14.__r_.__value_.__r.__words[0];
  v6 = __cxa_demangle((const char *)v5, 0, 0, &status);
  v7 = v6;
  if (v6)
  {
    v8 = strlen(v6);
    if (v8 >= 2 && v7[v8 - 1] == 42)
    {
      sub_20BDFC7D8(&__dst, v7, v8 - 1);
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(_OWORD *)a1 = __dst;
      *(_QWORD *)(a1 + 16) = v12;
      v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    free(v7);
  }
  else
  {
    v9 = 0;
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return v9;
}

void sub_20BE8DDA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BE8DDC8(std::string *this)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  std::string::size_type i;
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type size;
  int v8;
  char *v9;
  int64_t v10;
  char *v11;
  char *v12;
  int64_t v13;
  int v14;
  int64_t v15;
  char *v16;
  char *v17;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;
  uint64_t v21;
  std::string::size_type v22;
  std::string::size_type v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  char *v28;
  char *v29;
  char *v30;
  _QWORD *v32;

  v2 = atomic_load((unsigned __int8 *)&qword_254784EF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254784EF8))
  {
    qword_254784EF0 = (uint64_t)sub_20BE8E0B4();
    __cxa_guard_release(&qword_254784EF8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254784F08);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254784F08))
  {
    v32 = operator new(0x18uLL);
    sub_20BDDC0E4(v32, "string");
    qword_254784F00 = (uint64_t)v32;
    __cxa_guard_release(&qword_254784F08);
  }
  for (i = 0; ; std::string::erase(this, i, v23))
  {
    v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      v6 = (std::string *)this->__r_.__value_.__r.__words[0];
      size = this->__r_.__value_.__l.__size_;
    }
    else
    {
      v6 = this;
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    }
    v8 = *(char *)(qword_254784EF0 + 23);
    v9 = v8 >= 0 ? (char *)qword_254784EF0 : *(char **)qword_254784EF0;
    v10 = v8 >= 0 ? *(unsigned __int8 *)(qword_254784EF0 + 23) : *(_QWORD *)(qword_254784EF0 + 8);
    if (size < i)
      break;
    if (v10)
    {
      v11 = (char *)v6 + i;
      v12 = (char *)v6 + size;
      v13 = size - i;
      if ((uint64_t)(size - i) >= v10)
      {
        v14 = *v9;
        while (1)
        {
          v15 = v13 - v10;
          if (v15 == -1)
            break;
          v16 = (char *)memchr(v11, v14, v15 + 1);
          if (!v16)
            break;
          v17 = v16;
          if (!memcmp(v16, v9, v10))
          {
            if (v17 == v12)
              goto LABEL_44;
            i = v17 - (char *)v6;
            goto LABEL_24;
          }
          v11 = v17 + 1;
          v13 = v12 - (v17 + 1);
          if (v13 < v10)
            goto LABEL_44;
        }
      }
      break;
    }
LABEL_24:
    if (i == -1)
      break;
    v18 = *(char *)(qword_254784F00 + 23);
    if (v18 >= 0)
      v19 = (const std::string::value_type *)qword_254784F00;
    else
      v19 = *(const std::string::value_type **)qword_254784F00;
    if (v18 >= 0)
      v20 = *(unsigned __int8 *)(qword_254784F00 + 23);
    else
      v20 = *(_QWORD *)(qword_254784F00 + 8);
    std::string::replace(this, i, v10, v19, v20);
    if (*(char *)(qword_254784F00 + 23) < 0)
      v21 = *(_QWORD *)(qword_254784F00 + 8);
    else
      v21 = *(unsigned __int8 *)(qword_254784F00 + 23);
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      v22 = this->__r_.__value_.__l.__size_;
    else
      v22 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    i += v21;
    v23 = 0;
    v24 = v22 - i;
    if (v22 != i)
    {
      while (1)
      {
        v25 = this;
        if ((*((_BYTE *)&this->__r_.__value_.__s + 23) & 0x80) != 0)
          v25 = (std::string *)this->__r_.__value_.__r.__words[0];
        if (v25->__r_.__value_.__s.__data_[i + v23] != 32)
          break;
        if (v24 == ++v23)
        {
          v23 = v24;
          break;
        }
      }
    }
  }
LABEL_44:
  v26 = 0;
LABEL_45:
  v27 = this;
  if ((v5 & 0x80) != 0)
  {
    v27 = (std::string *)this->__r_.__value_.__r.__words[0];
    v5 = this->__r_.__value_.__l.__size_;
  }
  if (v5 >= v26)
  {
    v28 = (char *)v27 + v26;
    v29 = (char *)v27 + v5;
    while (v29 - v28 >= 5)
    {
      v30 = (char *)memchr(v28, 115, v29 - v28 - 4);
      if (!v30)
        break;
      if (*(_DWORD *)v30 == 979661939 && v30[4] == 58)
      {
        if (v30 != v29)
        {
          v26 = v30 - (char *)v27;
          if (v30 - (char *)v27 != -1)
          {
            std::string::erase(this, v26, 5uLL);
            v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
            goto LABEL_45;
          }
        }
        return;
      }
      v28 = v30 + 1;
    }
  }
}

void sub_20BE8E07C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_guard_abort(&qword_254784F08);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE8E0B4()
{
  _QWORD *v0;

  v0 = operator new(0x18uLL);
  sub_20BDDC0E4(v0, (char *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL));
  sub_20BE8DCA4((uint64_t)v0);
  return v0;
}

void sub_20BE8E0FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::ArchHasEnv(const char *a1)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return getenv(a1) != 0;
}

char *pxrInternal__aapl__pxrReserved__::ArchGetEnv@<X0>(const char *a1@<X0>, _QWORD *a2@<X8>)
{
  char *result;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  result = getenv(a1);
  if (result)
    return (char *)sub_20BDDC0E4(a2, result);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchSetEnv(const char *a1, const char *a2, int a3)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  return setenv(a1, a2, a3) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchRemoveEnv(const char *a1)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  return unsetenv(a1) == 0;
}

void pxrInternal__aapl__pxrReserved__::ArchExpandEnvironmentVariables(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void **v15;
  void **v16;
  std::string::size_type v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  _OWORD v21[2];
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  void *__p[8];
  char v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;

  v4 = atomic_load((unsigned __int8 *)&qword_254784F50);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254784F50))
  {
    sub_20BE8E538((const std::locale *)&unk_254784F10, "\\$\\{([^}]+)\\}", 0);
    __cxa_atexit((void (*)(void *))sub_20BE8E4F8, &unk_254784F10, &dword_20BDBC000);
    __cxa_guard_release(&qword_254784F50);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
  }
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  *(_OWORD *)v20 = 0u;
  memset(v21, 0, 25);
  while (1)
  {
    __p[6] = 0;
    __p[7] = 0;
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v36 = 0;
    memset(__p, 0, 41);
    v5 = *(unsigned __int8 *)(a2 + 23);
    if ((v5 & 0x80u) == 0)
      v6 = a2;
    else
      v6 = *(_QWORD *)a2;
    if ((v5 & 0x80u) != 0)
      v5 = *(_QWORD *)(a2 + 8);
    v7 = sub_20BE95EF8((uint64_t)&unk_254784F10, v6, v6 + v5, (uint64_t)__p, 0);
    v8 = *(unsigned __int8 *)(a2 + 23);
    if ((v8 & 0x80u) == 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(a2 + 8);
    sub_20BE960D0((uint64_t)v20, v9, v9 + v8, (uint64_t *)__p, 0);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (!v7)
      break;
    if (*(char *)(a2 + 23) >= 0)
      v10 = a2;
    else
      v10 = *(_QWORD *)a2;
    if (v20[1] == v20[0])
      v11 = (uint64_t *)v21 + 1;
    else
      v11 = (uint64_t *)v20[0];
    v12 = *v11;
    v13 = (uint64_t *)((char *)v20[0] + 8);
    if (v20[1] == v20[0])
      v13 = (uint64_t *)&v21[1];
    v14 = *v13;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v20[1] - (char *)v20[0]) >> 3) <= 1)
      v15 = v20;
    else
      v15 = (void **)v20[0];
    if (*((_BYTE *)v15 + 40))
    {
      sub_20BE93368(v18, (char *)v15[3], (char *)v15[4], (_BYTE *)v15[4] - (_BYTE *)v15[3]);
    }
    else
    {
      v18[0] = 0;
      v18[1] = 0;
      v19 = 0;
    }
    pxrInternal__aapl__pxrReserved__::ArchGetEnv((const char *)v18, __p);
    if (SHIBYTE(__p[2]) >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    if (SHIBYTE(__p[2]) >= 0)
      v17 = HIBYTE(__p[2]);
    else
      v17 = (std::string::size_type)__p[1];
    std::string::replace((std::string *)a2, v12 - v10, v14 - v12, (const std::string::value_type *)v16, v17);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v19) < 0)
      operator delete(v18[0]);
  }
  if (v20[0])
  {
    v20[1] = v20[0];
    operator delete(v20[0]);
  }
}

void sub_20BE8E474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  __cxa_guard_abort(&qword_254784F50);
  _Unwind_Resume(a1);
}

void sub_20BE8E4F8(std::locale *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a1[5]);
  std::locale::~locale(a1);
}

char **pxrInternal__aapl__pxrReserved__::ArchEnviron(pxrInternal__aapl__pxrReserved__ *this)
{
  return *_NSGetEnviron();
}

const std::locale *sub_20BE8E538(const std::locale *a1, char *a2, int a3)
{
  const std::locale *v6;
  size_t v7;

  v6 = sub_20BE8E5C8(a1);
  LODWORD(v6[3].__locale_) = a3;
  *(_OWORD *)((char *)&v6[3].__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v6[5].__locale_ + 4) = 0u;
  HIDWORD(v6[7].__locale_) = 0;
  v7 = strlen(a2);
  if (sub_20BE8E624((uint64_t)a1, a2, &a2[v7]) != &a2[v7])
    sub_20BE8E774();
  return a1;
}

void sub_20BE8E5AC(_Unwind_Exception *a1)
{
  std::locale *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v1[5]);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

const std::locale *sub_20BE8E5C8(const std::locale *a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x212B92E08]();
  a1[1].__locale_ = (std::locale::__imp *)std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  a1[2].__locale_ = (std::locale::__imp *)std::locale::use_facet(a1, MEMORY[0x24BEDB4B0]);
  return a1;
}

void sub_20BE8E610(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *sub_20BE8E624(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;

  v6 = operator new(8uLL);
  *v6 = &unk_24C51A4F8;
  v7 = operator new(0x10uLL);
  *v7 = &unk_24C51A5C8;
  v7[1] = v6;
  sub_20BE8E7C0((_QWORD *)(a1 + 40), (uint64_t)v7);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
  v8 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v8 > 0x3F)
  {
    switch(v8)
    {
      case 0x40u:
        return sub_20BE8EA84(a1, a2, a3);
      case 0x80u:
        return (char *)sub_20BE8EB24(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
      case 0x100u:
        return sub_20BE8EC54(a1, a2, a3);
      default:
        goto LABEL_14;
    }
  }
  else if (v8)
  {
    if (v8 != 16)
    {
      if (v8 != 32)
LABEL_14:
        sub_20BE8ED84();
      return sub_20BE8EA84(a1, a2, a3);
    }
    return sub_20BE8E958(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
  }
  else
  {
    return sub_20BE8E830(a1, (unsigned __int8 *)a2, a3);
  }
}

void sub_20BE8E758(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20BE8E774()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 17);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE8E7AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20BE8E7C0(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  sub_20BE8EDEC(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

char *sub_20BE8E830(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = sub_20BE8F098(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(v10 + 8);
    *v9 = &unk_24C51A5C8;
    v9[1] = v11;
    *(_QWORD *)(v10 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  if (v8 != (unsigned __int8 *)a3)
  {
    while (*v8 == 124)
    {
      v12 = *(_QWORD *)(a1 + 56);
      v13 = v8 + 1;
      v14 = v8 + 1;
      do
      {
        v8 = v14;
        v14 = sub_20BE8F098(a1, (char *)v14, a3);
      }
      while (v14 != v8);
      if (v8 == v13)
      {
        v15 = operator new(0x10uLL);
        v16 = *(_QWORD *)(a1 + 56);
        v17 = *(_QWORD *)(v16 + 8);
        *v15 = &unk_24C51A5C8;
        v15[1] = v17;
        *(_QWORD *)(v16 + 8) = v15;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      sub_20BE8EFE8(a1, v6, v12);
      if (v8 == (unsigned __int8 *)a3)
        return a3;
    }
    return (char *)v8;
  }
  return a3;
}

char *sub_20BE8E958(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  char *v4;
  _QWORD *v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return (char *)a2;
  v4 = (char *)a3;
  if (*a2 == 94)
  {
    v6 = operator new(0x18uLL);
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v6 = &unk_24C51A670;
    v6[1] = v9;
    *((_BYTE *)v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      v10 = v3;
      v3 = sub_20BE95530(a1, (char *)v3, v4);
    }
    while (v3 != v10);
    if (v10 != (unsigned __int8 *)v4)
    {
      if (v10 + 1 != (unsigned __int8 *)v4 || *v10 != 36)
        sub_20BE954E4();
      v11 = operator new(0x18uLL);
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *v11 = &unk_24C51A6B8;
      v11[1] = v14;
      *((_BYTE *)v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *sub_20BE8EA84(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;

  v3 = a3;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_20BE95B08(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    sub_20BE954E4();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = *(_QWORD *)(a1 + 56);
    v10 = sub_20BE95B08(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    sub_20BE8EFE8(a1, v6, v9);
  }
  return v3;
}

unsigned __int8 *sub_20BE8EB24(uint64_t a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    *v9 = &unk_24C51A5C8;
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  else
  {
    sub_20BE8E958(a1, __s, v8);
  }
  if (v8 != a3)
    ++v8;
  while (v8 != a3)
  {
    v11 = (unsigned __int8 *)memchr(v8, 10, a3 - v8);
    if (v11)
      v12 = v11;
    else
      v12 = a3;
    v13 = *(_QWORD *)(a1 + 56);
    if (v12 == v8)
    {
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(v13 + 8);
      *v14 = &unk_24C51A5C8;
      v14[1] = v15;
      *(_QWORD *)(v13 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      sub_20BE8E958(a1, v8, v12);
    }
    sub_20BE8EFE8(a1, v6, v13);
    if (v12 == a3)
      v8 = v12;
    else
      v8 = v12 + 1;
  }
  return a3;
}

char *sub_20BE8EC54(uint64_t a1, char *__s, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = (char *)memchr(__s, 10, a3 - __s);
  if (v7)
    v8 = v7;
  else
    v8 = a3;
  if (v8 == __s)
  {
    v9 = operator new(0x10uLL);
    v10 = *(_QWORD *)(v6 + 8);
    *v9 = &unk_24C51A5C8;
    v9[1] = v10;
    *(_QWORD *)(v6 + 8) = v9;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
  else
  {
    sub_20BE8EA84(a1, __s, v8);
  }
  if (v8 != a3)
    ++v8;
  while (v8 != a3)
  {
    v11 = (char *)memchr(v8, 10, a3 - v8);
    if (v11)
      v12 = v11;
    else
      v12 = a3;
    v13 = *(_QWORD *)(a1 + 56);
    if (v12 == v8)
    {
      v14 = operator new(0x10uLL);
      v15 = *(_QWORD *)(v13 + 8);
      *v14 = &unk_24C51A5C8;
      v14[1] = v15;
      *(_QWORD *)(v13 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    else
    {
      sub_20BE8EA84(a1, v8, v12);
    }
    sub_20BE8EFE8(a1, v6, v13);
    if (v12 == a3)
      v8 = v12;
    else
      v8 = v12 + 1;
  }
  return a3;
}

void sub_20BE8ED84()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 14);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE8EDBC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20BE8EDD8(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

_QWORD *sub_20BE8EDEC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = operator new(0x20uLL);
  *v4 = &unk_24C51A550;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_20BE8EE34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_20BE8EE58(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BE8EE6C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20BE8EE84(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51A5A0))
    return a1 + 24;
  else
    return 0;
}

_QWORD *sub_20BE8EEC4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51A640;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20BE8EF08(_QWORD *__p)
{
  uint64_t v2;

  *__p = &unk_24C51A640;
  v2 = __p[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_20BE8EF4C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20BE8EF60(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51A640;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20BE8EFA4(_QWORD *__p)
{
  uint64_t v2;

  *__p = &unk_24C51A640;
  v2 = __p[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

_QWORD *sub_20BE8EFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;
  uint64_t v11;

  v6 = operator new(0x18uLL);
  v7 = *(_QWORD *)(a3 + 8);
  v6[1] = *(_QWORD *)(a2 + 8);
  v6[2] = v7;
  *v6 = &unk_24C51AB38;
  *(_QWORD *)(a2 + 8) = v6;
  *(_QWORD *)(a3 + 8) = 0;
  v8 = operator new(0x10uLL);
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *v8 = &unk_24C51A5C8;
  v8[1] = v9;
  *(_QWORD *)(a3 + 8) = v8;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
  result = operator new(0x10uLL);
  v11 = *(_QWORD *)(a3 + 8);
  *result = &unk_24C51AB80;
  result[1] = v11;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a3 + 8);
  return result;
}

unsigned __int8 *sub_20BE8F098(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *result;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;

  result = (unsigned __int8 *)sub_20BE8F12C(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_DWORD *)(a1 + 28);
    v9 = sub_20BE8F3B4(a1, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
    result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
      return sub_20BE8F5AC(a1, v9, (unsigned __int8 *)a3, v7, v8 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
  return result;
}

char *sub_20BE8F12C(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  char *v7;
  BOOL v8;
  char *v9;
  int v11;
  char *v12;
  int v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v20;
  char v21;
  int v22;
  std::locale v23[3];
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      v8 = v6 == 40;
      v7 = a2 + 1;
      v8 = !v8 || v7 == a3;
      if (!v8)
      {
        v8 = *v7 == 63;
        v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          v11 = *v9;
          if (v11 == 33)
          {
            sub_20BE8E5C8(v23);
            v24 = 0u;
            v26 = 0;
            v25 = 0u;
            LODWORD(v24) = *(_DWORD *)(a1 + 24);
            v12 = (char *)sub_20BE8E624(v23, v3 + 3, a3);
            v22 = DWORD1(v24);
            sub_20BE8F920(a1, (uint64_t)v23, 1, *(_DWORD *)(a1 + 28));
            *(_DWORD *)(a1 + 28) += v22;
            if (v12 == a3 || *v12 != 41)
              sub_20BE8F9A4();
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            sub_20BE8E5C8(v23);
            v24 = 0u;
            v26 = 0;
            v25 = 0u;
            LODWORD(v24) = *(_DWORD *)(a1 + 24);
            v12 = (char *)sub_20BE8E624(v23, v3 + 3, a3);
            v13 = DWORD1(v24);
            sub_20BE8F920(a1, (uint64_t)v23, 0, *(_DWORD *)(a1 + 28));
            *(_DWORD *)(a1 + 28) += v13;
            if (v12 == a3 || *v12 != 41)
              sub_20BE8F9A4();
LABEL_31:
            v3 = v12 + 1;
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&v25);
            std::locale::~locale(v23);
            return v3;
          }
        }
      }
      return v3;
    }
    v14 = operator new(0x18uLL);
    v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(_QWORD *)(v16 + 8);
    v18 = (char *)&unk_24C51A6A8;
LABEL_21:
    *v14 = v18 + 16;
    v14[1] = v17;
    *((_BYTE *)v14 + 16) = v15;
    *(_QWORD *)(v16 + 8) = v14;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94)
      return v3;
    v14 = operator new(0x18uLL);
    v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v16 = *(_QWORD *)(a1 + 56);
    v17 = *(_QWORD *)(v16 + 8);
    v18 = (char *)&unk_24C51A660;
    goto LABEL_21;
  }
  if (a2 + 1 != a3)
  {
    v20 = a2[1];
    if (v20 == 66)
    {
      v21 = 1;
    }
    else
    {
      if (v20 != 98)
        return v3;
      v21 = 0;
    }
    sub_20BE8F8AC(a1, v21);
    v3 += 2;
  }
  return v3;
}

void sub_20BE8F388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20BE8F3B4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = (char)*a2;
  if (v6 > 62)
  {
    if (v6 > 91)
    {
      if (v6 == 92)
        return sub_20BE90FD0(a1, a2, a3);
      if (v6 != 123)
        return sub_20BE9128C(a1, a2, a3);
    }
    else
    {
      if (v6 == 91)
        return (unsigned __int8 *)sub_20BE91070(a1, (char *)a2, (char *)a3);
      if (v6 != 63)
        return sub_20BE9128C(a1, a2, a3);
    }
LABEL_29:
    sub_20BE91240();
  }
  if (v6 == 40)
  {
    if (a2 + 1 == a3)
      goto LABEL_30;
    if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
    {
      v11 = (_DWORD *)(a1 + 36);
      ++*(_DWORD *)(a1 + 36);
      v12 = (unsigned __int8 *)sub_20BE8E830(a1, a2 + 3, a3);
      if (v12 == a3)
        goto LABEL_30;
      v3 = v12;
      if (*v12 != 41)
        goto LABEL_30;
    }
    else
    {
      sub_20BE91180((_QWORD *)a1);
      v13 = *(_DWORD *)(a1 + 28);
      v11 = (_DWORD *)(a1 + 36);
      ++*(_DWORD *)(a1 + 36);
      v14 = (unsigned __int8 *)sub_20BE8E830(a1, v3 + 1, a3);
      if (v14 == a3 || (v3 = v14, *v14 != 41))
LABEL_30:
        sub_20BE8F9A4();
      sub_20BE911E4((_QWORD *)a1, v13);
    }
    --*v11;
    return ++v3;
  }
  if (v6 == 46)
  {
    v7 = operator new(0x10uLL);
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *v7 = &unk_24C51A790;
    v7[1] = v9;
    *(_QWORD *)(v8 + 8) = v7;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if ((v6 - 42) < 2)
    goto LABEL_29;
  return sub_20BE9128C(a1, a2, a3);
}

unsigned __int8 *sub_20BE8F5AC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  int v6;
  int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  char v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  int v28;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    v15 = a2 + 1;
    v16 = sub_20BE94FA0(a1, a2 + 1, a3, &v28);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = v28;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = v28;
LABEL_33:
              v21 = a4;
              v22 = 0;
LABEL_46:
              sub_20BE94E6C(a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = v28;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = v28;
LABEL_45:
            v21 = a4;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = v28;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = v28;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = sub_20BE94FA0(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = v28;
          if (v27 >= v28)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = a4;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      sub_20BE95088();
    }
LABEL_58:
    sub_20BE9503C();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      v14 = 0;
      goto LABEL_26;
    }
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

__n128 sub_20BE8F8AC(uint64_t a1, char a2)
{
  char *v4;
  uint64_t v5;
  __n128 result;

  v4 = (char *)operator new(0x30uLL);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_QWORD *)v4 = &unk_24C51A700;
  *((_QWORD *)v4 + 1) = v5;
  std::locale::locale((std::locale *)v4 + 2, (const std::locale *)a1);
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v4 + 24) = result;
  v4[40] = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

uint64_t sub_20BE8F920(uint64_t a1, uint64_t a2, char a3, int a4)
{
  void *v8;
  uint64_t result;

  v8 = operator new(0x58uLL);
  result = sub_20BE8FD74((uint64_t)v8, a2, a3, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), a4);
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_20BE8F990(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20BE8F9A4()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 6);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE8F9DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE8F9F0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51A640;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20BE8FA34(_QWORD *__p)
{
  uint64_t v2;

  *__p = &unk_24C51A640;
  v2 = __p[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_20BE8FA78(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

_QWORD *sub_20BE8FAD8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51A640;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20BE8FB1C(_QWORD *__p)
{
  uint64_t v2;

  *__p = &unk_24C51A640;
  v2 = __p[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_20BE8FB60(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_20BE8FBB0(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A700;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20BE8FC08(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A700;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t sub_20BE8FC60(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

uint64_t sub_20BE8FD74(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  *(_QWORD *)a1 = &unk_24C51A748;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 64) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 80) = a5;
  *(_BYTE *)(a1 + 84) = a3;
  return a1;
}

std::locale *sub_20BE8FE00(std::locale *a1)
{
  std::locale *v2;
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A748;
  v2 = a1 + 2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a1[7]);
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20BE8FE68(std::locale *a1)
{
  std::locale *v2;
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A748;
  v2 = a1 + 2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a1[7]);
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

void sub_20BE8FED0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  void *__p;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  char v27;
  char v28;
  uint64_t v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0uLL;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  __p = 0;
  v19 = 0;
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v20 = 0;
  *(_QWORD *)&v21 = v5;
  *((_QWORD *)&v21 + 1) = v5;
  v22 = 0;
  sub_20BE904C8((char **)&__p, v4, &v21);
  v23 = v6;
  v24 = v6;
  v25 = 0;
  v26 = v21;
  v27 = v22;
  v29 = v6;
  v28 = 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(_QWORD *)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_20BE900C8(a1 + 16, v7, *(_QWORD *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  v10 = (char *)__p;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (_BYTE *)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &v10[24 * v15];
    v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)v17 = *(_OWORD *)v16;
    *(_BYTE *)(v17 + 16) = v16[16];
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  v19 = v10;
  operator delete(v10);
}

void sub_20BE90038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20BE90058(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  _OWORD *v8;
  char *result;

  *(_QWORD *)(a1 + 24) = a4;
  v8 = (_OWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 32) = a4;
  *(_BYTE *)(a1 + 40) = 0;
  result = sub_20BE904C8((char **)a1, a2, (__int128 *)(a1 + 24));
  *(_QWORD *)(a1 + 48) = a3;
  *(_QWORD *)(a1 + 56) = a3;
  *(_BYTE *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = *v8;
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a1 + 40);
  if ((a5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = a3;
  *(_BYTE *)(a1 + 96) = 1;
  return result;
}

uint64_t sub_20BE900C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  _OWORD *v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  uint64_t *v34;
  _BYTE v37[56];
  void *__p[2];
  _QWORD v39[4];
  __int128 v40;
  char v41;
  _OWORD *v42;
  _OWORD *v43;
  unint64_t v44;

  v42 = 0;
  v43 = 0;
  v44 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_QWORD *)&v40 = a3;
    *((_QWORD *)&v40 + 1) = a3;
    v41 = 0;
    *(_DWORD *)v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v39, 0, 21);
    v43 = (_OWORD *)sub_20BE90780((uint64_t *)&v42, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v37[32])
    {
      *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    v34 = a4;
    v11 = v43;
    *((_DWORD *)v43 - 24) = 0;
    *((_QWORD *)v11 - 11) = a2;
    *((_QWORD *)v11 - 10) = a2;
    *((_QWORD *)v11 - 9) = a3;
    sub_20BE9067C((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v40);
    sub_20BE906B8((uint64_t)v43 - 40, *(unsigned int *)(a1 + 32));
    v12 = v43;
    *((_QWORD *)v43 - 2) = v6;
    *((_DWORD *)v12 - 2) = a5;
    *((_BYTE *)v12 - 4) = a6;
    v13 = 1;
    while (2)
    {
      if ((v13 & 0xFFF) == 0 && (int)(v13 >> 12) >= (int)a3 - (int)a2)
        sub_20BE906E8();
      v15 = v12 - 1;
      v14 = *((_QWORD *)v12 - 2);
      v16 = v12 - 6;
      if (v14)
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v14 + 16))(v14, v12 - 6);
      switch(*(_DWORD *)v16)
      {
        case 0xFFFFFC18:
          v17 = *((_QWORD *)v12 - 10);
          if ((a5 & 0x20) != 0 && v17 == a2 || (a5 & 0x1000) != 0 && v17 != a3)
            goto LABEL_16;
          v25 = *v34;
          *(_QWORD *)v25 = a2;
          *(_QWORD *)(v25 + 8) = v17;
          *(_BYTE *)(v25 + 16) = 1;
          v26 = *((_QWORD *)v12 - 8);
          v27 = *((_QWORD *)v12 - 7) - v26;
          if (v27)
          {
            v28 = 0xAAAAAAAAAAAAAAABLL * (v27 >> 3);
            v29 = (_BYTE *)(v26 + 16);
            v30 = 1;
            do
            {
              v31 = v25 + 24 * v30;
              *(_OWORD *)v31 = *((_OWORD *)v29 - 1);
              v32 = *v29;
              v29 += 24;
              *(_BYTE *)(v31 + 16) = v32;
            }
            while (v28 > v30++);
          }
          v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          v18 = v43 - 6;
          sub_20BE90AE8((uint64_t)&v44, (_QWORD *)v43 - 12);
          v43 = v18;
          goto LABEL_23;
        case 0xFFFFFC20:
          v19 = *(v12 - 5);
          *(_OWORD *)v37 = *v16;
          *(_OWORD *)&v37[16] = v19;
          memset(&v37[32], 0, 24);
          sub_20BE90E20(&v37[32], *((__int128 **)v12 - 8), *((__int128 **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          sub_20BE90E9C((char *)__p, *((__int128 **)v12 - 5), *((__int128 **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          v20 = *v15;
          *(_QWORD *)((char *)&v39[1] + 5) = *(_QWORD *)((char *)v12 - 11);
          v39[1] = v20;
          (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v15 + 24))(*v15, 1, v12 - 6);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v39[1] + 24))(v39[1], 0, v37);
          v21 = v43;
          if ((unint64_t)v43 >= v44)
          {
            v43 = (_OWORD *)sub_20BE90780((uint64_t *)&v42, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v22 = *(_OWORD *)&v37[16];
            *v43 = *(_OWORD *)v37;
            v21[1] = v22;
            *((_QWORD *)v21 + 4) = 0;
            *((_QWORD *)v21 + 5) = 0;
            *((_QWORD *)v21 + 6) = 0;
            *((_QWORD *)v21 + 7) = 0;
            v21[2] = *(_OWORD *)&v37[32];
            *((_QWORD *)v21 + 6) = *(_QWORD *)&v37[48];
            memset(&v37[32], 0, 24);
            *((_QWORD *)v21 + 8) = 0;
            *((_QWORD *)v21 + 9) = 0;
            *(_OWORD *)((char *)v21 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v21 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            v23 = v39[1];
            *(_QWORD *)((char *)v21 + 85) = *(_QWORD *)((char *)&v39[1] + 5);
            *((_QWORD *)v21 + 10) = v23;
            v43 = v21 + 6;
          }
          if (*(_QWORD *)&v37[32])
          {
            *(_QWORD *)&v37[40] = *(_QWORD *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          v12 = v43;
          ++v13;
          if (v42 != v43)
            continue;
          v6 = 0;
          break;
        default:
          sub_20BE90734();
      }
      break;
    }
  }
  *(_QWORD *)v37 = &v42;
  sub_20BE90F4C((void ***)v37);
  return v6;
}

void sub_20BE90470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;

  sub_20BE9063C(&a13);
  a13 = v18 - 112;
  sub_20BE90F4C((void ***)&a13);
  _Unwind_Resume(a1);
}

char *sub_20BE904C8(char **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  char *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) >= a2)
  {
    v15 = a1[1];
    v16 = (v15 - result) / 24;
    if (v16 >= a2)
      v17 = a2;
    else
      v17 = (v15 - result) / 24;
    if (v17)
    {
      v18 = result;
      do
      {
        *(_OWORD *)v18 = *a3;
        v18[16] = *((_BYTE *)a3 + 16);
        v18 += 24;
        --v17;
      }
      while (v17);
    }
    if (a2 <= v16)
    {
      a1[1] = &result[24 * a2];
    }
    else
    {
      v19 = &v15[24 * (a2 - v16)];
      v20 = 24 * a2 - 24 * v16;
      do
      {
        v21 = *a3;
        *((_QWORD *)v15 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v15 = v21;
        v15 += 24;
        v20 -= 24;
      }
      while (v20);
      a1[1] = v19;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    result = sub_20BDE4FA4(a1, v10);
    v11 = a1[1];
    v12 = &v11[24 * a2];
    v13 = 24 * a2;
    do
    {
      v14 = *a3;
      *((_QWORD *)v11 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v11 = v14;
      v11 += 24;
      v13 -= 24;
    }
    while (v13);
    a1[1] = v12;
  }
  return result;
}

_QWORD *sub_20BE9063C(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20BE9067C(uint64_t a1, unint64_t a2, __int128 *a3)
{
  unint64_t v3;
  BOOL v4;
  unint64_t v5;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = a2 >= v3;
  v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    sub_20BE90BA0((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void sub_20BE906B8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_20BE90D14((void **)a1, a2 - v2);
  }
}

void sub_20BE906E8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 12);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE90720(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20BE90734()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 16);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE9076C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE90780(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  void *v16[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x155555555555555)
    v9 = 0x2AAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BE90940(v7, v9);
  else
    v10 = 0;
  v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v11 + 9) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v13 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v11 + 85) = *(_QWORD *)(a2 + 85);
  *((_QWORD *)v11 + 10) = v13;
  v16[2] = v11 + 96;
  sub_20BE908CC(a1, v16);
  v14 = a1[1];
  sub_20BE90B2C(v16);
  return v14;
}

void sub_20BE908B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE90B2C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE908CC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BE90984((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20BE90940(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    sub_20BDDF5B4();
  return operator new(96 * a2);
}

uint64_t sub_20BE90984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 80) = v8;
      *(_QWORD *)(v7 - 56) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(_QWORD *)(v7 - 48) = *(_QWORD *)(a3 - 48);
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 11) = *(_QWORD *)(a3 - 11);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 96;
      *((_QWORD *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20BE90A64((uint64_t)v12);
  return v10;
}

uint64_t sub_20BE90A64(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BE90A98((uint64_t *)a1);
  return a1;
}

void sub_20BE90A98(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  v1 = *(_QWORD **)(a1[2] + 8);
  v2 = *(_QWORD **)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20BE90AE8(v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void sub_20BE90AE8(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;

  v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **sub_20BE90B2C(void **a1)
{
  sub_20BE90B5C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20BE90B5C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    sub_20BE90AE8(v4, (_QWORD *)(i - 96));
  }
}

void sub_20BE90BA0(void **a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  char *v23;
  char *v24;
  char *v25;
  __int128 v26;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        v17 = *a3;
        v9[2] = *((_QWORD *)a3 + 2);
        *(_OWORD *)v9 = v17;
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (_BYTE *)*a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)sub_20BDE4FF4(v6, v13);
    else
      v14 = 0;
    v18 = &v14[24 * v10];
    v19 = &v18[24 * a2];
    v20 = 24 * a2;
    v21 = v18;
    do
    {
      v22 = *a3;
      *((_QWORD *)v21 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v21 = v22;
      v21 += 24;
      v20 -= 24;
    }
    while (v20);
    v23 = &v14[24 * v13];
    v25 = (char *)*a1;
    v24 = (char *)a1[1];
    if (v24 != *a1)
    {
      do
      {
        v26 = *(_OWORD *)(v24 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v24 - 1);
        *(_OWORD *)(v18 - 24) = v26;
        v18 -= 24;
        v24 -= 24;
      }
      while (v24 != v25);
      v24 = (char *)*a1;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v23;
    if (v24)
      operator delete(v24);
  }
}

void sub_20BE90D14(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_20BDDF694();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_20BDEA2F0(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

char *sub_20BE90E20(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDE4FA4(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20BE90E80(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20BE90E9C(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BE90F0C(result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20BE90EF0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20BE90F0C(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_20BDDF694();
  result = (char *)sub_20BDEA2F0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void sub_20BE90F4C(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        sub_20BE90AE8((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *sub_20BE90FD0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *result;

  if (a2 == a3 || *a2 != 92)
    return a2;
  v5 = a2 + 1;
  if (a2 + 1 == a3)
    sub_20BE91384();
  result = sub_20BE913D0(a1, a2 + 1, a3);
  if (result == v5)
  {
    result = (unsigned __int8 *)sub_20BE9148C(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      result = sub_20BE91558(a1, a2 + 1, (char *)a3, 0);
      if (result == v5)
        return a2;
    }
  }
  return result;
}

char *sub_20BE91070(uint64_t a1, char *a2, char *a3)
{
  char *v5;
  uint64_t *v6;
  uint64_t *v7;
  char *v8;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_20;
    v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    v6 = (uint64_t *)sub_20BE921CC(a1, a2[1] == 94);
    if (v5 == a3)
      goto LABEL_20;
    v7 = v6;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      sub_20BE92244((uint64_t)v6, 93);
      ++v5;
    }
    if (v5 == a3)
      goto LABEL_20;
    do
    {
      v8 = v5;
      v5 = sub_20BE9354C(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3)
      goto LABEL_20;
    if (*v8 == 45)
    {
      sub_20BE92244((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93)
LABEL_20:
      sub_20BE93500();
    return v8 + 1;
  }
  return a2;
}

_QWORD *sub_20BE91180(_QWORD *result)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  if ((result[3] & 2) == 0)
  {
    v1 = result;
    result = operator new(0x18uLL);
    v2 = *((_DWORD *)v1 + 7) + 1;
    *((_DWORD *)v1 + 7) = v2;
    v3 = v1[7];
    v4 = *(_QWORD *)(v3 + 8);
    *result = &unk_24C51A9D0;
    result[1] = v4;
    *((_DWORD *)result + 4) = v2;
    *(_QWORD *)(v3 + 8) = result;
    v1[7] = *(_QWORD *)(v1[7] + 8);
  }
  return result;
}

_QWORD *sub_20BE911E4(_QWORD *result, int a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if ((result[3] & 2) == 0)
  {
    v3 = result;
    result = operator new(0x18uLL);
    v4 = v3[7];
    v5 = *(_QWORD *)(v4 + 8);
    *result = &unk_24C51AA18;
    result[1] = v5;
    *((_DWORD *)result + 4) = a2;
    *(_QWORD *)(v4 + 8) = result;
    v3[7] = *(_QWORD *)(v3[7] + 8);
  }
  return result;
}

void sub_20BE91240()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 11);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE91278(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20BE9128C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;
  BOOL v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = (char)*a2;
    v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      sub_20BE91824(a1, (char)v4);
      ++v3;
    }
  }
  return v3;
}

_QWORD *sub_20BE912FC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51A640;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20BE91340(_QWORD *__p)
{
  uint64_t v2;

  *__p = &unk_24C51A640;
  v2 = __p[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

void sub_20BE91384()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 3);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE913BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20BE913D0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;

  if (a2 == a3)
    return a2;
  v4 = *a2;
  v5 = (v4 - 48);
  if (v4 == 48)
  {
    sub_20BE91824(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8)
    return a2;
  v6 = a3;
  v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      v8 = *v7;
      if ((v8 - 48) > 9)
        break;
      if (v5 >= 0x19999999)
        goto LABEL_16;
      ++v7;
      LODWORD(v5) = v8 + 10 * v5 - 48;
      if (v7 == a3)
        goto LABEL_12;
    }
    v6 = v7;
LABEL_12:
    if (!(_DWORD)v5)
      goto LABEL_16;
  }
  if (v5 > *(_DWORD *)(a1 + 28))
LABEL_16:
    sub_20BE91908();
  sub_20BE91954(a1, v5);
  return v6;
}

char *sub_20BE9148C(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v4;
  char v5;
  char v6;
  _DWORD *v7;
  int v8;
  char v9;
  _DWORD *v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100)
      return v3;
    v6 = 0;
LABEL_12:
    v7 = sub_20BE921CC(a1, v6);
    v8 = v7[40] | 0x400;
LABEL_18:
    v7[40] = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      v6 = 1;
      goto LABEL_12;
    case 'S':
      v9 = 1;
LABEL_17:
      v7 = sub_20BE921CC(a1, v9);
      v8 = v7[40] | 0x4000;
      goto LABEL_18;
    case 'W':
      v5 = 1;
LABEL_15:
      v10 = sub_20BE921CC(a1, v5);
      v10[40] |= 0x500u;
      sub_20BE92244((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

unsigned __int8 *sub_20BE91558(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this)
{
  unsigned __int8 *v4;
  int v5;
  char v6;
  std::string *v7;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  uint64_t v16;

  v4 = a2;
  if (a2 != (unsigned __int8 *)a3)
  {
    v5 = (char)*a2;
    if (v5 > 109)
    {
      v6 = 0;
      switch(*a2)
      {
        case 'n':
          if (this)
          {
            v7 = this;
            LOBYTE(v8) = 10;
            goto LABEL_50;
          }
          v8 = 10;
          goto LABEL_59;
        case 'r':
          if (this)
          {
            v7 = this;
            LOBYTE(v8) = 13;
            goto LABEL_50;
          }
          v8 = 13;
          goto LABEL_59;
        case 't':
          if (this)
          {
            v7 = this;
            LOBYTE(v8) = 9;
            goto LABEL_50;
          }
          v8 = 9;
          goto LABEL_59;
        case 'u':
          if (a2 + 1 == (unsigned __int8 *)a3)
            goto LABEL_64;
          v9 = a2[1];
          if ((v9 & 0xF8) != 0x30 && (v9 & 0xFE) != 0x38 && (v9 | 0x20u) - 97 >= 6)
            goto LABEL_64;
          v4 = a2 + 2;
          if (a2 + 2 == (unsigned __int8 *)a3)
            goto LABEL_64;
          v10 = *v4;
          v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38)
            goto LABEL_24;
          v10 |= 0x20u;
          if ((v10 - 97) >= 6)
            goto LABEL_64;
          v11 = -87;
LABEL_24:
          v6 = 16 * (v11 + v10);
LABEL_25:
          if (v4 + 1 == (unsigned __int8 *)a3)
            goto LABEL_64;
          v12 = v4[1];
          v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
            goto LABEL_30;
          v12 |= 0x20u;
          if ((v12 - 97) >= 6)
            goto LABEL_64;
          v13 = -87;
LABEL_30:
          if (v4 + 2 == (unsigned __int8 *)a3)
            goto LABEL_64;
          v14 = v4[2];
          v15 = -48;
          if ((v14 & 0xF8) == 0x30 || (v14 & 0xFE) == 0x38)
            goto LABEL_35;
          v14 |= 0x20u;
          if ((v14 - 97) >= 6)
            goto LABEL_64;
          v15 = -87;
LABEL_35:
          if (this)
            std::string::operator=(this, v15 + v14 + 16 * (v13 + v12 + v6));
          else
            sub_20BE91824(a1, (char)(v15 + v14 + 16 * (v13 + v12 + v6)));
          v4 += 3;
          return v4;
        case 'v':
          if (this)
          {
            v7 = this;
            LOBYTE(v8) = 11;
            goto LABEL_50;
          }
          v8 = 11;
          break;
        case 'x':
          goto LABEL_25;
        default:
          goto LABEL_45;
      }
      goto LABEL_59;
    }
    if (v5 == 48)
    {
      if (this)
      {
        v7 = this;
        LOBYTE(v8) = 0;
        goto LABEL_50;
      }
      v8 = 0;
LABEL_59:
      sub_20BE91824(a1, v8);
      return ++v4;
    }
    if (v5 != 99)
    {
      if (v5 == 102)
      {
        if (this)
        {
          v7 = this;
          LOBYTE(v8) = 12;
LABEL_50:
          std::string::operator=(v7, v8);
          return ++v4;
        }
        v8 = 12;
        goto LABEL_59;
      }
LABEL_45:
      if (*a2 != 95
        && ((v5 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * *a2) & 0x500) == 0))
      {
        v8 = (char)v5;
        if (this)
        {
          v7 = this;
          goto LABEL_50;
        }
        goto LABEL_59;
      }
LABEL_64:
      sub_20BE91384();
    }
    if (a2 + 1 == (unsigned __int8 *)a3 || ((a2[1] & 0xDF) - 65) > 0x19u)
      goto LABEL_64;
    v16 = a2[1] & 0x1F;
    if (this)
      std::string::operator=(this, v16);
    else
      sub_20BE91824(a1, v16);
    v4 += 2;
  }
  return v4;
}

uint64_t sub_20BE91824(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    result = sub_20BE91A20((uint64_t)v8, a1, a2, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8));
LABEL_6:
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = (char *)operator new(0x30uLL);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &unk_24C51A820;
    *((_QWORD *)v8 + 1) = v9;
    result = (uint64_t)std::locale::locale((std::locale *)v8 + 2, (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    v8[40] = a2;
    goto LABEL_6;
  }
  result = (uint64_t)operator new(0x18uLL);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &unk_24C51A868;
  *(_QWORD *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_20BE918F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20BE91908()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 4);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE91940(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE91954(uint64_t a1, int a2)
{
  int v4;
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  std::locale *v8;
  std::locale *v9;
  std::locale::__imp *v10;
  char *v11;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = (char *)&unk_24C51A8A0;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = v10;
    result = std::locale::locale(v8 + 2, (const std::locale *)a1);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)(a1 + 8);
    LODWORD(v9[5].__locale_) = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = (std::locale *)operator new(0x30uLL);
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = (char *)&unk_24C51A8E8;
    goto LABEL_6;
  }
  result = operator new(0x18uLL);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *result = &unk_24C51A940;
  result[1] = v7;
  *((_DWORD *)result + 4) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

uint64_t sub_20BE91A20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)a1 = &unk_24C51A7D8;
  *(_QWORD *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 40) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 40))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_20BE91A8C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::locale *v2;
  uint64_t v4;

  std::locale::~locale(v2);
  *v1 = &unk_24C51A640;
  v4 = v1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

std::locale *sub_20BE91AC4(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A7D8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20BE91B1C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A7D8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t sub_20BE91B74(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *sub_20BE91BEC(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A820;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20BE91C44(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A820;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t sub_20BE91C9C(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

_QWORD *sub_20BE91CE4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51A640;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20BE91D28(_QWORD *__p)
{
  uint64_t v2;

  *__p = &unk_24C51A640;
  v2 = __p[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_20BE91D6C(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *sub_20BE91DB4(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A8B0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20BE91E0C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A8B0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t sub_20BE91E64(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *sub_20BE91F48(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A8F8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20BE91FA0(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A8F8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  operator delete(a1);
}

uint64_t sub_20BE91FF8(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = *(unsigned __int8 **)(a2 + 16);
      v10 = v6;
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v9++;
        if (v11 != v13)
          break;
        if (!--v10)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

_QWORD *sub_20BE92088(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51A640;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20BE920CC(_QWORD *__p)
{
  uint64_t v2;

  *__p = &unk_24C51A640;
  v2 = __p[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

unsigned int *sub_20BE92110(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    sub_20BE91908();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

void *sub_20BE921CC(uint64_t a1, char a2)
{
  void *v4;

  v4 = operator new(0xB0uLL);
  sub_20BE92470((uint64_t)v4, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), a2, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v4;
  *(_QWORD *)(a1 + 56) = v4;
  return v4;
}

void sub_20BE92230(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20BE92244(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_20BDDF694();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

uint64_t sub_20BE92470(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)a1 = &unk_24C51A988;
  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_20BE92580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  _QWORD *v10;
  std::locale *v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  sub_20BDE5038((void ***)&a10);
  v14 = (void *)v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  sub_20BE93030((void ***)&a10);
  v15 = (void *)v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = *v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  *v10 = &unk_24C51A640;
  v17 = v10[1];
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  _Unwind_Resume(a1);
}

std::locale *sub_20BE9260C(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A988;
  v7 = a1 + 17;
  sub_20BDE5038((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  sub_20BE93030((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_20BE926C0(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_24C51A988;
  v6 = a1 + 17;
  sub_20BDE5038((void ***)&v6);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v6 = a1 + 11;
  sub_20BE93030((void ***)&v6);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C51A640;
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  operator delete(a1);
}

void sub_20BE92778(uint64_t a1, uint64_t a2)
{
  signed __int8 *v4;
  signed __int8 *v5;
  signed __int8 v6;
  signed __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  size_t v19;
  const void *p_p;
  uint64_t v21;
  BOOL v22;
  int v23;
  size_t v24;
  const void *v25;
  size_t v26;
  int v27;
  _BOOL4 v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  BOOL v34;
  int v35;
  int v36;
  uint64_t v37;
  size_t v38;
  unsigned __int8 v39;
  unsigned __int8 *v40;
  unint64_t v41;
  int v42;
  unsigned int v43;
  int v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  size_t v53;
  const void *v54;
  uint64_t v55;
  BOOL v56;
  int v57;
  size_t v58;
  const void *v59;
  size_t v60;
  int v61;
  _BOOL4 v62;
  int v63;
  size_t v64;
  const void *v65;
  size_t v66;
  int v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void *v74;
  size_t v75;
  size_t v76;
  uint64_t v77;
  BOOL v78;
  unsigned __int8 **v79;
  unsigned __int8 *v80;
  int v81;
  unsigned __int8 *v82;
  void **v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  unsigned int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  size_t v94;
  void *v95;
  size_t v96;
  uint64_t v97;
  BOOL v98;
  unsigned __int8 **v99;
  unsigned __int8 *v100;
  int v101;
  unsigned __int8 *v102;
  void **v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  int v108;
  int v109;
  int v110;
  uint64_t v111;
  int v112;
  char v113;
  char v114;
  uint64_t v115;
  int v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *__p;
  size_t v123;
  char v124;
  unsigned __int8 v125;
  unsigned __int8 v126;
  uint64_t v127;

  v4 = *(signed __int8 **)(a2 + 16);
  v5 = *(signed __int8 **)(a2 + 24);
  if (v4 == v5)
  {
    v37 = 0;
    v36 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_221;
  }
  if (!*(_BYTE *)(a1 + 171) || v4 + 1 == v5)
    goto LABEL_58;
  v6 = *v4;
  v125 = *v4;
  v7 = v4[1];
  v126 = v7;
  if (*(_BYTE *)(a1 + 169))
  {
    v125 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v6);
    v126 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7);
  }
  v8 = a1 + 16;
  sub_20BE931D4(a1 + 16, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  if ((v124 & 0x80000000) == 0)
  {
    if (v124)
      goto LABEL_8;
LABEL_58:
    v36 = 0;
    v37 = 1;
    goto LABEL_59;
  }
  v38 = v123;
  operator delete(__p);
  if (!v38)
    goto LABEL_58;
LABEL_8:
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 120) - v9;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (_BYTE *)(v9 + 1);
    do
    {
      if (v125 == *(v12 - 1) && v126 == *v12)
        goto LABEL_218;
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  if (!*(_BYTE *)(a1 + 170) || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
  {
    v36 = 0;
  }
  else
  {
    sub_20BE93138(a1 + 16, (char *)&v125, (char *)&v127);
    v14 = *(_QWORD *)(a1 + 88);
    v15 = v124;
    v16 = *(_QWORD *)(a1 + 96) - v14;
    if (v16)
    {
      v17 = 0;
      v18 = v16 / 48;
      v113 = v124;
      if (v124 >= 0)
        v19 = v124;
      else
        v19 = v123;
      if (v124 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v18 <= 1)
        v21 = 1;
      else
        v21 = v16 / 48;
      v22 = 1;
      while (1)
      {
        v23 = *(char *)(v14 + 23);
        if (v23 >= 0)
          v24 = *(unsigned __int8 *)(v14 + 23);
        else
          v24 = *(_QWORD *)(v14 + 8);
        if (v23 >= 0)
          v25 = (const void *)v14;
        else
          v25 = *(const void **)v14;
        if (v24 >= v19)
          v26 = v19;
        else
          v26 = v24;
        v27 = memcmp(p_p, v25, v26);
        v28 = v19 >= v24;
        if (v27)
          v28 = v27 >= 0;
        if (v28)
        {
          v29 = *(char *)(v14 + 47);
          if (v29 >= 0)
            v30 = *(unsigned __int8 *)(v14 + 47);
          else
            v30 = *(_QWORD *)(v14 + 32);
          if (v29 >= 0)
            v31 = (const void *)(v14 + 24);
          else
            v31 = *(const void **)(v14 + 24);
          if (v19 >= v30)
            v32 = v30;
          else
            v32 = v19;
          v33 = memcmp(v31, p_p, v32);
          v34 = v30 >= v19;
          if (v33)
            v34 = v33 >= 0;
          if (v34)
            break;
        }
        v22 = ++v17 < v18;
        v14 += 48;
        if (v21 == v17)
        {
          v35 = 0;
          v36 = 0;
          goto LABEL_162;
        }
      }
      v36 = 1;
      v35 = 5;
LABEL_162:
      v8 = a1 + 16;
      v15 = v113;
    }
    else
    {
      v22 = 0;
      v35 = 0;
      v36 = 0;
    }
    if (v15 < 0)
      operator delete(__p);
    if (v22)
      goto LABEL_195;
  }
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    goto LABEL_200;
  sub_20BE9340C(v8, (char *)&v125, (char *)&v127, (uint64_t)&__p);
  v89 = *(_QWORD *)(a1 + 136);
  v90 = v124;
  v91 = *(_QWORD *)(a1 + 144) - v89;
  if (v91)
  {
    v92 = 0;
    v93 = v91 / 24;
    v95 = __p;
    v94 = v123;
    if (v124 >= 0)
      v96 = v124;
    else
      v96 = v123;
    if (v93 <= 1)
      v97 = 1;
    else
      v97 = v91 / 24;
    v98 = 1;
    while (1)
    {
      v99 = (unsigned __int8 **)(v89 + 24 * v92);
      v100 = (unsigned __int8 *)*((unsigned __int8 *)v99 + 23);
      v101 = (char)v100;
      if ((char)v100 < 0)
        v100 = v99[1];
      if ((unsigned __int8 *)v96 == v100)
      {
        if (v101 >= 0)
          v102 = (unsigned __int8 *)(v89 + 24 * v92);
        else
          v102 = *v99;
        if ((v90 & 0x80) == 0)
        {
          if ((_DWORD)v90)
          {
            v103 = &__p;
            v104 = v90;
            do
            {
              if (*(unsigned __int8 *)v103 != *v102)
                goto LABEL_188;
              v103 = (void **)((char *)v103 + 1);
              ++v102;
              --v104;
            }
            while (v104);
            v36 = 1;
            v35 = 5;
            goto LABEL_192;
          }
          v36 = 1;
          if (v98)
            goto LABEL_220;
LABEL_200:
          if ((char)v125 < 0)
          {
            v109 = *(_DWORD *)(a1 + 164);
            goto LABEL_213;
          }
          v106 = *(_DWORD *)(a1 + 160);
          v107 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
          v108 = *(_DWORD *)(v107 + 4 * v125);
          if ((v108 & v106) == 0 && (v125 != 95 || (v106 & 0x80) == 0)
            || (char)v126 < 0
            || (*(_DWORD *)(v107 + 4 * v126) & v106) == 0 && ((v106 & 0x80) == 0 || v126 != 95))
          {
            v109 = *(_DWORD *)(a1 + 164);
            if ((v108 & v109) != 0 || v125 == 95 && (v109 & 0x80) != 0)
            {
LABEL_217:
              v110 = v36;
              goto LABEL_219;
            }
LABEL_213:
            if (((char)v126 & 0x80000000) == 0)
            {
              if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v126) & v109) != 0)
                goto LABEL_217;
              v110 = 1;
              if (v126 == 95 && (v109 & 0x80) != 0)
                goto LABEL_217;
LABEL_219:
              v36 = v110;
LABEL_220:
              v37 = 2;
              goto LABEL_221;
            }
          }
LABEL_218:
          v110 = 1;
          goto LABEL_219;
        }
        v118 = v93;
        v121 = v90;
        v105 = memcmp(v95, v102, v94);
        v93 = v118;
        v90 = v121;
        if (!v105)
          break;
      }
LABEL_188:
      v98 = ++v92 < v93;
      if (v92 == v97)
        goto LABEL_191;
    }
    v35 = 5;
    v36 = 1;
    goto LABEL_193;
  }
  v98 = 0;
LABEL_191:
  v35 = 0;
LABEL_192:
  if ((v90 & 0x80) != 0)
LABEL_193:
    operator delete(__p);
  if (!v98)
    goto LABEL_200;
LABEL_195:
  if (v35)
    goto LABEL_220;
  v37 = 2;
LABEL_59:
  v39 = **(_BYTE **)(a2 + 16);
  v125 = v39;
  if (*(_BYTE *)(a1 + 169))
  {
    v39 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v39);
    v125 = v39;
  }
  v40 = *(unsigned __int8 **)(a1 + 40);
  v41 = *(_QWORD *)(a1 + 48) - (_QWORD)v40;
  if (v41)
  {
    if (v41 <= 1)
      v41 = 1;
    while (1)
    {
      v42 = *v40++;
      if (v42 == v39)
        break;
      if (!--v41)
        goto LABEL_66;
    }
LABEL_77:
    v36 = 1;
    goto LABEL_221;
  }
LABEL_66:
  v43 = *(_DWORD *)(a1 + 164);
  if (v43 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    if ((v39 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v39) & v43) == 0)
      v44 = (v39 == 95) & (v43 >> 7);
    else
      LOBYTE(v44) = 1;
    v45 = *(void **)(a1 + 72);
    v46 = memchr(*(void **)(a1 + 64), (char)v39, (size_t)v45 - *(_QWORD *)(a1 + 64));
    v47 = v46 ? v46 : v45;
    if ((v44 & 1) == 0 && v47 == v45)
      goto LABEL_77;
  }
  v49 = *(_QWORD *)(a1 + 88);
  v48 = *(_QWORD *)(a1 + 96);
  if (v49 != v48)
  {
    if (*(_BYTE *)(a1 + 170))
    {
      sub_20BE93138(a1 + 16, (char *)&v125, (char *)&v126);
      v49 = *(_QWORD *)(a1 + 88);
      v48 = *(_QWORD *)(a1 + 96);
    }
    else
    {
      v124 = 1;
      LOWORD(__p) = v39;
    }
    v50 = v48 - v49;
    if (v50)
    {
      v119 = v37;
      v116 = v36;
      v51 = 0;
      v52 = v50 / 48;
      v114 = v124;
      if (v124 >= 0)
        v53 = v124;
      else
        v53 = v123;
      if (v124 >= 0)
        v54 = &__p;
      else
        v54 = __p;
      if (v52 <= 1)
        v55 = 1;
      else
        v55 = v50 / 48;
      v56 = 1;
      while (1)
      {
        v57 = *(char *)(v49 + 23);
        if (v57 >= 0)
          v58 = *(unsigned __int8 *)(v49 + 23);
        else
          v58 = *(_QWORD *)(v49 + 8);
        if (v57 >= 0)
          v59 = (const void *)v49;
        else
          v59 = *(const void **)v49;
        if (v58 >= v53)
          v60 = v53;
        else
          v60 = v58;
        v61 = memcmp(v54, v59, v60);
        v62 = v53 >= v58;
        if (v61)
          v62 = v61 >= 0;
        if (v62)
        {
          v63 = *(char *)(v49 + 47);
          if (v63 >= 0)
            v64 = *(unsigned __int8 *)(v49 + 47);
          else
            v64 = *(_QWORD *)(v49 + 32);
          if (v63 >= 0)
            v65 = (const void *)(v49 + 24);
          else
            v65 = *(const void **)(v49 + 24);
          if (v53 >= v64)
            v66 = v64;
          else
            v66 = v53;
          v67 = memcmp(v65, v54, v66);
          v68 = v64 >= v53;
          if (v67)
            v68 = v67 >= 0;
          if (v68)
            break;
        }
        v56 = ++v51 < v52;
        v49 += 48;
        if (v55 == v51)
        {
          v36 = v116;
          goto LABEL_123;
        }
      }
      v36 = 1;
LABEL_123:
      v37 = v119;
      if ((v114 & 0x80) == 0)
        goto LABEL_125;
    }
    else
    {
      v56 = 0;
      if ((v124 & 0x80) == 0)
        goto LABEL_125;
    }
    operator delete(__p);
LABEL_125:
    if (v56)
      goto LABEL_221;
  }
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    goto LABEL_154;
  sub_20BE9340C(a1 + 16, (char *)&v125, (char *)&v126, (uint64_t)&__p);
  v69 = *(_QWORD *)(a1 + 136);
  v70 = v124;
  v71 = *(_QWORD *)(a1 + 144) - v69;
  if (v71)
  {
    v120 = v37;
    v72 = 0;
    v73 = v71 / 24;
    v74 = __p;
    v75 = v123;
    if (v124 >= 0)
      v76 = v124;
    else
      v76 = v123;
    if (v73 <= 1)
      v77 = 1;
    else
      v77 = v71 / 24;
    v78 = 1;
    while (1)
    {
      v79 = (unsigned __int8 **)(v69 + 24 * v72);
      v80 = (unsigned __int8 *)*((unsigned __int8 *)v79 + 23);
      v81 = (char)v80;
      if ((char)v80 < 0)
        v80 = v79[1];
      if ((unsigned __int8 *)v76 == v80)
      {
        if (v81 >= 0)
          v82 = (unsigned __int8 *)(v69 + 24 * v72);
        else
          v82 = *v79;
        if ((v70 & 0x80) != 0)
        {
          v117 = v36;
          v85 = v73;
          v115 = v77;
          v86 = memcmp(v74, v82, v75);
          v77 = v115;
          v73 = v85;
          v36 = v117;
          if (!v86)
          {
            v36 = 1;
            v37 = v120;
            goto LABEL_152;
          }
        }
        else
        {
          if (!(_DWORD)v70)
          {
            v36 = 1;
            v37 = v120;
            if (!v78)
              goto LABEL_154;
            goto LABEL_221;
          }
          v83 = &__p;
          v84 = v70;
          while (*(unsigned __int8 *)v83 == *v82)
          {
            v83 = (void **)((char *)v83 + 1);
            ++v82;
            if (!--v84)
            {
              v36 = 1;
              goto LABEL_149;
            }
          }
        }
      }
      v78 = ++v72 < v73;
      if (v72 == v77)
      {
LABEL_149:
        v37 = v120;
        if ((v70 & 0x80) == 0)
          goto LABEL_153;
        goto LABEL_152;
      }
    }
  }
  v78 = 0;
  if (v124 < 0)
LABEL_152:
    operator delete(__p);
LABEL_153:
  if (!v78)
  {
LABEL_154:
    if ((char)v125 < 0)
      goto LABEL_221;
    v87 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v125) & v87) == 0)
    {
      v88 = (v87 >> 7) & 1;
      if (v125 != 95)
        v88 = 0;
      if (v88 != 1)
        goto LABEL_221;
    }
    goto LABEL_77;
  }
LABEL_221:
  if (v36 == *(unsigned __int8 *)(a1 + 168))
  {
    v111 = 0;
    v112 = -993;
  }
  else
  {
    *(_QWORD *)(a2 + 16) += v37;
    v111 = *(_QWORD *)(a1 + 8);
    v112 = -995;
  }
  *(_DWORD *)a2 = v112;
  *(_QWORD *)(a2 + 80) = v111;
}

void sub_20BE93030(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_20BE930B4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20BE930B4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t sub_20BE930F8(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BE93138(uint64_t a1, char *a2, char *a3)
{
  unint64_t v4;
  void **v5;
  void *__p[2];
  unsigned __int8 v7;

  sub_20BE93368(__p, a2, a3, a3 - a2);
  v4 = v7;
  if ((v7 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v7 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_20BE931B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BE931D4(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  sub_20BE93368(&__s, a2, a3, a3 - a2);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16) + 32))(&v13, *(_QWORD *)(a1 + 16), v10, (char *)v10 + size);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(std::string *)a4 = v13;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a4 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a4 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_20BE93334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BE93368(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20BDDC038();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void sub_20BE9340C(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v6;
  void **v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  void *__p[2];
  unsigned __int8 v12;

  sub_20BE93368(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v7, (char *)v7 + v6);
  v8 = *(unsigned __int8 *)(a4 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = (_BYTE *)a4;
      else
        v10 = *(_BYTE **)a4;
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0)
    operator delete(__p[0]);
}

void sub_20BE934E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BE93500()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 5);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE93538(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_20BE9354C(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  _BYTE *v4;
  int v5;
  uint64_t v6;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  int v15;
  _BYTE *v16;
  std::string *v17;
  uint64_t v18;
  std::string::size_type size;
  char v20;
  uint64_t v22;
  std::string __p;
  std::string v24;
  std::string v25;
  std::string v26;

  v4 = a2;
  if (a2 == a3)
    return v4;
  v5 = *a2;
  if (v5 == 93)
    return v4;
  v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      v10 = sub_20BE93AD4(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      v10 = sub_20BE938F8(a1, a2 + 2, a3, a4);
LABEL_34:
      v6 = v10;
      v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  v18 = sub_20BE93B8C(a1, a2 + 2, a3, (uint64_t)&v26);
  v4 = (_BYTE *)v18;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v26.__r_.__value_.__l.__size_;
  v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      v12 = *v4;
      if (v12 == 92)
      {
        v13 = v4 + 1;
        if (v11)
        {
          v14 = sub_20BE93DA0(a1, v13, a3, &v26);
        }
        else
        {
          v14 = (char *)sub_20BE93C78(a1, (unsigned __int8 *)v13, a3, &v26, v6);
          v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (v15 = *v14, v15 == 93)
    || (v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          sub_20BE9433C(v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((_BYTE *)&v26.__r_.__value_.__s + 23))
    {
      v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1)
        goto LABEL_36;
LABEL_28:
      sub_20BE92244(v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    v20 = 1;
    v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    v22 = sub_20BE93B8C(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    v4 = (_BYTE *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if ((_DWORD)v16 == 92)
    {
      if (v11)
        v22 = (uint64_t)sub_20BE93DA0(a1, v14 + 2, a3, &v25);
      else
        v22 = (uint64_t)sub_20BE93C78(a1, (unsigned __int8 *)v14 + 2, a3, &v25, v6);
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  v24 = v26;
  memset(&v26, 0, sizeof(v26));
  __p = v25;
  memset(&v25, 0, sizeof(v25));
  sub_20BE93F78(v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if ((v20 & 1) != 0)
    return v4;
  return (_BYTE *)v6;
}

void sub_20BE93898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a14 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE938F8(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t i;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *__p[2];
  unsigned __int8 v16;
  void *v17;
  uint64_t v18;
  unsigned __int8 v19;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_33;
  for (i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_33;
  }
  if (&a2[i] == a3)
LABEL_33:
    sub_20BE93500();
  sub_20BE931D4(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    v8 = v19;
    if (v19)
    {
      v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    sub_20BE94564();
  }
  v8 = v18;
  if (!v18)
    goto LABEL_34;
  v9 = (char *)v17;
LABEL_14:
  sub_20BE9340C(a1, v9, &v9[v8], (uint64_t)__p);
  v10 = v16;
  if ((v16 & 0x80u) != 0)
    v10 = (unint64_t)__p[1];
  if (v10)
  {
    sub_20BE945B0(a4, (__int128 *)__p);
  }
  else
  {
    v11 = v19;
    if ((v19 & 0x80u) != 0)
      v11 = v18;
    if (v11 == 2)
    {
      v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v13 = (char *)v17;
      sub_20BE9433C((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1)
        sub_20BE94564();
      v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0)
        v12 = (char *)v17;
      sub_20BE92244((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0)
    operator delete(__p[0]);
  if ((char)v19 < 0)
    operator delete(v17);
  return (uint64_t)&a2[i + 2];
}

void sub_20BE93A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BE93AD4(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  int v7;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_11;
  for (i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_11;
  }
  if (&a2[i] == a3)
LABEL_11:
    sub_20BE93500();
  v7 = sub_20BE9463C(a1, a2, &a2[i], *(_BYTE *)(a1 + 24) & 1);
  if (!v7)
    sub_20BE945F0();
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t sub_20BE93B8C(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
LABEL_15:
    sub_20BE93500();
  sub_20BE931D4(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    sub_20BE94564();
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *sub_20BE93C78(uint64_t a1, unsigned __int8 *a2, char *a3, std::string *this, uint64_t a5)
{
  int v6;
  int v7;
  int v8;
  std::string::value_type v9;
  std::string *v10;

  if (a2 == (unsigned __int8 *)a3)
    sub_20BE91384();
  v6 = (char)*a2;
  if (v6 > 97)
  {
    if (v6 > 114)
    {
      if (v6 != 115)
      {
        if (v6 != 119)
          return sub_20BE91558(a1, a2, a3, this);
        *(_DWORD *)(a5 + 160) |= 0x500u;
        sub_20BE92244(a5, 95);
        return a2 + 1;
      }
      v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (v6 == 98)
      {
        v10 = this;
        v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return a2 + 1;
      }
      if (v6 != 100)
        return sub_20BE91558(a1, a2, a3, this);
      v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 160) = v8;
    return a2 + 1;
  }
  if (v6 <= 82)
  {
    if (*a2)
    {
      if (v6 == 68)
      {
        v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return a2 + 1;
      }
      return sub_20BE91558(a1, a2, a3, this);
    }
    v9 = 0;
    v10 = this;
    goto LABEL_19;
  }
  if (v6 == 83)
  {
    v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (v6 == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    sub_20BE946F4(a5, 95);
    return a2 + 1;
  }
  return sub_20BE91558(a1, a2, a3, this);
}

char *sub_20BE93DA0(uint64_t a1, char *a2, char *a3, std::string *this)
{
  uint64_t v5;
  std::string *v6;
  std::string::value_type v7;
  char *v8;
  char v9;
  int v10;
  std::string::value_type v11;

  if (a2 == a3)
LABEL_52:
    sub_20BE91384();
  v5 = *a2;
  if ((int)v5 > 97)
  {
    switch((int)v5)
    {
      case 'n':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        v5 = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        v5 = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        v5 = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        v5 = 11;
        goto LABEL_49;
      default:
        if ((_DWORD)v5 == 98)
        {
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          v5 = 8;
        }
        else
        {
          if ((_DWORD)v5 != 102)
            goto LABEL_21;
          if (this)
          {
            v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          v5 = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if ((int)v5 > 91)
  {
    if ((_DWORD)v5 != 92)
    {
      if ((_DWORD)v5 != 97)
        goto LABEL_21;
      if (this)
      {
        v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      v5 = 7;
LABEL_49:
      sub_20BE91824(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if ((_DWORD)v5 == 34 || (_DWORD)v5 == 47)
    goto LABEL_14;
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30)
    goto LABEL_52;
  v7 = v5 - 48;
  v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30)
      goto LABEL_39;
    v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      v9 = a2[2];
      v10 = v9 & 0xF8;
      v11 = v9 + 8 * v7 - 48;
      if (v10 == 48)
        v8 = a2 + 3;
      else
        v8 = a2 + 2;
      if (v10 == 48)
        v7 = v11;
      goto LABEL_39;
    }
  }
  v8 = a3;
LABEL_39:
  if (this)
    std::string::operator=(this, v7);
  else
    sub_20BE91824(a1, v7);
  return v8;
}

void sub_20BE93F78(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  unint64_t i;
  unint64_t v7;
  char *v8;
  char v9;
  char *v10;
  unint64_t j;
  unint64_t v12;
  char *v13;
  char v14;
  char *v15;
  uint64_t v16;
  unint64_t k;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t m;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char v31;
  _BYTE *v32;
  char *v33;
  char v34;
  _BYTE *v35;
  void *v36[2];
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  void *__p[2];
  uint64_t v43;

  v3 = a3;
  v4 = a2;
  if (*(_BYTE *)(a1 + 170))
  {
    if (*(_BYTE *)(a1 + 169))
    {
      for (i = 0; ; ++i)
      {
        v7 = v4[23] < 0 ? *((_QWORD *)v4 + 1) : v4[23];
        if (i >= v7)
          break;
        v8 = v4;
        if (v4[23] < 0)
          v8 = *(char **)v4;
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v8[i]);
        v10 = v4;
        if (v4[23] < 0)
          v10 = *(char **)v4;
        v10[i] = v9;
      }
      for (j = 0; ; ++j)
      {
        v12 = v3[23] < 0 ? *((_QWORD *)v3 + 1) : v3[23];
        if (j >= v12)
          break;
        v13 = v3;
        if (v3[23] < 0)
          v13 = *(char **)v3;
        v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v13[j]);
        v15 = v3;
        if (v3[23] < 0)
          v15 = *(char **)v3;
        v15[j] = v14;
      }
    }
    else
    {
      for (k = 0; ; ++k)
      {
        v18 = a2[23] < 0 ? *((_QWORD *)a2 + 1) : a2[23];
        if (k >= v18)
          break;
        v19 = a2;
        if (a2[23] < 0)
          v19 = *(char **)a2;
        v20 = a2;
        if (a2[23] < 0)
          v20 = *(char **)a2;
        v20[k] = v19[k];
      }
      for (m = 0; ; ++m)
      {
        v22 = a3[23] < 0 ? *((_QWORD *)a3 + 1) : a3[23];
        if (m >= v22)
          break;
        v23 = a3;
        if (a3[23] < 0)
          v23 = *(char **)a3;
        v24 = a3;
        if (a3[23] < 0)
          v24 = *(char **)a3;
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      v26 = v4;
      v4 = *(char **)v4;
      v25 = *((_QWORD *)v26 + 1);
    }
    else
    {
      v25 = v4[23];
    }
    sub_20BE93138(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      v28 = v3;
      v3 = *(char **)v3;
      v27 = *((_QWORD *)v28 + 1);
    }
    else
    {
      v27 = v3[23];
    }
    sub_20BE93138(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)v40 = v38;
    v41 = v39;
    *(_OWORD *)__p = *(_OWORD *)v36;
    v43 = v37;
    sub_20BE94920((uint64_t *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
  else
  {
    if (a2[23] < 0)
      v16 = *((_QWORD *)a2 + 1);
    else
      v16 = a2[23];
    if (v16 != 1 || (a3[23] < 0 ? (v29 = *((_QWORD *)a3 + 1)) : (v29 = a3[23]), v29 != 1))
      sub_20BE94A88();
    if (*(_BYTE *)(a1 + 169))
    {
      v30 = a2;
      if (a2[23] < 0)
        v30 = *(char **)a2;
      v31 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v30);
      v32 = v4;
      if (v4[23] < 0)
        v32 = *(_BYTE **)v4;
      *v32 = v31;
      v33 = v3;
      if (v3[23] < 0)
        v33 = *(char **)v3;
      v34 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v33);
      v35 = v3;
      if (v3[23] < 0)
        v35 = *(_BYTE **)v3;
      *v35 = v34;
    }
    *(_OWORD *)v40 = *(_OWORD *)v4;
    v41 = *((_QWORD *)v4 + 2);
    *((_QWORD *)v4 + 1) = 0;
    *((_QWORD *)v4 + 2) = 0;
    *(_QWORD *)v4 = 0;
    *(_OWORD *)__p = *(_OWORD *)v3;
    v43 = *((_QWORD *)v3 + 2);
    *(_QWORD *)v3 = 0;
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    sub_20BE94920((uint64_t *)(a1 + 88), (__int128 *)v40);
    if (SHIBYTE(v43) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41) < 0)
      operator delete(v40[0]);
  }
}

void sub_20BE942F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20BE930F8((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_20BE9433C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  __int16 v8;
  _WORD *v9;
  char **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  _WORD *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __int16 v39;
  char *v40;
  __int16 v41;

  if (!*(_BYTE *)(a1 + 169))
  {
    v18 = a1 + 128;
    v19 = *(_QWORD *)(a1 + 128);
    v10 = (char **)(a1 + 112);
    v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v9 = *(_WORD **)(a1 + 120);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        v21 = v20 >> 1;
        v22 = v19 - (_QWORD)*v10;
        if (v22 <= (v20 >> 1) + 1)
          v23 = v21 + 1;
        else
          v23 = v22;
        if (v22 >= 0x7FFFFFFFFFFFFFFELL)
          v24 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v24 = v23;
        if (v24)
          v25 = (char *)sub_20BDE31CC(v18, v24);
        else
          v25 = 0;
        v27 = &v25[2 * v21];
        v28 = &v25[2 * v24];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v38 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v38)
          goto LABEL_46;
        do
        {
          v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19)
        goto LABEL_24;
      v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        v33 = v32 >> 1;
        v34 = v19 - (_QWORD)*v10;
        if (v34 <= (v32 >> 1) + 1)
          v35 = v33 + 1;
        else
          v35 = v34;
        if (v34 >= 0x7FFFFFFFFFFFFFFELL)
          v36 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        if (v36)
          v37 = (char *)sub_20BDE31CC(v18, v36);
        else
          v37 = 0;
        v27 = &v37[2 * v33];
        v28 = &v37[2 * v36];
        *(_WORD *)v27 = v8;
        v26 = v27 + 2;
        v40 = *(char **)(a1 + 112);
        v29 = *(char **)(a1 + 120);
        if (v29 == v40)
          goto LABEL_46;
        do
        {
          v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    sub_20BDDF694();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3);
  v7 = *(_QWORD *)(a1 + 128);
  v8 = v5 | (unsigned __int16)(v6 << 8);
  v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *v9 = v8;
    v26 = v9 + 1;
    goto LABEL_48;
  }
  v10 = (char **)(a1 + 112);
  v11 = *(_QWORD *)(a1 + 112);
  v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3)
    goto LABEL_49;
  v13 = v12 >> 1;
  v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1)
    v15 = v13 + 1;
  else
    v15 = v14;
  if (v14 >= 0x7FFFFFFFFFFFFFFELL)
    v16 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v16 = v15;
  if (v16)
    v17 = (char *)sub_20BDE31CC(a1 + 128, v16);
  else
    v17 = 0;
  v27 = &v17[2 * v13];
  v28 = &v17[2 * v16];
  *(_WORD *)v27 = v8;
  v26 = v27 + 2;
  v30 = *(char **)(a1 + 112);
  v29 = *(char **)(a1 + 120);
  if (v29 == v30)
    goto LABEL_46;
  do
  {
    v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  v29 = *v10;
LABEL_46:
  *(_QWORD *)(a1 + 112) = v27;
  *(_QWORD *)(a1 + 120) = v26;
  *(_QWORD *)(a1 + 128) = v28;
  if (v29)
    operator delete(v29);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v26;
}

void sub_20BE94564()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 1);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE9459C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE945B0(uint64_t *a1, __int128 *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 17;
  v4 = a1[18];
  if (v4 >= a1[19])
  {
    result = sub_20BE4EE50(v3, a2);
  }
  else
  {
    sub_20BE4EDF4(v3, a2);
    result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void sub_20BE945F0()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 2);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE94628(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE9463C(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  unint64_t v6;
  void **v7;
  void **v8;
  uint64_t classname;
  void *__p[2];
  unsigned __int8 v12;

  sub_20BE93368(__p, a2, a3, a3 - a2);
  v6 = v12;
  if ((v12 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v12 & 0x80u) != 0)
    v6 = (unint64_t)__p[1];
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0)
    operator delete(__p[0]);
  return classname;
}

void sub_20BE946D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BE946F4(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 72);
    v4 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 64);
      v7 = *(_QWORD *)(a1 + 64);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      sub_20BDDF694();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 64);
  v5 = *(_BYTE **)(a1 + 72);
  v13 = *(_QWORD *)(a1 + 80);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v19;
  *(_QWORD *)(a1 + 80) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 72) = v19;
}

void **sub_20BE94920(uint64_t *a1, __int128 *a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  void *v19[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      sub_20BDDF694();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    v19[4] = result;
    if (v14)
      v15 = (char *)sub_20BE6D0B4((uint64_t)result, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v19[0] = v15;
    v19[1] = v16;
    v19[3] = &v15[48 * v14];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v19[2] = v16 + 48;
    sub_20BE94AD4(a1, v19);
    v10 = a1[1];
    result = sub_20BE94C80(v19);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v10;
  return result;
}

void sub_20BE94A74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE94C80((void **)va);
  _Unwind_Resume(a1);
}

void sub_20BE94A88()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 9);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE94AC0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE94AD4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BE94B48((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BE94B48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  sub_20BE94BFC((uint64_t)v13);
  return a6;
}

uint64_t sub_20BE94BFC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BE94C30((uint64_t *)a1);
  return a1;
}

void sub_20BE94C30(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20BE930B4(v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **sub_20BE94C80(void **a1)
{
  sub_20BE94CB0(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20BE94CB0(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    sub_20BE930B4(v4, i - 48);
  }
}

_QWORD *sub_20BE94CF4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51A640;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20BE94D38(_QWORD *__p)
{
  uint64_t v2;

  *__p = &unk_24C51A640;
  v2 = __p[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_20BE94D7C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20BE94DAC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51A640;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20BE94DF0(_QWORD *__p)
{
  uint64_t v2;

  *__p = &unk_24C51A640;
  v2 = __p[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_20BE94E34(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20BE94E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *result;

  v14 = operator new(0x10uLL);
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(v15 + 8);
  *v14 = &unk_24C51A5C8;
  v14[1] = v16;
  *(_QWORD *)(v15 + 8) = 0;
  v17 = operator new(0x38uLL);
  LODWORD(v16) = *(_DWORD *)(a1 + 32);
  v18 = *(_QWORD *)(a4 + 8);
  *v17 = &unk_24C51AA60;
  v17[1] = v18;
  v17[2] = v14;
  v17[3] = a2;
  v17[4] = a3;
  *((_DWORD *)v17 + 10) = v16;
  *((_DWORD *)v17 + 11) = a5;
  *((_DWORD *)v17 + 12) = a6;
  *((_BYTE *)v17 + 52) = a7;
  *(_QWORD *)(a4 + 8) = 0;
  result = operator new(0x10uLL);
  *result = &unk_24C51AAF0;
  result[1] = v17;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = v17[2];
  *(_QWORD *)(a4 + 8) = v17;
  *(_DWORD *)(a1 + 32) = v16 + 1;
  return result;
}

void sub_20BE94F58(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BE9513C(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20BE94FA0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  int v4;
  int v5;
  int v6;

  if (a2 != a3)
  {
    v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38)
            break;
          if (v5 >= 214748364)
            sub_20BE9503C();
          v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3)
            return a3;
        }
      }
    }
  }
  return a2;
}

void sub_20BE9503C()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 8);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE95074(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20BE95088()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 7);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE950C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BE950D4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C51AAC0;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C51A640;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20BE9513C(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;

  *__p = &unk_24C51AAC0;
  v2 = __p[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *__p = &unk_24C51A640;
  v3 = __p[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(__p);
}

unsigned int *sub_20BE951A4(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return sub_20BE95358(result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *sub_20BE95258(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return sub_20BE95358(result, a3);
  }
  return result;
}

_QWORD *sub_20BE95288(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C51AAC0;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C51A640;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20BE952F0(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;

  *__p = &unk_24C51AAC0;
  v2 = __p[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *__p = &unk_24C51A640;
  v3 = __p[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(__p);
}

unsigned int *sub_20BE95358(unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = a2[4] + 24 * v4 + 8;
    do
    {
      *(_QWORD *)(v7 - 8) = v5;
      *(_QWORD *)v7 = v5;
      *(_BYTE *)(v7 + 8) = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_20BE953B4(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20BE953C8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C51AAC0;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C51A640;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20BE95430(_QWORD *__p)
{
  uint64_t v2;
  uint64_t v3;

  *__p = &unk_24C51AAC0;
  v2 = __p[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *__p = &unk_24C51A640;
  v3 = __p[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  operator delete(__p);
}

void sub_20BE95498(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_20BE954A4(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

uint64_t sub_20BE954D0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void sub_20BE954E4()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x212B92970](exception, 15);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20BE9551C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20BE95530(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;

  if (a2 == a3)
    return (unsigned __int8 *)a2;
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = (unsigned __int8 *)sub_20BE955B8(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2)
    return (unsigned __int8 *)a2;
  else
    return sub_20BE956C4(a1, v8, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
}

char *sub_20BE955B8(uint64_t a1, char *a2, char *a3)
{
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v13;
  uint64_t v14;

  v6 = sub_20BE95864(a1, a2, a3);
  v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      v8 = a2[1];
      if (v8 == 40)
      {
        v9 = (uint64_t)(a2 + 2);
        sub_20BE91180((_QWORD *)a1);
        v10 = *(_DWORD *)(a1 + 28);
        do
        {
          v11 = (char *)v9;
          v9 = sub_20BE95530(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41)
          sub_20BE8F9A4();
        v7 = v11 + 2;
        sub_20BE911E4((_QWORD *)a1, v10);
      }
      else
      {
        v13 = sub_20BE95AAC(a1, v8);
        v14 = 2;
        if (!v13)
          v14 = 0;
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *sub_20BE956C4(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  unsigned __int8 *v6;
  int v11;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v24;
  int v25;

  v6 = a2;
  if (a2 != a3)
  {
    v11 = *a2;
    if (v11 == 42)
    {
      sub_20BE94E6C(a1, 0, -1, a4, a5, a6, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v13 = a2 + 2;
      v25 = 0;
      v14 = sub_20BE94FA0(a1, a2 + 2, a3, &v25);
      if (v14 == v13)
        goto LABEL_16;
      if (v14 != a3)
      {
        v15 = v14 + 1;
        v16 = *v14;
        if (v16 == 44)
        {
          v24 = -1;
          v17 = sub_20BE94FA0(a1, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            v19 = v24;
            v18 = v25;
            if (v24 == -1)
            {
              v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              sub_20BE9503C();
            }
            v6 = &v17[2 * (v17[1] == 125)];
            v20 = a5;
            v21 = a6;
            v22 = a1;
LABEL_23:
            sub_20BE94E6C(v22, v18, v19, a4, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          v6 = v14 + 2;
          v18 = v25;
          v20 = a5;
          v21 = a6;
          v22 = a1;
          v19 = v25;
          goto LABEL_23;
        }
      }
      sub_20BE95088();
    }
  }
  return v6;
}

char *sub_20BE95864(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  if (a2 == a3)
  {
    result = sub_20BE9596C(a1, a2, a3);
    if (result != a2)
      return result;
    return sub_20BE91070(a1, a2, a3);
  }
  v6 = *a2;
  if ((a2 + 1 != a3 || v6 != 36)
    && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
  {
    sub_20BE91824(a1, (char)v6);
    return a2 + 1;
  }
  result = sub_20BE9596C(a1, a2, a3);
  if (result != a2)
    return result;
  if (*a2 != 46)
    return sub_20BE91070(a1, a2, a3);
  v9 = operator new(0x10uLL);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(v10 + 8);
  *v9 = &unk_24C51ABC8;
  v9[1] = v11;
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return a2 + 1;
}

_BYTE *sub_20BE9596C(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  _BYTE *v3;
  int v4;

  v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      sub_20BE91824(a1, (char)v4);
      v3 += 2;
    }
  }
  return v3;
}

_QWORD *sub_20BE959E4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51A640;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20BE95A28(_QWORD *__p)
{
  uint64_t v2;

  *__p = &unk_24C51A640;
  v2 = __p[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete(__p);
}

uint64_t sub_20BE95A6C(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

uint64_t sub_20BE95AAC(uint64_t a1, unsigned __int8 a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > *(_DWORD *)(a1 + 28))
    sub_20BE91908();
  sub_20BE91954(a1, a2 - 48);
  return 1;
}

unsigned __int8 *sub_20BE95B08(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = sub_20BE95B64(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    sub_20BE954E4();
  do
  {
    v7 = v6;
    v6 = sub_20BE95B64(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *sub_20BE95B64(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  unsigned __int8 *v9;
  int v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int v16;
  char *v17;
  char *v18;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  v8 = sub_20BE95CF4(a1, a2, a3);
  v9 = (unsigned __int8 *)v8;
  if (v8 != a2 || v8 == a3)
    goto LABEL_12;
  v10 = *a2;
  switch(v10)
  {
    case '$':
      v11 = operator new(0x18uLL);
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = (char *)&unk_24C51A6A8;
      goto LABEL_8;
    case '(':
      sub_20BE91180((_QWORD *)a1);
      v16 = *(_DWORD *)(a1 + 28);
      ++*(_DWORD *)(a1 + 36);
      v17 = (char *)sub_20BE8EA84(a1, a2 + 1, a3);
      if (v17 == a3 || (v18 = v17, *v17 != 41))
        sub_20BE8F9A4();
      sub_20BE911E4((_QWORD *)a1, v16);
      --*(_DWORD *)(a1 + 36);
      v9 = (unsigned __int8 *)(v18 + 1);
LABEL_12:
      if (v9 != (unsigned __int8 *)a2)
        return sub_20BE8F5AC(a1, v9, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
      return (unsigned __int8 *)a2;
    case '^':
      v11 = operator new(0x18uLL);
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = (char *)&unk_24C51A660;
LABEL_8:
      v15 = *(_QWORD *)(v13 + 8);
      *v11 = v14 + 16;
      v11[1] = v15;
      *((_BYTE *)v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = (unsigned __int8 *)(a2 + 1);
      return sub_20BE8F5AC(a1, v9, (unsigned __int8 *)a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
  return (unsigned __int8 *)a2;
}

char *sub_20BE95CF4(uint64_t a1, char *a2, char *a3)
{
  char *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_20BE95DAC(a1, a2, a3);
  if (result == a2)
  {
    result = sub_20BE95E34(a1, a2, a3);
    if (result == a2)
    {
      if (a2 == a3 || *a2 != 46)
      {
        return sub_20BE91070(a1, a2, a3);
      }
      else
      {
        v7 = operator new(0x10uLL);
        v8 = *(_QWORD *)(a1 + 56);
        v9 = *(_QWORD *)(v8 + 8);
        *v7 = &unk_24C51ABC8;
        v7[1] = v9;
        *(_QWORD *)(v8 + 8) = v7;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return a2 + 1;
      }
    }
  }
  return result;
}

char *sub_20BE95DAC(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v4;
  uint64_t v5;

  v3 = a2;
  if (a2 != a3)
  {
    v4 = *a2;
    v5 = (v4 - 36);
    if (v5 > 0x3A)
      goto LABEL_8;
    if (((1 << (v4 - 36)) & 0x5800000080004D1) != 0)
      return v3;
    if (v5 == 5)
    {
      if (*(_DWORD *)(a1 + 36))
        return v3;
    }
    else
    {
LABEL_8:
      if ((v4 - 123) < 2)
        return v3;
    }
    sub_20BE91824(a1, *a2);
    ++v3;
  }
  return v3;
}

char *sub_20BE95E34(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  int v5;
  signed __int8 v6;
  BOOL v7;
  int v9;
  uint64_t v10;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92)
    return v3;
  v5 = *v4;
  v6 = *v4;
  v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    sub_20BE91824(a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    v9 = sub_20BE95AAC(a1, v6);
    v10 = 2;
    if (!v9)
      v10 = 0;
    v3 += v10;
    return v3;
  }
  return sub_20BE93DA0(a1, v4, a3, 0);
}

uint64_t sub_20BE95EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  sub_20BE90058(a4, *(_DWORD *)(a1 + 28) + 1, a2, a3, (unsigned __int16)(v9 & 0x800) >> 11);
  if (sub_20BE9625C(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
  {
    if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4)
      v10 = (uint64_t *)(a4 + 24);
    else
      v10 = *(uint64_t **)a4;
LABEL_8:
    v11 = *v10;
    *(_QWORD *)(a4 + 56) = *v10;
    *(_BYTE *)(a4 + 64) = *(_QWORD *)(a4 + 48) != v11;
    v12 = v10[1];
    *(_QWORD *)(a4 + 72) = v12;
    *(_BYTE *)(a4 + 88) = v12 != *(_QWORD *)(a4 + 80);
    return 1;
  }
  if (a2 != a3 && (v9 & 0x40) == 0)
  {
    v14 = v9 | 0x80;
    v15 = a2 + 1;
    if (v15 != a3)
    {
      while (1)
      {
        sub_20BE904C8((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), (__int128 *)(a4 + 24));
        v16 = sub_20BE9625C(a1, v15, a3, (uint64_t *)a4, v14, 0);
        v18 = *(_QWORD *)a4;
        v17 = *(_QWORD *)(a4 + 8);
        if (v16)
          break;
        sub_20BE904C8((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((v17 - v18) >> 3), (__int128 *)(a4 + 24));
        if (++v15 == a3)
          goto LABEL_14;
      }
      if (v17 == v18)
        v10 = (uint64_t *)(a4 + 24);
      else
        v10 = *(uint64_t **)a4;
      goto LABEL_8;
    }
LABEL_14:
    sub_20BE904C8((char **)a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), (__int128 *)(a4 + 24));
    if (sub_20BE9625C(a1, a3, a3, (uint64_t *)a4, v14, 0))
    {
      if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4)
        v10 = (uint64_t *)(a4 + 24);
      else
        v10 = *(uint64_t **)a4;
      goto LABEL_8;
    }
  }
  result = 0;
  *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
  return result;
}

void sub_20BE960D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v10 = a4[6];
  sub_20BE97F18(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  v11 = *(_QWORD *)a1;
  if (*(_QWORD *)(a1 + 8) != *(_QWORD *)a1)
  {
    v12 = 0;
    v13 = 0;
    v15 = *a4;
    v14 = a4[1];
    do
    {
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      v17 = (_QWORD *)(v15 + v12);
      if (v16 <= v13)
        v18 = a4 + 3;
      else
        v18 = v17;
      *(_QWORD *)(v11 + v12) = a2 + *v18 - v10;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13)
        v19 = a4 + 3;
      else
        v19 = (uint64_t *)(*a4 + v12);
      *(_QWORD *)(*(_QWORD *)a1 + v12 + 8) = a2 + v19[1] - v10;
      v15 = *a4;
      v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13)
        v20 = a4 + 3;
      else
        v20 = (uint64_t *)(*a4 + v12);
      v21 = *((_BYTE *)v20 + 16);
      v11 = *(_QWORD *)a1;
      v22 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(*(_QWORD *)a1 + v12 + 16) = v21;
      ++v13;
      v12 += 24;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * ((v22 - v11) >> 3));
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  v23 = a2 + a4[6] - v10;
  *(_QWORD *)(a1 + 48) = v23;
  *(_QWORD *)(a1 + 56) = a2 + a4[7] - v10;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(_QWORD *)(a1 + 72) = a2 + a4[9] - v10;
  *(_QWORD *)(a1 + 80) = a2 + a4[10] - v10;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  if ((a5 & 1) == 0)
    *(_QWORD *)(a1 + 104) = v23;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

uint64_t sub_20BE9625C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return sub_20BE900C8(a1, a2, a3, a4, a5, a6);
  if (*(_DWORD *)(a1 + 28))
    return sub_20BE967B4(a1, a2, a3, a4, a5, a6);
  return sub_20BE9627C(a1, a2, a3, a4, a5, a6);
}

uint64_t sub_20BE9627C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  BOOL v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  unint64_t v43;
  _QWORD *v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v55[40];
  __int128 v56;
  void *__p[2];
  _QWORD v58[3];
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v60 = 0u;
  v61 = 0u;
  v59 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)v55 = 0;
    memset(&v55[8], 0, 32);
    v56 = 0uLL;
    *(_OWORD *)__p = 0uLL;
    memset(v58, 0, 21);
    sub_20BE96D1C(&v59, (uint64_t)v55);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v55[32])
    {
      *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
      operator delete(*(void **)&v55[32]);
    }
    v12 = *((_QWORD *)&v59 + 1);
    v13 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v14 = v13 / 0x2A;
    v15 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v13 / 0x2A));
    v16 = 3 * (v13 % 0x2A);
    v17 = v15 + 32 * v16;
    *(_DWORD *)v17 = 0;
    *(_QWORD *)(v17 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    sub_20BE906B8(*(_QWORD *)(v12 + 8 * v14) + 32 * v16 + 56, *(unsigned int *)(a1 + 32));
    v53 = 0;
    v18 = 0;
    v51 = 0;
    v52 = a2;
    v19 = a3 - a2;
    v20 = *((_QWORD *)&v61 + 1);
    v21 = *((_QWORD *)&v59 + 1);
    v22 = *((_QWORD *)&v61 + 1) + v61 - 1;
    v23 = v22 / 0x2A;
    v24 = 3 * (v22 % 0x2A);
    *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v23) + 32 * v24 + 80) = v6;
    v25 = *(_QWORD *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(_BYTE *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19)
        sub_20BE906E8();
      v27 = v20 + v61 - 1;
      v28 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * (v27 / 0x2A));
      v29 = v27 % 0x2A;
      v30 = v28 + 96 * (v27 % 0x2A);
      v32 = (_QWORD *)(v30 + 80);
      v31 = *(_QWORD *)(v30 + 80);
      if (v31)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v31 + 16))(v31, v28 + 96 * v29);
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          v33 = *(_QWORD *)(v28 + 96 * v29 + 16);
          v35 = (a5 & 0x1000) == 0 || v33 == a3;
          v36 = v33 != v52 || (a5 & 0x20) == 0;
          if (!v36 || !v35)
            goto LABEL_37;
          v37 = v33 - *(_QWORD *)(v28 + 96 * v29 + 8);
          v38 = v51;
          if ((v53 & (v51 >= v37)) == 0)
            v38 = v37;
          if (v38 != v19)
          {
            v51 = v38;
            sub_20BE96E1C(&v59);
            v53 = 1;
            goto LABEL_38;
          }
          v39 = (void **)*((_QWORD *)&v59 + 1);
          v40 = v60;
          if ((_QWORD)v60 == *((_QWORD *)&v59 + 1))
          {
            v40 = *((_QWORD *)&v59 + 1);
          }
          else
          {
            v41 = (_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((unint64_t)v61 / 0x2A));
            v42 = (_QWORD *)(*v41 + 96 * ((unint64_t)v61 % 0x2A));
            v43 = *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v61 + 1) + (_QWORD)v61) % 0x2AuLL);
            if (v42 != (_QWORD *)v43)
            {
              do
              {
                sub_20BE90AE8((uint64_t)&v61 + 8, v42);
                v42 += 12;
                if ((_QWORD *)((char *)v42 - *v41) == (_QWORD *)4032)
                {
                  v44 = (_QWORD *)v41[1];
                  ++v41;
                  v42 = v44;
                }
              }
              while (v42 != (_QWORD *)v43);
              v39 = (void **)*((_QWORD *)&v59 + 1);
              v40 = v60;
            }
          }
          *((_QWORD *)&v61 + 1) = 0;
          v47 = v40 - (_QWORD)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              v39 = (void **)(*((_QWORD *)&v59 + 1) + 8);
              *((_QWORD *)&v59 + 1) = v39;
              v47 = v60 - (_QWORD)v39;
            }
            while ((_QWORD)v60 - (_QWORD)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2)
              goto LABEL_53;
            v48 = 42;
          }
          *(_QWORD *)&v61 = v48;
LABEL_53:
          v53 = 1;
          v51 = v19;
LABEL_38:
          v20 = *((_QWORD *)&v61 + 1);
          if (*((_QWORD *)&v61 + 1))
            continue;
          if ((v53 & 1) != 0)
          {
            v49 = *a4;
            *(_QWORD *)v49 = v52;
            *(_QWORD *)(v49 + 8) = v52 + v51;
            v6 = 1;
            *(_BYTE *)(v49 + 16) = 1;
          }
          else
          {
            v6 = 0;
          }
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          sub_20BE96E9C((uint64_t)&v59, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          sub_20BE96E1C(&v59);
          goto LABEL_38;
        case 0xFFFFFC20:
          v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)v55 = *(_OWORD *)v30;
          *(_OWORD *)&v55[16] = v45;
          v56 = 0uLL;
          *(_QWORD *)&v55[32] = 0;
          sub_20BE90E20(&v55[32], *(__int128 **)(v28 + 96 * v29 + 32), *(__int128 **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 40) - *(_QWORD *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v58[0] = 0;
          sub_20BE90E9C((char *)__p, *(__int128 **)(v28 + 96 * v29 + 56), *(__int128 **)(v28 + 96 * v29 + 64), (uint64_t)(*(_QWORD *)(v28 + 96 * v29 + 64) - *(_QWORD *)(v28 + 96 * v29 + 56)) >> 4);
          v46 = *v32;
          *(_QWORD *)((char *)&v58[1] + 5) = *(_QWORD *)(v30 + 85);
          v58[1] = v46;
          (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v58[1] + 24))(v58[1], 0, v55);
          sub_20BE96D1C(&v59, (uint64_t)v55);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v55[32])
          {
            *(_QWORD *)&v56 = *(_QWORD *)&v55[32];
            operator delete(*(void **)&v55[32]);
          }
          goto LABEL_38;
        default:
          sub_20BE90734();
      }
      break;
    }
  }
  sub_20BE97A88(&v59);
  return v6;
}

void sub_20BE96764(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  uint64_t v22;

  sub_20BE97A88((_QWORD *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_20BE967B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  _OWORD *v11;
  unsigned int v12;
  uint64_t v13;
  _OWORD *v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _BYTE *v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  void *v22;
  _OWORD *v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  void *v29;
  _QWORD *v30;
  uint64_t v31;
  _OWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  unsigned int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  _BYTE v46[56];
  void *__p[2];
  _QWORD v48[4];
  __int128 v49;
  char v50;
  _BYTE v51[40];
  __int128 v52;
  void *v53[6];
  _OWORD *v54;
  _OWORD *v55;
  _QWORD v56[3];

  v54 = 0;
  v55 = 0;
  v56[0] = 0;
  *(_DWORD *)v51 = 0;
  memset(&v51[8], 0, 32);
  v52 = 0u;
  memset(v53, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_43;
  *(_QWORD *)&v49 = a3;
  *((_QWORD *)&v49 + 1) = a3;
  v50 = 0;
  *(_DWORD *)v46 = 0;
  memset(&v46[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v48, 0, 21);
  v55 = (_OWORD *)sub_20BE90780((uint64_t *)&v54, (uint64_t)v46);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v46[32])
  {
    *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
    operator delete(*(void **)&v46[32]);
  }
  v41 = a4;
  v11 = v55;
  *((_DWORD *)v55 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  sub_20BE9067C((uint64_t)(v11 - 4), *(unsigned int *)(a1 + 28), &v49);
  sub_20BE906B8((uint64_t)v55 - 40, *(unsigned int *)(a1 + 32));
  v42 = 0;
  v43 = 0;
  v12 = 0;
  v13 = a3 - a2;
  v14 = v55;
  *((_QWORD *)v55 - 2) = v6;
  *((_DWORD *)v14 - 2) = a5;
  *((_BYTE *)v14 - 4) = a6;
  do
  {
    v15 = (++v12 & 0xFFF) != 0 || (int)(v12 >> 12) < (int)v13;
    if (!v15)
      sub_20BE906E8();
    v17 = v14 - 1;
    v16 = *((_QWORD *)v14 - 2);
    v18 = v14 - 6;
    if (v16)
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v16 + 16))(v16, v14 - 6);
    switch(*(_DWORD *)v18)
    {
      case 0xFFFFFC18:
        v19 = *((_QWORD *)v14 - 10);
        if ((a5 & 0x20) != 0 && v19 == a2 || (a5 & 0x1000) != 0 && v19 != a3)
          goto LABEL_19;
        v26 = v19 - *((_QWORD *)v14 - 11);
        v27 = v42;
        if ((v43 & (v42 >= v26)) == 0)
        {
          v28 = *(v14 - 5);
          *(_OWORD *)v51 = *(_OWORD *)v18;
          *(_OWORD *)&v51[16] = v28;
          if (v51 != v18)
          {
            sub_20BE97C18(&v51[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
            sub_20BE97DCC(v53, *((uint64_t **)v14 - 5), *((uint64_t **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
          }
          v29 = (void *)*v17;
          *(void **)((char *)&v53[3] + 5) = *(void **)((char *)v14 - 11);
          v53[3] = v29;
          v27 = v26;
        }
        v30 = v55;
        if (v27 == v13)
        {
          v31 = (uint64_t)v54;
          while (v30 != (_QWORD *)v31)
          {
            v30 -= 12;
            sub_20BE90AE8((uint64_t)v56, v30);
          }
          v55 = (_OWORD *)v31;
          v43 = 1;
          v42 = a3 - a2;
        }
        else
        {
          v42 = v27;
          v32 = v55 - 6;
          sub_20BE90AE8((uint64_t)v56, (_QWORD *)v55 - 12);
          v55 = v32;
          v43 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_19:
        v20 = v55 - 6;
        sub_20BE90AE8((uint64_t)v56, (_QWORD *)v55 - 12);
        v55 = v20;
        break;
      case 0xFFFFFC20:
        v21 = *(v14 - 5);
        *(_OWORD *)v46 = *(_OWORD *)v18;
        *(_OWORD *)&v46[16] = v21;
        memset(&v46[32], 0, 24);
        sub_20BE90E20(&v46[32], *((__int128 **)v14 - 8), *((__int128 **)v14 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v14 - 7) - *((_QWORD *)v14 - 8)) >> 3));
        __p[0] = 0;
        __p[1] = 0;
        v48[0] = 0;
        sub_20BE90E9C((char *)__p, *((__int128 **)v14 - 5), *((__int128 **)v14 - 4), (uint64_t)(*((_QWORD *)v14 - 4) - *((_QWORD *)v14 - 5)) >> 4);
        v22 = (void *)*v17;
        *(_QWORD *)((char *)&v48[1] + 5) = *(_QWORD *)((char *)v14 - 11);
        v48[1] = v22;
        (*(void (**)(_QWORD, uint64_t, _OWORD *))(*(_QWORD *)*v17 + 24))(*v17, 1, v14 - 6);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v48[1] + 24))(v48[1], 0, v46);
        v23 = v55;
        if ((unint64_t)v55 >= v56[0])
        {
          v55 = (_OWORD *)sub_20BE90780((uint64_t *)&v54, (uint64_t)v46);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v24 = *(_OWORD *)&v46[16];
          *v55 = *(_OWORD *)v46;
          v23[1] = v24;
          *((_QWORD *)v23 + 4) = 0;
          *((_QWORD *)v23 + 5) = 0;
          *((_QWORD *)v23 + 6) = 0;
          *((_QWORD *)v23 + 7) = 0;
          v23[2] = *(_OWORD *)&v46[32];
          *((_QWORD *)v23 + 6) = *(_QWORD *)&v46[48];
          memset(&v46[32], 0, 24);
          *((_QWORD *)v23 + 8) = 0;
          *((_QWORD *)v23 + 9) = 0;
          *(_OWORD *)((char *)v23 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v23 + 9) = v48[0];
          __p[0] = 0;
          __p[1] = 0;
          v48[0] = 0;
          v25 = v48[1];
          *(_QWORD *)((char *)v23 + 85) = *(_QWORD *)((char *)&v48[1] + 5);
          *((_QWORD *)v23 + 10) = v25;
          v55 = v23 + 6;
        }
        if (*(_QWORD *)&v46[32])
        {
          *(_QWORD *)&v46[40] = *(_QWORD *)&v46[32];
          operator delete(*(void **)&v46[32]);
        }
        break;
      default:
        sub_20BE90734();
    }
    v14 = v55;
  }
  while (v54 != v55);
  if ((v43 & 1) != 0)
  {
    v33 = *v41;
    *(_QWORD *)v33 = a2;
    *(_QWORD *)(v33 + 8) = a2 + v42;
    *(_BYTE *)(v33 + 16) = 1;
    if ((_QWORD)v52 != *(_QWORD *)&v51[32])
    {
      v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(_QWORD *)&v51[32]) >> 3);
      v35 = (_BYTE *)(*(_QWORD *)&v51[32] + 16);
      v36 = 1;
      do
      {
        v37 = v33 + 24 * v36;
        *(_OWORD *)v37 = *((_OWORD *)v35 - 1);
        v38 = *v35;
        v35 += 24;
        *(_BYTE *)(v37 + 16) = v38;
        v15 = v34 > v36++;
      }
      while (v15);
    }
    v39 = 1;
  }
  else
  {
LABEL_43:
    v39 = 0;
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  if (*(_QWORD *)&v51[32])
  {
    *(_QWORD *)&v52 = *(_QWORD *)&v51[32];
    operator delete(*(void **)&v51[32]);
  }
  *(_QWORD *)v51 = &v54;
  sub_20BE90F4C((void ***)v51);
  return v39;
}

void sub_20BE96CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  uint64_t v35;

  sub_20BE9063C(&a19);
  sub_20BE9063C(&a35);
  a35 = v35 - 120;
  sub_20BE90F4C((void ***)&a35);
  _Unwind_Resume(a1);
}

__n128 sub_20BE96D1C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __n128 result;
  uint64_t v11;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_20BE96F8C(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v8 + 40) = 0;
  *(_QWORD *)(v8 + 48) = 0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v8 + 56) = 0;
  *(_QWORD *)(v8 + 64) = 0;
  *(_QWORD *)(v8 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v8 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v8 + 80) = v11;
  ++a1[5];
  return result;
}

uint64_t sub_20BE96E1C(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  v2 = a1 + 5;
  v3 = a1[5] + a1[4] - 1;
  sub_20BE90AE8((uint64_t)(a1 + 5), (_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;
  return sub_20BE976FC(a1, 1);
}

int64x2_t sub_20BE96E9C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_20BE97770((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 / 0x2A));
  v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4032;
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 80) = v8;
  *(_QWORD *)(v7 - 56) = 0;
  *(_QWORD *)(v7 - 48) = 0;
  *(_QWORD *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v7 - 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v7 - 40) = 0;
  *(_QWORD *)(v7 - 32) = 0;
  *(_QWORD *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 40) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(v7 - 24) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v9 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v7 - 11) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v7 - 16) = v9;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_20CA53FE0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void sub_20BE96F8C(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFC0uLL);
      sub_20BE972A0(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFC0uLL);
    sub_20BE973B4((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_20BDDF6A8((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFC0uLL);
  sub_20BE974D0(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_20BE975E4((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_20BE97254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20BE972A0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_20BDDF6A8(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_20BE973B4(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_20BDDF6A8(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_20BE974D0(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_20BDDF6A8(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_20BE975E4(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_20BDDF6A8(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t sub_20BE976FC(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 42 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A)
    a2 = 1;
  if (v5 < 0x54)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_20BE97770(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x2A)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_20BDDF6A8(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFC0uLL);
      sub_20BE974D0(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_20BDDF6A8((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 21;
      else
        v40 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFC0uLL);
        sub_20BE972A0(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFC0uLL);
      }
      sub_20BE973B4((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 21;
      else
        v35 = (uint64_t)a1[4] + 42;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_20BE973B4((uint64_t)a1, &__p);
  }
}

void sub_20BE97A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE97A88(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        sub_20BE90AE8((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return sub_20BE97BCC((uint64_t)a1);
}

uint64_t sub_20BE97BCC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

char *sub_20BE97C18(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  __int128 v17;
  int64_t v18;
  char *v19;
  unint64_t v20;
  __int128 *v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    v19 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v19;
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      v25 = result;
      if (a2 != a3)
      {
        v26 = result;
        do
        {
          *(_OWORD *)v26 = *v6;
          v26[16] = *((_BYTE *)v6 + 16);
          v25 += 24;
          v6 = (__int128 *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      v18 = v25 - result;
      v13 = result;
    }
    else
    {
      v21 = (__int128 *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)result = *v6;
          result[16] = *((_BYTE *)v6 + 16);
          v6 = (__int128 *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      v22 = v13;
      if (v21 != a3)
      {
        v23 = v13;
        do
        {
          v24 = *v21;
          *((_QWORD *)v23 + 2) = *((_QWORD *)v21 + 2);
          *(_OWORD *)v23 = v24;
          v23 += 24;
          v21 = (__int128 *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v11;
    result = sub_20BDE4FA4(a1, v12);
    v15 = (char *)a1[1];
    v14 = a1 + 1;
    v13 = v15;
    v16 = v15;
    if (v6 != a3)
    {
      v16 = v13;
      do
      {
        v17 = *v6;
        *((_QWORD *)v16 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v16 = v17;
        v16 += 24;
        v6 = (__int128 *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    v18 = v16 - v13;
  }
  *v14 = &v13[v18];
  return result;
}

char *sub_20BE97DCC(_QWORD *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  __int128 v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6;
          v29 = v6[1];
          v6 += 2;
          *(_QWORD *)v27 = v28;
          *((_QWORD *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = (__int128 *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          v21 = *v6;
          v22 = v6[1];
          v6 += 2;
          *(_QWORD *)result = v21;
          *((_QWORD *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      v23 = v12;
      if (v20 != (__int128 *)a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_OWORD *)v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (__int128 *)a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      sub_20BDDF694();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_20BE90F0C(a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void sub_20BE97F18(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_20BE97F54((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void sub_20BE97F54(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[3 * a2];
      v14 = 24 * a2;
      do
      {
        *v7 = 0;
        v7[1] = 0;
        *((_BYTE *)v7 + 16) = 0;
        v7 += 3;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_20BDE4FF4(v4, v11);
    else
      v12 = 0;
    v15 = &v12[24 * v8];
    v16 = &v15[24 * a2];
    v17 = 24 * a2;
    v18 = v15;
    do
    {
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v18[16] = 0;
      v18 += 24;
      v17 -= 24;
    }
    while (v17);
    v19 = &v12[24 * v11];
    v21 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v15 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v15 - 24) = v22;
        v15 -= 24;
        v20 -= 24;
      }
      while (v20 != v21);
      v20 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Arch_Error(pxrInternal__aapl__pxrReserved__ *this, const char *a2, const char *a3, const char *a4, const char *a5)
{
  FILE **v8;
  BOOL v9;
  pxrInternal__aapl__pxrReserved__ *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;

  v8 = (FILE **)MEMORY[0x24BDAC8D8];
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], " ArchError: %s\n", (const char *)this);
  fprintf(*v8, "  Function: %s\n", a2);
  fprintf(*v8, "      File: %s\n", a4);
  fprintf(*v8, "      Line: %zu\n", (size_t)a3);
  v10 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArchAbort((pxrInternal__aapl__pxrReserved__ *)1, v9);
  return pxrInternal__aapl__pxrReserved__::Arch_Warning(v10, v11, v12, v13, v14);
}

uint64_t pxrInternal__aapl__pxrReserved__::Arch_Warning(pxrInternal__aapl__pxrReserved__ *this, const char *a2, const char *a3, const char *a4, const char *a5)
{
  FILE **v8;

  v8 = (FILE **)MEMORY[0x24BDAC8D8];
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], " ArchWarn: %s\n", (const char *)this);
  fprintf(*v8, " Function: %s\n", a2);
  fprintf(*v8, "     File: %s\n", a4);
  return fprintf(*v8, "     Line: %zu\n", (size_t)a3);
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArchStrerror@<X0>(_QWORD *a1@<X8>)
{
  int *v3;
  char __strerrbuf[256];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v3 = __error();
  strerror_r(*v3, __strerrbuf, 0x100uLL);
  return sub_20BDDC0E4(a1, __strerrbuf);
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArchStrerror@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, _QWORD *a2@<X8>)
{
  char __strerrbuf[256];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  strerror_r((int)this, __strerrbuf, 0x100uLL);
  return sub_20BDDC0E4(a2, __strerrbuf);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchStatIsWritable(uint64_t this, const stat *a2)
{
  uint64_t v2;

  if (this)
  {
    v2 = this;
    if ((*(_WORD *)(this + 4) & 2) != 0 || getegid() == *(_DWORD *)(this + 20) && (*(_WORD *)(v2 + 4) & 0x10) != 0)
    {
      return 1;
    }
    else if (geteuid() == *(_DWORD *)(v2 + 16))
    {
      return (*(unsigned __int16 *)(v2 + 4) >> 7) & 1;
    }
    else
    {
      return 0;
    }
  }
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchGetModificationTime(pxrInternal__aapl__pxrReserved__ *this, double *a2, double *a3)
{
  int v4;
  stat v6;

  v4 = stat((const char *)this, &v6);
  if (!v4)
    *a2 = (double)v6.st_mtimespec.tv_nsec * 0.000000001 + (double)v6.st_mtimespec.tv_sec;
  return v4 == 0;
}

double pxrInternal__aapl__pxrReserved__::ArchGetModificationTime(pxrInternal__aapl__pxrReserved__ *this, const stat *a2)
{
  return (double)*((uint64_t *)this + 7) * 0.000000001 + (double)*((uint64_t *)this + 6);
}

char *pxrInternal__aapl__pxrReserved__::ArchNormPath@<X0>(char *result@<X0>, std::string *a2@<X8>)
{
  char *v2;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unint64_t v12;
  std::string::size_type v13;
  BOOL v14;
  BOOL v15;
  char *v16;
  std::string::size_type v17;
  uint64_t v18;
  std::string::size_type v19;
  char *v20;
  char *v21;
  char *v22;
  std::string::size_type v23;
  int v24;
  char *v25;
  std::string::size_type size;
  std::string::value_type v27;
  std::string::value_type v28;
  std::string *v29;
  std::string::size_type v30;
  int v31;
  std::string *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  int v36;
  std::string *v37;
  std::string::size_type v38;
  std::string::size_type v39;
  std::string::size_type v40;
  int v41;
  char *v42;
  std::string *v43;
  int v44;
  std::string *v45;
  std::string::size_type v46;
  std::string::size_type v47;
  std::string::size_type v48;
  std::string::size_type v49;

  v2 = result;
  LODWORD(v4) = result[23];
  if ((v4 & 0x80000000) != 0)
  {
    result = (char *)sub_20BDDBFAC(a2, *(void **)result, *((_QWORD *)result + 1));
    LODWORD(v4) = v2[23];
    if ((v4 & 0x80000000) != 0)
    {
      v7 = *(char **)v2;
      v6 = *((_QWORD *)v2 + 1);
      v5 = 1;
      goto LABEL_5;
    }
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)result;
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)result + 2);
  }
  v5 = 0;
  v6 = v4;
  v7 = v2;
LABEL_5:
  v8 = &v7[v6];
  if (v6)
  {
    while (*v7 == 47)
    {
      ++v7;
      if (!--v6)
      {
        v7 = v8;
        goto LABEL_14;
      }
    }
  }
  if (v7 == v8)
  {
LABEL_14:
    v9 = v8;
  }
  else
  {
    result = v8;
    v9 = v7;
    while (*v9 != 47)
    {
      if (++v9 == v8)
      {
        v8 = v7;
        v9 = result;
        goto LABEL_16;
      }
    }
    v8 = v7;
  }
LABEL_16:
  v10 = *(char **)v2;
  if (v5)
    v11 = *(char **)v2;
  else
    v11 = v2;
  v12 = v7 - v11;
  if (v12 > 2)
    v13 = 1;
  else
    v13 = v12;
  v14 = (int)v4 < 0;
  v15 = (int)v4 < 0;
  v4 = v4;
  if (v14)
    v16 = *(char **)v2;
  else
    v16 = v2;
  if (v14)
    v4 = *((_QWORD *)v2 + 1);
  if (v8 == &v16[v4])
  {
LABEL_110:
    LOBYTE(v44) = *((_BYTE *)&a2->__r_.__value_.__s + 23);
    goto LABEL_111;
  }
  v17 = v13;
  while (1)
  {
LABEL_29:
    v18 = v9 - v8;
    if (v9 - v8 != 2)
    {
      if (v18 == 1 && *v8 == 46)
        goto LABEL_65;
LABEL_45:
      if (!v15)
        v10 = v2;
      if (&v10[v17] == v8)
      {
        v17 += v18;
        size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) != 0)
          size = a2->__r_.__value_.__l.__size_;
        if (v17 != size)
          ++v17;
      }
      else
      {
        while (v8 != v9)
        {
          v28 = *v8++;
          v27 = v28;
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = a2;
          else
            v29 = (std::string *)a2->__r_.__value_.__r.__words[0];
          v29->__r_.__value_.__s.__data_[v17++] = v27;
        }
        v30 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        v31 = (char)v30;
        if ((v30 & 0x80u) != 0)
          v30 = a2->__r_.__value_.__l.__size_;
        if (v17 != v30)
        {
          if (v31 >= 0)
            v32 = a2;
          else
            v32 = (std::string *)a2->__r_.__value_.__r.__words[0];
          v32->__r_.__value_.__s.__data_[v17++] = 47;
        }
      }
      goto LABEL_65;
    }
    if (*v8 != 46 || v8[1] != 46)
      goto LABEL_45;
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = (std::string::size_type)a2;
    else
      v19 = a2->__r_.__value_.__r.__words[0];
    v20 = (char *)(v19 + v13);
    v21 = (char *)(v19 + v13);
    v22 = (char *)(v19 + v17);
    v23 = v13 - v17;
    if (v13 != v17)
    {
      v22 = (char *)(v19 + v17);
      result = (char *)(v19 + v17);
      while (1)
      {
        v36 = *--result;
        if (v36 != 47)
          break;
        v22 = result;
        if (!++v23)
        {
          v25 = (char *)(v19 + v13);
          goto LABEL_85;
        }
      }
    }
    if (v22 == v20)
    {
      v25 = v22;
LABEL_85:
      v22 = (char *)(v19 + v13);
      if (!v13)
      {
LABEL_89:
        *(_BYTE *)(v19 + v17) = 46;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v37 = a2;
        else
          v37 = (std::string *)a2->__r_.__value_.__r.__words[0];
        v38 = (std::string::size_type)v37 + v17;
        v39 = v17 + 2;
        *(_BYTE *)(v38 + 1) = 46;
        v40 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        v41 = (char)v40;
        if ((v40 & 0x80u) != 0)
          v40 = a2->__r_.__value_.__l.__size_;
        if (v39 == v40)
        {
          v17 += 2;
        }
        else
        {
          v17 += 3;
          if (v41 >= 0)
            v43 = a2;
          else
            v43 = (std::string *)a2->__r_.__value_.__r.__words[0];
          v43->__r_.__value_.__s.__data_[v39] = 47;
        }
        goto LABEL_65;
      }
    }
    else
    {
      v21 = v22;
      result = v22;
      while (1)
      {
        v24 = *--result;
        if (v24 == 47)
          break;
        v21 = result;
        if (result == v20)
        {
          v21 = (char *)(v13 + v19);
          break;
        }
      }
      v25 = v22;
    }
    if (v25 - v21 == 2 && *(v22 - 1) == 46 && *(v22 - 2) == 46)
      goto LABEL_89;
    v42 = &v21[-v19];
    if (v22 != v20)
      v17 = (std::string::size_type)v42;
LABEL_65:
    v15 = v2[23] < 0;
    v10 = *(char **)v2;
    v33 = v2[23];
    if (v2[23] >= 0)
      v34 = v2;
    else
      v34 = *(char **)v2;
    if (v2[23] < 0)
      v33 = *((_QWORD *)v2 + 1);
    v35 = &v34[v33];
    if (v9 != &v34[v33])
    {
      while (*v9 == 47)
      {
        if (++v9 == v35)
        {
          v8 = &v34[v33];
          goto LABEL_75;
        }
      }
    }
    v8 = v9;
LABEL_75:
    if (v8 == v35)
      break;
    v9 = v8;
    while (*v9 != 47)
    {
      if (++v9 == v35)
      {
        v9 = v35;
        goto LABEL_29;
      }
    }
  }
  if (v17 <= v13)
  {
    v13 = v17;
    goto LABEL_110;
  }
  v44 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  v45 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if (v44 >= 0)
    v45 = a2;
  if (v45->__r_.__value_.__s.__data_[v17 - 1] == 47)
    v13 = v17 - 1;
  else
    v13 = v17;
LABEL_111:
  v46 = a2->__r_.__value_.__l.__size_;
  v47 = v44;
  if ((v44 & 0x80u) == 0)
    v48 = v44;
  else
    v48 = a2->__r_.__value_.__l.__size_;
  if (v13 != v48)
  {
    result = (char *)std::string::erase(a2, v13, 0xFFFFFFFFFFFFFFFFLL);
    v47 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    v46 = a2->__r_.__value_.__l.__size_;
    LOBYTE(v44) = *((_BYTE *)&a2->__r_.__value_.__s + 23);
  }
  if ((v44 & 0x80u) == 0)
    v49 = v47;
  else
    v49 = v46;
  if (!v49)
    return (char *)MEMORY[0x212B929D0](a2, ".");
  return result;
}

void sub_20BE98798(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchAbsPath(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _BYTE *v4;
  char *v5;
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  void *__p[2];
  std::string::size_type v16;

  if (*(char *)(a1 + 23) < 0)
  {
    v4 = *(_BYTE **)a1;
    if (!*(_QWORD *)(a1 + 8))
    {
      sub_20BDDBFAC(a2, v4, 0);
      return;
    }
  }
  else
  {
    v4 = (_BYTE *)a1;
    if (!*(_BYTE *)(a1 + 23))
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      return;
    }
  }
  if (*v4 == 47)
  {
    pxrInternal__aapl__pxrReserved__::ArchNormPath((char *)a1, a2);
  }
  else
  {
    v5 = (char *)operator new[](0x400uLL);
    if (getcwd(v5, 0x400uLL))
    {
      sub_20BDDC0E4(&v13, v5);
      v6 = std::string::append(&v13, "/");
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
      v6->__r_.__value_.__l.__size_ = 0;
      v6->__r_.__value_.__r.__words[2] = 0;
      v6->__r_.__value_.__r.__words[0] = 0;
      v8 = *(char *)(a1 + 23);
      if (v8 >= 0)
        v9 = (const std::string::value_type *)a1;
      else
        v9 = *(const std::string::value_type **)a1;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(a1 + 23);
      else
        v10 = *(_QWORD *)(a1 + 8);
      v11 = std::string::append(&v14, v9, v10);
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v16 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      pxrInternal__aapl__pxrReserved__::ArchNormPath((char *)__p, a2);
      if (SHIBYTE(v16) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
    }
    else if (*(char *)(a1 + 23) < 0)
    {
      sub_20BDDBFAC(a2, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
    operator delete[](v5);
  }
}

void sub_20BE98950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  operator delete[](v28);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::ArchGetStatMode(pxrInternal__aapl__pxrReserved__ *this, char *a2, int *a3)
{
  int v4;
  stat v6;

  v4 = stat((const char *)this, &v6);
  if (!v4)
    *(_DWORD *)a2 = v6.st_mode;
  return v4 == 0;
}

double pxrInternal__aapl__pxrReserved__::ArchGetAccessTime(pxrInternal__aapl__pxrReserved__ *this, const stat *a2)
{
  return (double)*((uint64_t *)this + 5) * 0.000000001 + (double)*((uint64_t *)this + 4);
}

double pxrInternal__aapl__pxrReserved__::ArchGetStatusChangeTime(pxrInternal__aapl__pxrReserved__ *this, const stat *a2)
{
  return (double)*((uint64_t *)this + 9) * 0.000000001 + (double)*((uint64_t *)this + 8);
}

off_t pxrInternal__aapl__pxrReserved__::ArchGetFileLength(FILE *this, __sFILE *a2)
{
  int v2;
  stat v4;

  if (!this)
    return -1;
  v2 = fileno(this);
  if (fstat(v2, &v4) < 0)
    return -1;
  else
    return v4.st_size;
}

off_t pxrInternal__aapl__pxrReserved__::ArchGetFileLength(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  stat v3;

  if (stat((const char *)this, &v3) < 0)
    return -1;
  else
    return v3.st_size;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetFileName@<X0>(FILE *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t result;
  _BYTE v6[1024];
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = fileno(this);
  result = fcntl(v4, 50, v6);
  if ((_DWORD)result != -1)
    return MEMORY[0x212B929D0](a2, v6);
  return result;
}

void sub_20BE98B20(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchMakeTmpFileName(uint64_t *a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  void **v9;
  uint64_t *v10;
  uint64_t *v11;
  void *__p[2];
  char v13;

  v4 = (char *)qword_254784F58;
  if (!qword_254784F58)
  {
    sub_20BE9900C();
    v4 = (char *)qword_254784F58;
  }
  sub_20BDDC0E4(__p, v4);
  do
    v5 = __ldaxr((unsigned int *)&unk_25473B100);
  while (__stlxr(v5 + 1, (unsigned int *)&unk_25473B100));
  v6 = getpid();
  v9 = __p;
  if (v13 < 0)
    v9 = (void **)__p[0];
  if (*((char *)a1 + 23) >= 0)
    v10 = a1;
  else
    v10 = (uint64_t *)*a1;
  if (*((char *)a2 + 23) >= 0)
    v11 = a2;
  else
    v11 = (uint64_t *)*a2;
  if ((_DWORD)v5 == 1)
    pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s/%s.%d%s", v7, v8, v9, v10, v6, v11);
  else
    pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s/%s.%d.%d%s", v7, v8, v9, v10, v6, v5, v11);
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_20BE98C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetTmpDir(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t result;

  result = qword_254784F58;
  if (!qword_254784F58)
  {
    sub_20BE9900C();
    return qword_254784F58;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchMakeTmpFile(const char *a1, char *a2)
{
  char *v4;
  uint64_t TmpFile;
  void *__p[2];
  char v8;

  v4 = (char *)qword_254784F58;
  if (!qword_254784F58)
  {
    sub_20BE9900C();
    v4 = (char *)qword_254784F58;
  }
  sub_20BDDC0E4(__p, v4);
  TmpFile = pxrInternal__aapl__pxrReserved__::ArchMakeTmpFile((uint64_t *)__p, a1, a2);
  if (v8 < 0)
    operator delete(__p[0]);
  return TmpFile;
}

void sub_20BE98CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchMakeTmpFile(uint64_t *a1, const char *a2, char *a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  size_t v9;
  const char *v10;
  uint64_t v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v17[2];
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a1 + 23) >= 0)
    v4 = a1;
  else
    v4 = (uint64_t *)*a1;
  pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s/%s.XXXXXX", a2, a3, v4);
  if ((char)v18 < 0)
  {
    MEMORY[0x24BDAC7A8](v5, (char *)v17[1] + 1, v6);
    v8 = (char *)v17 - ((v11 + 16) & 0xFFFFFFFFFFFFFFF0);
    bzero(v8, v12);
    v10 = (const char *)v17[0];
  }
  else
  {
    MEMORY[0x24BDAC7A8](v5, v18 + 1, v6);
    v8 = (char *)v17 - v7;
    bzero((char *)v17 - v7, v9);
    v10 = (const char *)v17;
  }
  v13 = strcpy(v8, v10);
  v14 = mkstemp(v13);
  v15 = v14;
  if ((_DWORD)v14 != -1)
  {
    fchmod(v14, 0x1A0u);
    if (a3)
      MEMORY[0x212B929D0](a3, v8);
  }
  if ((char)v18 < 0)
    operator delete(v17[0]);
  return v15;
}

void sub_20BE98E58(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchMakeTmpSubdir(uint64_t *a1@<X0>, const char *a2@<X1>, char *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  const char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  void *v17[2];
  unsigned __int8 v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s/%s.XXXXXX", a2, a3, v5);
  if ((char)v18 < 0)
  {
    v9 = (char *)v17[1] + 1;
    MEMORY[0x24BDAC7A8](v6, v7, v8);
    v11 = (char *)v17 - ((v13 + 16) & 0xFFFFFFFFFFFFFFF0);
    bzero(v11, (size_t)v9);
    v12 = (const char *)v17[0];
  }
  else
  {
    v9 = (char *)(v18 + 1);
    MEMORY[0x24BDAC7A8](v6, v7, v8);
    v11 = (char *)v17 - v10;
    bzero((char *)v17 - v10, (size_t)v9);
    v12 = (const char *)v17;
  }
  v14 = strncpy(v11, v12, (size_t)v9);
  v15 = mkdtemp(v14);
  v16 = v15;
  if (v15)
  {
    chmod(v15, 0x1E8u);
    MEMORY[0x212B929D0](a4, v16);
  }
  if ((char)v18 < 0)
    operator delete(v17[0]);
}

void sub_20BE98FD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20BE9900C()
{
  char v0;
  const char *v1;
  char *TemporaryDirectory;
  void *__p[2];
  char v4;
  char *__s1[2];
  char v6;

  sub_20BDDC0E4(__p, "TMPDIR");
  pxrInternal__aapl__pxrReserved__::ArchGetEnv((const char *)__p, __s1);
  if (v4 < 0)
    operator delete(__p[0]);
  v0 = v6;
  if (v6 < 0)
  {
    if (__s1[1])
    {
      v1 = __s1[0];
      goto LABEL_8;
    }
  }
  else if (v6)
  {
    v1 = (const char *)__s1;
LABEL_8:
    TemporaryDirectory = strdup(v1);
    goto LABEL_10;
  }
  TemporaryDirectory = (char *)__DarwinGetTemporaryDirectory();
  v0 = v6;
LABEL_10:
  qword_254784F58 = (uint64_t)TemporaryDirectory;
  if (v0 < 0)
    operator delete(__s1[0]);
}

void sub_20BE9909C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

size_t *pxrInternal__aapl__pxrReserved__::Arch_Unmapper::operator()(size_t *result, void *a2)
{
  if (a2)
    return (size_t *)munmap(a2, *result);
  return result;
}

{
  if (a2)
    return (size_t *)munmap(a2, *result);
  return result;
}

double sub_20BE99100@<D0>(FILE *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  off_t FileLength;
  double result;
  size_t v8;
  int v9;
  void *v10;
  void *v11;
  int v12;
  const char *v13;
  __int128 v14;
  uint64_t v15;

  FileLength = pxrInternal__aapl__pxrReserved__::ArchGetFileLength(a1, (__sFILE *)a2);
  if (FileLength < 0)
  {
    *a3 = 0;
    a3[1] = -1;
  }
  else
  {
    v8 = FileLength;
    v9 = fileno(a1);
    v10 = mmap(0, v8, 1, 2, v9, 0);
    if (v10 == (void *)-1)
      v11 = 0;
    else
      v11 = v10;
    *a3 = v11;
    a3[1] = v8;
    if (a2 && !v11)
    {
      v12 = *__error();
      v13 = "system limit on mapped regions exceeded, or out of memory";
      if (v12 == 12 || v12 == 24)
        goto LABEL_11;
      if (v12 == 22)
      {
        v13 = "bad arguments to mmap()";
LABEL_11:
        MEMORY[0x212B929D0](a2, v13);
        return result;
      }
      pxrInternal__aapl__pxrReserved__::ArchStrerror(&v14);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      result = *(double *)&v14;
      *(_OWORD *)a2 = v14;
      *(_QWORD *)(a2 + 16) = v15;
    }
  }
  return result;
}

void sub_20BE991E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE99858(v1, 0);
  _Unwind_Resume(a1);
}

double sub_20BE99208@<D0>(FILE *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  off_t FileLength;
  double result;
  size_t v8;
  int v9;
  void *v10;
  void *v11;
  int v12;
  const char *v13;
  __int128 v14;
  uint64_t v15;

  FileLength = pxrInternal__aapl__pxrReserved__::ArchGetFileLength(a1, (__sFILE *)a2);
  if (FileLength < 0)
  {
    *a3 = 0;
    a3[1] = -1;
  }
  else
  {
    v8 = FileLength;
    v9 = fileno(a1);
    v10 = mmap(0, v8, 3, 2, v9, 0);
    if (v10 == (void *)-1)
      v11 = 0;
    else
      v11 = v10;
    *a3 = v11;
    a3[1] = v8;
    if (a2 && !v11)
    {
      v12 = *__error();
      v13 = "system limit on mapped regions exceeded, or out of memory";
      if (v12 == 12 || v12 == 24)
        goto LABEL_11;
      if (v12 == 22)
      {
        v13 = "bad arguments to mmap()";
LABEL_11:
        MEMORY[0x212B929D0](a2, v13);
        return result;
      }
      pxrInternal__aapl__pxrReserved__::ArchStrerror(&v14);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      result = *(double *)&v14;
      *(_OWORD *)a2 = v14;
      *(_QWORD *)(a2 + 16) = v15;
    }
  }
  return result;
}

void sub_20BE992F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE99884(v1, 0);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchMapFileReadOnly(const char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  FILE *v5;
  FILE *v6;
  __int128 v7;
  uint64_t v8;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v5 = fopen(a1, "rb");
  if (v5)
  {
    v6 = v5;
    sub_20BE99100(v5, a2, a3);
    fclose(v6);
  }
  else
  {
    if (a2)
    {
      pxrInternal__aapl__pxrReserved__::ArchStrerror(&v7);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_OWORD *)a2 = v7;
      *(_QWORD *)(a2 + 16) = v8;
    }
    *a3 = 0;
    a3[1] = -1;
  }
}

void sub_20BE993B8(_Unwind_Exception *a1)
{
  FILE *v1;

  fclose(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchMapFileReadWrite(const char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  FILE *v5;
  FILE *v6;
  __int128 v7;
  uint64_t v8;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v5 = fopen(a1, "rb");
  if (v5)
  {
    v6 = v5;
    sub_20BE99208(v5, a2, a3);
    fclose(v6);
  }
  else
  {
    if (a2)
    {
      pxrInternal__aapl__pxrReserved__::ArchStrerror(&v7);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_OWORD *)a2 = v7;
      *(_QWORD *)(a2 + 16) = v8;
    }
    *a3 = 0;
    a3[1] = -1;
  }
}

void sub_20BE99478(_Unwind_Exception *a1)
{
  FILE *v1;

  fclose(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchMemAdvise(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 v6;
  uint64_t v7;
  size_t v8;
  int v9;
  int v10;
  FILE *v11;
  int v12;
  void **v13;
  void *__p[2];
  char v15;

  v6 = atomic_load((unsigned __int8 *)&qword_254784F68);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_254784F68))
  {
    qword_254784F60 = -sysconf(29);
    __cxa_guard_release(&qword_254784F68);
  }
  v7 = qword_254784F60 & a1;
  v8 = a1 - (qword_254784F60 & a1) + a2;
  v9 = posix_madvise((void *)(qword_254784F60 & a1), v8, dword_20CA53FF0[a3]);
  if (v9)
  {
    v10 = v9;
    v11 = (FILE *)*MEMORY[0x24BDAC8D8];
    v12 = *__error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror(__p);
    if (v15 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    fprintf(v11, "failed call to posix_madvise(%zd, %zd)ret=%d, errno=%d '%s'\n", v7, v8, v10, v12, (const char *)v13);
    if (v15 < 0)
      operator delete(__p[0]);
  }
}

void sub_20BE99598(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254784F68);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::ArchQueryMappedMemoryResidency(pxrInternal__aapl__pxrReserved__ *this, size_t a2, char *a3, unsigned __int8 *a4)
{
  return mincore(this, a2, a3) == 0;
}

ssize_t pxrInternal__aapl__pxrReserved__::ArchPRead(FILE *this, __sFILE *a2, char *a3, off_t a4)
{
  char *v5;
  int v7;
  ssize_t result;
  uint64_t v9;

  if (!a3)
    return 0;
  v5 = a3;
  v7 = fileno(this);
  result = pread(v7, a2, (size_t)v5, a4);
  if ((char *)result != v5 && result)
  {
    v9 = 0;
    while (1)
    {
      if (result == -1)
      {
        if (*__error() != 4)
          return -1;
      }
      else if (result >= 1)
      {
        a2 = (__sFILE *)((char *)a2 + result);
        a4 += result;
        v5 -= result;
        v9 += result;
      }
      result = pread(v7, a2, (size_t)v5, a4);
      if ((char *)result == v5 || !result)
      {
        result += v9;
        return result;
      }
    }
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::ArchPWrite(FILE *this, __sFILE *a2, char *a3, off_t a4)
{
  off_t v4;
  int v7;
  ssize_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;

  if (a4 < 0)
    return (char *)-1;
  v4 = a4;
  v7 = fileno(this);
  v8 = pwrite(v7, a2, (size_t)a3, v4);
  if ((char *)v8 != a3)
  {
    v9 = 0;
    while (v8 != -1)
    {
      v10 = v9;
      v11 = a3;
      v9 += v8;
      a3 -= v8;
      v4 += v8;
      a2 = (__sFILE *)((char *)a2 + v8);
      v8 = pwrite(v7, a2, (size_t)a3, v4);
      if ((char *)v8 == a3)
        return &v11[v10];
    }
    return (char *)-1;
  }
  return a3;
}

void pxrInternal__aapl__pxrReserved__::ArchReadLink(pxrInternal__aapl__pxrReserved__ *this@<X0>, _QWORD *a2@<X8>)
{
  char *v5;
  int64_t v6;
  char *v7;
  ssize_t v8;
  stat v9;

  if (this && *(_BYTE *)this)
  {
    v5 = 0;
    v6 = 1024;
    while (1)
    {
      v7 = (char *)operator new[](v6);
      if (v5)
        operator delete[](v5);
      v8 = readlink((const char *)this, v7, v6);
      if (v8 == -1)
      {
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
        goto LABEL_15;
      }
      if (v8 < v6)
        break;
      if (lstat((const char *)this, &v9))
        v6 *= 2;
      else
        v6 = v9.st_size + 1;
      v5 = v7;
    }
    v7[v8] = 0;
    sub_20BDDC0E4(a2, v7);
LABEL_15:
    operator delete[](v7);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
}

void sub_20BE9982C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

void *sub_20BE99858(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (result)
    return (void *)munmap(result, *(_QWORD *)(a1 + 8));
  return result;
}

void *sub_20BE99884(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (result)
    return (void *)munmap(result, *(_QWORD *)(a1 + 8));
  return result;
}

void pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName(uint64_t a1@<X0>, const std::string *a2@<X1>, std::string *a3@<X8>)
{
  int v5;
  unint64_t size;
  char *v7;
  uint64_t v8;
  const std::string *v9;
  char *v10;
  uint64_t v11;
  std::string *v12;
  char *v13;
  BOOL v14;
  std::string::size_type v15;
  std::string *v16;
  int v17;
  const std::string::value_type *v18;
  std::string::size_type v19;
  int64_t v20;
  std::string *p_p;
  std::string *v22;
  int64_t v23;
  std::string::size_type v24;
  std::string::size_type i;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  int v29;
  unint64_t v30;
  int v31;
  std::string::size_type v32;
  _OWORD *v33;
  void **v34;
  std::string::size_type v35;
  std::string *v36;
  uint64_t v37;
  char *v38;
  int64_t v40;
  std::string *p_str;
  _BYTE *v42;
  std::string *v43;
  _BYTE *v44;
  char *v45;
  int v46;
  std::string *v47;
  int64_t v48;
  char *v49;
  char *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  std::string::size_type v56;
  int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string::size_type v63;
  uint64_t v64;
  _QWORD *v65;
  std::string::size_type v66;
  std::string::size_type v67;
  const std::string::value_type *v68;
  int v69;
  const std::string::value_type *v70;
  std::string::size_type v71;
  int v72;
  const std::string::value_type *v73;
  std::string::size_type v74;
  std::string *v75;
  std::string *v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  unint64_t v80;
  uint64_t v81;
  std::string::size_type v82;
  std::string v84;
  std::string __p;
  std::string __str;
  std::string __dst;
  std::string v88;
  std::string v89;
  std::string *v90;
  std::string v91;

  v5 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  v7 = (char *)a2->__r_.__value_.__r.__words[0];
  size = a2->__r_.__value_.__l.__size_;
  if (v5 >= 0)
    v8 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v8 = a2->__r_.__value_.__l.__size_;
  if (v5 >= 0)
    v9 = a2;
  else
    v9 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (v8 >= 7)
  {
    v10 = (char *)v9 + v8;
    v11 = v8;
    v12 = (std::string *)v9;
    do
    {
      v13 = (char *)memchr(v12, 32, v11 - 6);
      if (!v13)
        break;
      v14 = *(_DWORD *)v13 == 1769429792 && *(_DWORD *)(v13 + 3) == 543716457;
      if (v14)
      {
        if (v13 != v10)
        {
          v15 = v13 - (char *)v9;
          if (v15 != -1)
          {
            std::string::basic_string(&v91, a2, 0, v15, (std::allocator<char> *)&v89);
            std::string::basic_string(&v89, a2, v15 + 6, v8 - v15 - 7, (std::allocator<char> *)&__str);
            __dst = v91;
            v88 = v89;
            goto LABEL_23;
          }
        }
        break;
      }
      v12 = (std::string *)(v13 + 1);
      v11 = v10 - (char *)v12;
    }
    while (v10 - (char *)v12 >= 7);
  }
  if (v5 < 0)
    sub_20BDDBFAC(&__dst, v7, size);
  else
    __dst = *a2;
  memset(&v88, 0, sizeof(v88));
LABEL_23:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_20BDDBFAC(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __p = __dst;
  v16 = (std::string *)sub_20BDDC0E4(&v91, "::");
  v17 = *(char *)(a1 + 23);
  if (v17 >= 0)
    v18 = (const std::string::value_type *)a1;
  else
    v18 = *(const std::string::value_type **)a1;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a1 + 23);
  else
    v19 = *(_QWORD *)(a1 + 8);
  std::string::append(v16, v18, v19);
  v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = __p.__r_.__value_.__l.__size_;
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v91;
  else
    v22 = (std::string *)v91.__r_.__value_.__r.__words[0];
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  else
    v23 = v91.__r_.__value_.__l.__size_;
  if (v23 && v20 >= v23)
  {
    v45 = (char *)p_p + v20;
    v46 = v22->__r_.__value_.__s.__data_[0];
    v47 = p_p;
    do
    {
      v48 = v20 - v23;
      if (v48 == -1)
        break;
      v49 = (char *)memchr(v47, v46, v48 + 1);
      if (!v49)
        break;
      v50 = v49;
      if (!memcmp(v49, v22, v23))
      {
        if (v50 == v45)
          v80 = -1;
        else
          v80 = v50 - (char *)p_p;
        if (v80 + 1 > 1)
        {
          if (*(char *)(a1 + 23) >= 0)
            v81 = *(unsigned __int8 *)(a1 + 23);
          else
            v81 = *(_QWORD *)(a1 + 8);
          v82 = sub_20BE9A274((uint64_t *)&__p, v80);
          std::string::basic_string(&__str, &__p, v82, v80 + v81 - v82 + 2, (std::allocator<char> *)&v89);
          goto LABEL_48;
        }
        break;
      }
      v47 = (std::string *)(v50 + 1);
      v20 = v45 - (v50 + 1);
    }
    while (v20 >= v23);
  }
  if (*(char *)(a1 + 23) < 0)
    sub_20BDDBFAC(&__str, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __str = *(std::string *)a1;
LABEL_48:
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)&v84.__r_.__value_.__r.__words[1] = 0uLL;
  v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84.__r_.__value_.__l.__size_;
  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v24 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
  else
    v24 = v88.__r_.__value_.__l.__size_;
  for (i = std::string::rfind(&v88, 61, v24); i != -1; i = std::string::rfind(&v88, 61, v37 + 1))
  {
    v26 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v88;
    else
      v27 = (std::string *)v88.__r_.__value_.__r.__words[0];
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v26 = v88.__r_.__value_.__l.__size_;
    if (v26 <= i)
    {
LABEL_66:
      v28 = -1;
    }
    else
    {
      v28 = i;
      while (1)
      {
        v29 = v27->__r_.__value_.__s.__data_[v28];
        if (v29 != 61 && v29 != 32)
          break;
        if (v26 == ++v28)
          goto LABEL_66;
      }
    }
    if (v26 > i)
      v26 = i + 1;
    if (v26)
    {
      v30 = v26 - 1;
      do
      {
        v31 = v27->__r_.__value_.__s.__data_[v30];
        if (v31 != 61 && v31 != 32)
          break;
        --v30;
      }
      while (v30 != -1);
    }
    else
    {
      v30 = -1;
    }
    v32 = sub_20BE9A274((uint64_t *)&v88, v30);
    std::string::basic_string(&v91, &v88, v28, v24 - v28, (std::allocator<char> *)&v89);
    std::string::basic_string(&v89, &v88, v32, v30 - v32 + 1, (std::allocator<char> *)&v90);
    v90 = &v89;
    v33 = sub_20BDDE428((uint64_t **)&v84, (const void **)&v89.__r_.__value_.__l.__data_, (uint64_t)&unk_20CAC184C, (_OWORD **)&v90);
    v34 = (void **)v33 + 7;
    if (*((char *)v33 + 79) < 0)
      operator delete(*v34);
    *(std::string *)v34 = v91;
    *((_BYTE *)&v91.__r_.__value_.__s + 23) = 0;
    v91.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v89.__r_.__value_.__l.__data_);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
    }
    v35 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v36 = &v88;
    else
      v36 = (std::string *)v88.__r_.__value_.__r.__words[0];
    if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v35 = v88.__r_.__value_.__l.__size_;
    if (v35 <= v32 - 1)
      v37 = v35;
    else
      v37 = v32;
    v38 = (char *)&v36[-1].__r_.__value_.__r.__words[2] + 7;
    while (v37)
    {
      if (!memchr(" =,;", v38[v37--], 4uLL))
        goto LABEL_94;
    }
    v37 = -1;
LABEL_94:
    v24 = v37 + 1;
  }
  *(_OWORD *)&v89.__r_.__value_.__r.__words[1] = 0uLL;
  v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v40 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v40 = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  if (v40 >= 1)
  {
    v42 = (char *)p_str + v40;
    v43 = p_str;
    while (1)
    {
      v44 = memchr(v43, 60, v40);
      if (!v44)
        goto LABEL_159;
      if (*v44 == 60)
        break;
      v43 = (std::string *)(v44 + 1);
      v40 = v42 - (_BYTE *)v43;
      if (v42 - (_BYTE *)v43 < 1)
        goto LABEL_159;
    }
    if (v44 != v42)
    {
      v51 = v44 - (_BYTE *)p_str;
      while (v51 != -1)
      {
        v53 = __str.__r_.__value_.__l.__size_;
        v52 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = &__str;
        else
          v54 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v55 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          v55 = __str.__r_.__value_.__l.__size_;
        if (v55 > v51)
        {
          v56 = v51;
          while (1)
          {
            v57 = v54->__r_.__value_.__s.__data_[v56];
            if (v57 != 60 && v57 != 32)
              break;
            if (v55 == ++v56)
              goto LABEL_126;
          }
          if (v56 != -1)
          {
            if ((*((_BYTE *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
            {
              if (*(_BYTE *)(__str.__r_.__value_.__r.__words[0] + v56) != 60)
              {
LABEL_136:
                if (v53 > v56)
                {
                  v58 = (unsigned __int8 *)v52 + v56;
                  v59 = (unsigned __int8 *)v52 + v53;
LABEL_138:
                  v60 = 0;
                  while (*v58 != asc_20CB36D49[v60])
                  {
                    if (++v60 == 2)
                    {
                      if (++v58 != v59)
                        goto LABEL_138;
                      goto LABEL_147;
                    }
                  }
                  if (v58 != v59)
                  {
                    v61 = v58 - (unsigned __int8 *)v52;
                    if (v58 - (unsigned __int8 *)v52 != -1)
                    {
                      if (v54->__r_.__value_.__s.__data_[v61] == 44)
                        v51 = v61 + 1;
                      else
                        v51 = std::string::find(&__str, 60, v56);
                      goto LABEL_152;
                    }
                  }
                }
LABEL_147:
                v62 = std::string::find(&__str, 62, v56);
                if (v62 != -1)
                {
                  v61 = v62;
                  goto LABEL_151;
                }
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                {
                  v51 = -1;
                  v61 = __str.__r_.__value_.__l.__size_;
                }
                else
                {
                  v61 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
LABEL_151:
                  v51 = -1;
                }
LABEL_152:
                std::string::basic_string(&v91, &__str, v56, v61 - v56, (std::allocator<char> *)&v90);
                v63 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
                if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v63 = v91.__r_.__value_.__l.__size_;
                if (v63)
                {
                  v64 = sub_20BDEEBA4((uint64_t)&v84, (const void **)&v91.__r_.__value_.__l.__data_);
                  if (&v84.__r_.__value_.__r.__words[1] != (std::string::size_type *)v64)
                    sub_20BE9A330((uint64_t **)&v89, (const void **)(v64 + 32), (__int128 *)(v64 + 32));
                }
                goto LABEL_127;
              }
            }
            else
            {
              v52 = &__str;
              v53 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              if (__str.__r_.__value_.__s.__data_[v56] != 60)
                goto LABEL_136;
            }
          }
        }
LABEL_126:
        memset(&v91, 0, sizeof(v91));
        v51 = -1;
LABEL_127:
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
      }
    }
  }
LABEL_159:
  sub_20BDE9D48((uint64_t)&v84, (_QWORD *)v84.__r_.__value_.__l.__size_);
  v65 = (_QWORD *)v89.__r_.__value_.__l.__size_;
  v84 = v89;
  if (v89.__r_.__value_.__r.__words[2])
  {
    *(_QWORD *)(v89.__r_.__value_.__l.__size_ + 16) = &v84.__r_.__value_.__l.__size_;
    v89.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89.__r_.__value_.__l.__size_;
    *(_OWORD *)&v89.__r_.__value_.__r.__words[1] = 0uLL;
    v65 = 0;
  }
  else
  {
    v84.__r_.__value_.__r.__words[0] = (std::string::size_type)&v84.__r_.__value_.__l.__size_;
  }
  sub_20BDE9D48((uint64_t)&v89, v65);
  memset(&v91, 0, sizeof(v91));
  if (v84.__r_.__value_.__r.__words[2])
  {
    v66 = v84.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v84.__r_.__value_.__l.__data_ != &v84.__r_.__value_.__r.__words[1])
    {
      do
      {
        v67 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
        if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v67 = v91.__r_.__value_.__l.__size_;
        if (v67)
          v68 = ", ";
        else
          v68 = " [with ";
        std::string::append(&v91, v68);
        v69 = *(char *)(v66 + 55);
        if (v69 >= 0)
          v70 = (const std::string::value_type *)(v66 + 32);
        else
          v70 = *(const std::string::value_type **)(v66 + 32);
        if (v69 >= 0)
          v71 = *(unsigned __int8 *)(v66 + 55);
        else
          v71 = *(_QWORD *)(v66 + 40);
        std::string::append(&v91, v70, v71);
        std::string::append(&v91, " = ");
        v72 = *(char *)(v66 + 79);
        if (v72 >= 0)
          v73 = (const std::string::value_type *)(v66 + 56);
        else
          v73 = *(const std::string::value_type **)(v66 + 56);
        if (v72 >= 0)
          v74 = *(unsigned __int8 *)(v66 + 79);
        else
          v74 = *(_QWORD *)(v66 + 64);
        std::string::append(&v91, v73, v74);
        v75 = *(std::string **)(v66 + 8);
        if (v75)
        {
          do
          {
            v76 = v75;
            v75 = (std::string *)v75->__r_.__value_.__r.__words[0];
          }
          while (v75);
        }
        else
        {
          do
          {
            v76 = *(std::string **)(v66 + 16);
            v14 = v76->__r_.__value_.__r.__words[0] == v66;
            v66 = (std::string::size_type)v76;
          }
          while (!v14);
        }
        v66 = (std::string::size_type)v76;
      }
      while (v76 != (std::string *)&v84.__r_.__value_.__r.__words[1]);
    }
    std::string::append(&v91, "]");
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v77 = &__str;
  else
    v77 = (std::string *)__str.__r_.__value_.__r.__words[0];
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v78 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    v78 = __str.__r_.__value_.__l.__size_;
  v79 = std::string::insert(&v91, 0, (const std::string::value_type *)v77, v78);
  *a3 = *v79;
  v79->__r_.__value_.__l.__size_ = 0;
  v79->__r_.__value_.__r.__words[2] = 0;
  v79->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v91.__r_.__value_.__l.__data_);
  sub_20BDE9D48((uint64_t)&v84, (_QWORD *)v84.__r_.__value_.__l.__size_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v88.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_20BE9A188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (*(char *)(v39 - 89) < 0)
    operator delete(*(void **)(v39 - 112));
  if (a18 < 0)
    operator delete(__p);
  sub_20BE930F8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE9A274(uint64_t *a1, unint64_t a2)
{
  int v2;
  BOOL v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;

  v2 = *((char *)a1 + 23);
  v3 = v2 < 0;
  v4 = (uint64_t *)*a1;
  if (v2 >= 0)
    v4 = a1;
  v5 = *((unsigned __int8 *)a1 + 23);
  if (v3)
    v5 = a1[1];
  if (v5 > a2)
    v6 = a2 + 1;
  else
    v6 = v5;
  v7 = (uint64_t)v4 - 1;
  do
  {
    if (!v6)
      goto LABEL_30;
    v8 = *(unsigned __int8 *)(v7 + v6--);
  }
  while (v8 != 62 && v8 != 32);
LABEL_28:
  if (v6 != -1 && *((_BYTE *)v4 + v6) != 32)
  {
    v9 = v6 - 1;
    v10 = 1;
    do
    {
      v11 = v9;
      if (!v9)
        break;
      v12 = *((unsigned __int8 *)v4 + v9);
      v13 = v12 == 60 ? -1 : 0;
      if (v12 == 62)
        v13 = 1;
      v9 = v11 - 1;
      v10 += v13;
    }
    while (v10);
    if (v5 > v11)
      v6 = v11 + 1;
    else
      v6 = v5;
    while (v6)
    {
      v14 = *(unsigned __int8 *)(v7 + v6--);
      if (v14 == 62 || v14 == 32)
        goto LABEL_28;
    }
LABEL_30:
    v6 = -1;
  }
  return v6 + 1;
}

uint64_t *sub_20BE9A330(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    sub_20BDEC290((uint64_t)a1, a3, (uint64_t)v9);
    sub_20BDDE1B4(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    sub_20BDDE3A0((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchHash(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = 0;
  v4 = 0;
  sub_20BE9A474((unint64_t)this, (size_t)a2, &v4, &v3);
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchHash(pxrInternal__aapl__pxrReserved__ *this, const char *a2, unsigned int a3)
{
  unint64_t v4;
  unint64_t v5;

  v4 = a3;
  v5 = a3;
  sub_20BE9A474((unint64_t)this, (size_t)a2, &v5, &v4);
  return v5;
}

unint64_t pxrInternal__aapl__pxrReserved__::ArchHash64(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = 0;
  v4 = 0;
  sub_20BE9A474((unint64_t)this, (size_t)a2, &v3, &v4);
  return v3;
}

unint64_t pxrInternal__aapl__pxrReserved__::ArchHash64(pxrInternal__aapl__pxrReserved__ *this, const char *a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v5;

  v4 = a3;
  v5 = a3;
  sub_20BE9A474((unint64_t)this, (size_t)a2, &v4, &v5);
  return v4;
}

unint64_t sub_20BE9A474(unint64_t __src, size_t __n, unint64_t *a3, unint64_t *a4)
{
  size_t v6;
  unint64_t p_dst;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  const void *v41;
  int64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t *v177;
  unint64_t v179;
  __int128 __dst;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  uint64_t v186;

  v6 = __n;
  p_dst = __src;
  v186 = *MEMORY[0x24BDAC8D0];
  v8 = 0xDEADBEEFDEADBEEFLL;
  if (__n > 0xBF)
  {
    v39 = *a3;
    v40 = *a4;
    v41 = (const void *)(p_dst + 96 * (__n / 0x60));
    v42 = 96 * (v6 / 0x60);
    v177 = a3;
    if ((p_dst & 7) != 0)
    {
      if (v42 >= 1)
      {
        v43 = 0xDEADBEEFDEADBEEFLL;
        v44 = *a4;
        v45 = *a3;
        v46 = 0xDEADBEEFDEADBEEFLL;
        v47 = *a4;
        v48 = *a3;
        v49 = 0xDEADBEEFDEADBEEFLL;
        v50 = *a4;
        v51 = *a3;
        do
        {
          v52 = *(_OWORD *)(p_dst + 16);
          __dst = *(_OWORD *)p_dst;
          v181 = v52;
          v53 = *(_OWORD *)(p_dst + 48);
          v182 = *(_OWORD *)(p_dst + 32);
          v183 = v53;
          v54 = *(_OWORD *)(p_dst + 80);
          v184 = *(_OWORD *)(p_dst + 64);
          v185 = v54;
          v55 = ((__dst + v51) ^ v8) + v50;
          v56 = ((*((_QWORD *)&__dst + 1) + v50) ^ __ROR8__(__dst + v51, 53)) + (v40 ^ v49);
          v57 = v181 + (v40 ^ v49);
          v58 = (v57 ^ __ROR8__(*((_QWORD *)&__dst + 1) + v50, 32)) + (v55 ^ v48);
          v59 = (v55 ^ v48) + *((_QWORD *)&v181 + 1);
          v49 = (v59 ^ __ROR8__(v57, 21)) + (v56 ^ v47);
          v60 = (v56 ^ v47) + v182;
          v48 = (v60 ^ __ROR8__(v59, 33)) + (v58 ^ v46);
          v61 = (v58 ^ v46) + *((_QWORD *)&v182 + 1);
          v47 = (v61 ^ __ROR8__(v60, 47)) + (v49 ^ v45);
          v62 = (v49 ^ v45) + v183;
          v46 = (v62 ^ __ROR8__(v61, 36)) + (v48 ^ v44);
          v63 = (v48 ^ v44) + *((_QWORD *)&v183 + 1);
          v45 = (v63 ^ __ROR8__(v62, 25)) + (v47 ^ v43);
          v64 = (v47 ^ v43) + v184;
          v44 = (v64 ^ __ROR8__(v63, 7)) + (v46 ^ v39);
          v65 = (v46 ^ v39) + *((_QWORD *)&v184 + 1);
          v43 = (v65 ^ __ROR8__(v64, 9)) + (v45 ^ v40);
          v66 = (v45 ^ v40) + v54;
          v67 = v44 ^ v55;
          v51 = v43 ^ v56;
          v39 = (v66 ^ __ROR8__(v65, 10)) + v67;
          v50 = v39 ^ v58;
          v68 = (v67 + *((_QWORD *)&v54 + 1)) ^ __ROR8__(v66, 42);
          v8 = __ROR8__(v67 + *((_QWORD *)&v54 + 1), 18);
          v40 = v68 + (v43 ^ v56);
          p_dst += 96;
        }
        while (p_dst < (unint64_t)v41);
        goto LABEL_20;
      }
    }
    else if (v42 >= 1)
    {
      v43 = 0xDEADBEEFDEADBEEFLL;
      v44 = *a4;
      v45 = *a3;
      v46 = 0xDEADBEEFDEADBEEFLL;
      v47 = *a4;
      v48 = *a3;
      v49 = 0xDEADBEEFDEADBEEFLL;
      v50 = *a4;
      v51 = *a3;
      do
      {
        v69 = *(_QWORD *)p_dst + v51;
        v70 = (v69 ^ v8) + v50;
        v71 = *(_QWORD *)(p_dst + 8) + v50;
        v72 = (v71 ^ __ROR8__(v69, 53)) + (v40 ^ v49);
        v73 = *(_QWORD *)(p_dst + 16) + (v40 ^ v49);
        v74 = (v73 ^ __ROR8__(v71, 32)) + (v70 ^ v48);
        v75 = (v70 ^ v48) + *(_QWORD *)(p_dst + 24);
        v49 = (v75 ^ __ROR8__(v73, 21)) + (v72 ^ v47);
        v76 = (v72 ^ v47) + *(_QWORD *)(p_dst + 32);
        v48 = (v76 ^ __ROR8__(v75, 33)) + (v74 ^ v46);
        v77 = (v74 ^ v46) + *(_QWORD *)(p_dst + 40);
        v47 = (v77 ^ __ROR8__(v76, 47)) + (v49 ^ v45);
        v78 = (v49 ^ v45) + *(_QWORD *)(p_dst + 48);
        v46 = (v78 ^ __ROR8__(v77, 36)) + (v48 ^ v44);
        v79 = (v48 ^ v44) + *(_QWORD *)(p_dst + 56);
        v45 = (v79 ^ __ROR8__(v78, 25)) + (v47 ^ v43);
        v80 = (v47 ^ v43) + *(_QWORD *)(p_dst + 64);
        v44 = (v80 ^ __ROR8__(v79, 7)) + (v46 ^ v39);
        v81 = (v46 ^ v39) + *(_QWORD *)(p_dst + 72);
        v43 = (v81 ^ __ROR8__(v80, 9)) + (v45 ^ v40);
        v82 = (v45 ^ v40) + *(_QWORD *)(p_dst + 80);
        v83 = v44 ^ v70;
        v51 = v43 ^ v72;
        v39 = (v82 ^ __ROR8__(v81, 10)) + v83;
        v84 = v83 + *(_QWORD *)(p_dst + 88);
        v50 = v39 ^ v74;
        v8 = __ROR8__(v84, 18);
        v40 = (v84 ^ __ROR8__(v82, 42)) + v51;
        p_dst += 96;
      }
      while (p_dst < (unint64_t)v41);
      goto LABEL_20;
    }
    v51 = *a3;
    v50 = *a4;
    v49 = 0xDEADBEEFDEADBEEFLL;
    v48 = v39;
    v47 = *a4;
    v46 = 0xDEADBEEFDEADBEEFLL;
    v45 = v39;
    v44 = *a4;
    v43 = 0xDEADBEEFDEADBEEFLL;
LABEL_20:
    v175 = v8;
    v176 = v40;
    v179 = v6 % 0x60;
    memcpy(&__dst, v41, v6 % 0x60);
    bzero((char *)&__dst + v179, 96 - v179);
    HIBYTE(v185) = v179;
    v85 = *((_QWORD *)&__dst + 1) + v50 + v175 + *((_QWORD *)&v185 + 1);
    v86 = __dst + v51 + (v85 ^ (v181 + v49));
    v87 = (v86 ^ (*((_QWORD *)&v181 + 1) + v48)) + __ROR8__(*((_QWORD *)&__dst + 1) + v50, 20);
    v88 = (v87 ^ (v182 + v47)) + __ROR8__(v85 ^ (v181 + v49), 49);
    v89 = (v88 ^ (*((_QWORD *)&v182 + 1) + v46)) + __ROR8__(v86 ^ (*((_QWORD *)&v181 + 1) + v48), 30);
    v90 = (v89 ^ (v183 + v45)) + __ROR8__(v87 ^ (v182 + v47), 43);
    v91 = (v90 ^ (*((_QWORD *)&v183 + 1) + v44)) + __ROR8__(v88 ^ (*((_QWORD *)&v182 + 1) + v46), 26);
    v92 = (v91 ^ (v184 + v43)) + __ROR8__(v89 ^ (v183 + v45), 31);
    v93 = (v92 ^ (*((_QWORD *)&v184 + 1) + v39)) + __ROR8__(v90 ^ (*((_QWORD *)&v183 + 1) + v44), 54);
    v94 = (v93 ^ (v185 + v176)) + __ROR8__(v91 ^ (v184 + v43), 51);
    v95 = v94 ^ v85;
    v96 = v95 + __ROR8__(v92 ^ (*((_QWORD *)&v184 + 1) + v39), 26);
    v97 = v96 ^ v86;
    v98 = v97 + __ROR8__(v93 ^ (v185 + v176), 11);
    v99 = v98 ^ v87;
    v100 = v99 + __ROR8__(v95, 22);
    v101 = v100 ^ v88;
    v102 = v101 + __ROR8__(v97, 10);
    v103 = v102 ^ v89;
    v104 = v103 + __ROR8__(v99, 20);
    v105 = v104 ^ v90;
    v106 = v105 + __ROR8__(v101, 49);
    v107 = v106 ^ v91;
    v108 = v107 + __ROR8__(v103, 30);
    v109 = v108 ^ v92;
    v110 = v109 + __ROR8__(v105, 43);
    v111 = v110 ^ v93;
    v112 = v111 + __ROR8__(v107, 26);
    v113 = v112 ^ v94;
    v114 = v113 + __ROR8__(v109, 31);
    v115 = v114 ^ v96;
    v116 = v115 + __ROR8__(v111, 54);
    v117 = v116 ^ v98;
    v118 = v117 + __ROR8__(v113, 51);
    v119 = v118 ^ v100;
    v120 = v119 + __ROR8__(v115, 26);
    v121 = v120 ^ v102;
    __src = v121 + __ROR8__(v117, 11);
    v122 = __src ^ v104;
    v123 = v122 + __ROR8__(v119, 22);
    v124 = v123 ^ v106;
    v125 = v124 + __ROR8__(v121, 10);
    v126 = v125 ^ v108;
    v127 = v126 + __ROR8__(v122, 20);
    v128 = v127 ^ v110;
    v129 = (v128 + __ROR8__(v124, 49)) ^ v112;
    v130 = (v129 + __ROR8__(v126, 30)) ^ v114;
    v131 = (v130 + __ROR8__(v128, 43)) ^ v116;
    v132 = (v131 + __ROR8__(v129, 26)) ^ v118;
    v133 = (v132 + __ROR8__(v130, 31)) ^ v120;
    v134 = (v133 + __ROR8__(v131, 54)) ^ __src;
    v135 = (((v134 + __ROR8__(v132, 51)) ^ v123) + __ROR8__(v133, 26)) ^ v125;
    *v177 = __ROR8__(v135, 10);
    *a4 = (v135 + __ROR8__(v134, 11)) ^ v127;
    return __src;
  }
  if ((__src & 7) != 0)
  {
    __src = (unint64_t)memcpy(&__dst, (const void *)__src, __n);
    v6 = __n;
    p_dst = (unint64_t)&__dst;
  }
  v10 = v6 & 0x1F;
  v11 = *a3;
  v12 = *a4;
  if (v6 < 0x10)
  {
    v15 = 0xDEADBEEFDEADBEEFLL;
    v14 = 0xDEADBEEFDEADBEEFLL;
  }
  else
  {
    if (((v6 >> 3) & 0x1FFFFFFFFFFFFFFCLL) != 0)
    {
      v13 = p_dst + 8 * ((v6 >> 3) & 0x1FFFFFFFFFFFFFFCLL);
      v14 = 0xDEADBEEFDEADBEEFLL;
      v15 = 0xDEADBEEFDEADBEEFLL;
      do
      {
        v16 = *(_QWORD *)(p_dst + 8) + v14;
        v17 = v16 + __ROR8__(*(_QWORD *)p_dst + v15, 14);
        v18 = v17 ^ v11;
        v19 = v18 + __ROR8__(v16, 12);
        v20 = v19 ^ v12;
        v21 = v20 + __ROR8__(v18, 34);
        v22 = v21 ^ v17;
        v23 = v22 + __ROR8__(v20, 23);
        v24 = v23 ^ v19;
        v25 = v24 + __ROR8__(v22, 10);
        v26 = v25 ^ v21;
        v27 = v26 + __ROR8__(v24, 16);
        v28 = v27 ^ v23;
        v29 = v28 + __ROR8__(v26, 26);
        v30 = v29 ^ v25;
        v31 = v30 + __ROR8__(v28, 27);
        v32 = v31 ^ v27;
        v33 = v32 + __ROR8__(v30, 2);
        v34 = v33 ^ v29;
        v35 = v34 + __ROR8__(v32, 30);
        v36 = v35 ^ v31;
        v37 = v36 + __ROR8__(v34, 59);
        v15 = v37 ^ v33;
        v38 = __ROR8__(v36, 28);
        v11 = v37 + *(_QWORD *)(p_dst + 16);
        v14 = (v15 + v38) ^ v35;
        v12 = v15 + v38 + *(_QWORD *)(p_dst + 24);
        p_dst += 32;
      }
      while (p_dst < v13);
    }
    else
    {
      v15 = 0xDEADBEEFDEADBEEFLL;
      v14 = 0xDEADBEEFDEADBEEFLL;
    }
    v136 = v10 - 16;
    if (v10 >= 0x10)
    {
      v137 = *(_QWORD *)p_dst;
      v138 = *(_QWORD *)(p_dst + 8);
      p_dst += 16;
      v139 = v138 + v14;
      v140 = v139 + __ROR8__(v137 + v15, 14);
      v141 = v140 ^ v11;
      v142 = v141 + __ROR8__(v139, 12);
      v143 = v142 ^ v12;
      v144 = v143 + __ROR8__(v141, 34);
      v145 = v144 ^ v140;
      v146 = v145 + __ROR8__(v143, 23);
      v147 = v146 ^ v142;
      v148 = v147 + __ROR8__(v145, 10);
      v149 = v148 ^ v144;
      v150 = v149 + __ROR8__(v147, 16);
      v151 = v150 ^ v146;
      v152 = v151 + __ROR8__(v149, 26);
      v153 = v152 ^ v148;
      v154 = v153 + __ROR8__(v151, 27);
      v155 = v154 ^ v150;
      v156 = v155 + __ROR8__(v153, 2);
      v157 = v156 ^ v152;
      v158 = v157 + __ROR8__(v155, 30);
      v159 = v158 ^ v154;
      v11 = v159 + __ROR8__(v157, 59);
      v15 = v11 ^ v156;
      v12 = v15 + __ROR8__(v159, 28);
      v14 = v12 ^ v158;
      v10 = v136;
    }
  }
  v160 = v14 + (v6 << 56);
  switch(v10)
  {
    case 0uLL:
      v15 -= 0x2152411021524111;
      v160 -= 0x2152411021524111;
      break;
    case 1uLL:
      goto LABEL_28;
    case 2uLL:
      goto LABEL_27;
    case 3uLL:
      v15 += (unint64_t)*(unsigned __int8 *)(p_dst + 2) << 16;
LABEL_27:
      v15 += (unint64_t)*(unsigned __int8 *)(p_dst + 1) << 8;
LABEL_28:
      v161 = *(unsigned __int8 *)p_dst;
      goto LABEL_33;
    case 4uLL:
      goto LABEL_32;
    case 5uLL:
      goto LABEL_31;
    case 6uLL:
      goto LABEL_30;
    case 7uLL:
      v15 += (unint64_t)*(unsigned __int8 *)(p_dst + 6) << 48;
LABEL_30:
      v15 += (unint64_t)*(unsigned __int8 *)(p_dst + 5) << 40;
LABEL_31:
      v15 += (unint64_t)*(unsigned __int8 *)(p_dst + 4) << 32;
LABEL_32:
      v161 = *(unsigned int *)p_dst;
LABEL_33:
      v15 += v161;
      break;
    case 8uLL:
      goto LABEL_42;
    case 9uLL:
      goto LABEL_36;
    case 0xAuLL:
      goto LABEL_35;
    case 0xBuLL:
      v160 += (unint64_t)*(unsigned __int8 *)(p_dst + 10) << 16;
LABEL_35:
      v160 += (unint64_t)*(unsigned __int8 *)(p_dst + 9) << 8;
LABEL_36:
      v162 = *(unsigned __int8 *)(p_dst + 8);
      goto LABEL_41;
    case 0xCuLL:
      goto LABEL_40;
    case 0xDuLL:
      goto LABEL_39;
    case 0xEuLL:
      goto LABEL_38;
    case 0xFuLL:
      v160 += (unint64_t)*(unsigned __int8 *)(p_dst + 14) << 48;
LABEL_38:
      v160 += (unint64_t)*(unsigned __int8 *)(p_dst + 13) << 40;
LABEL_39:
      v160 += (unint64_t)*(unsigned __int8 *)(p_dst + 12) << 32;
LABEL_40:
      v162 = *(unsigned int *)(p_dst + 8);
LABEL_41:
      v160 += v162;
LABEL_42:
      v15 += *(_QWORD *)p_dst;
      break;
    default:
      break;
  }
  v163 = (v160 ^ v15) + __ROR8__(v15, 49);
  v164 = (v163 ^ v11) + __ROR8__(v163, 12);
  v165 = (v164 ^ v12) + __ROR8__(v164, 38);
  v166 = (v165 ^ __ROR8__(v15, 49)) + __ROR8__(v165, 13);
  v167 = (v166 ^ __ROR8__(v163, 12)) + __ROR8__(v166, 36);
  v168 = (v167 ^ __ROR8__(v164, 38)) + __ROR8__(v167, 55);
  v169 = (v168 ^ __ROR8__(v165, 13)) + __ROR8__(v168, 17);
  v170 = (v169 ^ __ROR8__(v166, 36)) + __ROR8__(v169, 10);
  v171 = (v170 ^ __ROR8__(v167, 55)) + __ROR8__(v170, 32);
  v172 = (v171 ^ __ROR8__(v168, 17)) + __ROR8__(v171, 39);
  v173 = v172 ^ __ROR8__(v169, 10);
  v174 = __ROR8__(v172, 1);
  *a3 = v174;
  *a4 = v173 + v174;
  return __src;
}

void *pxrInternal__aapl__pxrReserved__::ArchLibraryOpen(uint64_t a1, int a2)
{
  const char *v4;

  dlerror();
  if (*(char *)(a1 + 23) >= 0)
    v4 = (const char *)a1;
  else
    v4 = *(const char **)a1;
  return dlopen(v4, a2);
}

char *pxrInternal__aapl__pxrReserved__::ArchLibraryError@<X0>(_QWORD *a1@<X8>)
{
  char *result;

  result = dlerror();
  if (result)
    return (char *)sub_20BDDC0E4(a1, result);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchIsPtmallocActive(pxrInternal__aapl__pxrReserved__ *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchIsStlAllocatorOff(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;
  BOOL HasEnv;
  void *__p[2];
  char v5;

  v1 = atomic_load((unsigned __int8 *)&qword_254784F78);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254784F78))
  {
    sub_20BDDC0E4(__p, "GLIBCXX_FORCE_NEW");
    HasEnv = pxrInternal__aapl__pxrReserved__::ArchHasEnv((const char *)__p);
    if (v5 < 0)
      operator delete(__p[0]);
    byte_254784F70 = HasEnv;
    __cxa_guard_release(&qword_254784F78);
  }
  return byte_254784F70;
}

void sub_20BE9AEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  __cxa_guard_abort(&qword_254784F78);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::ArchMallocHook::IsInitialized(pxrInternal__aapl__pxrReserved__::ArchMallocHook *this)
{
  return *(_QWORD *)this || *((_QWORD *)this + 1) || *((_QWORD *)this + 2) || *((_QWORD *)this + 3) != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchMallocHook::Initialize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  MEMORY[0x212B929D0](a6, "ArchMallocHook only available for Linux/glibc systems");
  return 0;
}

regex_t *pxrInternal__aapl__pxrReserved__::ArchRegex::_Impl::_Impl(regex_t *a1, const char *a2, char a3, uint64_t a4)
{
  int v6;
  char v8[256];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  v6 = regcomp(a1, a2, (2 * (a3 & 1)) | 9);
  if (v6)
    sub_20C96AFFC(v8, v6, a1, a4);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::ArchRegex::_Impl::~_Impl(pxrInternal__aapl__pxrReserved__::ArchRegex::_Impl *this)
{
  MEMORY[0x212B937C8]();
}

{
  MEMORY[0x212B937C8]();
}

BOOL pxrInternal__aapl__pxrReserved__::ArchRegex::_Impl::Match(const regex_t *this, const char *a2)
{
  return regexec(this, a2, 0, 0, 0) != 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchRegex::ArchRegex(uint64_t a1, uint64_t a2, int a3)
{
  char v3;
  std::string::size_type v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::string v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *v24[2];
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  char v29;
  std::string v30;
  std::string v31;

  v3 = a3;
  *(_DWORD *)a1 = a3;
  *(_OWORD *)(a1 + 8) = 0u;
  v5 = a1 + 8;
  v6 = a1 + 32;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 40) = 0;
  v7 = *(unsigned __int8 *)(a2 + 23);
  v8 = (char)v7;
  v9 = *(_QWORD *)(a2 + 8);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    if ((v3 & 2) != 0)
    {
      if (v8 < 0)
        sub_20BDDBFAC(&v14, *(void **)a2, v9);
      else
        v14 = *(std::string *)a2;
      sub_20BDDC0E4(v28, ".");
      sub_20BDDC0E4(v26, "\\.");
      sub_20BE9B530(&v14, (char *)v28, (uint64_t)v26, (uint64_t)&v30);
      sub_20BDDC0E4(v24, "*");
      sub_20BDDC0E4(v22, ".*");
      sub_20BE9B530(&v30, (char *)v24, (uint64_t)v22, (uint64_t)&v31);
      sub_20BDDC0E4(v20, "?");
      sub_20BDDC0E4(__p, ".");
      sub_20BE9B530(&v31, (char *)v20, (uint64_t)__p, (uint64_t)__dst);
      if (v19 < 0)
        operator delete(__p[0]);
      if (v21 < 0)
        operator delete(v20[0]);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (v23 < 0)
        operator delete(v22[0]);
      if (v25 < 0)
        operator delete(v24[0]);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (v27 < 0)
        operator delete(v26[0]);
      if (v29 < 0)
        operator delete(v28[0]);
    }
    else if (v8 < 0)
    {
      sub_20BDDBFAC(__dst, *(void **)a2, v9);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a2;
      v16 = *(_QWORD *)(a2 + 16);
    }
    v31.__r_.__value_.__r.__words[0] = v5;
    sub_20BE9B6D0((const char *)__dst, (_DWORD *)a1, (uint64_t *)&v31, &v17);
    sub_20BDE82DC(v6, &v17);
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
    if (*((_QWORD *)&v17 + 1))
    {
      v11 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    if (SHIBYTE(v16) < 0)
      operator delete(__dst[0]);
    if ((v3 & 2) != 0 && SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  else
  {
    MEMORY[0x212B929D0](a1 + 8, "empty pattern");
  }
  return a1;
}

void sub_20BE9B2D4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  __cxa_begin_catch(a1);
  if (*(char *)(v48 + 31) < 0)
    v50 = *(_QWORD *)(v48 + 16);
  else
    v50 = *(unsigned __int8 *)(v48 + 31);
  if (!v50)
    MEMORY[0x212B929D0](v49, "unknown reason");
  __cxa_end_catch();
  JUMPOUT(0x20BE9B2B8);
}

void sub_20BE9B408(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v3;

  __cxa_end_catch();
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex(void **this)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

BOOL pxrInternal__aapl__pxrReserved__::ArchRegex::operator BOOL(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) != 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArchRegex::GetError@<X0>(_QWORD *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;
  void **v3;
  unint64_t v4;

  if (this[4])
  {
    v2 = "";
    return sub_20BDDC0E4(a2, v2);
  }
  v3 = (void **)(this + 1);
  if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 31))
    {
      *(_OWORD *)a2 = *(_OWORD *)v3;
      a2[2] = this[3];
      return this;
    }
LABEL_9:
    v2 = "uncompiled pattern";
    return sub_20BDDC0E4(a2, v2);
  }
  v4 = this[2];
  if (!v4)
    goto LABEL_9;
  return sub_20BDDBFAC(a2, *v3, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchRegex::GetFlags(pxrInternal__aapl__pxrReserved__::ArchRegex *this)
{
  return *(unsigned int *)this;
}

const regex_t *pxrInternal__aapl__pxrReserved__::ArchRegex::Match(uint64_t a1, const char *a2)
{
  const regex_t *result;

  result = *(const regex_t **)(a1 + 32);
  if (result)
  {
    if (a2[23] < 0)
      a2 = *(const char **)a2;
    return (const regex_t *)(regexec(result, a2, 0, 0, 0) != 1);
  }
  return result;
}

__n128 sub_20BE9B530@<Q0>(std::string *this@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string::size_type v6;
  std::string::size_type size;
  std::string *v8;
  int v9;
  std::string::size_type v10;
  std::string::size_type v11;
  char *v12;
  int64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  int v17;
  int64_t v18;
  char *v19;
  char *v20;
  std::string::size_type v21;
  int v22;
  const std::string::value_type *v23;
  std::string::size_type v24;
  uint64_t v25;
  int v26;
  __n128 result;
  BOOL v30;

  v6 = 0;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v8 = this;
  else
    v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  v9 = a2[23];
  v30 = v9 < 0;
  v10 = *((_QWORD *)a2 + 1);
  v11 = a2[23];
  if (v9 >= 0)
    v12 = a2;
  else
    v12 = *(char **)a2;
  if (v9 >= 0)
    v13 = a2[23];
  else
    v13 = *((_QWORD *)a2 + 1);
  while (!v13)
  {
LABEL_22:
    if (v6 != -1)
    {
      if (v30)
        v21 = v10;
      else
        v21 = v11;
      v22 = *(char *)(a3 + 23);
      if (v22 >= 0)
        v23 = (const std::string::value_type *)a3;
      else
        v23 = *(const std::string::value_type **)a3;
      if (v22 >= 0)
        v24 = *(unsigned __int8 *)(a3 + 23);
      else
        v24 = *(_QWORD *)(a3 + 8);
      std::string::replace(this, v6, v21, v23, v24);
      v25 = *(unsigned __int8 *)(a3 + 23);
      if ((v25 & 0x80u) != 0)
        v25 = *(_QWORD *)(a3 + 8);
      v6 += v25;
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) == 0)
        v8 = this;
      else
        v8 = (std::string *)this->__r_.__value_.__r.__words[0];
      if ((size & 0x80u) != 0)
        size = this->__r_.__value_.__l.__size_;
      v26 = a2[23];
      v30 = v26 < 0;
      v10 = *((_QWORD *)a2 + 1);
      v11 = a2[23];
      v12 = v26 >= 0 ? a2 : *(char **)a2;
      v13 = v26 >= 0 ? a2[23] : *((_QWORD *)a2 + 1);
      if (size >= v6)
        continue;
    }
    goto LABEL_46;
  }
  v14 = (char *)v8 + v6;
  v15 = (char *)v8 + size;
  v16 = size - v6;
  if (v16 >= v13)
  {
    v17 = *v12;
    do
    {
      v18 = v16 - v13;
      if (v18 == -1)
        break;
      v19 = (char *)memchr(v14, v17, v18 + 1);
      if (!v19)
        break;
      v20 = v19;
      if (!memcmp(v19, v12, v13))
      {
        if (v20 == v15)
          break;
        v6 = v20 - (char *)v8;
        goto LABEL_22;
      }
      v14 = v20 + 1;
      v16 = v15 - (v20 + 1);
    }
    while (v16 >= v13);
  }
LABEL_46:
  result = *(__n128 *)&this->__r_.__value_.__l.__data_;
  *(_OWORD *)a4 = *(_OWORD *)&this->__r_.__value_.__l.__data_;
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&this->__r_.__value_.__l + 2);
  this->__r_.__value_.__l.__size_ = 0;
  this->__r_.__value_.__r.__words[2] = 0;
  this->__r_.__value_.__r.__words[0] = 0;
  return result;
}

uint64_t sub_20BE9B6D0@<X0>(const char *a1@<X1>, _DWORD *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  char *v8;
  uint64_t result;

  v8 = (char *)operator new(0x38uLL);
  result = sub_20BE9B740((uint64_t)v8, a1, a2, a3);
  *a4 = v8 + 24;
  a4[1] = v8;
  return result;
}

void sub_20BE9B72C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE9B740(uint64_t a1, const char *a2, _DWORD *a3, uint64_t *a4)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24C51AC10;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::ArchRegex::_Impl::_Impl((regex_t *)(a1 + 24), a2, *a3, *a4);
  return a1;
}

void sub_20BE9B780(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_20BE9B794(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C51AC10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20BE9B7A8(std::__shared_weak_count *a1)
{
  void *v1;

  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C51AC10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20BE9B7CC(uint64_t a1)
{
  return MEMORY[0x212B937C8](a1 + 24);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchEnableSessionLogging(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;
  uint64_t result;

  v1 = atomic_load((unsigned __int8 *)&qword_254784F88);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254784F88))
  {
    qword_254784F80 = (uint64_t)operator new(4uLL);
    __cxa_guard_release(&qword_254784F88);
  }
  result = atexit(sub_20BE9B870);
  *(_DWORD *)qword_254784F80 = result;
  return result;
}

void sub_20BE9B858(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254784F88);
  _Unwind_Resume(a1);
}

void sub_20BE9B870()
{
  const char *v0;

  if (byte_254784FB0)
  {
    if (qword_254784FB8)
      v0 = (const char *)qword_254784FB8;
    else
      v0 = "libArch";
    sub_20BE9BEA0((uint64_t)v0, 0);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchSetProcessStateLogCommand(uint64_t this, const char *a2, const char *const *a3, const char *const *a4)
{
  qword_254784F90 = this;
  qword_254784F98 = (uint64_t)a2;
  qword_254784FA0 = (uint64_t)a3;
  return this;
}

time_t sub_20BE9B8BC()
{
  time_t result;

  result = time(0);
  qword_254784FA8 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetAppLaunchTime(pxrInternal__aapl__pxrReserved__ *this)
{
  return qword_254784FA8;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchSetFatalStackLogging(uint64_t this)
{
  byte_254784FB0 = this;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetFatalStackLogging(pxrInternal__aapl__pxrReserved__ *this)
{
  return byte_254784FB0;
}

void pxrInternal__aapl__pxrReserved__::ArchSetProgramInfoForErrors(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t *v18;
  BOOL v19;
  void *v20;
  char *v21;
  char *__s1[2];
  char v23;
  __int128 *v24[11];
  char v25;
  uint64_t v26;

  v4 = sub_20BE9BB4C();
  std::mutex::lock((std::mutex *)(v4 + 24));
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v24[0] = a1;
    v6 = sub_20BDDDFDC((uint64_t **)v4, (const void **)a1, (uint64_t)&unk_20CAC184C, v24);
    std::string::operator=((std::string *)(v6 + 7), (const std::string *)a2);
  }
  else
  {
    sub_20BE9DD48((uint64_t **)v4, (const void **)a1);
  }
  sub_20BDDE5E0((uint64_t)v24);
  v7 = *(uint64_t **)v4;
  if (*(_QWORD *)v4 != v4 + 8)
  {
    do
    {
      v8 = *((char *)v7 + 55);
      if (v8 >= 0)
        v9 = (uint64_t)(v7 + 4);
      else
        v9 = v7[4];
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)v7 + 55);
      else
        v10 = v7[5];
      v11 = sub_20BDDC1C8(v24, v9, v10);
      v12 = sub_20BDDC1C8(v11, (uint64_t)": ", 2);
      v13 = *((char *)v7 + 79);
      if (v13 >= 0)
        v14 = (uint64_t)(v7 + 7);
      else
        v14 = v7[7];
      if (v13 >= 0)
        v15 = *((unsigned __int8 *)v7 + 79);
      else
        v15 = v7[8];
      v16 = sub_20BDDC1C8(v12, v14, v15);
      LOBYTE(__s1[0]) = 10;
      sub_20BDDC1C8(v16, (uint64_t)__s1, 1);
      v17 = (uint64_t *)v7[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (uint64_t *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (uint64_t *)v7[2];
          v19 = *v18 == (_QWORD)v7;
          v7 = v18;
        }
        while (!v19);
      }
      v7 = v18;
    }
    while (v18 != (uint64_t *)(v4 + 8));
  }
  v20 = *(void **)(v4 + 88);
  if (v20)
    free(v20);
  std::stringbuf::str();
  if (v23 < 0)
  {
    v21 = __s1[0];
    *(_QWORD *)(v4 + 88) = strdup(__s1[0]);
    operator delete(v21);
  }
  else
  {
    *(_QWORD *)(v4 + 88) = strdup((const char *)__s1);
  }
  v24[0] = *(__int128 **)MEMORY[0x24BEDB800];
  *(__int128 **)((char *)v24 + *((_QWORD *)v24[0] - 3)) = *(__int128 **)(MEMORY[0x24BEDB800] + 24);
  v24[1] = (__int128 *)(MEMORY[0x24BEDB848] + 16);
  if (v25 < 0)
    operator delete(v24[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212B92EB0](&v26);
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_20BE9BB20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  std::mutex *v4;
  va_list va;

  va_start(va, a4);
  sub_20C96B058((uint64_t)va);
  std::mutex::unlock(v4);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE9BB4C()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254784FE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254784FE8))
  {
    v2 = operator new(0x60uLL);
    v2[1] = 0;
    *v2 = v2 + 1;
    v2[2] = 0;
    v2[3] = 850045863;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    qword_254784FE0 = (uint64_t)v2;
    __cxa_guard_release(&qword_254784FE8);
  }
  return qword_254784FE0;
}

void sub_20BE9BBCC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254784FE8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchGetProgramInfoForErrors(const void **a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = sub_20BE9BB4C();
  std::mutex::lock((std::mutex *)(v4 + 24));
  v5 = sub_20BDEEBA4(v4, a1);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (v4 + 8 != v5)
    std::string::operator=(a2, (const std::string *)(v5 + 56));
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_20BE9BC50(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchSetExtraLogInfoForErrors(const void **a1, _QWORD *a2)
{
  uint64_t v4;
  const void **v5;

  v4 = sub_20BE9BD20();
  std::mutex::lock((std::mutex *)(v4 + 24));
  if (!a2 || *a2 == a2[1])
  {
    sub_20BE9DDA0((uint64_t **)v4, a1);
  }
  else
  {
    v5 = a1;
    sub_20BE9DDE4((uint64_t **)v4, a1, (uint64_t)&unk_20CAC184C, (__int128 **)&v5)[7] = (uint64_t)a2;
  }
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_20BE9BD0C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE9BD20()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_254784FF8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254784FF8))
  {
    v2 = operator new(0x58uLL);
    v2[1] = 0;
    *v2 = v2 + 1;
    v2[2] = 0;
    v2[3] = 850045863;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    v2[10] = 0;
    qword_254784FF0 = (uint64_t)v2;
    __cxa_guard_release(&qword_254784FF8);
  }
  return qword_254784FF0;
}

void sub_20BE9BDA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254784FF8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchSetProgramNameForErrors(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  char *v3;
  pxrInternal__aapl__pxrReserved__ *v4;
  int v5;
  char *v6;
  char __s1[8];
  char v8;

  if (qword_254784FB8)
    free((void *)qword_254784FB8);
  if (this)
  {
    v3 = strrchr((char *)this, 47);
    if (v3)
    {
      v5 = v3[1];
      v4 = (pxrInternal__aapl__pxrReserved__ *)(v3 + 1);
      if (v5)
        this = v4;
    }
    sub_20BDDC0E4(__s1, (char *)this);
    if (v8 < 0)
    {
      v6 = *(char **)__s1;
      qword_254784FB8 = (uint64_t)strdup(*(const char **)__s1);
      operator delete(v6);
    }
    else
    {
      qword_254784FB8 = (uint64_t)strdup(__s1);
    }
  }
  else
  {
    qword_254784FB8 = 0;
  }
}

const char *pxrInternal__aapl__pxrReserved__::ArchGetProgramNameForErrors(pxrInternal__aapl__pxrReserved__ *this)
{
  if (qword_254784FB8)
    return (const char *)qword_254784FB8;
  else
    return "libArch";
}

int *pxrInternal__aapl__pxrReserved__::ArchLogSessionInfo(int *this, const char *a2)
{
  uint64_t v2;
  const char *v3;

  if (byte_254784FB0)
  {
    v2 = (uint64_t)this;
    if (qword_254784FB8)
      v3 = (const char *)qword_254784FB8;
    else
      v3 = "libArch";
    return sub_20BE9BEA0((uint64_t)v3, v2);
  }
  return this;
}

int *sub_20BE9BEA0(uint64_t a1, uint64_t a2)
{
  int *result;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  pid_t v9;
  __darwin_time_t v10;
  void *v11;
  pxrInternal__aapl__pxrReserved__ *v12[2];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[8];
  _BYTE v29[22];
  _BYTE v30[22];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  result = (int *)sub_20BE9DF1C((pxrInternal__aapl__pxrReserved__ *)"ARCH_LOGSESSION");
  v5 = &qword_254784FD0;
  if (!a2)
    v5 = &qword_254784FC8;
  v6 = (_QWORD *)*v5;
  if (result)
    v7 = (uint64_t)result;
  else
    v7 = qword_254784FC0;
  if (v7)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = getpid();
    sub_20BE9DC38(v30, v9);
    v10 = sub_20BE9DFDC();
    sub_20BE9DC38(v29, v10);
    v28[0] = "$pid";
    v28[1] = v30;
    v28[2] = "$time";
    v28[3] = v29;
    v28[4] = "$prog";
    v28[5] = a1;
    v28[6] = "$stack";
    v28[7] = a2;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)v12 = 0u;
    v13 = 0u;
    if ((sub_20BE9E020((uint64_t)v12, v7, v6, (uint64_t)v28) & 1) != 0)
      return (int *)pxrInternal__aapl__pxrReserved__::ArchCrashHandlerSystemv(v12[0], (char *const *)v12, (char *const *)0x3C, 0, 0, v11);
    else
      return sub_20BE9DCDC("Too many arguments to log session command\n");
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchSetLogSession(uint64_t this, const char *a2, const char *const *a3, const char *const *a4)
{
  qword_254784FC0 = this;
  qword_254784FC8 = (uint64_t)a2;
  qword_254784FD0 = (uint64_t)a3;
  return this;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchIsAppCrashing(pxrInternal__aapl__pxrReserved__ *this)
{
  return dword_254784FD8 != 0;
}

int *pxrInternal__aapl__pxrReserved__::ArchLogFatalProcessState(pxrInternal__aapl__pxrReserved__ *this, const char *a2, const char *a3, const char *a4)
{
  return sub_20BE9C050((pxrInternal__aapl__pxrReserved__ *)1, (const char *)this, a2, a3);
}

int *sub_20BE9C050(pxrInternal__aapl__pxrReserved__ *a1, const char *a2, const char *a3, const char *a4)
{
  int v7;
  unsigned __int8 v8;
  const char *v9;
  pxrInternal__aapl__pxrReserved__ *v10;
  FILE *v11;
  uint64_t v12;
  int v13;
  int v14;
  FILE **v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int *result;
  int v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  char *__s;
  char v33[256];
  char __filename[1024];
  uint64_t v35;

  v7 = (int)a1;
  v35 = *MEMORY[0x24BDAC8D0];
  while (1)
  {
    do
      v8 = __ldaxr(byte_254785000);
    while (__stxr(1u, byte_254785000));
    if ((v8 & 1) == 0)
      break;
    a1 = (pxrInternal__aapl__pxrReserved__ *)sched_yield();
  }
  if (v7)
    dword_254784FD8 = 1;
  v31 = v7;
  v9 = (const char *)qword_254784FB8;
  if (!qword_254784FB8)
    v9 = "libArch";
  __s = (char *)v9;
  v10 = (pxrInternal__aapl__pxrReserved__ *)pxrInternal__aapl__pxrReserved__::ArchDebuggerAttach(a1);
  if ((_DWORD)v10)
  {
    pxrInternal__aapl__pxrReserved__::ArchDebuggerTrap(v10);
    _exit(0);
  }
  if (sub_20BE9E118((pxrInternal__aapl__pxrReserved__ *)__filename) == -1)
  {
    result = sub_20BE9DCDC("Cannot create a log file\n");
  }
  else
  {
    v11 = pxrInternal__aapl__pxrReserved__::ArchOpenFile(__filename, "a");
    if (v11)
    {
      if (a2)
      {
        fputs("This stack trace was requested because: ", v11);
        fputs(a2, v11);
        fputs("\n", v11);
      }
      if (a3)
      {
        fputs(a3, v11);
        fputs("\n", v11);
      }
      v12 = sub_20BE9BD20();
      sub_20BE9CA2C(v12, v11, 0);
      if (a4)
      {
        fputs(a4, v11);
        fputs("\n", v11);
      }
      fputs("\nPostmortem Stack Trace\n", v11);
      fclose(v11);
    }
    if (gethostname(v33, 0x100uLL))
      v33[0] = 0;
    v13 = strlen(__s);
    if (v13 + 17 <= 80)
      v14 = 80;
    else
      v14 = v13 + 17;
    v15 = (FILE **)MEMORY[0x24BDAC8D8];
    fputs("\n", (FILE *)*MEMORY[0x24BDAC8D8]);
    v16 = v14 - (v13 + 11);
    if (v14 < v13 + 11)
      ++v16;
    v17 = v16 >> 1;
    v18 = (v16 >> 1) - 1;
    if (((v16 >> 1) + 62) >= 0x7F)
    {
      v19 = v18 / 64;
      do
      {
        fputs("----------------------------------------------------------------", *v15);
        --v19;
      }
      while (v19);
    }
    if (v18 <= 0)
      v20 = -(-v18 & 0x3F);
    else
      v20 = v18 & 0x3F;
    fputs(&asc_20CB3712B[-v20 + 64], *v15);
    fputs(" ", *v15);
    fputs(__s, *v15);
    fputs(" terminated", *v15);
    fputs(" ", *v15);
    v21 = v14 - (v17 + v13);
    v22 = v21 - 12;
    if ((v21 + 51) >= 0x7F)
    {
      v23 = v22 / 64;
      do
      {
        fputs("----------------------------------------------------------------", *v15);
        --v23;
      }
      while (v23);
    }
    if (v22 <= 0)
      v24 = -(-v22 & 0x3F);
    else
      v24 = v22 & 0x3F;
    fputs(&asc_20CB3712B[-v24 + 64], *v15);
    fputs("\n", *v15);
    v25 = sub_20BE9BB4C();
    sub_20BE9C8C4(v25);
    if (a2)
    {
      fputs("This stack trace was requested because: ", *v15);
      fputs(a2, *v15);
      fputs("\n", *v15);
    }
    if (a3)
    {
      fputs(a3, *v15);
      fputs("\n", *v15);
    }
    fputs("writing crash report to [ ", *v15);
    fputs(v33, *v15);
    fputs(":", *v15);
    fputs(__filename, *v15);
    fputs(" ] ...", *v15);
    fflush(*v15);
    if (a2)
      v26 = sub_20BE9E360(v31, (uint64_t)__filename, (uint64_t)a2);
    else
      v26 = sub_20BE9E360(v31, (uint64_t)__filename, (uint64_t)a3);
    v28 = v26;
    fputs(" done.\n", *v15);
    v29 = sub_20BE9BD20();
    sub_20BE9CA2C(v29, *v15, 3uLL);
    v30 = v14 >> 6;
    do
    {
      fputs("----------------------------------------------------------------", *v15);
      --v30;
    }
    while (v30);
    fputs(&asc_20CB3712B[-(v14 & 0x3F) + 64], *v15);
    result = (int *)fputs("\n", *v15);
    if (v28 && byte_254784FB0)
      result = sub_20BE9BEA0((uint64_t)__s, (uint64_t)__filename);
  }
  atomic_store(0, byte_254785000);
  return result;
}

void sub_20BE9C4DC(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20BDC12F4(a1);
  _Unwind_Resume(a1);
}

int *pxrInternal__aapl__pxrReserved__::ArchLogCurrentProcessState(pxrInternal__aapl__pxrReserved__ *this, const char *a2, const char *a3, const char *a4)
{
  return sub_20BE9C050(0, (const char *)this, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::ArchLogStackTrace(uint64_t a1, uint64_t a2)
{
  char *v4;
  void *__p[2];
  char v6;

  if (qword_254784FB8)
    v4 = (char *)qword_254784FB8;
  else
    v4 = "libArch";
  sub_20BDDC0E4(__p, v4);
  pxrInternal__aapl__pxrReserved__::ArchLogStackTrace((uint64_t)__p, a1, a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_20BE9C574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchLogStackTrace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const char *v4;
  char *v5;
  uint64_t *v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  int TmpFile;
  FILE **v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  FILE *v17;
  void **v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  FILE *v22;
  FILE *v23;
  void *v24[2];
  uint64_t v25;
  char v26[256];
  void *__p[2];
  char v28;
  uint64_t v29;

  v3 = MEMORY[0x24BDAC7A8](a1, a2, a3);
  v7 = v6;
  v8 = (int)v5;
  v9 = (uint64_t)v4;
  v10 = v3;
  v29 = *MEMORY[0x24BDAC8D0];
  v24[0] = 0;
  v24[1] = 0;
  v25 = 0;
  v11 = (const char *)qword_254784FB8;
  if (!qword_254784FB8)
    v11 = "libArch";
  pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s_%s", v4, v5, "st", v11);
  TmpFile = pxrInternal__aapl__pxrReserved__::ArchMakeTmpFile((const char *)__p, (char *)v24);
  if (v28 < 0)
    operator delete(__p[0]);
  if (gethostname(v26, 0x100uLL))
    v26[0] = 0;
  v13 = (FILE **)MEMORY[0x24BDAC8D8];
  if (*(char *)(v10 + 23) >= 0)
    v14 = (const char *)v10;
  else
    v14 = *(const char **)v10;
  if (*(char *)(v9 + 23) >= 0)
    v15 = (const char *)v9;
  else
    v15 = *(const char **)v9;
  fprintf((FILE *)*MEMORY[0x24BDAC8D8], "--------------------------------------------------------------\nA stack trace has been requested by %s because of %s\n", v14, v15);
  v16 = sub_20BE9BB4C();
  sub_20BE9C8C4(v16);
  if (TmpFile == -1)
  {
    fwrite("--------------------------------------------------------------\n", 0x3FuLL, 1uLL, *v13);
    pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(*v13, v10, v9);
    v21 = sub_20BE9BD20();
    sub_20BE9CA2C(v21, *v13, 0);
    goto LABEL_38;
  }
  v17 = fdopen(TmpFile, "w");
  v18 = v24;
  if (v25 < 0)
    v18 = (void **)v24[0];
  fprintf(*v13, "The stack can be found in %s:%s\n--------------------------------------------------------------\n", v26, (const char *)v18);
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(v17, v10, v9);
  if (!v8)
  {
    fclose(v17);
    goto LABEL_38;
  }
  v19 = sub_20BE9BD20();
  sub_20BE9CA2C(v19, v17, 0);
  fclose(v17);
  if (*(char *)(v10 + 23) < 0)
    v10 = *(_QWORD *)v10;
  if (v25 >= 0)
    v20 = v24;
  else
    v20 = (void **)v24[0];
  if ((*((char *)v7 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v7 + 23))
      goto LABEL_36;
LABEL_29:
    v22 = pxrInternal__aapl__pxrReserved__::ArchOpenFile((const char *)v20, "a");
    if (v22)
    {
      v23 = pxrInternal__aapl__pxrReserved__::ArchOpenFile((const char *)v7, "r");
      if (v23)
      {
        fputs("\n\n********** Session Log **********\n\n", v22);
        while (fgets((char *)__p, 4096, v23))
          fputs((const char *)__p, v22);
        fclose(v23);
      }
      fclose(v22);
    }
    goto LABEL_36;
  }
  if (v7[1])
  {
    v7 = (uint64_t *)*v7;
    if (v7)
      goto LABEL_29;
  }
LABEL_36:
  if (byte_254784FB0)
    sub_20BE9BEA0(v10, (uint64_t)v20);
LABEL_38:
  fwrite("--------------------------------------------------------------\n", 0x3FuLL, 1uLL, *v13);
  if (SHIBYTE(v25) < 0)
    operator delete(v24[0]);
}

void sub_20BE9C884(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

void sub_20BE9C8C4(uint64_t a1)
{
  std::mutex *v2;
  const char *v3;

  v2 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v3 = *(const char **)(a1 + 88);
  if (v3)
    fputs(v3, (FILE *)*MEMORY[0x24BDAC8D8]);
  std::mutex::unlock(v2);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(FILE *a1, uint64_t a2, uint64_t a3)
{
  FILE *v6;
  const char *p_p;
  void *__p;
  char v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  sub_20BDDE5E0((uint64_t)v11);
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(v11, a2, a3);
  if (a1)
    v6 = a1;
  else
    v6 = (FILE *)*MEMORY[0x24BDAC8D8];
  std::stringbuf::str();
  if (v10 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  fputs(p_p, v6);
  if (v10 < 0)
    operator delete(__p);
  fflush(v6);
  v11[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v11[1] = MEMORY[0x24BEDB848] + 16;
  if (v12 < 0)
    operator delete((void *)v11[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v13);
}

void sub_20BE9CA14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BE9CA2C(uint64_t a1, FILE *a2, unint64_t a3)
{
  std::mutex *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  const char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;

  v6 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v9 = *(_QWORD **)a1;
  v7 = (_QWORD *)(a1 + 8);
  v8 = v9;
  if (v9 != v7)
  {
    v10 = 0;
    do
    {
      fputs("\n", a2);
      v11 = (const char *)(v8 + 4);
      if (*((char *)v8 + 55) < 0)
        v11 = *(const char **)v11;
      fputs(v11, a2);
      fputs(":\n", a2);
      v12 = (uint64_t *)v8[7];
      v13 = *v12;
      v14 = v12[1];
      while (v13 != v14)
      {
        if (a3)
        {
          if (v10 >= a3)
          {
            fputs("... see full diagnostics in crash report.\n", a2);
            goto LABEL_21;
          }
          ++v10;
        }
        v15 = (const char *)v13;
        if (*(char *)(v13 + 23) < 0)
          v15 = *(const char **)v13;
        fputs(v15, a2);
        v13 += 24;
      }
      v16 = (_QWORD *)v8[1];
      if (v16)
      {
        do
        {
          v17 = v16;
          v16 = (_QWORD *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          v17 = (_QWORD *)v8[2];
          v18 = *v17 == (_QWORD)v8;
          v8 = v17;
        }
        while (!v18);
      }
      v8 = v17;
    }
    while (v17 != v7);
  }
LABEL_21:
  std::mutex::unlock(v6);
}

void sub_20BE9CB5C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  const std::ios_base *v18;
  uint64_t v19;
  std::locale::id *v20;
  uint64_t v21;
  const std::locale::facet *v22;
  unsigned __int8 v23;
  std::string v25;
  _QWORD v26[2];
  std::locale v27;
  _QWORD v28[2];
  _BYTE v29[408];
  uint64_t v30;
  std::locale v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20BDDC1C8(a1, (uint64_t)"==============================================================\n", 63);
  v7 = sub_20BDDC1C8(v6, (uint64_t)" A stack trace has been requested by ", 37);
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(_QWORD *)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = sub_20BDDC1C8(v7, v9, v10);
  v12 = sub_20BDDC1C8(v11, (uint64_t)" because: ", 10);
  v13 = *(char *)(a3 + 23);
  if (v13 >= 0)
    v14 = a3;
  else
    v14 = *(_QWORD *)a3;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a3 + 23);
  else
    v15 = *(_QWORD *)(a3 + 8);
  v16 = sub_20BDDC1C8(v12, v14, v15);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(_QWORD *)(*v16 - 24)));
  v17 = std::locale::use_facet(&v31, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(&v31);
  std::ostream::put();
  std::ostream::flush();
  v26[0] = a1;
  v26[1] = 0;
  sub_20BE9E118((pxrInternal__aapl__pxrReserved__ *)&v31);
  sub_20BE9E360(0, (uint64_t)&v31, (uint64_t)"Log Stack Trace");
  sub_20BE9E9C0(v28);
  memset(&v25, 0, sizeof(v25));
  v18 = (const std::ios_base *)((char *)v28 + *(_QWORD *)(v28[0] - 24));
  if ((v18->__rdstate_ & 2) == 0)
  {
    v19 = -2;
    v20 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v21 = v19;
      std::ios_base::getloc(v18);
      v22 = std::locale::use_facet(&v27, v20);
      v23 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
      std::locale::~locale(&v27);
      sub_20BE9EB38(v28, (uint64_t)&v25, v23);
      if ((v29[*(_QWORD *)(v28[0] - 24) + 16] & 2) == 0)
        std::string::append(&v25, "\n");
      sub_20BE9EACC((uint64_t)v26, (uint64_t)&v25);
      v18 = (const std::ios_base *)((char *)v28 + *(_QWORD *)(v28[0] - 24));
      if ((v18->__rdstate_ & 2) != 0)
        break;
      v19 = v21 - 1;
    }
    while (v21);
  }
  if (!std::filebuf::close())
    std::ios_base::clear((std::ios_base *)((char *)v28 + *(_QWORD *)(v28[0] - 24)), *(_DWORD *)&v29[*(_QWORD *)(v28[0] - 24) + 16] | 4);
  unlink((const char *)&v31);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v28[0] = *MEMORY[0x24BEDB7E0];
  *(_QWORD *)((char *)v28 + *(_QWORD *)(v28[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x212B92AB4](v29);
  std::istream::~istream();
  MEMORY[0x212B92EB0](&v30);
  return sub_20BDDC1C8(a1, (uint64_t)"==============================================================\n", 63);
}

void sub_20BE9CE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  uint64_t a72;

  if (a15 < 0)
    operator delete(__p);
  a19 = *MEMORY[0x24BEDB7E0];
  *(uint64_t *)((char *)&a19 + *(_QWORD *)(a19 - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 24);
  MEMORY[0x212B92AB4](&a21);
  std::istream::~istream();
  MEMORY[0x212B92EB0](&a72);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(FILE *a1, uint64_t a2)
{
  char *v4;
  void *__p[2];
  char v6;

  if (qword_254784FB8)
    v4 = (char *)qword_254784FB8;
  else
    v4 = "libArch";
  sub_20BDDC0E4(__p, v4);
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(a1, (uint64_t)__p, a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_20BE9CF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(_QWORD *a1, uint64_t a2)
{
  char *v4;
  void *__p[2];
  char v6;

  if (qword_254784FB8)
    v4 = (char *)qword_254784FB8;
  else
    v4 = "libArch";
  sub_20BDDC0E4(__p, v4);
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(a1, (uint64_t)__p, a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_20BE9CFA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchGetStackTrace(_QWORD *a1, uint64_t a2)
{
  char *v4;
  void *__p[2];
  char v6;

  if (qword_254784FB8)
    v4 = (char *)qword_254784FB8;
  else
    v4 = "libArch";
  sub_20BDDC0E4(__p, v4);
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(a1, (uint64_t)__p, a2);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_20BE9D028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchGetStackFrames(pxrInternal__aapl__pxrReserved__ *a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::ArchGetStackFrames(a1, 0, a2);
}

void pxrInternal__aapl__pxrReserved__::ArchGetStackFrames(pxrInternal__aapl__pxrReserved__ *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t *v6;
  unint64_t StackFrames;

  sub_20BDFC880((uint64_t)a3, (unint64_t)a1);
  StackFrames = pxrInternal__aapl__pxrReserved__::ArchGetStackFrames(a1, a2, *a3, v6);
  sub_20BDFC880((uint64_t)a3, StackFrames);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetStackFrames(pxrInternal__aapl__pxrReserved__ *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2048];
  uint64_t v15;

  v4 = MEMORY[0x24BDAC7A8](this, a2, a3);
  v7 = v6;
  v8 = v5;
  v15 = *MEMORY[0x24BDAC8D0];
  memset(&v14[2], 0, 480);
  if ((unint64_t)(v5 + v4) >= 0x1000)
    v9 = 4096;
  else
    v9 = v5 + v4;
  memset(v14, 0, 32);
  result = backtrace((void **)v14, v9) - v8;
  if (result)
  {
    v11 = (uint64_t *)v14 + v8;
    v12 = result;
    do
    {
      v13 = *v11++;
      *v7++ = v13;
      --v12;
    }
    while (v12);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames(_QWORD *a1, uint64_t *a2, int a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  std::locale::id *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  uint64_t v14;
  uint64_t v15;
  std::locale v16;

  sub_20BE9D2DC(a2, a3, &v14);
  v4 = v14;
  if (v15 != v14)
  {
    v5 = 0;
    v6 = 0;
    v7 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v8 = v4 + v5;
      v9 = *(char *)(v8 + 23);
      if (v9 >= 0)
        v10 = v8;
      else
        v10 = *(_QWORD *)v8;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(v8 + 23);
      else
        v11 = *(_QWORD *)(v8 + 8);
      v12 = sub_20BDDC1C8(a1, v10, v11);
      std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
      v13 = std::locale::use_facet(&v16, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
      std::locale::~locale(&v16);
      std::ostream::put();
      std::ostream::flush();
      ++v6;
      v4 = v14;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3));
  }
  v16.__locale_ = (std::locale::__imp *)&v14;
  sub_20BDE5038((void ***)&v16);
}

void sub_20BE9D2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, std::locale a14)
{
  std::locale::~locale(&a14);
  a13 = &a10;
  sub_20BDE5038((void ***)&a13);
  _Unwind_Resume(a1);
}

void sub_20BE9D2DC(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  char v11;
  void **v12;
  void *v13;
  int v14;
  void **v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  uint64_t v38;
  int v39;
  void *__p[2];
  uint64_t v41;
  void *v42[2];
  char v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t *v48;
  void *v49[2];
  uint64_t v50;
  void **v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*a1 == a1[1])
  {
    sub_20BDDC0E4(v49, "No frames saved, stack traces probably not supported on this architecture.");
    v28 = a3[2];
    v29 = a3[1];
    if (v29 >= v28)
    {
      v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - *a3) >> 3);
      v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - *a3) >> 3);
      if (2 * v33 > v32)
        v32 = 2 * v33;
      if (v33 >= 0x555555555555555)
        v34 = 0xAAAAAAAAAAAAAAALL;
      else
        v34 = v32;
      v48 = a3 + 2;
      if (v34)
        v35 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 2), v34);
      else
        v35 = 0;
      v36 = &v35[24 * v31];
      v44 = v35;
      v45 = v36;
      v47 = &v35[24 * v34];
      v37 = *(_OWORD *)v49;
      *((_QWORD *)v36 + 2) = v50;
      *(_OWORD *)v36 = v37;
      v49[1] = 0;
      v50 = 0;
      v49[0] = 0;
      v46 = v36 + 24;
      sub_20BDF34C0(a3, &v44);
      v38 = a3[1];
      sub_20BDF3648((uint64_t)&v44);
      v39 = SHIBYTE(v50);
      a3[1] = v38;
      if (v39 < 0)
        operator delete(v49[0]);
    }
    else
    {
      v30 = *(_OWORD *)v49;
      *(_QWORD *)(v29 + 16) = v50;
      *(_OWORD *)v29 = v30;
      a3[1] = v29 + 24;
    }
  }
  else
  {
    sub_20BE9D838();
    sub_20BE9E6E8((uint64_t)v49, (uint64_t)&unk_254785008);
    if (!v51)
      sub_20BE9E5F8(v49, (uint64_t)sub_20BE9E4EC);
    v6 = *a1;
    if (a1[1] != *a1)
    {
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v44 = *(char **)(v6 + 8 * v7);
        if (!v51)
          sub_20BE9E974();
        (*((void (**)(void **__return_ptr, void **, char **))*v51 + 6))(v42, v51, &v44);
        v11 = v43;
        if (!a2)
          break;
        if (v43 < 0)
        {
          if (v42[1] != (void *)9)
            break;
          v12 = (void **)v42[0];
        }
        else
        {
          if (v43 != 9)
            break;
          v12 = v42;
        }
        v13 = *v12;
        v14 = *((unsigned __int8 *)v12 + 8);
        if (v13 != (void *)0x6E776F6E6B6E753CLL || v14 != 62)
          break;
LABEL_33:
        if (v11 < 0)
          operator delete(v42[0]);
        ++v7;
        v6 = *a1;
        if (v7 >= (a1[1] - *a1) >> 3)
          goto LABEL_36;
      }
      if (v43 >= 0)
        v16 = v42;
      else
        v16 = (void **)v42[0];
      pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)" #%-3i 0x%016lx in %s", v9, v10, v8, *(_QWORD *)(*a1 + 8 * v7), v16);
      v18 = a3[1];
      v17 = a3[2];
      if (v18 >= v17)
      {
        v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a3) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a3) >> 3);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x555555555555555)
          v22 = 0xAAAAAAAAAAAAAAALL;
        else
          v22 = v20;
        v48 = a3 + 2;
        if (v22)
          v23 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 2), v22);
        else
          v23 = 0;
        v24 = &v23[24 * v19];
        v44 = v23;
        v45 = v24;
        v47 = &v23[24 * v22];
        *((_QWORD *)v24 + 2) = v41;
        *(_OWORD *)v24 = *(_OWORD *)__p;
        v41 = 0;
        *(_OWORD *)__p = 0uLL;
        v46 = v24 + 24;
        sub_20BDF34C0(a3, &v44);
        v25 = a3[1];
        sub_20BDF3648((uint64_t)&v44);
        a3[1] = v25;
      }
      else
      {
        *(_QWORD *)(v18 + 16) = v41;
        *(_OWORD *)v18 = *(_OWORD *)__p;
        a3[1] = v18 + 24;
      }
      v8 = (v8 + 1);
      v11 = v43;
      goto LABEL_33;
    }
LABEL_36:
    v26 = v51;
    if (v51 == v49)
    {
      v27 = 4;
      v26 = v49;
    }
    else
    {
      if (!v51)
        return;
      v27 = 5;
    }
    (*((void (**)(void))*v26 + v27))();
  }
}

void sub_20BE9D6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35)
{
  sub_20BDF3648((uint64_t)&a24);
  if (a34 < 0)
    operator delete(__p);
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchGetStackTrace(pxrInternal__aapl__pxrReserved__ *this@<X0>, uint64_t *a2@<X8>)
{
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetStackFrames(this, 0, (uint64_t *)&__p);
  sub_20BE9D2DC((uint64_t *)&__p, 0, a2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_20BE9D7F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArchSetStackTraceCallback(uint64_t a1)
{
  sub_20BE9D838();
  return sub_20BE9D898(qword_254785008, a1);
}

void sub_20BE9D838()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254785028);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254785028))
    {
      qword_254785020 = 0;
      __cxa_atexit((void (*)(void *))sub_20BE9E69C, &unk_254785008, &dword_20BDBC000);
      __cxa_guard_release(&qword_254785028);
    }
  }
}

_QWORD *sub_20BE9D898(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  sub_20BE9E6E8((uint64_t)v6, a2);
  sub_20BE9E800(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArchGetStackTraceCallback(_QWORD *result)
{
  _QWORD *v1;

  if (result)
  {
    v1 = result;
    sub_20BE9D838();
    return sub_20BE9D898(v1, (uint64_t)qword_254785008);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchCrashHandlerSystemv(pxrInternal__aapl__pxrReserved__ *this, char *const *a2, char *const *a3, void (*a4)(_QWORD), void (*a5)(void *), void *a6)
{
  int v8;
  pid_t v11;
  pid_t v12;
  int v13;
  pid_t v14;
  BOOL v15;
  char *v16;
  int *v17;
  uint64_t v18;
  int *v19;
  char *v20;
  int v21;
  int *v23;
  int v24;
  sigaction v25;
  sigaction v26;
  _BYTE v27[22];
  uint64_t v28;

  v8 = (int)a3;
  v28 = *MEMORY[0x24BDAC8D0];
  if (pxrInternal__aapl__pxrReserved__::Arch_nonLockingFork)
    v11 = pxrInternal__aapl__pxrReserved__::Arch_nonLockingFork(this, a2, a3, a4, a5, a6);
  else
    v11 = fork();
  v12 = v11;
  if (v11 == -1)
  {
    v17 = __error();
    sub_20BE9DC38(v27, *v17);
    sub_20BE9DCDC("FAIL: Unable to fork() crash handler: errno=");
    sub_20BE9DCDC(v27);
    sub_20BE9DCDC("\n");
    return 0xFFFFFFFFLL;
  }
  if (!v11)
  {
    if (isatty(0))
      setsid();
    j__execv((const char *)this, a2);
    v23 = __error();
    sub_20BE9DC38(v27, *v23);
    sub_20BE9DCDC("FAIL: Unable to exec crash handler ");
    sub_20BE9DCDC(this);
    sub_20BE9DCDC(": errno=");
    sub_20BE9DCDC(v27);
    sub_20BE9DCDC("\n");
    _exit(127);
  }
  v26.__sigaction_u.__sa_handler = (void (__cdecl *)(int))nullsub_30;
  *(_QWORD *)&v26.sa_mask = 0;
  sigaction(14, &v26, &v25);
  v13 = 0;
  while (1)
  {
    v24 = 0;
    if (v8 >= 1)
    {
      v13 = 1;
      alarm(1u);
    }
    v14 = waitpid(v12, &v24, 0);
    if (!v14)
      goto LABEL_12;
    if (v14 != -1)
      break;
    if (*__error() != 4)
    {
      v19 = __error();
      sub_20BE9DC38(v27, *v19);
      v20 = "FAIL: Crash handler wait failed: errno=";
LABEL_25:
      sub_20BE9DCDC(v20);
      sub_20BE9DCDC(v27);
      v16 = "\n";
      goto LABEL_26;
    }
LABEL_12:
    if (a4)
      a4(a5);
    v15 = __OFSUB__(v8, v13);
    v8 -= v13;
    if ((v8 < 0) ^ v15 | (v8 == 0))
    {
      alarm(0);
      kill(v12, 9);
      waitpid(v12, 0, 0);
      *__error() = 16;
      v16 = "FAIL: Crash handler timed out\n";
LABEL_26:
      sub_20BE9DCDC(v16);
      v18 = 0xFFFFFFFFLL;
      goto LABEL_27;
    }
  }
  if ((v24 & 0x7F) == 0x7F)
  {
    *__error() = 4;
    sub_20BE9DC38(v27, v24);
    v20 = "FAIL: Crash handler unexpected wait status=";
    goto LABEL_25;
  }
  if ((v24 & 0x7F) != 0)
  {
    *__error() = 4;
    sub_20BE9DC38(v27, v24 & 0x7F);
    v20 = "FAIL: Crash handler died: signal=";
    goto LABEL_25;
  }
  v18 = BYTE1(v24);
  if (BYTE1(v24) == 127)
  {
    *__error() = 2;
    sub_20BE9DCDC("FAIL: Crash handler failed to exec\n");
  }
LABEL_27:
  v21 = *__error();
  alarm(0);
  sigaction(14, &v25, 0);
  *__error() = v21;
  return v18;
}

_BYTE *sub_20BE9DC38(_BYTE *a1, int64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  BOOL v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;

  if (a2 < 0)
  {
    a2 = -a2;
    *a1 = 45;
  }
  v2 = 1;
  if ((unint64_t)a2 >= 0xA)
  {
    v3 = a2;
    do
    {
      ++v2;
      v4 = v3 > 0x63;
      v3 /= 0xAuLL;
    }
    while (v4);
  }
  v5 = &a1[v2];
  a1[v2] = 0;
  if (a2)
  {
    v6 = &a1[v2 - 1];
    do
    {
      *v6-- = a0123456789[a2 % 10];
      v7 = a2 + 9;
      a2 /= 10;
    }
    while (v7 > 0x12);
  }
  else
  {
    *(v5 - 1) = 48;
  }
  return v5;
}

int *sub_20BE9DCDC(_BYTE *a1)
{
  int v2;
  uint64_t v3;
  size_t v4;
  int *result;

  v2 = *__error();
  if (a1 && *a1)
  {
    v3 = 0;
    do
      v4 = v3 + 1;
    while (a1[++v3]);
  }
  else
  {
    v4 = 0;
  }
  write(2, a1, v4);
  result = __error();
  *result = v2;
  return result;
}

uint64_t sub_20BE9DD48(uint64_t **a1, const void **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)sub_20BDEEBA4((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  sub_20BE10B80(a1, v3);
  sub_20BDDE3E4((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

uint64_t sub_20BE9DDA0(uint64_t **a1, const void **a2)
{
  uint64_t v3;

  v3 = sub_20BDEEBA4((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  sub_20BE10B40(a1, v3);
  return 1;
}

uint64_t *sub_20BE9DDE4(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_20BE9DE78((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_BYTE *sub_20BE9DE78@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BE9DF00(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BDEEB58(v3, v2);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__ *sub_20BE9DF1C(pxrInternal__aapl__pxrReserved__ *result)
{
  pxrInternal__aapl__pxrReserved__ *v1;
  uint64_t v2;
  uint64_t v3;
  char **v5;
  char *v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  char *v12;

  if (!result)
    return result;
  v1 = result;
  if (*(_BYTE *)result)
  {
    v2 = 0;
    do
      v3 = v2 + 1;
    while (*((unsigned __int8 *)result + ++v2));
  }
  else
  {
    v3 = 0;
  }
  v5 = pxrInternal__aapl__pxrReserved__::ArchEnviron(result);
  v6 = *v5;
  if (!*v5)
    return 0;
  while (2)
  {
    v7 = v6;
    v8 = v1;
    v9 = v3;
    while (*v7)
    {
      if (!v9)
        goto LABEL_18;
      v10 = *(unsigned __int8 *)v8;
LABEL_16:
      if (*v7 != v10)
        goto LABEL_19;
      v8 = (pxrInternal__aapl__pxrReserved__ *)((char *)v8 + 1);
      ++v7;
      --v9;
    }
    v10 = *(unsigned __int8 *)v8;
    if (*(_BYTE *)v8)
      v11 = v9 == 0;
    else
      v11 = 1;
    if (!v11)
      goto LABEL_16;
LABEL_18:
    if (v6[v3] == 61)
      return (pxrInternal__aapl__pxrReserved__ *)&v6[v3 + 1];
LABEL_19:
    v12 = v5[1];
    ++v5;
    v6 = v12;
    if (v12)
      continue;
    return 0;
  }
}

__darwin_time_t sub_20BE9DFDC()
{
  rusage v1;

  if (getrusage(0, &v1))
    return time(0) - qword_254784FA8;
  else
    return v1.ru_utime.tv_sec;
}

uint64_t sub_20BE9E020(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t i;
  uint64_t v7;
  unsigned __int8 *v8;
  const char *v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  int v17;

  if (!*a3)
  {
    v4 = 1;
    goto LABEL_8;
  }
  v4 = 1;
  while (a3[v4++])
    ;
  if (v4 <= 0x1F)
  {
    if (!v4)
    {
LABEL_26:
      *(_QWORD *)(a1 + 8 * v4) = 0;
      return 1;
    }
LABEL_8:
    for (i = 0; i != v4; ++i)
    {
      v7 = a3[i];
      if (v7)
      {
        v8 = (unsigned __int8 *)a3[i];
        v9 = "$cmd";
        while (1)
        {
          v10 = *v8;
          v11 = *(unsigned __int8 *)v9;
          if (!(v10 | v11))
            break;
          ++v8;
          ++v9;
          if (v10 != v11)
            goto LABEL_13;
        }
        *(_QWORD *)(a1 + 8 * i) = a2;
      }
      else
      {
LABEL_13:
        v12 = 0;
        *(_QWORD *)(a1 + 8 * i) = v7;
        v13 = (unsigned __int8 *)a3[i];
        while (1)
        {
          v14 = *(unsigned __int8 **)(a4 + 16 * v12);
          if (v13)
          {
            if (v14)
              break;
          }
          if (v13 == v14)
            goto LABEL_23;
LABEL_21:
          if (++v12 == 4)
            goto LABEL_25;
        }
        v15 = (unsigned __int8 *)a3[i];
        while (1)
        {
          v16 = *v15;
          v17 = *v14;
          if (!(v16 | v17))
            break;
          ++v15;
          ++v14;
          if (v16 != v17)
            goto LABEL_21;
        }
LABEL_23:
        *(_QWORD *)(a1 + 8 * i) = *(_QWORD *)(a4 + 16 * v12 + 8);
      }
LABEL_25:
      ;
    }
    goto LABEL_26;
  }
  return 0;
}

uint64_t sub_20BE9E118(pxrInternal__aapl__pxrReserved__ *a1)
{
  _BYTE *TmpDir;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__ *v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  _BYTE *v25;
  pid_t v26;
  _BYTE *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;

  TmpDir = (_BYTE *)pxrInternal__aapl__pxrReserved__::ArchGetTmpDir(a1);
  if (TmpDir && *TmpDir)
  {
    v3 = 0;
    do
      v4 = v3 + 1;
    while (TmpDir[++v3]);
    v6 = v4 + 5;
  }
  else
  {
    v6 = 5;
  }
  v7 = (const char *)qword_254784FB8;
  if (!qword_254784FB8)
    v7 = "libArch";
  if (*v7)
  {
    v8 = 0;
    v9 = v7 + 1;
    do
      v10 = v8 + 1;
    while (v9[v8++]);
  }
  else
  {
    v10 = 0;
  }
  v12 = (pxrInternal__aapl__pxrReserved__ *)getpid();
  if ((int)v12 >= 0)
    v13 = v12;
  else
    v13 = -(int)v12;
  v14 = 1;
  if ((int)v12 < 0)
    v14 = 2;
  if (v13 >= 0xA)
  {
    do
    {
      ++v14;
      v15 = v13 > 0x63;
      v13 /= 0xAuLL;
    }
    while (v15);
  }
  v16 = v6 + v10 + v14;
  if ((unint64_t)(v16 - 1024) <= 0xFFFFFFFFFFFFFBFELL)
  {
LABEL_22:
    *__error() = 12;
    return 0xFFFFFFFFLL;
  }
  v18 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::ArchGetTmpDir(v12);
  v19 = sub_20BE9E4D8((uint64_t)a1, v18);
  v20 = sub_20BE9E4D8(v19, "/");
  v21 = sub_20BE9E4D8(v20, "st");
  v22 = sub_20BE9E4D8(v21, "_");
  if (qword_254784FB8)
    v23 = (unsigned __int8 *)qword_254784FB8;
  else
    v23 = "libArch";
  v24 = sub_20BE9E4D8(v22, v23);
  v25 = (_BYTE *)sub_20BE9E4D8(v24, ".");
  v26 = getpid();
  v27 = sub_20BE9DC38(v25, v26);
  v28 = open((const char *)a1, 3585, 416);
  if (v28 == -1)
  {
    v29 = 0;
    while (*__error() == 17)
    {
      v30 = 1;
      if (v29 >= 9)
      {
        v31 = v29 + 1;
        do
        {
          ++v30;
          v15 = v31 > 0x63;
          v31 /= 0xAuLL;
        }
        while (v15);
      }
      if ((unint64_t)(v16 + 2 + v30) >= 0x401)
        goto LABEL_22;
      sub_20BE9E4D8((uint64_t)v27, ".");
      sub_20BE9DC38(v27 + 1, v29 + 1);
      v28 = open((const char *)a1, 3585, 416);
      ++v29;
      if (v28 != -1)
        goto LABEL_28;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_28:
  close(v28);
  return 0;
}

uint64_t sub_20BE9E360(int a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__ *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  BOOL v10;
  pid_t v11;
  __darwin_time_t v12;
  void *v13;
  pxrInternal__aapl__pxrReserved__ *v15[2];
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[8];
  _BYTE v32[22];
  _BYTE v33[22];
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20BE9DF1C((pxrInternal__aapl__pxrReserved__ *)"ARCH_POSTMORTEM");
  v7 = &qword_254784FA0;
  if (!a1)
    v7 = &qword_254784F98;
  v8 = (_QWORD *)*v7;
  if (v6)
    v9 = (uint64_t)v6;
  else
    v9 = qword_254784F90;
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 1;
  if (!v10)
  {
    v11 = getpid();
    sub_20BE9DC38(v33, v11);
    v12 = sub_20BE9DFDC();
    sub_20BE9DC38(v32, v12);
    v31[0] = "$pid";
    v31[1] = v33;
    v31[2] = "$log";
    v31[3] = a2;
    v31[4] = "$time";
    v31[5] = v32;
    v31[6] = "$reason";
    v31[7] = a3;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)v15 = 0u;
    v16 = 0u;
    if ((sub_20BE9E020((uint64_t)v15, v9, v8, (uint64_t)v31) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::ArchCrashHandlerSystemv(v15[0], (char *const *)v15, (char *const *)0x12C, 0, 0, v13);
      return 1;
    }
    sub_20BE9DCDC("Too many arguments to postmortem command\n");
  }
  return 0;
}

uint64_t sub_20BE9E4D8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  int v3;

  result = a1 - 1;
  do
  {
    v3 = *a2++;
    *(_BYTE *)++result = v3;
  }
  while (v3);
  return result;
}

void sub_20BE9E4EC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _BOOL4 AddressInfo;
  _BOOL4 v5;
  const char *v6;
  char *v7;
  std::string *p_p;
  void *v9;
  void *v10;
  std::string __p;
  void *v12[2];
  uint64_t v13;

  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  memset(&__p, 0, sizeof(__p));
  v9 = 0;
  v10 = 0;
  AddressInfo = pxrInternal__aapl__pxrReserved__::ArchGetAddressInfo((const void *)(a1 - 1), (uint64_t)v12, &v10, (uint64_t)&__p, &v9);
  if (v9)
    v5 = AddressInfo;
  else
    v5 = 0;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::Arch_DemangleFunctionName(&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s+%#0lx", v6, v7, p_p, a1 - (_QWORD)v9);
  }
  else
  {
    sub_20BDDC0E4(a2, "<unknown>");
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
}

void sub_20BE9E5C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BE9E5F8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &unk_24C51AC60;
  v6[1] = a2;
  v7 = v6;
  sub_20BE9E800(v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *sub_20BE9E69C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t sub_20BE9E6E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

_QWORD *sub_20BE9E754(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C51AC60;
  result[1] = v3;
  return result;
}

uint64_t sub_20BE9E78C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C51AC60;
  a2[1] = v2;
  return result;
}

uint64_t sub_20BE9E7AC(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(a1 + 8))(*a2);
}

uint64_t sub_20BE9E7B8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51ACE0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BE9E7F4()
{
  return &unk_24C51ACE0;
}

_QWORD *sub_20BE9E800(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20BE9E968(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

void sub_20BE9E974()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_24C51AD28;
  __cxa_throw(exception, (struct type_info *)&unk_24C51AD00, (void (*)(void *))std::exception::~exception);
}

void sub_20BE9E9AC(std::exception *a1)
{
  void *v1;

  std::exception::~exception(a1);
  operator delete(v1);
}

_QWORD *sub_20BE9E9C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x24BEDB838];
  v3 = MEMORY[0x24BEDB838] + 64;
  a1[53] = MEMORY[0x24BEDB838] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 8);
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7E0] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x212B92AA8](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_20BE9EA94(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x212B92EB0](v1 + 424);
  _Unwind_Resume(a1);
}

uint64_t sub_20BE9EACC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;

  v3 = *(_QWORD **)a1;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  sub_20BDDC1C8(v3, a2, v5);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = strlen(*(const char **)(a1 + 8));
    sub_20BDDC1C8(*(_QWORD **)a1, v6, v7);
  }
  return a1;
}

_QWORD *sub_20BE9EB38(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x212B92AF0](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_20BE9EC64(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x20BE9EC30);
  }
  __cxa_rethrow();
}

void sub_20BE9ECA8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::ArchGetAddressInfo(const void *a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  int v9;
  const char *dli_sname;
  void *__p[2];
  char v13;
  std::string v14;
  Dl_info v15;

  v9 = dladdr(a1, &v15);
  if (v9)
  {
    if (a2)
    {
      sub_20BDDC0E4(__p, (char *)v15.dli_fname);
      pxrInternal__aapl__pxrReserved__::ArchAbsPath((uint64_t)__p, &v14);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(std::string *)a2 = v14;
      *((_BYTE *)&v14.__r_.__value_.__s + 23) = 0;
      v14.__r_.__value_.__s.__data_[0] = 0;
      if (v13 < 0)
        operator delete(__p[0]);
    }
    if (a3)
      *a3 = v15.dli_fbase;
    if (a4)
    {
      if (v15.dli_sname)
        dli_sname = v15.dli_sname;
      else
        dli_sname = "";
      MEMORY[0x212B929D0](a4, dli_sname);
    }
    if (a5)
      *a5 = v15.dli_saddr;
  }
  return v9 != 0;
}

void sub_20BE9EDA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchGetCwd(_QWORD *a1@<X8>)
{
  const char *v3;
  char *v4;
  char __s[1024];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (getcwd(__s, 0x400uLL))
  {
    sub_20BDDC0E4(a1, __s);
  }
  else
  {
    v4 = getcwd(0, 0);
    if (v4)
    {
      sub_20BDDC0E4(a1, v4);
      free(v4);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Arch_Warning((pxrInternal__aapl__pxrReserved__ *)"can't determine working directory", "ArchGetCwd", (const char *)0x4E, "arch/systemInfo.cpp", v3);
      sub_20BDDC0E4(a1, ".");
    }
  }
}

_QWORD *pxrInternal__aapl__pxrReserved__::ArchGetExecutablePath@<X0>(_QWORD *a1@<X8>)
{
  char *v3;
  _QWORD *v4;
  char *v5;
  _QWORD *result;
  uint64_t v7;
  size_t __sz;
  size_t *p_sz;
  char *v10;
  _QWORD v11[3];
  _QWORD *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v11[0] = &off_24C51AD50;
  v12 = v11;
  v3 = (char *)operator new[](0x400uLL);
  v10 = v3;
  __sz = 1024;
  p_sz = &__sz;
  v4 = v11;
  while (1)
  {
    if (((*(uint64_t (**)(_QWORD *, char **, size_t **))(*v4 + 48))(v4, &v10, &p_sz) & 1) != 0)
    {
      sub_20BDDC0E4(a1, v3);
      goto LABEL_8;
    }
    if (__sz == -1)
      break;
    v5 = (char *)operator new[](__sz);
    operator delete[](v3);
    v4 = v12;
    p_sz = &__sz;
    v10 = v5;
    v3 = v5;
    if (!v12)
      sub_20BE9E974();
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
LABEL_8:
  operator delete[](v3);
  result = v12;
  if (v12 == v11)
  {
    v7 = 4;
    result = v11;
  }
  else
  {
    if (!v12)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_20BE9EFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  void *v15;
  char *v17;
  uint64_t v18;

  operator delete[](v15);
  v17 = a15;
  if (a15 == &a12)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetPageSize(pxrInternal__aapl__pxrReserved__ *this)
{
  return sysconf(29);
}

_QWORD *sub_20BE9F03C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24C51AD50;
  return result;
}

void sub_20BE9F060(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24C51AD50;
}

BOOL sub_20BE9F078(uint64_t a1, char **a2, _QWORD **a3)
{
  char *v3;
  _QWORD *v4;
  int v5;
  uint32_t bufsize;

  v3 = *a2;
  v4 = *a3;
  bufsize = **a3;
  v5 = _NSGetExecutablePath(v3, &bufsize);
  if (v5 == -1)
    *v4 = bufsize;
  return v5 != -1;
}

uint64_t sub_20BE9F0C8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51ADC0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BE9F104()
{
  return &unk_24C51ADC0;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchIsMainThread(pxrInternal__aapl__pxrReserved__ *this)
{
  return pthread_main_np() != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetMainThreadId(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254785038);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254785038))
  {
    qword_254785030 = pthread_main_thread_np();
    __cxa_guard_release(&qword_254785038);
  }
  return qword_254785030;
}

void sub_20BE9F184(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254785038);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetTickQuantum(pxrInternal__aapl__pxrReserved__ *this)
{
  return sub_20BE9F1B0(&qword_25473B108, (uint64_t (*)(void))sub_20BE9F22C);
}

uint64_t sub_20BE9F1B0(unint64_t *a1, uint64_t (*a2)(void))
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    if (result != -1)
      goto LABEL_13;
    while (1)
    {
      result = __ldaxr(a1);
      if (result != -1)
        break;
      if (!__stlxr(0xFFFFFFFFFFFFFFFELL, a1))
      {
        result = a2();
        *a1 = result;
        return result;
      }
    }
    __clrex();
    if (result < 0)
    {
LABEL_13:
      do
      {
        sched_yield();
        result = *a1;
      }
      while ((*a1 & 0x8000000000000000) != 0);
    }
  }
  return result;
}

unint64_t sub_20BE9F22C()
{
  int v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int8x16_t v5;
  int64x2_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t i;
  unint64_t v10;
  _QWORD v12[6];

  v0 = 0;
  v12[5] = *MEMORY[0x24BDAC8D0];
  v1 = -1;
  do
  {
    v2 = mach_absolute_time();
    v12[0] = v2;
    v12[1] = mach_absolute_time();
    v12[2] = mach_absolute_time();
    v12[3] = mach_absolute_time();
    v3 = mach_absolute_time();
    v4 = 0;
    v12[4] = v3;
    v5 = (int8x16_t)vdupq_n_s64(v2);
    do
    {
      v6 = *(int64x2_t *)&v12[v4 + 1];
      *(int64x2_t *)&v12[v4] = vsubq_s64(v6, (int64x2_t)vextq_s8(v5, (int8x16_t)v6, 8uLL));
      v4 += 2;
      v5 = (int8x16_t)v6;
    }
    while (v4 != 4);
    v7 = v12;
    v8 = v12[0];
    for (i = 1; i != 4; ++i)
    {
      if (v12[i] < v8)
      {
        v8 = v12[i];
        v7 = &v12[i];
      }
    }
    v10 = *v7;
    if (v10 < v1)
      v1 = v10;
    ++v0;
  }
  while (v0 != 64);
  return v1;
}

uint64_t pxrInternal__aapl__pxrReserved__::ArchGetIntervalTimerTickOverhead(pxrInternal__aapl__pxrReserved__ *this)
{
  return sub_20BE9F1B0(&qword_25473B110, (uint64_t (*)(void))sub_20BE9F340);
}

unint64_t sub_20BE9F340()
{
  unint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t i;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t j;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[32];
  unint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v0 = -1;
  v1 = -10;
  do
  {
    v2 = mach_absolute_time();
    v3 = mach_absolute_time();
    pxrInternal__aapl__pxrReserved__::testTimeAccum = mach_absolute_time() - v3;
    v4 = mach_absolute_time();
    if (v4 - v2 < v0)
      v0 = v4 - v2;
  }
  while (!__CFADD__(v1++, 1));
  v6 = sub_20BE9F1B0(&qword_25473B108, (uint64_t (*)(void))sub_20BE9F22C);
  if (v0 >= 2000 * v6)
    LODWORD(v7) = 1;
  else
    v7 = (2000 * v6 + (v0 >> 1)) / v0;
  v8 = 0;
  if ((v7 & 0x80000000) == 0)
    v9 = v7;
  else
    v9 = v7 + 1;
  v10 = (uint64_t)v9 >> 1;
  do
  {
    v11 = mach_absolute_time();
    if ((_DWORD)v7)
    {
      v12 = v7;
      do
      {
        --v12;
        v13 = mach_absolute_time();
        pxrInternal__aapl__pxrReserved__::testTimeAccum = mach_absolute_time() - v13;
      }
      while (v12);
    }
    v27[v8++] = (v10 - v11 + mach_absolute_time()) / (int)v7;
  }
  while (v8 != 64);
  v14 = mach_absolute_time();
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  v15 = v27[0];
  if (v27[0] != v28)
  {
    v15 = -1;
    v25 = v14;
    while (mach_absolute_time() - v14 < 0x989680)
    {
      v26 = v28;
      for (i = 43; i != 64; ++i)
      {
        v17 = mach_absolute_time();
        if ((_DWORD)v7)
        {
          v18 = v7;
          do
          {
            --v18;
            v19 = mach_absolute_time();
            pxrInternal__aapl__pxrReserved__::testTimeAccum = mach_absolute_time() - v19;
          }
          while (v18);
        }
        v27[i] = (v10 - v17 + mach_absolute_time()) / (int)v7;
      }
      for (j = 0; j != 6; ++j)
      {
        v21 = mach_absolute_time();
        if ((_DWORD)v7)
        {
          v22 = v7;
          do
          {
            --v22;
            v23 = mach_absolute_time();
            pxrInternal__aapl__pxrReserved__::testTimeAccum = mach_absolute_time() - v23;
          }
          while (v22);
        }
        v27[j] = (v10 - v21 + mach_absolute_time()) / (int)v7;
      }
      if (v26 < v15)
        v15 = v26;
      std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
      v14 = v25;
      if (v27[0] == v28)
        return v27[0];
    }
    while (mach_absolute_time() - v14 < 0x989680)
      ;
  }
  return v15;
}

unint64_t pxrInternal__aapl__pxrReserved__::ArchTicksToNanoseconds(pxrInternal__aapl__pxrReserved__ *this)
{
  return llround(pxrInternal__aapl__pxrReserved__::ArchGetNanosecondsPerTick(this) * (double)(unint64_t)this);
}

double pxrInternal__aapl__pxrReserved__::ArchGetNanosecondsPerTick(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t v1;
  double result;
  double v3;
  unint64_t v4;
  unint64_t v5;
  mach_timebase_info info;

  v1 = qword_25473B118;
  result = *(double *)&qword_25473B118;
  if (*(double *)&qword_25473B118 < 0.0)
  {
    if (*(double *)&qword_25473B118 == -1.0)
    {
      while (1)
      {
        v3 = COERCE_DOUBLE(__ldaxr((unint64_t *)&qword_25473B118));
        if (*(_QWORD *)&v3 != v1)
          break;
        if (!__stlxr(0xC000000000000000, (unint64_t *)&qword_25473B118))
        {
          mach_timebase_info(&info);
          LODWORD(v4) = info.numer;
          LODWORD(v5) = info.denom;
          result = (double)v4 / (double)v5;
          qword_25473B118 = *(_QWORD *)&result;
          return result;
        }
      }
      __clrex();
      result = v3;
    }
    while (result < 0.0)
    {
      sched_yield();
      result = *(double *)&qword_25473B118;
    }
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds(pxrInternal__aapl__pxrReserved__ *this)
{
  return (double)(uint64_t)llround(pxrInternal__aapl__pxrReserved__::ArchGetNanosecondsPerTick(this)* (double)(unint64_t)this)/ 1000000000.0;
}

unint64_t pxrInternal__aapl__pxrReserved__::ArchSecondsToTicks(pxrInternal__aapl__pxrReserved__ *this, double a2)
{
  return llround(a2 * 1000000000.0 / pxrInternal__aapl__pxrReserved__::ArchGetNanosecondsPerTick(this));
}

unint64_t pxrInternal__aapl__pxrReserved__::Arch_MeasureExecutionTime(pxrInternal__aapl__pxrReserved__ *this, char *a2, BOOL *a3, uint64_t (*a4)(_QWORD, _QWORD), unint64_t (*a5)(const void *, int))
{
  unint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t i;
  uint64_t j;
  char *v24;
  char v25;
  _QWORD v28[32];
  unint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v8 = -1;
  v9 = -10;
  do
  {
    v10 = ((uint64_t (*)(BOOL *, uint64_t, BOOL *, uint64_t (*)(_QWORD, _QWORD), unint64_t (*)(const void *, int)))a4)(a3, 1, a3, a4, a5);
    if (v10 < v8)
      v8 = v10;
  }
  while (!__CFADD__(v9++, 1));
  v12 = sub_20BE9F1B0(&qword_25473B108, (uint64_t (*)(void))sub_20BE9F22C);
  if (v8 >= 2000 * v12)
    LODWORD(v13) = 1;
  else
    v13 = (2000 * v12 + (v8 >> 1)) / v8;
  v14 = 0;
  if ((v13 & 0x80000000) == 0)
    v15 = v13;
  else
    v15 = v13 + 1;
  v16 = (uint64_t)v15 >> 1;
  v17 = (int)v13;
  do
    v28[v14++] = (a4(a3, v17) + v16) / v17;
  while (v14 != 64);
  if ((unint64_t)this >= 0x12A05F200)
    v18 = 5000000000;
  else
    v18 = (unint64_t)this;
  v19 = mach_absolute_time();
  std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
  v20 = v28[0];
  if (v28[0] == v29)
  {
LABEL_28:
    v24 = a2;
    if (a2)
    {
      v25 = 1;
LABEL_33:
      *v24 = v25;
    }
  }
  else
  {
    v20 = -1;
    while (mach_absolute_time() - v19 < v18)
    {
      v21 = v29;
      for (i = 43; i != 64; ++i)
        v28[i] = (a4(a3, v17) + v16) / v17;
      for (j = 0; j != 6; ++j)
        v28[j] = (a4(a3, v17) + v16) / v17;
      if (v21 < v20)
        v20 = v21;
      std::__sort<std::__less<unsigned long long,unsigned long long> &,unsigned long long *>();
      if (v28[0] == v29)
      {
        v20 = v28[0];
        goto LABEL_28;
      }
    }
    while (mach_absolute_time() - v19 < v18)
      ;
    v24 = a2;
    if (a2)
    {
      v25 = 0;
      goto LABEL_33;
    }
  }
  return v20;
}

void *pxrInternal__aapl__pxrReserved__::ArchReserveVirtualMemory(size_t this)
{
  void *result;

  result = mmap(0, this, 0, 4098, -1, 0);
  if ((unint64_t)result + 1 < 2)
    return 0;
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchCommitVirtualMemoryRange(unint64_t this, void *a2)
{
  unsigned __int8 v4;
  pxrInternal__aapl__pxrReserved__ *v6;

  v4 = atomic_load((unsigned __int8 *)&qword_254785048);
  if ((v4 & 1) == 0)
  {
    v6 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_254785048);
    if ((_DWORD)v6)
    {
      qword_254785040 = -(uint64_t)(int)pxrInternal__aapl__pxrReserved__::ArchGetPageSize(v6);
      __cxa_guard_release(&qword_254785048);
    }
  }
  return mprotect((void *)(qword_254785040 & this), (size_t)a2 + this - (qword_254785040 & this), 3) == 0;
}

void sub_20BE9FA00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254785048);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::ArchFreeVirtualMemory(pxrInternal__aapl__pxrReserved__ *this, size_t a2)
{
  return munmap(this, a2) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::ArchSetMemoryProtection(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int8 v6;
  pxrInternal__aapl__pxrReserved__ *v8;

  v6 = atomic_load((unsigned __int8 *)&qword_254785048);
  if ((v6 & 1) == 0)
  {
    v8 = (pxrInternal__aapl__pxrReserved__ *)__cxa_guard_acquire(&qword_254785048);
    if ((_DWORD)v8)
    {
      qword_254785040 = -(uint64_t)(int)pxrInternal__aapl__pxrReserved__::ArchGetPageSize(v8);
      __cxa_guard_release(&qword_254785048);
    }
  }
  return mprotect((void *)(qword_254785040 & a1), a1 + a2 - (qword_254785040 & a1), dword_20CA54320[a3]) == 0;
}

void sub_20BE9FACC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254785048);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::ArchVStringPrintf(pxrInternal__aapl__pxrReserved__ *this, const char *a2, char *a3)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  va_list v6;
  int v7;
  uint64_t v8;
  _BOOL4 v9;
  size_t v10;
  BOOL v11;
  char *v12;
  __int128 v13;
  uint64_t v14;
  va_list v15;
  va_list v16;
  char __str[4096];
  uint64_t v18;

  v3 = (const char *)MEMORY[0x24BDAC7A8](this, a2, a3);
  v5 = v4;
  v18 = *MEMORY[0x24BDAC8D0];
  v15 = v6;
  v16 = v6;
  v7 = vsnprintf(__str, 0x1000uLL, v3, v6) + 1;
  if (v7 > 0x1000)
  {
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    v9 = 1;
    *(_QWORD *)(v5 + 16) = 0;
  }
  else
  {
    sub_20BDDC0E4((_QWORD *)v5, __str);
    v8 = *(unsigned __int8 *)(v5 + 23);
    if (*(char *)(v5 + 23) < 0)
      v8 = *(_QWORD *)(v5 + 8);
    v9 = v8 == 0;
  }
  v10 = v7;
  if (v7)
    v11 = !v9;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = (char *)operator new[](v7);
    vsnprintf(v12, v10, v3, v15);
    sub_20BDDC0E4(&v13, v12);
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    *(_OWORD *)v5 = v13;
    *(_QWORD *)(v5 + 16) = v14;
    operator delete[](v12);
  }
}

void sub_20BE9FC24(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::ArchStringPrintf(pxrInternal__aapl__pxrReserved__ *this, const char *a2, char *a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::ArchVStringPrintf(this, va, a3);
}

void sub_20BE9FC74()
{
  unint64_t v0;
  unint64_t v1;
  _BOOL4 v2;
  _BOOL4 v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  FILE *v8;
  void **v9;
  void **v10;
  void *v11[2];
  char v12;
  void *__p[2];
  uint64_t v14;
  void *v15[2];
  unsigned __int8 v16;
  void *v17[2];
  unsigned __int8 v18;

  sub_20BDDC0E4(v15, "TF_MALLOC_TAG_CAPTURE");
  sub_20BDDC0E4(__p, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v15, (uint64_t)__p, (uint64_t)v17);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  if ((char)v16 < 0)
    operator delete(v15[0]);
  sub_20BDDC0E4(__p, "TF_MALLOC_TAG_DEBUG");
  sub_20BDDC0E4(v11, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)__p, (uint64_t)v11, (uint64_t)v15);
  if (v12 < 0)
    operator delete(v11[0]);
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  v0 = v18;
  if ((v18 & 0x80u) != 0)
    v0 = (unint64_t)v17[1];
  if (!v0)
  {
    v1 = v16;
    if ((v16 & 0x80u) != 0)
      v1 = (unint64_t)v15[1];
    if (!v1)
    {
      sub_20BDDC0E4(__p, "TF_MALLOC_TAG");
      v2 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
      v3 = v2;
      if (SHIBYTE(v14) < 0)
      {
        operator delete(__p[0]);
        if (!v3)
          goto LABEL_30;
      }
      else if (!v2)
      {
        goto LABEL_30;
      }
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  if ((pxrInternal__aapl__pxrReserved__::TfMallocTag::Initialize((uint64_t)__p) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::SetCapturedMallocStacksMatchList((uint64_t)v17, v4, v5);
    pxrInternal__aapl__pxrReserved__::TfMallocTag::SetDebugMatchList((uint64_t)v15, v6, v7);
  }
  else
  {
    v8 = (FILE *)*MEMORY[0x24BDAC8D8];
    pxrInternal__aapl__pxrReserved__::ArchGetExecutablePath(v11);
    if (v12 >= 0)
      v9 = v11;
    else
      v9 = (void **)v11[0];
    v10 = __p;
    if (v14 < 0)
      v10 = (void **)__p[0];
    fprintf(v8, "%s: TF_MALLOC_TAG environment variable set, but\n            malloc tag initialization failed: %s\n", (const char *)v9, (const char *)v10);
    if (v12 < 0)
      operator delete(v11[0]);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
LABEL_30:
  if ((char)v16 < 0)
    operator delete(v15[0]);
  if ((char)v18 < 0)
    operator delete(v17[0]);
}

void sub_20BE9FE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 17) < 0)
    operator delete(*(void **)(v28 - 40));
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::BignumDtoa(uint64_t result, int a2, _BYTE *a3, uint64_t a4, int *a5, int *a6, double a7)
{
  unsigned int v12;
  float v13;
  int v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  int v21;
  unint64_t v22;
  int v23;
  int v24;
  const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *v25;
  __int16 *v26;
  int v27;
  char v28;
  const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *v29;
  const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *v30;
  int v31;
  int v32;
  const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *v33;
  int v34;
  int v35;
  int v36;
  char v37;
  uint64_t v38;
  const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *v39;
  int v40;
  const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *v41;
  const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *v42;
  _BYTE *v43;
  _BYTE *v44;
  char v45;
  char v46;
  int v47;
  _BYTE *v48;
  char v49;
  const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *v50;
  __int16 v51[258];
  __int16 v52[258];
  __int16 v53[258];
  unsigned __int16 v54[262];

  v12 = result;
  v13 = a7;
  v14 = ((*(_QWORD *)&a7 >> 52) & 0x7FF) - 1075;
  v15 = *(_QWORD *)&a7 & 0xFFFFFFFFFFFFFLL;
  if ((*(_QWORD *)&a7 & 0x7FF0000000000000) != 0)
    v15 = *(_QWORD *)&a7 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  else
    v14 = -1074;
  v16 = (*(_QWORD *)&a7 & 0x7FE0000000000000) != 0 && (*(_QWORD *)&a7 & 0xFFFFFFFFFFFFFLL) == 0;
  v17 = (LODWORD(v13) >> 23) - 150;
  LODWORD(v18) = LODWORD(v13) & 0x7FFFFF;
  if ((LODWORD(v13) & 0x7F800000) != 0)
    v18 = LODWORD(v13) & 0x7FFFFF | 0x800000u;
  else
    v18 = v18;
  if ((LODWORD(v13) & 0x7F800000) == 0)
    v17 = -149;
  v19 = (LODWORD(v13) & 0x7F000000) != 0 && (LODWORD(v13) & 0x7FFFFF) == 0;
  if ((_DWORD)result == 1)
    v20 = v19;
  else
    v20 = v16;
  if ((_DWORD)result == 1)
    v21 = v17;
  else
    v21 = v14;
  if ((_DWORD)result == 1)
    v22 = v18;
  else
    v22 = v15;
  v23 = v21 - __clz(v22 & 0xFFFFFFFFFFFFFLL) + 11;
  if ((v22 & 0x10000000000000) != 0)
    v23 = v21;
  v24 = vcvtpd_s64_f64((double)(v23 + 52) * 0.301029996 + -1.0e-10);
  if ((_DWORD)result == 2 && ~v24 > a2)
  {
    *a3 = 0;
    *a5 = 0;
    *a6 = -a2;
    return result;
  }
  *(_DWORD *)v54 = 0;
  *(_DWORD *)v53 = 0;
  *(_DWORD *)v52 = 0;
  *(_DWORD *)v51 = 0;
  if ((v21 & 0x80000000) == 0)
  {
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt64(v54, v22);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v54, v21);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignPowerUInt16(v53, 0xAu, v24);
    if (v12 > 1)
      goto LABEL_44;
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v53, 1);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v54, 1);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(v51, 1);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v51, v21);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(v52, 1);
    v26 = v52;
    v27 = v21;
    goto LABEL_39;
  }
  if (v24 < 0)
  {
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignPowerUInt16((__int16 *)v54, 0xAu, -v24);
    if (v12 > 1)
    {
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt64(v54, v22);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(v53, 1);
      v27 = -v21;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignBignum(v51, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignBignum(v52, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt64(v54, v22);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(v53, 1);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v53, -v21);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v54, 1);
      v27 = 1;
    }
    v26 = v53;
LABEL_39:
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v26, v27);
    goto LABEL_40;
  }
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt64(v54, v22);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignPowerUInt16(v53, 0xAu, v24);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v53, -v21);
  if (v12 > 1)
    goto LABEL_44;
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v53, 1);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v54, 1);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(v51, 1);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(v52, 1);
LABEL_40:
  v28 = !v20;
  if (v12 > 1)
    v28 = 1;
  if ((v28 & 1) == 0)
  {
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v53, 1);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v54, 1);
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v51, 1);
  }
LABEL_44:
  result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v51, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v53, v25);
  if ((v22 & 1) == 0)
  {
    if ((result & 0x80000000) != 0)
      goto LABEL_46;
LABEL_49:
    *a6 = v24 + 1;
    goto LABEL_50;
  }
  if ((int)result >= 1)
    goto LABEL_49;
LABEL_46:
  *a6 = v24;
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32((__int16 *)v54, 0xAu);
  v31 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare((uint64_t)v52, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v51, v30);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(v52, 0xAu);
  if (v31)
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(v51, 0xAu);
  else
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignBignum(v51, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v52);
LABEL_50:
  if (v12 < 2)
  {
    v33 = (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v52;
    v34 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare((uint64_t)v52, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v51, v29);
    if (v34)
      v33 = (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v51;
    v35 = (v22 & 1) == 0;
    *a5 = 0;
    if ((v22 & 1) != 0)
      v36 = 0;
    else
      v36 = -1;
    while (1)
    {
      v37 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::DivideModuloIntBignum((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v53);
      v38 = *a5;
      *a5 = v38 + 1;
      a3[v38] = v37 + 48;
      v40 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare((uint64_t)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v52, v39);
      result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, v33, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v53, v41);
      if (v40 < v35 || (int)result > v36)
        break;
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32((__int16 *)v54, 0xAu);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(v52, 0xAu);
      if (v34)
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(v51, 0xAu);
    }
    if (v40 >= v35 || (int)result <= v36)
    {
      if (v40 < v35)
        goto LABEL_81;
      v48 = &a3[*a5];
      v49 = *(v48 - 1);
      v44 = v48 - 1;
      v45 = v49;
    }
    else
    {
      result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v53, v42);
      if ((result & 0x80000000) != 0)
        goto LABEL_81;
      v43 = &a3[*a5];
      v46 = *(v43 - 1);
      v44 = v43 - 1;
      v45 = v46;
      if (!(_DWORD)result && (v45 & 1) == 0)
        goto LABEL_81;
    }
    *v44 = v45 + 1;
    goto LABEL_81;
  }
  if (v12 != 2)
  {
    if (v12 != 3)
      abort();
    v32 = a2;
    goto LABEL_80;
  }
  v47 = -*a6;
  if (v47 <= a2)
  {
    if (v47 != a2)
    {
      v32 = *a6 + a2;
LABEL_80:
      result = sub_20BEA041C(v32, a6, (pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v53, a3, a4, a5);
      goto LABEL_81;
    }
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(v53, 0xAu);
    result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v54, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v53, v50);
    if ((result & 0x80000000) == 0)
    {
      *a3 = 49;
      *a5 = 1;
      ++*a6;
      goto LABEL_81;
    }
  }
  else
  {
    *a6 = -a2;
  }
  *a5 = 0;
LABEL_81:
  a3[*a5] = 0;
  return result;
}

uint64_t sub_20BEA041C(int a1, _DWORD *a2, pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a4, _BYTE *a5, uint64_t a6, int *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *v18;
  uint64_t result;
  _BYTE *v20;
  char v21;
  _BYTE *v22;
  int v23;
  char v24;
  const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *v25;

  v13 = (a1 - 1);
  v14 = (a1 - 2);
  if (a1 < 2)
  {
    v24 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::DivideModuloIntBignum(this, a4);
    result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare(this, this, a4, v25);
    a5[(int)v13] = v24 + ((int)result >= 0) + 48;
  }
  else
  {
    v15 = (a1 - 1);
    v16 = a5;
    do
    {
      *v16++ = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::DivideModuloIntBignum(this, a4) + 48;
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32((__int16 *)this, 0xAu);
      --v15;
    }
    while (v15);
    v17 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::DivideModuloIntBignum(this, a4);
    result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare(this, this, a4, v18);
    a5[(int)v13] = v17 + ((int)result >= 0) + 48;
    v20 = &a5[v13];
    v21 = a5[v13];
    v22 = &a5[v14];
    v23 = a1;
    do
    {
      if (v21 != 58)
        break;
      *v20-- = 48;
      v21 = *v22 + 1;
      *v22-- = v21;
      --v23;
    }
    while (v23 > 1);
  }
  if (*a5 == 58)
  {
    *a5 = 49;
    ++*a2;
  }
  *a7 = a1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::RawBigit(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, int a2)
{
  return (uint64_t)this + 4 * a2 + 4;
}

{
  return (uint64_t)this + 4 * a2 + 4;
}

_DWORD *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt16(_DWORD *this, int a2)
{
  *this = 0;
  if (a2)
  {
    this[1] = a2;
    *(_WORD *)this = 1;
  }
  return this;
}

_DWORD *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt64(_DWORD *this, unint64_t a2)
{
  __int16 v2;
  uint64_t v3;

  *this = 0;
  if (a2)
  {
    v2 = 0;
    v3 = 1;
    do
    {
      this[v3] = a2 & 0xFFFFFFF;
      a2 >>= 28;
      ++v2;
      ++v3;
    }
    while (a2);
    *(_WORD *)this = v2;
  }
  return this;
}

_WORD *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignBignum(_WORD *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2)
{
  int v2;
  uint64_t v3;
  _DWORD *v4;
  int *v5;
  int v6;

  this[1] = *((_WORD *)a2 + 1);
  v2 = *(__int16 *)a2;
  if (v2 >= 1)
  {
    v3 = *(unsigned __int16 *)a2;
    v4 = this + 2;
    v5 = (int *)((char *)a2 + 4);
    do
    {
      v6 = *v5++;
      *v4++ = v6;
      --v3;
    }
    while (v3);
  }
  *this = v2;
  return this;
}

void pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignDecimalString(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, uint64_t a2, int a3)
{
  int v3;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v3 = a3;
  *(_DWORD *)this = 0;
  if (a3 < 19)
  {
    v6 = 0;
    v10 = a3;
  }
  else
  {
    v6 = 0;
    v7 = a2;
    do
    {
      v8 = 0;
      v9 = 0;
      do
        v9 = *(char *)(v7 + v8++) + 10 * v9 - 48;
      while (v8 != 19);
      v6 += 19;
      v10 = v3 - 19;
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByPowerOfTen((unsigned __int16 *)this, 19);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AddUInt64(this, v9);
      v7 += 19;
      v11 = v3 <= 37;
      v3 -= 19;
    }
    while (!v11);
  }
  if (v10 < 1)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    v13 = v6;
    do
      v12 = *(char *)(a2 + v13++) + 10 * v12 - 48;
    while (v13 < (int)(v10 + v6));
  }
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByPowerOfTen((unsigned __int16 *)this, v10);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AddUInt64(this, v12);
  v14 = *(__int16 *)this;
  if (v14 < 1)
  {
    if (!*(_WORD *)this)
LABEL_19:
      *((_WORD *)this + 1) = 0;
  }
  else
  {
    while (!*((_DWORD *)this + (unsigned __int16)v14))
    {
      v15 = (__int16)v14;
      LOWORD(v14) = v14 - 1;
      *(_WORD *)this = v14;
      if (v15 <= 1)
        goto LABEL_19;
    }
  }
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByPowerOfTen(unsigned __int16 *this, int a2)
{
  unsigned __int16 *v2;
  int v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  int v9;

  if (a2)
  {
    v2 = this;
    if (*this)
    {
      v4 = a2;
      if (a2 >= 27)
      {
        v5 = a2;
        do
        {
          pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt64(v2, 0x6765C793FA10079DuLL);
          v4 = v5 - 27;
          v6 = v5 > 0x35;
          v5 -= 27;
        }
        while (v6);
      }
      if (v4 < 13)
      {
        v7 = v4;
      }
      else
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32((__int16 *)v2, 0x48C27395u);
          v7 = v4 - 13;
          v6 = v4 > 0x19;
          v4 -= 13;
        }
        while (v6);
      }
      v8 = __OFSUB__(v7, 1);
      v9 = v7 - 1;
      if (v9 < 0 == v8)
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32((__int16 *)v2, dword_20CA54340[v9]);
      return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v2, a2);
    }
  }
  return this;
}

void pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AddUInt64(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, unint64_t a2)
{
  uint64_t v2;
  _DWORD v3[129];

  if (a2)
  {
    v2 = 0;
    v3[0] = 0;
    do
    {
      v3[v2 + 1] = a2 & 0xFFFFFFF;
      a2 >>= 28;
      ++v2;
    }
    while (a2);
    LOWORD(v3[0]) = v2;
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AddBignum(this, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v3);
  }
}

__int16 *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Clamp(__int16 *this)
{
  int v1;
  int v2;

  v1 = *this;
  if (v1 < 1)
  {
    if (!*this)
LABEL_7:
      this[1] = 0;
  }
  else
  {
    while (!*(_DWORD *)&this[2 * (unsigned __int16)v1])
    {
      v2 = (__int16)v1;
      LOWORD(v1) = v1 - 1;
      *this = v1;
      if (v2 <= 1)
        goto LABEL_7;
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignHexString(uint64_t result, uint64_t a2, int a3)
{
  unsigned __int16 v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;

  *(_DWORD *)result = 0;
  if (a3 > 896)
    abort();
  if (!a3)
  {
LABEL_19:
    *(_WORD *)(result + 2) = 0;
    return result;
  }
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = a3 - 1;
  do
  {
    v7 = *(char *)(a2 + v6);
    v8 = (v7 - 48);
    v9 = v7 - 97;
    v10 = (v7 - 87);
    if (v9 > 5)
      v10 = *(char *)(a2 + v6) - 55;
    if (v8 <= 9)
      v10 = v8;
    v5 |= v10 << v4;
    if (v4 < 24)
    {
      v4 += 4;
    }
    else
    {
      v11 = result + 4 * (__int16)v3++;
      *(_WORD *)result = v3;
      *(_DWORD *)(v11 + 4) = v5 & 0xFFFFFFF;
      v5 >>= 28;
      v4 -= 24;
    }
  }
  while ((_DWORD)v6--);
  if (v5)
  {
    v13 = result + 4 * (__int16)v3++;
    *(_WORD *)result = v3;
    *(_DWORD *)(v13 + 4) = v5 & 0xFFFFFFF;
  }
  if ((__int16)v3 < 1)
  {
    if (v3)
      return result;
    goto LABEL_19;
  }
  while (!*(_DWORD *)(result + 4 * (v3 - 1) + 4))
  {
    v14 = (__int16)v3--;
    *(_WORD *)result = v3;
    if (v14 <= 1)
      goto LABEL_19;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AddBignum(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  char *v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  unsigned int v16;
  char *v17;
  int v18;
  unsigned int v19;
  __int16 v20;

  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Align(this, a2);
  v4 = *(__int16 *)this;
  v5 = *((__int16 *)this + 1);
  v6 = v5 + v4;
  v7 = *(__int16 *)a2;
  v8 = *((__int16 *)a2 + 1);
  if (v5 + v4 <= v8 + (int)v7)
    v6 = v8 + v7;
  if (v6 - v5 >= 128)
    abort();
  v9 = v8 - v5;
  if (v8 - v5 > v4)
    bzero((char *)this + 4 * *(__int16 *)this + 4, 4 * (~v5 + v8 - *(__int16 *)this) + 4);
  if ((int)v7 >= 1)
  {
    v10 = 0;
    v11 = (char *)this + 4;
    v12 = v9;
    v13 = (int *)((char *)a2 + 4);
    do
    {
      if (v12 >= v4)
        v14 = 0;
      else
        v14 = *(_DWORD *)&v11[4 * v12];
      v15 = *v13++;
      v16 = v14 + v10 + v15;
      *(_DWORD *)&v11[4 * v12] = v16 & 0xFFFFFFF;
      v10 = v16 >> 28;
      ++v12;
      --v7;
    }
    while (v7);
    if (v10)
    {
      v17 = (char *)this + 4;
      do
      {
        if (v12 >= v4)
          v18 = 0;
        else
          v18 = *(_DWORD *)&v17[4 * v12];
        v19 = v18 + v10;
        *(_DWORD *)&v17[4 * v12] = v19 & 0xFFFFFFF;
        v10 = v19 >> 28;
        ++v12;
      }
      while (v10);
    }
    v9 = v12;
  }
  if (v9 <= v4)
    v20 = v4;
  else
    v20 = v9;
  *(_WORD *)this = v20;
}

void pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Align(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *((__int16 *)this + 1);
  v3 = *((__int16 *)a2 + 1);
  v4 = v2 - v3;
  if (v2 > v3)
  {
    v6 = *(__int16 *)this;
    if (v4 + v6 > 128)
      abort();
    v7 = *(unsigned __int16 *)this;
    if ((__int16)v6 >= 1)
    {
      v8 = 4 * (v2 + v7 - v3);
      v9 = *(unsigned __int16 *)this;
      do
      {
        *(_DWORD *)((char *)this + v8) = *((_DWORD *)this + v9);
        v8 -= 4;
      }
      while (v9-- > 1);
    }
    if (v4 >= 1)
      bzero((char *)this + 4, 4 * (~v3 + v2) + 4);
    *(_WORD *)this = v7 + v4;
    *((_WORD *)this + 1) = v2 - v4;
  }
}

void pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::SubtractBignum(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int v11;
  int v12;
  int v13;
  char *v14;
  int v15;
  int v16;
  int v17;

  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Align(this, a2);
  v4 = *(__int16 *)a2;
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = *((__int16 *)a2 + 1);
    v7 = *((__int16 *)this + 1);
    v8 = v4;
    v9 = (int *)((char *)this + 4 * (v6 - v7) + 4);
    v10 = (int *)((char *)a2 + 4);
    do
    {
      v11 = *v10++;
      v12 = *v9 + v5 - v11;
      *v9++ = v12 & 0xFFFFFFF;
      v5 = v12 >> 31;
      --v8;
    }
    while (v8);
    if (v12 < 0)
    {
      v13 = v4 + v6 - v7;
      do
      {
        v14 = (char *)this + 4 * v13++;
        v15 = *((_DWORD *)v14 + 1) - 1;
        *((_DWORD *)v14 + 1) = v15 & 0xFFFFFFF;
      }
      while (v15 < 0);
    }
  }
  v16 = *(__int16 *)this;
  if (v16 < 1)
  {
    if (!*(_WORD *)this)
LABEL_12:
      *((_WORD *)this + 1) = 0;
  }
  else
  {
    while (!*((_DWORD *)this + (unsigned __int16)v16))
    {
      v17 = (__int16)v16;
      LOWORD(v16) = v16 - 1;
      *(_WORD *)this = v16;
      if (v17 <= 1)
        goto LABEL_12;
    }
  }
}

_WORD *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(_WORD *this, int a2)
{
  int v2;

  v2 = (__int16)*this;
  if (*this)
  {
    this[1] += a2 / 28;
    if (v2 >= 128)
      abort();
    return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::BigitsShiftLeft(this, a2 % 28);
  }
  return this;
}

_WORD *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::BigitsShiftLeft(_WORD *this, char a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;

  if ((__int16)*this >= 1)
  {
    v2 = 0;
    v3 = 0;
    v4 = (unsigned __int16)*this;
    do
    {
      v5 = *(_DWORD *)&this[v2 + 2];
      v6 = (v5 << a2) + v3;
      v3 = v5 >> (28 - a2);
      *(_DWORD *)&this[v2 + 2] = v6 & 0xFFFFFFF;
      v2 += 2;
    }
    while (2 * v4 != v2);
    if (v3)
    {
      *(_DWORD *)&this[2 * (__int16)v4 + 2] = v3;
      *this = v4 + 1;
    }
  }
  return this;
}

__int16 *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(__int16 *this, unsigned int a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  if (a2 != 1)
  {
    if (a2)
    {
      v2 = *this;
      if (v2 >= 1)
      {
        v3 = 0;
        v4 = 0;
        do
        {
          v5 = v4 + *(unsigned int *)&this[v3 + 2] * (unint64_t)a2;
          *(_DWORD *)&this[v3 + 2] = v5 & 0xFFFFFFF;
          v4 = v5 >> 28;
          v3 += 2;
        }
        while (2 * (unsigned __int16)v2 != v3);
        for (; v4; v4 >>= 28)
        {
          if ((__int16)v2 >= 128)
            abort();
          *(_DWORD *)&this[2 * (__int16)v2 + 2] = v4 & 0xFFFFFFF;
          LOWORD(v2) = v2 + 1;
          *this = v2;
        }
      }
    }
    else
    {
      *(_DWORD *)this = 0;
    }
  }
  return this;
}

unsigned __int16 *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt64(unsigned __int16 *this, unint64_t a2)
{
  uint64_t v2;
  unsigned __int16 v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (a2 != 1)
  {
    if (a2)
    {
      v2 = *this;
      v3 = *this;
      if (*this)
        v4 = (__int16)v2 < 1;
      else
        v4 = 1;
      if (!v4)
      {
        v5 = 0;
        v6 = 0;
        v7 = 4 * v2;
        do
        {
          v8 = *(unsigned int *)&this[v5 / 2 + 2];
          v9 = (v6 & 0xFFFFFFF) + a2 * (unint64_t)v8;
          *(_DWORD *)&this[v5 / 2 + 2] = v9 & 0xFFFFFFF;
          v6 = ((a2 >> 28) & 0xFFFFFFFF0) * v8 + (v6 >> 28) + (v9 >> 28);
          v5 += 4;
        }
        while (v7 != v5);
        for (; v6; v6 >>= 28)
        {
          if ((__int16)v3 >= 128)
            abort();
          *(_DWORD *)&this[2 * (__int16)v3++ + 2] = v6 & 0xFFFFFFF;
          *this = v3;
        }
      }
    }
    else
    {
      *(_DWORD *)this = 0;
    }
  }
  return this;
}

__int16 *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Square(__int16 *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  __int16 *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;

  v1 = *this;
  if ((int)v1 > 64)
    abort();
  v2 = *this;
  v3 = 2 * v2;
  if ((int)v1 < 1)
  {
    v7 = 0;
  }
  else
  {
    v4 = (unsigned __int16)*this;
    v5 = this + 2;
    v6 = *this;
    do
    {
      v5[v4] = *v5;
      ++v5;
      --v6;
    }
    while (v6);
    v7 = 0;
    v8 = 4;
    v9 = &this[2 * v4];
    do
    {
      v10 = 2;
      v11 = v8;
      do
      {
        v7 += *(unsigned int *)&v9[v10] * (unint64_t)*(unsigned int *)((char *)v9 + v11);
        v10 += 2;
        v11 -= 4;
      }
      while (v11);
      *(_DWORD *)&this[2 * v6 + 2] = v7 & 0xFFFFFFF;
      v7 >>= 28;
      ++v6;
      v8 += 4;
    }
    while (v6 != v1);
  }
  if ((int)v3 > (int)v1)
  {
    v12 = (uint64_t)&this[2 * (int)v1 + 4];
    v13 = 1;
    do
    {
      if (v2 < 2 * (int)v1 - 1)
      {
        v14 = v1;
        v15 = (unsigned int *)v12;
        v16 = &this[4 * (int)v1];
        do
        {
          v18 = *(_DWORD *)v16;
          v16 -= 2;
          v17 = v18;
          v19 = *v15++;
          v7 += v19 * (unint64_t)v17;
          --v14;
        }
        while (v13 != v14);
      }
      *(_DWORD *)&this[2 * v2 + 2] = v7 & 0xFFFFFFF;
      v7 >>= 28;
      ++v2;
      ++v13;
      v12 += 4;
    }
    while (v2 != v3);
  }
  *this = v3;
  this[1] *= 2;
  if ((__int16)v3 < 1)
  {
    if (!(2 * (_WORD)v1))
LABEL_22:
      this[1] = 0;
  }
  else
  {
    while (!*(_DWORD *)&this[2 * (unsigned __int16)v3])
    {
      v20 = (__int16)v3;
      LOWORD(v3) = v3 - 1;
      *this = v3;
      if (v20 <= 1)
        goto LABEL_22;
    }
  }
  return this;
}

__int16 *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignPowerUInt16(__int16 *this, unsigned int a2, int a3)
{
  __int16 *v3;
  unsigned int v5;
  int v6;
  unsigned int v7;
  int v8;
  char v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  int v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v3 = this;
  if (a3)
  {
    v5 = a2;
    *(_DWORD *)this = 0;
    v6 = 0;
    if ((a2 & 1) == 0)
    {
      do
      {
        v7 = v5 >> 1;
        v5 = (unsigned __int16)v5 >> 1;
        ++v6;
      }
      while ((v7 & 1) == 0);
    }
    v8 = 0;
    v9 = 64;
    v10 = v5;
    do
    {
      --v9;
      v8 += a3;
      v11 = v10 > 1;
      v10 >>= 1;
    }
    while (v11);
    if (v8 > 3555)
      abort();
    v12 = 1;
    do
    {
      v13 = v12;
      v12 *= 2;
    }
    while (v13 <= a3);
    v14 = v13 >> 2;
    if (v13 >= 4)
    {
      v15 = 0;
      v17 = -1 << v9;
      v16 = v5;
      do
      {
        v18 = v14;
        v16 *= v16;
        if ((v16 & v17) != 0)
          v19 = 1;
        else
          v19 = v5;
        v20 = v19 * v16;
        v21 = ((v16 & v17) != 0) | v15;
        if ((v14 & a3) != 0)
        {
          v16 = v20;
          v15 = v21;
        }
        v14 >>= 1;
      }
      while (v18 >= 2 && !HIDWORD(v16));
    }
    else
    {
      LOBYTE(v15) = 0;
      v16 = v5;
    }
    if (v16)
    {
      v22 = 0;
      do
      {
        *(_DWORD *)&this[2 * v22 + 2] = v16 & 0xFFFFFFF;
        v16 >>= 28;
        ++v22;
      }
      while (v16);
      *this = v22;
    }
    if ((v15 & 1) != 0)
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(this, v5);
    if (v14)
    {
      do
      {
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Square(v3);
        if ((v14 & a3) != 0)
          pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByUInt32(v3, v5);
        v11 = v14 > 1;
        v14 >>= 1;
      }
      while (v11);
    }
    return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v3, v6 * a3);
  }
  else
  {
    *(_QWORD *)this = 0x100000001;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::DivideModuloIntBignum(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2)
{
  int v2;
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *v15;
  const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *v16;

  if (*((__int16 *)this + 1) + *(__int16 *)this >= *((__int16 *)a2 + 1) + *(__int16 *)a2)
  {
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Align(this, a2);
    v6 = *(__int16 *)this;
    v7 = *(__int16 *)a2;
    if (*((__int16 *)this + 1) + v6 <= *((__int16 *)a2 + 1) + v7)
    {
      v2 = 0;
    }
    else
    {
      v2 = 0;
      do
      {
        v8 = *((_DWORD *)this + v6);
        v2 += v8;
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::SubtractTimes(this, a2, v8);
        v6 = *(__int16 *)this;
        v7 = *(__int16 *)a2;
      }
      while (*((__int16 *)this + 1) + v6 > *((__int16 *)a2 + 1) + v7);
    }
    v9 = (unsigned __int16)v6;
    v10 = (unsigned int *)((char *)this + 4 * v6);
    v11 = *v10;
    v12 = *((_DWORD *)a2 + v7);
    if ((unsigned __int16)v7 == 1)
    {
      *v10 = v11 % v12;
      v2 += v11 / v12;
      if ((__int16)v9 < 1)
      {
        if (!v9)
LABEL_19:
          *((_WORD *)this + 1) = 0;
      }
      else
      {
        while (!*((_DWORD *)this + (unsigned __int16)v9))
        {
          v13 = (__int16)v9;
          LOWORD(v9) = v9 - 1;
          *(_WORD *)this = v9;
          if (v13 <= 1)
            goto LABEL_19;
        }
      }
    }
    else
    {
      v14 = v11 / (v12 + 1);
      LOWORD(v2) = v2 + v14;
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::SubtractTimes(this, a2, v14);
      if (v12 + v12 * v14 <= v11
        && (int)pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare((uint64_t)a2, this, v15) <= 0)
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::SubtractBignum(this, a2);
          LOWORD(v2) = v2 + 1;
        }
        while ((int)pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare((uint64_t)a2, this, v16) < 1);
      }
    }
  }
  else
  {
    LOWORD(v2) = 0;
  }
  return (unsigned __int16)v2;
}

void pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::SubtractTimes(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2, int a3)
{
  int v3;
  int v6;
  int v7;
  unsigned int v8;
  int *v9;
  unsigned int *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  int v19;

  v3 = a3;
  if (a3 > 2)
  {
    v6 = *((__int16 *)a2 + 1) - *((__int16 *)this + 1);
    v7 = *(__int16 *)a2;
    if (v7 < 1)
    {
      v8 = 0;
    }
    else
    {
      v8 = 0;
      v9 = (int *)((char *)this + 4 * v6 + 4);
      v10 = (unsigned int *)((char *)a2 + 4);
      v11 = *(__int16 *)a2;
      do
      {
        v12 = *v10++;
        v13 = v12 * (unint64_t)a3 + v8;
        v14 = *v9 - (v13 & 0xFFFFFFF);
        *v9++ = v14 & 0xFFFFFFF;
        v8 = (v13 >> 28) + (v14 >> 31);
        --v11;
      }
      while (v11);
    }
    LODWORD(v15) = v6 + v7;
    v16 = *(__int16 *)this;
    if ((int)v15 >= (int)v16)
    {
LABEL_14:
      if ((int)v16 < 1)
      {
        if (!(_DWORD)v16)
LABEL_19:
          *((_WORD *)this + 1) = 0;
      }
      else
      {
        while (!*((_DWORD *)this + (unsigned __int16)v16))
        {
          v19 = (__int16)v16;
          LOWORD(v16) = v16 - 1;
          *(_WORD *)this = v16;
          if (v19 <= 1)
            goto LABEL_19;
        }
      }
    }
    else
    {
      v15 = (int)v15;
      v17 = (char *)this + 4;
      while (v8)
      {
        v18 = *(_DWORD *)&v17[4 * v15] - v8;
        *(_DWORD *)&v17[4 * v15] = v18 & 0xFFFFFFF;
        v8 = v18 >> 31;
        if (++v15 >= v16)
          goto LABEL_14;
      }
    }
  }
  else if (a3 >= 1)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::SubtractBignum(this, a2);
      --v3;
    }
    while (v3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ToHexString(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, char *a2, int a3)
{
  int v3;
  int v4;
  unsigned int v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  char *v16;
  char v17;
  uint64_t v18;
  unsigned int v20;
  char *v21;
  char v22;

  v3 = *(__int16 *)this;
  if (*(_WORD *)this)
  {
    v4 = 7 * (*((__int16 *)this + 1) + v3) - 7;
    v5 = *((_DWORD *)this + v3);
    if (v5)
    {
      v6 = 0;
      do
      {
        ++v6;
        v7 = v5 > 0xF;
        v5 >>= 4;
      }
      while (v7);
    }
    else
    {
      v6 = 0;
    }
    v8 = v4 + v6;
    if (v4 + v6 < a3)
    {
      v9 = v8 - 1;
      a2[v8] = 0;
      if (*((__int16 *)this + 1) >= 1)
      {
        v10 = 0;
        v11 = &a2[v9 - 6];
        do
        {
          *(_DWORD *)(v11 + 3) = 808464432;
          *(_DWORD *)v11 = 808464432;
          v11 -= 7;
          ++v10;
          v9 -= 7;
        }
        while (v10 < *((__int16 *)this + 1));
      }
      v12 = *(__int16 *)this;
      if (v12 < 2)
      {
        v18 = v12 - 1;
      }
      else
      {
        v13 = 0;
        do
        {
          v14 = 0;
          v15 = *((_DWORD *)this + v13 + 1);
          v16 = &a2[v9];
          do
          {
            if ((v15 & 0xF) >= 0xA)
              v17 = 55;
            else
              v17 = 48;
            *v16-- = v17 + (v15 & 0xF);
            v15 >>= 4;
            ++v14;
          }
          while (v14 != 7);
          v9 -= 7;
          ++v13;
          v18 = *(__int16 *)this - 1;
        }
        while (v13 < v18);
      }
      v20 = *((_DWORD *)this + v18 + 1);
      if (v20)
      {
        v21 = &a2[v9];
        do
        {
          if ((v20 & 0xF) >= 0xA)
            v22 = 55;
          else
            v22 = 48;
          *v21-- = v22 + (v20 & 0xF);
          v7 = v20 > 0xF;
          v20 >>= 4;
        }
        while (v7);
      }
      return 1;
    }
    return 0;
  }
  if (a3 < 2)
    return 0;
  *(_WORD *)a2 = 48;
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::BigitOrZero(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, int a2)
{
  int v2;

  v2 = *((__int16 *)this + 1);
  if (a2 < v2 || v2 + *(__int16 *)this <= a2)
    return 0;
  else
    return *((unsigned int *)this + a2 - v2 + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare(uint64_t this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  BOOL v14;
  unsigned int v15;

  v3 = *(__int16 *)this;
  v4 = *(__int16 *)(this + 2);
  v5 = v4 + v3;
  v6 = *((__int16 *)a2 + 1);
  v7 = v6 + *(__int16 *)a2;
  if ((int)v4 + (int)v3 < (int)v7)
    return 0xFFFFFFFFLL;
  if ((int)v4 + (int)v3 > (int)v7)
    return 1;
  if ((int)v6 >= (int)v4)
    v8 = *(__int16 *)(this + 2);
  else
    v8 = *((__int16 *)a2 + 1);
  v9 = v3 + v4;
  v10 = (unsigned int *)(this + 4 * v3);
  while (v9 > v8)
  {
    v11 = 0;
    if (v9 > v4 && v9 <= v5)
      v11 = *v10;
    v12 = 0;
    if (v9 > v6 && v9 <= v7)
      v12 = *((_DWORD *)a2 + v9 - v6);
    --v10;
    --v9;
    v13 = v11 >= v12;
    v14 = v11 == v12;
    if (v11 > v12)
      v15 = 1;
    else
      v15 = this;
    if (v13)
      this = v15;
    else
      this = 0xFFFFFFFFLL;
    if (!v14)
      return this;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::PlusCompare(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *this, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a2, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a3, const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *a4)
{
  __int16 v4;
  __int16 v5;
  __int16 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int16 v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  __int16 *v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;

  v4 = *(_WORD *)this;
  v5 = *((_WORD *)this + 1);
  do
  {
    v6 = (__int16 *)a2;
    a2 = this;
    v7 = v5;
    v8 = v5 + v4;
    v4 = *v6;
    v9 = v6[1];
    v5 = v6[1];
    v10 = v9 + *v6;
    this = (pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v6;
  }
  while (v8 < v10);
  v11 = *(__int16 *)a3;
  v12 = *((__int16 *)a3 + 1);
  v13 = v12 + v11;
  if (v8 + 1 < (int)v12 + (int)v11)
    return 0xFFFFFFFFLL;
  if (v8 > (int)v13)
    return 1;
  if (v10 <= v7 && v8 < (int)v13)
    return 0xFFFFFFFFLL;
  v15 = *((_WORD *)a2 + 1);
  if (v9 < v7)
    v15 = v6[1];
  if ((int)v12 >= v15)
    LODWORD(v16) = v15;
  else
    LODWORD(v16) = *((__int16 *)a3 + 1);
  if ((int)v13 > (int)v16)
  {
    v17 = 0;
    v18 = v7;
    v19 = v11 + v12;
    v16 = (__int16)v16;
    v20 = (int *)((char *)a3 + 4 * v11);
    v21 = &v6[-2 * v6[1]];
    v22 = (char *)a2 - 4 * v7;
    while (1)
    {
      v23 = 0;
      if (v19 > v18 && v19 <= v8)
        v23 = *(_DWORD *)&v22[4 * v19];
      v24 = 0;
      if (v19 > v9 && v19 <= v10)
        v24 = *(_DWORD *)&v21[2 * v19];
      v25 = 0;
      if (v19 > v12 && v19 <= v13)
        v25 = *v20;
      v26 = v24 + v23;
      v27 = v25 + v17;
      v28 = v25 + v17 - v26;
      if (v27 < v26)
        break;
      if (v28 > 1)
        return 0xFFFFFFFFLL;
      --v19;
      v17 = v28 << 28;
      --v20;
      if (v19 <= v16)
      {
        if (v27 == v26)
          return 0;
        else
          return 0xFFFFFFFFLL;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::PowersOfTenCache::GetCachedPowerForBinaryExponentRange(uint64_t result, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  signed int v4;
  BOOL v5;
  int v6;
  int v7;
  char *v8;
  uint64_t v9;
  int v10;

  v4 = vcvtpd_s64_f64((double)((int)result + 63) * 0.301029996);
  v6 = v4 + 347;
  v5 = v4 < -347;
  v7 = v4 + 354;
  if (!v5)
    v7 = v6;
  v8 = (char *)&unk_20CA54370 + 16 * (v7 >> 3);
  v9 = *((_QWORD *)v8 + 2);
  v10 = *((__int16 *)v8 + 12);
  *a4 = *((__int16 *)v8 + 13);
  *(_QWORD *)a3 = v9;
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::PowersOfTenCache::GetCachedPowerForDecimalExponent(uint64_t result, uint64_t a2, _DWORD *a3)
{
  int v3;
  char *v4;
  uint64_t v5;
  int v6;

  v3 = result + 348;
  if ((int)result < -348)
    v3 = result + 355;
  v4 = (char *)&unk_20CA54370 + 16 * (v3 >> 3);
  v5 = *(_QWORD *)v4;
  v6 = *((__int16 *)v4 + 4);
  LODWORD(v4) = *((__int16 *)v4 + 5);
  *(_QWORD *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  *a3 = (_DWORD)v4;
  return result;
}

int *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::EcmaScriptConverter(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254785080);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254785080))
  {
    dword_254785050 = 9;
    qword_254785058 = (uint64_t)"Infinity";
    unk_254785060 = "NaN";
    byte_254785068 = 101;
    unk_25478506C = xmmword_20CA548E0;
    dword_25478507C = 0;
    __cxa_guard_release(&qword_254785080);
  }
  return &dword_254785050;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::HandleSpecialValues(uint64_t a1, uint64_t a2, double a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL) == 0x7FF0000000000000)
  {
    v4 = *(const char **)(a1 + 8);
    if (v4)
    {
      if (a3 < 0.0)
      {
        v5 = *(int *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = v5 + 1;
        *(_BYTE *)(*(_QWORD *)a2 + v5) = 45;
        v4 = *(const char **)(a1 + 8);
      }
      goto LABEL_8;
    }
    return 0;
  }
  v6 = 0;
  if ((~*(_QWORD *)&a3 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&a3 & 0xFFFFFFFFFFFFFLL) != 0)
  {
    v4 = *(const char **)(a1 + 16);
    if (v4)
    {
LABEL_8:
      v7 = strlen(v4);
      memmove((void *)(*(_QWORD *)a2 + *(int *)(a2 + 16)), v4, v7);
      *(_DWORD *)(a2 + 16) += v7;
      return 1;
    }
    return 0;
  }
  return v6;
}

void *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateExponentialRepresentation(uint64_t a1, char *a2, int a3, unsigned int a4, uint64_t a5)
{
  char v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  void *result;
  _BYTE v25[5];
  char v26;

  v8 = *a2;
  v9 = *(int *)(a5 + 16);
  *(_DWORD *)(a5 + 16) = v9 + 1;
  *(_BYTE *)(*(_QWORD *)a5 + v9) = v8;
  v10 = a3 - 1;
  if (a3 == 1)
  {
    v11 = *(_DWORD *)(a5 + 16);
    if ((*(_BYTE *)a1 & 0x20) != 0)
    {
      *(_DWORD *)(a5 + 16) = v11 + 1;
      *(_BYTE *)(*(_QWORD *)a5 + v11) = 46;
      v12 = *(_DWORD *)(a5 + 16);
      v11 = v12;
      if ((*(_BYTE *)a1 & 0x40) != 0)
      {
        *(_DWORD *)(a5 + 16) = v12 + 1;
        *(_BYTE *)(*(_QWORD *)a5 + v12) = 48;
        v11 = *(_DWORD *)(a5 + 16);
      }
    }
  }
  else
  {
    v13 = *(int *)(a5 + 16);
    *(_DWORD *)(a5 + 16) = v13 + 1;
    *(_BYTE *)(*(_QWORD *)a5 + v13) = 46;
    memmove((void *)(*(_QWORD *)a5 + *(int *)(a5 + 16)), a2 + 1, v10);
    v11 = *(_DWORD *)(a5 + 16) + v10;
  }
  v14 = *(_BYTE *)(a1 + 24);
  *(_DWORD *)(a5 + 16) = v11 + 1;
  *(_BYTE *)(*(_QWORD *)a5 + v11) = v14;
  if ((a4 & 0x80000000) != 0)
  {
    v17 = *(int *)(a5 + 16);
    *(_DWORD *)(a5 + 16) = v17 + 1;
    *(_BYTE *)(*(_QWORD *)a5 + v17) = 45;
    a4 = -a4;
    v26 = 0;
LABEL_12:
    v18 = 4;
    do
    {
      v25[v18--] = (a4 % 0xA) | 0x30;
      v19 = a4 > 9;
      a4 /= 0xAu;
    }
    while (v19);
    v16 = v18 + 1;
    goto LABEL_15;
  }
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v15 = *(int *)(a5 + 16);
    *(_DWORD *)(a5 + 16) = v15 + 1;
    *(_BYTE *)(*(_QWORD *)a5 + v15) = 43;
  }
  v26 = 0;
  if (a4)
    goto LABEL_12;
  v25[4] = 48;
  v16 = 4;
LABEL_15:
  if (*(int *)(a1 + 44) >= 5)
    v20 = 5;
  else
    v20 = *(_DWORD *)(a1 + 44);
  v21 = 5 - v16;
  if (5 - v16 < v20)
  {
    memset(&v25[v16 - 1 - (v16 + v20 - 6)], 48, (v16 + v20 - 6) + 1);
    v22 = 5 - v16;
    v23 = 6 - v16;
    if (v20 > v23)
      LODWORD(v23) = v20;
    v16 = 5 - v23;
    do
      ++v22;
    while (v22 < v20);
    v21 = v23;
  }
  result = memcpy((void *)(*(_QWORD *)a5 + *(int *)(a5 + 16)), &v25[v16], v21);
  *(_DWORD *)(a5 + 16) += v21;
  return result;
}

int *pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateDecimalRepresentation(int *result, char *__src, int a3, size_t __len, int a5, uint64_t a6)
{
  int v8;
  int *v11;
  void *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v8 = __len;
  v11 = result;
  if ((int)__len <= 0)
  {
    v18 = *(int *)(a6 + 16);
    *(_DWORD *)(a6 + 16) = v18 + 1;
    *(_BYTE *)(*(_QWORD *)a6 + v18) = 48;
    if (a5 >= 1)
    {
      v19 = *(int *)(a6 + 16);
      *(_DWORD *)(a6 + 16) = v19 + 1;
      *(_BYTE *)(*(_QWORD *)a6 + v19) = 46;
      if ((_DWORD)__len)
      {
        v20 = __len;
        do
        {
          v21 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v21 + 1;
          *(_BYTE *)(*(_QWORD *)a6 + v21) = 48;
        }
        while (!__CFADD__(v20++, 1));
      }
      result = (int *)memmove((void *)(*(_QWORD *)a6 + *(int *)(a6 + 16)), __src, a3);
      *(_DWORD *)(a6 + 16) += a3;
      v23 = v8 - a3 + a5;
      if (v23 >= 1)
      {
        do
        {
          v24 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v24 + 1;
          *(_BYTE *)(*(_QWORD *)a6 + v24) = 48;
          --v23;
        }
        while (v23);
      }
    }
  }
  else
  {
    v12 = (void *)(*(_QWORD *)a6 + *(int *)(a6 + 16));
    v13 = __len - a3;
    if ((int)__len >= a3)
    {
      result = (int *)memmove(v12, __src, a3);
      *(_DWORD *)(a6 + 16) += a3;
      if (v13 >= 1)
      {
        do
        {
          v25 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v25 + 1;
          *(_BYTE *)(*(_QWORD *)a6 + v25) = 48;
          --v13;
        }
        while (v13);
      }
      if (a5 >= 1)
      {
        v26 = *(int *)(a6 + 16);
        *(_DWORD *)(a6 + 16) = v26 + 1;
        *(_BYTE *)(*(_QWORD *)a6 + v26) = 46;
        v27 = a5;
        do
        {
          v28 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v28 + 1;
          *(_BYTE *)(*(_QWORD *)a6 + v28) = 48;
          --v27;
        }
        while (v27);
      }
    }
    else
    {
      memmove(v12, __src, __len);
      v14 = *(int *)(a6 + 16) + (uint64_t)v8;
      *(_DWORD *)(a6 + 16) = v14 + 1;
      *(_BYTE *)(*(_QWORD *)a6 + v14) = 46;
      v15 = a3 - v8;
      result = (int *)memmove((void *)(*(_QWORD *)a6 + *(int *)(a6 + 16)), &__src[v8], v15);
      *(_DWORD *)(a6 + 16) += v15;
      v16 = a5 - v15;
      if (a5 - v15 >= 1)
      {
        do
        {
          v17 = *(int *)(a6 + 16);
          *(_DWORD *)(a6 + 16) = v17 + 1;
          *(_BYTE *)(*(_QWORD *)a6 + v17) = 48;
          --v16;
        }
        while (v16);
      }
    }
  }
  if (!a5)
  {
    v29 = *v11;
    if ((*v11 & 2) != 0)
    {
      v30 = *(int *)(a6 + 16);
      *(_DWORD *)(a6 + 16) = v30 + 1;
      *(_BYTE *)(*(_QWORD *)a6 + v30) = 46;
      v29 = *v11;
    }
    if ((v29 & 4) != 0)
    {
      v31 = *(int *)(a6 + 16);
      *(_DWORD *)(a6 + 16) = v31 + 1;
      *(_BYTE *)(*(_QWORD *)a6 + v31) = 48;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToShortestIeeeNumber(int *a1, uint64_t a2, uint64_t a3, double a4)
{
  _BOOL4 v8;
  uint64_t v9;
  int v10;
  BOOL v11;
  int __len;
  char __len_6[18];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) == 0)
    return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::HandleSpecialValues((uint64_t)a1, a2, a4);
  __len = 0;
  v11 = 0;
  v10 = 0;
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::DoubleToAscii(a3, 0, __len_6, 0x12u, &v11, &v10, &__len, a4);
  v8 = (*(_BYTE *)a1 & 8) == 0 || a4 != 0.0;
  if (v11 && v8)
  {
    v9 = *(int *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = v9 + 1;
    *(_BYTE *)(*(_QWORD *)a2 + v9) = 45;
  }
  if (a1[7] < __len && __len <= a1[8])
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateDecimalRepresentation(a1, __len_6, v10, __len, (v10 - __len) & ~((v10 - __len) >> 31), a2);
  else
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateExponentialRepresentation((uint64_t)a1, __len_6, v10, __len - 1, a2);
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::DoubleToAscii(uint64_t result, int a2, _BYTE *a3, unsigned int a4, BOOL *a5, int *a6, int *a7, double a8)
{
  int v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  double v15;
  unsigned int v16;

  v11 = a2;
  v12 = result;
  if (a8 >= 0.0)
    v13 = a8;
  else
    v13 = -a8;
  *a5 = a8 < 0.0;
  if ((_DWORD)result != 3 || a2)
  {
    if (v13 == 0.0)
    {
      *(_WORD *)a3 = 48;
      *a6 = 1;
      *a7 = 1;
    }
    else
    {
      v14 = a4;
      switch((int)result)
      {
        case 0:
          v15 = v13;
          v16 = 0;
          goto LABEL_14;
        case 1:
          v15 = v13;
          v16 = 1;
LABEL_14:
          a2 = 0;
          goto LABEL_16;
        case 2:
          result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::FastFixedDtoa(a2, a3, a4, a6, a7, v13);
          if ((result & 1) != 0)
            return result;
          goto LABEL_17;
        case 3:
          v15 = v13;
          v16 = 2;
LABEL_16:
          result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::FastDtoa(v16, a2, (uint64_t)a3, a4, a6, a7, v15);
          if ((result & 1) == 0)
          {
LABEL_17:
            result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::BignumDtoa(v12, v11, a3, v14, a6, a7, v13);
            a3[*a6] = 0;
          }
          break;
        default:
          abort();
      }
    }
  }
  else
  {
    *a3 = 0;
    *a6 = 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToFixed(int *a1, int a2, uint64_t a3, double a4)
{
  uint64_t result;
  _BOOL4 v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  unsigned int __len;
  char __len_7[161];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) == 0)
    return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::HandleSpecialValues((uint64_t)a1, a3, a4);
  if (a2 > 100)
    return 0;
  result = 0;
  if (a4 < 1.0e60 && a4 > -1.0e60)
  {
    __len = 0;
    v12 = 0;
    v11 = 0;
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::DoubleToAscii(2, a2, __len_7, 0xA1u, &v12, &v11, (int *)&__len, a4);
    v9 = (*(_BYTE *)a1 & 8) == 0 || a4 != 0.0;
    if (v12 && v9)
    {
      v10 = *(int *)(a3 + 16);
      *(_DWORD *)(a3 + 16) = v10 + 1;
      *(_BYTE *)(*(_QWORD *)a3 + v10) = 45;
    }
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateDecimalRepresentation(a1, __len_7, v11, __len, a2, a3);
    return 1;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToExponential(_BYTE *a1, int a2, uint64_t a3, double a4)
{
  int v9;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  int v14;
  char v15[122];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) == 0)
    return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::HandleSpecialValues((uint64_t)a1, a3, a4);
  if ((a2 - 121) < 0xFFFFFF86)
    return 0;
  v14 = 0;
  v13 = 0;
  v12 = 0;
  if (a2 == -1)
  {
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::DoubleToAscii(0, 0, v15, 0x7Au, &v13, &v12, &v14, a4);
  }
  else
  {
    v9 = a2 + 1;
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::DoubleToAscii(3, a2 + 1, v15, 0x7Au, &v13, &v12, &v14, a4);
    if (a2 >= v12)
      memset(&v15[v12], 48, (a2 - v12) + 1);
    v12 = v9;
  }
  v10 = (*a1 & 8) == 0 || a4 != 0.0;
  if (v13 && v10)
  {
    v11 = *(int *)(a3 + 16);
    *(_DWORD *)(a3 + 16) = v11 + 1;
    *(_BYTE *)(*(_QWORD *)a3 + v11) = 45;
  }
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateExponentialRepresentation((uint64_t)a1, v15, v12, v14 - 1, a3);
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::ToPrecision(int *a1, int a2, uint64_t a3, double a4)
{
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  int v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  _BYTE __len[7];
  char __len_7[121];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if ((~*(_QWORD *)&a4 & 0x7FF0000000000000) == 0)
    return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::HandleSpecialValues((uint64_t)a1, a3, a4);
  v8 = a2;
  if ((a2 - 121) < 0xFFFFFF88)
    return 0;
  *(_DWORD *)__len = 0;
  v22 = 0;
  v21 = 0;
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::DoubleToAscii(3, a2, __len_7, 0x79u, &v22, &v21, (int *)__len, a4);
  v9 = (*(_BYTE *)a1 & 8) == 0 || a4 != 0.0;
  if (v22 && v9)
  {
    v10 = *(int *)(a3 + 16);
    *(_DWORD *)(a3 + 16) = v10 + 1;
    *(_BYTE *)(*(_QWORD *)a3 + v10) = 45;
  }
  v11 = *a1;
  if (1 - *(_DWORD *)__len > a1[9])
  {
    if ((v11 & 0x10) == 0)
    {
      v12 = v21;
LABEL_35:
      v20 = *(_DWORD *)__len - 1;
      if (v12 < v8)
        memset(&__len_7[v12], 48, (v8 + ~v12) + 1);
      pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateExponentialRepresentation((uint64_t)a1, __len_7, v8, v20, a3);
      return 1;
    }
    v15 = 1;
    v16 = 1;
    goto LABEL_23;
  }
  v13 = *(_DWORD *)__len - v8 + ((v11 >> 2) & 1);
  v14 = a1[10];
  v15 = v13 > v14;
  if ((v11 & 0x10) != 0)
  {
    if (*(int *)__len <= 1)
      v16 = 1;
    else
      v16 = *(_DWORD *)__len;
    if (v13 > v14)
      v16 = 1;
LABEL_23:
    v12 = v21;
    if (v21 <= v16)
    {
      v16 = v21;
    }
    else
    {
      v17 = v21;
      if (__len_7[v21 - 1] == 48)
      {
        while (1)
        {
          v18 = v17 - 1;
          if (v17 - 1 <= v16)
            break;
          v19 = __len[v17-- + 5];
          if (v19 != 48)
          {
            v21 = v18;
            v12 = v18;
            goto LABEL_30;
          }
        }
        v12 = v17 - 1;
        v21 = v17 - 1;
      }
      else
      {
        v18 = v21;
LABEL_30:
        v16 = v18;
      }
    }
    if (v16 < v8)
      v8 = v16;
    if (v15)
      goto LABEL_35;
    goto LABEL_16;
  }
  v12 = v21;
  if (v13 > v14)
    goto LABEL_35;
LABEL_16:
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::DoubleToStringConverter::CreateDecimalRepresentation(a1, __len_7, v12, *(unsigned int *)__len, (v8 - *(_DWORD *)__len) & ~((v8 - *(_DWORD *)__len) >> 31), a3);
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::pxr_double_conversion::FastDtoa(unsigned int a1, int a2, uint64_t a3, uint64_t a4, int *a5, _DWORD *a6, double a7)
{
  uint64_t v13;
  int v14;
  int v15;
  float v16;
  uint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  char v22;
  int v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL8 result;
  int v51;
  unint64_t v52;
  unsigned int v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  double v57;
  int v58;
  uint64_t v59;
  int v60;
  double v61;
  int v62;

  if (a1 >= 2)
  {
    if (a1 != 2)
      abort();
    v61 = a7;
    v18 = sub_20BEA2B98(&v61);
    v20 = v19;
    v61 = 0.0;
    v62 = 0;
    LODWORD(v59) = 0;
    pxrInternal__aapl__pxrReserved__::pxr_double_conversion::PowersOfTenCache::GetCachedPowerForBinaryExponentRange((-124 - v19), (-96 - v19), (uint64_t)&v61, &v59);
    v21 = ((LODWORD(v61) * (unint64_t)HIDWORD(v18)) >> 32)
        + HIDWORD(v61) * (unint64_t)HIDWORD(v18)
        + ((HIDWORD(v61) * (unint64_t)v18) >> 32)
        + ((((LODWORD(v61) * (unint64_t)v18) >> 32)
          + (LODWORD(v61) * HIDWORD(v18))
          + (HIDWORD(v61) * v18)
          + 0x80000000) >> 32);
    v22 = -64 - (v20 + v62);
    v23 = -(v20 + v62);
    v24 = v21 >> -(char)(v20 + v62);
    v25 = 1233 * (v20 + v62 + 64) + 80145;
    v26 = v25 >> 12;
    v27 = ((uint64_t)v25 >> 12) + 1;
    if (dword_20CA54908[v27] > v24)
      LODWORD(v27) = v26;
    v28 = dword_20CA54908[(int)v27];
    v29 = 1 << v23;
    v30 = (1 << v23) - 1;
    v31 = v21 & v30;
    LODWORD(v57) = v27;
    *a5 = 0;
    if ((int)v27 < 1)
    {
      v32 = 0;
      if (a2)
      {
LABEL_30:
        if (a2 < 1 || v31 < 2)
          return 0;
        v52 = 1;
        do
        {
          v53 = a2;
          v52 *= 10;
          *(_BYTE *)(a3 + v32) = ((10 * v31) >> v22) + 48;
          v32 = *a5 + 1;
          *a5 = v32;
          --a2;
          v31 = v30 & (10 * v31);
          LODWORD(v27) = v27 - 1;
        }
        while (v53 >= 2 && v31 > v52);
        LODWORD(v57) = v27;
        if (a2)
          return 0;
        v54 = (_BYTE *)a3;
        v55 = a4;
LABEL_39:
        if ((sub_20BEA2DEC(v54, v55, v32, v31, v29, v52, &v57) & 1) != 0)
        {
          v51 = LODWORD(v57) - v59;
          goto LABEL_41;
        }
        return 0;
      }
    }
    else
    {
      v32 = 0;
      while (1)
      {
        *(_BYTE *)(a3 + v32) = v24 / v28 + 48;
        v32 = *a5 + 1;
        *a5 = v32;
        LODWORD(v24) = v24 % v28;
        LODWORD(v27) = v27 - 1;
        if (!--a2)
          break;
        v28 /= 0xAu;
        if ((v27 + 1) <= 1)
        {
          LODWORD(v57) = v27;
          goto LABEL_30;
        }
      }
      LODWORD(v57) = v27;
    }
    v31 += (unint64_t)v24 << v22;
    v29 = (unint64_t)v28 << v22;
    v54 = (_BYTE *)a3;
    v55 = a4;
    v52 = 1;
    goto LABEL_39;
  }
  v61 = a7;
  v13 = sub_20BEA2B98(&v61);
  v15 = v14;
  v61 = 0.0;
  v62 = 0;
  v59 = 0;
  v60 = 0;
  if (a1)
  {
    v16 = a7;
    *(float *)&v57 = v16;
    sub_20BEA2C7C((int *)&v57, (uint64_t)&v61, (uint64_t)&v59);
  }
  else
  {
    v57 = a7;
    sub_20BEA2BDC(&v57, (uint64_t)&v61, (uint64_t)&v59);
  }
  v57 = 0.0;
  v58 = 0;
  v56 = 0;
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::PowersOfTenCache::GetCachedPowerForBinaryExponentRange((-124 - v15), (-96 - v15), (uint64_t)&v57, &v56);
  v33 = ((LODWORD(v57) * (unint64_t)HIDWORD(v13)) >> 32)
      + HIDWORD(v57) * (unint64_t)HIDWORD(v13)
      + ((HIDWORD(v57) * (unint64_t)v13) >> 32)
      + ((((LODWORD(v57) * (unint64_t)v13) >> 32)
        + (LODWORD(v57) * HIDWORD(v13))
        + (HIDWORD(v57) * v13)
        + 0x80000000) >> 32);
  v34 = ((HIDWORD(v59) * (unint64_t)LODWORD(v57)) >> 32)
      + HIDWORD(v59) * (unint64_t)HIDWORD(v57)
      + ((v59 * (unint64_t)HIDWORD(v57)) >> 32)
      + ((((v59 * (unint64_t)LODWORD(v57)) >> 32)
        + (HIDWORD(v59) * LODWORD(v57))
        + (v59 * HIDWORD(v57))
        + 0x80000000) >> 32);
  v35 = v34 + 1;
  v36 = v34
      - (((HIDWORD(v61) * (unint64_t)LODWORD(v57)) >> 32)
       + HIDWORD(v61) * (unint64_t)HIDWORD(v57)
       + ((LODWORD(v61) * (unint64_t)HIDWORD(v57)) >> 32)
       + ((((LODWORD(v61) * (unint64_t)LODWORD(v57)) >> 32)
         + (HIDWORD(v61) * LODWORD(v57))
         + (LODWORD(v61) * HIDWORD(v57))
         + 0x80000000) >> 32))
      + 2;
  v37 = -64 - (v15 + v58);
  v38 = 1 << -(char)(v15 + v58);
  v39 = v35 >> -(char)(v15 + v58);
  v40 = v35 & (v38 - 1);
  v41 = 1233 * (v15 + v58 + 64) + 80145;
  v42 = v41 >> 12;
  v43 = ((uint64_t)v41 >> 12) + 1;
  if (dword_20CA54908[v43] <= v39)
    v44 = v43;
  else
    v44 = v42;
  v45 = dword_20CA54908[v44];
  *a5 = 0;
  if (v44 >= 1)
  {
    v46 = 0;
    v47 = v44 + 1;
    while (1)
    {
      *(_BYTE *)(a3 + v46) = v39 / v45 + 48;
      v46 = *a5 + 1;
      *a5 = v46;
      v39 = v39 % v45;
      if ((v39 << v37) + v40 < v36)
        break;
      v45 /= 0xAu;
      if (--v47 <= 1)
      {
        v44 = 0;
        goto LABEL_23;
      }
    }
    if (sub_20BEA2D1C(a3, a4, v46, v35 - v33, v36, (v39 << v37) + v40, (unint64_t)v45 << v37, 1))
    {
      v51 = v47 - v56 - 2;
      goto LABEL_41;
    }
    return 0;
  }
  v46 = 0;
LABEL_23:
  v48 = 1;
  do
  {
    v48 *= 10;
    v49 = 5 * v36;
    v36 *= 10;
    *(_BYTE *)(a3 + v46) = ((10 * v40) >> v37) + 48;
    v46 = *a5 + 1;
    *a5 = v46;
    v40 = (v38 - 1) & (10 * v40);
    --v44;
  }
  while (v40 >= 2 * v49);
  result = sub_20BEA2D1C(a3, a4, v46, v48 * (v35 - v33), v36, v40, v38, v48);
  if (result)
  {
    v51 = v44 - v56;
LABEL_41:
    *a6 = *a5 + v51;
    *(_BYTE *)(a3 + *a5) = 0;
    return 1;
  }
  return result;
}

uint64_t sub_20BEA2B98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = (*a1 & 0xFFFFFFFFFFFFFLL) << (__clz(*a1 & 0xFFFFFFFFFFFFFLL) - 11);
  if ((*a1 & 0x7FF0000000000000) != 0)
    v2 = *a1 | 0x10000000000000;
  else
    v2 = v1;
  return v2 << 11;
}

_QWORD *sub_20BEA2BDC(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  char v7;
  int v8;
  unint64_t v9;
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  char v13;
  BOOL v14;
  uint64_t v15;
  char v16;

  if ((*result & 0x7FF0000000000000) != 0)
    v3 = *result & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  else
    v3 = *result & 0xFFFFFFFFFFFFFLL;
  v4 = 2 * v3;
  v5 = (2 * (v3 & 0x1FFFFFFFFFFFFFLL)) | 1;
  if ((*result & 0x7FF0000000000000) != 0)
    v6 = ((*result >> 52) & 0x7FF) - 1075;
  else
    v6 = -1074;
  v7 = v6 - 1;
  v8 = v6 - 1;
  do
  {
    v9 = v5 >> 44;
    v5 <<= 10;
    v8 -= 10;
  }
  while (!v9);
  for (; (v5 & 0x8000000000000000) == 0; --v8)
    v5 *= 2;
  v10 = (*result & 0xFFFFFFFFFFFFFLL) == 0;
  v11 = (*result & 0x7FE0000000000000) != 0;
  v12 = 4 * v3;
  v13 = v6 - 2;
  v14 = !v10 || !v11;
  if (v10 && v11)
    v15 = v12;
  else
    v15 = v4;
  if (v14)
    v16 = v7;
  else
    v16 = v13;
  *(_QWORD *)a3 = v5;
  *(_DWORD *)(a3 + 8) = v8;
  *(_QWORD *)a2 = (v15 - 1) << (v16 - v8);
  *(_DWORD *)(a2 + 8) = v8;
  return result;
}

int *sub_20BEA2C7C(int *result, uint64_t a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  int v10;
  unint64_t v11;
  _BOOL4 v12;
  _BOOL4 v13;
  uint64_t v14;
  char v15;
  BOOL v16;
  uint64_t v17;
  char v18;

  v3 = *result;
  v4 = *result & 0x7FFFFF;
  LODWORD(v5) = v4 | 0x800000;
  if ((*result & 0x7F800000) != 0)
    v5 = v5;
  else
    v5 = v4;
  if ((v3 & 0x7F800000) != 0)
    v6 = (*result >> 23) - 150;
  else
    v6 = -149;
  v7 = 2 * v5;
  v8 = (2 * (v5 & 0xFFFFFF)) | 1;
  v9 = v6 - 1;
  v10 = v6 - 1;
  do
  {
    v11 = v8 >> 44;
    v8 <<= 10;
    v10 -= 10;
  }
  while (!v11);
  for (; (v8 & 0x8000000000000000) == 0; --v10)
    v8 *= 2;
  v12 = v4 == 0;
  v13 = (v3 & 0x7F000000) != 0;
  v14 = 4 * v5;
  v15 = v6 - 2;
  v16 = !v12 || !v13;
  if (v12 && v13)
    v17 = v14;
  else
    v17 = v7;
  if (v16)
    v18 = v9;
  else
    v18 = v15;
  *(_QWORD *)a3 = v8;
  *(_DWORD *)(a3 + 8) = v10;
  *(_QWORD *)a2 = (v17 - 1) << (v18 - v10);
  *(_DWORD *)(a2 + 8) = v10;
  return result;
}

BOOL sub_20BEA2D1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;

  v8 = a4 - a8;
  v9 = a8 + a4;
  v10 = a5 - a6 < a7;
  if (a4 - a8 > a6 && a5 - a6 >= a7)
  {
    v11 = -(uint64_t)a6;
    v12 = a5 - a7;
    while (1)
    {
      v13 = a6 + a7;
      if (a6 + a7 >= v8 && v8 + v11 < a8 - a4 + a7 + a6)
        break;
      --*(_BYTE *)(a1 + a3 - 1);
      v14 = v12 + v11;
      v10 = v12 + v11 < a7;
      if (v13 < v8)
      {
        v11 -= a7;
        a6 += a7;
        if (v14 >= a7)
          continue;
      }
      goto LABEL_11;
    }
    v10 = 0;
  }
  v13 = a6;
LABEL_11:
  v15 = v9 - v13;
  if (v9 > v13 && !v10)
  {
    v16 = v13 + a7 >= v9;
    v17 = v13 + a7 - v9;
    if (!v16 || v15 > v17)
      return 0;
  }
  return v13 >= 2 * a8 && v13 <= a5 - 4 * a8;
}

uint64_t sub_20BEA2DEC(_BYTE *a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, unint64_t a6, _DWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  _BYTE *v11;

  v7 = 0;
  if (a5 > a6 && a5 - a6 > a6)
  {
    if (a5 - a4 <= a4 || a5 - 2 * a4 < 2 * a6)
    {
      if (a4 <= a6 || a5 - (a4 - a6) > a4 - a6)
        return 0;
      v8 = a3 - 1;
      ++a1[v8];
      if (a3 >= 2)
      {
        v9 = &a1[v8];
        v10 = *v9;
        v11 = &a1[a3 - 2];
        do
        {
          if (v10 != 58)
            break;
          *v9-- = 48;
          v10 = *v11 + 1;
          *v11-- = v10;
          --a3;
        }
        while (a3 > 1);
      }
      if (*a1 == 58)
      {
        *a1 = 49;
        ++*a7;
      }
    }
    return 1;
  }
  return v7;
}

BOOL pxrInternal__aapl__pxrReserved__::pxr_double_conversion::FastFixedDtoa(int a1, _BYTE *a2, uint64_t a3, int *a4, int *a5, double a6)
{
  unint64_t v7;
  unsigned int v8;
  _BOOL8 v10;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _BYTE *v23;
  unsigned int i;
  unsigned int v25;
  _BYTE *v26;
  unsigned int j;
  unsigned int v28;
  _BYTE *v29;
  unsigned int k;
  int v31;
  unint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  unint64_t v38;
  unint64_t v39;

  if ((*(_QWORD *)&a6 & 0x7FF0000000000000) != 0)
    v7 = *(_QWORD *)&a6 & 0xFFFFFFFFFFFFFLL | 0x10000000000000;
  else
    v7 = *(_QWORD *)&a6 & 0xFFFFFFFFFFFFFLL;
  if ((*(_QWORD *)&a6 & 0x7FF0000000000000) != 0)
    v8 = ((*(_QWORD *)&a6 >> 52) & 0x7FF) - 1075;
  else
    v8 = -1074;
  v10 = a1 < 21 && (int)v8 < 21;
  if (!v10)
    return v10;
  *a4 = 0;
  if ((int)v8 >= 12)
  {
    v15 = 0xB1A2BC2EC5 << (17 - v8);
    v16 = v7 / v15;
    v17 = (v7 % v15) << v8;
    v18 = v7 << (v8 - 17);
    v19 = v8 >= 0x12;
    if (v8 >= 0x12)
      v20 = (v18 % 0xB1A2BC2EC5) << 17;
    else
      v20 = v17;
    if (v19)
      v21 = v18 / 0xB1A2BC2EC5;
    else
      v21 = v16;
    sub_20BEA327C(v21, (uint64_t)a2, a3, a4);
    v22 = v20 / 0x5AF3107A4000;
    v23 = a2 + 2;
    for (i = 4; i > 1; --i)
    {
      v23[*a4] = (v22 % 0xA) | 0x30;
      --v23;
      LODWORD(v22) = v22 / 0xA;
    }
    v25 = v20 / 0x989680 % 0x989680;
    *a4 += 3;
    v26 = a2 + 6;
    for (j = 8; j > 1; --j)
    {
      v26[*a4] = (v25 % 0xA) | 0x30;
      --v26;
      v25 /= 0xAu;
    }
    v28 = v20 % 0x989680;
    *a4 += 7;
    v29 = a2 + 6;
    for (k = 8; k > 1; --k)
    {
      v29[*a4] = (v28 % 0xA) | 0x30;
      --v29;
      v28 /= 0xAu;
    }
    v31 = *a4 + 7;
    *a4 = v31;
    goto LABEL_30;
  }
  if ((v8 & 0x80000000) != 0)
  {
    if (v8 < 0xFFFFFFCC)
    {
      if (v8 <= 0xFFFFFF7F)
      {
        *a2 = 0;
        *a4 = 0;
        v31 = -a1;
        goto LABEL_30;
      }
      *a5 = 0;
    }
    else
    {
      v38 = v7 >> -(char)v8;
      v39 = v7 - (v38 << -(char)v8);
      if (HIDWORD(v38))
        sub_20BEA330C(v7 >> -(char)v8, (uint64_t)a2, a3, a4);
      else
        sub_20BEA327C(v7 >> -(char)v8, (uint64_t)a2, a3, a4);
      *a5 = *a4;
      v7 = v39;
    }
    sub_20BEA34A0(v7, v8, a1, a2, a3, (unsigned int *)a4, a5);
    goto LABEL_31;
  }
  sub_20BEA330C(v7 << v8, (uint64_t)a2, a3, a4);
  v31 = *a4;
LABEL_30:
  *a5 = v31;
LABEL_31:
  v32 = *a4;
  if ((int)v32 >= 1)
  {
    if (a2[v32 - 1] == 48)
    {
      do
      {
        *a4 = v32 - 1;
        v33 = v32 - 1;
        if (v32 <= 1)
        {
          LODWORD(v32) = v32 - 1;
          goto LABEL_52;
        }
        v34 = a2[(v32-- - 2)];
      }
      while (v34 == 48);
      LODWORD(v32) = v33;
      if (v33 > 0)
        goto LABEL_38;
      LODWORD(v32) = v33;
    }
    else
    {
      v33 = *a4;
LABEL_38:
      v35 = 0;
      while (a2[v35] == 48)
      {
        if (v33 == ++v35)
        {
          LODWORD(v35) = v32;
          break;
        }
      }
      if ((_DWORD)v35)
      {
        if ((int)v35 < (int)v32)
        {
          v36 = (int)v35;
          v37 = a2;
          do
            *v37++ = a2[v36++];
          while (v36 < *a4);
          LODWORD(v32) = *a4;
        }
        *a4 = v32 - v35;
        *a5 -= v35;
        LODWORD(v32) = *a4;
      }
    }
  }
LABEL_52:
  a2[(int)v32] = 0;
  if (!*a4)
    *a5 = -a1;
  return v10;
}

unint64_t sub_20BEA327C(unint64_t result, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  char v10;

  if ((_DWORD)result)
  {
    v4 = 0;
    do
    {
      *(_BYTE *)(a2 + *a4 + v4++) = (result % 0xA) | 0x30;
      v5 = result > 9;
      result = result / 0xAuLL;
    }
    while (v5);
  }
  else
  {
    LODWORD(v4) = 0;
  }
  v6 = *a4;
  v7 = v6 + v4;
  v8 = v6 + v4 - 1;
  if ((int)v6 < v8)
  {
    v9 = v8;
    do
    {
      v10 = *(_BYTE *)(a2 + v6);
      *(_BYTE *)(a2 + v6) = *(_BYTE *)(a2 + v9);
      *(_BYTE *)(a2 + v9) = v10;
      ++v6;
      --v9;
    }
    while (v6 < v9);
    v7 = *a4 + v4;
  }
  *a4 = v7;
  return result;
}

unint64_t sub_20BEA330C(unint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t result;
  uint64_t v10;
  unsigned int i;
  uint64_t v12;
  unsigned int j;
  uint64_t v14;
  unsigned int k;

  v6 = a1 % 0x989680;
  v7 = (a1 / 0x989680)
     - 10000000 * ((a1 / 0x989680 * (unsigned __int128)0x1AD7F29ABCBuLL) >> 64);
  v8 = a1 / 0x5AF3107A4000;
  if ((_DWORD)v8)
  {
    result = sub_20BEA327C(v8, a2, a3, a4);
    v10 = a2 + 6;
    for (i = 8; i > 1; --i)
    {
      *(_BYTE *)(v10 + *a4) = (v7 % 0xA) | 0x30;
      --v10;
      LODWORD(v7) = v7 / 0xA;
    }
    *a4 += 7;
    v12 = a2 + 6;
    for (j = 8; j > 1; --j)
    {
      *(_BYTE *)(v12 + *a4) = (v6 % 0xA) | 0x30;
      --v12;
      LODWORD(v6) = v6 / 0xA;
    }
LABEL_10:
    *a4 += 7;
    return result;
  }
  if ((_DWORD)v7)
  {
    result = sub_20BEA327C(v7, a2, a3, a4);
    v14 = a2 + 6;
    for (k = 8; k > 1; --k)
    {
      *(_BYTE *)(v14 + *a4) = (v6 % 0xA) | 0x30;
      --v14;
      LODWORD(v6) = v6 / 0xA;
    }
    goto LABEL_10;
  }
  return sub_20BEA327C(v6, a2, a3, a4);
}

unint64_t sub_20BEA34A0(unint64_t result, int a2, int a3, _BYTE *a4, uint64_t a5, unsigned int *a6, _DWORD *a7)
{
  int v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  char v23;
  unint64_t v24;
  char v25;
  char v26;
  unint64_t v27;
  unint64_t v28;

  v11 = a3;
  if (a2 < -64)
  {
    v27 = result;
    v28 = 0;
    result = (unint64_t)sub_20BEA371C((uint64_t *)&v27, -64 - a2);
    v14 = v27;
    v15 = v28;
    if (v11 < 1)
    {
      v22 = 128;
    }
    else
    {
      v16 = 0;
      v17 = 128;
      while (v14 | v15)
      {
        v18 = 5 * v15;
        v19 = 5 * HIDWORD(v15) + HIDWORD(v18);
        v20 = v18 | ((unint64_t)v19 << 32);
        v28 = v20;
        v21 = 5 * v14 + HIDWORD(v19);
        v22 = v17 - 1;
        v23 = v17 - 65;
        if (v17 < 65)
        {
          v14 = 0;
          v24 = (v21 << (v16 - 63)) + (v20 >> v22);
          v15 = v20 - (v20 >> v22 << v22);
          v28 = v15;
        }
        else
        {
          v24 = v21 >> v23;
          v14 = v21 - ((uint64_t)(int)(v21 >> v23) << v23);
          v15 = v20;
        }
        v27 = v14;
        a4[(*a6)++] = v24 + 48;
        ++v16;
        v17 = v22;
        if (v11 == v16)
          goto LABEL_18;
      }
      v15 = 0;
      v14 = 0;
      v22 = v17;
    }
LABEL_18:
    if (v22 <= 64)
      v25 = -1;
    else
      v25 = -65;
    v26 = v25 + v22;
    if (v22 <= 64)
      v14 = v15;
    if (((v14 >> v26) & 1) != 0)
      return (unint64_t)sub_20BEA3680(a4, a5, a6, a7);
  }
  else
  {
    v12 = -a2;
    if (a3 < 1)
    {
LABEL_5:
      if (result)
      {
        if (((result >> (v12 - 1)) & 1) != 0)
          return (unint64_t)sub_20BEA3680(a4, a5, a6, a7);
      }
    }
    else
    {
      while (result)
      {
        LOBYTE(v12) = v12 - 1;
        v13 = (5 * result) >> v12;
        a4[(*a6)++] = v13 + 48;
        result = 5 * result - ((uint64_t)(int)v13 << v12);
        if (!--v11)
          goto LABEL_5;
      }
    }
  }
  return result;
}

_BYTE *sub_20BEA3680(_BYTE *result, uint64_t a2, unsigned int *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = (int)*a3;
  if ((_DWORD)v4)
  {
    ++result[v4 - 1];
    v5 = *a3;
    if ((int)v5 < 2)
    {
LABEL_5:
      if (*result == 58)
      {
        *result = 49;
        ++*a4;
      }
    }
    else
    {
      while (1)
      {
        v6 = v5 - 1;
        if (result[(v5 - 1)] != 58)
          break;
        result[(v5 - 1)] = 48;
        ++result[(v5-- - 2)];
        if ((unint64_t)(v6 + 1) <= 2)
          goto LABEL_5;
      }
    }
  }
  else
  {
    *result = 49;
    *a4 = 1;
    *a3 = 1;
  }
  return result;
}

uint64_t *sub_20BEA371C(uint64_t *result, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  if (a2 == 64)
  {
    v2 = *result;
    *result = 0;
    result[1] = v2;
  }
  else if (a2)
  {
    if (a2 == -64)
    {
      *result = result[1];
      result[1] = 0;
    }
    else if (a2 <= 0)
    {
      v4 = result[1];
      *result = (v4 >> a2) + (*result << -(char)a2);
      result[1] = v4 << -(char)a2;
    }
    else
    {
      v3 = (*result << -(char)a2) + ((unint64_t)result[1] >> a2);
      *result = (unint64_t)*result >> a2;
      result[1] = v3;
    }
  }
  return result;
}

double pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringToDouble(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter *this, char *a2, int a3, int *a4)
{
  return sub_20BEA379C((int *)this, (unsigned __int8 *)a2, a3, 1, a4);
}

double sub_20BEA379C(int *a1, unsigned __int8 *a2, int a3, int a4, _DWORD *a5)
{
  char *v6;
  int v9;
  unsigned int v10;
  int v11;
  unsigned __int8 *v12;
  int v13;
  _BOOL4 v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  double result;
  unsigned __int8 *v19;
  int v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  int v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  int v30;
  char *v31;
  uint64_t v32;
  int v33;
  char v34;
  unsigned int v35;
  int v36;
  int v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  BOOL v42;
  unsigned int v43;
  uint64_t v44;
  int v45;
  _BOOL4 v46;
  char *v47;
  char *v48;
  int v49;
  char *v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  double v54;
  int v55;
  int v57;
  char *v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  char *v63;
  int v64;
  unsigned int v65;
  int v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  uint64_t v75;
  float v76;
  const std::locale *v77;
  const std::locale *v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  _DWORD *v84;
  char *v85;
  char v86;
  char *v87;
  _WORD v88[5];
  char v89[782];
  uint64_t v90;

  v90 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)&a2[a3];
  v87 = v6;
  *(_QWORD *)v88 = a2;
  *a5 = 0;
  if (!a3)
    return *((double *)a1 + 1);
  v9 = (int)a2;
  v10 = *a1;
  v11 = (*a1 >> 4) & 1;
  v12 = a2;
  if ((*a1 & 8) == 0)
  {
    v12 = a2;
    if (!v11)
    {
      v13 = *a2;
      v12 = a2;
      goto LABEL_5;
    }
  }
LABEL_15:
  v17 = 0;
  v13 = *v12;
  do
  {
    if (byte_20CA54934[v17] == v13)
    {
      if (++v12 == (unsigned __int8 *)v6)
      {
        *a5 = a3;
        return *((double *)a1 + 1);
      }
      goto LABEL_15;
    }
    ++v17;
  }
  while (v17 != 6);
  *(_QWORD *)v88 = v12;
  if ((v10 & 8) == 0 && v12 != a2)
    return *((double *)a1 + 2);
LABEL_5:
  if (v13 == 45 || v13 == 43)
  {
    v14 = v13 == 45;
    *(_QWORD *)v88 = v12 + 1;
    if (v12 + 1 == (unsigned __int8 *)v6)
      return *((double *)a1 + 2);
    v15 = 1;
LABEL_9:
    for (i = 0; i != 6; ++i)
    {
      if (byte_20CA54934[i] == v12[v15])
      {
        if (++v15 == &a2[a3] - v12)
          return *((double *)a1 + 2);
        goto LABEL_9;
      }
    }
    if ((v10 & 0x20) == 0 && v15 != 1)
      return *((double *)a1 + 2);
    v12 += v15;
    *(_QWORD *)v88 = v12;
  }
  else
  {
    v14 = 0;
  }
  v19 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  if (v19)
  {
    v20 = *v12;
    if ((v10 & 0x40) != 0)
    {
      v21 = atomic_load((unsigned __int8 *)&qword_254785090);
      if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254785090))
      {
        v77 = std::locale::classic();
        qword_254785088 = (uint64_t)std::locale::use_facet(v77, MEMORY[0x24BEDB350]);
        __cxa_guard_release(&qword_254785090);
      }
      v22 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)qword_254785088 + 40))(qword_254785088, (char)v20);
      v20 = *v19;
    }
    else
    {
      v22 = *v19;
    }
    if (v20 == v22)
    {
      v23 = (int)v87;
      if (!sub_20BEA4BBC((unsigned __int8 **)v88, (unsigned __int8 *)v87, *((_QWORD *)a1 + 3), (v10 >> 6) & 1))
        return *((double *)a1 + 2);
      v24 = *(char **)v88;
      if (((v11 | ((v10 & 4) >> 2)) & 1) != 0)
      {
        if ((v10 & 4) != 0 || *(char **)v88 == v87)
        {
          v23 = *(_DWORD *)v88;
        }
        else
        {
          do
          {
            v25 = 0;
            while (byte_20CA54934[v25] != *v24)
            {
              if (++v25 == 6)
                return *((double *)a1 + 2);
            }
            ++v24;
          }
          while (v24 != v87);
        }
      }
      else if (*(char **)v88 != v87)
      {
        return *((double *)a1 + 2);
      }
      *a5 = v23 - v9;
      v52 = !v14;
      result = INFINITY;
      v53 = 0xFFF0000000000000;
      goto LABEL_121;
    }
    v12 = *(unsigned __int8 **)v88;
  }
  v26 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
  if (v26)
  {
    v27 = *v12;
    if ((v10 & 0x40) != 0)
    {
      v28 = atomic_load((unsigned __int8 *)&qword_254785090);
      if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_254785090))
      {
        v78 = std::locale::classic();
        qword_254785088 = (uint64_t)std::locale::use_facet(v78, MEMORY[0x24BEDB350]);
        __cxa_guard_release(&qword_254785090);
      }
      v29 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)qword_254785088 + 40))(qword_254785088, (char)v27);
      v27 = *v26;
    }
    else
    {
      v29 = *v26;
    }
    if (v27 == v29)
    {
      v30 = (int)v87;
      if (!sub_20BEA4BBC((unsigned __int8 **)v88, (unsigned __int8 *)v87, *((_QWORD *)a1 + 4), (v10 >> 6) & 1))
        return *((double *)a1 + 2);
      v31 = *(char **)v88;
      if (((v11 | ((v10 & 4) >> 2)) & 1) != 0)
      {
        if ((v10 & 4) != 0 || *(char **)v88 == v87)
        {
          v30 = *(_DWORD *)v88;
        }
        else
        {
          do
          {
            v32 = 0;
            while (byte_20CA54934[v32] != *v31)
            {
              if (++v32 == 6)
                return *((double *)a1 + 2);
            }
            ++v31;
          }
          while (v31 != v87);
        }
      }
      else if (*(char **)v88 != v87)
      {
        return *((double *)a1 + 2);
      }
      *a5 = v30 - v9;
      v52 = !v14;
      result = NAN;
      v53 = 0xFFF8000000000000;
LABEL_121:
      v54 = *(double *)&v53;
LABEL_205:
      if (!v52)
        return v54;
      return result;
    }
    v12 = *(unsigned __int8 **)v88;
  }
  v83 = v11;
  if (*v12 != 48)
  {
    v80 = *v12;
    v81 = a4;
    v82 = v14;
    v84 = a5;
    LOBYTE(v33) = 0;
    goto LABEL_65;
  }
  v41 = *((unsigned __int16 *)a1 + 20);
  if (sub_20BEA4CDC((char **)v88, v41, 10, &v87))
  {
LABEL_78:
    *a5 = *(_DWORD *)v88 - v9;
    v42 = !v14;
LABEL_79:
    result = -0.0;
    if (v42)
      return 0.0;
    return result;
  }
  v43 = *a1;
  if ((*a1 & 0x81) != 0)
  {
    v44 = *(_QWORD *)v88;
    if ((**(_BYTE **)v88 | 0x20) == 0x78)
    {
      v45 = a4;
      v46 = v14;
      v47 = (char *)++*(_QWORD *)v88;
      v48 = v87;
      if ((char *)(v44 + 1) == v87)
        return *((double *)a1 + 2);
      if ((v43 & 0x80) != 0 && (sub_20BEA4DAC((char *)(v44 + 1), v87, v41, (v10 & 4) != 0) & 1) != 0)
      {
        v49 = 1;
        goto LABEL_128;
      }
      v55 = *v47;
      if ((v55 - 48) < 0xA && v55 < 64)
      {
        v49 = 0;
LABEL_128:
        v57 = v46;
      }
      else
      {
        v60 = v55 - 65;
        if (v60 >= 0x26 || ((0x3F0000003FuLL >> v60) & 1) == 0)
          return *((double *)a1 + 2);
        v57 = v46;
        v49 = 0;
      }
      v89[0] = 0;
      result = sub_20BEA504C((char **)v88, v48, v57, v41, v49, (v10 & 4) != 0, v45, v89, *((double *)a1 + 2));
      if (v89[0])
        return result;
      v58 = *(char **)v88;
      if ((v10 & 0x10) != 0 && *(char **)v88 != v48)
      {
        do
        {
          v59 = 0;
          while (byte_20CA54934[v59] != *v58)
          {
            if (++v59 == 6)
              goto LABEL_138;
          }
          ++v58;
        }
        while (v58 != v48);
        LODWORD(v58) = (_DWORD)v48;
      }
LABEL_138:
      *a5 = (_DWORD)v58 - v9;
      return result;
    }
  }
  while (**(_BYTE **)v88 == 48)
  {
    if (sub_20BEA4CDC((char **)v88, v41, 10, &v87))
      goto LABEL_78;
  }
  v80 = 48;
  v81 = a4;
  v82 = v14;
  v84 = a5;
  v33 = (v43 >> 1) & 1;
LABEL_65:
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  while (2)
  {
    v38 = *(char **)v88;
    v39 = **(_BYTE **)v88;
    if ((v39 - 48) <= 9)
    {
      if (v37 > 771)
      {
        ++v36;
        v34 |= v39 != 48;
        if ((v33 & 1) != 0)
          goto LABEL_71;
LABEL_69:
        v33 = 0;
      }
      else
      {
        v89[v35++] = v39;
        ++v37;
        if ((v33 & 1) == 0)
          goto LABEL_69;
LABEL_71:
        v33 = *v38 < 56;
      }
      if ((sub_20BEA4CDC((char **)v88, *((unsigned __int16 *)a1 + 20), 10, &v87) & 1) != 0)
      {
        v40 = 0;
        goto LABEL_74;
      }
      continue;
    }
    break;
  }
  v33 = (v37 != 0) & v33;
  if (v39 != 46)
  {
    v40 = 0;
    goto LABEL_102;
  }
  if (v33 && (v10 & 4) == 0)
    return *((double *)a1 + 2);
  if ((v33 & 1) != 0)
    goto LABEL_76;
  v79 = *((unsigned __int16 *)a1 + 20);
  if (!sub_20BEA4CDC((char **)v88, v79, 10, &v87))
  {
    if (v37 || **(_BYTE **)v88 != 48)
    {
      v40 = 0;
      goto LABEL_149;
    }
    v40 = 0;
    do
    {
      if (sub_20BEA4CDC((char **)v88, v79, 10, &v87))
      {
        *v84 = *(_DWORD *)v88 - v9;
        v42 = v82 == 0;
        goto LABEL_79;
      }
      --v40;
    }
    while (**(_BYTE **)v88 == 48);
LABEL_149:
    while (1)
    {
      v38 = *(char **)v88;
      v39 = **(_BYTE **)v88;
      if ((v39 - 48) > 9)
        break;
      if (v37 > 771)
      {
        v34 |= v39 != 48;
      }
      else
      {
        v89[v35++] = v39;
        ++v37;
        --v40;
      }
      if ((sub_20BEA4CDC((char **)v88, v79, 10, &v87) & 1) != 0)
        goto LABEL_194;
    }
LABEL_102:
    if (v80 != 48 && !v40 && !v37)
      return *((double *)a1 + 2);
    if ((v39 | 0x20) == 0x65)
    {
      if (v33 && (v10 & 4) == 0)
        return *((double *)a1 + 2);
      if ((v33 & 1) != 0)
        goto LABEL_76;
      v50 = v38 + 1;
      *(_QWORD *)v88 = v38 + 1;
      if (v38 + 1 == v87)
      {
LABEL_158:
        if ((v10 & 4) == 0)
          return *((double *)a1 + 2);
        *(_QWORD *)v88 = v38;
        goto LABEL_194;
      }
      v51 = *v50;
      if (v51 == 45 || v51 == 43)
      {
        v50 = v38 + 2;
        *(_QWORD *)v88 = v38 + 2;
        if (v38 + 2 == v87)
          goto LABEL_158;
      }
      else
      {
        v51 = 43;
      }
      if (v50 == v87)
        goto LABEL_158;
      v61 = *v50;
      if (v61 - 58 < 0xFFFFFFF6)
        goto LABEL_158;
      v62 = 0;
      v38 = v87;
      v63 = v50 + 1;
      while (1)
      {
        if (v62 <= 107374181 || (v64 = 0x3FFFFFFF, v62 == 107374182) && v61 <= 0x33)
          v64 = v61 + 10 * v62 - 48;
        if (v63 == v87)
          break;
        v65 = *v63++;
        v61 = v65;
        v62 = v64;
        if (v65 - 48 >= 0xA)
        {
          v38 = v63 - 1;
          break;
        }
      }
      *(_QWORD *)v88 = v38;
      if (v51 == 45)
        v66 = -v64;
      else
        v66 = v64;
      v40 += v66;
    }
    if (((v83 | ((v10 & 4) >> 2)) & 1) != 0)
    {
      if ((v10 & 4) != 0)
        goto LABEL_183;
      v67 = v87;
    }
    else
    {
      v67 = v38;
      if (v38 != v87)
        return *((double *)a1 + 2);
    }
    if (v38 != v67)
    {
      do
      {
        v68 = 0;
        while (byte_20CA54934[v68] != *v38)
        {
          if (++v68 == 6)
            return *((double *)a1 + 2);
        }
        ++v38;
      }
      while (v38 != v67);
      *(_QWORD *)v88 = v67;
      goto LABEL_184;
    }
LABEL_183:
    v67 = v38;
LABEL_184:
    if ((v10 & 0x10) != 0 && v67 != v87)
    {
      while (2)
      {
        v69 = 0;
        while (byte_20CA54934[v69] != *v67)
        {
          if (++v69 == 6)
          {
            *(_QWORD *)v88 = v67;
            if ((v33 & 1) != 0)
              goto LABEL_75;
            goto LABEL_194;
          }
        }
        if (++v67 != v87)
          continue;
        break;
      }
      *(_QWORD *)v88 = v87;
      if ((v33 & 1) != 0)
        goto LABEL_75;
      goto LABEL_194;
    }
LABEL_74:
    if (!v33)
    {
LABEL_194:
      v70 = v40 + v36;
      if ((v34 & 1) != 0)
      {
        v89[v35++] = 49;
        --v70;
      }
      v89[v35] = 0;
      v71 = v35;
      while ((int)v71 >= 1)
      {
        v72 = v71 - 1;
        v73 = *((unsigned __int8 *)&v88[4] + v71-- + 1);
        if (v73 != 48)
        {
          v74 = v72 + 1;
          goto LABEL_201;
        }
      }
      v74 = 0;
LABEL_201:
      v75 = v35 - v74 + v70;
      if (v81)
      {
        result = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtodTrimmed((uint64_t)v89, v74, v75);
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtofTrimmed((uint64_t)v89, v74, v75);
        result = v76;
      }
      *v84 = *(_DWORD *)v88 - v9;
      v54 = -result;
      v52 = v82 == 0;
      goto LABEL_205;
    }
LABEL_75:
    LODWORD(v38) = *(_DWORD *)v88;
LABEL_76:
    v85 = v89;
    result = sub_20BEA54C8(&v85, &v89[v35], v82, *((unsigned __int16 *)a1 + 20), (v10 & 4) != 0, v81, &v86, *((double *)a1 + 2));
    *v84 = (_DWORD)v38 - v9;
    return result;
  }
  v40 = 0;
  if (v37 || v80 == 48)
    goto LABEL_194;
  return *((double *)a1 + 2);
}

void sub_20BEA41A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254785090);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringToDouble(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter *this, unsigned __int16 *a2, int a3, int *a4)
{
  return sub_20BEA41D8((int *)this, a2, a3, 1, a4);
}

double sub_20BEA41D8(int *a1, unsigned __int16 *a2, int a3, int a4, _DWORD *a5)
{
  unsigned __int16 *v6;
  unsigned int v10;
  unsigned __int16 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t i;
  double v15;
  _BOOL4 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t j;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  unsigned __int8 *v23;
  __int16 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  int v27;
  char v28;
  unsigned int v29;
  int v30;
  int v31;
  unsigned __int16 *v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  int v44;
  unsigned __int16 *v45;
  unsigned __int16 *v46;
  int v47;
  unsigned __int16 *v48;
  unsigned __int16 *v49;
  int v50;
  BOOL v51;
  double v52;
  unint64_t v53;
  uint64_t v54;
  float v55;
  double v56;
  unsigned int v58;
  unsigned int v60;
  unsigned int v61;
  int v62;
  unsigned __int16 *v63;
  int v64;
  unsigned int v65;
  int v66;
  const std::locale *v67;
  const std::locale *v68;
  int v69;
  int v70;
  int v71;
  int v72;
  char *v73;
  char v74;
  unsigned __int16 *v75;
  _WORD v76[5];
  char v77[782];
  uint64_t v78;

  v78 = *MEMORY[0x24BDAC8D0];
  v6 = &a2[a3];
  v75 = v6;
  *(_QWORD *)v76 = a2;
  *a5 = 0;
  if (!a3)
    return *((double *)a1 + 1);
  v10 = *a1;
  if ((*a1 & 0x18) != 0)
  {
    v11 = a2;
    while (1)
    {
      v12 = *v11;
      if (v12 >= 0x80)
        break;
      v13 = 0;
      while (byte_20CA54934[v13] != v12)
      {
        if (++v13 == 6)
          goto LABEL_16;
      }
LABEL_13:
      if (++v11 == v6)
      {
        *a5 = a3;
        return *((double *)a1 + 1);
      }
    }
    for (i = 0; i != 20; ++i)
    {
      if ((unsigned __int16)word_20CA5493A[i] == v12)
        goto LABEL_13;
    }
LABEL_16:
    *(_QWORD *)v76 = v11;
    if ((v10 & 8) == 0 && v11 != a2)
      return *((double *)a1 + 2);
  }
  else
  {
    v12 = *a2;
    v11 = a2;
  }
  if (v12 == 45 || v12 == 43)
  {
    v16 = v12 == 45;
    if (v11 + 1 == v6)
      return *((double *)a1 + 2);
    v17 = 1;
    while (1)
    {
      v12 = v11[v17];
      if (v12 >= 0x80)
        break;
      v18 = 0;
      while (byte_20CA54934[v18] != v12)
      {
        if (++v18 == 6)
          goto LABEL_35;
      }
LABEL_33:
      if (&v11[++v17] == v6)
        return *((double *)a1 + 2);
    }
    for (j = 0; j != 20; ++j)
    {
      if ((unsigned __int16)word_20CA5493A[j] == v12)
        goto LABEL_33;
    }
LABEL_35:
    if ((v10 & 0x20) == 0 && v17 != 1)
      return *((double *)a1 + 2);
    v11 += v17;
    *(_QWORD *)v76 = v11;
  }
  else
  {
    v16 = 0;
  }
  v20 = (unsigned __int8 *)*((_QWORD *)a1 + 3);
  if (v20)
  {
    if ((v10 & 0x40) != 0)
    {
      v21 = atomic_load((unsigned __int8 *)&qword_254785090);
      if ((v21 & 1) == 0 && __cxa_guard_acquire(&qword_254785090))
      {
        v67 = std::locale::classic();
        qword_254785088 = (uint64_t)std::locale::use_facet(v67, MEMORY[0x24BEDB350]);
        __cxa_guard_release(&qword_254785090);
      }
      v22 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)qword_254785088 + 40))(qword_254785088, (char)v12);
      LOBYTE(v12) = *v20;
    }
    else
    {
      v22 = *v20;
    }
    if (v22 == v12)
    {
      if (!sub_20BEA5954((unsigned __int8 **)v76, (unsigned __int8 *)v75, *((_QWORD *)a1 + 3), (v10 >> 6) & 1))
        return *((double *)a1 + 2);
      if ((v10 & 0x14) != 0)
      {
        if ((v10 & 4) != 0)
        {
LABEL_116:
          *a5 = (*(_QWORD *)v76 - (_QWORD)a2) >> 1;
          v51 = !v16;
          v52 = INFINITY;
          v53 = 0xFFF0000000000000;
LABEL_127:
          v56 = *(double *)&v53;
          goto LABEL_128;
        }
      }
      else if (*(unsigned __int16 **)v76 != v75)
      {
        return *((double *)a1 + 2);
      }
      if (sub_20BEA58CC((unsigned __int16 **)v76, v75))
        return *((double *)a1 + 2);
      goto LABEL_116;
    }
    v11 = *(unsigned __int16 **)v76;
  }
  v23 = (unsigned __int8 *)*((_QWORD *)a1 + 4);
  if (v23)
  {
    v24 = *v11;
    if ((v10 & 0x40) != 0)
    {
      v25 = atomic_load((unsigned __int8 *)&qword_254785090);
      if ((v25 & 1) == 0 && __cxa_guard_acquire(&qword_254785090))
      {
        v68 = std::locale::classic();
        qword_254785088 = (uint64_t)std::locale::use_facet(v68, MEMORY[0x24BEDB350]);
        __cxa_guard_release(&qword_254785090);
      }
      v26 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)qword_254785088 + 40))(qword_254785088, (char)v24);
      LOBYTE(v24) = *v23;
    }
    else
    {
      v26 = *v23;
    }
    if (v26 == v24)
    {
      if (!sub_20BEA5954((unsigned __int8 **)v76, (unsigned __int8 *)v75, *((_QWORD *)a1 + 4), (v10 >> 6) & 1))
        return *((double *)a1 + 2);
      if ((v10 & 0x14) != 0)
      {
        if ((v10 & 4) != 0)
        {
LABEL_126:
          *a5 = (*(_QWORD *)v76 - (_QWORD)a2) >> 1;
          v51 = !v16;
          v52 = NAN;
          v53 = 0xFFF8000000000000;
          goto LABEL_127;
        }
      }
      else if (*(unsigned __int16 **)v76 != v75)
      {
        return *((double *)a1 + 2);
      }
      if (sub_20BEA58CC((unsigned __int16 **)v76, v75))
        return *((double *)a1 + 2);
      goto LABEL_126;
    }
    v11 = *(unsigned __int16 **)v76;
  }
  if (*v11 != 48)
  {
    v70 = *v11;
    v71 = a4;
    v72 = v16;
    LOBYTE(v27) = 0;
LABEL_63:
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 0;
    while (1)
    {
      v32 = *(unsigned __int16 **)v76;
      v33 = (unsigned __int16)**(_WORD **)v76;
      if ((v33 - 48) > 9)
      {
        v27 = (v31 != 0) & v27;
        if (v33 != 46)
        {
          v34 = 0;
          goto LABEL_102;
        }
        if (v27 && (v10 & 4) == 0)
          return *((double *)a1 + 2);
        if ((v27 & 1) == 0)
        {
          v69 = *((unsigned __int16 *)a1 + 20);
          if (sub_20BEA5A74((unsigned __int16 **)v76, v69, 10, &v75))
          {
            v34 = 0;
            if (v31 || v70 == 48)
              goto LABEL_73;
            return *((double *)a1 + 2);
          }
          if (v31 || **(_WORD **)v76 != 48)
          {
            v34 = 0;
            goto LABEL_149;
          }
          v34 = 0;
          do
          {
            if (sub_20BEA5A74((unsigned __int16 **)v76, v69, 10, &v75))
            {
              *a5 = (*(_QWORD *)v76 - (_QWORD)a2) >> 1;
              v41 = v72 == 0;
              goto LABEL_81;
            }
            --v34;
          }
          while (**(_WORD **)v76 == 48);
LABEL_149:
          while (1)
          {
            v32 = *(unsigned __int16 **)v76;
            v33 = (unsigned __int16)**(_WORD **)v76;
            if ((v33 - 48) > 9)
              break;
            if (v31 > 771)
            {
              v28 |= v33 != 48;
            }
            else
            {
              v77[v29++] = v33;
              ++v31;
              --v34;
            }
            if ((sub_20BEA5A74((unsigned __int16 **)v76, v69, 10, &v75) & 1) != 0)
              goto LABEL_73;
          }
LABEL_102:
          if (v70 != 48 && !v34 && !v31)
            return *((double *)a1 + 2);
          if ((v33 | 0x20) != 0x65)
            goto LABEL_172;
          if (v27 && (v10 & 4) == 0)
            return *((double *)a1 + 2);
          if ((v27 & 1) == 0)
          {
            v48 = v32 + 1;
            v49 = v75;
            if (v32 + 1 == v75)
              goto LABEL_158;
            v50 = *v48;
            if (v50 == 45 || v50 == 43)
            {
              v48 = v32 + 2;
              if (v32 + 2 == v75)
                goto LABEL_158;
            }
            else
            {
              LOBYTE(v50) = 43;
            }
            if (v48 == v75 || (v61 = *v48, v61 - 58 < 0xFFFFFFF6))
            {
LABEL_158:
              if ((v10 & 4) == 0)
                return *((double *)a1 + 2);
              *(_QWORD *)v76 = v32;
LABEL_73:
              v35 = v34 + v30;
              if ((v28 & 1) != 0)
              {
                v77[v29++] = 49;
                --v35;
              }
              v77[v29] = 0;
              v36 = v29;
              while ((int)v36 >= 1)
              {
                v37 = v36 - 1;
                v38 = *((unsigned __int8 *)&v76[4] + v36-- + 1);
                if (v38 != 48)
                {
                  v39 = v37 + 1;
                  goto LABEL_118;
                }
              }
              v39 = 0;
LABEL_118:
              v54 = v29 - v39 + v35;
              if (v71)
              {
                v52 = pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtodTrimmed((uint64_t)v77, v39, v54);
              }
              else
              {
                pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtofTrimmed((uint64_t)v77, v39, v54);
                v52 = v55;
              }
              *a5 = (*(_QWORD *)v76 - (_QWORD)a2) >> 1;
              v56 = -v52;
              v51 = v72 == 0;
LABEL_128:
              if (v51)
                return v52;
              else
                return v56;
            }
            v62 = 0;
            v63 = v48 + 1;
            while (1)
            {
              if (v62 <= 107374181 || (v64 = 0x3FFFFFFF, v62 == 107374182) && v61 <= 0x33)
                v64 = v61 + 10 * v62 - 48;
              if (v63 == v75)
                break;
              v65 = *v63++;
              v61 = v65;
              v62 = v64;
              if (v65 - 48 >= 0xA)
              {
                v49 = v63 - 1;
                break;
              }
            }
            *(_QWORD *)v76 = v49;
            if (v50 == 45)
              v66 = -v64;
            else
              v66 = v64;
            v34 += v66;
            v32 = v49;
LABEL_172:
            if ((v10 & 0x14) == 0)
            {
              if (v32 != v75)
                return *((double *)a1 + 2);
              goto LABEL_176;
            }
            if ((v10 & 4) == 0)
            {
              v32 = v75;
LABEL_176:
              if (sub_20BEA58CC((unsigned __int16 **)v76, v32))
                return *((double *)a1 + 2);
            }
            if ((v10 & 0x10) != 0)
            {
              sub_20BEA58CC((unsigned __int16 **)v76, v75);
              if ((v27 & 1) == 0)
                goto LABEL_73;
            }
            else
            {
LABEL_72:
              if (!v27)
                goto LABEL_73;
            }
          }
        }
        v73 = v77;
        v15 = sub_20BEA54C8(&v73, &v77[v29], v72, *((unsigned __int16 *)a1 + 20), (v10 & 4) != 0, v71, &v74, *((double *)a1 + 2));
        goto LABEL_180;
      }
      if (v31 > 771)
      {
        ++v30;
        v28 |= v33 != 48;
        if ((v27 & 1) != 0)
        {
LABEL_69:
          v27 = *v32 < 0x38u;
          goto LABEL_70;
        }
      }
      else
      {
        v77[v29++] = v33;
        ++v31;
        if ((v27 & 1) != 0)
          goto LABEL_69;
      }
      v27 = 0;
LABEL_70:
      if ((sub_20BEA5A74((unsigned __int16 **)v76, *((unsigned __int16 *)a1 + 20), 10, &v75) & 1) != 0)
      {
        v34 = 0;
        goto LABEL_72;
      }
    }
  }
  v40 = *((unsigned __int16 *)a1 + 20);
  if (sub_20BEA5A74((unsigned __int16 **)v76, v40, 10, &v75))
  {
LABEL_80:
    *a5 = (*(_QWORD *)v76 - (_QWORD)a2) >> 1;
    v41 = !v16;
LABEL_81:
    if (v41)
      return 0.0;
    else
      return -0.0;
  }
  v42 = *a1;
  if ((*a1 & 0x81) == 0 || (v43 = *(_QWORD *)v76, ((unsigned __int16)**(_WORD **)v76 | 0x20) != 0x78))
  {
    while (**(_WORD **)v76 == 48)
    {
      if (sub_20BEA5A74((unsigned __int16 **)v76, v40, 10, &v75))
        goto LABEL_80;
    }
    v70 = 48;
    v71 = a4;
    v72 = v16;
    v27 = (v42 >> 1) & 1;
    goto LABEL_63;
  }
  v44 = a4;
  v45 = (unsigned __int16 *)(*(_QWORD *)v76 + 2);
  *(_QWORD *)v76 += 2;
  v46 = v75;
  if ((unsigned __int16 *)(v43 + 2) == v75)
    return *((double *)a1 + 2);
  if ((v42 & 0x80) != 0 && (sub_20BEA5B44((unsigned __int16 *)(v43 + 2), v75, v40, (v10 & 4) != 0) & 1) != 0)
  {
    v47 = 1;
  }
  else
  {
    v58 = *v45;
    if (v58 - 48 >= 0xA || v58 >= 0x40)
    {
      v60 = v58 - 65;
      if (v60 >= 0x26 || ((0x3F0000003FuLL >> v60) & 1) == 0)
        return *((double *)a1 + 2);
    }
    v47 = 0;
  }
  v77[0] = 0;
  v15 = sub_20BEA5D40((unsigned __int16 **)v76, v46, v16, *((unsigned __int16 *)a1 + 20), v47, (v10 & 4) != 0, v44, v77, *((double *)a1 + 2));
  if (!v77[0])
  {
    if ((v10 & 0x10) != 0)
      sub_20BEA58CC((unsigned __int16 **)v76, v46);
LABEL_180:
    *a5 = (*(_QWORD *)v76 - (_QWORD)a2) >> 1;
  }
  return v15;
}

void sub_20BEA4B00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254785090);
  _Unwind_Resume(a1);
}

float pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringToFloat(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter *this, char *a2, int a3, int *a4)
{
  return sub_20BEA379C((int *)this, (unsigned __int8 *)a2, a3, 0, a4);
}

float pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringToFloat(pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter *this, unsigned __int16 *a2, int a3, int *a4)
{
  return sub_20BEA41D8((int *)this, a2, a3, 0, a4);
}

double pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringTo<double>(int *a1, unsigned __int8 *a2, int a3, _DWORD *a4)
{
  return sub_20BEA379C(a1, a2, a3, 1, a4);
}

float pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringTo<float>(int *a1, unsigned __int8 *a2, int a3, _DWORD *a4)
{
  return sub_20BEA379C(a1, a2, a3, 0, a4);
}

double pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringTo<double>(int *a1, unsigned __int16 *a2, int a3, _DWORD *a4)
{
  return sub_20BEA41D8(a1, a2, a3, 1, a4);
}

float pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringTo<float>(int *a1, unsigned __int16 *a2, int a3, _DWORD *a4)
{
  return sub_20BEA41D8(a1, a2, a3, 0, a4);
}

BOOL sub_20BEA4BBC(unsigned __int8 **a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  _BYTE *v6;
  std::locale::id *v7;
  int v8;
  _BOOL8 v9;
  unsigned __int8 *v10;
  BOOL v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  int v15;
  const std::locale *v16;
  unsigned __int8 *v17;
  _BYTE *v18;
  int v20;
  int v21;
  int v22;

  if (a4)
  {
    v6 = (_BYTE *)(a3 + 1);
    v7 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v8 = *v6;
      v9 = *v6 == 0;
      v10 = *a1 + 1;
      *a1 = v10;
      if (v8)
        v11 = v10 == a2;
      else
        v11 = 1;
      if (v11)
        break;
      v12 = *v10;
      v13 = atomic_load((unsigned __int8 *)&qword_254785090);
      if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254785090))
      {
        v16 = std::locale::classic();
        qword_254785088 = (uint64_t)std::locale::use_facet(v16, v7);
        __cxa_guard_release(&qword_254785090);
      }
      v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)qword_254785088 + 40))(qword_254785088, (char)v12);
      v15 = *v6++;
    }
    while (v15 == v14);
  }
  else
  {
    v17 = *a1 + 1;
    v18 = (_BYTE *)(a3 + 1);
    do
    {
      v11 = *v18 == 0;
      v9 = *v18 == 0;
      *a1 = v17;
      if (v11 || v17 == a2)
        break;
      v21 = *v17++;
      v20 = v21;
      v22 = *v18++;
    }
    while (v20 == v22);
  }
  return v9;
}

void sub_20BEA4CC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254785090);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEA4CDC(char **a1, int a2, int a3, char **a4)
{
  char *v6;
  char *v9;
  uint64_t result;
  int v11;
  char *v12;
  BOOL v13;
  char *v14;

  v6 = *a1;
  if (!a2)
  {
    *a1 = v6 + 1;
    return v6 + 1 == *a4;
  }
  v9 = v6 + 1;
  LODWORD(result) = sub_20BEA4FF0(*v6, a3);
  v11 = result;
  *a1 = v6 + 1;
  v12 = *a4;
  if (v6 + 1 == *a4)
    result = 1;
  else
    result = result;
  if (v11)
    v13 = v9 == v12;
  else
    v13 = 1;
  if (!v13)
  {
    v14 = v6 + 2;
    if (v14 == v12)
      return 0;
    if (*v9 == a2 && sub_20BEA4FF0(*v14, a3))
    {
      *a1 = v14;
      v12 = *a4;
      v9 = v14;
    }
    return v9 == v12;
  }
  return result;
}

uint64_t sub_20BEA4DAC(char *a1, char *a2, int a3, char a4)
{
  char v7;
  int v8;
  uint64_t result;
  BOOL v11;
  BOOL v12;
  char v13;
  int v14;
  char *v16;
  int v17;
  char v19;
  uint64_t v20;
  char *v21;
  char *v22;

  v7 = 0;
  v21 = a1;
  v22 = a2;
  while (1)
  {
    v8 = *v21;
    if ((v8 - 48) >= 0xA || v8 >= 64)
    {
      if (*v21 - 46 > 0x38)
        goto LABEL_25;
      if (((1 << (v8 - 46)) & 0x1F8000001F80000) == 0)
        break;
    }
    v7 = 1;
    if ((sub_20BEA4CDC(&v21, a3, 16, &v22) & 1) != 0)
      return 0;
  }
  if (*v21 == 46)
  {
    if ((sub_20BEA4CDC(&v21, a3, 16, &v22) & 1) != 0)
      return 0;
    while (1)
    {
      v8 = *v21;
      v11 = v8 >= 64 || (v8 - 48) >= 0xA;
      v12 = !v11;
      if ((v8 - 97) >= 6 && !v12 && (v8 <= 64 || v8 > 0x46))
        break;
      v13 = sub_20BEA4CDC(&v21, a3, 16, &v22);
      result = 0;
      v7 = 1;
      if ((v13 & 1) != 0)
        return result;
    }
  }
LABEL_25:
  if ((v7 & 1) == 0 || (v8 | 0x20) != 0x70 || (sub_20BEA4CDC(&v21, a3, 16, &v22) & 1) != 0)
    return 0;
  v14 = *v21;
  if (v14 != 45 && v14 != 43)
    goto LABEL_32;
  if ((sub_20BEA4CDC(&v21, a3, 16, &v22) & 1) != 0)
    return 0;
  LOBYTE(v14) = *v21;
LABEL_32:
  if ((char)v14 > 57 || ((char)v14 - 48) > 9)
    return 0;
  if ((sub_20BEA4CDC(&v21, a3, 16, &v22) & 1) != 0)
    return 1;
  while (1)
  {
    v16 = v21;
    v17 = *v21;
    if (v17 > 57 || (v17 - 48) > 9)
      break;
    v19 = sub_20BEA4CDC(&v21, a3, 16, &v22);
    result = 1;
    if ((v19 & 1) != 0)
      return result;
  }
  result = 1;
  if (v21 != a2 && (a4 & 1) == 0)
  {
    do
    {
      v20 = 0;
      while (byte_20CA54934[v20] != *v16)
      {
        result = 0;
        if (++v20 == 6)
          return result;
      }
      ++v16;
      result = 1;
    }
    while (v16 != a2);
  }
  return result;
}

uint64_t sub_20BEA4FF0(int a1, int a2)
{
  _BOOL4 v3;

  if ((a1 - 48) <= 9 && a2 + 48 > a1 || a1 >= 97 && a2 >= 11 && a2 + 87 > a1)
    return 1;
  v3 = a2 + 55 > a1;
  if (a2 < 11)
    v3 = 0;
  return a1 >= 65 && v3;
}

double sub_20BEA504C(char **a1, char *a2, int a3, int a4, int a5, char a6, int a7, _BYTE *a8, double a9)
{
  char *v18;
  int v19;
  int v20;
  int64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  int v27;
  char v28;
  char *v29;
  int v30;
  BOOL v31;
  char *i;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unsigned int v43;
  int v44;
  int v45;
  BOOL v46;
  double v47;
  uint64_t v49;
  int v50;
  char *v51;
  char v52;
  char *v53;

  v53 = a2;
  *a8 = 1;
  while (1)
  {
    v18 = *a1;
    v19 = **a1;
    if (v19 != 48)
      break;
    if (sub_20BEA4CDC(a1, a4, 16, &v53))
    {
      *a8 = 0;
      if (a3)
        return -0.0;
      else
        return 0.0;
    }
  }
  v52 = a6;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  if (a7)
    v23 = 53;
  else
    v23 = 24;
  while (1)
  {
    v24 = (char)v19 - 48;
    if (v24 < 0xA)
      goto LABEL_15;
    if (((char)v19 - 97) <= 5)
    {
      v24 = (char)v19 - 87;
      goto LABEL_15;
    }
    if (((char)v19 - 65) > 5)
      break;
    v24 = (char)v19 - 55;
LABEL_15:
    if ((v22 & 1) != 0)
      v20 -= 4;
    v21 = 16 * v21 + v24;
    v25 = v21 >> v23;
    if ((v21 >> v23))
    {
      v50 = a3;
      v26 = 1;
      if ((int)v25 >= 2)
      {
        do
        {
          ++v26;
          v31 = v25 > 3;
          LODWORD(v25) = v25 >> 1;
        }
        while (v31);
      }
      v51 = a2;
      v27 = v26 + v20;
      if ((sub_20BEA4CDC(a1, a4, 16, &v53) & 1) != 0)
      {
        v28 = 1;
LABEL_43:
        if ((a5 & 1) == 0 && (v52 & 1) == 0)
        {
          for (i = *a1; i != v51; *a1 = i)
          {
            v34 = 0;
            while (byte_20CA54934[v34] != *i)
            {
              if (++v34 == 6)
                return a9;
            }
            ++i;
          }
        }
        v35 = v21 & ~(-1 << v26);
        v36 = 1 << (v26 - 1);
        v37 = (v21 >> v26) + ((v21 >> v26) & 1u | ((v28 & 1) == 0));
        if (v35 != v36)
          v37 = v21 >> v26;
        if (v35 > v36)
          v38 = (v21 >> v26) + 1;
        else
          v38 = v37;
        v20 = v27 + (((unint64_t)v38 >> v23) & 1);
        v21 = v38 >> (((unint64_t)v38 >> v23) & 1);
        a3 = v50;
        goto LABEL_57;
      }
      v28 = 1;
      while (2)
      {
        v29 = *a1;
        if (a5)
        {
          v30 = *v29;
          if (v30 == 46)
          {
            sub_20BEA4CDC(a1, a4, 16, &v53);
            v29 = *a1;
            v22 = 1;
            goto LABEL_31;
          }
        }
        else
        {
LABEL_31:
          v30 = *v29;
        }
        v31 = ((char)v30 - 48) < 0xA && (char)v30 < 64;
        if (!v31 && ((v30 - 65) > 0x25 || ((1 << (v30 - 65)) & 0x3F0000003FLL) == 0))
          goto LABEL_43;
        v28 &= v30 == 48;
        if ((v22 & 1) == 0)
          v27 += 4;
        if (sub_20BEA4CDC(a1, a4, 16, &v53))
          goto LABEL_43;
        continue;
      }
    }
    if ((sub_20BEA4CDC(a1, a4, 16, &v53) & 1) != 0)
      goto LABEL_57;
LABEL_19:
    v18 = *a1;
    LOBYTE(v19) = **a1;
  }
  if (!a5)
    goto LABEL_91;
  if ((char)v19 == 46)
  {
    sub_20BEA4CDC(a1, a4, 16, &v53);
    v22 = 1;
    goto LABEL_19;
  }
  if (v19 != 80 && v19 != 112)
  {
LABEL_91:
    if (v18 != a2 && (v52 & 1) == 0)
    {
      do
      {
        v49 = 0;
        while (byte_20CA54934[v49] != *v18)
        {
          if (++v49 == 6)
            return a9;
        }
        *a1 = ++v18;
      }
      while (v18 != a2);
    }
LABEL_57:
    *a8 = 0;
    if (a5)
      goto LABEL_62;
    goto LABEL_78;
  }
  *a8 = 0;
LABEL_62:
  sub_20BEA4CDC(a1, a4, 16, &v53);
  v39 = 0;
  v40 = **a1;
  if (v40 == 43)
  {
LABEL_65:
    sub_20BEA4CDC(a1, a4, 16, &v53);
  }
  else if (v40 == 45)
  {
    v39 = 1;
    goto LABEL_65;
  }
  v41 = 0;
  do
  {
    v42 = **a1;
    if ((v42 - 48) > 9)
      break;
    if (v41 >= 0)
      v43 = v41;
    else
      v43 = -v41;
    v44 = v42 + 10 * v41 - 48;
    if (v43 < 0x17BB1)
      v41 = v44;
  }
  while (!sub_20BEA4CDC(a1, a4, 16, &v53));
  if (v39)
    v45 = -v41;
  else
    v45 = v41;
  v20 += v45;
LABEL_78:
  if (v20)
    v46 = v21 == 0;
  else
    v46 = 1;
  if (v46)
  {
    if (a3)
    {
      if (!v21)
        return -0.0;
      return (double)-v21;
    }
    return (double)v21;
  }
  else
  {
    v47 = COERCE_DOUBLE(sub_20BEA5790(v21, v20));
    if (a3)
      return -v47;
    else
      return v47;
  }
}

double sub_20BEA54C8(char **a1, char *a2, int a3, int a4, char a5, int a6, _BYTE *a7, double a8)
{
  int64_t v16;
  char v17;
  char *v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  int v24;
  char v25;
  int i;
  int v27;
  BOOL v28;
  char *j;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  int v38;
  char *v39;

  v39 = a2;
  *a7 = 1;
  while (**a1 == 48)
  {
    if (sub_20BEA5828(a1, a4, &v39))
    {
      *a7 = 0;
      if (a3)
        return -0.0;
      else
        return 0.0;
    }
  }
  v16 = 0;
  if (a6)
    v17 = 53;
  else
    v17 = 24;
  while (1)
  {
    v18 = *a1;
    v19 = **a1;
    if (v19 > 55 || (v19 - 48) >= 0xA)
    {
      if (v18 != a2 && (a5 & 1) == 0)
      {
        do
        {
          v22 = 0;
          while (byte_20CA54934[v22] != *v18)
          {
            if (++v22 == 6)
              return a8;
          }
          *a1 = ++v18;
        }
        while (v18 != a2);
      }
LABEL_24:
      *a7 = 0;
      v23 = v16 == 0;
      goto LABEL_25;
    }
    v16 = **a1 + 8 * v16 - 48;
    v21 = v16 >> v17;
    if ((v16 >> v17))
      break;
    if (sub_20BEA5828(a1, a4, &v39))
      goto LABEL_24;
  }
  v24 = 1;
  if ((int)v21 >= 2)
  {
    do
    {
      ++v24;
      v28 = v21 > 3;
      LODWORD(v21) = v21 >> 1;
    }
    while (v28);
  }
  v38 = a3;
  v25 = 1;
  for (i = v24; !sub_20BEA5828(a1, a4, &v39); i += 3)
  {
    v27 = **a1;
    v28 = v27 > 55 || (v27 - 48) > 9;
    if (v28)
      break;
    v25 &= v27 == 48;
  }
  if ((a5 & 1) == 0)
  {
    for (j = *a1; j != a2; *a1 = j)
    {
      v30 = 0;
      while (byte_20CA54934[v30] != *j)
      {
        if (++v30 == 6)
          return a8;
      }
      ++j;
    }
  }
  v31 = v16 & ~(-1 << v24);
  v32 = 1 << (v24 - 1);
  v33 = (v16 >> v24) + ((v16 >> v24) & 1u | ((v25 & 1) == 0));
  if (v31 != v32)
    v33 = v16 >> v24;
  if (v31 > v32)
    v34 = (v16 >> v24) + 1;
  else
    v34 = v33;
  v35 = ((unint64_t)v34 >> v17) & 1;
  v16 = v34 >> (((unint64_t)v34 >> v17) & 1);
  *a7 = 0;
  v23 = v16 == 0;
  a3 = v38;
  if (i + (_DWORD)v35 && v16)
  {
    v36 = COERCE_DOUBLE(sub_20BEA5790(v16, i + (int)v35));
    if (v38)
      return -v36;
    else
      return v36;
  }
LABEL_25:
  if (a3)
  {
    if (v23)
      return -0.0;
    return (double)-v16;
  }
  return (double)v16;
}

unint64_t sub_20BEA5790(unint64_t a1, int a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;

  if (a1 >> 53)
  {
    do
    {
      v2 = a1 >> 1;
      ++a2;
      v3 = a1 >> 54;
      a1 >>= 1;
    }
    while (v3);
  }
  else
  {
    v2 = a1;
  }
  if (a2 > 971)
    return 0x7FF0000000000000;
  if (a2 < -1074)
    return 0;
  v5 = (v2 & 0x10000000000000) == 0;
  if (a2 != -1074 && (v2 & 0x10000000000000) == 0)
  {
    do
    {
      v6 = a2;
      v8 = v2 & 0x8000000000000;
      v7 = (v2 & 0x8000000000000) == 0;
      v2 *= 2;
      --a2;
      v5 = v7;
    }
    while (v6 >= -1072 && !v8);
  }
  if (a2 == -1074 && v5)
    v9 = 0;
  else
    v9 = (unint64_t)(a2 + 1075) << 52;
  return v9 & 0xFFF0000000000000 | v2 & 0xFFFFFFFFFFFFFLL;
}

BOOL sub_20BEA5828(char **a1, int a2, char **a3)
{
  char *v3;
  int v4;
  char *v5;
  _BOOL4 v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;

  v3 = *a1;
  if (!a2)
  {
    *a1 = v3 + 1;
    return v3 + 1 == *a3;
  }
  v5 = v3 + 1;
  v4 = *v3;
  v7 = v4 > 55 || (v4 - 58) < 0xFFFFFFF6;
  *a1 = v5;
  v8 = *a3;
  LODWORD(v9) = !v7;
  if (v5 == *a3)
    v9 = 1;
  else
    v9 = v9;
  if (!v7 && v5 != v8)
  {
    v10 = v3 + 2;
    if (v3 + 2 == v8)
      return 0;
    if (*v5 == a2)
    {
      v11 = *v10;
      if (v11 <= 55 && (v11 - 48) <= 9)
      {
        *a1 = v10;
        v8 = *a3;
        v5 = v10;
      }
    }
    return v5 == v8;
  }
  return v9;
}

uint64_t sub_20BEA58CC(unsigned __int16 **a1, unsigned __int16 *a2)
{
  unsigned __int16 *i;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  for (i = *a1; i != a2; *a1 = i)
  {
    v3 = *i;
    if (v3 >= 0x80)
    {
      v5 = 0;
      while ((unsigned __int16)word_20CA5493A[v5] != v3)
      {
        if (++v5 == 20)
          return 1;
      }
    }
    else
    {
      v4 = 0;
      while (byte_20CA54934[v4] != v3)
      {
        if (++v4 == 6)
          return 1;
      }
    }
    ++i;
  }
  return 0;
}

BOOL sub_20BEA5954(unsigned __int8 **a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  _BYTE *v6;
  std::locale::id *v7;
  int v8;
  _BOOL8 v9;
  unsigned __int8 *v10;
  BOOL v11;
  __int16 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  int v15;
  const std::locale *v16;
  unsigned __int8 *v17;
  _BYTE *v18;
  int v20;
  int v21;
  int v22;

  if (a4)
  {
    v6 = (_BYTE *)(a3 + 1);
    v7 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      v8 = *v6;
      v9 = *v6 == 0;
      v10 = *a1 + 2;
      *a1 = v10;
      if (v8)
        v11 = v10 == a2;
      else
        v11 = 1;
      if (v11)
        break;
      v12 = *(_WORD *)v10;
      v13 = atomic_load((unsigned __int8 *)&qword_254785090);
      if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_254785090))
      {
        v16 = std::locale::classic();
        qword_254785088 = (uint64_t)std::locale::use_facet(v16, v7);
        __cxa_guard_release(&qword_254785090);
      }
      v14 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)qword_254785088 + 40))(qword_254785088, (char)v12);
      v15 = *v6++;
    }
    while (v15 == v14);
  }
  else
  {
    v17 = *a1 + 2;
    v18 = (_BYTE *)(a3 + 1);
    do
    {
      v11 = *v18 == 0;
      v9 = *v18 == 0;
      *a1 = v17;
      if (v11 || v17 == a2)
        break;
      v21 = *v17;
      v17 += 2;
      v20 = v21;
      v22 = *v18++;
    }
    while (v22 == v20);
  }
  return v9;
}

void sub_20BEA5A5C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254785090);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEA5A74(unsigned __int16 **a1, int a2, int a3, unsigned __int16 **a4)
{
  unsigned __int16 *v6;
  unsigned __int16 *v9;
  uint64_t result;
  int v11;
  unsigned __int16 *v12;
  BOOL v13;
  unsigned __int16 *v14;

  v6 = *a1;
  if (!a2)
  {
    *a1 = v6 + 1;
    return v6 + 1 == *a4;
  }
  v9 = v6 + 1;
  LODWORD(result) = sub_20BEA4FF0(*v6, a3);
  v11 = result;
  *a1 = v6 + 1;
  v12 = *a4;
  if (v6 + 1 == *a4)
    result = 1;
  else
    result = result;
  if (v11)
    v13 = v9 == v12;
  else
    v13 = 1;
  if (!v13)
  {
    v14 = v6 + 2;
    if (v14 == v12)
      return 0;
    if (*v9 == a2 && sub_20BEA4FF0(*v14, a3))
    {
      *a1 = v14;
      v12 = *a4;
      v9 = v14;
    }
    return v9 == v12;
  }
  return result;
}

uint64_t sub_20BEA5B44(unsigned __int16 *a1, unsigned __int16 *a2, int a3, char a4)
{
  char v7;
  unsigned int v8;
  uint64_t result;
  BOOL v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  unsigned int v16;
  char v18;
  unsigned __int16 *v19;
  unsigned __int16 *v20;

  v7 = 0;
  v19 = a1;
  v20 = a2;
  while (1)
  {
    v8 = *v19;
    if (v8 - 48 >= 0xA || v8 >= 0x40)
    {
      if (v8 - 46 > 0x38)
        goto LABEL_25;
      if (((1 << (v8 - 46)) & 0x1F8000001F80000) == 0)
        break;
    }
    v7 = 1;
    if ((sub_20BEA5A74(&v19, a3, 16, &v20) & 1) != 0)
      return 0;
  }
  if (v8 == 46)
  {
    if ((sub_20BEA5A74(&v19, a3, 16, &v20) & 1) != 0)
      return 0;
    while (1)
    {
      v8 = *v19;
      v11 = v8 >= 0x40 || v8 - 48 >= 0xA;
      v12 = !v11;
      if (v8 - 97 >= 6 && !v12 && (v8 <= 0x40 || v8 > 0x46))
        break;
      v13 = sub_20BEA5A74(&v19, a3, 16, &v20);
      result = 0;
      v7 = 1;
      if ((v13 & 1) != 0)
        return result;
    }
  }
LABEL_25:
  if ((v7 & 1) == 0 || (v8 | 0x20) != 0x70 || (sub_20BEA5A74(&v19, a3, 16, &v20) & 1) != 0)
    return 0;
  v14 = *v19;
  if (v14 != 45 && v14 != 43)
    goto LABEL_32;
  if ((sub_20BEA5A74(&v19, a3, 16, &v20) & 1) != 0)
    return 0;
  v14 = *v19;
LABEL_32:
  if (v14 > 0x39 || v14 - 48 > 9)
    return 0;
  if ((sub_20BEA5A74(&v19, a3, 16, &v20) & 1) != 0)
    return 1;
  do
  {
    v16 = *v19;
    if (v16 > 0x39 || v16 - 48 > 9)
      break;
    v18 = sub_20BEA5A74(&v19, a3, 16, &v20);
    result = 1;
  }
  while ((v18 & 1) == 0);
  if ((a4 & 1) != 0)
    return 1;
  else
    return sub_20BEA58CC(&v19, a2) ^ 1;
}

double sub_20BEA5D40(unsigned __int16 **a1, unsigned __int16 *a2, int a3, int a4, int a5, char a6, int a7, _BYTE *a8, double a9)
{
  unsigned __int16 *v18;
  int v19;
  int v20;
  int64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  char v29;
  unsigned __int16 *v30;
  unsigned int v31;
  unsigned __int16 *i;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  int v48;
  BOOL v49;
  double v50;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned __int16 *v56;
  char v57;
  unsigned __int16 *v58;

  v58 = a2;
  *a8 = 1;
  while (1)
  {
    v18 = *a1;
    v19 = **a1;
    if (v19 != 48)
      break;
    if (sub_20BEA5A74(a1, a4, 16, &v58))
    {
      *a8 = 0;
      if (a3)
        return -0.0;
      else
        return 0.0;
    }
  }
  v57 = a6;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  if (a7)
    v23 = 53;
  else
    v23 = 24;
  while (1)
  {
    v24 = v19 - 48;
    if ((v19 - 48) < 0xA)
      goto LABEL_15;
    if ((v19 - 97) <= 5)
    {
      v24 = v19 - 87;
      goto LABEL_15;
    }
    if ((v19 - 65) > 5)
      break;
    v24 = v19 - 55;
LABEL_15:
    if ((v22 & 1) != 0)
      v20 -= 4;
    v21 = 16 * v21 + v24;
    v25 = v21 >> v23;
    if ((v21 >> v23))
    {
      v55 = a3;
      v26 = 1;
      if ((int)v25 >= 2)
      {
        do
        {
          ++v26;
          v27 = v25 > 3;
          LODWORD(v25) = v25 >> 1;
        }
        while (v27);
      }
      v56 = a2;
      v28 = v26 + v20;
      if ((sub_20BEA5A74(a1, a4, 16, &v58) & 1) != 0)
      {
        v29 = 1;
LABEL_44:
        if ((a5 & 1) == 0 && (v57 & 1) == 0)
        {
          for (i = *a1; i != v56; *a1 = i)
          {
            v35 = *i;
            if (v35 >= 0x80)
            {
              v37 = 0;
              while ((unsigned __int16)word_20CA5493A[v37] != v35)
              {
                if (++v37 == 20)
                  return a9;
              }
            }
            else
            {
              v36 = 0;
              while (byte_20CA54934[v36] != v35)
              {
                if (++v36 == 6)
                  return a9;
              }
            }
            ++i;
          }
        }
        v38 = v21 & ~(-1 << v26);
        v39 = 1 << (v26 - 1);
        v40 = (v21 >> v26) + ((v21 >> v26) & 1u | ((v29 & 1) == 0));
        if (v38 != v39)
          v40 = v21 >> v26;
        if (v38 > v39)
          v41 = (v21 >> v26) + 1;
        else
          v41 = v40;
        v20 = v28 + (((unint64_t)v41 >> v23) & 1);
        v21 = v41 >> (((unint64_t)v41 >> v23) & 1);
        a3 = v55;
        goto LABEL_63;
      }
      v29 = 1;
      while (2)
      {
        v30 = *a1;
        if (a5)
        {
          v31 = *v30;
          if (v31 == 46)
          {
            sub_20BEA5A74(a1, a4, 16, &v58);
            v30 = *a1;
            v22 = 1;
            goto LABEL_31;
          }
        }
        else
        {
LABEL_31:
          v31 = *v30;
        }
        if ((v31 - 48 >= 0xA || v31 >= 0x40)
          && (v31 - 65 > 0x25 || ((1 << (v31 - 65)) & 0x3F0000003FLL) == 0))
        {
          goto LABEL_44;
        }
        v29 &= v31 == 48;
        if ((v22 & 1) == 0)
          v28 += 4;
        if (sub_20BEA5A74(a1, a4, 16, &v58))
          goto LABEL_44;
        continue;
      }
    }
    if ((sub_20BEA5A74(a1, a4, 16, &v58) & 1) != 0)
      goto LABEL_63;
LABEL_19:
    v18 = *a1;
    v19 = **a1;
  }
  if (!a5)
    goto LABEL_97;
  if (v19 == 46)
  {
    sub_20BEA5A74(a1, a4, 16, &v58);
    v22 = 1;
    goto LABEL_19;
  }
  if (v19 != 80 && v19 != 112)
  {
LABEL_97:
    if (v18 != a2 && (v57 & 1) == 0)
    {
      do
      {
        v52 = *v18;
        if (v52 >= 0x80)
        {
          v54 = 0;
          while ((unsigned __int16)word_20CA5493A[v54] != v52)
          {
            if (++v54 == 20)
              return a9;
          }
        }
        else
        {
          v53 = 0;
          while (byte_20CA54934[v53] != v52)
          {
            if (++v53 == 6)
              return a9;
          }
        }
        *a1 = ++v18;
      }
      while (v18 != a2);
    }
LABEL_63:
    *a8 = 0;
    if (a5)
      goto LABEL_68;
    goto LABEL_84;
  }
  *a8 = 0;
LABEL_68:
  sub_20BEA5A74(a1, a4, 16, &v58);
  v42 = 0;
  v43 = **a1;
  if (v43 == 43)
  {
LABEL_71:
    sub_20BEA5A74(a1, a4, 16, &v58);
  }
  else if (v43 == 45)
  {
    v42 = 1;
    goto LABEL_71;
  }
  v44 = 0;
  do
  {
    v45 = **a1;
    if ((v45 - 48) > 9)
      break;
    if (v44 >= 0)
      v46 = v44;
    else
      v46 = -v44;
    v47 = v45 + 10 * v44 - 48;
    if (v46 < 0x17BB1)
      v44 = v47;
  }
  while (!sub_20BEA5A74(a1, a4, 16, &v58));
  if (v42)
    v48 = -v44;
  else
    v48 = v44;
  v20 += v48;
LABEL_84:
  if (v20)
    v49 = v21 == 0;
  else
    v49 = 1;
  if (v49)
  {
    if (a3)
    {
      if (!v21)
        return -0.0;
      return (double)-v21;
    }
    return (double)v21;
  }
  else
  {
    v50 = COERCE_DOUBLE(sub_20BEA5790(v21, v20));
    if (a3)
      return -v50;
    else
      return v50;
  }
}

double pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtodTrimmed(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  BOOL v6;
  double v7;
  uint64_t v8;
  int v9;
  int v10;
  double v11;
  double v12;
  double v14;

  v3 = a3;
  v14 = 0.0;
  v6 = sub_20BEA62E4(a1, a2, a3, &v14);
  v7 = v14;
  if (!v6)
  {
    v8 = 2 * (*(_QWORD *)&v14 & 0xFFFFFFFFFFFFFLL);
    if ((*(_QWORD *)&v14 & 0x7FF0000000000000) != 0)
    {
      v8 = (2 * (*(_QWORD *)&v14 & 0xFFFFFFFFFFFFFLL)) | 0x20000000000000;
      v9 = ((*(_QWORD *)&v14 >> 52) & 0x7FF) - 1076;
    }
    else
    {
      v9 = -1075;
    }
    v10 = sub_20BEA6758(a1, a2, v3, v8 | 1, v9);
    if ((v10 & 0x80000000) == 0 && (v10 || (LOBYTE(v7) & 1) != 0))
    {
      *(_QWORD *)&v11 = *(_QWORD *)&v7 + 1;
      *(_QWORD *)&v12 = *(_QWORD *)&v7 - 1;
      if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFLL) == 0)
        v12 = 0.0;
      if (v7 < 0.0)
        v11 = v12;
      if (v7 == INFINITY)
        return INFINITY;
      else
        return v11;
    }
  }
  return v7;
}

BOOL sub_20BEA62E4(uint64_t a1, int a2, uint64_t a3, double *a4)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  uint64_t v11;
  unint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  double v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  _BOOL8 result;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t i;
  unint64_t v36;
  int v37;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  double v45;
  double v46;
  int v47;
  uint64_t v48;
  int v49;

  if (!a2)
    goto LABEL_42;
  v6 = a3;
  v7 = a2 + a3;
  if (a2 + (int)a3 >= 310)
  {
    *a4 = INFINITY;
    return 1;
  }
  if (v7 <= -324)
    goto LABEL_42;
  if (a2 >= 16)
    goto LABEL_28;
  if (a3 >= 0xFFFFFFEA)
  {
    if (a2 < 1)
    {
      v10 = 0.0;
    }
    else
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v9 = *(char *)(a1 + v8) + 10 * v9 - 48;
        if (v8 + 1 >= a2)
          break;
        ++v8;
      }
      while (v9 < 0x1999999999999999);
      v10 = (double)v9;
    }
    v18 = v10 / dbl_20CA54970[-(int)a3];
    goto LABEL_81;
  }
  if (a3 <= 0x16)
  {
    if (a2 < 1)
    {
      v13 = 0.0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      do
      {
        v12 = *(char *)(a1 + v11) + 10 * v12 - 48;
        if (v11 + 1 >= a2)
          break;
        ++v11;
      }
      while (v12 < 0x1999999999999999);
      v13 = (double)v12;
    }
    v46 = dbl_20CA54970[a3];
LABEL_80:
    v18 = v13 * v46;
LABEL_81:
    *a4 = v18;
    return 1;
  }
  if ((a3 & 0x80000000) == 0)
  {
    v14 = 15 - a2;
    if ((int)a3 - (int)v14 <= 22)
    {
      if (a2 < 1)
      {
        v17 = 0.0;
      }
      else
      {
        v15 = 0;
        v16 = 0;
        do
        {
          v16 = *(char *)(a1 + v15) + 10 * v16 - 48;
          if (v15 + 1 >= a2)
            break;
          ++v15;
        }
        while (v16 < 0x1999999999999999);
        v17 = (double)v16;
      }
      v13 = v17 * dbl_20CA54970[v14];
      v46 = dbl_20CA54970[(int)a3 - (int)v14];
      goto LABEL_80;
    }
  }
  if (a2 < 1)
  {
    LODWORD(v19) = 0;
    v20 = 0;
  }
  else
  {
LABEL_28:
    v19 = 0;
    v20 = 0;
    do
    {
      v21 = *(char *)(a1 + v19++);
      v20 = v21 + 10 * v20 - 48;
    }
    while (v19 < a2 && v20 < 0x1999999999999999);
  }
  if ((_DWORD)v19 == a2)
  {
    v22 = 0;
  }
  else
  {
    if (*(char *)(a1 + (int)v19) > 52)
      ++v20;
    v6 = (v7 - v19);
    v22 = 4;
  }
  v23 = 0;
  if (!(v20 >> 54))
  {
    v24 = v20;
    do
    {
      v20 = v24 << 10;
      v23 -= 10;
      v25 = v24 >> 44;
      v24 <<= 10;
    }
    while (!v25);
  }
  for (; (v20 & 0x8000000000000000) == 0; --v23)
    v20 *= 2;
  if ((int)v6 <= -349)
  {
LABEL_42:
    *a4 = 0.0;
    return 1;
  }
  v48 = 0;
  v27 = v22 << -(char)v23;
  v49 = 0;
  v47 = 0;
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::PowersOfTenCache::GetCachedPowerForDecimalExponent(v6, (uint64_t)&v48, &v47);
  v28 = v6 - v47;
  if ((_DWORD)v6 != v47)
  {
    v29 = v28 - 1;
    if ((v28 - 1) >= 7)
      abort();
    v23 += dword_20CA54A28[v29];
    v20 = qword_20CA54A48[v29] * HIDWORD(v20)
        + ((qword_20CA54A48[v29] * (unint64_t)v20) >> 32)
        + ((((qword_20CA54A48[v29] * v20) & 0x80000000uLL) + 0x80000000) >> 32);
    if (19 - a2 < v28)
      v27 += 4;
  }
  v30 = ((v48 * (unint64_t)HIDWORD(v20)) >> 32)
      + HIDWORD(v48) * (unint64_t)HIDWORD(v20)
      + ((HIDWORD(v48) * (unint64_t)v20) >> 32)
      + ((((v48 * (unint64_t)v20) >> 32)
        + (v48 * HIDWORD(v20))
        + (HIDWORD(v48) * v20)
        + 0x80000000) >> 32);
  if (v27)
    v31 = 9;
  else
    v31 = 8;
  if (v30 >> 54)
  {
    v32 = v23 + v49 + 64;
    v33 = ((v48 * (unint64_t)HIDWORD(v20)) >> 32)
        + HIDWORD(v48) * (unint64_t)HIDWORD(v20)
        + ((HIDWORD(v48) * (unint64_t)v20) >> 32)
        + ((((v48 * (unint64_t)v20) >> 32)
          + (v48 * HIDWORD(v20))
          + (HIDWORD(v48) * v20)
          + 0x80000000) >> 32);
  }
  else
  {
    v32 = v23 + v49 + 64;
    do
    {
      v33 = v30 << 10;
      v32 -= 10;
      v34 = v30 >> 44;
      v30 <<= 10;
    }
    while (!v34);
  }
  for (i = v31 + v27; (v33 & 0x8000000000000000) == 0; --v32)
    v33 *= 2;
  v36 = i << (v23 + v49 + 64 - v32);
  v37 = v32 + 1138;
  if (v32 < -1137)
    v37 = 0;
  if (v32 > -1086)
    v37 = 53;
  v38 = (v36 >> (4 - v37)) + 9;
  v39 = v37 <= 3;
  if (v37 > 3)
  {
    v40 = 64 - v37;
  }
  else
  {
    v33 >>= 4 - v37;
    v32 += 4 - v37;
    v40 = 60;
  }
  if (v39)
    v41 = v38;
  else
    v41 = v36;
  v42 = v33 & ~(-1 << v40);
  v43 = 8 << (v40 - 1);
  if (8 * v42 < (unint64_t)(v43 + v41))
    v44 = v33 >> v40;
  else
    v44 = (v33 >> v40) + 1;
  v45 = COERCE_DOUBLE(sub_20BEA5790(v44, v40 + v32));
  *a4 = v45;
  result = 1;
  if (v43 - v41 < (unint64_t)(8 * v42) && 8 * v42 < (unint64_t)(v43 + v41))
    return v45 == INFINITY;
  return result;
}

uint64_t sub_20BEA6758(uint64_t a1, int a2, int a3, unint64_t a4, int a5)
{
  unsigned __int16 *v8;
  int v9;
  _DWORD *v10;
  int v11;
  const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *v12;
  _DWORD v14[129];
  _DWORD v15[129];

  v15[0] = 0;
  v14[0] = 0;
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignDecimalString((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v15, a1, a2);
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::AssignUInt64(v14, a4);
  if (a3 < 0)
  {
    v9 = -a3;
    v8 = (unsigned __int16 *)v14;
  }
  else
  {
    v8 = (unsigned __int16 *)v15;
    v9 = a3;
  }
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::MultiplyByPowerOfTen(v8, v9);
  if (a5 < 1)
  {
    v11 = -a5;
    v10 = v15;
  }
  else
  {
    v10 = v14;
    v11 = a5;
  }
  pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::ShiftLeft(v10, v11);
  return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum::Compare((uint64_t)v15, (const pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Bignum *)v14, v12);
}

double pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Strtod(uint64_t a1, int a2, int a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[780];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  LODWORD(v6) = 0;
  v4 = 0;
  sub_20BEA686C(a1, a2, a3, (uint64_t)v7, (uint64_t)&v5, &v4);
  return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtodTrimmed(v5, v6, v4);
}

uint64_t sub_20BEA686C(uint64_t result, int a2, int a3, uint64_t a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t i;

  if (a2 < 1)
  {
LABEL_5:
    v7 = 0;
  }
  else
  {
    v6 = 0;
    while (*(_BYTE *)(result + v6) == 48)
    {
      if (a2 == ++v6)
        goto LABEL_5;
    }
    result += v6;
    v7 = (a2 - v6);
  }
  v8 = (unsigned __int8 *)(v7 + result - 1);
  v9 = a3 - 1;
  v10 = v7;
  do
  {
    if (v10 <= 0)
    {
      v12 = 0;
      v9 = v7 + a3;
      goto LABEL_15;
    }
    v11 = *v8--;
    ++v9;
    --v10;
  }
  while (v11 == 48);
  v12 = v10 + 1;
  if ((v10 + 1) < 0x30D)
  {
LABEL_15:
    *(_QWORD *)a5 = result;
    *(_DWORD *)(a5 + 8) = v12;
    *a6 = v9;
    return result;
  }
  for (i = 0; i != 779; ++i)
    *(_BYTE *)(a4 + i) = *(_BYTE *)(result + i);
  *(_BYTE *)(a4 + 779) = 49;
  *a6 = v10 + v9 - 779;
  *(_QWORD *)a5 = a4;
  *(_DWORD *)(a5 + 8) = 780;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::Strtof(uint64_t a1, int a2, int a3)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[780];
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v5 = 0;
  LODWORD(v6) = 0;
  v4 = 0;
  sub_20BEA686C(a1, a2, a3, (uint64_t)v7, (uint64_t)&v5, &v4);
  return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtofTrimmed(v5, v6, v4);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StrtofTrimmed(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  uint64_t result;
  float v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  float v12;
  int v13;
  float v14;
  int v15;
  int v16;
  uint64_t v17;
  double v18;
  unint64_t v19;
  int v20;
  int v21;
  double v22;

  v3 = a3;
  v22 = 0.0;
  result = sub_20BEA62E4(a1, a2, a3, &v22);
  if (v22 >= 3.40282347e38)
  {
    if (v22 >= 3.40282357e38)
      v8 = 2139095040;
    else
      v8 = 2139095039;
    v7 = *(float *)&v8;
  }
  else
  {
    v7 = v22;
  }
  if (v22 == v7)
    return result;
  if (v22 == INFINITY)
  {
    v9 = -1;
    v10 = INFINITY;
    goto LABEL_19;
  }
  if ((*(_QWORD *)&v22 & 0x8000000000000000) == 0)
  {
    *(_QWORD *)&v10 = *(_QWORD *)&v22 + 1;
    if (v22 != 0.0)
    {
      v9 = -1;
      goto LABEL_19;
    }
    v11 = -0.0;
LABEL_20:
    v12 = v11;
    goto LABEL_25;
  }
  if ((*(_QWORD *)&v22 & 0x7FFFFFFFFFFFFFFFLL) != 0)
  {
    *(_QWORD *)&v10 = *(_QWORD *)&v22 - 1;
    if (v22 == -INFINITY)
    {
      v11 = -INFINITY;
      goto LABEL_20;
    }
  }
  else
  {
    v10 = 0.0;
  }
  v9 = 1;
LABEL_19:
  *(_QWORD *)&v11 = v9 + *(_QWORD *)&v22;
  if (COERCE_DOUBLE(v9 + *(_QWORD *)&v22) < 3.40282347e38)
    goto LABEL_20;
  if (v11 >= 3.40282357e38)
    v13 = 2139095040;
  else
    v13 = 2139095039;
  v12 = *(float *)&v13;
LABEL_25:
  if (v10 < 3.40282347e38)
  {
    v14 = v10;
    if ((result & 1) != 0)
      goto LABEL_44;
LABEL_32:
    if (v10 == INFINITY)
      goto LABEL_33;
    if ((*(_QWORD *)&v10 & 0x8000000000000000) != 0)
    {
      if ((*(_QWORD *)&v10 & 0x7FFFFFFFFFFFFFFFLL) == 0)
      {
        v18 = 0.0;
        goto LABEL_43;
      }
      v17 = -1;
    }
    else
    {
      v17 = 1;
    }
    *(_QWORD *)&v18 = v17 + *(_QWORD *)&v10;
    if (v18 >= 3.40282347e38)
    {
      if (v18 < 3.40282357e38)
      {
        v16 = 2139095039;
        goto LABEL_34;
      }
LABEL_33:
      v16 = 2139095040;
LABEL_34:
      v14 = *(float *)&v16;
      goto LABEL_44;
    }
LABEL_43:
    v14 = v18;
    goto LABEL_44;
  }
  if (v10 >= 3.40282357e38)
    v15 = 2139095040;
  else
    v15 = 2139095039;
  v14 = *(float *)&v15;
  if ((result & 1) == 0)
    goto LABEL_32;
LABEL_44:
  if (v12 != v14)
  {
    if (v12 == 0.0)
    {
      v19 = 0x10000000000000;
      v20 = -202;
    }
    else
    {
      if ((LODWORD(v12) & 0x7F800000) != 0)
        v21 = (2 * (LODWORD(v12) & 0x7FFFFF)) | 0x1000000;
      else
        v21 = 2 * (LODWORD(v12) & 0x7FFFFF);
      v19 = v21 | 1u;
      if ((LODWORD(v12) & 0x7F800000) != 0)
        v20 = (LODWORD(v12) >> 23) - 151;
      else
        v20 = -150;
    }
    return sub_20BEA6758(a1, a2, v3, v19, v20);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_versionNumber(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  return 10902;
}

const char *pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_versionString(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  return "1.9.2";
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compressBound(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  if (this <= 0x7E000000)
    return this + this / 0xFF + 16;
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_sizeofState(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  return 16416;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *__src, char *a3, char *a4, signed int a5, int a6)
{
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v10;
  _DWORD *v12;
  int v13;
  signed int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  const char *v18;
  char *v19;
  char *v20;
  char *v21;
  int v22;
  unint64_t v23;
  _DWORD *v24;
  int v25;
  int v26;
  int v27;
  _DWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  char *v39;
  unsigned int v41;
  char *v42;
  char v43;
  int v44;
  unsigned int v45;
  char *v46;
  uint64_t v47;
  _DWORD *v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unsigned int v53;
  int v54;
  unint64_t v55;
  char v56;
  unsigned int v57;
  _WORD *v58;
  const char *v59;
  uint64_t v60;
  char *v61;
  unsigned int v62;
  char *v63;
  char *v64;
  char *v65;
  int v66;
  unint64_t v67;
  _DWORD *v68;
  int v69;
  int v70;
  int v71;
  _DWORD *v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  int v77;
  int v78;
  char v79;
  int v80;
  int v81;
  int v82;
  char *v83;
  char *v84;
  unsigned int v86;
  char *v87;
  char v88;
  int v89;
  unsigned int v90;
  char *v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  char *v95;
  _QWORD *v96;
  unint64_t v97;
  unsigned int v98;
  unint64_t v99;
  unsigned int v100;
  _WORD *v101;
  __int16 v102;
  unsigned int v103;
  uint64_t v104;
  char *v105;
  unsigned int v106;
  char *v107;
  unint64_t v108;
  const char *v109;
  char *v110;
  int v111;
  unint64_t v112;
  char *v113;
  uint64_t *v114;
  _DWORD *v115;
  uint64_t v116;
  int v117;
  _QWORD *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  char *v128;
  uint64_t *v129;
  int v131;
  char *v132;
  char v133;
  int v134;
  unsigned int v135;
  char *v136;
  uint64_t v137;
  char *v138;
  _QWORD *v139;
  _QWORD *v140;
  unint64_t v141;
  unsigned int v142;
  _DWORD *v143;
  int v144;
  unint64_t v145;
  char v146;
  unsigned int v147;
  _WORD *v148;
  uint64_t v149;
  char *v150;
  unint64_t v151;
  uint64_t v152;
  size_t v153;
  unint64_t v154;
  char *v155;
  unint64_t v156;
  char *v157;
  unint64_t v158;
  char *v159;
  int v160;
  unint64_t v161;
  char *v162;
  _DWORD *v163;
  uint64_t v164;
  int v165;
  _QWORD *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  int v171;
  int v172;
  char v173;
  int v174;
  int v175;
  int v176;
  char *v177;
  uint64_t *v178;
  int v180;
  char *v181;
  char v182;
  int v183;
  unsigned int v184;
  char *v185;
  uint64_t v186;
  char *v187;
  _QWORD *v188;
  _QWORD *v189;
  unint64_t v190;
  unsigned int v191;
  _QWORD *v192;
  unint64_t v193;
  unsigned int v194;
  _WORD *v195;
  __int16 v196;
  unsigned int v197;
  uint64_t v198;
  char *v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char *v203;
  unint64_t v204;
  void *v205;
  size_t v206;
  unint64_t v207;
  char *v208;
  unint64_t v209;
  void *v210;
  unint64_t v212;
  char *v213;
  unint64_t v214;
  char v215;
  uint64_t v216;
  char v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char v225;
  uint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  char *v230;
  int v231;
  char *v232;
  char v233;
  char *v234;
  int v235;
  char *v236;
  unsigned int v237;
  unsigned int v238;
  int v239;
  char *v240;
  int v241;
  int v242;
  int v243;
  char *v244;
  char *v245;
  const char *v246;
  int v247;
  char *v248;

  v8 = a4;
  v10 = 0;
  v248 = __src;
  if (this && (this & 7) == 0)
  {
    bzero(this, 0x4020uLL);
    __src = v248;
    v10 = this;
  }
  v12 = (_DWORD *)((char *)v10 + 0x4000);
  if (a6 <= 1)
    v13 = 1;
  else
    v13 = a6;
  if (v8 <= 0x7E000000)
    v14 = v8 + v8 / 0xFF + 16;
  else
    v14 = 0;
  v15 = *v12;
  v16 = &__src[-v15];
  if (v14 <= a5)
  {
    if ((int)v8 <= 65546)
    {
      if (v8 > 0x7E000000)
        return 0;
      v63 = &__src[v8];
      *((_DWORD *)v10 + 4102) += v8;
      *v12 = v15 + v8;
      *((_WORD *)v10 + 8195) = 3;
      v19 = __src;
      v64 = a3;
      if (v8 < 0xD)
        goto LABEL_244;
      v238 = v8;
      v65 = v63 - 11;
      *((_WORD *)v10 + ((-1640531535 * *(_DWORD *)__src) >> 19)) = v15;
      v66 = v13 << 6;
      v67 = (unint64_t)(v63 - 12);
      v230 = v63 - 8;
      v232 = v63 - 5;
      v242 = (int)a3;
      v245 = &__src[v8];
      v228 = v63 - 6;
      v19 = __src;
      v64 = a3;
      v235 = v13 << 6;
LABEL_71:
      v68 = v19 + 1;
      v69 = *(_DWORD *)(v19 + 1);
      v70 = 1;
      v71 = v66;
      do
      {
        v72 = v68;
        v68 = (_DWORD *)((char *)v68 + v70);
        if (v68 > (_DWORD *)v65)
          goto LABEL_243;
        v70 = v71++ >> 6;
        v73 = (-1640531535 * v69) >> 19;
        v74 = *((unsigned __int16 *)v10 + v73);
        v69 = *v68;
        *((_WORD *)v10 + v73) = (_WORD)v72 - (_WORD)v16;
      }
      while (*(_DWORD *)&v16[v74] != *v72);
      v75 = 0;
      v76 = &v16[v74];
      v77 = (_DWORD)v72 - (_DWORD)v19;
      v78 = (_DWORD)v72 - (_DWORD)v19 - 15;
      v79 = (_BYTE)v72 - (_BYTE)v19 - 14;
      v80 = v78;
      do
      {
        v81 = v80;
        v82 = v75;
        v83 = &v76[v75];
        v84 = (char *)v72 + v75;
        if (&v76[v75] <= __src || v84 <= v19)
          break;
        --v80;
        --v75;
      }
      while (*(v84 - 1) == *(v83 - 1));
      v86 = (_DWORD)v84 - (_DWORD)v19;
      v87 = v64 + 1;
      if ((v77 + v82) < 0xF)
      {
        *v64 = 16 * v86;
      }
      else
      {
        v88 = v82 + v78;
        *v64 = -16;
        if (v82 + v78 > 254)
        {
          if (v81 >= 509)
            v89 = 509;
          else
            v89 = v81;
          v90 = v77 - v89 + v82 + 239;
          v217 = v79;
          memset(v87, 255, v90 / 0xFF + 1);
          v86 = (_DWORD)v84 - (_DWORD)v19;
          __src = v248;
          v87 = &v64[v90 / 0xFFuLL + 2];
          v88 = v90 / 0xFF + v217 + v82;
        }
        *v87++ = v88;
      }
      v91 = &v87[v86];
      do
      {
        v92 = *(_QWORD *)v19;
        v19 += 8;
        *(_QWORD *)v87 = v92;
        v87 += 8;
      }
      while (v87 < v91);
      while (1)
      {
        *(_WORD *)v91 = (_WORD)v84 - (_WORD)v83;
        v95 = v91 + 2;
        v96 = v84 + 4;
        v94 = v83 + 4;
        if (v67 <= (unint64_t)(v84 + 4))
        {
          v93 = v84 + 4;
          goto LABEL_108;
        }
        v97 = *v96 ^ *v94;
        if (v97)
          break;
        v93 = v84 + 12;
        v94 = v83 + 12;
LABEL_108:
        while ((unint64_t)v93 < v67)
        {
          v99 = *v93 ^ *v94;
          if (v99)
          {
            v93 = (_QWORD *)((char *)v93 + (__clz(__rbit64(v99)) >> 3));
            goto LABEL_112;
          }
          ++v93;
          ++v94;
        }
        if (v93 < (_QWORD *)v230 && *(_DWORD *)v94 == *(_DWORD *)v93)
        {
          v93 = (_QWORD *)((char *)v93 + 4);
          v94 = (_QWORD *)((char *)v94 + 4);
        }
        if (v93 < (_QWORD *)v228 && *(unsigned __int16 *)v94 == *(unsigned __int16 *)v93)
        {
          v93 = (_QWORD *)((char *)v93 + 2);
          v94 = (_QWORD *)((char *)v94 + 2);
        }
        if (v93 < (_QWORD *)v232 && *(unsigned __int8 *)v94 == *(unsigned __int8 *)v93)
          LODWORD(v93) = (_DWORD)v93 + 1;
LABEL_112:
        v98 = (_DWORD)v93 - (_DWORD)v96;
        v84 += v98 + 4;
        v100 = v98 - 15;
        if (v98 < 0xF)
          goto LABEL_116;
        *v64 += 15;
        *(_DWORD *)v95 = -1;
        if (v100 >= 0x3FC)
        {
          v101 = v91 + 6;
          v102 = v98 - 1035;
          v103 = (v98 - 1035) / 0x3FC;
          v104 = 2 * v103;
          memset(v91 + 6, 255, v104 * 2 + 4);
          __src = v248;
          LOWORD(v100) = v102 - 1020 * v103;
          v95 = (char *)&v101[v104];
        }
        v105 = &v95[(unsigned __int16)v100 / 0xFFu];
        *v105 = v100 + (unsigned __int16)v100 / 0xFFu;
        v95 = v105 + 1;
LABEL_117:
        if (v84 >= v65)
        {
          v19 = v84;
          v64 = v95;
          LODWORD(a3) = v242;
LABEL_243:
          v8 = v238;
          v63 = v245;
LABEL_244:
          v206 = v63 - v19;
          v207 = v63 - v19 - 15;
          if ((unint64_t)(v63 - v19) < 0xF)
          {
            *v64 = 16 * v206;
          }
          else
          {
            *v64 = -16;
            v208 = v64 + 1;
            if (v207 >= 0xFF)
            {
              v209 = &__src[v8] - v19 - 270;
              memset(v208, 255, v209 / 0xFF + 1);
              v207 = v209 % 0xFF;
              v208 = &v64[v209 / 0xFF + 2];
            }
            *v208 = v207;
            v64 = v208;
          }
          v210 = v64 + 1;
          goto LABEL_260;
        }
        *((_WORD *)v10 + ((-1640531535 * *(_DWORD *)(v84 - 2)) >> 19)) = (_WORD)v84 - 2 - (_WORD)v16;
        v106 = (-1640531535 * *(_DWORD *)v84) >> 19;
        v83 = &v16[*((unsigned __int16 *)v10 + v106)];
        *((_WORD *)v10 + v106) = (_WORD)v84 - (_WORD)v16;
        if (*(_DWORD *)v83 != *(_DWORD *)v84)
        {
          v19 = v84;
          v64 = v95;
          LODWORD(a3) = v242;
          v66 = v235;
          goto LABEL_71;
        }
        *v95 = 0;
        v91 = v95 + 1;
        v64 = v95;
      }
      v98 = __clz(__rbit64(v97)) >> 3;
      v84 += v98 + 4;
LABEL_116:
      *v64 += v98;
      goto LABEL_117;
    }
    if (v8 > 0x7E000000)
      return 0;
    v226 = v8;
    v157 = &__src[v8];
    v158 = (unint64_t)(v157 - 11);
    v223 = v157 - 5;
    *((_DWORD *)v10 + 4102) += v8;
    *v12 = v15 + v8;
    *((_WORD *)v10 + 8195) = 2;
    v159 = __src + 2;
    *(_DWORD *)((char *)v10 + (((0xCF1BBCDCBB000000 * *(_QWORD *)__src) >> 50) & 0x3FFC)) = v15;
    v160 = v13 << 6;
    v161 = (unint64_t)(v157 - 12);
    v240 = v157;
    v243 = (int)a3;
    v219 = v157 - 6;
    v221 = v157 - 8;
    v162 = a3;
    v114 = (uint64_t *)__src;
    v247 = v13 << 6;
LABEL_184:
    v163 = (_DWORD *)((char *)v114 + 1);
    v164 = *(uint64_t *)((char *)v114 + 1);
    v165 = v160;
    while (1)
    {
      v166 = v159;
      v167 = ((0xCF1BBCDCBB000000 * v164) >> 50) & 0x3FFC;
      v168 = *(unsigned int *)((char *)v10 + v167);
      v164 = *v166;
      *(_DWORD *)((char *)v10 + v167) = (_DWORD)v163 - (_DWORD)v16;
      if ((int)v168 + 0xFFFF >= ((_DWORD)v163 - (_DWORD)v16) && *(_DWORD *)&v16[v168] == *v163)
        break;
      v159 = (char *)v166 + (v165++ >> 6);
      v163 = v166;
      if ((unint64_t)v159 > v158)
        goto LABEL_236;
    }
    v169 = 0;
    v170 = &v16[v168];
    v171 = (_DWORD)v163 - (_DWORD)v114;
    v172 = (_DWORD)v163 - (_DWORD)v114 - 15;
    v173 = (_BYTE)v163 - (_BYTE)v114 - 14;
    v174 = v172;
    do
    {
      v175 = v174;
      v176 = v169;
      v177 = &v170[v169];
      v178 = (uint64_t *)((char *)v163 + v169);
      if (&v170[v169] <= __src || v178 <= v114)
        break;
      --v174;
      --v169;
    }
    while (*((unsigned __int8 *)v178 - 1) == *(v177 - 1));
    v180 = (_DWORD)v178 - (_DWORD)v114;
    v181 = v162 + 1;
    if ((v171 + v176) < 0xF)
    {
      *v162 = 16 * v180;
    }
    else
    {
      v182 = v176 + v172;
      *v162 = -16;
      if (v176 + v172 > 254)
      {
        if (v175 >= 509)
          v183 = 509;
        else
          v183 = v175;
        v184 = v171 - v183 + v176 + 239;
        v233 = v173;
        memset(v181, 255, v184 / 0xFF + 1);
        v180 = (_DWORD)v178 - (_DWORD)v114;
        __src = v248;
        v181 = &v162[v184 / 0xFFuLL + 2];
        v182 = v184 / 0xFF + v233 + v176;
      }
      *v181++ = v182;
    }
    v185 = &v181[v180];
    do
    {
      v186 = *v114++;
      *(_QWORD *)v181 = v186;
      v181 += 8;
    }
    while (v181 < v185);
    v187 = v162;
    v114 = v178;
    while (1)
    {
      *(_WORD *)v185 = (_WORD)v114 - (_WORD)v177;
      v162 = v185 + 2;
      v188 = (uint64_t *)((char *)v114 + 4);
      v189 = v177 + 4;
      if (v161 > (unint64_t)v114 + 4)
        break;
      v192 = (uint64_t *)((char *)v114 + 4);
LABEL_211:
      while ((unint64_t)v192 < v161)
      {
        v193 = *v192 ^ *v189;
        if (v193)
        {
          v192 = (_QWORD *)((char *)v192 + (__clz(__rbit64(v193)) >> 3));
          goto LABEL_215;
        }
        ++v192;
        ++v189;
      }
      if (v192 < (_QWORD *)v221 && *(_DWORD *)v189 == *(_DWORD *)v192)
      {
        v192 = (_QWORD *)((char *)v192 + 4);
        v189 = (_QWORD *)((char *)v189 + 4);
      }
      if (v192 < (_QWORD *)v219 && *(unsigned __int16 *)v189 == *(unsigned __int16 *)v192)
      {
        v192 = (_QWORD *)((char *)v192 + 2);
        v189 = (_QWORD *)((char *)v189 + 2);
      }
      if (v192 < (_QWORD *)v223 && *(unsigned __int8 *)v189 == *(unsigned __int8 *)v192)
        LODWORD(v192) = (_DWORD)v192 + 1;
LABEL_215:
      v191 = (_DWORD)v192 - (_DWORD)v188;
      v114 = (uint64_t *)((char *)v114 + v191 + 4);
      v194 = v191 - 15;
      if (v191 < 0xF)
        goto LABEL_219;
      *v187 += 15;
      *(_DWORD *)v162 = -1;
      if (v194 >= 0x3FC)
      {
        v195 = v185 + 6;
        v196 = v191 - 1035;
        v197 = (v191 - 1035) / 0x3FC;
        v198 = 2 * v197;
        memset(v185 + 6, 255, v198 * 2 + 4);
        __src = v248;
        LOWORD(v194) = v196 - 1020 * v197;
        v162 = (char *)&v195[v198];
      }
      v199 = &v162[(unsigned __int16)v194 / 0xFFu];
      *v199 = v194 + (unsigned __int16)v194 / 0xFFu;
      v162 = v199 + 1;
LABEL_220:
      if ((unint64_t)v114 >= v158)
        goto LABEL_236;
      *(_DWORD *)((char *)v10 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v114 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v114 - 2 - (_DWORD)v16;
      v200 = ((0xCF1BBCDCBB000000 * *v114) >> 50) & 0x3FFC;
      v201 = *(unsigned int *)((char *)v10 + v200);
      *(_DWORD *)((char *)v10 + v200) = (_DWORD)v114 - (_DWORD)v16;
      if ((int)v201 + 0xFFFF < ((_DWORD)v114 - (_DWORD)v16)
        || (v177 = &v16[v201], *(_DWORD *)&v16[v201] != *(_DWORD *)v114))
      {
        v159 = (char *)v114 + 2;
        v160 = v247;
        if ((unint64_t)v114 + 2 > v158)
        {
LABEL_236:
          v153 = v240 - (char *)v114;
          v202 = v240 - (char *)v114 - 15;
          if ((unint64_t)(v240 - (char *)v114) < 0xF)
          {
            *v162 = 16 * v153;
          }
          else
          {
            *v162 = -16;
            v203 = v162 + 1;
            if (v202 >= 0xFF)
            {
              v204 = &__src[v226] - (char *)v114 - 270;
              memset(v203, 255, v204 / 0xFF + 1);
              v202 = v204 % 0xFF;
              v203 = &v162[v204 / 0xFF + 2];
            }
            *v203 = v202;
            v162 = v203;
          }
          v205 = v162 + 1;
LABEL_263:
          memcpy(v205, v114, v153);
          return ((_DWORD)v205 + v153 - v243);
        }
        goto LABEL_184;
      }
      *v162 = 0;
      v185 = v162 + 1;
      v187 = v162;
    }
    v190 = *v188 ^ *v189;
    if (!v190)
    {
      v192 = (uint64_t *)((char *)v114 + 12);
      v189 = v177 + 12;
      goto LABEL_211;
    }
    v191 = __clz(__rbit64(v190)) >> 3;
    v114 = (uint64_t *)((char *)v114 + v191 + 4);
LABEL_219:
    *v187 += v191;
    goto LABEL_220;
  }
  if ((int)v8 > 65546)
  {
    if (v8 > 0x7E000000)
      return 0;
    v216 = v8;
    v107 = &__src[v8];
    v108 = (unint64_t)(v107 - 11);
    v222 = v107 - 5;
    v109 = &a3[a5];
    *((_DWORD *)v10 + 4102) += v8;
    *v12 = v15 + v8;
    *((_WORD *)v10 + 8195) = 2;
    v110 = __src + 2;
    *(_DWORD *)((char *)v10 + (((0xCF1BBCDCBB000000 * *(_QWORD *)__src) >> 50) & 0x3FFC)) = v15;
    v111 = v13 << 6;
    v112 = (unint64_t)(v107 - 12);
    v236 = v107;
    v218 = v107 - 6;
    v220 = v107 - 8;
    v243 = (int)a3;
    v246 = v109;
    v113 = a3;
    v114 = (uint64_t *)__src;
    v239 = v13 << 6;
LABEL_122:
    v115 = (_DWORD *)((char *)v114 + 1);
    v116 = *(uint64_t *)((char *)v114 + 1);
    v117 = v111;
    while (1)
    {
      v118 = v110;
      v119 = ((0xCF1BBCDCBB000000 * v116) >> 50) & 0x3FFC;
      v120 = *(unsigned int *)((char *)v10 + v119);
      v116 = *v118;
      *(_DWORD *)((char *)v10 + v119) = (_DWORD)v115 - (_DWORD)v16;
      if ((int)v120 + 0xFFFF >= ((_DWORD)v115 - (_DWORD)v16) && *(_DWORD *)&v16[v120] == *v115)
        break;
      v110 = (char *)v118 + (v117++ >> 6);
      v115 = v118;
      if ((unint64_t)v110 > v108)
      {
LABEL_177:
        v153 = v236 - (char *)v114;
        if (&v113[v236 - (char *)v114 + 1 + (v236 - (char *)v114 + 240) / 0xFFuLL] > v109)
          return 0;
        v154 = v153 - 15;
        if (v153 < 0xF)
        {
          *v113 = 16 * v153;
        }
        else
        {
          *v113 = -16;
          v155 = v113 + 1;
          if (v154 >= 0xFF)
          {
            v156 = &__src[v216] - (char *)v114 - 270;
            memset(v155, 255, v156 / 0xFF + 1);
            v154 = v156 % 0xFF;
            v155 = &v113[v156 / 0xFF + 2];
          }
          *v155 = v154;
          v113 = v155;
        }
        v205 = v113 + 1;
        goto LABEL_263;
      }
    }
    v121 = 0;
    v122 = &v16[v120];
    v123 = (_DWORD)v115 - (_DWORD)v114;
    v124 = (_DWORD)v115 - (_DWORD)v114 - 15;
    v125 = v124;
    do
    {
      v126 = v125;
      v127 = v121;
      v128 = &v122[v121];
      v129 = (uint64_t *)((char *)v115 + v121);
      if (&v122[v121] <= __src || v129 <= v114)
        break;
      --v125;
      --v121;
    }
    while (*((unsigned __int8 *)v129 - 1) == *(v128 - 1));
    v131 = (_DWORD)v129 - (_DWORD)v114;
    v132 = v113 + 1;
    if (&v113[((_DWORD)v129 - (_DWORD)v114) + 9 + (v123 + v127) / 0xFFuLL] > v109)
      return 0;
    if ((v123 + v127) < 0xF)
    {
      *v113 = 16 * v131;
    }
    else
    {
      v133 = v127 + v124;
      *v113 = -16;
      if (v127 + v124 > 254)
      {
        if (v126 >= 509)
          v134 = 509;
        else
          v134 = v126;
        v135 = v123 - v134 + v127 + 239;
        v225 = v123 - 14;
        memset(v132, 255, v135 / 0xFF + 1);
        v131 = (_DWORD)v129 - (_DWORD)v114;
        __src = v248;
        v132 = &v113[v135 / 0xFFuLL + 2];
        v133 = v135 / 0xFF + v225 + v127;
      }
      *v132++ = v133;
    }
    v136 = &v132[v131];
    do
    {
      v137 = *v114++;
      *(_QWORD *)v132 = v137;
      v132 += 8;
    }
    while (v132 < v136);
    v138 = v113;
    v114 = v129;
    while (1)
    {
      *(_WORD *)v136 = (_WORD)v114 - (_WORD)v128;
      v113 = v136 + 2;
      v139 = (uint64_t *)((char *)v114 + 4);
      v140 = v128 + 4;
      if (v112 <= (unint64_t)v114 + 4)
      {
        v143 = (_DWORD *)v114 + 1;
      }
      else
      {
        v141 = *v139 ^ *v140;
        if (v141)
        {
          v142 = __clz(__rbit64(v141)) >> 3;
          goto LABEL_165;
        }
        v143 = (_DWORD *)v114 + 3;
        v140 = v128 + 12;
      }
      if ((unint64_t)v143 >= v112)
      {
LABEL_154:
        if (v143 < (_DWORD *)v220 && *(_DWORD *)v140 == *v143)
        {
          ++v143;
          v140 = (_QWORD *)((char *)v140 + 4);
        }
        if (v143 < (_DWORD *)v218 && *(unsigned __int16 *)v140 == *(unsigned __int16 *)v143)
        {
          v143 = (_DWORD *)((char *)v143 + 2);
          v140 = (_QWORD *)((char *)v140 + 2);
        }
        if (v143 < (_DWORD *)v222 && *(unsigned __int8 *)v140 == *(unsigned __int8 *)v143)
          LODWORD(v143) = (_DWORD)v143 + 1;
        v142 = (_DWORD)v143 - (_DWORD)v139;
      }
      else
      {
        v144 = (_DWORD)v143 - (_DWORD)v114 - 4;
        while (1)
        {
          v145 = *(_QWORD *)v143 ^ *v140;
          if (v145)
            break;
          v143 += 2;
          ++v140;
          v144 += 8;
          if ((unint64_t)v143 >= v112)
            goto LABEL_154;
        }
        v142 = (__clz(__rbit64(v145)) >> 3) + v144;
      }
LABEL_165:
      if (&v136[(v142 + 240) / 0xFFuLL + 8] > v109)
        return 0;
      v146 = *v138;
      v147 = v142 - 15;
      if (v142 < 0xF)
      {
        *v138 = v146 + v142;
      }
      else
      {
        *v138 = v146 + 15;
        *(_DWORD *)v113 = -1;
        if (v147 >= 0x3FC)
        {
          v148 = v136 + 6;
          v149 = 2 * ((v142 - 1035) / 0x3FC);
          memset(v136 + 6, 255, v149 * 2 + 4);
          __src = v248;
          LOWORD(v147) = (v142 - 1035) % 0x3FC;
          v113 = (char *)&v148[v149];
          v109 = v246;
        }
        v150 = &v113[(unsigned __int16)v147 / 0xFFu];
        *v150 = v147 + (unsigned __int16)v147 / 0xFFu;
        v113 = v150 + 1;
      }
      v114 = (uint64_t *)((char *)v114 + v142 + 4);
      if ((unint64_t)v114 >= v108)
        goto LABEL_177;
      *(_DWORD *)((char *)v10 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v114 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v114 - 2 - (_DWORD)v16;
      v151 = ((0xCF1BBCDCBB000000 * *v114) >> 50) & 0x3FFC;
      v152 = *(unsigned int *)((char *)v10 + v151);
      *(_DWORD *)((char *)v10 + v151) = (_DWORD)v114 - (_DWORD)v16;
      if ((int)v152 + 0xFFFF < ((_DWORD)v114 - (_DWORD)v16)
        || (v128 = &v16[v152], *(_DWORD *)&v16[v152] != *(_DWORD *)v114))
      {
        v110 = (char *)v114 + 2;
        v111 = v239;
        if ((unint64_t)v114 + 2 > v108)
          goto LABEL_177;
        goto LABEL_122;
      }
      *v113 = 0;
      v136 = v113 + 1;
      v138 = v113;
    }
  }
  if (v8 > 0x7E000000)
    return 0;
  v17 = &__src[v8];
  v18 = &a3[a5];
  *((_DWORD *)v10 + 4102) += v8;
  *v12 = v15 + v8;
  *((_WORD *)v10 + 8195) = 3;
  v19 = __src;
  v20 = a3;
  if (v8 < 0xD)
    goto LABEL_252;
  v234 = &__src[v8];
  v237 = v8;
  v21 = v17 - 11;
  *((_WORD *)v10 + ((-1640531535 * *(_DWORD *)__src) >> 19)) = v15;
  v22 = v13 << 6;
  v23 = (unint64_t)(v17 - 12);
  v227 = v17 - 8;
  v229 = v17 - 5;
  v224 = v17 - 6;
  v19 = __src;
  v20 = a3;
  v241 = (int)a3;
  v244 = v17 - 11;
  v231 = v13 << 6;
LABEL_15:
  v24 = v19 + 1;
  v25 = *(_DWORD *)(v19 + 1);
  v26 = 1;
  v27 = v22;
  do
  {
    v28 = v24;
    v24 = (_DWORD *)((char *)v24 + v26);
    if (v24 > (_DWORD *)v21)
      goto LABEL_251;
    v26 = v27++ >> 6;
    v29 = (-1640531535 * v25) >> 19;
    v30 = *((unsigned __int16 *)v10 + v29);
    v25 = *v24;
    *((_WORD *)v10 + v29) = (_WORD)v28 - (_WORD)v16;
  }
  while (*(_DWORD *)&v16[v30] != *v28);
  v31 = 0;
  v32 = &v16[v30];
  v33 = (_DWORD)v28 - (_DWORD)v19;
  v34 = (_DWORD)v28 - (_DWORD)v19 - 15;
  v35 = v34;
  do
  {
    v36 = v35;
    v37 = v31;
    v38 = &v32[v31];
    v39 = (char *)v28 + v31;
    if (&v32[v31] <= __src || v39 <= v19)
      break;
    --v35;
    --v31;
  }
  while (*(v39 - 1) == *(v38 - 1));
  v41 = (_DWORD)v39 - (_DWORD)v19;
  v42 = v20 + 1;
  if (&v20[((_DWORD)v39 - (_DWORD)v19) + 9 + (v33 + v37) / 0xFFuLL] > v18)
    return 0;
  if ((v33 + v37) < 0xF)
  {
    *v20 = 16 * v41;
  }
  else
  {
    v43 = v37 + v34;
    *v20 = -16;
    if (v37 + v34 > 254)
    {
      if (v36 >= 509)
        v44 = 509;
      else
        v44 = v36;
      v45 = v33 - v44 + v37 + 239;
      v215 = v33 - 14;
      memset(v42, 255, v45 / 0xFF + 1);
      v41 = (_DWORD)v39 - (_DWORD)v19;
      __src = v248;
      v42 = &v20[v45 / 0xFFuLL + 2];
      v43 = v45 / 0xFF + v215 + v37;
    }
    *v42++ = v43;
  }
  v46 = &v42[v41];
  do
  {
    v47 = *(_QWORD *)v19;
    v19 += 8;
    *(_QWORD *)v42 = v47;
    v42 += 8;
  }
  while (v42 < v46);
  while (1)
  {
    *(_WORD *)v46 = (_WORD)v39 - (_WORD)v38;
    v49 = v46 + 2;
    v50 = v39 + 4;
    v51 = v38 + 4;
    if (v23 <= (unint64_t)(v39 + 4))
    {
      v48 = v39 + 4;
    }
    else
    {
      v52 = *v50 ^ *v51;
      if (v52)
      {
        v53 = __clz(__rbit64(v52)) >> 3;
        goto LABEL_58;
      }
      v48 = v39 + 12;
      v51 = v38 + 12;
    }
    if ((unint64_t)v48 >= v23)
    {
LABEL_47:
      if (v48 < (_DWORD *)v227 && *(_DWORD *)v51 == *v48)
      {
        ++v48;
        v51 = (_QWORD *)((char *)v51 + 4);
      }
      if (v48 < (_DWORD *)v224 && *(unsigned __int16 *)v51 == *(unsigned __int16 *)v48)
      {
        v48 = (_DWORD *)((char *)v48 + 2);
        v51 = (_QWORD *)((char *)v51 + 2);
      }
      if (v48 < (_DWORD *)v229 && *(unsigned __int8 *)v51 == *(unsigned __int8 *)v48)
        LODWORD(v48) = (_DWORD)v48 + 1;
      v53 = (_DWORD)v48 - (_DWORD)v50;
    }
    else
    {
      v54 = (_DWORD)v48 - (_DWORD)v39 - 4;
      while (1)
      {
        v55 = *(_QWORD *)v48 ^ *v51;
        if (v55)
          break;
        v48 += 2;
        ++v51;
        v54 += 8;
        if ((unint64_t)v48 >= v23)
          goto LABEL_47;
      }
      v53 = (__clz(__rbit64(v55)) >> 3) + v54;
    }
LABEL_58:
    if (&v46[(v53 + 240) / 0xFFuLL + 8] > v18)
      return 0;
    v56 = *v20;
    v57 = v53 - 15;
    if (v53 < 0xF)
    {
      *v20 = v56 + v53;
    }
    else
    {
      *v20 = v56 + 15;
      *(_DWORD *)v49 = -1;
      if (v57 >= 0x3FC)
      {
        v58 = v46 + 6;
        v59 = v18;
        v60 = 2 * ((v53 - 1035) / 0x3FC);
        memset(v46 + 6, 255, v60 * 2 + 4);
        __src = v248;
        LOWORD(v57) = (v53 - 1035) % 0x3FC;
        v49 = (char *)&v58[v60];
        v18 = v59;
        v21 = v244;
      }
      v61 = &v49[(unsigned __int16)v57 / 0xFFu];
      *v61 = v57 + (unsigned __int16)v57 / 0xFFu;
      v49 = v61 + 1;
    }
    v39 += v53 + 4;
    if (v39 >= v21)
      break;
    *((_WORD *)v10 + ((-1640531535 * *(_DWORD *)(v39 - 2)) >> 19)) = (_WORD)v39 - 2 - (_WORD)v16;
    v62 = (-1640531535 * *(_DWORD *)v39) >> 19;
    v38 = &v16[*((unsigned __int16 *)v10 + v62)];
    *((_WORD *)v10 + v62) = (_WORD)v39 - (_WORD)v16;
    if (*(_DWORD *)v38 != *(_DWORD *)v39)
    {
      v19 = v39;
      v20 = v49;
      LODWORD(a3) = v241;
      v22 = v231;
      goto LABEL_15;
    }
    *v49 = 0;
    v46 = v49 + 1;
    v20 = v49;
  }
  v19 = v39;
  v20 = v49;
  LODWORD(a3) = v241;
LABEL_251:
  v17 = v234;
  v8 = v237;
LABEL_252:
  v206 = v17 - v19;
  if (&v20[v17 - v19 + 1 + (v17 - v19 + 240) / 0xFFuLL] > v18)
    return 0;
  v212 = v206 - 15;
  if (v206 < 0xF)
  {
    *v20 = 16 * v206;
  }
  else
  {
    *v20 = -16;
    v213 = v20 + 1;
    if (v212 >= 0xFF)
    {
      v214 = &__src[v8] - v19 - 270;
      memset(v213, 255, v214 / 0xFF + 1);
      v212 = v214 % 0xFF;
      v213 = &v20[v214 / 0xFF + 2];
    }
    *v213 = v212;
    v20 = v213;
  }
  v210 = v20 + 1;
LABEL_260:
  memcpy(v210, v19, v206);
  return ((_DWORD)v210 + v206 - (_DWORD)a3);
}

pxrInternal__aapl__pxrReserved__::pxr_lz4 *pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_initStream(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, unint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *result;

  result = 0;
  if (this && a2 >> 5 >= 0x201 && (this & 7) == 0)
  {
    bzero(this, 0x4020uLL);
    return this;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState_fastReset(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *a2, char *a3, char *a4, signed int a5, int a6)
{
  unsigned int v6;
  const char *v7;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v8;
  unsigned int *v9;
  int v10;
  signed int v11;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  char *v19;
  char *v20;
  const char *v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  int v25;
  unint64_t v26;
  char *v27;
  uint64_t *v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  char *v42;
  uint64_t *v43;
  unsigned int v45;
  char *v46;
  char v47;
  int v48;
  unsigned int v49;
  char *v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unsigned int v56;
  _DWORD *v57;
  int v58;
  unint64_t v59;
  char v60;
  unsigned int v61;
  _WORD *v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  size_t v68;
  int v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  char *v76;
  int v77;
  unint64_t v78;
  _DWORD *v79;
  uint64_t v80;
  int v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  int v87;
  int v88;
  char v89;
  int v90;
  int v91;
  int v92;
  char *v93;
  uint64_t *v94;
  unsigned int v96;
  char *v97;
  char v98;
  int v99;
  unsigned int v100;
  char *v101;
  uint64_t v102;
  char *v103;
  _QWORD *v104;
  _QWORD *v105;
  unint64_t v106;
  unsigned int v107;
  _QWORD *v108;
  unint64_t v109;
  unsigned int v110;
  _WORD *v111;
  __int16 v112;
  unsigned int v113;
  uint64_t v114;
  char *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  char *v120;
  const char *v121;
  const char *v122;
  char *v123;
  char *v124;
  unint64_t v125;
  _DWORD *v126;
  int v127;
  unint64_t v128;
  _DWORD *v129;
  int v130;
  int v131;
  unsigned int v132;
  uint64_t v133;
  _DWORD *v134;
  uint64_t v135;
  char *v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  char *v142;
  const char *v143;
  int v145;
  char *v146;
  char v147;
  int v148;
  unsigned int v149;
  char *v150;
  uint64_t v151;
  char *v152;
  _QWORD *v153;
  _QWORD *v154;
  unint64_t v155;
  unsigned int v156;
  _DWORD *v157;
  int v158;
  unint64_t v159;
  char v160;
  unsigned int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  unsigned int v166;
  uint64_t v167;
  size_t v168;
  unint64_t v169;
  char *v170;
  unint64_t v171;
  char *v172;
  unint64_t v173;
  char *v174;
  char *v175;
  int v176;
  unint64_t v177;
  _DWORD *v178;
  int v179;
  int v180;
  int v181;
  _DWORD *v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  char *v192;
  char *v194;
  char v195;
  int v196;
  unsigned int v197;
  char *v198;
  uint64_t v199;
  _DWORD *v200;
  char *v201;
  _QWORD *v202;
  _QWORD *v203;
  unint64_t v204;
  unsigned int v205;
  int v206;
  unint64_t v207;
  char v208;
  unsigned int v209;
  _WORD *v210;
  uint64_t v211;
  char *v212;
  unsigned int v213;
  char *v214;
  char *v215;
  char *v216;
  unint64_t v217;
  _DWORD *v218;
  int v219;
  unint64_t v220;
  _DWORD *v221;
  int v222;
  int v223;
  unsigned int v224;
  uint64_t v225;
  _DWORD *v226;
  uint64_t v227;
  char *v228;
  int v229;
  int v230;
  char v231;
  int v232;
  int v233;
  int v234;
  char *v235;
  const char *v236;
  int v238;
  char *v239;
  char v240;
  int v241;
  unsigned int v242;
  char *v243;
  uint64_t v244;
  char *v245;
  _QWORD *v246;
  _QWORD *v247;
  unint64_t v248;
  unsigned int v249;
  _QWORD *v250;
  unint64_t v251;
  unsigned int v252;
  _WORD *v253;
  __int16 v254;
  unsigned int v255;
  uint64_t v256;
  char *v257;
  unsigned int v258;
  uint64_t v259;
  unint64_t v260;
  char *v261;
  unint64_t v262;
  char *v263;
  char *v264;
  int v265;
  unint64_t v266;
  _DWORD *v267;
  int v268;
  int v269;
  int v270;
  _DWORD *v271;
  unsigned int v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  int v276;
  int v277;
  char v278;
  int v279;
  int v280;
  int v281;
  char *v282;
  _DWORD *v283;
  unsigned int v285;
  char *v286;
  char v287;
  int v288;
  unsigned int v289;
  char *v290;
  uint64_t v291;
  _QWORD *v292;
  _QWORD *v293;
  char *v294;
  _QWORD *v295;
  unint64_t v296;
  unsigned int v297;
  unint64_t v298;
  unsigned int v299;
  _WORD *v300;
  __int16 v301;
  unsigned int v302;
  uint64_t v303;
  char *v304;
  unsigned int v305;
  unint64_t v306;
  char *v307;
  unint64_t v308;
  void *v309;
  char *v310;
  char *v311;
  uint64_t v312;
  char *v313;
  char *v314;
  char v315;
  char *v316;
  char *v317;
  char *v318;
  char v319;
  char *v320;
  char v321;
  char *v322;
  char *v323;
  char *v324;
  char *v325;
  uint64_t v326;
  char *v327;
  char v328;
  char *v329;
  char *v330;
  char *v331;
  char *v332;
  char v333;
  char *v334;
  char v335;
  int v336;
  int v337;
  char *v338;
  const char *v339;
  char *v340;
  char *v341;
  int v342;
  char *v343;
  char *v344;
  unsigned int v345;
  unsigned int v346;
  unsigned int v347;
  int v348;
  int v349;
  unint64_t v350;
  _WORD *v351;
  unint64_t v352;
  int v353;
  char *v354;
  int v355;
  int v356;
  int v357;
  int v358;
  int v359;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v360;
  char *v361;

  v6 = a4;
  v7 = a3;
  v8 = this;
  v9 = (unsigned int *)((char *)this + 0x4000);
  if (a6 <= 1)
    v10 = 1;
  else
    v10 = a6;
  if (a4 <= 0x7E000000)
    v11 = (_DWORD)a4 + a4 / 0xFF + 16;
  else
    v11 = 0;
  v361 = a2;
  if (v11 <= a5)
  {
    if ((int)a4 <= 65546)
    {
      if (*((_WORD *)this + 8194))
      {
        bzero(this, 0x4020uLL);
        a2 = v361;
LABEL_347:
        if (v6 > 0x7E000000)
          return 0;
        v263 = &a2[v6];
        v9[6] = v6;
        *v9 = v6;
        *((_WORD *)v9 + 3) = 3;
        v122 = a2;
        v174 = (char *)v7;
        if (v6 < 0xD)
          goto LABEL_402;
        v354 = &a2[v6];
        v264 = v263 - 11;
        *((_WORD *)v8 + ((-1640531535 * *(_DWORD *)a2) >> 19)) = 0;
        v265 = v10 << 6;
        v174 = (char *)v7;
        v266 = (unint64_t)(v263 - 12);
        v334 = v263 - 8;
        v338 = v263 - 5;
        v330 = v263 - 6;
        v122 = a2;
        v359 = (int)v174;
        v342 = v10 << 6;
LABEL_351:
        v267 = v122 + 1;
        v268 = *(_DWORD *)(v122 + 1);
        v269 = 1;
        v270 = v265;
        do
        {
          v271 = v267;
          v267 = (_DWORD *)((char *)v267 + v269);
          if (v267 > (_DWORD *)v264)
            goto LABEL_401;
          v269 = v270++ >> 6;
          v272 = (-1640531535 * v268) >> 19;
          v273 = *((unsigned __int16 *)v8 + v272);
          v268 = *v267;
          *((_WORD *)v8 + v272) = (_WORD)v271 - (_WORD)a2;
        }
        while (*(_DWORD *)&a2[v273] != *v271);
        v274 = 0;
        v275 = &a2[v273];
        v276 = (_DWORD)v271 - (_DWORD)v122;
        v277 = (_DWORD)v271 - (_DWORD)v122 - 15;
        v278 = (_BYTE)v271 - (_BYTE)v122 - 14;
        v279 = v277;
        do
        {
          v280 = v279;
          v281 = v274;
          v282 = &v275[v274];
          v283 = (_DWORD *)((char *)v271 + v274);
          if (&v275[v274] <= a2 || v283 <= (_DWORD *)v122)
            break;
          --v279;
          --v274;
        }
        while (*((unsigned __int8 *)v283 - 1) == *(v282 - 1));
        v285 = (_DWORD)v283 - (_DWORD)v122;
        v286 = v174 + 1;
        if ((v276 + v281) < 0xF)
        {
          *v174 = 16 * v285;
        }
        else
        {
          v287 = v281 + v277;
          *v174 = -16;
          if (v281 + v277 > 254)
          {
            if (v280 >= 509)
              v288 = 509;
            else
              v288 = v280;
            v289 = v276 - v288 + v281 + 239;
            v321 = v278;
            memset(v286, 255, v289 / 0xFF + 1);
            a2 = v361;
            v286 = &v174[v289 / 0xFFuLL + 2];
            v287 = v289 / 0xFF + v321 + v281;
          }
          *v286++ = v287;
        }
        v290 = &v286[v285];
        do
        {
          v291 = *(_QWORD *)v122;
          v122 += 8;
          *(_QWORD *)v286 = v291;
          v286 += 8;
        }
        while (v286 < v290);
        while (1)
        {
          *(_WORD *)v290 = (_WORD)v283 - (_WORD)v282;
          v294 = v290 + 2;
          v295 = v283 + 1;
          v293 = v282 + 4;
          if (v266 <= (unint64_t)(v283 + 1))
          {
            v292 = v283 + 1;
            goto LABEL_388;
          }
          v296 = *v295 ^ *v293;
          if (v296)
            break;
          v292 = v283 + 3;
          v293 = v282 + 12;
LABEL_388:
          while ((unint64_t)v292 < v266)
          {
            v298 = *v292 ^ *v293;
            if (v298)
            {
              v292 = (_QWORD *)((char *)v292 + (__clz(__rbit64(v298)) >> 3));
              goto LABEL_392;
            }
            ++v292;
            ++v293;
          }
          if (v292 < (_QWORD *)v334 && *(_DWORD *)v293 == *(_DWORD *)v292)
          {
            v292 = (_QWORD *)((char *)v292 + 4);
            v293 = (_QWORD *)((char *)v293 + 4);
          }
          if (v292 < (_QWORD *)v330 && *(unsigned __int16 *)v293 == *(unsigned __int16 *)v292)
          {
            v292 = (_QWORD *)((char *)v292 + 2);
            v293 = (_QWORD *)((char *)v293 + 2);
          }
          if (v292 < (_QWORD *)v338 && *(unsigned __int8 *)v293 == *(unsigned __int8 *)v292)
            LODWORD(v292) = (_DWORD)v292 + 1;
LABEL_392:
          v297 = (_DWORD)v292 - (_DWORD)v295;
          v283 = (_DWORD *)((char *)v283 + v297 + 4);
          v299 = v297 - 15;
          if (v297 < 0xF)
            goto LABEL_396;
          *v174 += 15;
          *(_DWORD *)v294 = -1;
          if (v299 >= 0x3FC)
          {
            v300 = v290 + 6;
            v301 = v297 - 1035;
            v302 = (v297 - 1035) / 0x3FC;
            v303 = 2 * v302;
            memset(v290 + 6, 255, v303 * 2 + 4);
            a2 = v361;
            LOWORD(v299) = v301 - 1020 * v302;
            v294 = (char *)&v300[v303];
          }
          v304 = &v294[(unsigned __int16)v299 / 0xFFu];
          *v304 = v299 + (unsigned __int16)v299 / 0xFFu;
          v294 = v304 + 1;
LABEL_397:
          if (v283 >= (_DWORD *)v264)
          {
            v122 = (const char *)v283;
            v174 = v294;
LABEL_401:
            v263 = v354;
            LODWORD(v7) = v359;
LABEL_402:
            v168 = v263 - v122;
            goto LABEL_403;
          }
          *((_WORD *)v8 + ((-1640531535 * *(_DWORD *)((char *)v283 - 2)) >> 19)) = (_WORD)v283
                                                                                               - 2
                                                                                               - (_WORD)a2;
          v305 = (-1640531535 * *v283) >> 19;
          v282 = &a2[*((unsigned __int16 *)v8 + v305)];
          *((_WORD *)v8 + v305) = (_WORD)v283 - (_WORD)a2;
          if (*(_DWORD *)v282 != *v283)
          {
            v122 = (const char *)v283;
            v174 = v294;
            v265 = v342;
            goto LABEL_351;
          }
          *v294 = 0;
          v290 = v294 + 1;
          v174 = v294;
        }
        v297 = __clz(__rbit64(v296)) >> 3;
        v283 = (_DWORD *)((char *)v283 + v297 + 4);
LABEL_396:
        *v174 += v297;
        goto LABEL_397;
      }
      v17 = (_QWORD *)((char *)this + 16390);
      if (*((_WORD *)this + 8195) == 3)
      {
        if ((int)a4 <= 4095)
        {
          v18 = *v9;
          if (*v9 + a4 < 0xFFFF)
            goto LABEL_285;
        }
      }
      else if (!*((_WORD *)this + 8195))
      {
        v18 = *v9;
LABEL_285:
        *((_DWORD *)this + 4102) = 0;
        *(_OWORD *)((char *)this + 16392) = 0u;
        if (!v18)
          goto LABEL_347;
        if (a4 > 0x7E000000)
          return 0;
        v214 = &a2[(int)a4];
        *((_DWORD *)this + 4102) = (_DWORD)a4;
        *v9 = v18 + (_DWORD)a4;
        *((_WORD *)this + 8195) = 3;
        v122 = a2;
        v215 = a3;
        if (a4 < 0xD)
        {
LABEL_342:
          v168 = v214 - v122;
          v260 = v214 - v122 - 15;
          if ((unint64_t)(v214 - v122) < 0xF)
          {
            *v215 = 16 * v168;
          }
          else
          {
            *v215 = -16;
            v261 = v215 + 1;
            if (v260 >= 0xFF)
            {
              v262 = &a2[v6] - v122 - 270;
              memset(v261, 255, v262 / 0xFF + 1);
              v260 = v262 % 0xFF;
              v261 = &v215[v262 / 0xFF + 2];
            }
            *v261 = v260;
            v215 = v261;
          }
          v309 = v215 + 1;
          goto LABEL_409;
        }
        v216 = &a2[-v18];
        v215 = a3;
        v217 = (unint64_t)(v214 - 11);
        v218 = a2 + 2;
        *((_WORD *)this + ((-1640531535 * *(_DWORD *)a2) >> 19)) = v18;
        v219 = v10 << 6;
        v220 = (unint64_t)(v214 - 12);
        v320 = v214 - 8;
        v324 = v214 - 5;
        v341 = &a2[(int)a4];
        v347 = a4;
        v316 = v214 - 6;
        v358 = (int)a3;
        v122 = a2;
        v353 = v10 << 6;
LABEL_289:
        v221 = v122 + 1;
        v222 = *(_DWORD *)(v122 + 1);
        v223 = v219;
        while (1)
        {
          v224 = (-1640531535 * v222) >> 19;
          v225 = *((unsigned __int16 *)v8 + v224);
          v226 = v218;
          v222 = *v218;
          *((_WORD *)v8 + v224) = (_WORD)v221 - (_WORD)v216;
          if (v18 <= v225 && *(_DWORD *)&v216[v225] == *v221)
            break;
          v218 = (_DWORD *)((char *)v218 + (v223++ >> 6));
          v221 = v226;
          if ((unint64_t)v218 > v217)
          {
LABEL_341:
            LODWORD(v7) = v358;
            v214 = v341;
            goto LABEL_342;
          }
        }
        v227 = 0;
        v228 = &v216[v225];
        v229 = (_DWORD)v221 - (_DWORD)v122;
        v230 = (_DWORD)v221 - (_DWORD)v122 - 15;
        v231 = (_BYTE)v221 - (_BYTE)v122 - 14;
        v232 = v230;
        do
        {
          v233 = v232;
          v234 = v227;
          v235 = &v228[v227];
          v236 = (char *)v221 + v227;
          if (&v228[v227] <= a2 || v236 <= v122)
            break;
          --v232;
          --v227;
        }
        while (*((unsigned __int8 *)v236 - 1) == *(v235 - 1));
        v238 = (_DWORD)v236 - (_DWORD)v122;
        v239 = v215 + 1;
        if ((v229 + v234) < 0xF)
        {
          *v215 = 16 * v238;
          v6 = v347;
        }
        else
        {
          v240 = v234 + v230;
          *v215 = -16;
          if (v234 + v230 > 254)
          {
            if (v233 >= 509)
              v241 = 509;
            else
              v241 = v233;
            v242 = v229 - v241 + v234 + 239;
            v333 = v231;
            memset(v239, 255, v242 / 0xFF + 1);
            v238 = (_DWORD)v236 - (_DWORD)v122;
            a2 = v361;
            v239 = &v215[v242 / 0xFFuLL + 2];
            v240 = v242 / 0xFF + v333 + v234;
          }
          v6 = v347;
          *v239++ = v240;
        }
        v243 = &v239[v238];
        do
        {
          v244 = *(_QWORD *)v122;
          v122 += 8;
          *(_QWORD *)v239 = v244;
          v239 += 8;
        }
        while (v239 < v243);
        v245 = v215;
        v122 = v236;
        while (1)
        {
          *(_WORD *)v243 = (_WORD)v122 - (_WORD)v235;
          v215 = v243 + 2;
          v246 = v122 + 4;
          v247 = v235 + 4;
          if (v220 > (unint64_t)(v122 + 4))
            break;
          v250 = v122 + 4;
LABEL_316:
          while ((unint64_t)v250 < v220)
          {
            v251 = *v250 ^ *v247;
            if (v251)
            {
              v250 = (_QWORD *)((char *)v250 + (__clz(__rbit64(v251)) >> 3));
              goto LABEL_320;
            }
            ++v250;
            ++v247;
          }
          if (v250 < (_QWORD *)v320 && *(_DWORD *)v247 == *(_DWORD *)v250)
          {
            v250 = (_QWORD *)((char *)v250 + 4);
            v247 = (_QWORD *)((char *)v247 + 4);
          }
          if (v250 < (_QWORD *)v316 && *(unsigned __int16 *)v247 == *(unsigned __int16 *)v250)
          {
            v250 = (_QWORD *)((char *)v250 + 2);
            v247 = (_QWORD *)((char *)v247 + 2);
          }
          if (v250 < (_QWORD *)v324 && *(unsigned __int8 *)v247 == *(unsigned __int8 *)v250)
            LODWORD(v250) = (_DWORD)v250 + 1;
LABEL_320:
          v249 = (_DWORD)v250 - (_DWORD)v246;
          v122 += v249 + 4;
          v252 = v249 - 15;
          if (v249 < 0xF)
            goto LABEL_324;
          *v245 += 15;
          *(_DWORD *)v215 = -1;
          if (v252 >= 0x3FC)
          {
            v253 = v243 + 6;
            v254 = v249 - 1035;
            v255 = (v249 - 1035) / 0x3FC;
            v256 = 2 * v255;
            memset(v243 + 6, 255, v256 * 2 + 4);
            a2 = v361;
            LOWORD(v252) = v254 - 1020 * v255;
            v215 = (char *)&v253[v256];
            v6 = v347;
          }
          v257 = &v215[(unsigned __int16)v252 / 0xFFu];
          *v257 = v252 + (unsigned __int16)v252 / 0xFFu;
          v215 = v257 + 1;
LABEL_325:
          if ((unint64_t)v122 >= v217)
            goto LABEL_341;
          *((_WORD *)v8 + ((-1640531535 * *(_DWORD *)(v122 - 2)) >> 19)) = (_WORD)v122 - 2 - (_WORD)v216;
          v258 = (-1640531535 * *(_DWORD *)v122) >> 19;
          v259 = *((unsigned __int16 *)v8 + v258);
          *((_WORD *)v8 + v258) = (_WORD)v122 - (_WORD)v216;
          if (v18 > v259 || (v235 = &v216[v259], *(_DWORD *)&v216[v259] != *(_DWORD *)v122))
          {
            v218 = v122 + 2;
            v219 = v353;
            if ((unint64_t)(v122 + 2) > v217)
              goto LABEL_341;
            goto LABEL_289;
          }
          *v215 = 0;
          v243 = v215 + 1;
          v245 = v215;
        }
        v248 = *v246 ^ *v247;
        if (!v248)
        {
          v250 = v122 + 12;
          v247 = v235 + 12;
          goto LABEL_316;
        }
        v249 = __clz(__rbit64(v248)) >> 3;
        v122 += v249 + 4;
LABEL_324:
        *v245 += v249;
        goto LABEL_325;
      }
      bzero(this, 0x4004uLL);
      a2 = v361;
      *v17 = 0;
      *(_QWORD *)((char *)v9 + 14) = 0;
      *(_QWORD *)(v9 + 5) = 0;
      goto LABEL_347;
    }
    if (*((_WORD *)this + 8194))
    {
      bzero(this, 0x4020uLL);
      a2 = v361;
      v14 = 0;
    }
    else
    {
      if (*((_WORD *)this + 8195))
      {
        *((_WORD *)this + 8195) = 0;
        bzero(this, 0x4004uLL);
        a2 = v361;
        v14 = 0;
      }
      else
      {
        v14 = *v9;
        if (*v9)
        {
          v14 += 0x10000;
          *v9 = v14;
        }
      }
      *((_DWORD *)v8 + 4102) = 0;
      *(_OWORD *)((char *)v8 + 16392) = 0u;
    }
    if (v6 > 0x7E000000)
      return 0;
    v73 = &a2[-v14];
    v326 = v6;
    v74 = &a2[v6];
    v75 = (unint64_t)(v74 - 11);
    v323 = v74 - 5;
    v27 = (char *)v7;
    v9[6] = v326;
    *v9 = v14 + v326;
    *((_WORD *)v9 + 3) = 2;
    v76 = a2 + 2;
    *(_DWORD *)((char *)v8 + (((0xCF1BBCDCBB000000 * *(_QWORD *)a2) >> 50) & 0x3FFC)) = v14;
    v77 = v10 << 6;
    v78 = (unint64_t)(v74 - 12);
    v344 = v74;
    v313 = v74 - 6;
    v318 = v74 - 8;
    v28 = (uint64_t *)a2;
    v349 = v10 << 6;
LABEL_97:
    v79 = (_DWORD *)((char *)v28 + 1);
    v80 = *(uint64_t *)((char *)v28 + 1);
    v81 = v77;
    while (1)
    {
      v82 = v76;
      v83 = ((0xCF1BBCDCBB000000 * v80) >> 50) & 0x3FFC;
      v84 = *(unsigned int *)((char *)v8 + v83);
      v80 = *v82;
      *(_DWORD *)((char *)v8 + v83) = (_DWORD)v79 - (_DWORD)v73;
      if ((int)v84 + 0xFFFF >= ((_DWORD)v79 - (_DWORD)v73) && *(_DWORD *)&v73[v84] == *v79)
        break;
      v76 = (char *)v82 + (v81++ >> 6);
      v79 = v82;
      if ((unint64_t)v76 > v75)
        goto LABEL_149;
    }
    v85 = 0;
    v86 = &v73[v84];
    v87 = (_DWORD)v79 - (_DWORD)v28;
    v88 = (_DWORD)v79 - (_DWORD)v28 - 15;
    v89 = (_BYTE)v79 - (_BYTE)v28 - 14;
    v90 = v88;
    do
    {
      v91 = v90;
      v92 = v85;
      v93 = &v86[v85];
      v94 = (uint64_t *)((char *)v79 + v85);
      if (&v86[v85] <= a2 || v94 <= v28)
        break;
      --v90;
      --v85;
    }
    while (*((unsigned __int8 *)v94 - 1) == *(v93 - 1));
    v96 = (_DWORD)v94 - (_DWORD)v28;
    v97 = v27 + 1;
    if ((v87 + v92) < 0xF)
    {
      *v27 = 16 * v96;
    }
    else
    {
      v98 = v92 + v88;
      *v27 = -16;
      if (v92 + v88 > 254)
      {
        if (v91 >= 509)
          v99 = 509;
        else
          v99 = v91;
        v100 = v87 - v99 + v92 + 239;
        v335 = v89;
        memset(v97, 255, v100 / 0xFF + 1);
        v96 = (_DWORD)v94 - (_DWORD)v28;
        a2 = v361;
        v97 = &v27[v100 / 0xFFuLL + 2];
        v98 = v100 / 0xFF + v335 + v92;
      }
      *v97++ = v98;
    }
    v101 = &v97[v96];
    do
    {
      v102 = *v28++;
      *(_QWORD *)v97 = v102;
      v97 += 8;
    }
    while (v97 < v101);
    v103 = v27;
    v28 = v94;
    while (1)
    {
      *(_WORD *)v101 = (_WORD)v28 - (_WORD)v93;
      v27 = v101 + 2;
      v104 = (uint64_t *)((char *)v28 + 4);
      v105 = v93 + 4;
      if (v78 > (unint64_t)v28 + 4)
        break;
      v108 = (uint64_t *)((char *)v28 + 4);
LABEL_124:
      while ((unint64_t)v108 < v78)
      {
        v109 = *v108 ^ *v105;
        if (v109)
        {
          v108 = (_QWORD *)((char *)v108 + (__clz(__rbit64(v109)) >> 3));
          goto LABEL_128;
        }
        ++v108;
        ++v105;
      }
      if (v108 < (_QWORD *)v318 && *(_DWORD *)v105 == *(_DWORD *)v108)
      {
        v108 = (_QWORD *)((char *)v108 + 4);
        v105 = (_QWORD *)((char *)v105 + 4);
      }
      if (v108 < (_QWORD *)v313 && *(unsigned __int16 *)v105 == *(unsigned __int16 *)v108)
      {
        v108 = (_QWORD *)((char *)v108 + 2);
        v105 = (_QWORD *)((char *)v105 + 2);
      }
      if (v108 < (_QWORD *)v323 && *(unsigned __int8 *)v105 == *(unsigned __int8 *)v108)
        LODWORD(v108) = (_DWORD)v108 + 1;
LABEL_128:
      v107 = (_DWORD)v108 - (_DWORD)v104;
      v28 = (uint64_t *)((char *)v28 + v107 + 4);
      v110 = v107 - 15;
      if (v107 < 0xF)
        goto LABEL_132;
      *v103 += 15;
      *(_DWORD *)v27 = -1;
      if (v110 >= 0x3FC)
      {
        v111 = v101 + 6;
        v112 = v107 - 1035;
        v113 = (v107 - 1035) / 0x3FC;
        v114 = 2 * v113;
        memset(v101 + 6, 255, v114 * 2 + 4);
        a2 = v361;
        LOWORD(v110) = v112 - 1020 * v113;
        v27 = (char *)&v111[v114];
      }
      v115 = &v27[(unsigned __int16)v110 / 0xFFu];
      *v115 = v110 + (unsigned __int16)v110 / 0xFFu;
      v27 = v115 + 1;
LABEL_133:
      if ((unint64_t)v28 >= v75)
        goto LABEL_149;
      *(_DWORD *)((char *)v8 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v28 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v28 - 2 - (_DWORD)v73;
      v116 = ((0xCF1BBCDCBB000000 * *v28) >> 50) & 0x3FFC;
      v117 = *(unsigned int *)((char *)v8 + v116);
      *(_DWORD *)((char *)v8 + v116) = (_DWORD)v28 - (_DWORD)v73;
      if ((int)v117 + 0xFFFF < ((_DWORD)v28 - (_DWORD)v73)
        || (v93 = &v73[v117], *(_DWORD *)&v73[v117] != *(_DWORD *)v28))
      {
        v76 = (char *)v28 + 2;
        v77 = v349;
        if ((unint64_t)v28 + 2 > v75)
        {
LABEL_149:
          v68 = v344 - (char *)v28;
          v70 = v344 - (char *)v28 - 15;
          v69 = (int)v7;
          if ((unint64_t)(v344 - (char *)v28) < 0xF)
            goto LABEL_154;
          *v27 = -16;
          v71 = v27 + 1;
          if (v70 >= 0xFF)
          {
            v72 = v326;
LABEL_152:
            v118 = &a2[v72] - (char *)v28 - 270;
            memset(v71, 255, v118 / 0xFF + 1);
            v70 = v118 % 0xFF;
            v71 = &v27[v118 / 0xFF + 2];
          }
LABEL_153:
          *v71 = v70;
          v27 = v71;
LABEL_155:
          memcpy(v27 + 1, v28, v68);
          return ((_DWORD)v27 + 1 + v68 - v69);
        }
        goto LABEL_97;
      }
      *v27 = 0;
      v101 = v27 + 1;
      v103 = v27;
    }
    v106 = *v104 ^ *v105;
    if (!v106)
    {
      v108 = (uint64_t *)((char *)v28 + 12);
      v105 = v93 + 12;
      goto LABEL_124;
    }
    v107 = __clz(__rbit64(v106)) >> 3;
    v28 = (uint64_t *)((char *)v28 + v107 + 4);
LABEL_132:
    *v103 += v107;
    goto LABEL_133;
  }
  if ((int)a4 > 65546)
  {
    if (*((_WORD *)this + 8194))
    {
      bzero(this, 0x4020uLL);
      a2 = v361;
      v13 = 0;
    }
    else
    {
      if (*((_WORD *)this + 8195))
      {
        *((_WORD *)this + 8195) = 0;
        bzero(this, 0x4004uLL);
        a2 = v361;
        v13 = 0;
      }
      else
      {
        v13 = *v9;
        if (*v9)
        {
          v13 += 0x10000;
          *v9 = v13;
        }
      }
      *((_DWORD *)v8 + 4102) = 0;
      *(_OWORD *)((char *)v8 + 16392) = 0u;
    }
    if (v6 > 0x7E000000)
      return 0;
    v19 = &a2[-v13];
    v312 = v6;
    v20 = &a2[v6];
    v21 = v7;
    v22 = (unint64_t)(v20 - 11);
    v325 = v20 - 5;
    v23 = (unint64_t)&v21[a5];
    v9[6] = v6;
    *v9 = v13 + v6;
    *((_WORD *)v9 + 3) = 2;
    v24 = a2 + 2;
    *(_DWORD *)((char *)v8 + (((0xCF1BBCDCBB000000 * *(_QWORD *)a2) >> 50) & 0x3FFC)) = v13;
    v25 = v10 << 6;
    v26 = (unint64_t)(v20 - 12);
    v343 = v20;
    v317 = v20 - 6;
    v322 = v20 - 8;
    v355 = (int)v21;
    v27 = (char *)v21;
    v28 = (uint64_t *)a2;
    v360 = v8;
    v348 = v10 << 6;
LABEL_33:
    v29 = (_DWORD *)((char *)v28 + 1);
    v30 = *(uint64_t *)((char *)v28 + 1);
    v31 = v25;
    while (1)
    {
      v32 = v24;
      v33 = ((0xCF1BBCDCBB000000 * v30) >> 50) & 0x3FFC;
      v34 = *(unsigned int *)((char *)v8 + v33);
      v30 = *v32;
      *(_DWORD *)((char *)v8 + v33) = (_DWORD)v29 - (_DWORD)v19;
      if ((int)v34 + 0xFFFF >= ((_DWORD)v29 - (_DWORD)v19) && *(_DWORD *)&v19[v34] == *v29)
        break;
      v24 = (char *)v32 + (v31++ >> 6);
      v29 = v32;
      if ((unint64_t)v24 > v22)
      {
LABEL_88:
        v68 = v343 - (char *)v28;
        v69 = v355;
        if ((unint64_t)&v27[v343 - (char *)v28 + 1 + (v343 - (char *)v28 + 240) / 0xFFuLL] > v23)
          return 0;
        v70 = v68 - 15;
        if (v68 >= 0xF)
        {
          *v27 = -16;
          v71 = v27 + 1;
          if (v70 >= 0xFF)
          {
            v72 = v312;
            goto LABEL_152;
          }
          goto LABEL_153;
        }
LABEL_154:
        *v27 = 16 * v68;
        goto LABEL_155;
      }
    }
    v35 = 0;
    v36 = &v19[v34];
    v37 = (_DWORD)v29 - (_DWORD)v28;
    v38 = (_DWORD)v29 - (_DWORD)v28 - 15;
    v39 = v38;
    do
    {
      v40 = v39;
      v41 = v35;
      v42 = &v36[v35];
      v43 = (uint64_t *)((char *)v29 + v35);
      if (&v36[v35] <= a2 || v43 <= v28)
        break;
      --v39;
      --v35;
    }
    while (*((unsigned __int8 *)v43 - 1) == *(v42 - 1));
    v45 = (_DWORD)v43 - (_DWORD)v28;
    v46 = v27 + 1;
    if ((unint64_t)&v27[((_DWORD)v43 - (_DWORD)v28) + 9 + (v37 + v41) / 0xFFuLL] > v23)
      return 0;
    if ((v37 + v41) < 0xF)
    {
      *v27 = 16 * v45;
    }
    else
    {
      v47 = v41 + v38;
      *v27 = -16;
      if (v41 + v38 > 254)
      {
        if (v40 >= 509)
          v48 = 509;
        else
          v48 = v40;
        v49 = v37 - v48 + v41 + 239;
        v328 = v37 - 14;
        memset(v46, 255, v49 / 0xFF + 1);
        v45 = (_DWORD)v43 - (_DWORD)v28;
        a2 = v361;
        v46 = &v27[v49 / 0xFFuLL + 2];
        v47 = v49 / 0xFF + v328 + v41;
      }
      *v46++ = v47;
    }
    v50 = &v46[v45];
    do
    {
      v51 = *v28++;
      *(_QWORD *)v46 = v51;
      v46 += 8;
    }
    while (v46 < v50);
    v52 = v27;
    v28 = v43;
    while (1)
    {
      *(_WORD *)v50 = (_WORD)v28 - (_WORD)v42;
      v27 = v50 + 2;
      v53 = (uint64_t *)((char *)v28 + 4);
      v54 = v42 + 4;
      if (v26 <= (unint64_t)v28 + 4)
      {
        v57 = (_DWORD *)v28 + 1;
      }
      else
      {
        v55 = *v53 ^ *v54;
        if (v55)
        {
          v56 = __clz(__rbit64(v55)) >> 3;
          goto LABEL_76;
        }
        v57 = (_DWORD *)v28 + 3;
        v54 = v42 + 12;
      }
      if ((unint64_t)v57 >= v26)
      {
LABEL_65:
        if (v57 < (_DWORD *)v322 && *(_DWORD *)v54 == *v57)
        {
          ++v57;
          v54 = (_QWORD *)((char *)v54 + 4);
        }
        if (v57 < (_DWORD *)v317 && *(unsigned __int16 *)v54 == *(unsigned __int16 *)v57)
        {
          v57 = (_DWORD *)((char *)v57 + 2);
          v54 = (_QWORD *)((char *)v54 + 2);
        }
        if (v57 < (_DWORD *)v325 && *(unsigned __int8 *)v54 == *(unsigned __int8 *)v57)
          LODWORD(v57) = (_DWORD)v57 + 1;
        v56 = (_DWORD)v57 - (_DWORD)v53;
      }
      else
      {
        v58 = (_DWORD)v57 - (_DWORD)v28 - 4;
        while (1)
        {
          v59 = *(_QWORD *)v57 ^ *v54;
          if (v59)
            break;
          v57 += 2;
          ++v54;
          v58 += 8;
          if ((unint64_t)v57 >= v26)
            goto LABEL_65;
        }
        v56 = (__clz(__rbit64(v59)) >> 3) + v58;
      }
LABEL_76:
      if ((unint64_t)&v50[(v56 + 240) / 0xFFuLL + 8] > v23)
        return 0;
      v60 = *v52;
      v61 = v56 - 15;
      if (v56 < 0xF)
      {
        *v52 = v60 + v56;
      }
      else
      {
        *v52 = v60 + 15;
        *(_DWORD *)v27 = -1;
        if (v61 >= 0x3FC)
        {
          v62 = v50 + 6;
          v63 = v23;
          v64 = 2 * ((v56 - 1035) / 0x3FC);
          memset(v50 + 6, 255, v64 * 2 + 4);
          LOWORD(v61) = (v56 - 1035) % 0x3FC;
          v27 = (char *)&v62[v64];
          v23 = v63;
          v8 = v360;
          a2 = v361;
        }
        v65 = &v27[(unsigned __int16)v61 / 0xFFu];
        *v65 = v61 + (unsigned __int16)v61 / 0xFFu;
        v27 = v65 + 1;
      }
      v28 = (uint64_t *)((char *)v28 + v56 + 4);
      if ((unint64_t)v28 >= v22)
        goto LABEL_88;
      *(_DWORD *)((char *)v8 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v28 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v28 - 2 - (_DWORD)v19;
      v66 = ((0xCF1BBCDCBB000000 * *v28) >> 50) & 0x3FFC;
      v67 = *(unsigned int *)((char *)v8 + v66);
      *(_DWORD *)((char *)v8 + v66) = (_DWORD)v28 - (_DWORD)v19;
      if ((int)v67 + 0xFFFF < ((_DWORD)v28 - (_DWORD)v19)
        || (v42 = &v19[v67], *(_DWORD *)&v19[v67] != *(_DWORD *)v28))
      {
        v24 = (char *)v28 + 2;
        v25 = v348;
        if ((unint64_t)v28 + 2 > v22)
          goto LABEL_88;
        goto LABEL_33;
      }
      *v27 = 0;
      v50 = v27 + 1;
      v52 = v27;
    }
  }
  if (*((_WORD *)this + 8194))
  {
    bzero(this, 0x4020uLL);
    a2 = v361;
    goto LABEL_224;
  }
  v15 = (_QWORD *)((char *)this + 16390);
  if (*((_WORD *)this + 8195) != 3)
  {
    if (!*((_WORD *)this + 8195))
    {
      v16 = *v9;
      goto LABEL_158;
    }
LABEL_223:
    bzero(this, 0x4004uLL);
    a2 = v361;
    *v15 = 0;
    *(_QWORD *)((char *)v9 + 14) = 0;
    *(_QWORD *)(v9 + 5) = 0;
    goto LABEL_224;
  }
  if ((int)a4 > 4095)
    goto LABEL_223;
  v16 = *v9;
  if ((v16 + (_DWORD)a4) >= 0xFFFF)
    goto LABEL_223;
LABEL_158:
  *((_DWORD *)this + 4102) = 0;
  *(_OWORD *)((char *)this + 16392) = 0u;
  if ((_DWORD)v16)
  {
    if (a4 > 0x7E000000)
      return 0;
    v120 = &a2[(int)a4];
    *((_DWORD *)this + 4102) = (_DWORD)a4;
    v121 = &a3[a5];
    *v9 = v16 + (_DWORD)a4;
    *((_WORD *)this + 8195) = 3;
    v122 = a2;
    v123 = a3;
    if (a4 >= 0xD)
    {
      v123 = a3;
      v124 = &a2[-v16];
      v125 = (unint64_t)(v120 - 11);
      v126 = a2 + 2;
      *((_WORD *)this + ((-1640531535 * *(_DWORD *)a2) >> 19)) = v16;
      v127 = v10 << 6;
      v128 = (unint64_t)(v120 - 12);
      v311 = v120 - 8;
      v314 = v120 - 5;
      v331 = &a2[(int)a4];
      v310 = v120 - 6;
      v356 = (int)a3;
      v122 = a2;
      v339 = &a3[a5];
      v345 = a4;
      v336 = v10 << 6;
LABEL_162:
      v129 = v122 + 1;
      v130 = *(_DWORD *)(v122 + 1);
      v131 = v127;
      while (1)
      {
        v132 = (-1640531535 * v130) >> 19;
        v133 = *((unsigned __int16 *)v8 + v132);
        v134 = v126;
        v130 = *v126;
        *((_WORD *)v8 + v132) = (_WORD)v129 - (_WORD)v124;
        if (v16 <= v133 && *(_DWORD *)&v124[v133] == *v129)
          break;
        v126 = (_DWORD *)((char *)v126 + (v131++ >> 6));
        v129 = v134;
        if ((unint64_t)v126 > v125)
        {
LABEL_217:
          LODWORD(v7) = v356;
          v120 = v331;
          goto LABEL_218;
        }
      }
      v135 = 0;
      v136 = &v124[v133];
      v137 = (_DWORD)v129 - (_DWORD)v122;
      v138 = (_DWORD)v129 - (_DWORD)v122 - 15;
      v139 = v138;
      do
      {
        v140 = v139;
        v141 = v135;
        v142 = &v136[v135];
        v143 = (char *)v129 + v135;
        if (&v136[v135] <= a2 || v143 <= v122)
          break;
        --v139;
        --v135;
      }
      while (*((unsigned __int8 *)v143 - 1) == *(v142 - 1));
      v145 = (_DWORD)v143 - (_DWORD)v122;
      v146 = v123 + 1;
      if (&v123[((_DWORD)v143 - (_DWORD)v122) + 9 + (v137 + v141) / 0xFFuLL] > v121)
        return 0;
      if ((v137 + v141) < 0xF)
      {
        *v123 = 16 * v145;
        v6 = v345;
      }
      else
      {
        v147 = v141 + v138;
        *v123 = -16;
        if (v141 + v138 > 254)
        {
          if (v140 >= 509)
            v148 = 509;
          else
            v148 = v140;
          v149 = v137 - v148 + v141 + 239;
          v350 = v125;
          v319 = v137 - 14;
          memset(v146, 255, v149 / 0xFF + 1);
          v145 = (_DWORD)v143 - (_DWORD)v122;
          v125 = v350;
          a2 = v361;
          v146 = &v123[v149 / 0xFFuLL + 2];
          v147 = v149 / 0xFF + v319 + v141;
        }
        v6 = v345;
        *v146++ = v147;
      }
      v150 = &v146[v145];
      do
      {
        v151 = *(_QWORD *)v122;
        v122 += 8;
        *(_QWORD *)v146 = v151;
        v146 += 8;
      }
      while (v146 < v150);
      v152 = v123;
      v122 = v143;
      while (1)
      {
        *(_WORD *)v150 = (_WORD)v122 - (_WORD)v142;
        v123 = v150 + 2;
        v153 = v122 + 4;
        v154 = v142 + 4;
        if (v128 <= (unint64_t)(v122 + 4))
        {
          v157 = v122 + 4;
        }
        else
        {
          v155 = *v153 ^ *v154;
          if (v155)
          {
            v156 = __clz(__rbit64(v155)) >> 3;
            goto LABEL_205;
          }
          v157 = v122 + 12;
          v154 = v142 + 12;
        }
        if ((unint64_t)v157 >= v128)
        {
LABEL_194:
          if (v157 < (_DWORD *)v311 && *(_DWORD *)v154 == *v157)
          {
            ++v157;
            v154 = (_QWORD *)((char *)v154 + 4);
          }
          if (v157 < (_DWORD *)v310 && *(unsigned __int16 *)v154 == *(unsigned __int16 *)v157)
          {
            v157 = (_DWORD *)((char *)v157 + 2);
            v154 = (_QWORD *)((char *)v154 + 2);
          }
          if (v157 < (_DWORD *)v314 && *(unsigned __int8 *)v154 == *(unsigned __int8 *)v157)
            LODWORD(v157) = (_DWORD)v157 + 1;
          v156 = (_DWORD)v157 - (_DWORD)v153;
        }
        else
        {
          v158 = (_DWORD)v157 - (_DWORD)v122 - 4;
          while (1)
          {
            v159 = *(_QWORD *)v157 ^ *v154;
            if (v159)
              break;
            v157 += 2;
            ++v154;
            v158 += 8;
            if ((unint64_t)v157 >= v128)
              goto LABEL_194;
          }
          v156 = (__clz(__rbit64(v159)) >> 3) + v158;
        }
LABEL_205:
        if (&v150[(v156 + 240) / 0xFFuLL + 8] > v121)
          return 0;
        v160 = *v152;
        v161 = v156 - 15;
        if (v156 < 0xF)
        {
          *v152 = v160 + v156;
        }
        else
        {
          *v152 = v160 + 15;
          *(_DWORD *)v123 = -1;
          if (v161 >= 0x3FC)
          {
            v351 = v150 + 6;
            v162 = 2 * ((v156 - 1035) / 0x3FC);
            v163 = v16;
            v164 = v125;
            memset(v150 + 6, 255, v162 * 2 + 4);
            v125 = v164;
            v16 = v163;
            a2 = v361;
            LOWORD(v161) = (v156 - 1035) % 0x3FC;
            v6 = v345;
            v123 = (char *)&v351[v162];
            v121 = v339;
          }
          v165 = &v123[(unsigned __int16)v161 / 0xFFu];
          *v165 = v161 + (unsigned __int16)v161 / 0xFFu;
          v123 = v165 + 1;
        }
        v122 += v156 + 4;
        if ((unint64_t)v122 >= v125)
          goto LABEL_217;
        *((_WORD *)v8 + ((-1640531535 * *(_DWORD *)(v122 - 2)) >> 19)) = (_WORD)v122 - 2 - (_WORD)v124;
        v166 = (-1640531535 * *(_DWORD *)v122) >> 19;
        v167 = *((unsigned __int16 *)v8 + v166);
        *((_WORD *)v8 + v166) = (_WORD)v122 - (_WORD)v124;
        if (v16 > v167 || (v142 = &v124[v167], *(_DWORD *)&v124[v167] != *(_DWORD *)v122))
        {
          v126 = v122 + 2;
          v127 = v336;
          if ((unint64_t)(v122 + 2) > v125)
            goto LABEL_217;
          goto LABEL_162;
        }
        *v123 = 0;
        v150 = v123 + 1;
        v152 = v123;
      }
    }
LABEL_218:
    v168 = v120 - v122;
    if (&v123[v120 - v122 + 1 + (v120 - v122 + 240) / 0xFFuLL] > v121)
      return 0;
    v169 = v168 - 15;
    if (v168 < 0xF)
    {
      *v123 = 16 * v168;
    }
    else
    {
      *v123 = -16;
      v170 = v123 + 1;
      if (v169 >= 0xFF)
      {
        v171 = &a2[v6] - v122 - 270;
        memset(v170, 255, v171 / 0xFF + 1);
        v169 = v171 % 0xFF;
        v170 = &v123[v171 / 0xFF + 2];
      }
      *v170 = v169;
      v123 = v170;
    }
    v309 = v123 + 1;
LABEL_409:
    memcpy(v309, v122, v168);
    return ((_DWORD)v309 + v168 - (_DWORD)v7);
  }
LABEL_224:
  if (v6 > 0x7E000000)
    return 0;
  v172 = &a2[v6];
  v9[6] = v6;
  v173 = (unint64_t)&v7[a5];
  *v9 = v6;
  *((_WORD *)v9 + 3) = 3;
  v122 = a2;
  v174 = (char *)v7;
  if (v6 < 0xD)
    goto LABEL_281;
  v340 = &a2[v6];
  v346 = v6;
  v175 = v172 - 11;
  *((_WORD *)v8 + ((-1640531535 * *(_DWORD *)a2) >> 19)) = 0;
  v176 = v10 << 6;
  v177 = (unint64_t)(v172 - 12);
  v329 = v172 - 8;
  v332 = v172 - 5;
  v327 = v172 - 6;
  v122 = a2;
  v174 = (char *)v7;
  v352 = v173;
  v357 = (int)v7;
  v337 = v10 << 6;
LABEL_227:
  v178 = v122 + 1;
  v179 = *(_DWORD *)(v122 + 1);
  v180 = 1;
  v181 = v176;
  do
  {
    v182 = v178;
    v178 = (_DWORD *)((char *)v178 + v180);
    if (v178 > (_DWORD *)v175)
      goto LABEL_280;
    v180 = v181++ >> 6;
    v183 = (-1640531535 * v179) >> 19;
    v184 = *((unsigned __int16 *)v8 + v183);
    v179 = *v178;
    *((_WORD *)v8 + v183) = (_WORD)v182 - (_WORD)a2;
  }
  while (*(_DWORD *)&a2[v184] != *v182);
  v185 = 0;
  v186 = &a2[v184];
  v187 = (_DWORD)v182 - (_DWORD)v122;
  v188 = (_DWORD)v182 - (_DWORD)v122 - 15;
  v189 = v188;
  do
  {
    v190 = v189;
    v191 = v185;
    v192 = &v186[v185];
    v7 = (char *)v182 + v185;
    if (&v186[v185] <= a2 || v7 <= v122)
      break;
    --v189;
    --v185;
  }
  while (*((unsigned __int8 *)v7 - 1) == *(v192 - 1));
  v194 = v174 + 1;
  if ((unint64_t)&v174[((_DWORD)v7 - (_DWORD)v122) + 9 + (v187 + v191) / 0xFFuLL] > v173)
    return 0;
  if ((v187 + v191) < 0xF)
  {
    *v174 = 16 * ((_BYTE)v7 - (_BYTE)v122);
  }
  else
  {
    v195 = v191 + v188;
    *v174 = -16;
    if (v191 + v188 > 254)
    {
      if (v190 >= 509)
        v196 = 509;
      else
        v196 = v190;
      v197 = v187 - v196 + v191 + 239;
      v315 = v187 - 14;
      memset(v194, 255, v197 / 0xFF + 1);
      v173 = v352;
      a2 = v361;
      v194 = &v174[v197 / 0xFFuLL + 2];
      v195 = v197 / 0xFF + v315 + v191;
    }
    *v194++ = v195;
  }
  v198 = &v194[(_DWORD)v7 - (_DWORD)v122];
  do
  {
    v199 = *(_QWORD *)v122;
    v122 += 8;
    *(_QWORD *)v194 = v199;
    v194 += 8;
  }
  while (v194 < v198);
  while (1)
  {
    *(_WORD *)v198 = (_WORD)v7 - (_WORD)v192;
    v201 = v198 + 2;
    v202 = v7 + 4;
    v203 = v192 + 4;
    if (v177 <= (unint64_t)(v7 + 4))
    {
      v200 = v7 + 4;
    }
    else
    {
      v204 = *v202 ^ *v203;
      if (v204)
      {
        v205 = __clz(__rbit64(v204)) >> 3;
        goto LABEL_270;
      }
      v200 = v7 + 12;
      v203 = v192 + 12;
    }
    if ((unint64_t)v200 >= v177)
    {
LABEL_259:
      if (v200 < (_DWORD *)v329 && *(_DWORD *)v203 == *v200)
      {
        ++v200;
        v203 = (_QWORD *)((char *)v203 + 4);
      }
      if (v200 < (_DWORD *)v327 && *(unsigned __int16 *)v203 == *(unsigned __int16 *)v200)
      {
        v200 = (_DWORD *)((char *)v200 + 2);
        v203 = (_QWORD *)((char *)v203 + 2);
      }
      if (v200 < (_DWORD *)v332 && *(unsigned __int8 *)v203 == *(unsigned __int8 *)v200)
        LODWORD(v200) = (_DWORD)v200 + 1;
      v205 = (_DWORD)v200 - (_DWORD)v202;
    }
    else
    {
      v206 = (_DWORD)v200 - (_DWORD)v7 - 4;
      while (1)
      {
        v207 = *(_QWORD *)v200 ^ *v203;
        if (v207)
          break;
        v200 += 2;
        ++v203;
        v206 += 8;
        if ((unint64_t)v200 >= v177)
          goto LABEL_259;
      }
      v205 = (__clz(__rbit64(v207)) >> 3) + v206;
    }
LABEL_270:
    if ((unint64_t)&v198[(v205 + 240) / 0xFFuLL + 8] > v173)
      return 0;
    v208 = *v174;
    v209 = v205 - 15;
    if (v205 < 0xF)
    {
      *v174 = v208 + v205;
    }
    else
    {
      *v174 = v208 + 15;
      *(_DWORD *)v201 = -1;
      if (v209 >= 0x3FC)
      {
        v210 = v198 + 6;
        v211 = 2 * ((v205 - 1035) / 0x3FC);
        memset(v198 + 6, 255, v211 * 2 + 4);
        v173 = v352;
        a2 = v361;
        LOWORD(v209) = (v205 - 1035) % 0x3FC;
        v201 = (char *)&v210[v211];
      }
      v212 = &v201[(unsigned __int16)v209 / 0xFFu];
      *v212 = v209 + (unsigned __int16)v209 / 0xFFu;
      v201 = v212 + 1;
    }
    v7 += v205 + 4;
    if (v7 >= v175)
      break;
    *((_WORD *)v8 + ((-1640531535 * *(_DWORD *)(v7 - 2)) >> 19)) = (_WORD)v7 - 2 - (_WORD)a2;
    v213 = (-1640531535 * *(_DWORD *)v7) >> 19;
    v192 = &a2[*((unsigned __int16 *)v8 + v213)];
    *((_WORD *)v8 + v213) = (_WORD)v7 - (_WORD)a2;
    if (*(_DWORD *)v192 != *(_DWORD *)v7)
    {
      v122 = v7;
      v174 = v201;
      LODWORD(v7) = v357;
      v176 = v337;
      goto LABEL_227;
    }
    *v201 = 0;
    v198 = v201 + 1;
    v174 = v201;
  }
  v122 = v7;
  v174 = v201;
  LODWORD(v7) = v357;
LABEL_280:
  v172 = v340;
  v6 = v346;
LABEL_281:
  v168 = v172 - v122;
  if ((unint64_t)&v174[v172 - v122 + 1 + (v172 - v122 + 240) / 0xFFuLL] <= v173)
  {
LABEL_403:
    v306 = v168 - 15;
    if (v168 < 0xF)
    {
      *v174 = 16 * v168;
    }
    else
    {
      *v174 = -16;
      v307 = v174 + 1;
      if (v306 >= 0xFF)
      {
        v308 = &a2[v6] - v122 - 270;
        memset(v307, 255, v308 / 0xFF + 1);
        v306 = v308 % 0xFF;
        v307 = &v174[v308 / 0xFF + 2];
      }
      *v307 = v306;
      v174 = v307;
    }
    v309 = v174 + 1;
    goto LABEL_409;
  }
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3)
{
  char *v3;
  char *v4;
  char *v5;
  signed int v6;
  int v7;
  uint64_t v9;

  v3 = (char *)MEMORY[0x24BDAC7A8](this, a2, a3);
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)&v9, v3, v4, v5, v6, v7);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_default(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3)
{
  char *v3;
  char *v4;
  char *v5;
  signed int v6;
  uint64_t v8;

  v3 = (char *)MEMORY[0x24BDAC7A8](this, a2, a3);
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)&v8, v3, v4, v5, v6, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_force(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD *v12;
  char *v13;
  unint64_t v14;
  char *v15;
  _BYTE *v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  _DWORD *v20;
  int v21;
  int v22;
  int v23;
  _DWORD *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  char *v34;
  char *v35;
  unsigned int v37;
  _QWORD *v38;
  char v39;
  int v40;
  unsigned int v41;
  _WORD *v42;
  uint64_t v43;
  _DWORD *v44;
  _DWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unsigned int v49;
  int v50;
  unint64_t v51;
  char v52;
  unsigned int v53;
  _WORD *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  unsigned int v59;
  char *v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  int v64;
  unint64_t v65;
  _BYTE *v66;
  uint64_t *v67;
  _DWORD *v68;
  uint64_t v69;
  int v70;
  _QWORD *v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  char *v81;
  uint64_t *v82;
  _QWORD *v84;
  char v85;
  int v86;
  unsigned int v87;
  _WORD *v88;
  uint64_t v89;
  char *v90;
  _QWORD *v91;
  _QWORD *v92;
  unint64_t v93;
  unsigned int v94;
  _DWORD *v95;
  int v96;
  unint64_t v97;
  char v98;
  unsigned int v99;
  _WORD *v100;
  uint64_t v101;
  _BYTE *v102;
  unint64_t v103;
  uint64_t v104;
  size_t v105;
  unint64_t v106;
  _BYTE *v107;
  unint64_t v108;
  size_t v109;
  unint64_t v111;
  _BYTE *v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  char v120;
  unint64_t v121;
  unint64_t v122;
  int v123;
  char *v124;
  char *v125;
  int v126;
  int v127;
  int v128;
  int v129;
  unint64_t v130;
  unsigned __int16 v131[8192];
  int v132;
  __int16 v133;
  int v134;

  v3 = MEMORY[0x24BDAC7A8](this, a2, a3);
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v12 = (_QWORD *)v3;
  bzero(v131, 0x4020uLL);
  if (v9 > 65546)
  {
    if (v9 > 0x7E000000)
      return 0;
    v115 = v9;
    v60 = (char *)v12 + v9;
    v61 = (unint64_t)(v60 - 11);
    v62 = (unint64_t)&v11[v7];
    v134 = v9;
    v132 = v9;
    v133 = 2;
    v63 = (char *)v12 + 2;
    *(_DWORD *)((char *)v131 + (((0xCF1BBCDCBB000000 * *v12) >> 50) & 0x3FFC)) = 0;
    v64 = v5 << 6;
    v65 = (unint64_t)(v60 - 12);
    v117 = (unint64_t)(v60 - 8);
    v118 = (unint64_t)(v60 - 5);
    v124 = v60;
    v116 = (unint64_t)(v60 - 6);
    v128 = (int)v11;
    v130 = v62;
    v66 = v11;
    v67 = v12;
    v126 = v64;
LABEL_59:
    v68 = (_DWORD *)((char *)v67 + 1);
    v69 = *(uint64_t *)((char *)v67 + 1);
    v70 = v64;
    while (1)
    {
      v71 = v63;
      v72 = ((0xCF1BBCDCBB000000 * v69) >> 50) & 0x3FFC;
      v73 = *(unsigned int *)((char *)v131 + v72);
      v69 = *v71;
      *(_DWORD *)((char *)v131 + v72) = (_DWORD)v68 - (_DWORD)v12;
      if ((int)v73 + 0xFFFF >= ((_DWORD)v68 - (_DWORD)v12) && *(_DWORD *)((char *)v12 + v73) == *v68)
        break;
      v63 = (char *)v71 + (v70++ >> 6);
      v68 = v71;
      if ((unint64_t)v63 > v61)
        goto LABEL_114;
    }
    v74 = 0;
    v75 = (char *)v12 + v73;
    v76 = (_DWORD)v68 - (_DWORD)v67;
    v77 = (_DWORD)v68 - (_DWORD)v67 - 15;
    v78 = v77;
    do
    {
      v79 = v78;
      v80 = v74;
      v81 = &v75[v74];
      v82 = (uint64_t *)((char *)v68 + v74);
      if (&v75[v74] <= (char *)v12 || v82 <= v67)
        break;
      --v78;
      --v74;
    }
    while (*((unsigned __int8 *)v82 - 1) == *(v81 - 1));
    v84 = v66 + 1;
    if ((unint64_t)&v66[((_DWORD)v82 - (_DWORD)v67) + 9 + (v76 + v80) / 0xFFuLL] > v62)
      return 0;
    if ((v76 + v80) < 0xF)
    {
      *v66 = 16 * ((_BYTE)v82 - (_BYTE)v67);
    }
    else
    {
      v85 = v80 + v77;
      *v66 = -16;
      if (v80 + v77 > 254)
      {
        if (v79 >= 509)
          v86 = 509;
        else
          v86 = v79;
        v87 = v76 - v86 + v80 + 239;
        v120 = v76 - 14;
        memset(v84, 255, v87 / 0xFF + 1);
        v62 = v130;
        v84 = &v66[v87 / 0xFFuLL + 2];
        v85 = v87 / 0xFF + v120 + v80;
      }
      *(_BYTE *)v84 = v85;
      v84 = (_QWORD *)((char *)v84 + 1);
    }
    v88 = (_WORD *)((char *)v84 + ((_DWORD)v82 - (_DWORD)v67));
    do
    {
      v89 = *v67++;
      *v84++ = v89;
    }
    while (v84 < (_QWORD *)v88);
    v90 = v66;
    v67 = v82;
    while (1)
    {
      *v88 = (_WORD)v67 - (_WORD)v81;
      v66 = v88 + 1;
      v91 = (uint64_t *)((char *)v67 + 4);
      v92 = v81 + 4;
      if (v65 <= (unint64_t)v67 + 4)
      {
        v95 = (_DWORD *)v67 + 1;
      }
      else
      {
        v93 = *v91 ^ *v92;
        if (v93)
        {
          v94 = __clz(__rbit64(v93)) >> 3;
          goto LABEL_102;
        }
        v95 = (_DWORD *)v67 + 3;
        v92 = v81 + 12;
      }
      if ((unint64_t)v95 >= v65)
      {
LABEL_91:
        if ((unint64_t)v95 < v117 && *(_DWORD *)v92 == *v95)
        {
          ++v95;
          v92 = (_QWORD *)((char *)v92 + 4);
        }
        if ((unint64_t)v95 < v116 && *(unsigned __int16 *)v92 == *(unsigned __int16 *)v95)
        {
          v95 = (_DWORD *)((char *)v95 + 2);
          v92 = (_QWORD *)((char *)v92 + 2);
        }
        if ((unint64_t)v95 < v118 && *(unsigned __int8 *)v92 == *(unsigned __int8 *)v95)
          LODWORD(v95) = (_DWORD)v95 + 1;
        v94 = (_DWORD)v95 - (_DWORD)v91;
      }
      else
      {
        v96 = (_DWORD)v95 - (_DWORD)v67 - 4;
        while (1)
        {
          v97 = *(_QWORD *)v95 ^ *v92;
          if (v97)
            break;
          v95 += 2;
          ++v92;
          v96 += 8;
          if ((unint64_t)v95 >= v65)
            goto LABEL_91;
        }
        v94 = (__clz(__rbit64(v97)) >> 3) + v96;
      }
LABEL_102:
      if ((unint64_t)v88 + (v94 + 240) / 0xFFuLL + 8 > v62)
        return 0;
      v98 = *v90;
      v99 = v94 - 15;
      if (v94 < 0xF)
      {
        *v90 = v98 + v94;
      }
      else
      {
        *v90 = v98 + 15;
        *(_DWORD *)v66 = -1;
        if (v99 >= 0x3FC)
        {
          v100 = v88 + 3;
          v101 = 2 * ((v94 - 1035) / 0x3FC);
          memset(v88 + 3, 255, v101 * 2 + 4);
          v62 = v130;
          LOWORD(v99) = (v94 - 1035) % 0x3FC;
          v66 = &v100[v101];
        }
        v102 = &v66[(unsigned __int16)v99 / 0xFFu];
        *v102 = v99 + (unsigned __int16)v99 / 0xFFu;
        v66 = v102 + 1;
      }
      v67 = (uint64_t *)((char *)v67 + v94 + 4);
      if ((unint64_t)v67 >= v61)
        goto LABEL_114;
      *(_DWORD *)((char *)v131 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v67 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v67 - 2 - (_DWORD)v12;
      v103 = ((0xCF1BBCDCBB000000 * *v67) >> 50) & 0x3FFC;
      v104 = *(unsigned int *)((char *)v131 + v103);
      *(_DWORD *)((char *)v131 + v103) = (_DWORD)v67 - (_DWORD)v12;
      if ((int)v104 + 0xFFFF < ((_DWORD)v67 - (_DWORD)v12)
        || (v81 = (char *)v12 + v104, *(_DWORD *)((char *)v12 + v104) != *(_DWORD *)v67))
      {
        v63 = (char *)v67 + 2;
        v64 = v126;
        if ((unint64_t)v67 + 2 > v61)
        {
LABEL_114:
          v105 = v124 - (char *)v67;
          if ((unint64_t)&v66[v124 - (char *)v67 + 1 + (v124 - (char *)v67 + 240) / 0xFFuLL] > v62)
            return 0;
          v106 = v105 - 15;
          if (v105 < 0xF)
          {
            *v66 = 16 * v105;
          }
          else
          {
            *v66 = -16;
            v107 = v66 + 1;
            if (v106 >= 0xFF)
            {
              v108 = (char *)v12 + v115 - (char *)v67 - 270;
              memset(v107, 255, v108 / 0xFF + 1);
              v106 = v108 % 0xFF;
              v107 = &v66[v108 / 0xFF + 2];
            }
            *v107 = v106;
            v66 = v107;
          }
          memcpy(v66 + 1, v67, v105);
          return ((_DWORD)v66 + 1 + v105 - v128);
        }
        goto LABEL_59;
      }
      *v66 = 0;
      v88 = v66 + 1;
      v90 = v66;
    }
  }
  if (v9 > 0x7E000000)
    return 0;
  v13 = (char *)v12 + v9;
  v134 = v9;
  v14 = (unint64_t)&v11[v7];
  v132 = v9;
  v133 = 3;
  v15 = (char *)v12;
  v16 = v11;
  if (v9 < 0xD)
    goto LABEL_121;
  v129 = v9;
  v17 = (unint64_t)(v13 - 11);
  v131[(-1640531535 * *(_DWORD *)v12) >> 19] = 0;
  v18 = v5 << 6;
  v19 = (unint64_t)(v13 - 12);
  v121 = (unint64_t)(v13 - 8);
  v122 = (unint64_t)(v13 - 5);
  v125 = (char *)v12 + v9;
  v127 = (int)v11;
  v119 = (unint64_t)(v13 - 6);
  v15 = (char *)v12;
  v16 = v11;
  v123 = v5 << 6;
LABEL_5:
  v20 = v15 + 1;
  v21 = *(_DWORD *)(v15 + 1);
  v22 = 1;
  v23 = v18;
  do
  {
    v24 = v20;
    v20 = (_DWORD *)((char *)v20 + v22);
    if ((unint64_t)v20 > v17)
      goto LABEL_120;
    v22 = v23++ >> 6;
    v25 = (-1640531535 * v21) >> 19;
    v26 = v131[v25];
    v21 = *v20;
    v131[v25] = (_WORD)v24 - (_WORD)v12;
  }
  while (*(_DWORD *)((char *)v12 + v26) != *v24);
  v27 = 0;
  v28 = (char *)v12 + v26;
  v29 = (_DWORD)v24 - (_DWORD)v15;
  v30 = (_DWORD)v24 - (_DWORD)v15 - 15;
  v31 = v30;
  do
  {
    v32 = v31;
    v33 = v27;
    v34 = &v28[v27];
    v35 = (char *)v24 + v27;
    if (&v28[v27] <= (char *)v12 || v35 <= v15)
      break;
    --v31;
    --v27;
  }
  while (*(v35 - 1) == *(v34 - 1));
  v37 = (_DWORD)v35 - (_DWORD)v15;
  v38 = v16 + 1;
  if ((unint64_t)&v16[((_DWORD)v35 - (_DWORD)v15) + 9 + (v29 + v33) / 0xFFuLL] > v14)
    return 0;
  if ((v29 + v33) < 0xF)
  {
    *v16 = 16 * v37;
  }
  else
  {
    v39 = v33 + v30;
    *v16 = -16;
    if (v33 + v30 > 254)
    {
      if (v32 >= 509)
        v40 = 509;
      else
        v40 = v32;
      v41 = v29 - v40 + v33 + 239;
      v114 = v29 - 14;
      memset(v38, 255, v41 / 0xFF + 1);
      v37 = (_DWORD)v35 - (_DWORD)v15;
      v38 = &v16[v41 / 0xFFuLL + 2];
      v39 = v41 / 0xFF + v114 + v33;
    }
    *(_BYTE *)v38 = v39;
    v38 = (_QWORD *)((char *)v38 + 1);
  }
  v42 = (_WORD *)((char *)v38 + v37);
  do
  {
    v43 = *(_QWORD *)v15;
    v15 += 8;
    *v38++ = v43;
  }
  while (v38 < (_QWORD *)v42);
  while (1)
  {
    *v42 = (_WORD)v35 - (_WORD)v34;
    v45 = v42 + 1;
    v46 = v35 + 4;
    v47 = v34 + 4;
    if (v19 <= (unint64_t)(v35 + 4))
    {
      v44 = v35 + 4;
    }
    else
    {
      v48 = *v46 ^ *v47;
      if (v48)
      {
        v49 = __clz(__rbit64(v48)) >> 3;
        goto LABEL_48;
      }
      v44 = v35 + 12;
      v47 = v34 + 12;
    }
    if ((unint64_t)v44 >= v19)
    {
LABEL_37:
      if ((unint64_t)v44 < v121 && *(_DWORD *)v47 == *v44)
      {
        ++v44;
        v47 = (_QWORD *)((char *)v47 + 4);
      }
      if ((unint64_t)v44 < v119 && *(unsigned __int16 *)v47 == *(unsigned __int16 *)v44)
      {
        v44 = (_DWORD *)((char *)v44 + 2);
        v47 = (_QWORD *)((char *)v47 + 2);
      }
      if ((unint64_t)v44 < v122 && *(unsigned __int8 *)v47 == *(unsigned __int8 *)v44)
        LODWORD(v44) = (_DWORD)v44 + 1;
      v49 = (_DWORD)v44 - (_DWORD)v46;
    }
    else
    {
      v50 = (_DWORD)v44 - (_DWORD)v35 - 4;
      while (1)
      {
        v51 = *(_QWORD *)v44 ^ *v47;
        if (v51)
          break;
        v44 += 2;
        ++v47;
        v50 += 8;
        if ((unint64_t)v44 >= v19)
          goto LABEL_37;
      }
      v49 = (__clz(__rbit64(v51)) >> 3) + v50;
    }
LABEL_48:
    if ((unint64_t)v42 + (v49 + 240) / 0xFFuLL + 8 > v14)
      return 0;
    v52 = *v16;
    v53 = v49 - 15;
    if (v49 < 0xF)
    {
      *v16 = v52 + v49;
    }
    else
    {
      *v16 = v52 + 15;
      *v45 = -1;
      if (v53 >= 0x3FC)
      {
        v54 = v42 + 3;
        v55 = v17;
        v56 = v14;
        v57 = 2 * ((v49 - 1035) / 0x3FC);
        memset(v42 + 3, 255, v57 * 2 + 4);
        LOWORD(v53) = (v49 - 1035) % 0x3FC;
        v45 = &v54[v57];
        v14 = v56;
        v17 = v55;
      }
      v58 = (char *)v45 + (unsigned __int16)v53 / 0xFFu;
      *v58 = v53 + (unsigned __int16)v53 / 0xFFu;
      v45 = v58 + 1;
    }
    v35 += v49 + 4;
    if ((unint64_t)v35 >= v17)
      break;
    v131[(-1640531535 * *(_DWORD *)(v35 - 2)) >> 19] = (_WORD)v35 - 2 - (_WORD)v12;
    v59 = (-1640531535 * *(_DWORD *)v35) >> 19;
    v34 = (char *)v12 + v131[v59];
    v131[v59] = (_WORD)v35 - (_WORD)v12;
    if (*(_DWORD *)v34 != *(_DWORD *)v35)
    {
      v15 = v35;
      v16 = v45;
      v18 = v123;
      goto LABEL_5;
    }
    *(_BYTE *)v45 = 0;
    v42 = (_WORD *)((char *)v45 + 1);
    v16 = v45;
  }
  v15 = v35;
  v16 = v45;
LABEL_120:
  LODWORD(v11) = v127;
  v9 = v129;
  v13 = v125;
LABEL_121:
  v109 = v13 - v15;
  if ((unint64_t)&v16[v13 - v15 + 1 + (v13 - v15 + 240) / 0xFFuLL] > v14)
    return 0;
  v111 = v109 - 15;
  if (v109 < 0xF)
  {
    *v16 = 16 * v109;
  }
  else
  {
    *v16 = -16;
    v112 = v16 + 1;
    if (v111 >= 0xFF)
    {
      v113 = (char *)v12 + v9 - v15 - 270;
      memset(v112, 255, v113 / 0xFF + 1);
      v111 = v113 % 0xFF;
      v112 = &v16[v113 / 0xFF + 2];
    }
    *v112 = v111;
    v16 = v112;
  }
  memcpy(v16 + 1, v15, v109);
  return ((_DWORD)v16 + 1 + v109 - (_DWORD)v11);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_destSize(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3, int *a4)
{
  uint64_t v4;
  signed int v5;
  signed int v6;
  unsigned int *v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  signed int v13;
  unint64_t v14;
  uint64_t result;
  char *v16;
  size_t v17;
  unint64_t v18;
  _BYTE *v19;
  int v20;
  unint64_t v21;
  char *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  uint64_t *v40;
  int v42;
  _BYTE *v43;
  int v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  _WORD *v48;
  _DWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  unsigned int v53;
  _DWORD *v54;
  int v55;
  unint64_t v56;
  char v57;
  unsigned int v58;
  _WORD *v59;
  __int16 v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  size_t v68;
  unint64_t v69;
  _BYTE *v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  unsigned int v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int v83;
  int v84;
  int v85;
  int v86;
  char *v87;
  unsigned int v89;
  _QWORD *v90;
  int v91;
  unsigned int v92;
  _WORD *v93;
  char *v94;
  uint64_t v95;
  _DWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  unint64_t v99;
  unsigned int v100;
  char *v101;
  int v102;
  unint64_t v103;
  char v104;
  unsigned int v105;
  _WORD *v106;
  __int16 v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  char *v112;
  int v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  char *v118;
  _DWORD *v119;
  _DWORD *v120;
  int v121;
  int v122;
  unint64_t v123;
  unsigned __int16 v124[8192];
  int v125;
  __int16 v126;
  int v127;

  v4 = MEMORY[0x24BDAC7A8](this, a2, a3);
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v11 = (char *)v4;
  bzero(v124, 0x4020uLL);
  v12 = (char *)*v8;
  v13 = (_DWORD)v12 + v12 / 0xFF + 16;
  if (v12 > 0x7E000000)
    v13 = 0;
  if (v13 <= v6)
    return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)v124, v11, (char *)v10, v12, v6, 1);
  v14 = v10 + v6;
  v123 = v14;
  result = 0;
  if ((int)v12 <= 65546)
  {
    if (v6 < 1 || v12 > 0x7E000000)
      return result;
    v117 = &v11[(int)v12];
    v119 = v8;
    v127 = *v8;
    v125 = (int)v12;
    v126 = 3;
    v16 = v11;
    v121 = v10;
    if (v12 < 0xD)
      goto LABEL_8;
    v71 = (unint64_t)(v117 - 11);
    v124[(-1640531535 * *(_DWORD *)v11) >> 19] = 0;
    v72 = (unint64_t)(v117 - 12);
    v73 = v11;
LABEL_87:
    v74 = v73 + 1;
    v75 = *(_DWORD *)(v73 + 1);
    v76 = 1;
    v77 = 64;
    do
    {
      v78 = v74;
      v74 += v76;
      if ((unint64_t)v74 > v71)
        goto LABEL_149;
      v76 = v77++ >> 6;
      v79 = (-1640531535 * v75) >> 19;
      v80 = v124[v79];
      v75 = *(_DWORD *)v74;
      v124[v79] = (_WORD)v78 - (_WORD)v11;
    }
    while (*(_DWORD *)&v11[v80] != *(_DWORD *)v78);
    v81 = 0;
    v82 = &v11[v80];
    v83 = (_DWORD)v78 - (_DWORD)v73;
    v84 = (_DWORD)v78 - (_DWORD)v73 - 15;
    do
    {
      v85 = v84;
      v86 = v81;
      v87 = &v82[v81];
      v16 = &v78[v81];
      if (&v82[v81] <= v11 || v16 <= v73)
        break;
      --v84;
      --v81;
    }
    while (*(v16 - 1) == *(v87 - 1));
    v89 = (_DWORD)v16 - (_DWORD)v73;
    v90 = (_QWORD *)(v10 + 1);
    if (v10 + 1 + (v83 + v86 + 240) / 0xFFuLL + ((_DWORD)v16 - (_DWORD)v73) + 11 > v14)
      goto LABEL_149;
    if ((v83 + v86) < 0xF)
    {
      *(_BYTE *)v10 = 16 * v89;
    }
    else
    {
      v91 = v86 + (_DWORD)v78 - (_DWORD)v73 - 15;
      *(_BYTE *)v10 = -16;
      if (v91 > 254)
      {
        if (v85 >= 509)
          v85 = 509;
        v92 = v83 - v85 + v86 + 239;
        memset(v90, 255, v92 / 0xFF + 1);
        v14 = v123;
        v90 = (_QWORD *)(v10 + v92 / 0xFFuLL + 2);
        v89 = (_DWORD)v16 - (_DWORD)v73;
        LOBYTE(v91) = v92 / 0xFF + (_BYTE)v78 - (_BYTE)v73 - 14 + v86;
      }
      *(_BYTE *)v90 = v91;
      v90 = (_QWORD *)((char *)v90 + 1);
    }
    v93 = (_WORD *)((char *)v90 + v89);
    v94 = v73;
    do
    {
      v95 = *(_QWORD *)v94;
      v94 += 8;
      *v90++ = v95;
    }
    while (v90 < (_QWORD *)v93);
    if ((unint64_t)v93 + 11 > v14)
    {
LABEL_149:
      v16 = v73;
LABEL_8:
      v17 = v117 - v16;
      if (v10 + v117 - v16 + (v117 - v16 + 240) / 0xFFuLL + 1 > v14)
        v17 = ~v10 + v14 - (~v10 + v14 + 240) / 0xFF;
      v18 = v17 - 15;
      if (v17 < 0xF)
      {
        *(_BYTE *)v10 = 16 * v17;
        v20 = v121;
      }
      else
      {
        *(_BYTE *)v10 = -16;
        v19 = (_BYTE *)(v10 + 1);
        if (v18 >= 0xFF)
        {
          memset(v19, 255, (v17 - 270) / 0xFF + 1);
          v18 = (v17 - 270) % 0xFF;
          v19 = (_BYTE *)(v10 + (v17 - 270) / 0xFF + 2);
        }
        v20 = v121;
        *v19 = v18;
        v10 = (uint64_t)v19;
      }
      memcpy((void *)(v10 + 1), v16, v17);
      *v119 = (_DWORD)v16 + v17 - (_DWORD)v11;
      return (v10 + 1 + v17 - v20);
    }
    while (1)
    {
      *v93 = (_WORD)v16 - (_WORD)v87;
      v96 = v93 + 1;
      v97 = v16 + 4;
      v98 = v87 + 4;
      if (v72 <= (unint64_t)(v16 + 4))
      {
        v101 = v16 + 4;
      }
      else
      {
        v99 = *v97 ^ *v98;
        if (v99)
        {
          v100 = __clz(__rbit64(v99)) >> 3;
          goto LABEL_127;
        }
        v101 = v16 + 12;
        v98 = v87 + 12;
      }
      if ((unint64_t)v101 >= v72)
      {
LABEL_116:
        if (v101 < v117 - 8 && *(_DWORD *)v98 == *(_DWORD *)v101)
        {
          v101 += 4;
          v98 = (_QWORD *)((char *)v98 + 4);
        }
        if (v101 < v117 - 6 && *(unsigned __int16 *)v98 == *(unsigned __int16 *)v101)
        {
          v101 += 2;
          v98 = (_QWORD *)((char *)v98 + 2);
        }
        if (v101 < v117 - 5 && *(unsigned __int8 *)v98 == *v101)
          LODWORD(v101) = (_DWORD)v101 + 1;
        v100 = (_DWORD)v101 - (_DWORD)v97;
      }
      else
      {
        v102 = (_DWORD)v101 - (_DWORD)v16 - 4;
        while (1)
        {
          v103 = *(_QWORD *)v101 ^ *v98;
          if (v103)
            break;
          v101 += 8;
          ++v98;
          v102 += 8;
          if ((unint64_t)v101 >= v72)
            goto LABEL_116;
        }
        v100 = (__clz(__rbit64(v103)) >> 3) + v102;
      }
LABEL_127:
      v16 += v100 + 4;
      if ((unint64_t)v93 + (v100 + 240) / 0xFFuLL + 8 > v14)
      {
        v16 -= v100 - (255 * ((_DWORD)v14 - (_DWORD)v96) - 1516);
        if (v16 <= v78)
        {
          v112 = v16;
          do
          {
            v113 = *(_DWORD *)v112++;
            v124[(-1640531535 * v113) >> 19] = 0;
          }
          while (v112 <= v78);
          v100 = 255 * (v14 - (_DWORD)v96) - 1516;
          v14 = v123;
        }
        else
        {
          v100 = 255 * (v14 - (_DWORD)v96) - 1516;
        }
      }
      v104 = *(_BYTE *)v10;
      v105 = v100 - 15;
      if (v100 < 0xF)
      {
        *(_BYTE *)v10 = v104 + v100;
        v10 = (uint64_t)(v93 + 1);
      }
      else
      {
        *(_BYTE *)v10 = v104 + 15;
        *v96 = -1;
        if (v105 >= 0x3FC)
        {
          v106 = v93 + 3;
          v107 = v100 - 1035;
          v108 = (v100 - 1035) / 0x3FC;
          v109 = 2 * v108;
          memset(v93 + 3, 255, v109 * 2 + 4);
          v14 = v123;
          LOWORD(v105) = v107 - 1020 * v108;
          v96 = &v106[v109];
        }
        v110 = (unsigned __int16)v105 / 0xFFu;
        *((_BYTE *)v96 + v110) = v105 + (unsigned __int16)v105 / 0xFFu;
        v10 = (uint64_t)v96 + v110 + 1;
      }
      if ((unint64_t)v16 >= v71)
        goto LABEL_8;
      v124[(-1640531535 * *(_DWORD *)(v16 - 2)) >> 19] = (_WORD)v16 - 2 - (_WORD)v11;
      v111 = (-1640531535 * *(_DWORD *)v16) >> 19;
      v87 = &v11[v124[v111]];
      v124[v111] = (_WORD)v16 - (_WORD)v11;
      if (*(_DWORD *)v87 != *(_DWORD *)v16)
      {
        v73 = v16;
        goto LABEL_87;
      }
      v93 = (_WORD *)(v10 + 1);
      *(_BYTE *)v10 = 0;
      if (v10 + 12 > v14)
        goto LABEL_8;
    }
  }
  if (v6 < 1 || v12 > 0x7E000000)
    return result;
  v120 = v8;
  v21 = (unint64_t)&v12[(_QWORD)v11 - 11];
  v116 = (unint64_t)&v12[(_QWORD)v11 - 5];
  v118 = &v12[(_QWORD)v11];
  v127 = *v8;
  v125 = (int)v12;
  v22 = v11 + 2;
  v23 = 0xCF1BBCDCBB000000 * *(_QWORD *)v11;
  v126 = 2;
  *(_DWORD *)((char *)v124 + ((v23 >> 50) & 0x3FFC)) = 0;
  v24 = (unint64_t)&v12[(_QWORD)v11 - 12];
  v114 = (unint64_t)&v12[(_QWORD)v11 - 6];
  v115 = (unint64_t)&v12[(_QWORD)v11 - 8];
  v122 = v10;
  v25 = (uint64_t *)v11;
LABEL_18:
  v27 = (uint64_t *)((char *)v25 + 1);
  v26 = *(uint64_t *)((char *)v25 + 1);
  v28 = 1;
  v29 = 65;
  while (1)
  {
    v30 = (uint64_t *)v22;
    v31 = ((0xCF1BBCDCBB000000 * v26) >> 50) & 0x3FFC;
    v32 = *(unsigned int *)((char *)v124 + v31);
    v26 = *v30;
    *(_DWORD *)((char *)v124 + v31) = (_DWORD)v27 - (_DWORD)v11;
    if ((int)v32 + 0xFFFF >= ((_DWORD)v27 - (_DWORD)v11) && *(_DWORD *)&v11[v32] == *(_DWORD *)v27)
      break;
    v22 = (char *)v30 + v28;
    v28 = v29++ >> 6;
    v27 = v30;
    if ((unint64_t)v22 > v21)
      goto LABEL_80;
  }
  v33 = 0;
  v34 = &v11[v32];
  v35 = (_DWORD)v27 - (_DWORD)v25;
  v36 = (_DWORD)v27 - (_DWORD)v25 - 15;
  do
  {
    v37 = v36;
    v38 = v33;
    v39 = &v34[v33];
    v40 = (uint64_t *)((char *)v27 + v33);
    if (&v34[v33] <= v11 || v40 <= v25)
      break;
    --v36;
    --v33;
  }
  while (*((unsigned __int8 *)v40 - 1) == *(v39 - 1));
  v42 = (_DWORD)v40 - (_DWORD)v25;
  v43 = (_BYTE *)(v10 + 1);
  if (v10 + 1 + (v35 + v38 + 240) / 0xFFuLL + ((_DWORD)v40 - (_DWORD)v25) + 11 <= v14)
  {
    if ((v35 + v38) < 0xF)
    {
      *(_BYTE *)v10 = 16 * v42;
    }
    else
    {
      v44 = v38 + (_DWORD)v27 - (_DWORD)v25 - 15;
      *(_BYTE *)v10 = -16;
      if (v44 > 254)
      {
        if (v37 >= 509)
          v45 = 509;
        else
          v45 = v37;
        v46 = v35 - v45 + v38 + 239;
        memset(v43, 255, v46 / 0xFF + 1);
        v14 = v123;
        v43 = (_BYTE *)(v10 + v46 / 0xFFuLL + 2);
        v42 = (_DWORD)v40 - (_DWORD)v25;
        LOBYTE(v44) = v46 / 0xFF + (_BYTE)v27 - (_BYTE)v25 - 14 + v38;
      }
      *v43++ = v44;
    }
    v47 = 0;
    v48 = &v43[v42];
    do
    {
      *(_QWORD *)&v43[v47 * 8] = v25[v47];
      ++v47;
    }
    while (&v43[v47 * 8] < (_BYTE *)v48);
    if ((unint64_t)v48 + 11 <= v14)
    {
      v25 = v40;
      do
      {
        *v48 = (_WORD)v25 - (_WORD)v39;
        v49 = v48 + 1;
        v50 = (uint64_t *)((char *)v25 + 4);
        v51 = v39 + 4;
        if (v24 <= (unint64_t)v25 + 4)
        {
          v54 = (_DWORD *)v25 + 1;
        }
        else
        {
          v52 = *v50 ^ *v51;
          if (v52)
          {
            v53 = __clz(__rbit64(v52)) >> 3;
            goto LABEL_62;
          }
          v54 = (_DWORD *)v25 + 3;
          v51 = v39 + 12;
        }
        if ((unint64_t)v54 >= v24)
        {
LABEL_51:
          if ((unint64_t)v54 < v115 && *(_DWORD *)v51 == *v54)
          {
            ++v54;
            v51 = (_QWORD *)((char *)v51 + 4);
          }
          if ((unint64_t)v54 < v114 && *(unsigned __int16 *)v51 == *(unsigned __int16 *)v54)
          {
            v54 = (_DWORD *)((char *)v54 + 2);
            v51 = (_QWORD *)((char *)v51 + 2);
          }
          if ((unint64_t)v54 < v116 && *(unsigned __int8 *)v51 == *(unsigned __int8 *)v54)
            LODWORD(v54) = (_DWORD)v54 + 1;
          v53 = (_DWORD)v54 - (_DWORD)v50;
        }
        else
        {
          v55 = (_DWORD)v54 - (_DWORD)v25 - 4;
          while (1)
          {
            v56 = *(_QWORD *)v54 ^ *v51;
            if (v56)
              break;
            v54 += 2;
            ++v51;
            v55 += 8;
            if ((unint64_t)v54 >= v24)
              goto LABEL_51;
          }
          v53 = (__clz(__rbit64(v56)) >> 3) + v55;
        }
LABEL_62:
        v25 = (uint64_t *)((char *)v25 + v53 + 4);
        if ((unint64_t)v48 + (v53 + 240) / 0xFFuLL + 8 > v14)
        {
          v25 = (uint64_t *)((char *)v25 - (v53 - (255 * ((_DWORD)v14 - (_DWORD)v49) - 1516)));
          if (v25 <= v27)
          {
            v66 = v25;
            do
            {
              v67 = *v66;
              v66 = (uint64_t *)((char *)v66 + 1);
              *(_DWORD *)((char *)v124 + (((0xCF1BBCDCBB000000 * v67) >> 50) & 0x3FFC)) = 0;
            }
            while (v66 <= v27);
            v53 = 255 * (v14 - (_DWORD)v49) - 1516;
            v14 = v123;
          }
          else
          {
            v53 = 255 * (v14 - (_DWORD)v49) - 1516;
          }
        }
        v57 = *(_BYTE *)v10;
        v58 = v53 - 15;
        if (v53 < 0xF)
        {
          *(_BYTE *)v10 = v57 + v53;
          v10 = (uint64_t)(v48 + 1);
        }
        else
        {
          *(_BYTE *)v10 = v57 + 15;
          *v49 = -1;
          if (v58 >= 0x3FC)
          {
            v59 = v48 + 3;
            v60 = v53 - 1035;
            v61 = (v53 - 1035) / 0x3FC;
            v62 = 2 * v61;
            memset(v48 + 3, 255, v62 * 2 + 4);
            v14 = v123;
            LOWORD(v58) = v60 - 1020 * v61;
            v49 = &v59[v62];
          }
          v63 = (unsigned __int16)v58 / 0xFFu;
          *((_BYTE *)v49 + v63) = v58 + (unsigned __int16)v58 / 0xFFu;
          v10 = (uint64_t)v49 + v63 + 1;
        }
        if ((unint64_t)v25 >= v21)
          break;
        *(_DWORD *)((char *)v124 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v25 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v25 - 2 - (_DWORD)v11;
        v64 = ((0xCF1BBCDCBB000000 * *v25) >> 50) & 0x3FFC;
        v65 = *(unsigned int *)((char *)v124 + v64);
        *(_DWORD *)((char *)v124 + v64) = (_DWORD)v25 - (_DWORD)v11;
        if ((int)v65 + 0xFFFF < ((_DWORD)v25 - (_DWORD)v11)
          || (v39 = &v11[v65], *(_DWORD *)&v11[v65] != *(_DWORD *)v25))
        {
          v22 = (char *)v25 + 2;
          if ((unint64_t)v25 + 2 > v21)
            break;
          goto LABEL_18;
        }
        v48 = (_WORD *)(v10 + 1);
        *(_BYTE *)v10 = 0;
      }
      while (v10 + 12 <= v14);
    }
  }
LABEL_80:
  v68 = v118 - (char *)v25;
  if (v10 + v118 - (char *)v25 + (v118 - (char *)v25 + 240) / 0xFFuLL + 1 > v14)
    v68 = ~v10 + v14 - (~v10 + v14 + 240) / 0xFF;
  v69 = v68 - 15;
  if (v68 < 0xF)
  {
    *(_BYTE *)v10 = 16 * v68;
  }
  else
  {
    *(_BYTE *)v10 = -16;
    v70 = (_BYTE *)(v10 + 1);
    if (v69 >= 0xFF)
    {
      memset(v70, 255, (v68 - 270) / 0xFF + 1);
      v69 = (v68 - 270) % 0xFF;
      v70 = (_BYTE *)(v10 + (v68 - 270) / 0xFF + 2);
    }
    *v70 = v69;
    v10 = (uint64_t)v70;
  }
  memcpy((void *)(v10 + 1), v25, v68);
  *v120 = (_DWORD)v25 + v68 - (_DWORD)v11;
  return (v10 + 1 + v68 - v122);
}

void *pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_createStream(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  void *v1;
  void *v2;

  v1 = malloc(0x4020uLL);
  v2 = v1;
  if (v1 && (v1 & 7) == 0)
    bzero(v1, 0x4020uLL);
  return v2;
}

void pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_resetStream(void *a1)
{
  bzero(a1, 0x4020uLL);
}

double pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_resetStream_fast(char *a1)
{
  int *v2;
  double result;
  int v4;

  v2 = (int *)(a1 + 0x4000);
  if (*((_WORD *)a1 + 8194))
  {
    bzero(a1, 0x4020uLL);
    return result;
  }
  if (*((_WORD *)a1 + 8195) == 2)
  {
    v4 = *v2;
    if (*v2 < 0x40000001)
    {
LABEL_8:
      if (v4)
        *v2 = v4 + 0x10000;
      goto LABEL_10;
    }
  }
  else if (!*((_WORD *)a1 + 8195))
  {
    v4 = *v2;
    goto LABEL_8;
  }
  *((_WORD *)a1 + 8195) = 0;
  bzero(a1, 0x4004uLL);
LABEL_10:
  *((_DWORD *)a1 + 4102) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16392) = 0u;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_freeStream(void *a1)
{
  if (a1)
    free(a1);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_loadDict(_QWORD *a1, char *a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t result;
  char *v8;
  char *v9;
  unint64_t v10;
  int v11;
  unsigned int v12;
  uint64_t v13;

  v6 = a1 + 2048;
  bzero(a1, 0x4020uLL);
  *(_DWORD *)v6 = 0x10000;
  if ((int)a3 < 8)
    return 0;
  v8 = &a2[a3];
  v9 = v8 - 0x10000;
  if (a3 <= 0x10000)
    v9 = a2;
  a1[2049] = v9;
  result = ((_DWORD)v8 - (_DWORD)v9);
  *((_DWORD *)v6 + 6) = result;
  *((_WORD *)v6 + 3) = 2;
  v10 = (unint64_t)(v8 - 8);
  if ((unint64_t)v9 <= v10)
  {
    v11 = a3;
    if (a3 <= 0x10000uLL)
      v11 = 0x10000;
    v12 = v11 - a3;
    do
    {
      v13 = *(_QWORD *)v9;
      v9 += 3;
      *(_DWORD *)((char *)a1 + (((0xCF1BBCDCBB000000 * v13) >> 50) & 0x3FFC)) = v12;
      v12 += 3;
    }
    while ((unint64_t)v9 <= v10);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_attach_dictionary(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_resetStream_fast((char *)a1);
  if (a2)
  {
    if (!*(_DWORD *)(a1 + 0x4000))
      *(_DWORD *)(a1 + 0x4000) = 0x10000;
    if (*(_DWORD *)(a2 + 16408))
      v4 = a2;
    else
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 16400) = v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_continue(uint64_t a1, char *a2, _BYTE *a3, int a4, int a5, int a6)
{
  uint64_t result;
  int v9;
  char *v11;
  char *v12;
  unsigned int *v13;
  int v14;
  uint64_t v15;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  unint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  unint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  char *v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  char *v44;
  uint64_t *v45;
  unsigned int v47;
  _QWORD *v48;
  char v49;
  int v50;
  unsigned int v51;
  _WORD *v52;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t v57;
  unsigned int v58;
  _DWORD *v59;
  int v60;
  unint64_t v61;
  char v62;
  unsigned int v63;
  _WORD *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _BYTE *v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  int v81;
  char *v82;
  _DWORD *v83;
  unsigned int v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  _QWORD *v88;
  unint64_t v89;
  uint64_t v90;
  char *v92;
  uint64_t v93;
  char *v94;
  char *v95;
  __int16 v96;
  int v97;
  int v98;
  char v99;
  int v100;
  int v101;
  int v102;
  char *v103;
  uint64_t *v104;
  unsigned int v106;
  _QWORD *v107;
  char v108;
  int v109;
  unsigned int v110;
  char *v111;
  _WORD *v112;
  uint64_t v113;
  char *v114;
  _QWORD *v115;
  _QWORD *v116;
  unint64_t v117;
  unsigned int v118;
  char *v119;
  _QWORD *v120;
  _QWORD *v121;
  char *v122;
  unint64_t v123;
  _DWORD *v124;
  int v125;
  unint64_t v126;
  char *v127;
  int v128;
  unint64_t v129;
  _DWORD *v130;
  _DWORD *v131;
  unint64_t v132;
  unsigned int v133;
  unint64_t v134;
  int v135;
  unint64_t v136;
  char v137;
  unsigned int v138;
  _WORD *v139;
  __int16 v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  char *v145;
  char *v146;
  _BYTE *v147;
  unsigned int v148;
  unint64_t v149;
  uint64_t v150;
  char *v151;
  BOOL v152;
  unint64_t v153;
  char *v154;
  char *v155;
  int v156;
  char *v157;
  unint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  int v161;
  _QWORD *v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char *v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  char *v172;
  uint64_t *v173;
  unsigned int v175;
  _QWORD *v176;
  char v177;
  int v178;
  unsigned int v179;
  _WORD *v180;
  uint64_t v181;
  char *v182;
  _QWORD *v183;
  _QWORD *v184;
  unint64_t v185;
  unsigned int v186;
  _DWORD *v187;
  int v188;
  unint64_t v189;
  char v190;
  unsigned int v191;
  _WORD *v192;
  char *v193;
  uint64_t v194;
  _BYTE *v195;
  unint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  _BYTE *v200;
  unint64_t v201;
  unint64_t v202;
  unsigned int v203;
  char *v204;
  uint64_t *v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  int v209;
  _QWORD *v210;
  _DWORD *v211;
  unsigned int v212;
  unint64_t v213;
  uint64_t v214;
  int v215;
  unint64_t v216;
  uint64_t v217;
  _DWORD *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  __int16 v223;
  int v224;
  int v225;
  char v226;
  int v227;
  int v228;
  int v229;
  char *v230;
  uint64_t *v231;
  unsigned int v233;
  char *v234;
  char v235;
  int v236;
  unsigned int v237;
  unint64_t v238;
  char *v239;
  uint64_t v240;
  char *v241;
  _QWORD *v242;
  _QWORD *v243;
  unint64_t v244;
  unsigned int v245;
  char *v246;
  _QWORD *v247;
  _QWORD *v248;
  char *v249;
  unint64_t v250;
  _DWORD *v251;
  int v252;
  unint64_t v253;
  char *v254;
  int v255;
  unint64_t v256;
  _DWORD *v257;
  _DWORD *v258;
  unint64_t v259;
  unsigned int v260;
  unint64_t v261;
  int v262;
  unint64_t v263;
  char v264;
  unsigned int v265;
  _WORD *v266;
  __int16 v267;
  unsigned int v268;
  uint64_t v269;
  unint64_t v270;
  char *v271;
  char *v272;
  unsigned int v273;
  unint64_t v274;
  uint64_t v275;
  char *v276;
  uint64_t v277;
  int v278;
  char *v279;
  char *v280;
  uint64_t v281;
  unint64_t v282;
  char *v283;
  int v284;
  _QWORD *v285;
  _DWORD *v286;
  unsigned int v287;
  char *v288;
  _BYTE *v289;
  unint64_t v290;
  uint64_t *v291;
  unint64_t v292;
  uint64_t v293;
  int v294;
  unint64_t v295;
  uint64_t v296;
  _DWORD *v297;
  char *v298;
  uint64_t v299;
  char *v300;
  char *v301;
  __int16 v302;
  int v303;
  int v304;
  char v305;
  int v306;
  int v307;
  int v308;
  char *v309;
  uint64_t *v310;
  unsigned int v312;
  _QWORD *v313;
  char v314;
  int v315;
  unsigned int v316;
  _WORD *v317;
  uint64_t v318;
  char *v319;
  _QWORD *v320;
  _QWORD *v321;
  unint64_t v322;
  unsigned int v323;
  _QWORD *v324;
  _QWORD *v325;
  _QWORD *v326;
  char *v327;
  unint64_t v328;
  _DWORD *v329;
  int v330;
  unint64_t v331;
  char *v332;
  int v333;
  unint64_t v334;
  _DWORD *v335;
  _DWORD *v336;
  unint64_t v337;
  unsigned int v338;
  unint64_t v339;
  int v340;
  unint64_t v341;
  char v342;
  unsigned int v343;
  _WORD *v344;
  __int16 v345;
  unsigned int v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  unint64_t v350;
  char *v351;
  unint64_t v352;
  _BYTE *v353;
  unsigned int v354;
  unint64_t v355;
  uint64_t v356;
  char *v357;
  size_t v358;
  unint64_t v359;
  _BYTE *v360;
  unint64_t v361;
  _BYTE *v362;
  int v363;
  uint64_t v364;
  char *v365;
  uint64_t v366;
  uint64_t v367;
  char *v368;
  _BYTE *v369;
  char *v370;
  uint64_t v371;
  unint64_t v372;
  char *v373;
  int v374;
  char *v375;
  _DWORD *v376;
  unsigned int v377;
  uint64_t v378;
  int v379;
  _QWORD *v380;
  unint64_t v381;
  uint64_t v382;
  uint64_t v383;
  char *v384;
  char *v385;
  uint64_t v386;
  __int16 v387;
  int v388;
  int v389;
  char v390;
  int v391;
  int v392;
  int v393;
  char *v394;
  char *v395;
  unsigned int v397;
  _QWORD *v398;
  char v399;
  int v400;
  unsigned int v401;
  unint64_t v402;
  _WORD *v403;
  uint64_t v404;
  char *v405;
  _QWORD *v406;
  _QWORD *v407;
  unint64_t v408;
  unsigned int v409;
  char *v410;
  _QWORD *v411;
  _QWORD *v412;
  char *v413;
  unint64_t v414;
  _DWORD *v415;
  int v416;
  unint64_t v417;
  char *v418;
  int v419;
  unint64_t v420;
  _DWORD *v421;
  _DWORD *v422;
  unint64_t v423;
  unsigned int v424;
  unint64_t v425;
  int v426;
  unint64_t v427;
  char v428;
  unsigned int v429;
  __int16 v430;
  unsigned int v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  char *v436;
  unint64_t v437;
  _BYTE *v438;
  unint64_t v439;
  uint64_t v440;
  size_t v441;
  unint64_t v442;
  _BYTE *v443;
  unint64_t v444;
  size_t v445;
  unint64_t v446;
  _BYTE *v447;
  unint64_t v448;
  unint64_t v449;
  char *v450;
  unint64_t v451;
  void *v452;
  int v453;
  void *v454;
  int v455;
  void *v456;
  uint64_t *v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  char v462;
  char v463;
  unint64_t v464;
  unint64_t v465;
  unint64_t v466;
  unint64_t v467;
  char v468;
  char v469;
  unint64_t v470;
  unint64_t v471;
  char *v472;
  unsigned int v473;
  uint64_t v474;
  char *v475;
  unint64_t v476;
  unint64_t v477;
  char *v478;
  unint64_t v479;
  char *v480;
  uint64_t v481;
  char *v482;
  unint64_t v483;
  int v484;
  unint64_t v485;
  char *v486;
  int v487;
  char v488;
  char *v489;
  unint64_t v490;
  char *v491;
  char *v492;
  unint64_t v493;
  unint64_t v494;
  int v495;
  int v496;
  int v497;
  char v498;
  _BYTE *v499;
  unint64_t v500;
  char *v501;
  char *v502;
  int v503;
  int v504;
  int v505;
  int v506;
  char *v507;
  char *v508;
  char *v509;
  char *v510;
  char *v511;
  char *v512;
  unsigned int v513;
  char *v514;
  char *v515;
  char *v516;
  unint64_t v517;
  int v518;
  char *v519;
  char *v520;
  char *v521;
  uint64_t v522;
  _WORD *v523;
  uint64_t v524;
  unint64_t v525;
  unint64_t v526;
  unsigned int v527;
  unsigned int *v528;
  unint64_t v529;
  int v530;

  if (*(_WORD *)(a1 + 16388))
    return 0;
  v9 = a4;
  v11 = (char *)(*(_QWORD *)(a1 + 16392) + *(unsigned int *)(a1 + 16408));
  v528 = (unsigned int *)(a1 + 0x4000);
  sub_20BEAE60C(a1, a4);
  v13 = v528;
  v12 = a2;
  if (a6 <= 1)
    v14 = 1;
  else
    v14 = a6;
  LODWORD(v15) = v528[6];
  if ((v15 - 4) < 0xFFFFFFFD || v11 == a2)
  {
    v17 = *(char **)(a1 + 16392);
  }
  else
  {
    LODWORD(v15) = 0;
    v528[6] = 0;
    *(_QWORD *)(a1 + 16392) = a2;
    v17 = a2;
    v11 = a2;
  }
  v18 = &a2[v9];
  if (v18 > v17 && v18 < v11)
  {
    LODWORD(v15) = (_DWORD)v11 - (_DWORD)v18;
    if (((_DWORD)v11 - (_DWORD)v18) >= 0x10000)
      LODWORD(v15) = 0x10000;
    if (v15 >= 4)
      v15 = v15;
    else
      v15 = 0;
    v528[6] = v15;
    v17 = &v11[-v15];
    *(_QWORD *)(a1 + 16392) = &v11[-v15];
  }
  v524 = v9;
  if (v11 == a2)
  {
    v21 = *v528;
    v22 = &a2[-v21];
    if (!WORD1(v15))
    {
      v23 = (v21 - v15);
      if (v21 > v15)
      {
        if (v9 > 0x7E000000)
          return 0;
        v526 = (unint64_t)&a3[a5];
        v528[6] = v15 + v9;
        *v528 = v21 + v9;
        *((_WORD *)v528 + 3) = 2;
        v24 = (uint64_t *)a2;
        v503 = (int)a3;
        if (v9 >= 0xD)
        {
          v25 = (unint64_t)&a2[v9 - 11];
          v483 = (unint64_t)(v18 - 5);
          v26 = &a2[-v15];
          v27 = a2 + 2;
          *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(_QWORD *)a2) >> 50) & 0x3FFC)) = v21;
          v28 = v14 << 6;
          v29 = (unint64_t)(v18 - 12);
          v477 = (unint64_t)(v18 - 6);
          v479 = (unint64_t)(v18 - 8);
          v24 = (uint64_t *)a2;
          v507 = &a2[v9];
          v529 = v25;
          v518 = v28;
LABEL_30:
          v30 = (_DWORD *)((char *)v24 + 1);
          v31 = *(uint64_t *)((char *)v24 + 1);
          v32 = v28;
          while (1)
          {
            v33 = v27;
            v34 = ((0xCF1BBCDCBB000000 * v31) >> 50) & 0x3FFC;
            v35 = *(unsigned int *)(a1 + v34);
            v31 = *v33;
            *(_DWORD *)(a1 + v34) = (_DWORD)v30 - (_DWORD)v22;
            v36 = v35 >= v23
               && (int)v35 + 0xFFFF >= ((_DWORD)v30 - (_DWORD)v22);
            if (v36 && *(_DWORD *)&v22[v35] == *v30)
              break;
            v27 = (char *)v33 + (v32++ >> 6);
            v30 = v33;
            if ((unint64_t)v27 > v25)
              goto LABEL_284;
          }
          v37 = 0;
          v38 = &v22[v35];
          v39 = (_DWORD)v30 - (_DWORD)v24;
          v40 = (_DWORD)v30 - (_DWORD)v24 - 15;
          v41 = v40;
          do
          {
            v42 = v41;
            v43 = v37;
            v44 = &v38[v37];
            v45 = (uint64_t *)((char *)v30 + v37);
            if (&v38[v37] <= v26 || v45 <= v24)
              break;
            --v41;
            --v37;
          }
          while (*((unsigned __int8 *)v45 - 1) == *(v44 - 1));
          v47 = (_DWORD)v45 - (_DWORD)v24;
          v48 = a3 + 1;
          if ((unint64_t)&a3[((_DWORD)v45 - (_DWORD)v24) + 9 + (v39 + v43) / 0xFFuLL] <= v526)
          {
            if ((v39 + v43) < 0xF)
            {
              *a3 = 16 * v47;
            }
            else
            {
              v49 = v43 + v40;
              *a3 = -16;
              if (v43 + v40 > 254)
              {
                if (v42 >= 509)
                  v50 = 509;
                else
                  v50 = v42;
                v51 = v39 - v50 + v43 + 239;
                v513 = v23;
                v488 = v39 - 14;
                memset(v48, 255, v51 / 0xFF + 1);
                v47 = (_DWORD)v45 - (_DWORD)v24;
                v23 = v513;
                v12 = a2;
                v48 = &a3[v51 / 0xFFuLL + 2];
                v49 = v51 / 0xFF + v488 + v43;
              }
              *(_BYTE *)v48 = v49;
              v48 = (_QWORD *)((char *)v48 + 1);
            }
            v52 = (_WORD *)((char *)v48 + v47);
            do
            {
              v53 = *v24++;
              *v48++ = v53;
            }
            while (v48 < (_QWORD *)v52);
            v54 = a3;
            v24 = v45;
            while (1)
            {
              *v52 = (_WORD)v24 - (_WORD)v44;
              a3 = v52 + 1;
              v55 = (uint64_t *)((char *)v24 + 4);
              v56 = v44 + 4;
              if (v29 <= (unint64_t)v24 + 4)
              {
                v59 = (_DWORD *)v24 + 1;
              }
              else
              {
                v57 = *v55 ^ *v56;
                if (v57)
                {
                  v58 = __clz(__rbit64(v57)) >> 3;
                  goto LABEL_77;
                }
                v59 = (_DWORD *)v24 + 3;
                v56 = v44 + 12;
              }
              if ((unint64_t)v59 >= v29)
              {
LABEL_66:
                if ((unint64_t)v59 < v479 && *(_DWORD *)v56 == *v59)
                {
                  ++v59;
                  v56 = (_QWORD *)((char *)v56 + 4);
                }
                if ((unint64_t)v59 < v477 && *(unsigned __int16 *)v56 == *(unsigned __int16 *)v59)
                {
                  v59 = (_DWORD *)((char *)v59 + 2);
                  v56 = (_QWORD *)((char *)v56 + 2);
                }
                if ((unint64_t)v59 < v483 && *(unsigned __int8 *)v56 == *(unsigned __int8 *)v59)
                  LODWORD(v59) = (_DWORD)v59 + 1;
                v58 = (_DWORD)v59 - (_DWORD)v55;
              }
              else
              {
                v60 = (_DWORD)v59 - (_DWORD)v24 - 4;
                while (1)
                {
                  v61 = *(_QWORD *)v59 ^ *v56;
                  if (v61)
                    break;
                  v59 += 2;
                  ++v56;
                  v60 += 8;
                  if ((unint64_t)v59 >= v29)
                    goto LABEL_66;
                }
                v58 = (__clz(__rbit64(v61)) >> 3) + v60;
              }
LABEL_77:
              if ((unint64_t)v52 + (v58 + 240) / 0xFFuLL + 8 > v526)
                return 0;
              v62 = *v54;
              v63 = v58 - 15;
              if (v58 < 0xF)
              {
                *v54 = v62 + v58;
              }
              else
              {
                *v54 = v62 + 15;
                *(_DWORD *)a3 = -1;
                if (v63 >= 0x3FC)
                {
                  v64 = v52 + 3;
                  v65 = 2 * ((v58 - 1035) / 0x3FC);
                  v66 = v26;
                  v67 = v23;
                  memset(v52 + 3, 255, v65 * 2 + 4);
                  v23 = v67;
                  v26 = v66;
                  v25 = v529;
                  v12 = a2;
                  LOWORD(v63) = (v58 - 1035) % 0x3FC;
                  a3 = &v64[v65];
                  v18 = v507;
                }
                v68 = &a3[(unsigned __int16)v63 / 0xFFu];
                *v68 = v63 + (unsigned __int16)v63 / 0xFFu;
                a3 = v68 + 1;
              }
              v24 = (uint64_t *)((char *)v24 + v58 + 4);
              if ((unint64_t)v24 >= v25)
                goto LABEL_284;
              *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v24 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v24 - 2 - (_DWORD)v22;
              v69 = ((0xCF1BBCDCBB000000 * *v24) >> 50) & 0x3FFC;
              v70 = *(unsigned int *)(a1 + v69);
              *(_DWORD *)(a1 + v69) = (_DWORD)v24 - (_DWORD)v22;
              v71 = v70 >= v23
                 && (int)v70 + 0xFFFF >= ((_DWORD)v24 - (_DWORD)v22);
              if (!v71 || (v44 = &v22[v70], *(_DWORD *)&v22[v70] != *(_DWORD *)v24))
              {
                v27 = (char *)v24 + 2;
                v28 = v518;
                if ((unint64_t)v24 + 2 > v25)
                  goto LABEL_284;
                goto LABEL_30;
              }
              *a3 = 0;
              v52 = a3 + 1;
              v54 = a3;
            }
          }
          return 0;
        }
LABEL_284:
        v198 = v18 - (char *)v24;
        if ((unint64_t)&a3[v18 - (char *)v24 + 1 + (v18 - (char *)v24 + 240) / 0xFFuLL] <= v526)
        {
          v199 = v198 - 15;
          if (v198 < 0xF)
          {
            *a3 = 16 * v198;
          }
          else
          {
            *a3 = -16;
            v200 = a3 + 1;
            if (v199 >= 0xFF)
            {
              v201 = &v12[v524] - (char *)v24 - 270;
              memset(v200, 255, v201 / 0xFF + 1);
              v199 = v201 % 0xFF;
              v200 = &a3[v201 / 0xFF + 2];
            }
            *v200 = v199;
            a3 = v200;
          }
          memcpy(a3 + 1, v24, v18 - (char *)v24);
          return ((_DWORD)a3 + 1 + v198 - v503);
        }
        return 0;
      }
    }
    if (v9 > 0x7E000000)
      return 0;
    v526 = (unint64_t)&a3[a5];
    v528[6] = v15 + v9;
    *v528 = v21 + v9;
    *((_WORD *)v528 + 3) = 2;
    v24 = (uint64_t *)a2;
    v503 = (int)a3;
    if (v9 < 0xD)
      goto LABEL_284;
    v153 = (unint64_t)&a2[v9 - 11];
    v494 = (unint64_t)(v18 - 5);
    v154 = &a2[-v15];
    v155 = a2 + 2;
    *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(_QWORD *)a2) >> 50) & 0x3FFC)) = v21;
    v156 = v14 << 6;
    v157 = &a2[v9];
    v158 = (unint64_t)(v18 - 12);
    v509 = v157;
    v485 = (unint64_t)(v157 - 6);
    v490 = (unint64_t)(v157 - 8);
    v24 = (uint64_t *)a2;
    v530 = v14 << 6;
LABEL_228:
    v159 = (_DWORD *)((char *)v24 + 1);
    v160 = *(uint64_t *)((char *)v24 + 1);
    v161 = v156;
    while (1)
    {
      v162 = v155;
      v163 = ((0xCF1BBCDCBB000000 * v160) >> 50) & 0x3FFC;
      v164 = *(unsigned int *)(a1 + v163);
      v160 = *v162;
      *(_DWORD *)(a1 + v163) = (_DWORD)v159 - (_DWORD)v22;
      if ((int)v164 + 0xFFFF >= ((_DWORD)v159 - (_DWORD)v22) && *(_DWORD *)&v22[v164] == *v159)
        break;
      v155 = (char *)v162 + (v161++ >> 6);
      v159 = v162;
      if ((unint64_t)v155 > v153)
      {
LABEL_283:
        v18 = v509;
        goto LABEL_284;
      }
    }
    v165 = 0;
    v166 = &v22[v164];
    v167 = (_DWORD)v159 - (_DWORD)v24;
    v168 = (_DWORD)v159 - (_DWORD)v24 - 15;
    v169 = v168;
    do
    {
      v170 = v169;
      v171 = v165;
      v172 = &v166[v165];
      v173 = (uint64_t *)((char *)v159 + v165);
      if (&v166[v165] <= v154 || v173 <= v24)
        break;
      --v169;
      --v165;
    }
    while (*((unsigned __int8 *)v173 - 1) == *(v172 - 1));
    v175 = (_DWORD)v173 - (_DWORD)v24;
    v176 = a3 + 1;
    if ((unint64_t)&a3[((_DWORD)v173 - (_DWORD)v24) + 9 + (v167 + v171) / 0xFFuLL] > v526)
      return 0;
    if ((v167 + v171) < 0xF)
    {
      *a3 = 16 * v175;
    }
    else
    {
      v177 = v171 + v168;
      *a3 = -16;
      if (v171 + v168 > 254)
      {
        if (v170 >= 509)
          v178 = 509;
        else
          v178 = v170;
        v179 = v167 - v178 + v171 + 239;
        v498 = v167 - 14;
        memset(v176, 255, v179 / 0xFF + 1);
        v175 = (_DWORD)v173 - (_DWORD)v24;
        v12 = a2;
        v176 = &a3[v179 / 0xFFuLL + 2];
        v177 = v179 / 0xFF + v498 + v171;
      }
      *(_BYTE *)v176 = v177;
      v176 = (_QWORD *)((char *)v176 + 1);
    }
    v180 = (_WORD *)((char *)v176 + v175);
    do
    {
      v181 = *v24++;
      *v176++ = v181;
    }
    while (v176 < (_QWORD *)v180);
    v182 = a3;
    v24 = v173;
    while (1)
    {
      *v180 = (_WORD)v24 - (_WORD)v172;
      a3 = v180 + 1;
      v183 = (uint64_t *)((char *)v24 + 4);
      v184 = v172 + 4;
      if (v158 <= (unint64_t)v24 + 4)
      {
        v187 = (_DWORD *)v24 + 1;
      }
      else
      {
        v185 = *v183 ^ *v184;
        if (v185)
        {
          v186 = __clz(__rbit64(v185)) >> 3;
          goto LABEL_271;
        }
        v187 = (_DWORD *)v24 + 3;
        v184 = v172 + 12;
      }
      if ((unint64_t)v187 >= v158)
      {
LABEL_260:
        if ((unint64_t)v187 < v490 && *(_DWORD *)v184 == *v187)
        {
          ++v187;
          v184 = (_QWORD *)((char *)v184 + 4);
        }
        if ((unint64_t)v187 < v485 && *(unsigned __int16 *)v184 == *(unsigned __int16 *)v187)
        {
          v187 = (_DWORD *)((char *)v187 + 2);
          v184 = (_QWORD *)((char *)v184 + 2);
        }
        if ((unint64_t)v187 < v494 && *(unsigned __int8 *)v184 == *(unsigned __int8 *)v187)
          LODWORD(v187) = (_DWORD)v187 + 1;
        v186 = (_DWORD)v187 - (_DWORD)v183;
      }
      else
      {
        v188 = (_DWORD)v187 - (_DWORD)v24 - 4;
        while (1)
        {
          v189 = *(_QWORD *)v187 ^ *v184;
          if (v189)
            break;
          v187 += 2;
          ++v184;
          v188 += 8;
          if ((unint64_t)v187 >= v158)
            goto LABEL_260;
        }
        v186 = (__clz(__rbit64(v189)) >> 3) + v188;
      }
LABEL_271:
      if ((unint64_t)v180 + (v186 + 240) / 0xFFuLL + 8 > v526)
        return 0;
      v190 = *v182;
      v191 = v186 - 15;
      if (v186 < 0xF)
      {
        *v182 = v190 + v186;
      }
      else
      {
        *v182 = v190 + 15;
        *(_DWORD *)a3 = -1;
        if (v191 >= 0x3FC)
        {
          v192 = v180 + 3;
          v193 = v154;
          v194 = 2 * ((v186 - 1035) / 0x3FC);
          memset(v180 + 3, 255, v194 * 2 + 4);
          v12 = a2;
          LOWORD(v191) = (v186 - 1035) % 0x3FC;
          a3 = &v192[v194];
          v154 = v193;
        }
        v195 = &a3[(unsigned __int16)v191 / 0xFFu];
        *v195 = v191 + (unsigned __int16)v191 / 0xFFu;
        a3 = v195 + 1;
      }
      v24 = (uint64_t *)((char *)v24 + v186 + 4);
      if ((unint64_t)v24 >= v153)
        goto LABEL_283;
      *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v24 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v24 - 2 - (_DWORD)v22;
      v196 = ((0xCF1BBCDCBB000000 * *v24) >> 50) & 0x3FFC;
      v197 = *(unsigned int *)(a1 + v196);
      *(_DWORD *)(a1 + v196) = (_DWORD)v24 - (_DWORD)v22;
      if ((int)v197 + 0xFFFF < ((_DWORD)v24 - (_DWORD)v22)
        || (v172 = &v22[v197], *(_DWORD *)&v22[v197] != *(_DWORD *)v24))
      {
        v155 = (char *)v24 + 2;
        v156 = v530;
        if ((unint64_t)v24 + 2 > v153)
          goto LABEL_283;
        goto LABEL_228;
      }
      *a3 = 0;
      v180 = a3 + 1;
      v182 = a3;
    }
  }
  v19 = *(_QWORD *)(a1 + 16400);
  if (!v19)
  {
    v72 = *v528;
    v73 = &a2[-v72];
    v527 = *v528;
    if (!WORD1(v15))
    {
      v74 = (v72 - v15);
      if (v72 > v15)
      {
        if (v9 > 0x7E000000)
          goto LABEL_642;
        v75 = (unint64_t)&a3[a5];
        v528[6] = v15 + v9;
        *v528 = v72 + v9;
        *((_WORD *)v528 + 3) = 2;
        v76 = v9;
        v77 = (uint64_t *)a2;
        v504 = (int)a3;
        v497 = v76;
        if (v76 < 0xD)
          goto LABEL_650;
        v78 = v15;
        v79 = (unint64_t)&a2[v524 - 11];
        v514 = &v17[v15];
        v519 = v18 - 5;
        v80 = &v514[-v72];
        *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(_QWORD *)a2) >> 50) & 0x3FFC)) = v72;
        v81 = v14 << 6;
        v82 = a2 + 2;
        v83 = a2 + 1;
        v84 = v72 + 1;
        v85 = (unint64_t)(v18 - 12);
        v459 = (unint64_t)(v18 - 6);
        v461 = (unint64_t)(v18 - 8);
        v480 = &v17[v78];
        v77 = (uint64_t *)a2;
        v499 = &a3[a5];
        v489 = v17;
        v493 = (unint64_t)(v18 - 12);
        v508 = v18;
        v484 = v14 << 6;
LABEL_99:
        v86 = *(uint64_t *)((char *)v77 + 1);
        v87 = v81;
        while (1)
        {
          v88 = v82;
          v89 = ((0xCF1BBCDCBB000000 * v86) >> 50) & 0x3FFC;
          v90 = *(unsigned int *)(a1 + v89);
          v86 = *v88;
          *(_DWORD *)(a1 + v89) = v84;
          if (v90 >= v74 && (int)v90 + 0xFFFF >= v84)
          {
            v92 = v90 >= v72 ? v73 : v80;
            if (*(_DWORD *)&v92[v90] == *v83)
              break;
          }
          v84 = (_DWORD)v88 - (_DWORD)v73;
          v82 = (char *)v88 + (v87++ >> 6);
          v83 = v88;
          if ((unint64_t)v82 > v79)
            goto LABEL_650;
        }
        v93 = 0;
        v94 = &v92[v90];
        if (v90 >= v72)
          v95 = v12;
        else
          v95 = v17;
        v96 = v84 - v90;
        v97 = (_DWORD)v83 - (_DWORD)v77;
        v98 = (_DWORD)v83 - (_DWORD)v77 - 15;
        v99 = (_BYTE)v83 - (_BYTE)v77 - 14;
        v100 = v98;
        do
        {
          v101 = v100;
          v102 = v93;
          v103 = &v94[v93];
          v104 = (uint64_t *)((char *)v83 + v93);
          if (&v94[v93] <= v95 || v104 <= v77)
            break;
          --v100;
          --v93;
        }
        while (*((unsigned __int8 *)v104 - 1) == *(v103 - 1));
        v106 = (_DWORD)v104 - (_DWORD)v77;
        v107 = a3 + 1;
        if ((unint64_t)&a3[((_DWORD)v104 - (_DWORD)v77) + 9 + (v97 + v102) / 0xFFuLL] > v75)
          goto LABEL_657;
        if ((v97 + v102) < 0xF)
        {
          *a3 = 16 * v106;
          v17 = v489;
        }
        else
        {
          v108 = v102 + v98;
          *a3 = -16;
          if (v102 + v98 > 254)
          {
            if (v101 >= 509)
              v109 = 509;
            else
              v109 = v101;
            v110 = v97 - v109 + v102 + 239;
            v473 = v74;
            v471 = v79;
            v111 = v80;
            v463 = v99;
            memset(v107, 255, v110 / 0xFF + 1);
            v106 = (_DWORD)v104 - (_DWORD)v77;
            v79 = v471;
            v85 = v493;
            v80 = v111;
            v74 = v473;
            v75 = (unint64_t)v499;
            LODWORD(v72) = v527;
            v12 = a2;
            v107 = &a3[v110 / 0xFFuLL + 2];
            v108 = v110 / 0xFF + v463 + v102;
          }
          v17 = v489;
          *(_BYTE *)v107 = v108;
          v107 = (_QWORD *)((char *)v107 + 1);
        }
        v112 = (_WORD *)((char *)v107 + v106);
        do
        {
          v113 = *v77++;
          *v107++ = v113;
        }
        while (v107 < (_QWORD *)v112);
        v114 = a3;
        v77 = v104;
        while (1)
        {
          *v112 = v96;
          a3 = v112 + 1;
          if (v95 != v17)
          {
            v115 = (uint64_t *)((char *)v77 + 4);
            v116 = v103 + 4;
            if (v85 <= (unint64_t)v77 + 4)
            {
              v124 = (_DWORD *)v77 + 1;
            }
            else
            {
              v117 = *v115 ^ *v116;
              if (v117)
              {
                v118 = __clz(__rbit64(v117)) >> 3;
LABEL_158:
                v77 = (uint64_t *)((char *)v77 + v118 + 4);
                goto LABEL_199;
              }
              v124 = (_DWORD *)v77 + 3;
              v116 = v103 + 12;
            }
            if ((unint64_t)v124 >= v85)
            {
LABEL_147:
              if ((unint64_t)v124 < v461 && *(_DWORD *)v116 == *v124)
              {
                ++v124;
                v116 = (_QWORD *)((char *)v116 + 4);
              }
              if ((unint64_t)v124 < v459 && *(unsigned __int16 *)v116 == *(unsigned __int16 *)v124)
              {
                v124 = (_DWORD *)((char *)v124 + 2);
                v116 = (_QWORD *)((char *)v116 + 2);
              }
              if (v124 < (_DWORD *)v519 && *(unsigned __int8 *)v116 == *(unsigned __int8 *)v124)
                LODWORD(v124) = (_DWORD)v124 + 1;
              v118 = (_DWORD)v124 - (_DWORD)v115;
            }
            else
            {
              v125 = (_DWORD)v124 - (_DWORD)v77 - 4;
              while (1)
              {
                v126 = *(_QWORD *)v124 ^ *v116;
                if (v126)
                  break;
                v124 += 2;
                ++v116;
                v125 += 8;
                if ((unint64_t)v124 >= v85)
                  goto LABEL_147;
              }
              v118 = (__clz(__rbit64(v126)) >> 3) + v125;
            }
            goto LABEL_158;
          }
          v119 = (char *)v77 + v514 - v103;
          if (v119 > v519)
            v119 = v519;
          v120 = (uint64_t *)((char *)v77 + 4);
          v121 = v103 + 4;
          v122 = v119 - 7;
          if (v119 - 7 <= (char *)v77 + 4)
          {
            v127 = (char *)v77 + 4;
          }
          else
          {
            v123 = *v120 ^ *v121;
            if (v123)
            {
              v118 = __clz(__rbit64(v123)) >> 3;
              goto LABEL_175;
            }
            v127 = (char *)v77 + 12;
            v121 = v103 + 12;
          }
          if (v127 >= v122)
          {
LABEL_164:
            if (v127 < v119 - 3 && *(_DWORD *)v121 == *(_DWORD *)v127)
            {
              v127 += 4;
              v121 = (_QWORD *)((char *)v121 + 4);
            }
            if (v127 < v119 - 1 && *(unsigned __int16 *)v121 == *(unsigned __int16 *)v127)
            {
              v127 += 2;
              v121 = (_QWORD *)((char *)v121 + 2);
            }
            if (v127 < v119 && *(unsigned __int8 *)v121 == *v127)
              LODWORD(v127) = (_DWORD)v127 + 1;
            v118 = (_DWORD)v127 - (_DWORD)v120;
          }
          else
          {
            v128 = (_DWORD)v127 - (_DWORD)v77 - 4;
            while (1)
            {
              v129 = *(_QWORD *)v127 ^ *v121;
              if (v129)
                break;
              v127 += 8;
              ++v121;
              v128 += 8;
              if (v127 >= v122)
                goto LABEL_164;
            }
            v118 = (__clz(__rbit64(v129)) >> 3) + v128;
          }
LABEL_175:
          if ((char *)v77 + v118 + 4 != v119)
          {
            v77 = (uint64_t *)((char *)v77 + v118 + 4);
            goto LABEL_199;
          }
          v130 = v119;
          v131 = v12;
          if (v85 <= (unint64_t)v119)
            goto LABEL_181;
          v132 = *(_QWORD *)v119 ^ *(_QWORD *)v12;
          if (!v132)
          {
            v130 = v119 + 8;
            v131 = a2 + 8;
LABEL_181:
            if ((unint64_t)v130 >= v85)
            {
LABEL_187:
              if ((unint64_t)v130 < v461 && *v131 == *v130)
              {
                ++v130;
                ++v131;
              }
              if ((unint64_t)v130 < v459 && *(unsigned __int16 *)v131 == *(unsigned __int16 *)v130)
              {
                v130 = (_DWORD *)((char *)v130 + 2);
                v131 = (_DWORD *)((char *)v131 + 2);
              }
              if (v130 < (_DWORD *)v519 && *(unsigned __int8 *)v131 == *(unsigned __int8 *)v130)
                LODWORD(v130) = (_DWORD)v130 + 1;
              v133 = (_DWORD)v130 - (_DWORD)v119;
            }
            else
            {
              v134 = (char *)v77 + (_QWORD)v480 - v103;
              if (v134 >= (unint64_t)&a2[v524 - 5])
                LODWORD(v134) = (_DWORD)a2 + v524 - 5;
              v135 = (_DWORD)v130 - v134;
              while (1)
              {
                v136 = *(_QWORD *)v130 ^ *(_QWORD *)v131;
                if (v136)
                  break;
                v130 += 2;
                v131 += 2;
                v135 += 8;
                if ((unint64_t)v130 >= v85)
                  goto LABEL_187;
              }
              v133 = (__clz(__rbit64(v136)) >> 3) + v135;
            }
            goto LABEL_198;
          }
          v133 = __clz(__rbit64(v132)) >> 3;
LABEL_198:
          v118 += v133;
          v77 = (uint64_t *)&v119[v133];
LABEL_199:
          if ((unint64_t)v112 + (v118 + 240) / 0xFFuLL + 8 > v75)
            goto LABEL_657;
          v137 = *v114;
          v138 = v118 - 15;
          if (v118 < 0xF)
          {
            *v114 = v137 + v118;
          }
          else
          {
            *v114 = v137 + 15;
            *(_DWORD *)a3 = -1;
            if (v138 >= 0x3FC)
            {
              v139 = v112 + 3;
              v140 = v118 - 1035;
              v141 = (v118 - 1035) / 0x3FC;
              v142 = 2 * v141;
              v143 = v74;
              v144 = v79;
              v145 = v17;
              v146 = v80;
              memset(v112 + 3, 255, v142 * 2 + 4);
              v85 = v493;
              v80 = v146;
              v17 = v145;
              v79 = v144;
              v74 = v143;
              v75 = (unint64_t)v499;
              LODWORD(v72) = v527;
              v12 = a2;
              LOWORD(v138) = v140 - 1020 * v141;
              a3 = &v139[v142];
            }
            v147 = &a3[(unsigned __int16)v138 / 0xFFu];
            *v147 = v138 + (unsigned __int16)v138 / 0xFFu;
            a3 = v147 + 1;
          }
          if ((unint64_t)v77 >= v79)
          {
            v18 = v508;
            goto LABEL_650;
          }
          *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v77 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v77 - 2 - (_DWORD)v73;
          v148 = (_DWORD)v77 - (_DWORD)v73;
          v149 = ((0xCF1BBCDCBB000000 * *v77) >> 50) & 0x3FFC;
          v150 = *(unsigned int *)(a1 + v149);
          if (v150 >= v72)
            v95 = v12;
          else
            v95 = v17;
          if (v150 >= v72)
            v151 = v73;
          else
            v151 = v80;
          *(_DWORD *)(a1 + v149) = v148;
          v152 = v150 >= v74 && (int)v150 + 0xFFFF >= v148;
          if (!v152 || (v103 = &v151[v150], *(_DWORD *)&v151[v150] != *(_DWORD *)v77))
          {
            v83 = (_DWORD *)((char *)v77 + 1);
            v84 = (_DWORD)v77 + 1 - (_DWORD)v73;
            v82 = (char *)v77 + 2;
            v18 = v508;
            v81 = v484;
            if ((unint64_t)v77 + 2 > v79)
            {
LABEL_650:
              v445 = v18 - (char *)v77;
              if ((unint64_t)&a3[v18 - (char *)v77 + 1 + (v18 - (char *)v77 + 240) / 0xFFuLL] <= v75)
              {
                v446 = v445 - 15;
                if (v445 < 0xF)
                {
                  *a3 = 16 * v445;
                }
                else
                {
                  *a3 = -16;
                  v447 = a3 + 1;
                  if (v446 >= 0xFF)
                  {
                    v448 = &v12[v524] - (char *)v77 - 270;
                    memset(v447, 255, v448 / 0xFF + 1);
                    v446 = v448 % 0xFF;
                    v447 = &a3[v448 / 0xFF + 2];
                  }
                  *v447 = v446;
                  a3 = v447;
                }
                v455 = (_DWORD)a3 + 1;
                v456 = a3 + 1;
                v457 = v77;
                goto LABEL_672;
              }
LABEL_657:
              result = 0;
LABEL_673:
              v9 = v497;
              goto LABEL_674;
            }
            goto LABEL_99;
          }
          *a3 = 0;
          v112 = a3 + 1;
          v96 = v148 - v150;
          v114 = a3;
        }
      }
    }
    if (v9 > 0x7E000000)
      goto LABEL_642;
    v202 = (unint64_t)&a3[a5];
    v528[6] = v15 + v9;
    *v528 = v72 + v9;
    *((_WORD *)v528 + 3) = 2;
    v203 = v9;
    v204 = a3;
    v205 = (uint64_t *)a2;
    v504 = (int)v204;
    v497 = v203;
    if (v203 < 0xD)
    {
LABEL_656:
      v445 = v18 - (char *)v205;
      if ((unint64_t)&v204[v18 - (char *)v205 + 1 + (v18 - (char *)v205 + 240) / 0xFFuLL] > v202)
        goto LABEL_657;
      v449 = v445 - 15;
      if (v445 < 0xF)
      {
        *v204 = 16 * v445;
      }
      else
      {
        *v204 = -16;
        v450 = v204 + 1;
        if (v449 >= 0xFF)
        {
          v451 = &v12[v524] - (char *)v205 - 270;
          memset(v450, 255, v451 / 0xFF + 1);
          v449 = v451 % 0xFF;
          v450 = &v204[v451 / 0xFF + 2];
        }
        *v450 = v449;
        v204 = v450;
      }
      v455 = (_DWORD)v204 + 1;
      v456 = v204 + 1;
      v457 = v205;
LABEL_672:
      memcpy(v456, v457, v445);
      result = (v455 + v445 - v504);
      v12 = a2;
      goto LABEL_673;
    }
    v206 = v15;
    v207 = (unint64_t)&a2[v524 - 11];
    v515 = &v17[v15];
    v520 = v18 - 5;
    v208 = &v515[-v72];
    *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(_QWORD *)a2) >> 50) & 0x3FFC)) = v72;
    v209 = v14 << 6;
    v210 = a2 + 2;
    v211 = a2 + 1;
    v212 = v72 + 1;
    v213 = (unint64_t)(v18 - 12);
    v464 = (unint64_t)(v18 - 6);
    v466 = (unint64_t)(v18 - 8);
    v486 = &v17[v206];
    v491 = v17;
    v205 = (uint64_t *)a2;
    v500 = v202;
    v510 = v18;
    v495 = v14 << 6;
LABEL_292:
    v214 = *(uint64_t *)((char *)v205 + 1);
    v215 = v209;
    while (1)
    {
      v216 = ((0xCF1BBCDCBB000000 * v214) >> 50) & 0x3FFC;
      v217 = *(unsigned int *)(a1 + v216);
      v218 = v210;
      v214 = *v210;
      *(_DWORD *)(a1 + v216) = v212;
      if ((int)v217 + 0xFFFF >= v212)
      {
        v219 = v217 >= v72 ? v73 : v208;
        if (*(_DWORD *)&v219[v217] == *v211)
          break;
      }
      v212 = (_DWORD)v218 - (_DWORD)v73;
      v210 = (_QWORD *)((char *)v218 + (v215++ >> 6));
      v211 = v218;
      if ((unint64_t)v210 > v207)
        goto LABEL_656;
    }
    v220 = 0;
    v221 = &v219[v217];
    if (v217 >= v72)
      v222 = v12;
    else
      v222 = v17;
    v223 = v212 - v217;
    v224 = (_DWORD)v211 - (_DWORD)v205;
    v225 = (_DWORD)v211 - (_DWORD)v205 - 15;
    v226 = (_BYTE)v211 - (_BYTE)v205 - 14;
    v227 = v225;
    do
    {
      v228 = v227;
      v229 = v220;
      v230 = &v221[v220];
      v231 = (uint64_t *)((char *)v211 + v220);
      if (&v221[v220] <= v222 || v231 <= v205)
        break;
      --v227;
      --v220;
    }
    while (*((unsigned __int8 *)v231 - 1) == *(v230 - 1));
    v233 = (_DWORD)v231 - (_DWORD)v205;
    v234 = v204 + 1;
    if ((unint64_t)&v204[((_DWORD)v231 - (_DWORD)v205) + 9 + (v224 + v229) / 0xFFuLL] > v202)
      goto LABEL_657;
    if ((v224 + v229) < 0xF)
    {
      *v204 = 16 * v233;
      v17 = v491;
    }
    else
    {
      v235 = v229 + v225;
      *v204 = -16;
      if (v229 + v225 > 254)
      {
        if (v228 >= 509)
          v236 = 509;
        else
          v236 = v228;
        v237 = v224 - v236 + v229 + 239;
        v238 = v207;
        v475 = v208;
        v468 = v226;
        memset(v234, 255, v237 / 0xFF + 1);
        v233 = (_DWORD)v231 - (_DWORD)v205;
        v208 = v475;
        v207 = v238;
        v202 = v500;
        LODWORD(v72) = v527;
        v12 = a2;
        v234 = &v204[v237 / 0xFFuLL + 2];
        v235 = v237 / 0xFF + v468 + v229;
      }
      v17 = v491;
      *v234++ = v235;
    }
    v239 = &v234[v233];
    do
    {
      v240 = *v205++;
      *(_QWORD *)v234 = v240;
      v234 += 8;
    }
    while (v234 < v239);
    v241 = v204;
    v205 = v231;
    while (1)
    {
      *(_WORD *)v239 = v223;
      v204 = v239 + 2;
      if (v222 != v17)
      {
        v242 = (uint64_t *)((char *)v205 + 4);
        v243 = v230 + 4;
        if (v213 <= (unint64_t)v205 + 4)
        {
          v251 = (_DWORD *)v205 + 1;
        }
        else
        {
          v244 = *v242 ^ *v243;
          if (v244)
          {
            v245 = __clz(__rbit64(v244)) >> 3;
LABEL_347:
            v205 = (uint64_t *)((char *)v205 + v245 + 4);
            goto LABEL_388;
          }
          v251 = (_DWORD *)v205 + 3;
          v243 = v230 + 12;
        }
        if ((unint64_t)v251 >= v213)
        {
LABEL_336:
          if ((unint64_t)v251 < v466 && *(_DWORD *)v243 == *v251)
          {
            ++v251;
            v243 = (_QWORD *)((char *)v243 + 4);
          }
          if ((unint64_t)v251 < v464 && *(unsigned __int16 *)v243 == *(unsigned __int16 *)v251)
          {
            v251 = (_DWORD *)((char *)v251 + 2);
            v243 = (_QWORD *)((char *)v243 + 2);
          }
          if (v251 < (_DWORD *)v520 && *(unsigned __int8 *)v243 == *(unsigned __int8 *)v251)
            LODWORD(v251) = (_DWORD)v251 + 1;
          v245 = (_DWORD)v251 - (_DWORD)v242;
        }
        else
        {
          v252 = (_DWORD)v251 - (_DWORD)v205 - 4;
          while (1)
          {
            v253 = *(_QWORD *)v251 ^ *v243;
            if (v253)
              break;
            v251 += 2;
            ++v243;
            v252 += 8;
            if ((unint64_t)v251 >= v213)
              goto LABEL_336;
          }
          v245 = (__clz(__rbit64(v253)) >> 3) + v252;
        }
        goto LABEL_347;
      }
      v246 = (char *)v205 + v515 - v230;
      if (v246 > v520)
        v246 = v520;
      v247 = (uint64_t *)((char *)v205 + 4);
      v248 = v230 + 4;
      v249 = v246 - 7;
      if (v246 - 7 <= (char *)v205 + 4)
      {
        v254 = (char *)v205 + 4;
      }
      else
      {
        v250 = *v247 ^ *v248;
        if (v250)
        {
          v245 = __clz(__rbit64(v250)) >> 3;
          goto LABEL_364;
        }
        v254 = (char *)v205 + 12;
        v248 = v230 + 12;
      }
      if (v254 >= v249)
      {
LABEL_353:
        if (v254 < v246 - 3 && *(_DWORD *)v248 == *(_DWORD *)v254)
        {
          v254 += 4;
          v248 = (_QWORD *)((char *)v248 + 4);
        }
        if (v254 < v246 - 1 && *(unsigned __int16 *)v248 == *(unsigned __int16 *)v254)
        {
          v254 += 2;
          v248 = (_QWORD *)((char *)v248 + 2);
        }
        if (v254 < v246 && *(unsigned __int8 *)v248 == *v254)
          LODWORD(v254) = (_DWORD)v254 + 1;
        v245 = (_DWORD)v254 - (_DWORD)v247;
      }
      else
      {
        v255 = (_DWORD)v254 - (_DWORD)v205 - 4;
        while (1)
        {
          v256 = *(_QWORD *)v254 ^ *v248;
          if (v256)
            break;
          v254 += 8;
          ++v248;
          v255 += 8;
          if (v254 >= v249)
            goto LABEL_353;
        }
        v245 = (__clz(__rbit64(v256)) >> 3) + v255;
      }
LABEL_364:
      if ((char *)v205 + v245 + 4 != v246)
      {
        v205 = (uint64_t *)((char *)v205 + v245 + 4);
        goto LABEL_388;
      }
      v257 = v246;
      v258 = v12;
      if (v213 <= (unint64_t)v246)
        goto LABEL_370;
      v259 = *(_QWORD *)v246 ^ *(_QWORD *)v12;
      if (!v259)
      {
        v257 = v246 + 8;
        v258 = a2 + 8;
LABEL_370:
        if ((unint64_t)v257 >= v213)
        {
LABEL_376:
          if ((unint64_t)v257 < v466 && *v258 == *v257)
          {
            ++v257;
            ++v258;
          }
          if ((unint64_t)v257 < v464 && *(unsigned __int16 *)v258 == *(unsigned __int16 *)v257)
          {
            v257 = (_DWORD *)((char *)v257 + 2);
            v258 = (_DWORD *)((char *)v258 + 2);
          }
          if (v257 < (_DWORD *)v520 && *(unsigned __int8 *)v258 == *(unsigned __int8 *)v257)
            LODWORD(v257) = (_DWORD)v257 + 1;
          v260 = (_DWORD)v257 - (_DWORD)v246;
        }
        else
        {
          v261 = (char *)v205 + (_QWORD)v486 - v230;
          if (v261 >= (unint64_t)&a2[v524 - 5])
            LODWORD(v261) = (_DWORD)a2 + v524 - 5;
          v262 = (_DWORD)v257 - v261;
          while (1)
          {
            v263 = *(_QWORD *)v257 ^ *(_QWORD *)v258;
            if (v263)
              break;
            v257 += 2;
            v258 += 2;
            v262 += 8;
            if ((unint64_t)v257 >= v213)
              goto LABEL_376;
          }
          v260 = (__clz(__rbit64(v263)) >> 3) + v262;
        }
        goto LABEL_387;
      }
      v260 = __clz(__rbit64(v259)) >> 3;
LABEL_387:
      v245 += v260;
      v205 = (uint64_t *)&v246[v260];
LABEL_388:
      if ((unint64_t)&v239[(v245 + 240) / 0xFFuLL + 8] > v202)
        goto LABEL_657;
      v264 = *v241;
      v265 = v245 - 15;
      if (v245 < 0xF)
      {
        *v241 = v264 + v245;
      }
      else
      {
        *v241 = v264 + 15;
        *(_DWORD *)v204 = -1;
        if (v265 >= 0x3FC)
        {
          v266 = v239 + 6;
          v267 = v245 - 1035;
          v268 = (v245 - 1035) / 0x3FC;
          v269 = 2 * v268;
          v270 = v207;
          v271 = v208;
          memset(v239 + 6, 255, v269 * 2 + 4);
          v208 = v271;
          v207 = v270;
          v202 = v500;
          LODWORD(v72) = v527;
          v12 = a2;
          LOWORD(v265) = v267 - 1020 * v268;
          v204 = (char *)&v266[v269];
        }
        v272 = &v204[(unsigned __int16)v265 / 0xFFu];
        *v272 = v265 + (unsigned __int16)v265 / 0xFFu;
        v204 = v272 + 1;
      }
      if ((unint64_t)v205 >= v207)
      {
        v18 = v510;
        goto LABEL_656;
      }
      *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v205 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v205 - 2 - (_DWORD)v73;
      v273 = (_DWORD)v205 - (_DWORD)v73;
      v274 = ((0xCF1BBCDCBB000000 * *v205) >> 50) & 0x3FFC;
      v275 = *(unsigned int *)(a1 + v274);
      if (v275 >= v72)
        v222 = v12;
      else
        v222 = v17;
      if (v275 >= v72)
        v276 = v73;
      else
        v276 = v208;
      *(_DWORD *)(a1 + v274) = v273;
      if ((int)v275 + 0xFFFF < v273 || (v230 = &v276[v275], *(_DWORD *)&v276[v275] != *(_DWORD *)v205))
      {
        v211 = (_DWORD *)((char *)v205 + 1);
        v212 = (_DWORD)v205 + 1 - (_DWORD)v73;
        v210 = (uint64_t *)((char *)v205 + 2);
        v18 = v510;
        v209 = v495;
        if ((unint64_t)v205 + 2 > v207)
          goto LABEL_656;
        goto LABEL_292;
      }
      *v204 = 0;
      v239 = v204 + 1;
      v223 = v273 - v275;
      v241 = v204;
    }
  }
  v20 = (unint64_t)&a3[a5];
  v525 = v20;
  if (v9 <= 4096)
  {
    if (v9 > 0x7E000000)
    {
      result = 0;
      goto LABEL_675;
    }
    v363 = v14;
    v512 = &a2[v9];
    v364 = *v528;
    v365 = *(char **)(v19 + 16392);
    v366 = *(unsigned int *)(v19 + 16408);
    v367 = *(unsigned int *)(v19 + 0x4000);
    *(_QWORD *)(a1 + 16400) = 0;
    v528[6] = v9;
    *v528 = v364 + v9;
    *((_WORD *)v528 + 3) = 2;
    v368 = a2;
    v369 = a3;
    if (v9 >= 0xD)
    {
      v497 = v9;
      v369 = a3;
      v370 = &a2[-v364];
      v371 = (v364 - v367);
      v372 = (unint64_t)&a2[v524 - 11];
      v517 = (unint64_t)(v512 - 5);
      v502 = &v365[v366];
      v373 = &v365[v366 - v367];
      *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(_QWORD *)a2) >> 50) & 0x3FFC)) = v364;
      v374 = v363 << 6;
      v375 = a2 + 2;
      v376 = a2 + 1;
      v377 = v364 + 1;
      v458 = (unint64_t)(v512 - 6);
      v460 = (unint64_t)(v512 - 8);
      v482 = &v365[v366];
      v506 = (int)v369;
      v368 = a2;
      v492 = &a2[-v364];
      v487 = v363 << 6;
LABEL_531:
      v378 = *(_QWORD *)(v368 + 1);
      v379 = v374;
      while (1)
      {
        v380 = v375;
        v381 = (0xCF1BBCDCBB000000 * v378) >> 52;
        v382 = *(unsigned int *)(a1 + 4 * v381);
        if (v382 >= v364)
        {
          v384 = &v370[v382];
          v385 = v12;
        }
        else
        {
          v383 = *(unsigned int *)(v19 + 4 * v381);
          v384 = &v373[v383];
          LODWORD(v382) = v383 + v371;
          v385 = v365;
        }
        v378 = *v380;
        *(_DWORD *)(a1 + 4 * v381) = v377;
        if ((int)v382 + 0xFFFF >= v377 && *(_DWORD *)v384 == *v376)
          break;
        v377 = (_DWORD)v380 - (_DWORD)v370;
        v375 = (char *)v380 + (v379++ >> 6);
        v376 = v380;
        if ((unint64_t)v375 > v372)
        {
LABEL_640:
          LODWORD(a3) = v506;
          v9 = v497;
          goto LABEL_641;
        }
      }
      v386 = 0;
      v387 = v377 - v382;
      v388 = (_DWORD)v376 - (_DWORD)v368;
      v389 = (_DWORD)v376 - (_DWORD)v368 - 15;
      v390 = (_BYTE)v376 - (_BYTE)v368 - 14;
      v391 = v389;
      do
      {
        v392 = v391;
        v393 = v386;
        v394 = &v384[v386];
        v395 = (char *)v376 + v386;
        if (&v384[v386] <= v385 || v395 <= v368)
          break;
        --v391;
        --v386;
      }
      while (*(v395 - 1) == *(v394 - 1));
      v397 = (_DWORD)v395 - (_DWORD)v368;
      v398 = v369 + 1;
      if ((unint64_t)&v369[((_DWORD)v395 - (_DWORD)v368)
                                 + 9
                                 + (v388 + v393) / 0xFFuLL] > v20)
        goto LABEL_657;
      if ((v388 + v393) < 0xF)
      {
        *v369 = 16 * v397;
        v402 = (unint64_t)(v512 - 12);
      }
      else
      {
        v399 = v393 + v389;
        *v369 = -16;
        if (v393 + v389 > 254)
        {
          if (v392 >= 509)
            v400 = 509;
          else
            v400 = v392;
          v401 = v388 - v400 + v393 + 239;
          v522 = v19;
          v472 = v365;
          v474 = v364;
          v470 = v372;
          v462 = v390;
          memset(v398, 255, v401 / 0xFF + 1);
          v397 = (_DWORD)v395 - (_DWORD)v368;
          v372 = v470;
          v365 = v472;
          v364 = v474;
          v19 = v522;
          v20 = v525;
          v12 = a2;
          v398 = &v369[v401 / 0xFFuLL + 2];
          v399 = v401 / 0xFF + v462 + v393;
        }
        v402 = (unint64_t)(v512 - 12);
        *(_BYTE *)v398 = v399;
        v398 = (_QWORD *)((char *)v398 + 1);
      }
      v403 = (_WORD *)((char *)v398 + v397);
      do
      {
        v404 = *(_QWORD *)v368;
        v368 += 8;
        *v398++ = v404;
      }
      while (v398 < (_QWORD *)v403);
      v405 = v369;
      v368 = v395;
      while (1)
      {
        *v403 = v387;
        v369 = v403 + 1;
        if (v385 != v365)
        {
          v406 = v368 + 4;
          v407 = v394 + 4;
          if (v402 <= (unint64_t)(v368 + 4))
          {
            v415 = v368 + 4;
          }
          else
          {
            v408 = *v406 ^ *v407;
            if (v408)
            {
              v409 = __clz(__rbit64(v408)) >> 3;
LABEL_583:
              v368 += v409 + 4;
              goto LABEL_624;
            }
            v415 = v368 + 12;
            v407 = v394 + 12;
          }
          if ((unint64_t)v415 >= v402)
          {
LABEL_572:
            if ((unint64_t)v415 < v460 && *(_DWORD *)v407 == *v415)
            {
              ++v415;
              v407 = (_QWORD *)((char *)v407 + 4);
            }
            if ((unint64_t)v415 < v458 && *(unsigned __int16 *)v407 == *(unsigned __int16 *)v415)
            {
              v415 = (_DWORD *)((char *)v415 + 2);
              v407 = (_QWORD *)((char *)v407 + 2);
            }
            if ((unint64_t)v415 < v517 && *(unsigned __int8 *)v407 == *(unsigned __int8 *)v415)
              LODWORD(v415) = (_DWORD)v415 + 1;
            v409 = (_DWORD)v415 - (_DWORD)v406;
          }
          else
          {
            v416 = (_DWORD)v415 - (_DWORD)v368 - 4;
            while (1)
            {
              v417 = *(_QWORD *)v415 ^ *v407;
              if (v417)
                break;
              v415 += 2;
              ++v407;
              v416 += 8;
              if ((unint64_t)v415 >= v402)
                goto LABEL_572;
            }
            v409 = (__clz(__rbit64(v417)) >> 3) + v416;
          }
          goto LABEL_583;
        }
        v410 = &v368[v502 - v394];
        if ((unint64_t)v410 > v517)
          v410 = v512 - 5;
        v411 = v368 + 4;
        v412 = v394 + 4;
        v413 = v410 - 7;
        if (v410 - 7 <= v368 + 4)
        {
          v418 = v368 + 4;
        }
        else
        {
          v414 = *v411 ^ *v412;
          if (v414)
          {
            v409 = __clz(__rbit64(v414)) >> 3;
            goto LABEL_600;
          }
          v418 = v368 + 12;
          v412 = v394 + 12;
        }
        if (v418 >= v413)
        {
LABEL_589:
          if (v418 < v410 - 3 && *(_DWORD *)v412 == *(_DWORD *)v418)
          {
            v418 += 4;
            v412 = (_QWORD *)((char *)v412 + 4);
          }
          if (v418 < v410 - 1 && *(unsigned __int16 *)v412 == *(unsigned __int16 *)v418)
          {
            v418 += 2;
            v412 = (_QWORD *)((char *)v412 + 2);
          }
          if (v418 < v410 && *(unsigned __int8 *)v412 == *v418)
            LODWORD(v418) = (_DWORD)v418 + 1;
          v409 = (_DWORD)v418 - (_DWORD)v411;
        }
        else
        {
          v419 = (_DWORD)v418 - (_DWORD)v368 - 4;
          while (1)
          {
            v420 = *(_QWORD *)v418 ^ *v412;
            if (v420)
              break;
            v418 += 8;
            ++v412;
            v419 += 8;
            if (v418 >= v413)
              goto LABEL_589;
          }
          v409 = (__clz(__rbit64(v420)) >> 3) + v419;
        }
LABEL_600:
        if (&v368[v409 + 4] != v410)
        {
          v368 += v409 + 4;
          goto LABEL_624;
        }
        v421 = v410;
        v422 = v12;
        if (v402 <= (unint64_t)v410)
          goto LABEL_606;
        v423 = *(_QWORD *)v410 ^ *(_QWORD *)v12;
        if (!v423)
        {
          v421 = v410 + 8;
          v422 = a2 + 8;
LABEL_606:
          if ((unint64_t)v421 >= v402)
          {
LABEL_612:
            if ((unint64_t)v421 < v460 && *v422 == *v421)
            {
              ++v421;
              ++v422;
            }
            if ((unint64_t)v421 < v458 && *(unsigned __int16 *)v422 == *(unsigned __int16 *)v421)
            {
              v421 = (_DWORD *)((char *)v421 + 2);
              v422 = (_DWORD *)((char *)v422 + 2);
            }
            if ((unint64_t)v421 < v517 && *(unsigned __int8 *)v422 == *(unsigned __int8 *)v421)
              LODWORD(v421) = (_DWORD)v421 + 1;
            v424 = (_DWORD)v421 - (_DWORD)v410;
          }
          else
          {
            v425 = &v368[(_QWORD)v482] - v394;
            if (v425 >= (unint64_t)&a2[v524 - 5])
              LODWORD(v425) = (_DWORD)a2 + v524 - 5;
            v426 = (_DWORD)v421 - v425;
            while (1)
            {
              v427 = *(_QWORD *)v421 ^ *(_QWORD *)v422;
              if (v427)
                break;
              v421 += 2;
              v422 += 2;
              v426 += 8;
              if ((unint64_t)v421 >= v402)
                goto LABEL_612;
            }
            v424 = (__clz(__rbit64(v427)) >> 3) + v426;
          }
          goto LABEL_623;
        }
        v424 = __clz(__rbit64(v423)) >> 3;
LABEL_623:
        v409 += v424;
        v368 = &v410[v424];
LABEL_624:
        if ((unint64_t)v403 + (v409 + 240) / 0xFFuLL + 8 > v20)
          goto LABEL_657;
        v428 = *v405;
        v429 = v409 - 15;
        if (v409 < 0xF)
        {
          *v405 = v428 + v409;
        }
        else
        {
          *v405 = v428 + 15;
          *(_DWORD *)v369 = -1;
          if (v429 >= 0x3FC)
          {
            v523 = v403 + 3;
            v430 = v409 - 1035;
            v431 = (v409 - 1035) / 0x3FC;
            v432 = 2 * v431;
            v433 = v19;
            v434 = v364;
            v435 = v371;
            v436 = v365;
            v437 = v372;
            memset(v403 + 3, 255, v432 * 2 + 4);
            v372 = v437;
            v365 = v436;
            v371 = v435;
            v364 = v434;
            v19 = v433;
            v20 = v525;
            v12 = a2;
            LOWORD(v429) = v430 - 1020 * v431;
            v370 = v492;
            v402 = (unint64_t)(v512 - 12);
            v369 = &v523[v432];
          }
          v438 = &v369[(unsigned __int16)v429 / 0xFFu];
          *v438 = v429 + (unsigned __int16)v429 / 0xFFu;
          v369 = v438 + 1;
        }
        if ((unint64_t)v368 >= v372)
          goto LABEL_640;
        *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(_QWORD *)(v368 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v368
                                                                                            - 2
                                                                                            - (_DWORD)v370;
        v439 = (0xCF1BBCDCBB000000 * *(_QWORD *)v368) >> 52;
        v440 = *(unsigned int *)(a1 + 4 * v439);
        if (v440 >= v364)
        {
          v394 = &v370[v440];
          v385 = v12;
        }
        else
        {
          v440 = *(unsigned int *)(v19 + 4 * v439);
          v394 = &v373[v440];
          LODWORD(v440) = v440 + v371;
          v385 = v365;
        }
        *(_DWORD *)(a1 + 4 * v439) = (_DWORD)v368 - (_DWORD)v370;
        if ((int)v440 + 0xFFFF < ((_DWORD)v368 - (_DWORD)v370) || *(_DWORD *)v394 != *(_DWORD *)v368)
        {
          v376 = v368 + 1;
          v377 = (_DWORD)v368 + 1 - (_DWORD)v370;
          v375 = v368 + 2;
          v374 = v487;
          if ((unint64_t)(v368 + 2) > v372)
            goto LABEL_640;
          goto LABEL_531;
        }
        *v369 = 0;
        v403 = v369 + 1;
        v387 = (_WORD)v368 - (_WORD)v370 - v440;
        v405 = v369;
      }
    }
LABEL_641:
    v441 = v512 - v368;
    if ((unint64_t)&v369[v512 - v368 + 1 + (v512 - v368 + 240) / 0xFFuLL] <= v20)
    {
      v442 = v441 - 15;
      if (v441 < 0xF)
      {
        *v369 = 16 * v441;
      }
      else
      {
        *v369 = -16;
        v443 = v369 + 1;
        if (v442 >= 0xFF)
        {
          v444 = &v12[v524] - v368 - 270;
          memset(v443, 255, v444 / 0xFF + 1);
          v442 = v444 % 0xFF;
          v443 = &v369[v444 / 0xFF + 2];
        }
        *v443 = v442;
        v369 = v443;
      }
      v452 = v369 + 1;
      memcpy(v452, v368, v441);
      v453 = (_DWORD)v452 + v441;
      goto LABEL_666;
    }
LABEL_642:
    result = 0;
    goto LABEL_674;
  }
  memcpy((void *)a1, (const void *)v19, 0x4020uLL);
  if (v9 > 0x7E000000)
  {
    result = 0;
    goto LABEL_667;
  }
  v12 = a2;
  v277 = *v528;
  v278 = v9;
  v279 = &a2[-v277];
  v280 = *(char **)(a1 + 16392);
  v281 = v528[6];
  v282 = (unint64_t)&a2[v524 - 11];
  v516 = v18 - 5;
  v521 = &v280[v281];
  v283 = &v280[v281 - v277];
  v528[6] = v281 + v278;
  v497 = v278;
  *v528 = v277 + v278;
  *((_WORD *)v528 + 3) = 2;
  *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(_QWORD *)a2) >> 50) & 0x3FFC)) = v277;
  v284 = v14 << 6;
  v285 = a2 + 2;
  v286 = a2 + 1;
  v287 = v277 + 1;
  v288 = v18;
  v289 = a3;
  v290 = (unint64_t)(v288 - 12);
  v505 = (int)v289;
  v511 = v288;
  v465 = (unint64_t)(v288 - 6);
  v467 = (unint64_t)(v288 - 8);
  v291 = (uint64_t *)a2;
  v292 = v525;
  v496 = v14 << 6;
  v501 = &a2[-v277];
LABEL_409:
  v293 = *(uint64_t *)((char *)v291 + 1);
  v294 = v284;
  do
  {
    v295 = ((0xCF1BBCDCBB000000 * v293) >> 50) & 0x3FFC;
    v296 = *(unsigned int *)(a1 + v295);
    v297 = v285;
    v293 = *v285;
    *(_DWORD *)(a1 + v295) = v287;
    if ((int)v296 + 0xFFFF >= v287)
    {
      v298 = v296 >= v277 ? v279 : v283;
      if (*(_DWORD *)&v298[v296] == *v286)
      {
        v299 = 0;
        v300 = &v298[v296];
        if (v296 >= v277)
          v301 = v12;
        else
          v301 = v280;
        v302 = v287 - v296;
        v303 = (_DWORD)v286 - (_DWORD)v291;
        v304 = (_DWORD)v286 - (_DWORD)v291 - 15;
        v305 = (_BYTE)v286 - (_BYTE)v291 - 14;
        v306 = v304;
        do
        {
          v307 = v306;
          v308 = v299;
          v309 = &v300[v299];
          v310 = (uint64_t *)((char *)v286 + v299);
          if (&v300[v299] <= v301 || v310 <= v291)
            break;
          --v306;
          --v299;
        }
        while (*((unsigned __int8 *)v310 - 1) == *(v309 - 1));
        v312 = (_DWORD)v310 - (_DWORD)v291;
        v313 = v289 + 1;
        if ((unint64_t)&v289[((_DWORD)v310 - (_DWORD)v291)
                                   + 9
                                   + (v303 + v308) / 0xFFuLL] > v292)
          goto LABEL_657;
        if ((v303 + v308) < 0xF)
        {
          *v289 = 16 * v312;
        }
        else
        {
          v314 = v308 + v304;
          *v289 = -16;
          if (v308 + v304 > 254)
          {
            if (v307 >= 509)
              v315 = 509;
            else
              v315 = v307;
            v316 = v303 - v315 + v308 + 239;
            v478 = v280;
            v481 = v277;
            v476 = v282;
            v469 = v305;
            memset(v313, 255, v316 / 0xFF + 1);
            v312 = (_DWORD)v310 - (_DWORD)v291;
            v282 = v476;
            v280 = v478;
            v277 = v481;
            v292 = v525;
            v12 = a2;
            v313 = &v289[v316 / 0xFFuLL + 2];
            v314 = v316 / 0xFF + v469 + v308;
          }
          *(_BYTE *)v313 = v314;
          v313 = (_QWORD *)((char *)v313 + 1);
        }
        v317 = (_WORD *)((char *)v313 + v312);
        do
        {
          v318 = *v291++;
          *v313++ = v318;
        }
        while (v313 < (_QWORD *)v317);
        v319 = v289;
        v291 = v310;
        while (1)
        {
          *v317 = v302;
          v289 = v317 + 1;
          if (v301 != v280)
          {
            v320 = (uint64_t *)((char *)v291 + 4);
            v321 = v309 + 4;
            if (v290 <= (unint64_t)v291 + 4)
            {
              v329 = (_DWORD *)v291 + 1;
            }
            else
            {
              v322 = *v320 ^ *v321;
              if (v322)
              {
                v323 = __clz(__rbit64(v322)) >> 3;
LABEL_464:
                v291 = (uint64_t *)((char *)v291 + v323 + 4);
                goto LABEL_505;
              }
              v329 = (_DWORD *)v291 + 3;
              v321 = v309 + 12;
            }
            if ((unint64_t)v329 >= v290)
            {
LABEL_453:
              if ((unint64_t)v329 < v467 && *(_DWORD *)v321 == *v329)
              {
                ++v329;
                v321 = (_QWORD *)((char *)v321 + 4);
              }
              if ((unint64_t)v329 < v465 && *(unsigned __int16 *)v321 == *(unsigned __int16 *)v329)
              {
                v329 = (_DWORD *)((char *)v329 + 2);
                v321 = (_QWORD *)((char *)v321 + 2);
              }
              if (v329 < (_DWORD *)v516 && *(unsigned __int8 *)v321 == *(unsigned __int8 *)v329)
                LODWORD(v329) = (_DWORD)v329 + 1;
              v323 = (_DWORD)v329 - (_DWORD)v320;
            }
            else
            {
              v330 = (_DWORD)v329 - (_DWORD)v291 - 4;
              while (1)
              {
                v331 = *(_QWORD *)v329 ^ *v321;
                if (v331)
                  break;
                v329 += 2;
                ++v321;
                v330 += 8;
                if ((unint64_t)v329 >= v290)
                  goto LABEL_453;
              }
              v323 = (__clz(__rbit64(v331)) >> 3) + v330;
            }
            goto LABEL_464;
          }
          v324 = (uint64_t *)((char *)v291 + v521 - v309);
          if (v324 > (_QWORD *)v516)
            v324 = v516;
          v325 = (uint64_t *)((char *)v291 + 4);
          v326 = v309 + 4;
          v327 = (char *)v324 - 7;
          if ((char *)v324 - 7 <= (char *)v291 + 4)
          {
            v332 = (char *)v291 + 4;
          }
          else
          {
            v328 = *v325 ^ *v326;
            if (v328)
            {
              v323 = __clz(__rbit64(v328)) >> 3;
              goto LABEL_481;
            }
            v332 = (char *)v291 + 12;
            v326 = v309 + 12;
          }
          if (v332 >= v327)
          {
LABEL_470:
            if (v332 < (char *)v324 - 3 && *(_DWORD *)v326 == *(_DWORD *)v332)
            {
              v332 += 4;
              v326 = (_QWORD *)((char *)v326 + 4);
            }
            if (v332 < (char *)v324 - 1 && *(unsigned __int16 *)v326 == *(unsigned __int16 *)v332)
            {
              v332 += 2;
              v326 = (_QWORD *)((char *)v326 + 2);
            }
            if (v332 < (char *)v324 && *(unsigned __int8 *)v326 == *v332)
              LODWORD(v332) = (_DWORD)v332 + 1;
            v323 = (_DWORD)v332 - (_DWORD)v325;
          }
          else
          {
            v333 = (_DWORD)v332 - (_DWORD)v291 - 4;
            while (1)
            {
              v334 = *(_QWORD *)v332 ^ *v326;
              if (v334)
                break;
              v332 += 8;
              ++v326;
              v333 += 8;
              if (v332 >= v327)
                goto LABEL_470;
            }
            v323 = (__clz(__rbit64(v334)) >> 3) + v333;
          }
LABEL_481:
          if ((uint64_t *)((char *)v291 + v323 + 4) != v324)
          {
            v291 = (uint64_t *)((char *)v291 + v323 + 4);
            goto LABEL_505;
          }
          v335 = v324;
          v336 = v12;
          if (v290 <= (unint64_t)v324)
            goto LABEL_487;
          v337 = *v324 ^ *(_QWORD *)v12;
          if (!v337)
          {
            v335 = v324 + 1;
            v336 = a2 + 8;
LABEL_487:
            if ((unint64_t)v335 >= v290)
            {
LABEL_493:
              if ((unint64_t)v335 < v467 && *v336 == *v335)
              {
                ++v335;
                ++v336;
              }
              if ((unint64_t)v335 < v465 && *(unsigned __int16 *)v336 == *(unsigned __int16 *)v335)
              {
                v335 = (_DWORD *)((char *)v335 + 2);
                v336 = (_DWORD *)((char *)v336 + 2);
              }
              if (v335 < (_DWORD *)v516 && *(unsigned __int8 *)v336 == *(unsigned __int8 *)v335)
                LODWORD(v335) = (_DWORD)v335 + 1;
              v338 = (_DWORD)v335 - (_DWORD)v324;
            }
            else
            {
              v339 = (char *)v291 + (_QWORD)v521 - v309;
              if (v339 >= (unint64_t)&a2[v524 - 5])
                LODWORD(v339) = (_DWORD)a2 + v524 - 5;
              v340 = (_DWORD)v335 - v339;
              while (1)
              {
                v341 = *(_QWORD *)v335 ^ *(_QWORD *)v336;
                if (v341)
                  break;
                v335 += 2;
                v336 += 2;
                v340 += 8;
                if ((unint64_t)v335 >= v290)
                  goto LABEL_493;
              }
              v338 = (__clz(__rbit64(v341)) >> 3) + v340;
            }
            goto LABEL_504;
          }
          v338 = __clz(__rbit64(v337)) >> 3;
LABEL_504:
          v323 += v338;
          v291 = (_QWORD *)((char *)v324 + v338);
LABEL_505:
          if ((unint64_t)v317 + (v323 + 240) / 0xFFuLL + 8 > v292)
            goto LABEL_657;
          v342 = *v319;
          v343 = v323 - 15;
          if (v323 < 0xF)
          {
            *v319 = v342 + v323;
          }
          else
          {
            *v319 = v342 + 15;
            *(_DWORD *)v289 = -1;
            if (v343 >= 0x3FC)
            {
              v344 = v317 + 3;
              v345 = v323 - 1035;
              v346 = (v323 - 1035) / 0x3FC;
              v347 = 2 * v346;
              v348 = v277;
              v349 = v280;
              v350 = v290;
              v351 = v283;
              v352 = v282;
              memset(v317 + 3, 255, v347 * 2 + 4);
              v282 = v352;
              v283 = v351;
              v290 = v350;
              v279 = v501;
              v280 = v349;
              v277 = v348;
              v292 = v525;
              v12 = a2;
              LOWORD(v343) = v345 - 1020 * v346;
              v289 = &v344[v347];
            }
            v353 = &v289[(unsigned __int16)v343 / 0xFFu];
            *v353 = v343 + (unsigned __int16)v343 / 0xFFu;
            v289 = v353 + 1;
          }
          if ((unint64_t)v291 >= v282)
            goto LABEL_524;
          *(_DWORD *)(a1 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v291 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v291 - 2 - (_DWORD)v279;
          v354 = (_DWORD)v291 - (_DWORD)v279;
          v355 = ((0xCF1BBCDCBB000000 * *v291) >> 50) & 0x3FFC;
          v356 = *(unsigned int *)(a1 + v355);
          if (v356 >= v277)
            v301 = v12;
          else
            v301 = v280;
          if (v356 >= v277)
            v357 = v279;
          else
            v357 = v283;
          *(_DWORD *)(a1 + v355) = v354;
          if ((int)v356 + 0xFFFF < v354 || (v309 = &v357[v356], *(_DWORD *)&v357[v356] != *(_DWORD *)v291))
          {
            v286 = (_DWORD *)((char *)v291 + 1);
            v287 = (_DWORD)v291 + 1 - (_DWORD)v279;
            v285 = (uint64_t *)((char *)v291 + 2);
            v284 = v496;
            if ((unint64_t)v291 + 2 > v282)
              goto LABEL_524;
            goto LABEL_409;
          }
          *v289 = 0;
          v317 = v289 + 1;
          v302 = v354 - v356;
          v319 = v289;
        }
      }
    }
    v287 = (_DWORD)v297 - (_DWORD)v279;
    v285 = (_QWORD *)((char *)v297 + (v294++ >> 6));
    v286 = v297;
  }
  while ((unint64_t)v285 <= v282);
LABEL_524:
  LODWORD(a3) = v505;
  v358 = v511 - (char *)v291;
  v9 = v497;
  if ((unint64_t)&v289[v511 - (char *)v291 + 1 + (v511 - (char *)v291 + 240) / 0xFFuLL] > v292)
    goto LABEL_642;
  v359 = v358 - 15;
  if (v358 < 0xF)
  {
    *v289 = 16 * v358;
  }
  else
  {
    *v289 = -16;
    v360 = v289 + 1;
    if (v359 >= 0xFF)
    {
      v361 = &v12[v524] - (char *)v291 - 270;
      memset(v360, 255, v361 / 0xFF + 1);
      v362 = &v289[v361 / 0xFF];
      LODWORD(a3) = v505;
      v359 = v361 % 0xFF;
      v9 = v497;
      v360 = v362 + 2;
    }
    *v360 = v359;
    v289 = v360;
  }
  v454 = v289 + 1;
  memcpy(v454, v291, v358);
  v453 = (_DWORD)v454 + v358;
LABEL_666:
  result = (v453 - (_DWORD)a3);
LABEL_667:
  v12 = a2;
LABEL_674:
  v13 = v528;
LABEL_675:
  *(_QWORD *)(a1 + 16392) = v12;
  v13[6] = v9;
  return result;
}

uint64_t sub_20BEAE60C(uint64_t result, int a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint32x4_t v6;
  uint64_t v7;
  unsigned int v8;

  v2 = *(_DWORD *)(result + 0x4000);
  if ((v2 + a2) >= 0x80000001)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 16392);
    v5 = *(unsigned int *)(result + 16408);
    v6 = (uint32x4_t)vdupq_n_s32(v2 - 0x10000);
    do
    {
      *(uint32x4_t *)(result + v3) = vqsubq_u32(*(uint32x4_t *)(result + v3), v6);
      v3 += 16;
    }
    while (v3 != 0x4000);
    v7 = v4 + v5;
    *(_DWORD *)(result + 0x4000) = 0x10000;
    v8 = *(_DWORD *)(result + 16408);
    if (v8 > 0x10000)
    {
      *(_DWORD *)(result + 16408) = 0x10000;
      v8 = 0x10000;
    }
    *(_QWORD *)(result + 16392) = v7 - v8;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_forceExtDict(uint64_t a1, _QWORD *a2, char *a3, int a4)
{
  signed int v4;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  BOOL v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  _DWORD *v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  char *v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int16 v33;
  int v34;
  int v35;
  char v36;
  int v37;
  int v38;
  int v39;
  char *v40;
  uint64_t *v41;
  unsigned int v43;
  char *v44;
  char v45;
  int v46;
  unsigned int v47;
  char *v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unsigned int v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  char *v58;
  unint64_t v59;
  _DWORD *v60;
  int v61;
  unint64_t v62;
  char *v63;
  int v64;
  unint64_t v65;
  _DWORD *v66;
  _DWORD *v67;
  unint64_t v68;
  unsigned int v69;
  char *v70;
  int v71;
  unint64_t v72;
  char v73;
  unsigned int v74;
  _WORD *v75;
  __int16 v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  unsigned int v82;
  unint64_t v83;
  uint64_t v84;
  char *v85;
  size_t v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t result;
  char *v91;
  uint64_t *v92;
  unsigned int v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  _DWORD *v100;
  unsigned int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t v108;
  char *v110;
  uint64_t v111;
  char *v112;
  char *v113;
  __int16 v114;
  int v115;
  int v116;
  char v117;
  int v118;
  int v119;
  int v120;
  char *v121;
  uint64_t *v122;
  unsigned int v124;
  char *v125;
  char v126;
  int v127;
  unsigned int v128;
  char *v129;
  uint64_t v130;
  char *v131;
  _QWORD *v132;
  _QWORD *v133;
  unint64_t v134;
  unsigned int v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  char *v139;
  unint64_t v140;
  _DWORD *v141;
  int v142;
  unint64_t v143;
  char *v144;
  int v145;
  unint64_t v146;
  _DWORD *v147;
  _DWORD *v148;
  unint64_t v149;
  unsigned int v150;
  char *v151;
  int v152;
  unint64_t v153;
  char v154;
  unsigned int v155;
  _WORD *v156;
  __int16 v157;
  unsigned int v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  unint64_t v164;
  char *v165;
  unsigned int v166;
  unint64_t v167;
  uint64_t v168;
  char *v169;
  BOOL v170;
  size_t v171;
  unint64_t v172;
  _BYTE *v173;
  unsigned int *v174;
  unint64_t v175;
  char *v176;
  unint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char v180;
  unint64_t v181;
  char v182;
  unint64_t v183;
  char *v184;
  char *v185;
  unint64_t v186;
  unint64_t v187;
  unsigned int v188;
  char *v189;
  char *v190;
  _DWORD *v191;
  _DWORD *v192;
  unint64_t v193;
  unint64_t v194;
  char *v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int *v199;
  unsigned int *v200;
  signed int v201;
  unsigned int v202;
  uint64_t v203;
  char *v204;
  char *v205;
  char *v206;
  char *v207;
  char *v209;
  int v210;
  _QWORD *v211;

  v4 = a4;
  v6 = a1;
  v7 = (unsigned int *)(a1 + 0x4000);
  sub_20BEAE60C(a1, a4);
  v8 = v7[6];
  v9 = *v7;
  v10 = (char *)a2 - v9;
  v11 = *(char **)(v6 + 16392);
  if (WORD1(v8))
    v12 = 0;
  else
    v12 = v9 > v8;
  v210 = *v7;
  v211 = a2;
  v209 = *(char **)(v6 + 16392);
  if (v12)
  {
    if (v4 > 0x7E000000)
      goto LABEL_127;
    v198 = v4;
    v91 = (char *)a2 + v4;
    v7[6] = v8 + v4;
    *v7 = v9 + v4;
    *((_WORD *)v7 + 3) = 2;
    v92 = a2;
    v93 = v4;
    v94 = a3;
    v202 = v93;
    if (v93 < 0xD)
    {
LABEL_252:
      v171 = v91 - (char *)v92;
      v172 = v91 - (char *)v92 - 15;
      if ((unint64_t)(v91 - (char *)v92) < 0xF)
      {
        *v94 = 16 * v171;
      }
      else
      {
        *v94 = -16;
        v173 = v94 + 1;
        if (v172 >= 0xFF)
        {
          v174 = v7;
          v175 = (char *)a2 + v198 - (char *)v92 - 270;
          memset(v173, 255, v175 / 0xFF + 1);
          v176 = &v94[v175 / 0xFF];
          a2 = v211;
          v172 = v175 % 0xFF;
          v7 = v174;
          v173 = v176 + 2;
        }
        *v173 = v172;
        v94 = v173;
      }
      memcpy(v94 + 1, v92, v171);
      result = ((_DWORD)v94 + 1 + v171 - (_DWORD)a3);
      v4 = v202;
      goto LABEL_260;
    }
    v200 = v7;
    v95 = (v9 - v8);
    v96 = (unint64_t)(v91 - 11);
    v205 = &v11[v8];
    v207 = v91 - 5;
    v97 = &v11[v8 - v9];
    v192 = a2 + 1;
    *(_DWORD *)(v6 + (((0xCF1BBCDCBB000000 * *a2) >> 50) & 0x3FFC)) = v9;
    v98 = v91;
    v99 = (char *)a2 + 2;
    v100 = (_DWORD *)((char *)a2 + 1);
    v101 = v9 + 1;
    v102 = (unint64_t)(v98 - 12);
    v190 = v98;
    v177 = (unint64_t)(v98 - 6);
    v178 = (unint64_t)(v98 - 8);
    v196 = &v11[v8];
    v194 = (unint64_t)a2 + v198 - 5;
    v94 = a3;
    v92 = a2;
    v203 = v6;
LABEL_130:
    v103 = *(uint64_t *)((char *)v92 + 1);
    v104 = 1;
    v105 = 65;
    while (1)
    {
      v106 = v99;
      v107 = ((0xCF1BBCDCBB000000 * v103) >> 50) & 0x3FFC;
      v108 = *(unsigned int *)(v6 + v107);
      v103 = *v106;
      *(_DWORD *)(v6 + v107) = v101;
      if (v108 >= v95 && (int)v108 + 0xFFFF >= v101)
      {
        v110 = v108 >= v9 ? v10 : v97;
        if (*(_DWORD *)&v110[v108] == *v100)
          break;
      }
      v101 = (_DWORD)v106 - (_DWORD)v10;
      v99 = (char *)v106 + v104;
      v104 = v105++ >> 6;
      v100 = v106;
      if ((unint64_t)v99 > v96)
      {
LABEL_251:
        v91 = v190;
        v7 = v200;
        goto LABEL_252;
      }
    }
    v111 = 0;
    v112 = &v110[v108];
    if (v108 >= v9)
      v113 = (char *)a2;
    else
      v113 = v11;
    v114 = v101 - v108;
    v115 = (_DWORD)v100 - (_DWORD)v92;
    v116 = (_DWORD)v100 - (_DWORD)v92 - 15;
    v117 = (_BYTE)v100 - (_BYTE)v92 - 14;
    v118 = v116;
    do
    {
      v119 = v118;
      v120 = v111;
      v121 = &v112[v111];
      v122 = (uint64_t *)((char *)v100 + v111);
      if (&v112[v111] <= v113 || v122 <= v92)
        break;
      --v118;
      --v111;
    }
    while (*((unsigned __int8 *)v122 - 1) == *(v121 - 1));
    v124 = (_DWORD)v122 - (_DWORD)v92;
    v125 = v94 + 1;
    if ((v115 + v120) < 0xF)
    {
      *v94 = 16 * v124;
    }
    else
    {
      v126 = v120 + v116;
      *v94 = -16;
      if (v120 + v116 > 254)
      {
        if (v119 >= 509)
          v127 = 509;
        else
          v127 = v119;
        v128 = v115 - v127 + v120 + 239;
        v188 = v95;
        v184 = v97;
        v186 = v96;
        v183 = v102;
        v180 = v117;
        memset(v125, 255, v128 / 0xFF + 1);
        v124 = (_DWORD)v122 - (_DWORD)v92;
        v102 = v183;
        v97 = v184;
        v96 = v186;
        v95 = v188;
        v11 = v209;
        LODWORD(v9) = v210;
        v125 = &v94[v128 / 0xFFuLL + 2];
        v126 = v128 / 0xFF + v180 + v120;
      }
      *v125++ = v126;
    }
    v129 = &v125[v124];
    do
    {
      v130 = *v92++;
      *(_QWORD *)v125 = v130;
      v125 += 8;
    }
    while (v125 < v129);
    v131 = v94;
    v92 = v122;
    a2 = v211;
    while (1)
    {
      *(_WORD *)v129 = v114;
      v94 = v129 + 2;
      if (v113 != v11)
      {
        v132 = (uint64_t *)((char *)v92 + 4);
        v133 = v121 + 4;
        if (v102 <= (unint64_t)v92 + 4)
        {
          v141 = (_DWORD *)v92 + 1;
        }
        else
        {
          v134 = *v132 ^ *v133;
          if (v134)
          {
            v135 = __clz(__rbit64(v134)) >> 3;
LABEL_188:
            v92 = (uint64_t *)((char *)v92 + v135 + 4);
            goto LABEL_229;
          }
          v141 = (_DWORD *)v92 + 3;
          v133 = v121 + 12;
        }
        if ((unint64_t)v141 >= v102)
        {
LABEL_177:
          if ((unint64_t)v141 < v178 && *(_DWORD *)v133 == *v141)
          {
            ++v141;
            v133 = (_QWORD *)((char *)v133 + 4);
          }
          if ((unint64_t)v141 < v177 && *(unsigned __int16 *)v133 == *(unsigned __int16 *)v141)
          {
            v141 = (_DWORD *)((char *)v141 + 2);
            v133 = (_QWORD *)((char *)v133 + 2);
          }
          if (v141 < (_DWORD *)v207 && *(unsigned __int8 *)v133 == *(unsigned __int8 *)v141)
            LODWORD(v141) = (_DWORD)v141 + 1;
          v135 = (_DWORD)v141 - (_DWORD)v132;
        }
        else
        {
          v142 = (_DWORD)v141 - (_DWORD)v92 - 4;
          while (1)
          {
            v143 = *(_QWORD *)v141 ^ *v133;
            if (v143)
              break;
            v141 += 2;
            ++v133;
            v142 += 8;
            if ((unint64_t)v141 >= v102)
              goto LABEL_177;
          }
          v135 = (__clz(__rbit64(v143)) >> 3) + v142;
        }
        goto LABEL_188;
      }
      v136 = (uint64_t *)((char *)v92 + v205 - v121);
      if (v136 > (_QWORD *)v207)
        v136 = v207;
      v137 = (uint64_t *)((char *)v92 + 4);
      v138 = v121 + 4;
      v139 = (char *)v136 - 7;
      if ((char *)v136 - 7 <= (char *)v92 + 4)
      {
        v144 = (char *)v92 + 4;
      }
      else
      {
        v140 = *v137 ^ *v138;
        if (v140)
        {
          v135 = __clz(__rbit64(v140)) >> 3;
          goto LABEL_205;
        }
        v144 = (char *)v92 + 12;
        v138 = v121 + 12;
      }
      if (v144 >= v139)
      {
LABEL_194:
        if (v144 < (char *)v136 - 3 && *(_DWORD *)v138 == *(_DWORD *)v144)
        {
          v144 += 4;
          v138 = (_QWORD *)((char *)v138 + 4);
        }
        if (v144 < (char *)v136 - 1 && *(unsigned __int16 *)v138 == *(unsigned __int16 *)v144)
        {
          v144 += 2;
          v138 = (_QWORD *)((char *)v138 + 2);
        }
        if (v144 < (char *)v136 && *(unsigned __int8 *)v138 == *v144)
          LODWORD(v144) = (_DWORD)v144 + 1;
        v135 = (_DWORD)v144 - (_DWORD)v137;
      }
      else
      {
        v145 = (_DWORD)v144 - (_DWORD)v92 - 4;
        while (1)
        {
          v146 = *(_QWORD *)v144 ^ *v138;
          if (v146)
            break;
          v144 += 8;
          ++v138;
          v145 += 8;
          if (v144 >= v139)
            goto LABEL_194;
        }
        v135 = (__clz(__rbit64(v146)) >> 3) + v145;
      }
LABEL_205:
      if ((uint64_t *)((char *)v92 + v135 + 4) != v136)
      {
        v92 = (uint64_t *)((char *)v92 + v135 + 4);
        goto LABEL_229;
      }
      v147 = v136;
      v148 = a2;
      if (v102 <= (unint64_t)v136)
        goto LABEL_211;
      v149 = *v136 ^ *a2;
      if (!v149)
      {
        v147 = v136 + 1;
        v148 = v192;
LABEL_211:
        if ((unint64_t)v147 >= v102)
        {
LABEL_217:
          if ((unint64_t)v147 < v178 && *v148 == *v147)
          {
            ++v147;
            ++v148;
          }
          if ((unint64_t)v147 < v177 && *(unsigned __int16 *)v148 == *(unsigned __int16 *)v147)
          {
            v147 = (_DWORD *)((char *)v147 + 2);
            v148 = (_DWORD *)((char *)v148 + 2);
          }
          if (v147 < (_DWORD *)v207 && *(unsigned __int8 *)v148 == *(unsigned __int8 *)v147)
            LODWORD(v147) = (_DWORD)v147 + 1;
          v150 = (_DWORD)v147 - (_DWORD)v136;
        }
        else
        {
          v151 = (char *)((char *)v92 + (_QWORD)v196 - v121);
          if ((unint64_t)v151 >= v194)
            LODWORD(v151) = v194;
          v152 = (_DWORD)v147 - (_DWORD)v151;
          while (1)
          {
            v153 = *(_QWORD *)v147 ^ *(_QWORD *)v148;
            if (v153)
              break;
            v147 += 2;
            v148 += 2;
            v152 += 8;
            if ((unint64_t)v147 >= v102)
              goto LABEL_217;
          }
          v150 = (__clz(__rbit64(v153)) >> 3) + v152;
        }
        goto LABEL_228;
      }
      v150 = __clz(__rbit64(v149)) >> 3;
LABEL_228:
      v135 += v150;
      v92 = (_QWORD *)((char *)v136 + v150);
LABEL_229:
      v154 = *v131;
      v155 = v135 - 15;
      if (v135 < 0xF)
      {
        *v131 = v154 + v135;
      }
      else
      {
        *v131 = v154 + 15;
        *(_DWORD *)v94 = -1;
        if (v155 >= 0x3FC)
        {
          v156 = v129 + 6;
          v157 = v135 - 1035;
          v158 = (v135 - 1035) / 0x3FC;
          v159 = 2 * v158;
          v160 = v95;
          v161 = v96;
          v162 = v97;
          v163 = v10;
          v164 = v102;
          memset(v129 + 6, 255, v159 * 2 + 4);
          v102 = v164;
          v10 = v163;
          v6 = v203;
          v97 = v162;
          v96 = v161;
          v95 = v160;
          v11 = v209;
          LODWORD(v9) = v210;
          LOWORD(v155) = v157 - 1020 * v158;
          a2 = v211;
          v94 = (char *)&v156[v159];
        }
        v165 = &v94[(unsigned __int16)v155 / 0xFFu];
        *v165 = v155 + (unsigned __int16)v155 / 0xFFu;
        v94 = v165 + 1;
      }
      if ((unint64_t)v92 >= v96)
        goto LABEL_251;
      *(_DWORD *)(v6 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v92 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v92 - 2 - (_DWORD)v10;
      v166 = (_DWORD)v92 - (_DWORD)v10;
      v167 = ((0xCF1BBCDCBB000000 * *v92) >> 50) & 0x3FFC;
      v168 = *(unsigned int *)(v6 + v167);
      if (v168 >= v9)
        v113 = (char *)a2;
      else
        v113 = v11;
      if (v168 >= v9)
        v169 = v10;
      else
        v169 = v97;
      *(_DWORD *)(v6 + v167) = v166;
      v170 = v168 >= v95 && (int)v168 + 0xFFFF >= v166;
      if (!v170 || (v121 = &v169[v168], *(_DWORD *)&v169[v168] != *(_DWORD *)v92))
      {
        v100 = (_DWORD *)((char *)v92 + 1);
        v101 = (_DWORD)v92 + 1 - (_DWORD)v10;
        v99 = (char *)v92 + 2;
        if ((unint64_t)v92 + 2 > v96)
          goto LABEL_251;
        goto LABEL_130;
      }
      *v94 = 0;
      v129 = v94 + 1;
      v114 = v166 - v168;
      v131 = v94;
    }
  }
  if (v4 > 0x7E000000)
  {
LABEL_127:
    result = 0;
    goto LABEL_260;
  }
  v197 = v4;
  v199 = v7;
  v13 = (char *)a2 + v4;
  v7[6] = v8 + v4;
  *v7 = v9 + v4;
  *((_WORD *)v7 + 3) = 2;
  v14 = a2;
  v15 = a3;
  if (v4 < 0xD)
    goto LABEL_122;
  v201 = v4;
  v16 = (unint64_t)(v13 - 11);
  v204 = &v11[v8];
  v206 = v13 - 5;
  v17 = &v11[v8 - v9];
  v191 = a2 + 1;
  *(_DWORD *)(v6 + (((0xCF1BBCDCBB000000 * *a2) >> 50) & 0x3FFC)) = v9;
  v18 = (char *)a2 + v4;
  v19 = (_QWORD *)((char *)a2 + 2);
  v20 = (_DWORD *)((char *)a2 + 1);
  v21 = v9 + 1;
  v22 = (unint64_t)(v18 - 12);
  v189 = v18;
  v179 = (unint64_t)(v18 - 6);
  v181 = (unint64_t)(v18 - 8);
  v195 = &v11[v8];
  v193 = (unint64_t)a2 + v197 - 5;
  v15 = a3;
  v14 = a2;
LABEL_8:
  v23 = *(uint64_t *)((char *)v14 + 1);
  v24 = 1;
  v25 = 65;
  do
  {
    v26 = ((0xCF1BBCDCBB000000 * v23) >> 50) & 0x3FFC;
    v27 = *(unsigned int *)(v6 + v26);
    v28 = v19;
    v23 = *v19;
    *(_DWORD *)(v6 + v26) = v21;
    if ((int)v27 + 0xFFFF >= v21)
    {
      v29 = v27 >= v9 ? v10 : v17;
      if (*(_DWORD *)&v29[v27] == *v20)
      {
        v30 = 0;
        v31 = &v29[v27];
        if (v27 >= v9)
          v32 = (char *)a2;
        else
          v32 = v11;
        v33 = v21 - v27;
        v34 = (_DWORD)v20 - (_DWORD)v14;
        v35 = (_DWORD)v20 - (_DWORD)v14 - 15;
        v36 = (_BYTE)v20 - (_BYTE)v14 - 14;
        v37 = v35;
        do
        {
          v38 = v37;
          v39 = v30;
          v40 = &v31[v30];
          v41 = (uint64_t *)((char *)v20 + v30);
          if (&v31[v30] <= v32 || v41 <= v14)
            break;
          --v37;
          --v30;
        }
        while (*((unsigned __int8 *)v41 - 1) == *(v40 - 1));
        v43 = (_DWORD)v41 - (_DWORD)v14;
        v44 = v15 + 1;
        if ((v34 + v39) < 0xF)
        {
          *v15 = 16 * v43;
        }
        else
        {
          v45 = v39 + v35;
          *v15 = -16;
          if (v39 + v35 > 254)
          {
            if (v38 >= 509)
              v46 = 509;
            else
              v46 = v38;
            v47 = v34 - v46 + v39 + 239;
            v185 = v17;
            v187 = v16;
            v182 = v36;
            memset(v44, 255, v47 / 0xFF + 1);
            v43 = (_DWORD)v41 - (_DWORD)v14;
            v17 = v185;
            v16 = v187;
            v11 = v209;
            LODWORD(v9) = v210;
            v44 = &v15[v47 / 0xFFuLL + 2];
            v45 = v47 / 0xFF + v182 + v39;
          }
          *v44++ = v45;
        }
        v48 = &v44[v43];
        do
        {
          v49 = *v14++;
          *(_QWORD *)v44 = v49;
          v44 += 8;
        }
        while (v44 < v48);
        v50 = v15;
        v14 = v41;
        a2 = v211;
        while (1)
        {
          *(_WORD *)v48 = v33;
          v15 = v48 + 2;
          if (v32 != v11)
          {
            v51 = (uint64_t *)((char *)v14 + 4);
            v52 = v40 + 4;
            if (v22 <= (unint64_t)v14 + 4)
            {
              v60 = (_DWORD *)v14 + 1;
            }
            else
            {
              v53 = *v51 ^ *v52;
              if (v53)
              {
                v54 = __clz(__rbit64(v53)) >> 3;
LABEL_62:
                v14 = (uint64_t *)((char *)v14 + v54 + 4);
                goto LABEL_103;
              }
              v60 = (_DWORD *)v14 + 3;
              v52 = v40 + 12;
            }
            if ((unint64_t)v60 >= v22)
            {
LABEL_51:
              if ((unint64_t)v60 < v181 && *(_DWORD *)v52 == *v60)
              {
                ++v60;
                v52 = (_QWORD *)((char *)v52 + 4);
              }
              if ((unint64_t)v60 < v179 && *(unsigned __int16 *)v52 == *(unsigned __int16 *)v60)
              {
                v60 = (_DWORD *)((char *)v60 + 2);
                v52 = (_QWORD *)((char *)v52 + 2);
              }
              if (v60 < (_DWORD *)v206 && *(unsigned __int8 *)v52 == *(unsigned __int8 *)v60)
                LODWORD(v60) = (_DWORD)v60 + 1;
              v54 = (_DWORD)v60 - (_DWORD)v51;
            }
            else
            {
              v61 = (_DWORD)v60 - (_DWORD)v14 - 4;
              while (1)
              {
                v62 = *(_QWORD *)v60 ^ *v52;
                if (v62)
                  break;
                v60 += 2;
                ++v52;
                v61 += 8;
                if ((unint64_t)v60 >= v22)
                  goto LABEL_51;
              }
              v54 = (__clz(__rbit64(v62)) >> 3) + v61;
            }
            goto LABEL_62;
          }
          v55 = (uint64_t *)((char *)v14 + v204 - v40);
          if (v55 > (_QWORD *)v206)
            v55 = v206;
          v56 = (uint64_t *)((char *)v14 + 4);
          v57 = v40 + 4;
          v58 = (char *)v55 - 7;
          if ((char *)v55 - 7 <= (char *)v14 + 4)
          {
            v63 = (char *)v14 + 4;
          }
          else
          {
            v59 = *v56 ^ *v57;
            if (v59)
            {
              v54 = __clz(__rbit64(v59)) >> 3;
              goto LABEL_79;
            }
            v63 = (char *)v14 + 12;
            v57 = v40 + 12;
          }
          if (v63 >= v58)
          {
LABEL_68:
            if (v63 < (char *)v55 - 3 && *(_DWORD *)v57 == *(_DWORD *)v63)
            {
              v63 += 4;
              v57 = (_QWORD *)((char *)v57 + 4);
            }
            if (v63 < (char *)v55 - 1 && *(unsigned __int16 *)v57 == *(unsigned __int16 *)v63)
            {
              v63 += 2;
              v57 = (_QWORD *)((char *)v57 + 2);
            }
            if (v63 < (char *)v55 && *(unsigned __int8 *)v57 == *v63)
              LODWORD(v63) = (_DWORD)v63 + 1;
            v54 = (_DWORD)v63 - (_DWORD)v56;
          }
          else
          {
            v64 = (_DWORD)v63 - (_DWORD)v14 - 4;
            while (1)
            {
              v65 = *(_QWORD *)v63 ^ *v57;
              if (v65)
                break;
              v63 += 8;
              ++v57;
              v64 += 8;
              if (v63 >= v58)
                goto LABEL_68;
            }
            v54 = (__clz(__rbit64(v65)) >> 3) + v64;
          }
LABEL_79:
          if ((uint64_t *)((char *)v14 + v54 + 4) != v55)
          {
            v14 = (uint64_t *)((char *)v14 + v54 + 4);
            goto LABEL_103;
          }
          v66 = v55;
          v67 = a2;
          if (v22 <= (unint64_t)v55)
            goto LABEL_85;
          v68 = *v55 ^ *a2;
          if (!v68)
          {
            v66 = v55 + 1;
            v67 = v191;
LABEL_85:
            if ((unint64_t)v66 >= v22)
            {
LABEL_91:
              if ((unint64_t)v66 < v181 && *v67 == *v66)
              {
                ++v66;
                ++v67;
              }
              if ((unint64_t)v66 < v179 && *(unsigned __int16 *)v67 == *(unsigned __int16 *)v66)
              {
                v66 = (_DWORD *)((char *)v66 + 2);
                v67 = (_DWORD *)((char *)v67 + 2);
              }
              if (v66 < (_DWORD *)v206 && *(unsigned __int8 *)v67 == *(unsigned __int8 *)v66)
                LODWORD(v66) = (_DWORD)v66 + 1;
              v69 = (_DWORD)v66 - (_DWORD)v55;
            }
            else
            {
              v70 = (char *)((char *)v14 + (_QWORD)v195 - v40);
              if ((unint64_t)v70 >= v193)
                LODWORD(v70) = v193;
              v71 = (_DWORD)v66 - (_DWORD)v70;
              while (1)
              {
                v72 = *(_QWORD *)v66 ^ *(_QWORD *)v67;
                if (v72)
                  break;
                v66 += 2;
                v67 += 2;
                v71 += 8;
                if ((unint64_t)v66 >= v22)
                  goto LABEL_91;
              }
              v69 = (__clz(__rbit64(v72)) >> 3) + v71;
            }
            goto LABEL_102;
          }
          v69 = __clz(__rbit64(v68)) >> 3;
LABEL_102:
          v54 += v69;
          v14 = (_QWORD *)((char *)v55 + v69);
LABEL_103:
          v73 = *v50;
          v74 = v54 - 15;
          if (v54 < 0xF)
          {
            *v50 = v73 + v54;
          }
          else
          {
            *v50 = v73 + 15;
            *(_DWORD *)v15 = -1;
            if (v74 >= 0x3FC)
            {
              v75 = v48 + 6;
              v76 = v54 - 1035;
              v77 = (v54 - 1035) / 0x3FC;
              v78 = 2 * v77;
              v79 = v16;
              v80 = v17;
              memset(v48 + 6, 255, v78 * 2 + 4);
              v17 = v80;
              v16 = v79;
              v11 = v209;
              LODWORD(v9) = v210;
              LOWORD(v74) = v76 - 1020 * v77;
              v15 = (char *)&v75[v78];
              a2 = v211;
            }
            v81 = &v15[(unsigned __int16)v74 / 0xFFu];
            *v81 = v74 + (unsigned __int16)v74 / 0xFFu;
            v15 = v81 + 1;
          }
          if ((unint64_t)v14 >= v16)
            goto LABEL_121;
          *(_DWORD *)(v6 + (((0xCF1BBCDCBB000000 * *(uint64_t *)((char *)v14 - 2)) >> 50) & 0x3FFC)) = (_DWORD)v14 - 2 - (_DWORD)v10;
          v82 = (_DWORD)v14 - (_DWORD)v10;
          v83 = ((0xCF1BBCDCBB000000 * *v14) >> 50) & 0x3FFC;
          v84 = *(unsigned int *)(v6 + v83);
          if (v84 >= v9)
            v32 = (char *)a2;
          else
            v32 = v11;
          if (v84 >= v9)
            v85 = v10;
          else
            v85 = v17;
          *(_DWORD *)(v6 + v83) = v82;
          if ((int)v84 + 0xFFFF < v82 || (v40 = &v85[v84], *(_DWORD *)&v85[v84] != *(_DWORD *)v14))
          {
            v20 = (_DWORD *)((char *)v14 + 1);
            v21 = (_DWORD)v14 + 1 - (_DWORD)v10;
            v19 = (uint64_t *)((char *)v14 + 2);
            if ((unint64_t)v14 + 2 > v16)
              goto LABEL_121;
            goto LABEL_8;
          }
          *v15 = 0;
          v48 = v15 + 1;
          v33 = v82 - v84;
          v50 = v15;
        }
      }
    }
    v21 = (_DWORD)v28 - (_DWORD)v10;
    v19 = (_QWORD *)((char *)v28 + v24);
    v24 = v25++ >> 6;
    v20 = v28;
  }
  while ((unint64_t)v19 <= v16);
LABEL_121:
  v4 = v201;
  v13 = v189;
LABEL_122:
  v86 = v13 - (char *)v14;
  v87 = v13 - (char *)v14 - 15;
  if ((unint64_t)(v13 - (char *)v14) < 0xF)
  {
    *v15 = 16 * v86;
  }
  else
  {
    *v15 = -16;
    v88 = v15 + 1;
    if (v87 >= 0xFF)
    {
      v89 = (char *)a2 + v197 - (char *)v14 - 270;
      memset(v88, 255, v89 / 0xFF + 1);
      a2 = v211;
      v87 = v89 % 0xFF;
      v88 = &v15[v89 / 0xFF + 2];
    }
    *v88 = v87;
    v15 = v88;
  }
  memcpy(v15 + 1, v14, v86);
  result = ((_DWORD)v15 + 1 + v86 - (_DWORD)a3);
  v7 = v199;
LABEL_260:
  *(_QWORD *)(v6 + 16392) = a2;
  v7[6] = v4;
  return result;
}

size_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_saveDict(uint64_t a1, void *__dst, unsigned int a3)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;

  v5 = *(unsigned int *)(a1 + 16408);
  if (a3 >= v5)
    v6 = *(_DWORD *)(a1 + 16408);
  else
    v6 = a3;
  if (v6 >= 0x10000)
    v7 = 0x10000;
  else
    v7 = v6;
  memmove(__dst, (const void *)(*(_QWORD *)(a1 + 16392) + v5 - v7), v7);
  *(_QWORD *)(a1 + 16392) = __dst;
  *(_DWORD *)(a1 + 16408) = v7;
  return v7;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *__dst, char *a3, int a4)
{
  unsigned __int16 *v5;
  const char *v6;
  char *v7;
  const char *v8;
  const char *v9;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v10;
  char *v11;
  unint64_t v12;
  _OWORD *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  char *v19;
  unsigned __int16 *v20;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v23;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v30;
  int v31;
  char *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  _DWORD *v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  char v42;

  if (!this)
    return 0xFFFFFFFFLL;
  if (!a4)
  {
    if ((_DWORD)a3 == 1)
    {
      if (*(_BYTE *)this)
        return 0xFFFFFFFFLL;
      else
        return 0;
    }
    return 0xFFFFFFFFLL;
  }
  if (!(_DWORD)a3)
    return 0xFFFFFFFFLL;
  v5 = (unsigned __int16 *)((char *)this + (int)a3);
  v6 = &__dst[a4];
  v7 = (char *)v5 - 15;
  v8 = v6 - 12;
  v9 = v6 - 7;
  v10 = this;
  v11 = __dst;
  while (1)
  {
    while (1)
    {
      v13 = (_OWORD *)((char *)v10 + 1);
      v12 = *(unsigned __int8 *)v10;
      v14 = v12 >> 4;
      if ((v12 >> 4) == 15)
        break;
      if (v13 >= (_OWORD *)v5 - 1 || v11 > v6 - 32)
      {
        v10 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v10 + 1);
        goto LABEL_12;
      }
      *(_OWORD *)v11 = *v13;
      v19 = &v11[v14];
      v27 = v12 & 0xF;
      v10 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + v14 + 2);
      v24 = *(unsigned __int16 *)((char *)v13 + v14);
      v26 = (unint64_t)&v19[-v24];
      if ((_DWORD)v27 == 15 || v24 < 8 || v26 < (unint64_t)__dst)
      {
        v23 = v10;
        goto LABEL_28;
      }
      *(_QWORD *)v19 = *(_QWORD *)v26;
      *((_QWORD *)v19 + 1) = *(_QWORD *)(v26 + 8);
      *((_WORD *)v19 + 8) = *(_WORD *)(v26 + 16);
      v11 = &v19[v27 + 4];
    }
    if (v13 >= (_OWORD *)v7)
    {
      LODWORD(v10) = (_DWORD)v10 + 1;
      return (~(_DWORD)v10 + (_DWORD)this);
    }
    LODWORD(v15) = 0;
    v16 = (uint64_t)v10 + 2;
    v10 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v10 + 1);
    do
    {
      v18 = *(unsigned __int8 *)v10;
      v10 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v10 + 1);
      v17 = v18;
      v15 = (v15 + v18);
      ++v16;
    }
    while (v10 < (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)v7 && v17 == 255);
    v14 = v15 + 15;
    if (__CFADD__(v11, v14) || v14 > -v16)
      return (~(_DWORD)v10 + (_DWORD)this);
LABEL_12:
    v19 = &v11[v14];
    v20 = (unsigned __int16 *)((char *)v10 + v14);
    if (&v11[v14] > v8 || v20 > v5 - 4)
      break;
    do
    {
      v22 = *(_QWORD *)v10;
      v10 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v10 + 8);
      *(_QWORD *)v11 = v22;
      v11 += 8;
    }
    while (v11 < v19);
    v25 = *v20;
    v23 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v20 + 1);
    v24 = v25;
    v26 = (unint64_t)&v19[-v25];
    v27 = v12 & 0xF;
LABEL_28:
    if (v27 == 15)
    {
      LODWORD(v30) = 0;
      while (1)
      {
        v10 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v23 + 1);
        if ((char *)v23 + 1 >= (char *)(v5 - 2))
          return (~(_DWORD)v10 + (_DWORD)this);
        v31 = *(unsigned __int8 *)v23;
        v30 = (v30 + v31);
        v23 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v23 + 1);
        if (v31 != 255)
        {
          v27 = v30 + 15;
          if (__CFADD__(v19, v27))
            return (~(_DWORD)v10 + (_DWORD)this);
          goto LABEL_36;
        }
      }
    }
    v10 = v23;
LABEL_36:
    if (v26 < (unint64_t)__dst)
      return (~(_DWORD)v10 + (_DWORD)this);
    if (v24 <= 7)
    {
      *(_DWORD *)v19 = 0;
      *v19 = *(_BYTE *)v26;
      v19[1] = *(_BYTE *)(v26 + 1);
      v19[2] = *(_BYTE *)(v26 + 2);
      v19[3] = *(_BYTE *)(v26 + 3);
      v38 = (_DWORD *)(v26 + dword_20CA54A80[v24]);
      *((_DWORD *)v19 + 1) = *v38;
      v32 = (char *)v38 - dword_20CA54AA0[v24];
    }
    else
    {
      v33 = *(_QWORD *)v26;
      v32 = (char *)(v26 + 8);
      *(_QWORD *)v19 = v33;
    }
    v11 = &v19[v27 + 4];
    v34 = v19 + 8;
    if (v11 > v8)
    {
      if (v11 > v6 - 5)
        return (~(_DWORD)v10 + (_DWORD)this);
      if (v34 < v9)
      {
        v39 = v19 + 8;
        v40 = (uint64_t *)v32;
        do
        {
          v41 = *v40++;
          *(_QWORD *)v39 = v41;
          v39 += 8;
        }
        while (v39 < v9);
        v32 += v9 - v34;
        v34 = (char *)(v6 - 7);
      }
      while (v34 < v11)
      {
        v42 = *v32++;
        *v34++ = v42;
      }
    }
    else
    {
      *(_QWORD *)v34 = *(_QWORD *)v32;
      if (v27 >= 0xD)
      {
        v35 = v19 + 16;
        v36 = (uint64_t *)(v32 + 8);
        do
        {
          v37 = *v36++;
          *(_QWORD *)v35 = v37;
          v35 += 8;
        }
        while (v35 < v11);
      }
    }
  }
  if (v20 == v5 && v19 <= v6)
  {
    memmove(v11, v10, v14);
    return ((_DWORD)v19 - (_DWORD)__dst);
  }
  return (~(_DWORD)v10 + (_DWORD)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_partial(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *__dst, char *a3, int a4, int a5)
{
  int v5;
  unsigned __int16 *v7;
  const char *v8;
  char *v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v13;
  char *v14;
  _OWORD *v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  char *v22;
  unsigned __int16 *v23;
  uint64_t v26;
  unint64_t v27;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v28;
  unsigned int v29;
  char *v30;
  unint64_t v31;
  unsigned __int16 *v32;
  unsigned int v33;
  uint64_t v36;
  int v37;
  size_t v38;
  char v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  char *v45;
  int v47;
  char *v48;
  unsigned __int16 *v49;
  char *v50;

  if (!this)
    return 0xFFFFFFFFLL;
  if (a4 >= a5)
    v5 = a5;
  else
    v5 = a4;
  if (!v5)
    return 0;
  if (!(_DWORD)a3)
    return 0xFFFFFFFFLL;
  v7 = (unsigned __int16 *)((char *)this + (int)a3);
  v8 = &__dst[v5];
  v50 = (char *)(v7 - 8);
  v9 = (char *)v7 - 15;
  v10 = v8 - 12;
  v11 = (char *)(v7 - 4);
  v48 = (char *)(v7 - 4);
  v49 = v7;
  v12 = (unint64_t)(v7 - 2);
  v47 = (int)this;
  v13 = this;
  v14 = __dst;
  while (1)
  {
    while (1)
    {
      v15 = (_OWORD *)((char *)v13 + 1);
      v16 = *(unsigned __int8 *)v13;
      v17 = v16 >> 4;
      if ((v16 >> 4) == 15)
      {
        if (v15 >= (_OWORD *)v9)
        {
          LODWORD(v13) = (_DWORD)v13 + 1;
          return (~(_DWORD)v13 + v47);
        }
        LODWORD(v18) = 0;
        v19 = (uint64_t)v13 + 2;
        v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 1);
        do
        {
          v21 = *(unsigned __int8 *)v13;
          v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 1);
          v20 = v21;
          v18 = (v18 + v21);
          ++v19;
        }
        while (v13 < (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)v9 && v20 == 255);
        v17 = v18 + 15;
        if (__CFADD__(v14, v18 + 15) || v17 > -v19)
          return (~(_DWORD)v13 + v47);
        goto LABEL_15;
      }
      if (v15 >= (_OWORD *)v50 || v14 > v8 - 32)
        break;
      *(_OWORD *)v14 = *v15;
      v22 = &v14[v17];
      v32 = (unsigned __int16 *)((char *)v15 + v17);
      v31 = v16 & 0xF;
      v33 = *v32;
      v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v32 + 1);
      v27 = v33;
      v30 = &v14[v17 - v33];
      if ((v16 & 0xF) == 0xF || v27 < 8 || v30 < __dst)
      {
        v28 = v13;
        goto LABEL_41;
      }
      *(_QWORD *)v22 = *(_QWORD *)v30;
      *((_QWORD *)v22 + 1) = *((_QWORD *)v30 + 1);
      *((_WORD *)v22 + 8) = *((_WORD *)v30 + 8);
      v14 = &v22[v31 + 4];
    }
    v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 1);
LABEL_15:
    v22 = &v14[v17];
    v23 = (unsigned __int16 *)((char *)v13 + v17);
    if (&v14[v17] > v10 || v23 > (unsigned __int16 *)v11)
    {
      if (v23 > (unsigned __int16 *)v11 && v23 != v49)
        return (~(_DWORD)v13 + v47);
      if (v22 > v8)
      {
        memmove(v14, v13, v8 - v14);
LABEL_72:
        LODWORD(v22) = (_DWORD)v8;
        return ((_DWORD)v22 - (_DWORD)__dst);
      }
      memmove(v14, v13, v17);
      if (v22 == v8)
        return ((_DWORD)v22 - (_DWORD)__dst);
      v11 = v48;
      if (v23 == v49)
        return ((_DWORD)v22 - (_DWORD)__dst);
    }
    else
    {
      do
      {
        v26 = *(_QWORD *)v13;
        v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 8);
        *(_QWORD *)v14 = v26;
        v14 += 8;
      }
      while (v14 < v22);
    }
    v29 = *v23;
    v28 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v23 + 1);
    v27 = v29;
    v30 = &v22[-v29];
    v31 = v16 & 0xF;
LABEL_41:
    if (v31 == 15)
      break;
    v13 = v28;
LABEL_49:
    if (v30 < __dst)
      return (~(_DWORD)v13 + v47);
    v14 = &v22[v31 + 4];
    if (v14 <= v10)
    {
      if (v27 <= 7)
      {
        *(_DWORD *)v22 = 0;
        *v22 = *v30;
        v22[1] = v30[1];
        v22[2] = v30[2];
        v22[3] = v30[3];
        v45 = &v30[dword_20CA54A80[v27]];
        *((_DWORD *)v22 + 1) = *(_DWORD *)v45;
        v40 = &v45[-dword_20CA54AA0[v27]];
      }
      else
      {
        v41 = *(_QWORD *)v30;
        v40 = v30 + 8;
        *(_QWORD *)v22 = v41;
      }
      *((_QWORD *)v22 + 1) = *(_QWORD *)v40;
      if (v31 >= 0xD)
      {
        v42 = v22 + 16;
        v43 = (uint64_t *)(v40 + 8);
        do
        {
          v44 = *v43++;
          *(_QWORD *)v42 = v44;
          v42 += 8;
        }
        while (v42 < v14);
      }
    }
    else
    {
      if (v31 + 4 >= v8 - v22)
        v38 = v8 - v22;
      else
        v38 = v31 + 4;
      v14 = &v22[v38];
      if (&v30[v38] <= v22)
      {
        memcpy(v22, v30, v38);
        v11 = v48;
      }
      else if (v38)
      {
        do
        {
          v39 = *v30++;
          *v22++ = v39;
        }
        while (v22 < v14);
      }
      if (v14 == v8)
        goto LABEL_72;
    }
  }
  LODWORD(v36) = 0;
  while (1)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v28 + 1);
    if ((unint64_t)v28 + 1 >= v12)
      return (~(_DWORD)v13 + v47);
    v37 = *(unsigned __int8 *)v28;
    v36 = (v36 + v37);
    v28 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v28 + 1);
    if (v37 != 255)
    {
      v31 = v36 + 15;
      if (__CFADD__(v22, v31))
        return (~(_DWORD)v13 + v47);
      goto LABEL_49;
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_fast(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *__dst, char *a3)
{
  int v3;
  const char *v4;
  const char *v5;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v6;
  char v7;
  unsigned int v8;
  size_t v9;
  uint64_t v11;
  int v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  unsigned int v18;
  char *v19;
  unint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t *v34;
  uint64_t v35;
  char v36;

  if (!this)
    return 0xFFFFFFFFLL;
  v3 = (int)this;
  if (!(_DWORD)a3)
  {
    if (*(_BYTE *)this)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  v4 = &__dst[(int)a3];
  v5 = v4 - 7;
  v6 = this;
  while (1)
  {
    while (1)
    {
      v8 = *(unsigned __int8 *)v6;
      v6 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v6 + 1);
      v7 = v8;
      v9 = (unint64_t)v8 >> 4;
      if (v8 > 0x8FuLL || __dst > v4 - 26)
        break;
      *(_QWORD *)__dst = *(_QWORD *)v6;
      v13 = &__dst[v9];
      v21 = (unsigned __int16 *)((char *)v6 + v9);
      v20 = v7 & 0xF;
      v22 = *v21;
      v6 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v21 + 1);
      v17 = v22;
      v19 = &v13[-v22];
      if ((_DWORD)v20 == 15 || v17 < 8)
        goto LABEL_21;
      *(_QWORD *)v13 = *(_QWORD *)v19;
      *((_QWORD *)v13 + 1) = *((_QWORD *)v19 + 1);
      *((_WORD *)v13 + 8) = *((_WORD *)v19 + 8);
      __dst = &v13[v20 + 4];
    }
    if ((_DWORD)v9 == 15)
    {
      LODWORD(v11) = 0;
      do
      {
        v12 = *(unsigned __int8 *)v6;
        v6 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v6 + 1);
        v11 = (v11 + v12);
      }
      while (v12 == 255);
      v9 = v11 + 15;
    }
    v13 = &__dst[v9];
    if (&__dst[v9] > v4 - 8)
      break;
    v14 = v6;
    do
    {
      v15 = *(_QWORD *)v14;
      v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v14 + 8);
      *(_QWORD *)__dst = v15;
      __dst += 8;
    }
    while (__dst < v13);
    v16 = (unsigned __int16 *)((char *)v6 + v9);
    v18 = *v16;
    v6 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v16 + 1);
    v17 = v18;
    v19 = &v13[-v18];
    v20 = v7 & 0xF;
LABEL_21:
    if (v20 == 15)
    {
      LODWORD(v24) = 0;
      do
      {
        v25 = *(unsigned __int8 *)v6;
        v6 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v6 + 1);
        v24 = (v24 + v25);
      }
      while (v25 == 255);
      v20 = v24 + 15;
    }
    if (v17 <= 7)
    {
      *(_DWORD *)v13 = 0;
      *v13 = *v19;
      v13[1] = v19[1];
      v13[2] = v19[2];
      v13[3] = v19[3];
      v32 = &v19[dword_20CA54A80[v17]];
      *((_DWORD *)v13 + 1) = *(_DWORD *)v32;
      v26 = &v32[-dword_20CA54AA0[v17]];
    }
    else
    {
      v27 = *(_QWORD *)v19;
      v26 = v19 + 8;
      *(_QWORD *)v13 = v27;
    }
    __dst = &v13[v20 + 4];
    v28 = v13 + 8;
    if (__dst > v4 - 12)
    {
      if (__dst > v4 - 5)
        return (~(_DWORD)v6 + v3);
      if (v28 < v5)
      {
        v33 = v13 + 8;
        v34 = (uint64_t *)v26;
        do
        {
          v35 = *v34++;
          *(_QWORD *)v33 = v35;
          v33 += 8;
        }
        while (v33 < v5);
        v26 += v5 - v28;
        v28 = (char *)(v4 - 7);
      }
      while (v28 < __dst)
      {
        v36 = *v26++;
        *v28++ = v36;
      }
    }
    else
    {
      *(_QWORD *)v28 = *(_QWORD *)v26;
      if (v20 >= 0xD)
      {
        v29 = v13 + 16;
        v30 = (uint64_t *)(v26 + 8);
        do
        {
          v31 = *v30++;
          *(_QWORD *)v29 = v31;
          v29 += 8;
        }
        while (v29 < __dst);
      }
    }
  }
  if (v13 != v4)
    return (~(_DWORD)v6 + v3);
  memmove(__dst, v6, v9);
  return ((_DWORD)v6 + v9 - v3);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_withPrefix64k(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3, int a4)
{
  uint64_t v4;
  unsigned __int16 *v5;
  const char *v6;
  int64_t v7;
  const char *v8;
  char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v13;
  char *v14;
  unint64_t v15;
  _OWORD *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int64_t v22;
  const char *v23;
  unsigned __int16 *v24;
  uint64_t v26;
  unint64_t v27;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  char *v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  const char *v47;
  uint64_t v48;
  char v49;

  if (!this)
    return 0xFFFFFFFFLL;
  if (!a4)
  {
    if ((_DWORD)a3 == 1)
    {
      if (*(_BYTE *)this)
        return 0xFFFFFFFFLL;
      else
        return 0;
    }
    return 0xFFFFFFFFLL;
  }
  if (!(_DWORD)a3)
    return 0xFFFFFFFFLL;
  v4 = 0;
  v5 = (unsigned __int16 *)((char *)this + (int)a3);
  v6 = &a2[a4];
  v7 = a4;
  v8 = v6 - 32;
  v9 = (char *)v5 - 15;
  v10 = v6 - 12;
  v11 = v6 - 7;
  v12 = v6 - 5;
  v13 = this;
  while (1)
  {
    while (1)
    {
      v14 = (char *)&a2[v4];
      v16 = (_OWORD *)((char *)v13 + 1);
      v15 = *(unsigned __int8 *)v13;
      v17 = v15 >> 4;
      if ((v15 >> 4) == 15)
        break;
      if (v16 >= (_OWORD *)v5 - 1 || v14 > v8)
      {
        v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 1);
        goto LABEL_12;
      }
      *(_OWORD *)v14 = *v16;
      v22 = v4 + v17;
      v31 = v15 & 0xF;
      v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v16 + v17 + 2);
      v27 = *(unsigned __int16 *)((char *)v16 + v17);
      v30 = v22 - v27;
      if ((v15 & 0xF) == 0xF || v27 < 8)
      {
        v28 = v13;
        goto LABEL_24;
      }
      v32 = (char *)&a2[v22];
      v33 = &a2[v30];
      *(_QWORD *)v32 = *(_QWORD *)v33;
      *((_QWORD *)v32 + 1) = *((_QWORD *)v33 + 1);
      *((_WORD *)v32 + 8) = *((_WORD *)v33 + 8);
      v4 = v31 + v22 + 4;
    }
    if (v16 >= (_OWORD *)v9)
    {
      LODWORD(v13) = (_DWORD)v13 + 1;
      return (~(_DWORD)v13 + (_DWORD)this);
    }
    LODWORD(v18) = 0;
    v19 = (uint64_t)v13 + 2;
    v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 1);
    do
    {
      v21 = *(unsigned __int8 *)v13;
      v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 1);
      v20 = v21;
      v18 = (v18 + v21);
      ++v19;
    }
    while (v13 < (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)v9 && v20 == 255);
    v17 = v18 + 15;
    if (__CFADD__(v14, v17) || v17 > -v19)
      return (~(_DWORD)v13 + (_DWORD)this);
LABEL_12:
    v22 = v17 + v4;
    v23 = &a2[v17 + v4];
    v24 = (unsigned __int16 *)((char *)v13 + v17);
    if (v23 > v10 || v24 > v5 - 4)
      break;
    do
    {
      v26 = *(_QWORD *)v13;
      v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v13 + 8);
      *(_QWORD *)v14 = v26;
      v14 += 8;
    }
    while (v14 < v23);
    v29 = *v24;
    v28 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v24 + 1);
    v27 = v29;
    v30 = v22 - v29;
    v31 = v15 & 0xF;
LABEL_24:
    v34 = (char *)&a2[v22];
    if (v31 == 15)
    {
      LODWORD(v35) = 0;
      while (1)
      {
        v13 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v28 + 1);
        if ((char *)v28 + 1 >= (char *)(v5 - 2))
          return (~(_DWORD)v13 + (_DWORD)this);
        v36 = *(unsigned __int8 *)v28;
        v35 = (v35 + v36);
        v28 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v28 + 1);
        if (v36 != 255)
        {
          v31 = v35 + 15;
          if (__CFADD__(v34, v31))
            return (~(_DWORD)v13 + (_DWORD)this);
          goto LABEL_32;
        }
      }
    }
    v13 = v28;
LABEL_32:
    if (v30 < -65536)
      return (~(_DWORD)v13 + (_DWORD)this);
    v37 = &a2[v30];
    if (v27 <= 7)
    {
      *(_DWORD *)v34 = 0;
      *v34 = *v37;
      v34[1] = v37[1];
      v34[2] = v37[2];
      v34[3] = v37[3];
      v45 = &v37[dword_20CA54A80[v27]];
      *((_DWORD *)v34 + 1) = *(_DWORD *)v45;
      v38 = &v45[-dword_20CA54AA0[v27]];
    }
    else
    {
      v39 = *(_QWORD *)v37;
      v38 = v37 + 8;
      *(_QWORD *)v34 = v39;
    }
    v4 = v22 + v31 + 4;
    v40 = &a2[v4];
    v41 = v34 + 8;
    if (&a2[v4] > v10)
    {
      if (v40 > v12)
        return (~(_DWORD)v13 + (_DWORD)this);
      if (v41 < v11)
      {
        v46 = v34 + 8;
        v47 = v38;
        do
        {
          v48 = *(_QWORD *)v47;
          v47 += 8;
          *(_QWORD *)v46 = v48;
          v46 += 8;
        }
        while (v46 < v11);
        v38 += v11 - v41;
        v41 = (char *)v11;
      }
      while (v41 < v40)
      {
        v49 = *v38++;
        *v41++ = v49;
      }
    }
    else
    {
      *(_QWORD *)v41 = *(_QWORD *)v38;
      if (v31 >= 0xD)
      {
        v42 = v34 + 16;
        v43 = (uint64_t *)(v38 + 8);
        do
        {
          v44 = *v43++;
          *(_QWORD *)v42 = v44;
          v42 += 8;
        }
        while (v42 < v40);
      }
    }
  }
  if (v24 != v5 || v22 > v7)
    return (~(_DWORD)v13 + (_DWORD)this);
  memmove(v14, v13, v17);
  return v22;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_forceExtDict(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *__dst, char *a3, int a4, uint64_t a5, unint64_t a6)
{
  char *v7;
  unsigned __int16 *v9;
  const char *v10;
  char *v11;
  const char *v12;
  unint64_t v13;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v14;
  char *v15;
  unint64_t v16;
  _OWORD *v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  char *v23;
  unsigned __int16 *v24;
  uint64_t v26;
  unint64_t v27;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v34;
  int v35;
  int64_t v36;
  char *v37;
  const char *v38;
  size_t v39;
  const char *v40;
  char v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;
  _DWORD *v48;
  char *v49;
  uint64_t *v50;
  uint64_t v51;
  char v52;
  const char *v55;
  const char *v56;
  unsigned __int16 *v57;
  int v58;
  char *v59;
  char *v60;
  const char *v61;
  char *v62;
  const char *v63;
  char *v64;

  if (!this)
    return 0xFFFFFFFFLL;
  v7 = (char *)(a5 + a6);
  if (!a5)
    v7 = 0;
  v60 = v7;
  if (!a4)
  {
    if ((_DWORD)a3 == 1)
    {
      if (*(_BYTE *)this)
        return 0xFFFFFFFFLL;
      else
        return 0;
    }
    return 0xFFFFFFFFLL;
  }
  if (!(_DWORD)a3)
    return 0xFFFFFFFFLL;
  v9 = (unsigned __int16 *)((char *)this + (int)a3);
  v10 = &__dst[a4];
  v63 = v10 - 32;
  v64 = (char *)(v9 - 8);
  v11 = (char *)v9 - 15;
  v12 = v10 - 12;
  v56 = v10;
  v57 = v9;
  v13 = (unint64_t)(v9 - 2);
  v55 = v10 - 7;
  v61 = v10 - 5;
  v62 = (char *)(v9 - 4);
  v58 = (int)this;
  v59 = (char *)v9 - 15;
  v14 = this;
  v15 = __dst;
  while (1)
  {
    v17 = (_OWORD *)((char *)v14 + 1);
    v16 = *(unsigned __int8 *)v14;
    v18 = v16 >> 4;
    if ((v16 >> 4) == 15)
      break;
    if (v17 >= (_OWORD *)v64 || v15 > v63)
    {
      v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v14 + 1);
      goto LABEL_14;
    }
    *(_OWORD *)v15 = *v17;
    v23 = &v15[v18];
    v31 = v16 & 0xF;
    v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v17 + v18 + 2);
    v27 = *(unsigned __int16 *)((char *)v17 + v18);
    v30 = (unint64_t)&v15[v18 - v27];
    if ((_DWORD)v31 != 15 && v27 >= 8 && v30 >= (unint64_t)__dst)
    {
      *(_QWORD *)v23 = *(_QWORD *)v30;
      *((_QWORD *)v23 + 1) = *(_QWORD *)(v30 + 8);
      *((_WORD *)v23 + 8) = *(_WORD *)(v30 + 16);
      v15 = &v23[v31 + 4];
    }
    else
    {
      v28 = v14;
LABEL_30:
      if (v31 == 15)
      {
        LODWORD(v34) = 0;
        while (1)
        {
          v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v28 + 1);
          if ((unint64_t)v28 + 1 >= v13)
            return (~(_DWORD)v14 + v58);
          v35 = *(unsigned __int8 *)v28;
          v34 = (v34 + v35);
          v28 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v28 + 1);
          if (v35 != 255)
          {
            v31 = v34 + 15;
            if (__CFADD__(v23, v31))
              return (~(_DWORD)v14 + v58);
            goto LABEL_38;
          }
        }
      }
      v14 = v28;
LABEL_38:
      if (!(a6 >> 16) && v30 + a6 < (unint64_t)__dst)
        return (~(_DWORD)v14 + v58);
      v36 = v31 + 4;
      v37 = &v23[v31 + 4];
      if (v30 >= (unint64_t)__dst)
      {
        if (v27 <= 7)
        {
          *(_DWORD *)v23 = 0;
          *v23 = *(_BYTE *)v30;
          v23[1] = *(_BYTE *)(v30 + 1);
          v23[2] = *(_BYTE *)(v30 + 2);
          v23[3] = *(_BYTE *)(v30 + 3);
          v48 = (_DWORD *)(v30 + dword_20CA54A80[v27]);
          *((_DWORD *)v23 + 1) = *v48;
          v42 = (char *)v48 - dword_20CA54AA0[v27];
        }
        else
        {
          v43 = *(_QWORD *)v30;
          v42 = (char *)(v30 + 8);
          *(_QWORD *)v23 = v43;
        }
        v44 = v23 + 8;
        if (v37 > v12)
        {
          if (v37 > v61)
            return (~(_DWORD)v14 + v58);
          if (v44 < (_QWORD *)v55)
          {
            v49 = v23 + 8;
            v50 = (uint64_t *)v42;
            do
            {
              v51 = *v50++;
              *(_QWORD *)v49 = v51;
              v49 += 8;
            }
            while (v49 < v55);
            v42 += v55 - (const char *)v44;
            v44 = v55;
          }
          v15 = v37;
          if (v44 < (_QWORD *)v37)
          {
            do
            {
              v52 = *v42++;
              *(_BYTE *)v44 = v52;
              v44 = (_QWORD *)((char *)v44 + 1);
            }
            while (v44 < (_QWORD *)v37);
LABEL_54:
            v15 = v37;
          }
        }
        else
        {
          *v44 = *(_QWORD *)v42;
          v15 = &v23[v31 + 4];
          if (v31 >= 0xD)
          {
            v45 = v23 + 16;
            v46 = (uint64_t *)(v42 + 8);
            do
            {
              v47 = *v46++;
              *(_QWORD *)v45 = v47;
              v45 += 8;
            }
            while (v45 < v37);
            goto LABEL_54;
          }
        }
      }
      else
      {
        if (v37 > v61)
          return (~(_DWORD)v14 + v58);
        v38 = &__dst[-v30];
        v39 = v36 - (_QWORD)&__dst[-v30];
        if (v36 <= (unint64_t)&__dst[-v30])
        {
          memmove(v23, (const void *)(v60 - v38), v36);
          goto LABEL_58;
        }
        memcpy(v23, (const void *)(v60 - v38), (size_t)v38);
        v15 = (char *)&v38[(_QWORD)v23];
        if (v39 <= &v38[(_QWORD)v23] - (const char *)__dst)
        {
          memcpy(v15, __dst, v39);
LABEL_58:
          v15 = v37;
          v11 = v59;
        }
        else
        {
          v11 = v59;
          if ((uint64_t)v36 > (uint64_t)v38)
          {
            v40 = __dst;
            do
            {
              v41 = *v40++;
              *v15++ = v41;
            }
            while (v15 < v37);
          }
        }
      }
    }
  }
  if (v17 >= (_OWORD *)v11)
  {
    LODWORD(v14) = (_DWORD)v14 + 1;
    return (~(_DWORD)v14 + v58);
  }
  LODWORD(v19) = 0;
  v20 = (uint64_t)v14 + 2;
  v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v14 + 1);
  do
  {
    v22 = *(unsigned __int8 *)v14;
    v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v14 + 1);
    v21 = v22;
    v19 = (v19 + v22);
    ++v20;
  }
  while (v14 < (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)v11 && v21 == 255);
  v18 = v19 + 15;
  if (__CFADD__(v15, v19 + 15) || v18 > -v20)
    return (~(_DWORD)v14 + v58);
LABEL_14:
  v23 = &v15[v18];
  v24 = (unsigned __int16 *)((char *)v14 + v18);
  if (&v15[v18] <= v12 && v24 <= (unsigned __int16 *)v62)
  {
    do
    {
      v26 = *(_QWORD *)v14;
      v14 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v14 + 8);
      *(_QWORD *)v15 = v26;
      v15 += 8;
    }
    while (v15 < v23);
    v29 = *v24;
    v28 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v24 + 1);
    v27 = v29;
    v30 = (unint64_t)&v23[-v29];
    v31 = v16 & 0xF;
    goto LABEL_30;
  }
  if (v24 == v57 && v23 <= v56)
  {
    memmove(v15, v14, v18);
    return ((_DWORD)v23 - (_DWORD)__dst);
  }
  return (~(_DWORD)v14 + v58);
}

void *pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_createStreamDecode(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  return calloc(1uLL, 0x20uLL);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_freeStreamDecode(void *a1)
{
  if (a1)
    free(a1);
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_setStreamDecode(_QWORD *a1, uint64_t a2, int a3)
{
  a1[2] = a2 + a3;
  a1[3] = a3;
  *a1 = 0;
  a1[1] = 0;
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decoderRingBufferSize(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  int v1;
  unsigned int v2;

  if ((int)this <= 16)
    v1 = 16;
  else
    v1 = (int)this;
  v2 = v1 + 65550;
  if (this <= 0x7E000000)
    return v2;
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_continue(uint64_t *a1, pxrInternal__aapl__pxrReserved__::pxr_lz4 *a2, char *__dst, char *a4, int a5)
{
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int16 *v15;
  char *v16;
  char *v17;
  unint64_t v18;
  char *v19;
  unint64_t v20;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v21;
  _OWORD *v22;
  unint64_t v23;
  _OWORD *v24;
  size_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  _QWORD *v30;
  unsigned __int16 *v31;
  uint64_t v33;
  unint64_t v34;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v35;
  unsigned int v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v41;
  int v42;
  size_t v43;
  char *v44;
  unint64_t v45;
  int64_t v46;
  size_t v47;
  char *v48;
  char v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  _DWORD *v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  char v60;
  char *v62;
  int v63;
  char *v64;
  unsigned __int16 *v65;
  int v66;
  char *v68;
  unint64_t v69;
  char *v70;
  unint64_t v71;
  char *v72;
  unint64_t v73;

  v6 = a1;
  v7 = a1[3];
  if (!v7)
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe(a2, __dst, a4, a5);
LABEL_5:
    if ((int)result >= 1)
    {
      v11 = result;
      v12 = &__dst[result];
      goto LABEL_89;
    }
    return result;
  }
  v8 = (char *)a1[2];
  if (v8 != __dst)
  {
    v9 = (uint64_t)&v8[-v7];
    *a1 = v9;
    a1[1] = v7;
    result = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_forceExtDict(a2, __dst, a4, a5, v9, v7);
    goto LABEL_5;
  }
  if (v7 >= 0xFFFF)
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_withPrefix64k(a2, __dst, a4, a5);
    goto LABEL_87;
  }
  v13 = a1[1];
  if (!v13)
  {
    result = sub_20BEB0B80((unsigned __int8 *)a2, __dst, (int)a4, a5, v7);
    goto LABEL_87;
  }
  if (!a2)
    return 0xFFFFFFFFLL;
  if (*a1)
    v14 = *a1 + v13;
  else
    v14 = 0;
  v69 = v14;
  if (!a5)
  {
    if ((_DWORD)a4 == 1)
    {
      if (*(_BYTE *)a2)
        return 0xFFFFFFFFLL;
      else
        return 0;
    }
    return 0xFFFFFFFFLL;
  }
  if (!(_DWORD)a4)
    return 0xFFFFFFFFLL;
  v15 = (unsigned __int16 *)((char *)a2 + (int)a4);
  v16 = &__dst[a5];
  v17 = &__dst[-v7];
  v72 = v16 - 32;
  v73 = (unint64_t)(v15 - 8);
  v18 = (unint64_t)v15 - 15;
  v19 = v16 - 12;
  v64 = v16;
  v65 = v15;
  v20 = (unint64_t)(v15 - 2);
  v62 = v16 - 7;
  v63 = (int)__dst;
  v70 = v16 - 5;
  v71 = (unint64_t)(v15 - 4);
  v66 = (int)a2;
  v21 = a2;
  v22 = __dst;
  v68 = v16 - 12;
  while (1)
  {
    v24 = (_OWORD *)((char *)v21 + 1);
    v23 = *(unsigned __int8 *)v21;
    v25 = v23 >> 4;
    if ((v23 >> 4) == 15)
      break;
    if ((unint64_t)v24 >= v73 || v22 > (_OWORD *)v72)
    {
      v21 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v21 + 1);
      goto LABEL_24;
    }
    *v22 = *v24;
    v30 = (_QWORD *)((char *)v22 + v25);
    v38 = v23 & 0xF;
    v21 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v24 + v25 + 2);
    v34 = *(unsigned __int16 *)((char *)v24 + v25);
    v37 = (unint64_t)v22 + v25 - v34;
    if ((_DWORD)v38 != 15 && v34 >= 8 && v37 >= (unint64_t)v17)
    {
      *v30 = *(_QWORD *)v37;
      v30[1] = *(_QWORD *)(v37 + 8);
      *((_WORD *)v30 + 8) = *(_WORD *)(v37 + 16);
      v22 = (_OWORD *)((char *)v30 + v38 + 4);
    }
    else
    {
      v35 = v21;
LABEL_40:
      if (v38 == 15)
      {
        LODWORD(v41) = 0;
        while (1)
        {
          v21 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v35 + 1);
          if ((unint64_t)v35 + 1 >= v20)
            goto LABEL_85;
          v42 = *(unsigned __int8 *)v35;
          v41 = (v41 + v42);
          v35 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v35 + 1);
          if (v42 != 255)
          {
            v38 = v41 + 15;
            if (__CFADD__(v30, v38))
              goto LABEL_85;
            goto LABEL_48;
          }
        }
      }
      v21 = v35;
LABEL_48:
      if (!(v13 >> 16) && v37 + v13 < (unint64_t)v17)
        goto LABEL_85;
      v43 = v38 + 4;
      v44 = (char *)v30 + v38 + 4;
      if (v37 >= (unint64_t)v17)
      {
        if (v34 <= 7)
        {
          *(_DWORD *)v30 = 0;
          *(_BYTE *)v30 = *(_BYTE *)v37;
          *((_BYTE *)v30 + 1) = *(_BYTE *)(v37 + 1);
          *((_BYTE *)v30 + 2) = *(_BYTE *)(v37 + 2);
          *((_BYTE *)v30 + 3) = *(_BYTE *)(v37 + 3);
          v56 = (_DWORD *)(v37 + dword_20CA54A80[v34]);
          *((_DWORD *)v30 + 1) = *v56;
          v50 = (char *)v56 - dword_20CA54AA0[v34];
        }
        else
        {
          v51 = *(_QWORD *)v37;
          v50 = (char *)(v37 + 8);
          *v30 = v51;
        }
        v52 = v30 + 1;
        if (v44 > v19)
        {
          if (v44 > v70)
            goto LABEL_85;
          if (v52 < (_QWORD *)v62)
          {
            v57 = (char *)(v30 + 1);
            v58 = (uint64_t *)v50;
            do
            {
              v59 = *v58++;
              *(_QWORD *)v57 = v59;
              v57 += 8;
            }
            while (v57 < v62);
            v50 += v62 - (char *)v52;
            v52 = v62;
          }
          v22 = v44;
          if (v52 < (_QWORD *)v44)
          {
            do
            {
              v60 = *v50++;
              *(_BYTE *)v52 = v60;
              v52 = (_QWORD *)((char *)v52 + 1);
            }
            while (v52 < (_QWORD *)v44);
LABEL_64:
            v22 = v44;
          }
        }
        else
        {
          *v52 = *(_QWORD *)v50;
          v22 = (_OWORD *)((char *)v30 + v38 + 4);
          if (v38 >= 0xD)
          {
            v53 = (char *)(v30 + 2);
            v54 = (uint64_t *)(v50 + 8);
            do
            {
              v55 = *v54++;
              *(_QWORD *)v53 = v55;
              v53 += 8;
            }
            while (v53 < v44);
            goto LABEL_64;
          }
        }
      }
      else
      {
        if (v44 > v70)
          goto LABEL_85;
        v45 = v13;
        v46 = (int64_t)&v17[-v37];
        v47 = v43 - (_QWORD)&v17[-v37];
        if (v43 <= (unint64_t)&v17[-v37])
        {
          memmove(v30, (const void *)(v69 - v46), v43);
          goto LABEL_68;
        }
        memcpy(v30, (const void *)(v69 - v46), v46);
        v22 = (_OWORD *)((char *)v30 + v46);
        if (v47 <= (char *)v30 + v46 - v17)
        {
          memcpy(v22, v17, v47);
LABEL_68:
          v22 = v44;
          v13 = v45;
          v19 = v68;
        }
        else
        {
          v13 = v45;
          v19 = v68;
          if ((uint64_t)v43 > v46)
          {
            v48 = v17;
            do
            {
              v49 = *v48++;
              *(_BYTE *)v22 = v49;
              v22 = (_OWORD *)((char *)v22 + 1);
            }
            while (v22 < (_OWORD *)v44);
          }
        }
      }
    }
  }
  if ((unint64_t)v24 >= v18)
  {
    LODWORD(v21) = (_DWORD)v21 + 1;
    goto LABEL_85;
  }
  LODWORD(v26) = 0;
  v27 = (uint64_t)v21 + 2;
  v21 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v21 + 1);
  do
  {
    v29 = *(unsigned __int8 *)v21;
    v21 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v21 + 1);
    v28 = v29;
    v26 = (v26 + v29);
    ++v27;
  }
  while ((unint64_t)v21 < v18 && v28 == 255);
  v25 = v26 + 15;
  if (__CFADD__(v22, v26 + 15) || v25 > -v27)
    goto LABEL_85;
LABEL_24:
  v30 = (_QWORD *)((char *)v22 + v25);
  v31 = (unsigned __int16 *)((char *)v21 + v25);
  if ((char *)v22 + v25 <= v19 && (unint64_t)v31 <= v71)
  {
    do
    {
      v33 = *(_QWORD *)v21;
      v21 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v21 + 8);
      *(_QWORD *)v22 = v33;
      v22 = (_OWORD *)((char *)v22 + 8);
    }
    while (v22 < (_OWORD *)v30);
    v36 = *v31;
    v35 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v31 + 1);
    v34 = v36;
    v37 = (unint64_t)v30 - v36;
    v38 = v23 & 0xF;
    goto LABEL_40;
  }
  if (v31 == v65 && v30 <= (_QWORD *)v64)
  {
    memmove(v22, v21, v25);
    result = ((_DWORD)v30 - v63);
    goto LABEL_86;
  }
LABEL_85:
  result = (~(_DWORD)v21 + v66);
LABEL_86:
  v6 = a1;
LABEL_87:
  if ((int)result >= 1)
  {
    v11 = v6[3] + result;
    v12 = (char *)(v6[2] + result);
LABEL_89:
    v6[2] = (uint64_t)v12;
    v6[3] = v11;
  }
  return result;
}

uint64_t sub_20BEB0B80(unsigned __int8 *a1, char *__dst, int a3, int a4, uint64_t a5)
{
  unsigned __int16 *v6;
  char *v7;
  char *v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unsigned __int8 *v12;
  char *v13;
  unint64_t v14;
  _OWORD *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  char *v21;
  unsigned __int16 *v22;
  uint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v32;
  int v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  _DWORD *v40;
  char *v41;
  uint64_t *v42;
  uint64_t v43;
  char v44;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (!a4)
  {
    if (a3 == 1)
    {
      if (*a1)
        return 0xFFFFFFFFLL;
      else
        return 0;
    }
    return 0xFFFFFFFFLL;
  }
  if (!a3)
    return 0xFFFFFFFFLL;
  v6 = (unsigned __int16 *)&a1[a3];
  v7 = &__dst[a4];
  v8 = &__dst[-a5];
  v9 = (unint64_t)v6 - 15;
  v10 = v7 - 12;
  v11 = v7 - 7;
  v12 = a1;
  v13 = __dst;
  while (1)
  {
    while (1)
    {
      v15 = v12 + 1;
      v14 = *v12;
      v16 = v14 >> 4;
      if ((v14 >> 4) == 15)
        break;
      if (v15 >= (_OWORD *)v6 - 1 || v13 > v7 - 32)
      {
        ++v12;
        goto LABEL_12;
      }
      *(_OWORD *)v13 = *v15;
      v21 = &v13[v16];
      v29 = v14 & 0xF;
      v12 = (unsigned __int8 *)v15 + v16 + 2;
      v25 = *(unsigned __int16 *)((char *)v15 + v16);
      v28 = (unint64_t)&v21[-v25];
      if ((_DWORD)v29 == 15 || v25 < 8 || v28 < (unint64_t)v8)
      {
        v26 = v12;
        goto LABEL_28;
      }
      *(_QWORD *)v21 = *(_QWORD *)v28;
      *((_QWORD *)v21 + 1) = *(_QWORD *)(v28 + 8);
      *((_WORD *)v21 + 8) = *(_WORD *)(v28 + 16);
      v13 = &v21[v29 + 4];
    }
    if ((unint64_t)v15 >= v9)
    {
      LODWORD(v12) = (_DWORD)v12 + 1;
      return (~(_DWORD)v12 + (_DWORD)a1);
    }
    LODWORD(v17) = 0;
    v18 = (uint64_t)(v12 + 2);
    ++v12;
    do
    {
      v20 = *v12++;
      v19 = v20;
      v17 = (v17 + v20);
      ++v18;
    }
    while ((unint64_t)v12 < v9 && v19 == 255);
    v16 = v17 + 15;
    if (__CFADD__(v13, v16) || v16 > -v18)
      return (~(_DWORD)v12 + (_DWORD)a1);
LABEL_12:
    v21 = &v13[v16];
    v22 = (unsigned __int16 *)&v12[v16];
    if (&v13[v16] > v10 || v22 > v6 - 4)
      break;
    do
    {
      v24 = *(_QWORD *)v12;
      v12 += 8;
      *(_QWORD *)v13 = v24;
      v13 += 8;
    }
    while (v13 < v21);
    v27 = *v22;
    v26 = (unsigned __int8 *)(v22 + 1);
    v25 = v27;
    v28 = (unint64_t)&v21[-v27];
    v29 = v14 & 0xF;
LABEL_28:
    if (v29 == 15)
    {
      LODWORD(v32) = 0;
      while (1)
      {
        v12 = v26 + 1;
        if (v26 + 1 >= (unsigned __int8 *)v6 - 4)
          return (~(_DWORD)v12 + (_DWORD)a1);
        v33 = *v26;
        v32 = (v32 + v33);
        ++v26;
        if (v33 != 255)
        {
          v29 = v32 + 15;
          if (__CFADD__(v21, v29))
            return (~(_DWORD)v12 + (_DWORD)a1);
          goto LABEL_36;
        }
      }
    }
    v12 = v26;
LABEL_36:
    if (v28 < (unint64_t)v8)
      return (~(_DWORD)v12 + (_DWORD)a1);
    if (v25 <= 7)
    {
      *(_DWORD *)v21 = 0;
      *v21 = *(_BYTE *)v28;
      v21[1] = *(_BYTE *)(v28 + 1);
      v21[2] = *(_BYTE *)(v28 + 2);
      v21[3] = *(_BYTE *)(v28 + 3);
      v40 = (_DWORD *)(v28 + dword_20CA54A80[v25]);
      *((_DWORD *)v21 + 1) = *v40;
      v34 = (char *)v40 - dword_20CA54AA0[v25];
    }
    else
    {
      v35 = *(_QWORD *)v28;
      v34 = (char *)(v28 + 8);
      *(_QWORD *)v21 = v35;
    }
    v13 = &v21[v29 + 4];
    v36 = v21 + 8;
    if (v13 > v10)
    {
      if (v13 > v7 - 5)
        return (~(_DWORD)v12 + (_DWORD)a1);
      if (v36 < v11)
      {
        v41 = v21 + 8;
        v42 = (uint64_t *)v34;
        do
        {
          v43 = *v42++;
          *(_QWORD *)v41 = v43;
          v41 += 8;
        }
        while (v41 < v11);
        v34 += v11 - v36;
        v36 = v7 - 7;
      }
      while (v36 < v13)
      {
        v44 = *v34++;
        *v36++ = v44;
      }
    }
    else
    {
      *(_QWORD *)v36 = *(_QWORD *)v34;
      if (v29 >= 0xD)
      {
        v37 = v21 + 16;
        v38 = (uint64_t *)(v34 + 8);
        do
        {
          v39 = *v38++;
          *(_QWORD *)v37 = v39;
          v37 += 8;
        }
        while (v37 < v13);
      }
    }
  }
  if (v22 == v6 && v21 <= v7)
  {
    memmove(v13, v12, v16);
    return ((_DWORD)v21 - (_DWORD)__dst);
  }
  return (~(_DWORD)v12 + (_DWORD)a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_fast_continue(_QWORD *a1, pxrInternal__aapl__pxrReserved__::pxr_lz4 *__src, char *__dst, char *a4)
{
  int v4;
  _QWORD *v5;
  unint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v16;
  char v17;
  unsigned int v18;
  size_t v19;
  uint64_t v21;
  int v22;
  _QWORD *v23;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v24;
  uint64_t v25;
  unsigned __int16 *v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  unsigned int v32;
  uint64_t v35;
  int v36;
  size_t v37;
  char *v38;
  int64_t v39;
  size_t v40;
  char *v41;
  char v42;
  char *v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  _DWORD *v49;
  char *v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char *v55;
  char *v56;
  int v57;
  int v58;
  uint64_t v59;
  char *v60;
  char *v61;
  char *v62;

  v4 = (int)a4;
  v5 = __dst;
  v7 = a1[3];
  if (!v7)
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_fast(__src, __dst, a4);
    if ((int)result < 1)
      return result;
    v10 = v4;
LABEL_7:
    a1[2] = (char *)v5 + v4;
    a1[3] = v10;
    return result;
  }
  v8 = (char *)a1[2];
  if (v8 != __dst)
  {
    *a1 = &v8[-v7];
    a1[1] = v7;
    result = sub_20BEB1270((unsigned __int8 *)__src, __dst, (int)a4, (uint64_t)&v8[-v7], v7);
    if ((int)result < 1)
      return result;
    v10 = v4;
    goto LABEL_7;
  }
  if (v7 > 0xFFFE || (v11 = a1[1]) == 0)
  {
    result = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_fast(__src, __dst, a4);
    goto LABEL_68;
  }
  if (!__src)
    return 0xFFFFFFFFLL;
  v12 = *a1 + v11;
  if (!*a1)
    v12 = 0;
  v59 = v12;
  if ((_DWORD)a4)
  {
    v57 = (int)__src;
    v58 = (int)a4;
    v13 = &__dst[(int)a4];
    v14 = &__dst[-v7];
    v15 = v13 - 26;
    v60 = v13 - 12;
    v55 = v13 - 7;
    v56 = v13;
    v61 = v13 - 5;
    v62 = v13 - 8;
    v16 = __src;
    while (1)
    {
      v18 = *(unsigned __int8 *)v16;
      v16 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v16 + 1);
      v17 = v18;
      v19 = (unint64_t)v18 >> 4;
      if (v18 > 0x8FuLL || v5 > (_QWORD *)v15)
        break;
      *v5 = *(_QWORD *)v16;
      v23 = (_QWORD *)((char *)v5 + v19);
      v31 = (unsigned __int16 *)((char *)v16 + v19);
      v30 = v17 & 0xF;
      v32 = *v31;
      v16 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v31 + 1);
      v27 = v32;
      v29 = (unint64_t)v5 + v19 - v32;
      if ((_DWORD)v30 != 15 && v27 >= 8 && v29 >= (unint64_t)v14)
      {
        *v23 = *(_QWORD *)v29;
        v23[1] = *(_QWORD *)(v29 + 8);
        *((_WORD *)v23 + 8) = *(_WORD *)(v29 + 16);
        v5 = (_QWORD *)((char *)v23 + v30 + 4);
      }
      else
      {
LABEL_35:
        if (v30 == 15)
        {
          LODWORD(v35) = 0;
          do
          {
            v36 = *(unsigned __int8 *)v16;
            v16 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v16 + 1);
            v35 = (v35 + v36);
          }
          while (v36 == 255);
          v30 = v35 + 15;
        }
        v37 = v30 + 4;
        v38 = (char *)v23 + v30 + 4;
        if (v29 >= (unint64_t)v14)
        {
          if (v27 <= 7)
          {
            *(_DWORD *)v23 = 0;
            *(_BYTE *)v23 = *(_BYTE *)v29;
            *((_BYTE *)v23 + 1) = *(_BYTE *)(v29 + 1);
            *((_BYTE *)v23 + 2) = *(_BYTE *)(v29 + 2);
            *((_BYTE *)v23 + 3) = *(_BYTE *)(v29 + 3);
            v49 = (_DWORD *)(v29 + dword_20CA54A80[v27]);
            *((_DWORD *)v23 + 1) = *v49;
            v43 = (char *)v49 - dword_20CA54AA0[v27];
          }
          else
          {
            v44 = *(_QWORD *)v29;
            v43 = (char *)(v29 + 8);
            *v23 = v44;
          }
          v45 = v23 + 1;
          if (v38 > v60)
          {
            if (v38 > v61)
              goto LABEL_73;
            if (v45 < (_QWORD *)v55)
            {
              v50 = (char *)(v23 + 1);
              v51 = (uint64_t *)v43;
              do
              {
                v52 = *v51++;
                *(_QWORD *)v50 = v52;
                v50 += 8;
              }
              while (v50 < v55);
              v43 += v55 - (char *)v45;
              v45 = v55;
            }
            v5 = v38;
            if (v45 < (_QWORD *)v38)
            {
              do
              {
                v53 = *v43++;
                *(_BYTE *)v45 = v53;
                v45 = (_QWORD *)((char *)v45 + 1);
              }
              while (v45 < (_QWORD *)v38);
LABEL_57:
              v5 = v38;
            }
          }
          else
          {
            *v45 = *(_QWORD *)v43;
            v5 = (_QWORD *)((char *)v23 + v30 + 4);
            if (v30 >= 0xD)
            {
              v46 = (char *)(v23 + 2);
              v47 = (uint64_t *)(v43 + 8);
              do
              {
                v48 = *v47++;
                *(_QWORD *)v46 = v48;
                v46 += 8;
              }
              while (v46 < v38);
              goto LABEL_57;
            }
          }
        }
        else
        {
          if (v38 > v61)
            goto LABEL_73;
          v39 = (int64_t)&v14[-v29];
          v40 = v37 - (_QWORD)&v14[-v29];
          if (v37 <= (unint64_t)&v14[-v29])
          {
            memmove(v23, (const void *)(v59 - v39), v37);
            goto LABEL_57;
          }
          memcpy(v23, (const void *)(v59 - v39), v39);
          v5 = (_QWORD *)((char *)v23 + v39);
          if (v40 <= (char *)v23 + v39 - v14)
          {
            memcpy((char *)v23 + v39, v14, v40);
            goto LABEL_57;
          }
          if ((uint64_t)v37 > v39)
          {
            v41 = v14;
            do
            {
              v42 = *v41++;
              *(_BYTE *)v5 = v42;
              v5 = (_QWORD *)((char *)v5 + 1);
            }
            while (v5 < (_QWORD *)v38);
          }
        }
      }
    }
    if ((_DWORD)v19 == 15)
    {
      LODWORD(v21) = 0;
      do
      {
        v22 = *(unsigned __int8 *)v16;
        v16 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v16 + 1);
        v21 = (v21 + v22);
      }
      while (v22 == 255);
      v19 = v21 + 15;
    }
    v23 = (_QWORD *)((char *)v5 + v19);
    if ((char *)v5 + v19 > v62)
    {
      if (v23 != (_QWORD *)v56)
      {
LABEL_73:
        v4 = v58;
        result = (~(_DWORD)v16 + v57);
        goto LABEL_68;
      }
      memmove(v5, v16, v19);
      v4 = v58;
      result = ((_DWORD)v16 + v19 - v57);
LABEL_68:
      if ((int)result >= 1)
      {
        v5 = (_QWORD *)a1[2];
        v7 = a1[3];
        v54 = v4;
        goto LABEL_70;
      }
      return result;
    }
    v24 = v16;
    do
    {
      v25 = *(_QWORD *)v24;
      v24 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)((char *)v24 + 8);
      *v5++ = v25;
    }
    while (v5 < v23);
    v26 = (unsigned __int16 *)((char *)v16 + v19);
    v28 = *v26;
    v16 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v26 + 1);
    v27 = v28;
    v29 = (unint64_t)v23 - v28;
    v30 = v17 & 0xF;
    goto LABEL_35;
  }
  if (*(_BYTE *)__src)
    return 0xFFFFFFFFLL;
  v54 = 0;
  result = 1;
LABEL_70:
  a1[2] = (char *)v5 + v54;
  a1[3] = v7 + v54;
  return result;
}

uint64_t sub_20BEB1270(unsigned __int8 *__src, char *__dst, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  unsigned __int8 *v11;
  char *v12;
  char v13;
  unsigned int v14;
  size_t v15;
  uint64_t v17;
  int v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unint64_t v23;
  unsigned int v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  unsigned int v28;
  uint64_t v31;
  int v32;
  char *v33;
  char *v34;
  char *v35;
  size_t v36;
  char *v37;
  char v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  _DWORD *v45;
  char *v46;
  uint64_t *v47;
  uint64_t v48;
  char v49;
  char *v51;
  char *v52;
  int v53;
  uint64_t v54;
  char *v55;

  if (!__src)
    return 0xFFFFFFFFLL;
  v5 = a4 + a5;
  if (!a4)
    v5 = 0;
  v54 = v5;
  if (!a3)
  {
    if (*__src)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  v7 = &__dst[a3];
  v8 = v7 - 8;
  v9 = v7 - 26;
  v55 = v7 - 12;
  v51 = v7 - 7;
  v52 = v7;
  v10 = v7 - 5;
  v53 = (int)__src;
  v11 = __src;
  v12 = __dst;
  while (1)
  {
    while (1)
    {
      v14 = *v11++;
      v13 = v14;
      v15 = (unint64_t)v14 >> 4;
      if (v14 > 0x8FuLL || v12 > v9)
        break;
      *(_QWORD *)v12 = *(_QWORD *)v11;
      v19 = &v12[v15];
      v27 = &v11[v15];
      v26 = v13 & 0xF;
      v28 = *(unsigned __int16 *)v27;
      v11 = v27 + 2;
      v23 = v28;
      v25 = (unint64_t)&v12[v15 - v28];
      if ((_DWORD)v26 == 15 || v23 < 8 || v25 < (unint64_t)__dst)
        goto LABEL_26;
      *(_QWORD *)v19 = *(_QWORD *)v25;
      *((_QWORD *)v19 + 1) = *(_QWORD *)(v25 + 8);
      *((_WORD *)v19 + 8) = *(_WORD *)(v25 + 16);
      v12 = &v19[v26 + 4];
    }
    if ((_DWORD)v15 == 15)
    {
      LODWORD(v17) = 0;
      do
      {
        v18 = *v11++;
        v17 = (v17 + v18);
      }
      while (v18 == 255);
      v15 = v17 + 15;
    }
    v19 = &v12[v15];
    if (&v12[v15] > v8)
      break;
    v20 = (uint64_t *)v11;
    do
    {
      v21 = *v20++;
      *(_QWORD *)v12 = v21;
      v12 += 8;
    }
    while (v12 < v19);
    v22 = &v11[v15];
    v24 = *(unsigned __int16 *)v22;
    v11 = v22 + 2;
    v23 = v24;
    v25 = (unint64_t)&v19[-v24];
    v26 = v13 & 0xF;
LABEL_26:
    if (v26 == 15)
    {
      LODWORD(v31) = 0;
      do
      {
        v32 = *v11++;
        v31 = (v31 + v32);
      }
      while (v32 == 255);
      v26 = v31 + 15;
    }
    v33 = (char *)(v26 + 4);
    v34 = &v19[v26 + 4];
    if (v25 >= (unint64_t)__dst)
    {
      if (v23 <= 7)
      {
        *(_DWORD *)v19 = 0;
        *v19 = *(_BYTE *)v25;
        v19[1] = *(_BYTE *)(v25 + 1);
        v19[2] = *(_BYTE *)(v25 + 2);
        v19[3] = *(_BYTE *)(v25 + 3);
        v45 = (_DWORD *)(v25 + dword_20CA54A80[v23]);
        *((_DWORD *)v19 + 1) = *v45;
        v39 = (char *)v45 - dword_20CA54AA0[v23];
      }
      else
      {
        v40 = *(_QWORD *)v25;
        v39 = (char *)(v25 + 8);
        *(_QWORD *)v19 = v40;
      }
      v41 = v19 + 8;
      if (v34 > v55)
      {
        if (v34 > v10)
          return (~(_DWORD)v11 + v53);
        if (v41 < v51)
        {
          v46 = v19 + 8;
          v47 = (uint64_t *)v39;
          do
          {
            v48 = *v47++;
            *(_QWORD *)v46 = v48;
            v46 += 8;
          }
          while (v46 < v51);
          v39 += v51 - v41;
          v41 = v51;
        }
        v12 = v34;
        if (v41 < v34)
        {
          do
          {
            v49 = *v39++;
            *v41++ = v49;
          }
          while (v41 < v34);
LABEL_48:
          v12 = v34;
        }
      }
      else
      {
        *(_QWORD *)v41 = *(_QWORD *)v39;
        v12 = &v19[v26 + 4];
        if (v26 >= 0xD)
        {
          v42 = v19 + 16;
          v43 = (uint64_t *)(v39 + 8);
          do
          {
            v44 = *v43++;
            *(_QWORD *)v42 = v44;
            v42 += 8;
          }
          while (v42 < v34);
          goto LABEL_48;
        }
      }
    }
    else
    {
      if (v34 > v10)
        return (~(_DWORD)v11 + v53);
      v35 = &__dst[-v25];
      v36 = v33 - &__dst[-v25];
      if (v33 <= &__dst[-v25])
      {
        memmove(v19, (const void *)(v54 - (_QWORD)v35), v26 + 4);
        goto LABEL_48;
      }
      memcpy(v19, (const void *)(v54 - (_QWORD)v35), (size_t)v35);
      v12 = &v35[(_QWORD)v19];
      if (v36 <= &v35[(_QWORD)v19] - __dst)
      {
        memcpy(v12, __dst, v36);
        goto LABEL_48;
      }
      if ((uint64_t)v33 > (uint64_t)v35)
      {
        v37 = __dst;
        do
        {
          v38 = *v37++;
          *v12++ = v38;
        }
        while (v12 < v34);
      }
    }
  }
  if (v19 != v52)
    return (~(_DWORD)v11 + v53);
  memmove(v12, v11, v15);
  return ((_DWORD)v11 + v15 - v53);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_usingDict(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *a2, char *a3, int a4, uint64_t a5, const char *a6)
{
  if (!(_DWORD)a6)
    return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe(this, a2, a3, a4);
  if ((char *)(a5 + (int)a6) != a2)
    return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_forceExtDict(this, a2, a3, a4, a5, (int)a6);
  if ((int)a6 < 0xFFFF)
    return sub_20BEB0B80((unsigned __int8 *)this, a2, (int)a3, a4, (int)a6);
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe_withPrefix64k(this, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_fast_usingDict(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *a2, char *a3, uint64_t a4, const char *a5)
{
  if (!(_DWORD)a5 || (char *)(a4 + (int)a5) == a2)
    return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_fast(this, a2, a3);
  else
    return sub_20BEB1270((unsigned __int8 *)this, a2, (int)a3, a4, (int)a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_limitedOutput(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3)
{
  char *v3;
  char *v4;
  char *v5;
  signed int v6;
  uint64_t v8;

  v3 = (char *)MEMORY[0x24BDAC7A8](this, a2, a3);
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)&v8, v3, v4, v5, v6, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, const char *a2, char *a3)
{
  char *v3;
  char *v4;
  char *v5;
  signed int v6;
  uint64_t v8;

  v3 = (char *)MEMORY[0x24BDAC7A8](this, a2, a3);
  if (v5 <= 0x7E000000)
    v6 = (_DWORD)v5 + v5 / 0xFF + 16;
  else
    v6 = 0;
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)&v8, v3, v4, v5, v6, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_limitedOutput_withState(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *a2, char *a3, char *a4, signed int a5)
{
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState(this, a2, a3, a4, a5, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_withState(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *a2, char *a3, char *a4)
{
  signed int v4;

  if (a4 <= 0x7E000000)
    v4 = (_DWORD)a4 + a4 / 0xFF + 16;
  else
    v4 = 0;
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_extState(this, a2, a3, a4, v4, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_limitedOutput_continue(uint64_t a1, char *a2, _BYTE *a3, int a4, int a5)
{
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_continue(a1, a2, a3, a4, a5, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_continue(uint64_t a1, char *a2, _BYTE *a3, unsigned int a4)
{
  int v4;

  if (a4 <= 0x7E000000)
    v4 = a4 + a4 / 0xFF + 16;
  else
    v4 = 0;
  return pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_fast_continue(a1, a2, a3, a4, v4, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_sizeofStreamState(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this)
{
  return 16416;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_resetStreamState(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, void *a2, char *a3)
{
  bzero(this, 0x4020uLL);
  return 0;
}

void *pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_create(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, char *a2)
{
  void *v2;
  void *v3;

  v2 = malloc(0x4020uLL);
  v3 = v2;
  if (v2 && (v2 & 7) == 0)
    bzero(v2, 0x4020uLL);
  return v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_slideInputBuffer(pxrInternal__aapl__pxrReserved__::pxr_lz4 *this, void *a2)
{
  return *((_QWORD *)this + 2049);
}

void sub_20BEB17A4()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::TF_REQUIRE_FILESYSTEM_WRITE_PERMISSION))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::TF_REQUIRE_FILESYSTEM_WRITE_PERMISSION);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::TF_REQUIRE_FILESYSTEM_WRITE_PERMISSION);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Tf_AtomicRenameFileOver(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, uint64_t a3)
{
  const std::__fs::filesystem::path *v4;
  const char *v6;
  mode_t v7;
  mode_t v8;
  const char *v9;
  std::error_code *v10;
  uint64_t v11;
  int *v12;
  char *v13;
  void **v14;
  const std::__fs::filesystem::path *v15;
  const std::__fs::filesystem::path *v16;
  int v17;
  int v18;
  int *v19;
  const char *v20;
  char *v21;
  void **v22;
  void *__p[2];
  char v25;
  __int128 v26;
  uint64_t v27;
  const char *v28;
  char v29;
  stat v30;

  v4 = a2;
  if ((a2->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = (const char *)a2;
  else
    v6 = (const char *)a2->__pn_.__r_.__value_.__r.__words[0];
  if (stat(v6, &v30) == -1)
  {
    v8 = umask(0);
    umask(v8);
    v7 = 438 - v8;
  }
  else
  {
    v7 = v30.st_mode & 0x1B6;
  }
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = (const char *)a1;
  else
    v9 = (const char *)a1->__pn_.__r_.__value_.__r.__words[0];
  if (chmod(v9, v7))
  {
    *(_QWORD *)&v26 = "tf/atomicRenameUtil.cpp";
    *((_QWORD *)&v26 + 1) = "Tf_AtomicRenameFileOver";
    v27 = 107;
    v28 = "BOOL pxrInternal__aapl__pxrReserved__::Tf_AtomicRenameFileOver(const std::string &, const std::string &, std::string *)";
    v29 = 0;
    v11 = (a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (uint64_t)a1
        : a1->__pn_.__r_.__value_.__r.__words[0];
    v12 = __error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v12, __p);
    v14 = v25 >= 0 ? __p : (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v26, (pxrInternal__aapl__pxrReserved__ *)"Unable to set permissions for temporary file '%s': %s", v13, v11, v14);
    if (v25 < 0)
      operator delete(__p[0]);
  }
  if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = a1;
  else
    v15 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
  if ((v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = v4;
  else
    v16 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
  rename(v15, v16, v10);
  v18 = v17;
  if (v17)
  {
    if ((a1->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      a1 = (const std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
    if ((v4->__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v4 = (const std::__fs::filesystem::path *)v4->__pn_.__r_.__value_.__r.__words[0];
    v19 = __error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v19, __p);
    if (v25 >= 0)
      v22 = __p;
    else
      v22 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Failed to rename temporary file '%s' to '%s': %s", v20, v21, a1, v4, v22);
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    *(_OWORD *)a3 = v26;
    *(_QWORD *)(a3 + 16) = v27;
    HIBYTE(v27) = 0;
    LOBYTE(v26) = 0;
    if (v25 < 0)
      operator delete(__p[0]);
  }
  return v18 == 0;
}

void sub_20BEB19D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_CreateSiblingTempFile(std::string *this, std::string *a2, std::string *a3, uint64_t a4)
{
  std::string *v7;
  const char *v8;
  char *v9;
  std::string::size_type size;
  char *TemporaryDirectoryAppropriateForURLPath;
  uint64_t TmpFile;
  void **v13;
  uint64_t v14;
  _BYTE *v15;
  const char *v16;
  const char *v17;
  char *v18;
  __int128 *v19;
  std::string *p_str;
  const char *v22;
  char *v23;
  std::string *p_p;
  int *v25;
  const char *v26;
  char *v27;
  void **v28;
  std::string *v29;
  void *v30[2];
  char v31;
  __int128 v32;
  uint64_t v33;
  std::string __p;
  std::string v35;
  __int128 v36;
  uint64_t v37;
  std::string __str;
  void *v39[2];
  uint64_t v40;

  v7 = this;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this->__r_.__value_.__s + 23))
      goto LABEL_3;
LABEL_10:
    MEMORY[0x212B929D0](a4, "Empty fileName");
    return 0xFFFFFFFFLL;
  }
  if (!this->__r_.__value_.__l.__size_)
    goto LABEL_10;
LABEL_3:
  v39[0] = 0;
  v39[1] = 0;
  v40 = 0;
  pxrInternal__aapl__pxrReserved__::TfRealPath(this, 1, (uint64_t)v39, &__str);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (!size)
  {
    if (SHIBYTE(v7->__r_.__value_.__r.__words[2]) < 0)
      v7 = (std::string *)v7->__r_.__value_.__r.__words[0];
    v13 = v39;
    if (v40 < 0)
      v13 = (void **)v39[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unable to determine the real path for '%s': %s", v8, v9, v7, v13);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(_OWORD *)a4 = v36;
    *(_QWORD *)(a4 + 16) = v37;
    TmpFile = 0xFFFFFFFFLL;
    goto LABEL_39;
  }
  TemporaryDirectoryAppropriateForURLPath = (char *)__DarwinGetTemporaryDirectoryAppropriateForURLPath((uint64_t *)&__str, a4);
  sub_20BDDC0E4(&v36, TemporaryDirectoryAppropriateForURLPath);
  if (*(char *)(a4 + 23) < 0)
  {
    if (!*(_QWORD *)(a4 + 8))
      goto LABEL_19;
  }
  else if (!*(_BYTE *)(a4 + 23))
  {
LABEL_19:
    v14 = HIBYTE(v37);
    if (v37 < 0)
      v14 = *((_QWORD *)&v36 + 1);
    if (!v14)
      goto LABEL_36;
    v15 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::TF_REQUIRE_FILESYSTEM_WRITE_PERMISSION);
    if (!v15)
    {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::TF_REQUIRE_FILESYSTEM_WRITE_PERMISSION);
      v15 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::TF_REQUIRE_FILESYSTEM_WRITE_PERMISSION);
    }
    if (*v15)
    {
      if (v37 >= 0)
        v16 = (const char *)&v36;
      else
        v16 = (const char *)v36;
      if (access(v16, 2))
      {
        if (v37 >= 0)
          v19 = &v36;
        else
          v19 = (__int128 *)v36;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Insufficient permissions to write to destination directory '%s'", v17, v18, v19);
LABEL_33:
        if (*(char *)(a4 + 23) < 0)
          operator delete(*(void **)a4);
        *(std::string *)a4 = v35;
        goto LABEL_36;
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_str = &__str;
      else
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (access((const char *)p_str, 2) && *__error() != 2)
      {
        v29 = &__str;
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v29 = (std::string *)__str.__r_.__value_.__r.__words[0];
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Insufficient permissions to write to destination file '%s'", v22, v23, v29);
        goto LABEL_33;
      }
    }
    pxrInternal__aapl__pxrReserved__::TfGetBaseName(&__str, &__p);
    pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix((uint64_t)&__p, 46, &v35);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    memset(&__p, 0, sizeof(__p));
    TmpFile = pxrInternal__aapl__pxrReserved__::ArchMakeTmpFile((uint64_t *)&v36, (const char *)&v35, (char *)&__p);
    if ((_DWORD)TmpFile == -1)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      v25 = __error();
      pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v25, v30);
      if (v31 >= 0)
        v28 = v30;
      else
        v28 = (void **)v30[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unable to create temporary file '%s': %s", v26, v27, p_p, v28);
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      *(_OWORD *)a4 = v32;
      *(_QWORD *)(a4 + 16) = v33;
      HIBYTE(v33) = 0;
      LOBYTE(v32) = 0;
      if (v31 < 0)
        operator delete(v30[0]);
    }
    else
    {
      std::string::operator=(a3, &__p);
      std::string::operator=(a2, &__str);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    goto LABEL_37;
  }
LABEL_36:
  TmpFile = 0xFFFFFFFFLL;
LABEL_37:
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
LABEL_39:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v40) < 0)
    operator delete(v39[0]);
  return TmpFile;
}

void sub_20BEB1D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 81) < 0)
    operator delete(*(void **)(v32 - 104));
  if (*(char *)(v32 - 57) < 0)
    operator delete(*(void **)(v32 - 80));
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  _Unwind_Resume(exception_object);
}

void sub_20BEB1E24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *__p;
  uint64_t v6;
  uint64_t v7;
  void *v8[2];
  char v9;

  sub_20BDDC0E4(v8, "TF_SCRIPT_MODULE_LOADER");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51ADD0, 5, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v0 = sub_20BEB209C();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0 + 20, "TF_SCRIPT_MODULE_LOADER", "show script module loading activity");
  sub_20BDDC0E4(v8, "TF_TYPE_REGISTRY");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51ADD0, 6, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v1 = sub_20BEB209C();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 24, "TF_TYPE_REGISTRY", "show changes to the TfType registry");
  sub_20BDDC0E4(v8, "TF_ATTACH_DEBUGGER_ON_ERROR");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51ADD0, 7, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v2 = sub_20BEB209C();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 28, "TF_ATTACH_DEBUGGER_ON_ERROR", "attach/stop in a debugger for all errors");
  sub_20BDDC0E4(v8, "TF_ATTACH_DEBUGGER_ON_FATAL_ERROR");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51ADD0, 8, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v3 = sub_20BEB209C();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 32, "TF_ATTACH_DEBUGGER_ON_FATAL_ERROR", "attach/stop in a debugger for fatal errors");
  sub_20BDDC0E4(v8, "TF_ATTACH_DEBUGGER_ON_WARNING");
  __p = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51ADD0, 9, (uint64_t)v8, (uint64_t)&__p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8[0]);
  v4 = sub_20BEB209C();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v4 + 36, "TF_ATTACH_DEBUGGER_ON_WARNING", "attach/stop in a debugger for all warnings");
}

void sub_20BEB2060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEB209C()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473B148);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473B148))
  {
    v2 = operator new(0x28uLL);
    v2[4] = 0;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    qword_25473B140 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473B148);
  }
  return qword_25473B140;
}

void sub_20BEB2104(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473B148);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA54BC0 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C(&v15, "Tf", "TfSingleton::_CreateInstance", __p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)operator new(0x118uLL);
      pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::Tf_NoticeRegistry(v10);
      v12 = atomic_load(a1);
      if (v12)
      {
        if (v10 != (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)v12)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegis"
                "try>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance");
        }
      }
      else
      {
        do
          v13 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegis"
                "try>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_17Tf_NoticeRegistryEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BEB230C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistr"
            "y>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

unint64_t sub_20BEB23F8(unint64_t result, uint64_t a2, unsigned __int8 a3)
{
  unsigned __int8 *v3;

  if (a2)
  {
    if (a2 == result)
    {
      return a2 + 1;
    }
    else
    {
      v3 = (unsigned __int8 *)(a2 - 1);
      if (a2 - 1 > result)
      {
        while (*v3 != a3)
        {
          if (--v3 == (unsigned __int8 *)result)
            goto LABEL_10;
        }
        result = (unint64_t)v3;
      }
LABEL_10:
      ++result;
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::DeleteInstance()
{
  uint64_t i;
  unint64_t v1;
  void *v2;
  void **v3;

  for (i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
        i;
        i = v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
    if (v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance))
      {
        sub_20BEB48EC((_QWORD *)(i + 184));
        sub_20BEB3E90(i + 128);
        sub_20BEB3F28(i + 80);
        v3 = (void **)(i + 48);
        sub_20BEB4844(&v3);
        v2 = (void *)sub_20BEB3FA4(i);
        operator delete(v2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

uint64_t sub_20BEB24F4(uint64_t a1)
{
  int v2;
  int v3;

  v2 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v2 - 1;
  if (v2)
  {
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(*(_QWORD *)a1);
      v3 = *(_DWORD *)(a1 + 8);
      *(_DWORD *)(a1 + 8) = v3 - 1;
    }
    while (v3);
  }
  *(_QWORD *)a1 = 0;
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::Tf_NoticeRegistry(pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *this)
{
  unint64_t v2;
  _QWORD v4[4];
  char v5;
  int v6;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *((_WORD *)this + 20) = 0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *(_QWORD *)((char *)this + 44) = 0;
  *(_QWORD *)((char *)this + 60) = 0;
  *(_QWORD *)((char *)this + 52) = 0;
  *(_QWORD *)((char *)this + 65) = 0;
  *((_DWORD *)this + 28) = 1065353216;
  *((_OWORD *)this + 8) = 0u;
  *((_BYTE *)this + 120) = 0;
  *((_OWORD *)this + 9) = 0u;
  *((_DWORD *)this + 40) = 1065353216;
  *((_BYTE *)this + 168) = 0;
  *((_QWORD *)this + 22) = 0;
  sub_20BEB4CA0((_QWORD *)this + 23);
  do
    v2 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  while (__stlxr((unint64_t)this, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance));
  if (v2)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistr"
            "y>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed");
  }
  return this;
}

void sub_20BEB2630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  sub_20BEB48EC(v19);
  sub_20BEB3E90(v18);
  sub_20BEB3F28(v17);
  a16 = (void **)(v16 + 48);
  sub_20BEB4844(&a16);
  sub_20BEB3FA4(v16);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_VerifyFailedCast(pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *this, const std::type_info *a2, const pxrInternal__aapl__pxrReserved__::TfNotice *a3, const pxrInternal__aapl__pxrReserved__::TfNotice *a4)
{
  char *v7;
  int v8;
  void **v9;
  char *v10;
  void **v11;
  void **v12;
  void **v13;
  char *v14;
  char *v15;
  void **v16;
  void *__p[2];
  char v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  char v23;
  int v24;
  void *v25[2];
  char v26;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v25);
  if (!a4)
  {
    v19 = "tf/noticeRegistry.cpp";
    v20 = "_VerifyFailedCast";
    v21 = 102;
    v22 = "void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_VerifyFailedCast(const type_info &, const TfNotice "
          "&, const TfNotice *)";
    v23 = 0;
    v24 = 4;
    v8 = v26;
    v9 = (void **)v25[0];
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(a2->__type_name & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    v11 = v25;
    if (v8 >= 0)
      v12 = v25;
    else
      v12 = v9;
    if (v18 >= 0)
      v13 = __p;
    else
      v13 = (void **)__p[0];
    if (v26 < 0)
      v11 = (void **)v25[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v19, (pxrInternal__aapl__pxrReserved__ *)"All attempts to cast notice of type '%s' to type '%s' failed.  One possibility is that '%s' has no non-inlined virtual functions and this system's C++ ABI is non-standard.  Verify that class '%s'has at least one non-inline virtual function.\n", v10, v12, v13, v11, v11);
  }
  sub_20BEB3FEC((uint64_t)&v19, (uint64_t)this + 72);
  if (sub_20BEB4DB8((_QWORD *)this + 10, (unsigned __int8 *)v25))
  {
    v7 = v19;
    if (v19)
    {
      __dmb(0xBu);
      *v7 = 0;
    }
  }
  else
  {
    sub_20BEB4F9C((uint64_t)this + 80, (unsigned __int8 *)v25, (uint64_t)v25);
    v15 = v19;
    if (v19)
    {
      __dmb(0xBu);
      *v15 = 0;
    }
    v19 = "tf/noticeRegistry.cpp";
    v20 = "_VerifyFailedCast";
    v21 = 94;
    v22 = "void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_VerifyFailedCast(const type_info &, const TfNotice "
          "&, const TfNotice *)";
    v23 = 0;
    v16 = v25;
    if (v26 < 0)
      v16 = (void **)v25[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v19, (pxrInternal__aapl__pxrReserved__ *)"Special handling of notice type '%s' invoked.\nMost likely, this class is missing a non-inlined virtual destructor.\nPlease request that someone modify class '%s' accordingly.", v14, v16, v16);
  }
  if (v26 < 0)
    operator delete(v25[0]);
}

void sub_20BEB2820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  uint64_t v19;

  if (*(char *)(v19 - 33) < 0)
    operator delete(*(void **)(v19 - 56));
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_InsertProbe(uint64_t a1, _QWORD *a2)
{
  unint64_t result;
  char v5;
  _BYTE *v6;
  _BYTE *v7;

  sub_20BEB3FEC((uint64_t)&v7, a1 + 120);
  result = (unint64_t)sub_20BEB2900(a2);
  if (v5 & 1 | result)
    result = (unint64_t)sub_20BEB5370(a1 + 128, (uint64_t)a2, a2);
  *(_BYTE *)(a1 + 168) = *(_QWORD *)(a1 + 152) != 0;
  v6 = v7;
  if (v7)
  {
    __dmb(0xBu);
    *v6 = 0;
  }
  return result;
}

void sub_20BEB28EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t (*sub_20BEB2900(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return sub_20BEB5330;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_RemoveProbe(uint64_t a1, uint64_t a2)
{
  uint64_t *result;
  _BYTE *v5;
  _BYTE *v6;

  sub_20BEB3FEC((uint64_t)&v6, a1 + 120);
  result = sub_20BEB56E0((_QWORD *)(a1 + 128), a2);
  *(_BYTE *)(a1 + 168) = *(_QWORD *)(a1 + 152) != 0;
  v5 = v6;
  if (v6)
  {
    __dmb(0xBu);
    *v5 = 0;
  }
  return result;
}

void sub_20BEB29B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BeginSend(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  _QWORD *v9;
  uint64_t (*v10)(uint64_t *);
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = a5[1];
  v14 = *a5;
  v15 = v5;
  while (v14 != v15)
  {
    v9 = (_QWORD *)sub_20BEB2A5C(&v14);
    v10 = sub_20BEB2900(v9);
    if (v11 & 1 | (unint64_t)v10)
    {
      v12 = (uint64_t *)sub_20BEB2A5C(&v14);
      v13 = sub_20BEB2AD8(v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 16))(v13, a2, a3, a4);
    }
    sub_20BEB2B7C(&v14);
  }
}

uint64_t sub_20BEB2A5C(uint64_t *a1)
{
  uint64_t result;
  _QWORD v3[4];
  char v4;
  int v5;

  result = *a1;
  if (result == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator*";
    v3[2] = 271;
    v3[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>>>::operator*() [T = const std::vector<pxrInterna"
            "l__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  return result;
}

void sub_20BEB2AD0()
{
  JUMPOUT(0x20BEB2A80);
}

uint64_t sub_20BEB2AD8(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::TfNotice::Probe>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrRes"
            "erved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::TfNotice::Probe]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CA54CA7 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

_QWORD *sub_20BEB2B7C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>>>::operator++() [T = const std::ve"
            "ctor<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((int)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_EndSend(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t *);
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a2;
  v3 = a2[1];
  v9 = *a2;
  v10 = v3;
  while (v2 != v3)
  {
    v4 = (_QWORD *)sub_20BEB2A5C(&v9);
    v5 = sub_20BEB2900(v4);
    if (v6 & 1 | (unint64_t)v5)
    {
      v7 = (uint64_t *)sub_20BEB2A5C(&v9);
      v8 = sub_20BEB2AD8(v7);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
    }
    sub_20BEB2B7C(&v9);
    v2 = v9;
    v3 = v10;
  }
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BeginDelivery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v7;
  _QWORD *v13;
  uint64_t (*v14)(uint64_t *);
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v7 = a7[1];
  v18 = *a7;
  v19 = v7;
  while (v18 != v19)
  {
    v13 = (_QWORD *)sub_20BEB2A5C(&v18);
    v14 = sub_20BEB2900(v13);
    if (v15 & 1 | (unint64_t)v14)
    {
      v16 = (uint64_t *)sub_20BEB2A5C(&v18);
      v17 = sub_20BEB2AD8(v16);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 32))(v17, a2, a3, a4, a5, a6);
    }
    sub_20BEB2B7C(&v18);
  }
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_EndDelivery(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(uint64_t *);
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a2;
  v3 = a2[1];
  v9 = *a2;
  v10 = v3;
  while (v2 != v3)
  {
    v4 = (_QWORD *)sub_20BEB2A5C(&v9);
    v5 = sub_20BEB2900(v4);
    if (v6 & 1 | (unint64_t)v5)
    {
      v7 = (uint64_t *)sub_20BEB2A5C(&v9);
      v8 = sub_20BEB2AD8(v7);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    }
    sub_20BEB2B7C(&v9);
    v2 = v9;
    v3 = v10;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Register@<X0>(pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *this@<X0>, pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *a2@<X1>, char **a3@<X8>)
{
  uint64_t v6;
  char *v7;
  char *v8;
  void *v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  const char *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  char *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  char v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;

  sub_20BEB59B0((uint64_t)&v27, (uint64_t)"Tf", (uint64_t)"Tf_NoticeRegistry::_Register");
  v6 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *))(*(_QWORD *)a2 + 24))(a2);
  v26 = v6;
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v20);
  if (v20 == (char *)v6)
  {
    v20 = "tf/noticeRegistry.cpp";
    v21 = "_Register";
    v22 = 181;
    v23 = "TfNotice::Key pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Register(TfNotice::_DelivererBase *)";
    v24 = 0;
    v25 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v20, (pxrInternal__aapl__pxrReserved__ *)"notice type is undefined in the TfType system", v7);
  }
  sub_20BEB3FEC((uint64_t)&v20, (uint64_t)this + 41);
  ++*((_DWORD *)this + 11);
  v8 = v20;
  if (v20)
  {
    __dmb(0xBu);
    *v8 = 0;
  }
  v9 = sub_20BEB2F58(this, &v26);
  v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase *))(*(_QWORD *)a2 + 40))(a2);
  sub_20BEB3020((uint64_t)this, (uint64_t)v9, v10, (uint64_t)a2);
  sub_20BEB3FEC((uint64_t)&v20, (uint64_t)this + 41);
  --*((_DWORD *)this + 11);
  v11 = v20;
  if (v20)
  {
    __dmb(0xBu);
    *v11 = 0;
  }
  result = (uint64_t)sub_20BEB5A20(&v20, (uint64_t)a2);
  v13 = v21;
  *a3 = v20;
  a3[1] = (char *)v13;
  if (v13)
  {
    v14 = (unsigned int *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    result = (uint64_t)v21;
    if (v21)
    {
      v16 = (unsigned int *)(v21 + 8);
      do
      {
        v17 = __ldxr(v16);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v16));
      if (!v18)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  while (v28--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v27);
  return result;
}

void sub_20BEB2F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_20BEB2F58(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  void *v5;
  _BYTE *v6;
  _BYTE *v8;
  _QWORD *v9;

  sub_20BEB3FEC((uint64_t)&v8, (uint64_t)(a1 + 5));
  v4 = sub_20BEB4074(a1, a2);
  if (v4)
  {
    v5 = (void *)v4[3];
  }
  else
  {
    v5 = operator new(0x48uLL);
    sub_20BEB4140((uint64_t)v5);
    v9 = a2;
    sub_20BEB428C((uint64_t)a1, a2, (uint64_t)&unk_20CAC184C, &v9)[3] = v5;
  }
  v6 = v8;
  if (v8)
  {
    __dmb(0xBu);
    *v6 = 0;
  }
  return v5;
}

void sub_20BEB2FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _BYTE *a9)
{
  void *v9;

  operator delete(v9);
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEB3020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *result;
  _QWORD *v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t *v14;

  v13 = a3;
  sub_20BEB3FEC((uint64_t)&v12, a2);
  if (a3)
  {
    v14 = &v13;
    v7 = sub_20BEB44C0(a2 + 32, &v13, (uint64_t)&unk_20CAC184C, &v14) + 3;
  }
  else
  {
    v7 = (_QWORD *)(a2 + 8);
  }
  *(_QWORD *)(a4 + 16) = v7;
  result = operator new(0x18uLL);
  result[2] = a4;
  *result = v7;
  v9 = (_QWORD *)v7[1];
  result[1] = v9;
  *v9 = result;
  v10 = v7[2] + 1;
  v7[1] = result;
  v7[2] = v10;
  *(_QWORD *)(a4 + 24) = result;
  v11 = v12;
  if (v12)
  {
    __dmb(0xBu);
    *v11 = 0;
  }
  return result;
}

void sub_20BEB30D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a10 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Revoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;

  v4 = sub_20BEB3FEC((uint64_t)&v6, a1 + 41);
  if (*(_DWORD *)(a1 + 44))
    *(_BYTE *)(sub_20BEB3210(a2) + 32) = 0;
  else
    pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_FreeDeliverer(v4, a2);
  v5 = v6;
  if (v6)
  {
    __dmb(0xBu);
    *v5 = 0;
  }
}

void sub_20BEB314C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_FreeDeliverer(uint64_t a1, uint64_t *a2)
{
  uint64_t (*v3)(uint64_t *);
  char v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  v3 = sub_20BEB3DAC(a2);
  if (v4 & 1 | (unint64_t)v3)
  {
    v5 = *(_QWORD *)(sub_20BEB3210(a2) + 16);
    v6 = *(uint64_t **)(sub_20BEB3210(a2) + 24);
    if (a2[1])
    {
      v7 = *(unsigned __int8 *)(sub_20BEB47BC(a2 + 1) + 14);
      v8 = *a2;
      if (v7)
        v9 = v8 == 0;
      else
        v9 = 1;
      if (!v9)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    v10 = *v6;
    *(_QWORD *)(v10 + 8) = v6[1];
    *(_QWORD *)v6[1] = v10;
    --*(_QWORD *)(v5 + 16);
    operator delete(v6);
  }
}

uint64_t sub_20BEB3210(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::TfNotice::_DelivererBase>::operator->() const [PtrTemplate = pxrInternal__aap"
            "l__pxrReserved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CA54B05 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Send(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t (*v17)(uint64_t *);
  char v18;
  __int128 *v19;
  _BOOL4 v20;
  void **v21;
  _QWORD *v22;
  void **v23;
  _QWORD *v24;
  void **v25;
  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *NBaseTypes;
  _QWORD *Root;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _BYTE *v39;
  _BYTE *v40;
  uint64_t v41;
  void **v42[2];

  if (atomic_load((unint64_t *)(a1 + 176)))
  {
    LOBYTE(v39) = 0;
    if (*(_QWORD *)sub_20BEB5B80((unint64_t *)(a1 + 184), &v39))
      return 0;
  }
  sub_20BEB3FEC((uint64_t)&v39, a1 + 41);
  ++*(_DWORD *)(a1 + 44);
  v14 = v39;
  if (v39)
  {
    __dmb(0xBu);
    *v14 = 0;
  }
  v39 = 0;
  v40 = 0;
  v41 = 0;
  if (*(_BYTE *)(a1 + 168))
  {
    sub_20BEB3FEC((uint64_t)v42, a1 + 120);
    v15 = (uint64_t)sub_20BEB35F0((uint64_t *)&v39, *(_QWORD *)(a1 + 152));
    v37 = *(_QWORD **)(a1 + 144);
    v38 = 0;
    while (v37 != v38)
    {
      v16 = (_QWORD *)sub_20BEB3680(&v37);
      v17 = sub_20BEB2900(v16);
      if (v18 & 1 | (unint64_t)v17)
      {
        v19 = (__int128 *)sub_20BEB3680(&v37);
        sub_20BEB36FC((uint64_t *)&v39, v19);
      }
      v15 = sub_20BEB3824((uint64_t)&v37);
    }
    v20 = v39 != v40;
    if (v39 != v40)
      pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BeginSend(v15, (uint64_t)a2, a4, a6, (uint64_t *)&v39);
    v21 = v42[0];
    if (v42[0])
    {
      __dmb(0xBu);
      *(_BYTE *)v21 = 0;
    }
  }
  else
  {
    v20 = 0;
  }
  v13 = 0;
  v36 = *a3;
  do
  {
    v22 = sub_20BEB38A0((_QWORD *)a1, &v36);
    if (v22)
    {
      if (a4)
      {
        v42[0] = (void **)sub_20BEB3B58(a1, (uint64_t)v22, a4);
        v42[1] = v23;
        v13 += (int)pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Deliver((uint64_t *)a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, (uint64_t)&v39, (uint64_t *)v42);
      }
      sub_20BEB3FEC((uint64_t)v42, (uint64_t)v22);
      v24 = (_QWORD *)v22[2];
      v25 = v42[0];
      if (v42[0])
      {
        __dmb(0xBu);
        *(_BYTE *)v25 = 0;
      }
      v37 = v22 + 1;
      v38 = v24;
      v13 += (int)pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Deliver((uint64_t *)a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, (uint64_t)&v39, (uint64_t *)&v37);
    }
    NBaseTypes = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)pxrInternal__aapl__pxrReserved__::TfType::GetNBaseTypes((pxrInternal__aapl__pxrReserved__::TfType *)&v36, (pxrInternal__aapl__pxrReserved__::TfType *)&v36, (char *)1);
    if (NBaseTypes != (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)1)
      pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BadTypeFatalMsg(NBaseTypes, (const pxrInternal__aapl__pxrReserved__::TfType *)&v36, *(std::type_info **)(*a2 - 8));
    Root = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::GetRoot(NBaseTypes);
  }
  while (v36 != *Root);
  if (v20)
    pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_EndSend((uint64_t)Root, (uint64_t *)&v39);
  v28 = sub_20BEB3FEC((uint64_t)v42, a1 + 41);
  v29 = *(_DWORD *)(a1 + 44);
  if (v29 == 1)
  {
    v30 = *(_QWORD *)(a1 + 48);
    v31 = *(_QWORD *)(a1 + 56);
    if (v30 == v31)
    {
      v29 = 1;
    }
    else
    {
      v32 = 0;
      v33 = (v31 - v30) >> 4;
      do
      {
        pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_FreeDeliverer(v28, (uint64_t *)(*(_QWORD *)(a1 + 48) + v32));
        v32 += 16;
        --v33;
      }
      while (v33);
      sub_20BEB4884((unsigned int *)(a1 + 48));
      v29 = *(_DWORD *)(a1 + 44);
    }
  }
  *(_DWORD *)(a1 + 44) = v29 - 1;
  v34 = v42[0];
  if (v42[0])
  {
    __dmb(0xBu);
    *(_BYTE *)v34 = 0;
  }
  v42[0] = (void **)&v39;
  sub_20BEB4844(v42);
  return v13;
}

void sub_20BEB3598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, char a12)
{
  a10 = (void **)&a12;
  sub_20BEB4844(&a10);
  _Unwind_Resume(a1);
}

unsigned int *sub_20BEB35F0(uint64_t *a1, unint64_t a2)
{
  unsigned int *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (unsigned int *)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BDEA2F0((uint64_t)result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    sub_20BEB5DD0(a1, v7);
    return sub_20BEB5F68((unsigned int *)v7);
  }
  return result;
}

void sub_20BEB366C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEB5F68((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEB3680(_QWORD *a1)
{
  _QWORD v2[4];
  char v3;
  int v4;

  if (*a1 == a1[1])
  {
    v2[0] = "tf/iterator.h";
    v2[1] = "operator*";
    v2[2] = 271;
    v2[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHashSet<pxrIntern"
            "al__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>, pxrInternal__aapl__px"
            "rReserved__::TfHash>>::operator*() [T = pxrInternal__aapl__pxrReserved__::TfHashSet<pxrInternal__aapl__pxrRe"
            "served__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>, pxrInternal__aapl__pxrReserved__::Tf"
            "Hash>, Reverse = false]";
    v3 = 0;
    v4 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v2, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  return *a1 + 16;
}

void sub_20BEB36F4()
{
  JUMPOUT(0x20BEB369CLL);
}

unsigned int *sub_20BEB36FC(uint64_t *a1, __int128 *a2)
{
  unsigned int *result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  unsigned int *v20;
  unsigned int v21;
  _QWORD v22[5];

  v6 = a1[2];
  result = (unsigned int *)(a1 + 2);
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v12 = ((uint64_t)v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      sub_20BDDF694();
    v14 = v5 - *a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v22[4] = result;
    v16 = (char *)sub_20BDEA2F0((uint64_t)result, v15);
    v17 = &v16[16 * v12];
    v22[0] = v16;
    v22[1] = v17;
    v22[3] = &v16[16 * v18];
    v19 = *a2;
    *(_OWORD *)v17 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unsigned int *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v22[2] = v17 + 16;
    sub_20BEB5DD0(a1, v22);
    v11 = (_QWORD *)a1[1];
    result = sub_20BEB5F68((unsigned int *)v22);
  }
  else
  {
    *v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v7[1] = v8;
    if (v8)
    {
      v9 = (unsigned int *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v11;
  return result;
}

void sub_20BEB3810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEB5F68((unsigned int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEB3824(uint64_t a1)
{
  _QWORD v3[4];
  char v4;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHas"
            "hSet<pxrInternal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>, pxrInte"
            "rnal__aapl__pxrReserved__::TfHash>>::operator++() [T = pxrInternal__aapl__pxrReserved__::TfHashSet<pxrIntern"
            "al__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::TfNotice::Probe>, pxrInternal__aapl__px"
            "rReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((int)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)a1 = **(_QWORD **)a1;
  }
  return a1;
}

_QWORD *sub_20BEB38A0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *result;
  _BYTE *v5;
  _BYTE *v6;

  sub_20BEB3FEC((uint64_t)&v6, (uint64_t)(a1 + 5));
  result = sub_20BEB4074(a1, a2);
  if (result)
    result = (_QWORD *)result[3];
  v5 = v6;
  if (v6)
  {
    __dmb(0xBu);
    *v5 = 0;
  }
  return result;
}

void sub_20BEB38F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Deliver(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE *v32;
  uint64_t v34;
  uint64_t *v35;
  __int128 v38;
  _BYTE *v39;
  _QWORD v40[5];

  v8 = *a8;
  if (!*a8)
    return 0;
  v9 = a8[1];
  if (v8 == v9)
    return 0;
  v15 = 0;
  v16 = (uint64_t)a1 + 41;
  v34 = (uint64_t)(a1 + 8);
  v35 = a1 + 6;
  do
  {
    v17 = *(_QWORD *)(v9 + 16);
    if (*(_BYTE *)(v17 + 32)
      && (*(unsigned int (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 16))(*(_QWORD *)(v9 + 16), a2, a3, a4, a5, a6, a7))
    {
      v15 = (v15 + 1);
    }
    else
    {
      sub_20BEB3FEC((uint64_t)&v39, v16);
      if (!*(_BYTE *)(v17 + 33))
      {
        *(_WORD *)(v17 + 32) = 256;
        sub_20BEB5A20(&v38, v17);
        v19 = (_OWORD *)a1[7];
        v18 = a1[8];
        if ((unint64_t)v19 >= v18)
        {
          v20 = ((uint64_t)v19 - *v35) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            sub_20BDDF694();
          v22 = v18 - *v35;
          if (v22 >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          v40[4] = v34;
          v24 = (char *)sub_20BDEA2F0(v34, v23);
          v25 = &v24[16 * v20];
          v40[0] = v24;
          v40[1] = v25;
          v40[3] = &v24[16 * v26];
          *(_OWORD *)v25 = v38;
          v38 = 0uLL;
          v40[2] = v25 + 16;
          sub_20BEB6000(v35, v40);
          v27 = a1[7];
          sub_20BEB5F68((unsigned int *)v40);
          v28 = (unsigned int *)*((_QWORD *)&v38 + 1);
          a1[7] = v27;
          if (v28)
          {
            v29 = v28 + 2;
            do
            {
              v30 = __ldxr(v29);
              v31 = v30 - 1;
            }
            while (__stlxr(v31, v29));
            if (!v31)
              (*(void (**)(unsigned int *))(*(_QWORD *)v28 + 8))(v28);
          }
        }
        else
        {
          *v19 = v38;
          a1[7] = (uint64_t)(v19 + 1);
        }
      }
      v32 = v39;
      if (v39)
      {
        __dmb(0xBu);
        *v32 = 0;
      }
    }
    v9 = *(_QWORD *)(v9 + 8);
  }
  while (v9 != v8);
  return v15;
}

void sub_20BEB3AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned int *a14, uint64_t a15, _BYTE *a16, uint64_t a17, char a18)
{
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;

  if (a14)
  {
    v19 = a14 + 2;
    do
    {
      v20 = __ldxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      (*(void (**)(unsigned int *))(*(_QWORD *)a14 + 8))(a14);
  }
  if (a16)
  {
    __dmb(0xBu);
    *a16 = 0;
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BEB3B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *result;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;

  v8 = a3;
  sub_20BEB3FEC((uint64_t)&v7, a2);
  v4 = sub_20BEB4074((_QWORD *)(a2 + 32), &v8);
  if (v4)
    result = v4 + 3;
  else
    result = 0;
  v6 = v7;
  if (v7)
  {
    __dmb(0xBu);
    *v6 = 0;
  }
  return result;
}

void sub_20BEB3BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10)
{
  if (a10)
  {
    __dmb(0xBu);
    *a10 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BadTypeFatalMsg(pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *this, const pxrInternal__aapl__pxrReserved__::TfType *a2, std::type_info *a3)
{
  uint64_t v5;
  const char *v6;
  char *v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  void **v11;
  uint64_t TypeName;
  const char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  const char *v18;
  char v19;
  int v20;
  void *__p[2];
  char v22;
  __int128 v23;
  uint64_t v24;
  void *v25;
  void *v26;

  pxrInternal__aapl__pxrReserved__::TfType::GetBaseTypes(a2, (uint64_t)a2, (char *)a3, &v25);
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v16);
  if (*(_QWORD *)a2 == (_QWORD)v16)
  {
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(a3->__type_name & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v22 >= 0)
      v11 = __p;
    else
      v11 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Class %s (derived from TfNotice) is undefined in the TfType system", v9, v10, v11);
    v23 = v16;
    v24 = v17;
    HIBYTE(v17) = 0;
    LOBYTE(v16) = 0;
    if (v22 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (v25 == v26)
    {
      TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
      if (*(char *)(TypeName + 23) >= 0)
        v15 = TypeName;
      else
        v15 = *(_QWORD *)TypeName;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"TfNotice type '%s' has NO base types;\nthis should be impossible.",
        v13,
        v14,
        v15);
    }
    else
    {
      v5 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName(a2);
      if (*(char *)(v5 + 23) >= 0)
        v8 = v5;
      else
        v8 = *(_QWORD *)v5;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"TfNotice type '%s' has multiple base types;\n"
                                            "it must have a unique parent in the TfType system",
        v6,
        v7,
        v8);
    }
    v23 = v16;
    v24 = v17;
  }
  *(_QWORD *)&v16 = "tf/noticeRegistry.cpp";
  *((_QWORD *)&v16 + 1) = "_BadTypeFatalMsg";
  v17 = 355;
  v18 = "void pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BadTypeFatalMsg(const TfType &, const std::type_info &)";
  v19 = 0;
  v20 = 4;
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((uint64_t)&v16, (uint64_t)&v23);
  if (SHIBYTE(v24) < 0)
    operator delete((void *)v23);
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
}

void sub_20BEB3D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;

  if (a21 < 0)
    operator delete(__p);
  v23 = *(void **)(v21 - 40);
  if (v23)
  {
    *(_QWORD *)(v21 - 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (*sub_20BEB3DAC(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return sub_20BEB477C;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_IncrementBlockCount(pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *this)
{
  unint64_t *v1;
  unint64_t v2;
  _QWORD *result;
  char v4;

  v1 = (unint64_t *)((char *)this + 176);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 + 1, v1));
  v4 = 0;
  result = (_QWORD *)sub_20BEB5B80((unint64_t *)this + 23, &v4);
  ++*result;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_DecrementBlockCount(pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *this)
{
  unint64_t *v1;
  unint64_t v2;
  _QWORD *result;
  char v4;

  v1 = (unint64_t *)((char *)this + 176);
  do
    v2 = __ldaxr(v1);
  while (__stlxr(v2 - 1, v1));
  v4 = 0;
  result = (_QWORD *)sub_20BEB5B80((unint64_t *)this + 23, &v4);
  --*result;
  return result;
}

uint64_t sub_20BEB3E90(uint64_t a1)
{
  void *v2;

  sub_20BEB3EC8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BEB3EC8(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = v2;
      v2 = (_QWORD *)*v2;
      v4 = (unsigned int *)v3[3];
      if (v4)
      {
        v5 = v4 + 2;
        do
        {
          v6 = __ldxr(v5);
          v7 = v6 - 1;
        }
        while (__stlxr(v7, v5));
        if (!v7)
          (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      }
      operator delete(v3);
    }
    while (v2);
  }
}

uint64_t sub_20BEB3F28(uint64_t a1)
{
  void *v2;

  sub_20BEB3F60(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BEB3F60(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20BEB3FA4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

uint64_t sub_20BEB3FEC(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a2;
  v3 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  v4 = 1 << (8 * (a2 & 3));
  v5 = ~(255 << (8 * (a2 & 3)));
LABEL_2:
  v6 = *v3 & v5;
  do
  {
    while (1)
    {
      v7 = __ldaxr(v3);
      if (v7 == v6)
        break;
      __clrex();
      if (*v3 != v6)
      {
        sched_yield();
        goto LABEL_2;
      }
    }
  }
  while (__stlxr(v6 | v4, v3));
  return a1;
}

_QWORD *sub_20BEB4074(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = v3;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = v3 & (*(_QWORD *)&v2 - 1);
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_20BEB4140(uint64_t a1)
{
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 8;
  *(_QWORD *)(a1 + 16) = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 1065353216;
  sub_20BDEC6E0(a1 + 32, 0);
  return a1;
}

void sub_20BEB419C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  sub_20BEB41B8(v2);
  sub_20BEB422C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEB41B8(uint64_t a1)
{
  void *v2;

  sub_20BEB41F0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BEB41F0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BEB422C(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_QWORD *sub_20BEB422C(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

_QWORD *sub_20BEB428C(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20BEB44AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEB44C0(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x30uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  v14[3] = v14 + 3;
  v14[4] = v14 + 3;
  v14[5] = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20BEB4738((uint64_t)v24, 0);
  return v11;
}

void sub_20BEB4720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEB4738((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20BEB4738(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BEB422C(v2 + 3);
    operator delete(v2);
  }
}

uint64_t sub_20BEB477C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(sub_20BEB47BC(v2) + 14))
    return *a1;
  return 0;
}

uint64_t sub_20BEB47BC(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::Tf_Remnant>::operator->() co"
            "nst [T = pxrInternal__aapl__pxrReserved__::Tf_Remnant]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAECE90 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void sub_20BEB4844(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20BEB4884((unsigned int *)v2);
    operator delete(**a1);
  }
}

unsigned int *sub_20BEB4884(unsigned int *result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t i;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v1 = result;
  v2 = *(_QWORD *)result;
  for (i = *((_QWORD *)result + 1); i != v2; i -= 16)
  {
    result = *(unsigned int **)(i - 8);
    if (result)
    {
      v4 = result + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
  }
  *((_QWORD *)v1 + 1) = v2;
  return result;
}

_QWORD *sub_20BEB48EC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51ADF0;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20BEB4954((uint64_t)a1);
  sub_20BEB4A70(a1 + 4);
  *a1 = &unk_24C51AE78;
  return a1;
}

uint64_t sub_20BEB4954(uint64_t result)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;

  v1 = (_QWORD *)result;
  v2 = *(uint64_t **)(result + 8);
  __dmb(0xBu);
  while (v2)
  {
    v3 = *v2;
    __dmb(0xBu);
    v1[1] = v3;
    result = (*(uint64_t (**)(_QWORD *))(*v1 + 16))(v1);
    v2 = (uint64_t *)v1[1];
    __dmb(0xBu);
  }
  __dmb(0xBu);
  v1[2] = 0;
  return result;
}

uint64_t sub_20BEB49BC(uint64_t a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((tbb::internal::concurrent_vector_base_v3 *)(a1 + 40), 1, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>>>::initialize_array, 0);
  v3 = sub_20BEB4B94((unint64_t)v2);
  v4 = *(_QWORD *)(a1 + 64);
  __dmb(0xBu);
  v5 = *(_QWORD *)(v4 + 8 * v3) + (((_QWORD)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5);
  *(_BYTE *)(v5 + 8) = 1;
  return v5;
}

uint64_t sub_20BEB4A40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_20BEB4A54(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_20BEB4A5C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20BEB48EC(a1);
  operator delete(v1);
}

unint64_t *sub_20BEB4A70(unint64_t *a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  _QWORD *v3;
  unint64_t v4;
  void *v5;

  v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  v3 = (_QWORD *)a1[4];
  v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>>>::destroy_array);
  sub_20BEB4AD0((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

tbb::internal *sub_20BEB4AD0(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4;
  _QWORD *v7;
  tbb::internal *v8;
  tbb::internal *result;

  v4 = a3;
  if (a3 > a4)
  {
    v7 = a2 - 1;
    do
    {
      v8 = (tbb::internal *)v7[v4];
      v7[v4] = 0;
      if ((unint64_t)v8 >= 0x40)
        tbb::internal::NFS_Free(v8, a2);
      --v4;
    }
    while (v4 > a4);
    v4 = a4;
  }
  result = (tbb::internal *)*a2;
  if (*a2 >= 0x40uLL)
  {
    for (; v4; --v4)
      a2[v4 - 1] = 0;
    return (tbb::internal *)tbb::internal::NFS_Free(result, a2);
  }
  return result;
}

uint64_t tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>>>::destroy_array(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  if (a2)
  {
    v2 = (_BYTE *)(result + (a2 << 7) - 120);
    do
    {
      if (*v2)
        *v2 = 0;
      v2 -= 128;
      --a2;
    }
    while (a2);
  }
  return result;
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    bzero(a1, a3 << 7);
}

unint64_t sub_20BEB4B94(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;

  v1 = a1 | 1;
  if (HIDWORD(a1))
    v1 = HIDWORD(a1);
  v2 = 32 * (HIDWORD(a1) != 0);
  if (v1 >= 0x10000)
  {
    v1 >>= 16;
    v2 = (32 * (HIDWORD(a1) != 0)) | 0x10;
  }
  if (v1 >= 0x100)
  {
    v1 >>= 8;
    v2 |= 8uLL;
  }
  if (v1 >= 0x10)
  {
    v1 >>= 4;
    v2 |= 4uLL;
  }
  if (v1 >= 4)
  {
    v1 >>= 2;
    v2 += 2;
  }
  return ((v1 >> 1) & 1) + v2;
}

uint64_t sub_20BEB4C0C(uint64_t a1, char *a2, char *a3, char *a4)
{
  unsigned __int8 v5;
  int v6;
  _QWORD *v9;
  char *v10;
  char *v11;
  char *v12;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, 0, a3);
    *(_QWORD *)a1 = v9;
    if (v9)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a3, v9, v10);
      if (a4[23] >= 0)
        v12 = a4;
      else
        v12 = *(char **)a4;
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(v12, *(_DWORD **)a1, v11);
      v6 = 3;
    }
    else
    {
      v6 = 0;
    }
  }
  else
  {
    v6 = 0;
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v6;
  return a1;
}

_QWORD *sub_20BEB4CA0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t i;

  *a1 = &unk_24C51AE78;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_24C51ADF0;
  v2 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *v2 = &unk_24C51AEB0;
  a1[3] = v2;
  for (i = 9; i != 12; ++i)
    a1[i] = 0;
  a1[7] = 0;
  a1[6] = 0;
  a1[8] = a1 + 9;
  a1[5] = sub_20BEB4DA8;
  return a1;
}

void sub_20BEB4D3C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEB4D44()
{
  _QWORD *result;

  result = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *result = &unk_24C51AEB0;
  return result;
}

uint64_t sub_20BEB4D6C(uint64_t a1)
{
  void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_20BEB4DA0(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

uint64_t sub_20BEB4DA8(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

unsigned __int8 *sub_20BEB4DB8(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  char *v4;
  char *v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;

  v2 = a2;
  v16 = 0;
  v17 = 0;
  v4 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v5 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v5 = v4;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v16, (pxrInternal__aapl__pxrReserved__ *)a2, v5);
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = bswap64(0x9E3779B97F4A7C55 * v16);
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v7;
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v7;
  }
  v11 = *(unsigned __int8 ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (*v11)
  {
    v13 = (uint64_t)(a1 + 4);
    do
    {
      v14 = *((_QWORD *)v12 + 1);
      if (v7 == v14)
      {
        if ((sub_20BEB4EF8(v13, v12 + 16, v2) & 1) != 0)
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v6)
            v14 %= *(_QWORD *)&v6;
        }
        else
        {
          v14 &= *(_QWORD *)&v6 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = *(unsigned __int8 **)v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t sub_20BEB4EF8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unsigned __int8 *sub_20BEB4F9C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  unsigned __int8 *v5;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unsigned __int8 **v22;
  unint64_t v23;
  unsigned __int8 *v25;
  char v26;

  v5 = a2;
  v25 = 0;
  v26 = 0;
  v7 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v8 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v8 = v7;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, (pxrInternal__aapl__pxrReserved__ *)a2, v8);
  v9 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v5) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_20BEB5244(a1, v9, a3, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *(_QWORD *)v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25)
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  i = v25;
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20BEB5220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20BEB52E4((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BEB5244@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x28uLL);
  *(_QWORD *)(a4 + 8) = v7;
  *(_QWORD *)a4 = v8;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  if (*(char *)(a3 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a3;
    result[2] = *(_QWORD *)(a3 + 16);
  }
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BEB52C8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BEB52E4(v3, v2);
  _Unwind_Resume(a1);
}

void sub_20BEB52E4(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_20BEB5330(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(sub_20BEB47BC(v2) + 14))
    return *a1;
  return 0;
}

_QWORD *sub_20BEB5370(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  _QWORD **v13;
  _QWORD *i;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v7 = *(_QWORD *)(a2 + 8);
  if (v7)
  {
    v8 = sub_20BEB47BC((uint64_t *)(a2 + 8));
    v7 = 0x9E3779B97F4A7C55 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  }
  v9 = bswap64(v7);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    v13 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = (_QWORD *)*i)
      {
        v15 = i[1];
        if (v15 == v9)
        {
          if (sub_20BEB560C((uint64_t)(i + 2), a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (_QWORD *)(a1 + 16);
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v9;
  v17 = a3[1];
  i[2] = *a3;
  i[3] = v17;
  if (v17)
  {
    v18 = (unsigned int *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_20BDEC6E0(a1, v25);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v27)
  {
    *i = *v27;
LABEL_43:
    *v27 = i;
    goto LABEL_44;
  }
  *i = *v16;
  *v16 = i;
  *(_QWORD *)(v26 + 8 * v3) = v16;
  if (*i)
  {
    v28 = *(_QWORD *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v28 >= v10)
        v28 %= v10;
    }
    else
    {
      v28 &= v10 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_43;
  }
LABEL_44:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20BEB55F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20BEB5678(v11, v10);
  _Unwind_Resume(a1);
}

BOOL sub_20BEB560C(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = (uint64_t *)(a1 + 8);
  if (v4)
  {
    v5 = sub_20BEB47BC(v3);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  else
  {
    v6 = 0;
  }
  v8 = *(_QWORD *)(a2 + 8);
  v7 = (uint64_t *)(a2 + 8);
  if (v8)
  {
    v9 = sub_20BEB47BC(v7);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
  }
  else
  {
    v10 = 0;
  }
  return v6 == v10;
}

void sub_20BEB5678(uint64_t a1, _QWORD *__p)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (unsigned int *)__p[3];
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *sub_20BEB56E0(_QWORD *a1, uint64_t a2)
{
  uint64_t *result;

  result = sub_20BEB5714(a1, a2);
  if (result)
  {
    sub_20BEB5834(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

_QWORD *sub_20BEB5714(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = sub_20BEB47BC((uint64_t *)(a2 + 8));
    v4 = 0x9E3779B97F4A7C55 * (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
  }
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = bswap64(v4);
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v7;
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v7;
  }
  v11 = *(_QWORD **)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = (_QWORD *)*v11;
  if (*v11)
  {
    do
    {
      v13 = v12[1];
      if (v13 == v7)
      {
        if (sub_20BEB560C((uint64_t)(v12 + 2), a2))
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v13 >= *(_QWORD *)&v6)
            v13 %= *(_QWORD *)&v6;
        }
        else
        {
          v13 &= *(_QWORD *)&v6 - 1;
        }
        if (v13 != v10)
          return 0;
      }
      v12 = (_QWORD *)*v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t sub_20BEB5834(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  sub_20BEB587C(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    sub_20BEB5678((uint64_t)&v6, v3);
  return v2;
}

_QWORD *sub_20BEB587C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t sub_20BEB59B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v4;
  int v5;
  uint64_t v7;

  v4 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v4 & 1) != 0)
  {
    v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, 0);
    *(_QWORD *)a1 = v7;
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a3, v7);
      v5 = 2;
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return a1;
}

_QWORD *sub_20BEB5A20(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_20BEB5AD8((unint64_t *)(a2 + 8), &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_20BEB5AC0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B0D8(v3);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20BEB5AD8@<X0>(unint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *result;
  unint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  result = (_DWORD *)atomic_load(a1);
  if (!result)
  {
    result = operator new(0x10uLL);
    result[2] = 1;
    *(_QWORD *)result = off_24C51BE78;
    *((_WORD *)result + 6) = 0;
    *((_BYTE *)result + 14) = 1;
    while (1)
    {
      v5 = __ldaxr(a1);
      if (v5)
        break;
      if (!__stlxr((unint64_t)result, a1))
        goto LABEL_7;
    }
    __clrex();
    (*(void (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
    result = (_DWORD *)v5;
  }
LABEL_7:
  *a2 = result;
  v6 = result + 2;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

uint64_t sub_20BEB5B80(unint64_t *a1, _BYTE *a2)
{
  unint64_t id_v3;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _opaque_pthread_t *v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v33;

  id_v3 = (unint64_t)tbb::internal::thread_get_id_v3();
  v5 = id_v3;
  v6 = id_v3 ^ (id_v3 >> 3);
  v8 = a1 + 1;
  v7 = (_QWORD *)a1[1];
  __dmb(0xBu);
  if (!v7)
  {
LABEL_7:
    *a2 = 0;
    v14 = a1 + 2;
    v15 = (*(uint64_t (**)(unint64_t *))*a1)(a1);
    do
    {
      v16 = __ldaxr(v14);
      v17 = v16 + 1;
    }
    while (__stlxr(v17, v14));
    v18 = *v8;
    __dmb(0xBu);
    if (v18)
    {
      v19 = *(_QWORD *)(v18 + 8);
      if (v17 <= (unint64_t)(1 << v19) >> 1)
      {
LABEL_28:
        v26 = *v8;
        __dmb(0xBu);
        v27 = *(_QWORD *)(v26 + 8);
        v28 = ~(-1 << v27);
        v29 = v6 >> -(char)v27;
        v30 = v26 + 16;
        while (1)
        {
          v31 = (unint64_t *)(v30 + 16 * v29);
          if (!*v31)
            break;
LABEL_36:
          v29 = (v29 + 1) & v28;
        }
        do
        {
          while (__ldaxr(v31))
          {
            __clrex();
            do
              v33 = __ldxr(v31);
            while (__stxr(v33, v31));
            if (v33)
              goto LABEL_36;
          }
        }
        while (__stlxr(v5, v31));
        *(_QWORD *)(v30 + 16 * v29 + 8) = v15;
        return v15;
      }
    }
    else
    {
      v19 = 2;
    }
    v21 = v19 - 1;
    do
      v22 = 1 << v21++;
    while (v17 > v22);
    v23 = (unint64_t *)(*(uint64_t (**)(unint64_t *, uint64_t))(*a1 + 8))(a1, (16 << v21) + 16);
    v23[1] = v21;
    bzero(v23 + 2, 16 << v21);
    while (1)
    {
      *v23 = v18;
      do
      {
        while (1)
        {
          v24 = __ldaxr(v8);
          if (v24 == v18)
            break;
          __clrex();
          do
            v25 = __ldxr(v8);
          while (__stxr(v25, v8));
          if (v25 != v18)
            goto LABEL_25;
        }
      }
      while (__stlxr((unint64_t)v23, v8));
      v25 = v18;
LABEL_25:
      if (v18 == v25)
        goto LABEL_28;
      v18 = v25;
      if (*(_QWORD *)(v25 + 8) >= v21)
      {
        (*(void (**)(unint64_t *, unint64_t *, uint64_t))(*a1 + 16))(a1, v23, (16 << v23[1]) + 16);
        goto LABEL_28;
      }
    }
  }
  while (1)
  {
    v9 = v7[1];
    v10 = v6 >> -(char)v9;
    v11 = v7 + 2;
    v12 = (_opaque_pthread_t *)v7[2 * v10 + 2];
    if (v12)
      break;
LABEL_6:
    v7 = (_QWORD *)*v7;
    if (!v7)
      goto LABEL_7;
  }
  v13 = ~(-1 << v9);
  while (v12 != (_opaque_pthread_t *)id_v3)
  {
    v10 = (v10 + 1) & v13;
    v12 = (_opaque_pthread_t *)v11[2 * v10];
    if (!v12)
      goto LABEL_6;
  }
  v20 = *v8;
  __dmb(0xBu);
  *a2 = 1;
  v15 = v11[2 * v10 + 1];
  if (v7 != (_QWORD *)v20)
    goto LABEL_28;
  return v15;
}

uint64_t sub_20BEB5DD0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BEB5E44((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BEB5E44(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 16);
    do
    {
      v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20BEB5ED4((uint64_t)v12);
  return v10;
}

uint64_t sub_20BEB5ED4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BEB5F08((unsigned int *)a1);
  return a1;
}

unsigned int *sub_20BEB5F08(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *(_QWORD *)(*((_QWORD *)result + 2) + 8);
  v2 = *(_QWORD *)(*((_QWORD *)result + 1) + 8);
  while (v1 != v2)
  {
    result = *(unsigned int **)(v1 + 8);
    if (result)
    {
      v3 = result + 2;
      do
      {
        v4 = __ldxr(v3);
        v5 = v4 - 1;
      }
      while (__stlxr(v5, v3));
      if (!v5)
        result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
    }
    v1 += 16;
  }
  return result;
}

unsigned int *sub_20BEB5F68(unsigned int *a1)
{
  sub_20BEB5F98(a1);
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

unsigned int *sub_20BEB5F98(unsigned int *result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      *((_QWORD *)v3 + 2) = v1 - 16;
      result = *(unsigned int **)(v1 - 8);
      if (result)
      {
        v4 = result + 2;
        do
        {
          v5 = __ldxr(v4);
          v6 = v5 - 1;
        }
        while (__stlxr(v6, v4));
        if (!v6)
          result = (unsigned int *)(*(uint64_t (**)(unsigned int *))(*(_QWORD *)result + 8))(result);
      }
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20BEB6000(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BEB6074((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BEB6074(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 16);
    do
    {
      v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20BEB6104((uint64_t)v12);
  return v10;
}

uint64_t sub_20BEB6104(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BEB5F08((unsigned int *)a1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::TfUnicodeXidStartFlagData *pxrInternal__aapl__pxrReserved__::TfUnicodeXidStartFlagData::TfUnicodeXidStartFlagData(pxrInternal__aapl__pxrReserved__::TfUnicodeXidStartFlagData *this)
{
  int *v2;
  unsigned int v3;
  unsigned int v4;

  bzero(this, 0x22000uLL);
  v2 = (int *)"A";
  do
  {
    v3 = *v2;
    v4 = v2[1];
    while (v3 <= v4)
    {
      *(_QWORD *)((char *)this + (((unint64_t)v3 >> 3) & 0x1FFFFFF8)) |= 1 << v3;
      ++v3;
    }
    v2 += 2;
  }
  while (v2 != &dword_20CA56424);
  return this;
}

{
  int *v2;
  unsigned int v3;
  unsigned int v4;

  bzero(this, 0x22000uLL);
  v2 = (int *)"A";
  do
  {
    v3 = *v2;
    v4 = v2[1];
    while (v3 <= v4)
    {
      *(_QWORD *)((char *)this + (((unint64_t)v3 >> 3) & 0x1FFFFFF8)) |= 1 << v3;
      ++v3;
    }
    v2 += 2;
  }
  while (v2 != &dword_20CA56424);
  return this;
}

pxrInternal__aapl__pxrReserved__::TfUnicodeXidContinueFlagData *pxrInternal__aapl__pxrReserved__::TfUnicodeXidContinueFlagData::TfUnicodeXidContinueFlagData(pxrInternal__aapl__pxrReserved__::TfUnicodeXidContinueFlagData *this)
{
  int *v2;
  unsigned int v3;
  unsigned int v4;

  bzero(this, 0x22000uLL);
  v2 = &dword_20CA56424;
  do
  {
    v3 = *v2;
    v4 = v2[1];
    while (v3 <= v4)
    {
      *(_QWORD *)((char *)this + (((unint64_t)v3 >> 3) & 0x1FFFFFF8)) |= 1 << v3;
      ++v3;
    }
    v2 += 2;
  }
  while (v2 != (int *)"N32pxrInternal__aapl__pxrReserved__12TfAnyWeakPtr12_EmptyHolderE");
  return this;
}

{
  int *v2;
  unsigned int v3;
  unsigned int v4;

  bzero(this, 0x22000uLL);
  v2 = &dword_20CA56424;
  do
  {
    v3 = *v2;
    v4 = v2[1];
    while (v3 <= v4)
    {
      *(_QWORD *)((char *)this + (((unint64_t)v3 >> 3) & 0x1FFFFFF8)) |= 1 << v3;
      ++v3;
    }
    v2 += 2;
  }
  while (v2 != (int *)"N32pxrInternal__aapl__pxrReserved__12TfAnyWeakPtr12_EmptyHolderE");
  return this;
}

char *pxrInternal__aapl__pxrReserved__::TfUnicodeGetXidStartFlagData(pxrInternal__aapl__pxrReserved__ *this)
{
  char *result;

  result = (char *)atomic_load(&qword_254785098);
  if (!result)
    return sub_20BEB6368(&qword_254785098);
  return result;
}

char *pxrInternal__aapl__pxrReserved__::TfUnicodeGetXidContinueFlagData(pxrInternal__aapl__pxrReserved__ *this)
{
  char *result;

  result = (char *)atomic_load(&qword_2547850A0);
  if (!result)
    return sub_20BEB6434(&qword_2547850A0);
  return result;
}

char *sub_20BEB6368(unint64_t *a1)
{
  char *result;

  result = sub_20BEB63AC();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
    operator delete(result);
  return (char *)atomic_load(a1);
}

char *sub_20BEB63AC()
{
  char *v0;
  int *v1;
  unsigned int v2;
  unsigned int v3;

  v0 = (char *)operator new(0x22000uLL);
  bzero(v0, 0x22000uLL);
  v1 = (int *)"A";
  do
  {
    v2 = *v1;
    v3 = v1[1];
    while (v2 <= v3)
    {
      *(_QWORD *)&v0[((unint64_t)v2 >> 3) & 0x1FFFFFF8] |= 1 << v2;
      ++v2;
    }
    v1 += 2;
  }
  while (v1 != &dword_20CA56424);
  return v0;
}

char *sub_20BEB6434(unint64_t *a1)
{
  char *result;

  result = sub_20BEB6478();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
    operator delete(result);
  return (char *)atomic_load(a1);
}

char *sub_20BEB6478()
{
  char *v0;
  int *v1;
  unsigned int v2;
  unsigned int v3;

  v0 = (char *)operator new(0x22000uLL);
  bzero(v0, 0x22000uLL);
  v1 = &dword_20CA56424;
  do
  {
    v2 = *v1;
    v3 = v1[1];
    while (v2 <= v3)
    {
      *(_QWORD *)&v0[((unint64_t)v2 >> 3) & 0x1FFFFFF8] |= 1 << v2;
      ++v2;
    }
    v1 += 2;
  }
  while (v1 != (int *)"N32pxrInternal__aapl__pxrReserved__12TfAnyWeakPtr12_EmptyHolderE");
  return v0;
}

void pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::Clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_24C51AF48;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::IsInvalid(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::GetUniqueIdentifier(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::GetWeakBase(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::operator BOOL()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::_IsConst(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::GetPythonObject(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::GetTypeInfo(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::_GetMostDerivedPtr(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder::_IsPolymorphic(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::_EmptyHolder *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::IsInvalid(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *))(*(_QWORD *)this + 24))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetUniqueIdentifier(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *))(*(_QWORD *)this + 32))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetWeakBase(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *))(*(_QWORD *)this + 40))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator BOOL(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator!(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) ^ 1;
}

BOOL pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return v3 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
}

BOOL pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::operator<(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  return v3 < (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetTypeInfo(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *))(*(_QWORD *)this + 72))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr::GetType(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::TfAnyWeakPtr *))(*(_QWORD *)this + 80))(this);
}

char *pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper::TfAtomicOfstreamWrapper(char *__dst, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v3;
  }
  v4 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 8);
  v5 = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 16);
  *((_QWORD *)__dst + 6) = v4;
  *((_QWORD *)__dst + 3) = 0;
  *((_QWORD *)__dst + 4) = 0;
  *((_QWORD *)__dst + 5) = 0;
  v6 = MEMORY[0x24BEDB840];
  v7 = MEMORY[0x24BEDB840] + 64;
  *((_QWORD *)__dst + 58) = MEMORY[0x24BEDB840] + 64;
  *(_QWORD *)&__dst[*(_QWORD *)(v4 - 24) + 48] = v5;
  v8 = (std::ios_base *)&__dst[*(_QWORD *)(*((_QWORD *)__dst + 6) - 24) + 48];
  std::ios_base::init(v8, __dst + 56);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  *((_QWORD *)__dst + 6) = v6 + 24;
  *((_QWORD *)__dst + 58) = v7;
  MEMORY[0x212B92AA8](__dst + 56);
  return __dst;
}

void sub_20BEB6750(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  std::ostream::~ostream();
  MEMORY[0x212B92EB0](v2);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper::~TfAtomicOfstreamWrapper(pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper *this)
{
  uint64_t v2;
  uint64_t v3;

  pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper::Cancel((uint64_t)this, 0);
  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *((_QWORD *)this + 6) = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)this + *(_QWORD *)(v3 - 24) + 48) = *(_QWORD *)(v2 + 24);
  MEMORY[0x212B92AB4]((char *)this + 56);
  std::ostream::~ostream();
  MEMORY[0x212B92EB0]((char *)this + 464);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper::Cancel(uint64_t a1, uint64_t a2)
{
  std::ios_base *v4;
  const char **v5;
  const char *v6;
  int *v8;
  const char *v9;
  char *v10;
  void **v11;
  void *__p[2];
  char v13;
  __int128 v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 176))
  {
    if (!std::filebuf::close())
    {
      v4 = (std::ios_base *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24));
      std::ios_base::clear(v4, v4->__rdstate_ | 4);
    }
    v5 = (const char **)(a1 + 24);
    v6 = (const char *)(a1 + 24);
    if (*(char *)(a1 + 47) < 0)
      v6 = *v5;
    if (!unlink(v6) || *__error() == 2)
      return 1;
    if (a2)
    {
      if (*(char *)(a1 + 47) < 0)
        v5 = (const char **)*v5;
      v8 = __error();
      pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v8, __p);
      if (v13 >= 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unable to remove temporary file '%s': %s", v9, v10, v5, v11);
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_OWORD *)a2 = v14;
      *(_QWORD *)(a2 + 16) = v15;
      HIBYTE(v15) = 0;
      LOBYTE(v14) = 0;
      if (v13 < 0)
        operator delete(__p[0]);
    }
  }
  else if (a2)
  {
    MEMORY[0x212B929D0](a2, "Buffer is not open");
  }
  return 0;
}

void sub_20BEB695C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper::Open(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  void **v5;
  _QWORD *v6;
  int v7;
  int v8;
  const char *v9;
  char *v10;
  void **v11;
  void *v13[2];
  char v14;
  __int128 v15;
  uint64_t v16;
  std::string __p;
  void *v18[2];
  uint64_t v19;

  if (*(_QWORD *)(a1 + 176))
  {
    if (a2)
      MEMORY[0x212B929D0](a2, "Stream is already open");
    return 0;
  }
  v18[0] = 0;
  v18[1] = 0;
  v19 = 0;
  if (*(char *)(a1 + 23) < 0)
    sub_20BDDBFAC(&__p, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __p = *(std::string *)a1;
  if (a2)
    v5 = (void **)a2;
  else
    v5 = v18;
  v6 = (_QWORD *)(a1 + 24);
  v7 = pxrInternal__aapl__pxrReserved__::Tf_CreateSiblingTempFile(&__p, (std::string *)a1, (std::string *)(a1 + 24), (uint64_t)v5);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v7 == -1)
    goto LABEL_25;
  close(v7);
  std::ofstream::open();
  v8 = *(_DWORD *)(a1 + 48 + *(_QWORD *)(*(_QWORD *)(a1 + 48) - 24) + 32) & 5;
  v3 = v8 == 0;
  if (a2 && v8)
  {
    if (*(char *)(a1 + 47) < 0)
      v6 = (_QWORD *)*v6;
    pxrInternal__aapl__pxrReserved__::ArchStrerror(v13);
    if (v14 >= 0)
      v11 = v13;
    else
      v11 = (void **)v13[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unable to open '%s' for writing: %s", v9, v10, v6, v11);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v15;
    *(_QWORD *)(a2 + 16) = v16;
    HIBYTE(v16) = 0;
    LOBYTE(v15) = 0;
    if (v14 < 0)
      operator delete(v13[0]);
LABEL_25:
    v3 = 0;
  }
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
  return v3;
}

void sub_20BEB6B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v25 - 33) < 0)
    operator delete(*(void **)(v25 - 56));
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfAtomicOfstreamWrapper::Commit(const std::__fs::filesystem::path *a1, _BOOL8 a2)
{
  _BOOL8 v2;
  std::ios_base *v4;
  void **v5;
  void *__p[2];
  uint64_t v8;

  v2 = a2;
  if (a1[7].__pn_.__r_.__value_.__l.__size_)
  {
    if (!std::filebuf::close())
    {
      v4 = (std::ios_base *)((char *)&a1[2] + *(_QWORD *)(a1[2].__pn_.__r_.__value_.__r.__words[0] - 24));
      std::ios_base::clear(v4, v4->__rdstate_ | 4);
    }
    __p[0] = 0;
    __p[1] = 0;
    v8 = 0;
    if (v2)
      v5 = (void **)v2;
    else
      v5 = __p;
    v2 = pxrInternal__aapl__pxrReserved__::Tf_AtomicRenameFileOver(a1 + 1, a1, (uint64_t)v5);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  else if (a2)
  {
    MEMORY[0x212B929D0](a2, "Stream is not open");
    return 0;
  }
  return v2;
}

void sub_20BEB6C0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::TfBigRWMutex *pxrInternal__aapl__pxrReserved__::TfBigRWMutex::TfBigRWMutex(pxrInternal__aapl__pxrReserved__::TfBigRWMutex *this)
{
  void *v2;

  v2 = operator new[](0x800uLL);
  bzero(v2, 0x800uLL);
  *(_QWORD *)this = v2;
  *((_BYTE *)this + 8) = 0;
  return this;
}

{
  void *v2;

  v2 = operator new[](0x800uLL);
  bzero(v2, 0x800uLL);
  *(_QWORD *)this = v2;
  *((_BYTE *)this + 8) = 0;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfBigRWMutex::_AcquireReadContended(uint64_t this, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  v2 = this;
  v3 = a2;
  while (1)
  {
    while (1)
    {
      v4 = atomic_load((unsigned __int8 *)(v2 + 8));
      if ((v4 & 1) == 0)
        break;
      this = sched_yield();
    }
    v5 = (unsigned int *)(*(_QWORD *)v2 + (v3 << 7));
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      break;
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 - 2, v5));
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfBigRWMutex::_AcquireWrite(pxrInternal__aapl__pxrReserved__::TfBigRWMutex *this)
{
  unsigned __int8 *v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  uint64_t v6;
  char v7;
  uint64_t result;
  int v9;
  BOOL v10;
  _OWORD v11[4];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned __int8 *)this + 8;
  do
    v3 = __ldaxr(v2);
  while (__stlxr(1u, v2));
  if ((v3 & 1) != 0)
  {
    do
    {
      do
      {
        sched_yield();
        v4 = atomic_load(v2);
      }
      while ((v4 & 1) != 0);
      do
        v5 = __ldaxr(v2);
      while (__stlxr(1u, v2));
    }
    while ((v5 & 1) != 0);
  }
  v6 = 0;
  memset(v11, 0, sizeof(v11));
  v7 = 1;
  do
  {
    result = sub_20BEB6DF4((unsigned int *)(*(_QWORD *)this + (v6 << 7)), *((_DWORD *)v11 + v6));
    *((_DWORD *)v11 + v6) = result;
    v9 = v7 & ((_DWORD)result == 2);
    v10 = v6 == 15;
    if (v6 == 15)
      v6 = 0;
    else
      ++v6;
    if (v10)
      v7 = 1;
    else
      v7 &= (_DWORD)result == 2;
  }
  while (!v10 || !v9);
  return result;
}

void sub_20BEB6DE8(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

uint64_t sub_20BEB6DF4(unsigned int *a1, int a2)
{
  unsigned int v2;
  unsigned int v3;

  if (a2 == 1)
  {
    pxrInternal__aapl__pxrReserved__::TfSpinRWMutex::_WaitForReaders(a1);
    return 2;
  }
  if (a2)
    return 2;
  do
    v2 = __ldaxr(a1);
  while (__stlxr(v2 | 1, a1));
  if (v2)
    v3 = 1;
  else
    v3 = 2;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::TfBigRWMutex::_ReleaseWrite(unsigned __int8 *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v1 = 0;
  atomic_store(0, this + 8);
  v2 = *(_QWORD *)this;
  do
  {
    v3 = (unsigned int *)(v2 + (v1 << 7));
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 & 0xFFFFFFFE, v3));
    ++v1;
  }
  while (v1 != 16);
  return this;
}

unint64_t sub_20BEB6E74(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  void *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__22Tf_DebugSymbolRegistryE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C(&v15, "Tf", "TfSingleton::_CreateInstance", __p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(byte_25473B168);
  while (__stlxr(1u, byte_25473B168));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = operator new(0x68uLL);
      sub_20BEB8C78((unint64_t)v10);
      v12 = atomic_load(a1);
      if (v12)
      {
        if (v10 != (void *)v12)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_DebugSymbol"
                "Registry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance");
        }
      }
      else
      {
        do
          v13 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_DebugSymbol"
                "Registry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, byte_25473B168);
  }
  v6 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v6;
}

void sub_20BEB703C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::TimedScopeHelper<true>::TimedScopeHelper(uint64_t a1, int a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  uint64_t v4;
  const char *v5;
  FILE *v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v10;
  uint64_t v11;
  va_list v12;
  va_list va;

  va_start(va, this);
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)a1 = a2;
  if (a2)
  {
    va_copy(v12, va);
    pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&v10, this, va, (char *)this);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)v4);
    *(_OWORD *)v4 = v10;
    *(_QWORD *)(v4 + 16) = v11;
    v5 = (const char *)v4;
    if (*(char *)(a1 + 31) < 0)
      v5 = *(const char **)v4;
    sub_20BEB8114();
    v6 = (FILE *)atomic_load((unint64_t *)&qword_2547850B0);
    v7 = atomic_load(&dword_2547850A8);
    fprintf(v6, "%*s%s --{\n", 2 * v7, "", v5);
    do
      v8 = __ldaxr(&dword_2547850A8);
    while (__stlxr(v8 + 1, &dword_2547850A8));
    *(_QWORD *)(a1 + 40) = mach_absolute_time();
  }
  return a1;
}

{
  uint64_t v4;
  const char *v5;
  FILE *v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v10;
  uint64_t v11;
  va_list v12;
  va_list va;

  va_start(va, this);
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = a1 + 8;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)a1 = a2;
  if (a2)
  {
    va_copy(v12, va);
    pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&v10, this, va, (char *)this);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*(void **)v4);
    *(_OWORD *)v4 = v10;
    *(_QWORD *)(v4 + 16) = v11;
    v5 = (const char *)v4;
    if (*(char *)(a1 + 31) < 0)
      v5 = *(const char **)v4;
    sub_20BEB8114();
    v6 = (FILE *)atomic_load((unint64_t *)&qword_2547850B0);
    v7 = atomic_load(&dword_2547850A8);
    fprintf(v6, "%*s%s --{\n", 2 * v7, "", v5);
    do
      v8 = __ldaxr(&dword_2547850A8);
    while (__stlxr(v8 + 1, &dword_2547850A8));
    *(_QWORD *)(a1 + 40) = mach_absolute_time();
  }
  return a1;
}

void sub_20BEB7188(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::_ScopedOutput(pxrInternal__aapl__pxrReserved__::TfDebug *this, const char *a2, const char *a3)
{
  char v4;
  FILE *v5;
  unsigned int v6;
  uint64_t result;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;

  v4 = (char)this;
  sub_20BEB8114();
  v5 = (FILE *)atomic_load((unint64_t *)&qword_2547850B0);
  if ((v4 & 1) != 0)
  {
    v6 = atomic_load(&dword_2547850A8);
    result = fprintf(v5, "%*s%s --{\n", 2 * v6, "", a2);
    do
      v8 = __ldaxr(&dword_2547850A8);
    while (__stlxr(v8 + 1, &dword_2547850A8));
  }
  else
  {
    do
      v9 = __ldaxr(&dword_2547850A8);
    while (__stlxr(v9 - 1, &dword_2547850A8));
    v10 = atomic_load(&dword_2547850A8);
    return fprintf(v5, "%*s}-- %s\n", 2 * v10, "", a2);
  }
  return result;
}

void sub_20BEB7348(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::TimedScopeHelper<true>::~TimedScopeHelper(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__ *v2;
  _QWORD *v3;
  double v4;
  const char *v5;
  char *v6;
  int v7;
  void **v8;
  void **p_p;
  FILE *v10;
  unsigned int v11;
  unsigned int v12;
  void *__p;
  char v15;

  if (*(_BYTE *)a1)
  {
    v2 = (pxrInternal__aapl__pxrReserved__ *)(mach_absolute_time() - *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32));
    *(_QWORD *)(a1 + 32) = v2;
    ++*(_QWORD *)(a1 + 48);
    v3 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v3 = (_QWORD *)*v3;
    v4 = pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds(v2);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s: %.3f ms", v5, v6, v3, v4 * 1000.0);
    v7 = v15;
    v8 = (void **)__p;
    sub_20BEB8114();
    p_p = &__p;
    if (v7 < 0)
      p_p = v8;
    v10 = (FILE *)atomic_load((unint64_t *)&qword_2547850B0);
    do
      v11 = __ldaxr(&dword_2547850A8);
    while (__stlxr(v11 - 1, &dword_2547850A8));
    v12 = atomic_load(&dword_2547850A8);
    fprintf(v10, "%*s}-- %s\n", 2 * v12, "", (const char *)p_p);
    if (v15 < 0)
      operator delete(__p);
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__7TfDebug16TimedScopeHelperILb1EED2Ev(a1);
}

void pxrInternal__aapl__pxrReserved__::TfDebug::SetDebugSymbolsByName(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  char *v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  void *__p[2];
  std::string::size_type v15;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = atomic_load(&qword_25473B160);
  if (!v6)
    v6 = sub_20BEB6E74(&qword_25473B160);
  if (a2)
    v7 = "";
  else
    v7 = "-";
  sub_20BDDC0E4(&v13, v7);
  v8 = *(char *)(a1 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a1;
  else
    v9 = *(const std::string::value_type **)a1;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a1 + 23);
  else
    v10 = *(_QWORD *)(a1 + 8);
  v11 = std::string::append(&v13, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v15 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB75B0(v6, (uint64_t)__p, a3);
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_20BEB7564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_20BDE5038((void ***)&a10);
  _Unwind_Resume(a1);
}

void sub_20BEB75B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  _BYTE *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t **v19;
  char **v20;
  char *v21;
  __int16 v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  const char *v31;
  char *v32;
  std::string *v33;
  const char *v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned __int8 v37;
  _BYTE *v38;
  _BYTE *v39;
  std::string __p;
  void *v41[2];
  char v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;

  if (sub_20BEB8B64(2))
  {
    sub_20BDDC0E4(v41, "_SetByPattern");
    sub_20BDDC0E4(&__p, "void pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry::_SetByPattern(std::string, std::vector<std::string> *)");
    pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)v41, &__p, &v43);
    v6 = std::string::append(&v43, ": pattern = ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = (const std::string::value_type *)a2;
    else
      v9 = *(const std::string::value_type **)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    v11 = std::string::append(&v44, v9, v10);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    v13 = std::string::append(&v45, "\n");
    v46 = *v13;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((uint64_t)&v46);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v42 < 0)
      operator delete(v41[0]);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    v15 = *(_QWORD *)(a2 + 8);
    if (!v15)
      return;
    if (v15 != 1)
      goto LABEL_28;
    v14 = *(_BYTE **)a2;
LABEL_27:
    if (*v14 == 45)
      return;
    goto LABEL_28;
  }
  if (!*(_BYTE *)(a2 + 23))
    return;
  v14 = (_BYTE *)a2;
  if (*(_BYTE *)(a2 + 23) == 1)
    goto LABEL_27;
LABEL_28:
  sub_20BEB3FEC((uint64_t)&v43, a1);
  v16 = *(_QWORD **)(a1 + 32);
  v17 = (_QWORD *)(a1 + 40);
  if (v16 != (_QWORD *)(a1 + 40))
  {
    v18 = 0;
    v19 = (uint64_t **)(a1 + 8);
    do
    {
      v20 = (char **)(v16 + 4);
      v21 = (char *)(v16 + 4);
      if (*((char *)v16 + 55) < 0)
        v21 = *v20;
      v22 = sub_20BEB91E4(v21, (__int128 *)a2, 1);
      if ((v22 & 1) != 0)
      {
        if (a3)
        {
          v23 = a3[1];
          if (v23 >= a3[2])
          {
            v24 = sub_20BE4EE50(a3, (__int128 *)v16 + 2);
          }
          else
          {
            sub_20BE4EDF4(a3, (__int128 *)v16 + 2);
            v24 = v23 + 24;
          }
          a3[1] = v24;
        }
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)(v16 + 4);
        v25 = v22 & 0x100;
        *((_BYTE *)sub_20BEB938C(v19, (const void **)v16 + 4, (uint64_t)&unk_20CAC184C, (__int128 **)&v46) + 56) = BYTE1(v25);
        if (v25)
          v26 = 2;
        else
          v26 = 1;
        v27 = (_QWORD *)v16[7];
        if (v27 != v16 + 8)
        {
          do
          {
            atomic_store(v26, (unsigned int *)v27[4]);
            v28 = (_QWORD *)v27[1];
            if (v28)
            {
              do
              {
                v29 = v28;
                v28 = (_QWORD *)*v28;
              }
              while (v28);
            }
            else
            {
              do
              {
                v29 = (_QWORD *)v27[2];
                v30 = *v29 == (_QWORD)v27;
                v27 = v29;
              }
              while (!v30);
            }
            v27 = v29;
          }
          while (v29 != v16 + 8);
        }
        if (sub_20BEB8B64(2))
        {
          sub_20BDDC0E4(&v45, "_SetByPattern");
          sub_20BDDC0E4(&v44, "void pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry::_SetByPattern(std::string, std::vector<std::string> *)");
          pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)&v45, &v44, &v46);
          v33 = &v46;
          if ((v46.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v33 = (std::string *)v46.__r_.__value_.__r.__words[0];
          if (*((char *)v16 + 55) < 0)
            v20 = (char **)*v20;
          v34 = "true";
          if (!v25)
            v34 = "false";
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s: set %s %s\n", v31, v32, v33, v20, v34);
          if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v46.__r_.__value_.__l.__data_);
          if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v44.__r_.__value_.__l.__data_);
          if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v45.__r_.__value_.__l.__data_);
        }
        v18 = 1;
      }
      v35 = (_QWORD *)v16[1];
      if (v35)
      {
        do
        {
          v36 = v35;
          v35 = (_QWORD *)*v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          v36 = (_QWORD *)v16[2];
          v30 = *v36 == (_QWORD)v16;
          v16 = v36;
        }
        while (!v30);
      }
      v16 = v36;
    }
    while (v36 != v17);
    if ((v18 & 1) != 0)
    {
      v37 = atomic_load(byte_2547850AC);
      if ((v37 & 1) != 0)
      {
        v38 = (_BYTE *)v43.__r_.__value_.__r.__words[0];
        __dmb(0xBu);
        *v38 = 0;
        v43.__r_.__value_.__r.__words[0] = 0;
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C51B0C0;
        pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&v46);
        pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice((pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *)&v46);
      }
    }
  }
  v39 = (_BYTE *)v43.__r_.__value_.__r.__words[0];
  if (v43.__r_.__value_.__r.__words[0])
  {
    __dmb(0xBu);
    *v39 = 0;
  }
}

void sub_20BEB79B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,_BYTE *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice((pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *)(v42 - 112));
  if (a24)
  {
    __dmb(0xBu);
    *a24 = 0;
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfDebug::IsDebugSymbolNameEnabled(char *a1)
{
  unint64_t v2;

  v2 = atomic_load(&qword_25473B160);
  if (!v2)
    v2 = sub_20BEB6E74(&qword_25473B160);
  return sub_20BEB7B00(v2, a1);
}

BOOL sub_20BEB7B00(uint64_t a1, char *a2)
{
  char *v4;
  _BOOL8 result;
  _BYTE *v6;
  _BYTE *v7;

  sub_20BEB3FEC((uint64_t)&v7, a1);
  if (a2[23] >= 0)
    v4 = a2;
  else
    v4 = *(char **)a2;
  result = sub_20BEB94C4(a1, v4);
  v6 = v7;
  if (v7)
  {
    __dmb(0xBu);
    *v6 = 0;
  }
  return result;
}

void sub_20BEB7B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfDebug::GetDebugSymbolDescriptions(std::string *a1@<X8>)
{
  unint64_t v3;

  v3 = atomic_load(&qword_25473B160);
  if (!v3)
    v3 = sub_20BEB6E74(&qword_25473B160);
  sub_20BEB7BAC(v3, a1);
}

void sub_20BEB7BAC(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  const char *v7;
  char *v8;
  void **v9;
  _QWORD *v10;
  void **v11;
  std::string::size_type v12;
  void *v13;
  void *v14;
  const char *v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  void **v19;
  std::string::size_type v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  _BYTE *v24;
  void *__p[2];
  unsigned __int8 v26;
  void *__b[2];
  unsigned __int8 v28;
  _BYTE *v29;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_20BEB3FEC((uint64_t)&v29, a1);
  v4 = *(_QWORD **)(a1 + 56);
  if (v4 != (_QWORD *)(a1 + 64))
  {
    do
    {
      v5 = v4 + 4;
      if (*((char *)v4 + 55) < 0)
      {
        v6 = v4[5];
        if (v6 >= 0x19)
        {
          v5 = (_QWORD *)*v5;
LABEL_23:
          v14 = operator new(0x20uLL);
          v17 = v14;
          memset(v14, 32, 25);
          v18 = v4 + 7;
          if (*((char *)v4 + 79) < 0)
            v18 = (_QWORD *)*v18;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s:\n%s  %s\n", v15, v16, v5, v14, v18);
          if ((v28 & 0x80u) == 0)
            v19 = __b;
          else
            v19 = (void **)__b[0];
          if ((v28 & 0x80u) == 0)
            v20 = v28;
          else
            v20 = (std::string::size_type)__b[1];
          std::string::append(a2, (const std::string::value_type *)v19, v20);
          if ((char)v28 < 0)
            operator delete(__b[0]);
          v13 = v17;
          goto LABEL_34;
        }
      }
      else
      {
        v6 = *((unsigned __int8 *)v4 + 55);
        if (v6 >= 0x19)
          goto LABEL_23;
      }
      sub_20BDDC468(__b, 25 - v6, 32);
      if (*((char *)v4 + 55) < 0)
        v5 = (_QWORD *)*v5;
      v9 = (void **)__b[0];
      if ((v28 & 0x80u) == 0)
        v9 = __b;
      v10 = v4 + 7;
      if (*((char *)v4 + 79) < 0)
        v10 = (_QWORD *)*v10;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s: %s\n", v7, v8, v5, v9, v10);
      if ((v26 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      if ((v26 & 0x80u) == 0)
        v12 = v26;
      else
        v12 = (std::string::size_type)__p[1];
      std::string::append(a2, (const std::string::value_type *)v11, v12);
      if ((char)v26 < 0)
        operator delete(__p[0]);
      if (((char)v28 & 0x80000000) == 0)
        goto LABEL_35;
      v13 = __b[0];
LABEL_34:
      operator delete(v13);
LABEL_35:
      v21 = (_QWORD *)v4[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v4[2];
          v23 = *v22 == (_QWORD)v4;
          v4 = v22;
        }
        while (!v23);
      }
      v4 = v22;
    }
    while (v22 != (_QWORD *)(a1 + 64));
  }
  v24 = v29;
  if (v29)
  {
    __dmb(0xBu);
    *v24 = 0;
  }
}

void sub_20BEB7DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  uint64_t v25;

  if (*(char *)(v25 + 23) < 0)
    operator delete(*(void **)v25);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::GetDebugSymbolNames@<X0>(uint64_t *a1@<X8>)
{
  unint64_t v3;

  v3 = atomic_load(&qword_25473B160);
  if (!v3)
    v3 = sub_20BEB6E74(&qword_25473B160);
  return sub_20BEB7E7C(v3, a1);
}

uint64_t sub_20BEB7E7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  __int128 *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _BYTE *v12;
  _BYTE *v13;

  sub_20BEB3FEC((uint64_t)&v13, a1);
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = sub_20BE71C2C(a2, *(_QWORD *)(a1 + 48));
  v5 = *(_QWORD **)(a1 + 32);
  v6 = (_QWORD *)(a1 + 40);
  if (v5 != (_QWORD *)(a1 + 40))
  {
    v7 = a2[1];
    do
    {
      v8 = (__int128 *)(v5 + 4);
      if (v7 >= a2[2])
      {
        result = sub_20BE4EE50(a2, v8);
        v7 = result;
      }
      else
      {
        result = (uint64_t)sub_20BE4EDF4(a2, v8);
        v7 += 24;
      }
      a2[1] = v7;
      v9 = (_QWORD *)v5[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v5[2];
          v11 = *v10 == (_QWORD)v5;
          v5 = v10;
        }
        while (!v11);
      }
      v5 = v10;
    }
    while (v10 != v6);
  }
  v12 = v13;
  if (v13)
  {
    __dmb(0xBu);
    *v12 = 0;
  }
  return result;
}

void sub_20BEB7F58(_Unwind_Exception *a1, uint64_t a2, _BYTE *a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BDE5038((void ***)va);
  if (a3)
  {
    __dmb(0xBu);
    *a3 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::GetDebugSymbolDescription@<X0>(const void **a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;

  v4 = atomic_load(&qword_25473B160);
  if (!v4)
    v4 = sub_20BEB6E74(&qword_25473B160);
  return sub_20BEB7FC8(v4, a1, a2);
}

uint64_t sub_20BEB7FC8@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  __int128 v7;
  _BYTE *v8;
  _BYTE *v9;

  sub_20BEB3FEC((uint64_t)&v9, a1);
  result = sub_20BDEEBA4(a1 + 56, a2);
  if (a1 + 64 == result)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else if (*(char *)(result + 79) < 0)
  {
    result = (uint64_t)sub_20BDDBFAC((_BYTE *)a3, *(void **)(result + 56), *(_QWORD *)(result + 64));
  }
  else
  {
    v7 = *(_OWORD *)(result + 56);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(result + 72);
    *(_OWORD *)a3 = v7;
  }
  v8 = v9;
  if (v9)
  {
    __dmb(0xBu);
    *v8 = 0;
  }
  return result;
}

void sub_20BEB8068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfDebug::SetOutputFile(pxrInternal__aapl__pxrReserved__::TfDebug *this, __sFILE *a2)
{
  _QWORD v4[4];
  char v5;

  if ((pxrInternal__aapl__pxrReserved__::TfDebug *)*MEMORY[0x24BDAC8E8] == this || *MEMORY[0x24BDAC8D8] == (_QWORD)this)
  {
    sub_20BEB8114();
    atomic_store((unint64_t)this, (unint64_t *)&qword_2547850B0);
  }
  else
  {
    v4[0] = "tf/debug.cpp";
    v4[1] = "SetOutputFile";
    v4[2] = 398;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfDebug::SetOutputFile(FILE *)";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"TfDebug output must go to either stdout or stderr");
  }
}

void sub_20BEB8114()
{
  unsigned __int8 v0;
  _BOOL4 v1;
  uint64_t *v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;
  void *v7[2];
  char v8;

  v0 = atomic_load((unsigned __int8 *)&qword_2547850B8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2547850B8))
  {
    sub_20BDDC0E4(v5, "TF_DEBUG_OUTPUT_FILE");
    sub_20BDDC0E4(__p, "");
    pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v5, (uint64_t)__p, (uint64_t)v7);
    v1 = sub_20BEB90F0(v7, "stderr");
    v2 = (uint64_t *)MEMORY[0x24BDAC8D8];
    if (!v1)
      v2 = (uint64_t *)MEMORY[0x24BDAC8E8];
    qword_2547850B0 = *v2;
    if (v8 < 0)
      operator delete(v7[0]);
    if (v4 < 0)
      operator delete(__p[0]);
    if (v6 < 0)
      operator delete(v5[0]);
    __cxa_guard_release(&qword_2547850B8);
  }
}

void sub_20BEB81F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  __cxa_guard_abort(&qword_2547850B8);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfDebug::_SetNode(void *a1, char *a2, int a3)
{
  unint64_t v6;

  v6 = atomic_load(&qword_25473B160);
  if (!v6)
    v6 = sub_20BEB6E74(&qword_25473B160);
  sub_20BEB8294(v6, a1, a2, a3);
}

void sub_20BEB8294(uint64_t a1, void *a2, char *a3, int a4)
{
  uint64_t **v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t **v12;
  BOOL v13;
  unsigned __int8 v14;
  _BYTE *v15;
  _BYTE *v16;
  void *__p[2];
  char v18;
  _BYTE *v19;
  void **v20;

  sub_20BEB3FEC((uint64_t)&v19, a1);
  sub_20BDDC0E4(__p, a3);
  v20 = __p;
  v8 = (uint64_t **)sub_20BEB957C((uint64_t **)(a1 + 32), (const void **)__p, (uint64_t)&unk_20CAC184C, (_OWORD **)&v20);
  if (v18 < 0)
    operator delete(__p[0]);
  __p[0] = a2;
  sub_20BEB968C(v8 + 7, (unint64_t *)__p, (uint64_t *)__p);
  v9 = (uint64_t **)v8[7];
  if (v9 != v8 + 8)
  {
    if (a4)
      v10 = 2;
    else
      v10 = 1;
    do
    {
      atomic_store(v10, (unsigned int *)v9[4]);
      v11 = v9[1];
      if (v11)
      {
        do
        {
          v12 = (uint64_t **)v11;
          v11 = (uint64_t *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (uint64_t **)v9[2];
          v13 = *v12 == (uint64_t *)v9;
          v9 = v12;
        }
        while (!v13);
      }
      v9 = v12;
    }
    while (v12 != v8 + 8);
  }
  sub_20BDDC0E4(__p, a3);
  v20 = __p;
  *((_BYTE *)sub_20BEB9744((uint64_t **)(a1 + 8), (const void **)__p, (uint64_t)&unk_20CAC184C, (_OWORD **)&v20) + 56) = a4;
  if (v18 < 0)
    operator delete(__p[0]);
  v14 = atomic_load(byte_2547850AC);
  if ((v14 & 1) != 0)
  {
    v15 = v19;
    __dmb(0xBu);
    *v15 = 0;
    v19 = 0;
    __p[0] = &unk_24C51B0C0;
    pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)__p);
    pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice((pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *)__p);
  }
  v16 = v19;
  if (v19)
  {
    __dmb(0xBu);
    *v16 = 0;
  }
}

void sub_20BEB842C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, _BYTE *a16)
{
  _BYTE *v17;

  pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice((pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *)&__p);
  v17 = a16;
  if (a16)
  {
    __dmb(0xBu);
    *v17 = 0;
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode(void *a1, char *a2)
{
  unint64_t v4;

  v4 = atomic_load(&qword_25473B160);
  if (!v4)
    v4 = sub_20BEB6E74(&qword_25473B160);
  return sub_20BEB84C0(v4, a1, a2);
}

BOOL sub_20BEB84C0(uint64_t a1, void *a2, char *a3)
{
  uint64_t **v6;
  _BOOL8 result;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t **v11;
  BOOL v12;
  _BYTE *v13;
  void *__p[2];
  char v15;
  _BYTE *v16;
  void **v17;

  sub_20BEB3FEC((uint64_t)&v16, a1);
  sub_20BDDC0E4(__p, a3);
  v17 = __p;
  v6 = (uint64_t **)sub_20BEB957C((uint64_t **)(a1 + 32), (const void **)__p, (uint64_t)&unk_20CAC184C, (_OWORD **)&v17);
  if (v15 < 0)
    operator delete(__p[0]);
  __p[0] = a2;
  sub_20BEB968C(v6 + 7, (unint64_t *)__p, (uint64_t *)__p);
  result = sub_20BEB94C4(a1, a3);
  v8 = (uint64_t **)v6[7];
  if (v8 != v6 + 8)
  {
    if (result)
      v9 = 2;
    else
      v9 = 1;
    do
    {
      atomic_store(v9, (unsigned int *)v8[4]);
      v10 = v8[1];
      if (v10)
      {
        do
        {
          v11 = (uint64_t **)v10;
          v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (uint64_t **)v8[2];
          v12 = *v11 == (uint64_t *)v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
    }
    while (v11 != v6 + 8);
  }
  v13 = v16;
  if (v16)
  {
    __dmb(0xBu);
    *v13 = 0;
  }
  return result;
}

void sub_20BEB85DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, _BYTE *a16)
{
  if (a16)
  {
    __dmb(0xBu);
    *a16 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg(uint64_t a1)
{
  FILE *v2;
  const char *v3;

  sub_20BEB8114();
  v2 = (FILE *)atomic_load((unint64_t *)&qword_2547850B0);
  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  fputs(v3, v2);
  return fflush(v2);
}

void pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg(pxrInternal__aapl__pxrReserved__::TfDebug::Helper *this, const char *a2, char *a3, ...)
{
  void *__p[2];
  char v4;
  va_list v5;
  va_list va;

  va_start(va, a3);
  va_copy(v5, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_20BEB86AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(uint64_t a1, char *a2, char *a3)
{
  void **v5;
  void **v6;
  uint64_t v7;
  __int128 __p;
  uint64_t v9;
  const char *v10;
  char v11;
  int v12;
  void *v13[2];
  char v14;

  sub_20BDDC0E4(v13, a2);
  if (!a3)
  {
    *(_QWORD *)&__p = "tf/debug.cpp";
    *((_QWORD *)&__p + 1) = "_RegisterDebugSymbolImpl";
    v9 = 464;
    v10 = "static void pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(_Node *, const char *, const char *)";
    v11 = 0;
    v12 = 4;
    if (v14 >= 0)
      v6 = v13;
    else
      v6 = (void **)v13[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"description argument for '%s' is NULL", (const char *)v6);
  }
  if (!*a3)
  {
    *(_QWORD *)&__p = "tf/debug.cpp";
    *((_QWORD *)&__p + 1) = "_RegisterDebugSymbolImpl";
    v9 = 468;
    v10 = "static void pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(_Node *, const char *, const char *)";
    v11 = 0;
    v12 = 4;
    v5 = v13;
    if (v14 < 0)
      v5 = (void **)v13[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"description argument for '%s' is empty -- add description!", (const char *)v5);
  }
  v7 = atomic_load(&qword_25473B160);
  if (!v7)
    v7 = sub_20BEB6E74(&qword_25473B160);
  sub_20BDDC0E4(&__p, a3);
  sub_20BEB8860(v7, (std::string::size_type)v13, a1, &__p);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__p);
  if (v14 < 0)
    operator delete(v13[0]);
}

void sub_20BEB8820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BEB8860(uint64_t a1, std::string::size_type a2, uint64_t a3, __int128 *a4)
{
  const char *v7;
  char *v8;
  std::string *p_p;
  const char *v10;
  char v11;
  _BYTE *v12;
  const char *v13;
  uint64_t *v14;
  const std::type_info *v15;
  char *v16;
  unsigned __int8 v17;
  _BYTE *v18;
  _QWORD *v19;
  _BYTE *v20;
  std::string __p;
  const char *v22;
  char v23;
  int v24;
  std::string v25;
  void *v26[2];
  char v27;
  uint64_t v28;

  v28 = a3;
  if (sub_20BEB8B64(2))
  {
    sub_20BDDC0E4(v26, "_Register");
    sub_20BDDC0E4(&v25, "void pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry::_Register(const std::string &, TfDebug::_Node *, const std::string &)");
    pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)v26, &v25, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (*(char *)(a2 + 23) >= 0)
      v10 = (const char *)a2;
    else
      v10 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"%s: %s\n", v7, v8, p_p, v10);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (v27 < 0)
      operator delete(v26[0]);
  }
  sub_20BEB3FEC((uint64_t)v26, a1);
  sub_20BEB97DC((uint64_t **)(a1 + 56), (const void **)a2, (__int128 *)a2, a4);
  if ((v11 & 1) == 0)
  {
    v12 = v26[0];
    __dmb(0xBu);
    *v12 = 0;
    v26[0] = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"tf/debug.cpp";
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)"_Register";
    __p.__r_.__value_.__r.__words[2] = 139;
    v22 = "void pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry::_Register(const std::string &, TfDebug::_Node *"
          ", const std::string &)";
    v23 = 0;
    v24 = 4;
    if (*(char *)(a2 + 23) >= 0)
      v13 = (const char *)a2;
    else
      v13 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"[TF_DEBUG_ENVIRONMENT_SYMBOL] multiple debug symbol definitions for '%s'.  This is usually due to software misconfiguration, such as multiple versions of the same shared library loaded simultaneously in the process.  Please check your build configuration.", v13);
  }
  __p.__r_.__value_.__r.__words[0] = a2;
  v14 = sub_20BEB9980((uint64_t **)(a1 + 32), (const void **)a2, (uint64_t)&unk_20CAC184C, (__int128 **)&__p);
  sub_20BEB968C((uint64_t **)v14 + 7, (unint64_t *)&v28, &v28);
  if ((v15 & 1) != 0)
  {
    v17 = atomic_load(byte_2547850AC);
    if ((v17 & 1) != 0)
    {
      v18 = v26[0];
      __dmb(0xBu);
      *v18 = 0;
      v26[0] = 0;
      pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&__p);
      if (*v19 != __p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_24C51B0C0;
        pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&__p);
        pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice((pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *)&__p);
      }
    }
  }
  v20 = v26[0];
  if (v26[0])
  {
    __dmb(0xBu);
    *v20 = 0;
  }
}

void sub_20BEB8A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  _BYTE *v28;

  pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice((pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *)&__p);
  v28 = *(_BYTE **)(v26 - 64);
  if (v28)
  {
    __dmb(0xBu);
    *v28 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfDebug::_ComplainAboutInvalidSymbol(pxrInternal__aapl__pxrReserved__::TfDebug *this, const char *a2)
{
  _QWORD v2[4];
  char v3;

  v2[0] = "tf/debug.cpp";
  v2[1] = "_ComplainAboutInvalidSymbol";
  v2[2] = 479;
  v2[3] = "static void pxrInternal__aapl__pxrReserved__::TfDebug::_ComplainAboutInvalidSymbol(const char *)";
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"TF_DEBUG_ENVIRONMENT_SYMBOL(): symbol '%s' invalid.  (Check the TF_DEBUG_CODES() macro.)", (const char *)this);
}

unint64_t sub_20BEB8B44()
{
  unint64_t result;

  if (!atomic_load(&qword_25473B160))
    return sub_20BEB6E74(&qword_25473B160);
  return result;
}

BOOL sub_20BEB8B64(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  unint64_t v9;

  v2 = sub_20BEB209C();
  v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    v5 = v2;
    v6 = a1;
    v7 = (void *)(sub_20BEB209C() + 4 * a1);
    v8 = (&off_24C51B050)[a1];
    v9 = atomic_load(&qword_25473B160);
    if (!v9)
      v9 = sub_20BEB6E74(&qword_25473B160);
    sub_20BEB84C0(v9, v7, v8);
    v3 = atomic_load((unsigned int *)(v5 + 4 * v6));
  }
  return v3 == 2;
}

void sub_20BEB8BF0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20BEB8BF0(a1, *a2);
    sub_20BEB8BF0(a1, a2[1]);
    sub_20BEB8C38((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20BEB8C38(uint64_t a1)
{
  sub_20BE6100C(a1 + 24, *(_QWORD **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unint64_t sub_20BEB8C78(unint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *v9;
  std::string *v10;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *Instance;
  std::string v13;
  void *v14[2];
  char v15;
  std::string __p;
  std::string *v17;
  std::string v18;
  const char *v19;
  char v20;
  int v21;

  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v2 = (uint64_t *)(a1 + 80);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BDDC0E4(v14, "TF_DEBUG");
  sub_20BDDC0E4(&v13, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v14, (uint64_t)&v13, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfStringTokenize((unsigned __int8 *)&__p, " \t\n", &v18);
  sub_20BE7598C(v2);
  *(std::string *)(a1 + 80) = v18;
  v17 = &v18;
  memset(&v18, 0, sizeof(v18));
  sub_20BDE5038((void ***)&v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (v15 < 0)
    operator delete(v14[0]);
  if (sub_20BEB9040(*(unsigned __int8 **)(a1 + 80), *(unsigned __int8 **)(a1 + 88), "help") != *(unsigned __int8 **)(a1 + 88))
  {
    puts("Valid options for the TF_DEBUG environment variable are:\n\n      help               display this help message and exit\n      SYM1 [... SYMn]    enable SYM1 through SYMn for debugging\n\nTo disable a symbol for debugging, prepend a '-'; to match all symbols\n"
      "beginning with a prefix, use 'PREFIX*' (this is the only matching supported).\n"
      "Note that the order of processing matters.  For example, setting TF_DEBUG to\n"
      "\n"
      "      STAF_* SIC_* -SIC_REGISTRY_ENUMS GPT_IK\n"
      "\n"
      "enables debugging for any symbol in STAF, all symbols in SIC except for\n"
      "SIC_REGISTRY_ENUMS and the symbol GPT_IK.");
    exit(0);
  }
  do
    v3 = __ldaxr(&qword_25473B160);
  while (__stlxr(a1, &qword_25473B160));
  if (v3)
  {
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)"tf/instantiateSingleton.h";
    v18.__r_.__value_.__l.__size_ = (std::string::size_type)"SetInstanceConstructed";
    v18.__r_.__value_.__r.__words[2] = 56;
    v19 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegi"
          "stry>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry]";
    v20 = 0;
    v21 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)&v18, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed");
  }
  v4 = sub_20BEB209C();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v4 + 8, "TF_DEBUG_REGISTRY", "debug the TfDebug registry");
  v5 = sub_20BEB209C();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v5, "TF_DISCOVERY_TERSE", "coarse grain debugging of TfRegistryManager");
  v6 = sub_20BEB209C();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v6 + 4, "TF_DISCOVERY_DETAILED", "detailed debugging of TfRegistryManager");
  v7 = sub_20BEB209C();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v7 + 12, "TF_DLOPEN", "show files opened by TfDlopen");
  v8 = sub_20BEB209C();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v8 + 16, "TF_DLCLOSE", "show files closed by TfDlclose");
  v9 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)sub_20BEB8B64(2);
  if ((_DWORD)v9)
  {
    sub_20BDDC0E4(v14, "Tf_DebugSymbolRegistry");
    sub_20BDDC0E4(&v13, "pxrInternal__aapl__pxrReserved__::Tf_DebugSymbolRegistry::Tf_DebugSymbolRegistry()");
    pxrInternal__aapl__pxrReserved__::ArchGetPrettierFunctionName((uint64_t)v14, &v13, &__p);
    v10 = std::string::append(&__p, "\n");
    v18 = *v10;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v9 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((uint64_t)&v18);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    if (v15 < 0)
      operator delete(v14[0]);
  }
  atomic_store(1u, byte_2547850AC);
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v9);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_24C51B0A0);
  return a1;
}

void sub_20BEB8F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char **v36;
  _QWORD **v37;
  _QWORD **v38;

  if (a33 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  sub_20BDE5038((void ***)&a21);
  sub_20BDE9D48(v35, *v38);
  sub_20BEB8BF0(v34, *v37);
  sub_20BDECAB8(v33, *v36);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20BEB9040(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            sub_20BEB9180();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

BOOL sub_20BEB90F0(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if (*((char *)a1 + 23) < 0)
  {
    if (v4 == a1[1])
    {
      if (v4 == -1)
        goto LABEL_10;
      a1 = (_QWORD *)*a1;
      return memcmp(a1, __s, v4) == 0;
    }
  }
  else if (v4 == *((unsigned __int8 *)a1 + 23))
  {
    if (v4 == -1)
LABEL_10:
      sub_20BEB9180();
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

void sub_20BEB9180()
{
  sub_20BEB9194("basic_string");
}

void sub_20BEB9194(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_20BDCAF6C(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_24C514D68, MEMORY[0x24BEDAB00]);
}

void sub_20BEB91D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEB91E4(char *__s2, __int128 *a2, uint64_t a3)
{
  int v5;
  unsigned __int8 v6;
  uint64_t v7;
  __int128 v8;
  unsigned int v9;
  std::string *p_p;
  int v11;
  std::string::size_type size;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  int v18;
  std::string __p;

  if (a3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 24 * a3;
    while (1)
    {
      if (*((char *)a2 + 23) < 0)
      {
        sub_20BDDBFAC(&__p, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v8 = *a2;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
      }
      v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (!__p.__r_.__value_.__l.__size_)
          goto LABEL_33;
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (!*((_BYTE *)&__p.__r_.__value_.__s + 23))
          goto LABEL_34;
        p_p = &__p;
      }
      v11 = p_p->__r_.__value_.__s.__data_[0];
      if (v11 == 45)
      {
        std::string::erase(&__p, 0, 1uLL);
        v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      if ((v9 & 0x80) != 0)
      {
        size = __p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
LABEL_17:
          v13 = size - 1;
          if ((v9 & 0x80) != 0)
          {
            v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if (*(_BYTE *)(__p.__r_.__value_.__r.__words[0] + v13) != 42)
              goto LABEL_29;
            v15 = __p.__r_.__value_.__l.__size_;
LABEL_22:
            std::string::erase(&__p, v15 - 1, 0xFFFFFFFFFFFFFFFFLL);
            LOBYTE(v9) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v16 = &__p;
            else
              v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v17 = __p.__r_.__value_.__l.__size_;
            v18 = strncmp(__s2, (const char *)v16, v17);
          }
          else
          {
            v14 = &__p;
            if (__p.__r_.__value_.__s.__data_[v13] == 42)
            {
              v15 = v9;
              goto LABEL_22;
            }
LABEL_29:
            v18 = strcmp((const char *)v14, __s2);
          }
          if (!v18)
          {
            v6 = 1;
            v5 = v11 != 45;
          }
          if ((v9 & 0x80) == 0)
            goto LABEL_34;
        }
LABEL_33:
        operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_34;
      }
      if (v9)
      {
        size = v9;
        goto LABEL_17;
      }
LABEL_34:
      a2 = (__int128 *)((char *)a2 + 24);
      v7 -= 24;
      if (!v7)
        return v6 | (v5 << 8);
    }
  }
  v6 = 0;
  v5 = 0;
  return v6 | (v5 << 8);
}

void sub_20BEB9370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BEB938C(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_20BEB9420((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_BYTE *sub_20BEB9420@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[56] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BEB94A8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BDEEB58(v3, v2);
  _Unwind_Resume(a1);
}

BOOL sub_20BEB94C4(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  char v8;

  v4 = a1 + 8;
  sub_20BDDC0E4(__p, a2);
  v5 = sub_20BDEEBA4(v4, (const void **)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (a1 + 16 == v5)
    return (sub_20BEB91E4(a2, *(__int128 **)(a1 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 3)) >> 8) & 1;
  else
    return *(_BYTE *)(v5 + 56) != 0;
}

void sub_20BEB9560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_20BEB957C(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)sub_20BDDE084((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 7) = v7 + 4;
    v13 = 1;
    sub_20BDDE1B4(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_20BEB9648((uint64_t)v12, 0);
  }
  return v7;
}

void sub_20BEB9648(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BEB8C38((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_20BEB968C(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_20BDDE1B4(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

_OWORD *sub_20BEB9744(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)sub_20BDDE084((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_BYTE *)v7 + 56) = 0;
    sub_20BDDE1B4(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_20BEB97DC(uint64_t **a1, const void **a2, __int128 *a3, __int128 *a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v11[3];
  uint64_t v12;

  v7 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v12, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    sub_20BEB987C((uint64_t)a1, a3, a4, (uint64_t)v11);
    sub_20BDDE1B4(a1, v12, v9, v11[0]);
    v8 = v11[0];
    v11[0] = 0;
    sub_20BDDE3A0((uint64_t)v11, 0);
  }
  return v8;
}

char *sub_20BEB987C@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  char *result;

  v7 = a1 + 8;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  result = sub_20BEB98EC(v8 + 32, a2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BEB98D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDDE3A0(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_20BEB98EC(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  return __dst;
}

void sub_20BEB9964(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BEB9980(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20BEB9A28((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20BEB9648((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20BEB9A28@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20BEB9AA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEB9648(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEB9ABC()
{
  sub_20BEB9B08();
  return sub_20BEB9C28();
}

void pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice::~TfDebugSymbolsChangedNotice(pxrInternal__aapl__pxrReserved__::TfDebugSymbolsChangedNotice *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v1);
}

void pxrInternal__aapl__pxrReserved__::TfDebugSymbolEnableChangedNotice::~TfDebugSymbolEnableChangedNotice(pxrInternal__aapl__pxrReserved__::TfDebugSymbolEnableChangedNotice *this)
{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfNotice::~TfNotice(this);
  operator delete(v1);
}

uint64_t *sub_20BEB9B08()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BEB9D48((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20BEB9BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEB9C28()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20BEB9D48((unint64_t **)v5);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20BEB9CFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20BEB9D48(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20BEB9DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BEB9DDC()
{
  void *__p[2];
  char v1;
  void *v2[2];
  char v3;

  sub_20BDDC0E4(v2, "TF_DIAGNOSTIC_CODING_ERROR_TYPE");
  sub_20BDDC0E4(__p, "Coding Error");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51B120, 1, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "TF_DIAGNOSTIC_FATAL_CODING_ERROR_TYPE");
  sub_20BDDC0E4(__p, "Fatal Coding Error");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51B120, 2, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "TF_DIAGNOSTIC_RUNTIME_ERROR_TYPE");
  sub_20BDDC0E4(__p, "Runtime Error");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51B120, 3, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "TF_DIAGNOSTIC_FATAL_ERROR_TYPE");
  sub_20BDDC0E4(__p, "Fatal Error");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51B120, 4, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "TF_DIAGNOSTIC_NONFATAL_ERROR_TYPE");
  sub_20BDDC0E4(__p, "Error");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51B120, 5, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "TF_DIAGNOSTIC_WARNING_TYPE");
  sub_20BDDC0E4(__p, "Warning");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51B120, 6, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "TF_DIAGNOSTIC_STATUS_TYPE");
  sub_20BDDC0E4(__p, "Status");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51B120, 7, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
  sub_20BDDC0E4(v2, "TF_APPLICATION_EXIT_TYPE");
  sub_20BDDC0E4(__p, "Application Exit");
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51B120, 8, (uint64_t)v2, (uint64_t)__p);
  if (v1 < 0)
    operator delete(__p[0]);
  if (v3 < 0)
    operator delete(v2[0]);
}

void sub_20BEBA0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat(pxrInternal__aapl__pxrReserved__ *this, const char *a2, char *a3, ...)
{
  char *v3;
  char *v4;
  char *__s1[2];
  char v7;
  va_list v8;
  va_list va;

  va_start(va, a3);
  va_copy(v8, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__s1, this, va, a3);
  if ((v7 & 0x80000000) == 0)
    return strdup((const char *)__s1);
  v4 = __s1[0];
  v3 = strdup(__s1[0]);
  operator delete(v4);
  return v3;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper(uint64_t a1, const std::string::value_type *a2, std::string::value_type *a3)
{
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  _BOOL4 v10;
  _BOOL4 v11;
  __int128 v12;
  void *__p[2];
  __int128 v15;
  uint64_t v16;
  int v17;
  std::string v18;
  std::string v19;

  sub_20BDDC0E4(&v18, "Failed verification: ' ");
  v6 = std::string::append(&v18, a2);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  *(_QWORD *)&v15 = *((_QWORD *)&v6->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append((std::string *)__p, " '");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v18.__r_.__value_.__l.__data_);
    if (!a3)
      goto LABEL_8;
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    std::string::append(&v19, " -- ");
    std::string::append(&v19, a3);
    free(a3);
  }
LABEL_8:
  sub_20BDDC0E4(__p, "TF_FATAL_VERIFY");
  v10 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
  v11 = v10;
  if (SBYTE7(v15) < 0)
  {
    operator delete(__p[0]);
    if (v11)
      goto LABEL_10;
  }
  else if (v10)
  {
LABEL_10:
    v12 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)__p = *(_OWORD *)a1;
    v15 = v12;
    v16 = *(_QWORD *)(a1 + 32);
    v17 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((uint64_t)__p, (uint64_t)&v19);
    goto LABEL_13;
  }
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(a1, 1);
LABEL_13:
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  return 0;
}

void sub_20BEBA2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 41) < 0)
    operator delete(*(void **)(v24 - 64));
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_TerminateHandler(pxrInternal__aapl__pxrReserved__ *this)
{
  _QWORD v1[4];
  _QWORD v2[4];

  sub_20BDDC0E4(v2, "<unknown reason>");
  sub_20BDDC0E4(v1, "<unknown type>");
  std::set_terminate((std::terminate_handler)sub_20BEBA940);
  __cxa_rethrow();
}

void sub_20BEBA82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31)
{
  uint64_t v31;
  void *v33;

  v33 = *(void **)(v31 - 144);
  if (v33)
  {
    *(_QWORD *)(v31 - 136) = v33;
    operator delete(v33);
  }
  if (*(char *)(v31 - 89) < 0)
    operator delete(*(void **)(v31 - 112));
  if (*(char *)(v31 - 57) < 0)
    operator delete(*(void **)(v31 - 80));
  _Unwind_Resume(exception_object);
}

void sub_20BEBA940(uint64_t a1, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  v3[0] = "tf/diagnostic.cpp";
  v3[1] = "_BadThrowHandler";
  v3[2] = 115;
  v3[3] = "void pxrInternal__aapl__pxrReserved__::_BadThrowHandler()";
  v4 = 0;
  v5 = 4;
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"std::terminate() called without a current exception", a3);
}

void pxrInternal__aapl__pxrReserved__::TfSetProgramNameForErrors(char *a1, const char *a2)
{
  if (a1[23] < 0)
    a1 = *(char **)a1;
  pxrInternal__aapl__pxrReserved__::ArchSetProgramNameForErrors((pxrInternal__aapl__pxrReserved__ *)a1, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfGetProgramNameForErrors@<X0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, _QWORD *a2@<X8>)
{
  char *ProgramNameForErrors;

  ProgramNameForErrors = (char *)pxrInternal__aapl__pxrReserved__::ArchGetProgramNameForErrors(this);
  return sub_20BDDC0E4(a2, ProgramNameForErrors);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfInstallTerminateAndCrashHandlers(pxrInternal__aapl__pxrReserved__ *this)
{
  sigaction v2;

  std::set_terminate((std::terminate_handler)pxrInternal__aapl__pxrReserved__::Tf_TerminateHandler);
  v2.__sigaction_u.__sa_handler = (void (__cdecl *)(int))sub_20BEBAA60;
  *(_QWORD *)&v2.sa_mask = 0x4000000688;
  sigaction(11, &v2, 0);
  sigaction(10, &v2, 0);
  sigaction(8, &v2, 0);
  sigaction(6, &v2, 0);
  return sigaction(4, &v2, 0);
}

void sub_20BEBAA60(int a1)
{
  char *v2;
  const char *v3;
  char *v4;

  if ((a1 - 4) > 7)
    v2 = "unknown signal";
  else
    v2 = off_24C51B130[a1 - 4];
  pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::Tf_ScopeDescriptionStackReportLock((pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *)&v4);
  pxrInternal__aapl__pxrReserved__::ArchLogFatalProcessState((pxrInternal__aapl__pxrReserved__ *)v2, 0, v4, v3);
  pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::~Tf_ScopeDescriptionStackReportLock((pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *)&v4);
  fflush((FILE *)*MEMORY[0x24BDAC8E8]);
  fflush((FILE *)*MEMORY[0x24BDAC8D8]);
  _exit(a1 + 128);
}

void sub_20BEBAAE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::~Tf_ScopeDescriptionStackReportLock((pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDiagnosticBase::TfDiagnosticBase(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, __int128 *a5, std::string *__str, void (**a7)(uint64_t), char a8)
{
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  int v19;
  __int128 v21;
  uint64_t v22;

  v14 = *a5;
  v15 = a5[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a5 + 4);
  *(_OWORD *)a1 = v14;
  *(_OWORD *)(a1 + 16) = v15;
  *(_QWORD *)(a1 + 40) = 0;
  v16 = MEMORY[0x24BEDB798];
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = 0u;
  v17 = a1 + 80;
  *(_DWORD *)(a1 + 72) = 0;
  v18 = (unint64_t *)(a1 + 104);
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  std::string::operator=((std::string *)(a1 + 40), __str);
  *(_QWORD *)(a1 + 64) = a2;
  *(_DWORD *)(a1 + 72) = a3;
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(a2, a3, (uint64_t)&v21);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)v17);
  *(_OWORD *)v17 = v21;
  *(_QWORD *)(v17 + 16) = v22;
  sub_20BEBAC88(v18, a7);
  *(_BYTE *)(a1 + 144) = a8;
  v19 = *(char *)(a1 + 103);
  if (v19 < 0)
  {
    if (!*(_QWORD *)(a1 + 88))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 103))
  {
LABEL_7:
    if (a4)
    {
      sub_20BDDC0E4(&v21, a4);
      if ((*(_BYTE *)(a1 + 103) & 0x80) == 0)
      {
LABEL_10:
        *(_OWORD *)v17 = v21;
        *(_QWORD *)(v17 + 16) = v22;
        return a1;
      }
    }
    else
    {
      v21 = 0uLL;
      v22 = 0;
      if ((v19 & 0x80) == 0)
        goto LABEL_10;
    }
    operator delete(*(void **)v17);
    goto LABEL_10;
  }
  return a1;
}

void sub_20BEBAC4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t (**v3)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void **v4;

  sub_20BEBAE7C(v3);
  if (*(char *)(v1 + 103) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

unint64_t *sub_20BEBAC88(unint64_t *a1, void (**a2)(uint64_t))
{
  uint64_t (*v4[9])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v4[8] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v4[0] = 0;
  v4[1] = 0;
  if (*a2)
    (*a2)(1);
  if (v4 != (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))a1 && *a1 != (unsigned __int128)0)
    ((void (*)(uint64_t, unint64_t *, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), _QWORD, _QWORD))*a1)(2, a1, v4, 0, 0);
  sub_20BEBAE7C(v4);
  return a1;
}

void sub_20BEBADB4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfDiagnosticBase::IsFatal(pxrInternal__aapl__pxrReserved__::TfDiagnosticBase *this)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *((_DWORD *)this + 18);
  v2 = v1 > 8;
  v3 = (1 << v1) & 0x114;
  return !v2
      && v3 != 0
      && strcmp((const char *)(*(_QWORD *)(*((_QWORD *)this + 8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB13A8 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

BOOL pxrInternal__aapl__pxrReserved__::TfDiagnosticBase::IsCodingError(pxrInternal__aapl__pxrReserved__::TfDiagnosticBase *this)
{
  return (*((_DWORD *)this + 18) - 1) <= 1
      && strcmp((const char *)(*(_QWORD *)(*((_QWORD *)this + 8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB13A8 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t (**sub_20BEBAE7C(uint64_t (**result)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  if (*result)
    return (uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*result)(0, result, 0, 0, 0);
  return result;
}

void pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  __int128 v8;
  void *__p[2];
  char v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  v5 = *a2;
  v6 = a2[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a2, v6, (uint64_t)__p);
  if (v10 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  v8 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v8;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = v5;
  v14 = v6;
  v15 = v7;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(v11, a3);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_20BEBAF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(uint64_t a1, int a2)
{
  void *v3;
  int v4;

  v3 = &unk_24C51B120;
  v4 = a2;
  return pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(a1, &v3);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  void *__p[2];
  char v6;
  va_list v7;
  va_list va;

  va_start(va, this);
  va_copy(v7, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, (char *)this);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(a1, a2, (uint64_t *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_20BEBAFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(uint64_t a1, int a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  void *__p[2];
  char v6;
  va_list v7;
  void *v8;
  int v9;
  va_list va;

  va_start(va, this);
  va_copy(v7, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, (char *)this);
  v8 = &unk_24C51B120;
  v9 = a2;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(a1, (uint64_t *)&v8, (uint64_t *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_20BEBB078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostQuietlyErrorHelper(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  __int128 v8;
  void *__p[2];
  char v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void (*v16[5])(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v16[4] = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v5 = *a2;
  v6 = a2[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a2, v6, (uint64_t)__p);
  if (v10 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  v8 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v8;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = v5;
  v14 = v6;
  v15 = v7;
  v16[0] = 0;
  v16[1] = 0;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostQuietly(v11, a3, v16);
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v16);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_20BEBB160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(v15 - 88));
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostQuietlyErrorHelper(uint64_t a1, uint64_t *a2, void (**a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 v10;
  void *__p[2];
  char v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void (*v18[5])(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v18[4] = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v7 = *a2;
  v8 = a2[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a2, v8, (uint64_t)__p);
  if (v12 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v10;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18[0] = 0;
  v18[1] = 0;
  if (*a3)
    (*a3)(1, a3, v18, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostQuietly(v13, a4, v18);
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v18);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_20BEBB27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostQuietlyErrorHelper(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  void *__p[2];
  char v6;
  va_list v7;
  va_list va;

  va_start(va, this);
  va_copy(v7, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, (char *)this);
  pxrInternal__aapl__pxrReserved__::Tf_PostQuietlyErrorHelper(a1, a2, (uint64_t *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
}

void sub_20BEBB310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostQuietlyErrorHelper(uint64_t a1, uint64_t *a2, char *a3, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  void *__p[2];
  char v8;
  va_list v9;
  va_list va;

  va_start(va, this);
  va_copy(v9, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::Tf_PostQuietlyErrorHelper(a1, a2, (void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))a3, (uint64_t *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_20BEBB39C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(uint64_t a1, void (**a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 v10;
  void *__p[2];
  char v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void (*v18[5])(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v18[4] = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v7 = *a3;
  v8 = a3[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a3, v8, (uint64_t)__p);
  if (v12 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v10;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18[0] = 0;
  v18[1] = 0;
  if (*a2)
    (*a2)(1, a2, v18, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostWithInfo(v13, a4, v18);
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v18);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_20BEBB4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(uint64_t a1, void (**a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD), char *a3, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  void *__p[2];
  char v8;
  va_list v9;
  va_list va;

  va_start(va, this);
  va_copy(v9, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper(a1, a2, (uint64_t *)a3, (uint64_t *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_20BEBB54C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, std::string *a2)
{
  void **v4;
  __int128 v5;
  void *__p[2];
  char v7;
  _OWORD v8[2];
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void **v12;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C51B120, 6, (uint64_t)__p);
  if (v7 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = &unk_24C51B120;
  v11 = 6;
  v12 = v4;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post((uint64_t)v8, a2);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_20BEBB600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, pxrInternal__aapl__pxrReserved__ *this, char *a3, ...)
{
  std::string __p;
  va_list v5;
  va_list va;

  va_start(va, a3);
  va_copy(v5, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BEBB678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, uint64_t *a2, std::string *a3)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  __int128 v8;
  void *__p[2];
  char v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  v5 = *a2;
  v6 = a2[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a2, v6, (uint64_t)__p);
  if (v10 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  v8 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v8;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = v5;
  v14 = v6;
  v15 = v7;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post((uint64_t)v11, a3);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_20BEBB724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, int a2, std::string *a3)
{
  void *v3;
  int v4;

  v3 = &unk_24C51B120;
  v4 = a2;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(a1, (uint64_t *)&v3, a3);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  std::string __p;
  va_list v6;
  va_list va;

  va_start(va, this);
  va_copy(v6, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, (char *)this);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BEBB7D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, int a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  std::string __p;
  va_list v6;
  void *v7;
  int v8;
  va_list va;

  va_start(va, this);
  va_copy(v6, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, (char *)this);
  v7 = &unk_24C51B120;
  v8 = a2;
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(a1, (uint64_t *)&v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BEBB85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, void (**a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t *a3, std::string *a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 v10;
  void *__p[2];
  char v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void (*v18[5])(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v18[4] = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v7 = *a3;
  v8 = a3[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a3, v8, (uint64_t)__p);
  if (v12 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v10;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18[0] = 0;
  v18[1] = 0;
  if (*a2)
    (*a2)(1, a2, v18, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::PostWithInfo((uint64_t)v13, a4, v18);
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v18);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_20BEBB968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(uint64_t a1, void (**a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD), char *a3, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  std::string __p;
  va_list v8;
  va_list va;

  va_start(va, this);
  va_copy(v8, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper(a1, a2, (uint64_t *)a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BEBBA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(uint64_t a1, std::string *a2)
{
  void **v4;
  __int128 v5;
  void *__p[2];
  char v7;
  _OWORD v8[2];
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void **v12;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C51B120, 7, (uint64_t)__p);
  if (v7 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v9 = *(_QWORD *)(a1 + 32);
  v10 = &unk_24C51B120;
  v11 = 7;
  v12 = v4;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post((uint64_t)v8, a2);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_20BEBBAC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(uint64_t a1, pxrInternal__aapl__pxrReserved__ *this, char *a3, ...)
{
  std::string __p;
  va_list v5;
  va_list va;

  va_start(va, a3);
  va_copy(v5, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BEBBB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(uint64_t a1, uint64_t *a2, std::string *a3)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  __int128 v8;
  void *__p[2];
  char v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;

  v5 = *a2;
  v6 = a2[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a2, v6, (uint64_t)__p);
  if (v10 >= 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  v8 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v8;
  v12 = *(_QWORD *)(a1 + 32);
  v13 = v5;
  v14 = v6;
  v15 = v7;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post((uint64_t)v11, a3);
  if (v10 < 0)
    operator delete(__p[0]);
}

void sub_20BEBBBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  std::string __p;
  va_list v6;
  va_list va;

  va_start(va, this);
  va_copy(v6, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, (char *)this);
  pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BEBBC60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(uint64_t a1, void (**a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t *a3, std::string *a4)
{
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 v10;
  void *__p[2];
  char v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void (*v18[5])(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v18[4] = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v7 = *a3;
  v8 = a3[1];
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName(*a3, v8, (uint64_t)__p);
  if (v12 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  v10 = *(_OWORD *)(a1 + 16);
  v13[0] = *(_OWORD *)a1;
  v13[1] = v10;
  v14 = *(_QWORD *)(a1 + 32);
  v15 = v7;
  v16 = v8;
  v17 = v9;
  v18[0] = 0;
  v18[1] = 0;
  if (*a2)
    (*a2)(1, a2, v18, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::PostWithInfo((uint64_t)v13, a4, v18);
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v18);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_20BEBBD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(uint64_t a1, void (**a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD), char *a3, pxrInternal__aapl__pxrReserved__ *this, ...)
{
  std::string __p;
  va_list v8;
  va_list va;

  va_start(va, this);
  va_copy(v8, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, this, va, a3);
  pxrInternal__aapl__pxrReserved__::Tf_PostStatusHelper(a1, a2, (uint64_t *)a3, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BEBBE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueError(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, pxrInternal__aapl__pxrReserved__ *a2, ...)
{
  uint64_t v4;
  char *v5;
  void **v6;
  __int128 v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  _OWORD v12[2];
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void **v16;
  char *v17;
  va_list va;

  va_start(va, a2);
  va_copy(v17, va);
  v4 = *((unsigned int *)this + 10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C51B120, v4, (uint64_t)v10);
  if (v11 >= 0)
    v6 = v10;
  else
    v6 = (void **)v10[0];
  v7 = *((_OWORD *)this + 1);
  v12[0] = *(_OWORD *)this;
  v12[1] = v7;
  v13 = *((_QWORD *)this + 4);
  v14 = &unk_24C51B120;
  v15 = v4;
  v16 = v6;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, a2, v17, v5);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(v12, (uint64_t *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_20BEBBEEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3, ...)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5[3];
  _OWORD v6[2];
  uint64_t v7;
  void *v8;
  uint64_t v9;
  va_list v10;
  va_list va;

  va_start(va, a3);
  va_copy(v10, va);
  v3 = *((unsigned int *)this + 10);
  v4 = *((_OWORD *)this + 1);
  v6[0] = *(_OWORD *)this;
  v6[1] = v4;
  v7 = *((_QWORD *)this + 4);
  v8 = &unk_24C51B120;
  v9 = v3;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf(v5, a2, va, a3);
  sub_20BEBBF98((uint64_t)v6, (uint64_t)v5);
  __break(1u);
}

void sub_20BEBBF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEBBF98(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *v5;
  const char *v6;

  v4 = sub_20BEBC74C();
  v5 = (pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostFatal(v4, a1, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a2);
  return pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning(v5, v6);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, pxrInternal__aapl__pxrReserved__ *a2, ...)
{
  uint64_t v4;
  char *v5;
  void **v6;
  __int128 v7;
  std::string __p;
  void *v9[2];
  char v10;
  _OWORD v11[2];
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void **v15;
  char *v16;
  va_list va;

  va_start(va, a2);
  va_copy(v16, va);
  v4 = *((unsigned int *)this + 10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C51B120, v4, (uint64_t)v9);
  if (v10 >= 0)
    v6 = v9;
  else
    v6 = (void **)v9[0];
  v7 = *((_OWORD *)this + 1);
  v11[0] = *(_OWORD *)this;
  v11[1] = v7;
  v12 = *((_QWORD *)this + 4);
  v13 = &unk_24C51B120;
  v14 = v4;
  v15 = v6;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a2, v16, v5);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post((uint64_t)v11, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_20BEBC080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueStatus(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *this, pxrInternal__aapl__pxrReserved__ *a2, ...)
{
  uint64_t v4;
  char *v5;
  void **v6;
  __int128 v7;
  std::string __p;
  void *v9[2];
  char v10;
  _OWORD v11[2];
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void **v15;
  char *v16;
  va_list va;

  va_start(va, a2);
  va_copy(v16, va);
  v4 = *((unsigned int *)this + 10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C51B120, v4, (uint64_t)v9);
  if (v10 >= 0)
    v6 = v9;
  else
    v6 = (void **)v9[0];
  v7 = *((_OWORD *)this + 1);
  v11[0] = *(_OWORD *)this;
  v11[1] = v7;
  v12 = *((_QWORD *)this + 4);
  v13 = &unk_24C51B120;
  v14 = v4;
  v15 = v6;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a2, v16, v5);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post((uint64_t)v11, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_20BEBC174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueError(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  __int128 v6;
  void *__p[2];
  char v8;
  _OWORD v9[2];
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void **v13;

  v4 = *(unsigned int *)(a1 + 40);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C51B120, v4, (uint64_t)__p);
  if (v8 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = &unk_24C51B120;
  v12 = v4;
  v13 = v5;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(v9, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_20BEBC240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  _OWORD v6[2];
  uint64_t v7;
  void *v8;
  uint64_t v9;

  v2 = *(unsigned int *)(a1 + 40);
  v3 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v3;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = &unk_24C51B120;
  v9 = v2;
  v4 = sub_20BEBBF98(v6, a2);
  return pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning(v4);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueWarning(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  void **v5;
  __int128 v6;
  void *__p[2];
  char v8;
  _OWORD v9[2];
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void **v13;

  v4 = *(unsigned int *)(a1 + 40);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C51B120, v4, (uint64_t)__p);
  if (v8 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = &unk_24C51B120;
  v12 = v4;
  v13 = v5;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post((uint64_t)v9, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_20BEBC328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueStatus(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  void **v5;
  __int128 v6;
  void *__p[2];
  char v8;
  _OWORD v9[2];
  uint64_t v10;
  void *v11;
  uint64_t v12;
  void **v13;

  v4 = *(unsigned int *)(a1 + 40);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C51B120, v4, (uint64_t)__p);
  if (v8 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  v10 = *(_QWORD *)(a1 + 32);
  v11 = &unk_24C51B120;
  v12 = v4;
  v13 = v5;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post((uint64_t)v9, a2);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_20BEBC3DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *this, pxrInternal__aapl__pxrReserved__ *a2, ...)
{
  uint64_t v4;
  char *v5;
  void **v6;
  __int128 v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  _OWORD v12[2];
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void **v16;
  char *v17;
  va_list va;

  va_start(va, a2);
  va_copy(v17, va);
  v4 = *((unsigned int *)this + 10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C51B120, v4, (uint64_t)v10);
  if (v11 >= 0)
    v6 = v10;
  else
    v6 = (void **)v10[0];
  v7 = *((_OWORD *)this + 1);
  v12[0] = *(_OWORD *)this;
  v12[1] = v7;
  v13 = *((_QWORD *)this + 4);
  v14 = &unk_24C51B120;
  v15 = v4;
  v16 = v6;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, a2, v17, v5);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(v12, (uint64_t *)__p);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_20BEBC4B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3, ...)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5[3];
  _OWORD v6[2];
  uint64_t v7;
  void *v8;
  uint64_t v9;
  va_list v10;
  va_list va;

  va_start(va, a3);
  va_copy(v10, va);
  v3 = *((unsigned int *)this + 10);
  v4 = *((_OWORD *)this + 1);
  v6[0] = *(_OWORD *)this;
  v6[1] = v4;
  v7 = *((_QWORD *)this + 4);
  v8 = &unk_24C51B120;
  v9 = v3;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf(v5, a2, va, a3);
  sub_20BEBBF98(v6, v5);
  __break(1u);
}

void sub_20BEBC548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueWarning(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *this, pxrInternal__aapl__pxrReserved__ *a2, ...)
{
  uint64_t v4;
  char *v5;
  void **v6;
  __int128 v7;
  std::string __p;
  void *v9[2];
  char v10;
  _OWORD v11[2];
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void **v15;
  char *v16;
  va_list va;

  va_start(va, a2);
  va_copy(v16, va);
  v4 = *((unsigned int *)this + 10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C51B120, v4, (uint64_t)v9);
  if (v10 >= 0)
    v6 = v9;
  else
    v6 = (void **)v9[0];
  v7 = *((_OWORD *)this + 1);
  v11[0] = *(_OWORD *)this;
  v11[1] = v7;
  v12 = *((_QWORD *)this + 4);
  v13 = &unk_24C51B120;
  v14 = v4;
  v15 = v6;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a2, v16, v5);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post((uint64_t)v11, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_20BEBC624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueStatus(pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *this, pxrInternal__aapl__pxrReserved__ *a2, ...)
{
  uint64_t v4;
  char *v5;
  void **v6;
  __int128 v7;
  std::string __p;
  void *v9[2];
  char v10;
  _OWORD v11[2];
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void **v15;
  char *v16;
  va_list va;

  va_start(va, a2);
  va_copy(v16, va);
  v4 = *((unsigned int *)this + 10);
  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C51B120, v4, (uint64_t)v9);
  if (v10 >= 0)
    v6 = v9;
  else
    v6 = (void **)v9[0];
  v7 = *((_OWORD *)this + 1);
  v11[0] = *(_OWORD *)this;
  v11[1] = v7;
  v12 = *((_QWORD *)this + 4);
  v13 = &unk_24C51B120;
  v14 = v4;
  v15 = v6;
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a2, v16, v5);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post((uint64_t)v11, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_20BEBC718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20BEBC74C()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__15TfDiagnosticMgrE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)operator new(0x1C8uLL);
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::TfDiagnosticMgr(v10);
      v12 = atomic_load(a1);
      if (v12)
      {
        if (v10 != (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v12)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMg"
                "r>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance");
        }
      }
      else
      {
        do
          v13 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMg"
                "r>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_15TfDiagnosticMgrEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BEBC954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::DeleteInstance()
{
  uint64_t result;
  unint64_t v1;

  for (result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
        result;
        result = v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (v1 == result)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance))return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
  return result;
}

void sub_20BEBCABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *__p;
  uint64_t v5;
  uint64_t v6;
  void *v7[2];
  char v8;

  sub_20BDDC0E4(v7, "TF_LOG_STACK_TRACE_ON_ERROR");
  __p = 0;
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51B1C8, 0, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7[0]);
  v0 = sub_20BEBF224();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v0, "TF_LOG_STACK_TRACE_ON_ERROR", "log stack traces for all errors");
  sub_20BDDC0E4(v7, "TF_LOG_STACK_TRACE_ON_WARNING");
  __p = 0;
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51B1C8, 1, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7[0]);
  v1 = sub_20BEBF224();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v1 + 4, "TF_LOG_STACK_TRACE_ON_WARNING", "log stack traces for all warnings");
  sub_20BDDC0E4(v7, "TF_ERROR_MARK_TRACKING");
  __p = 0;
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51B1C8, 2, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7[0]);
  v2 = sub_20BEBF224();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v2 + 8, "TF_ERROR_MARK_TRACKING", "capture stack traces at TfErrorMark ctor/dtor, enable TfReportActiveMarks debugging API.");
  sub_20BDDC0E4(v7, "TF_PRINT_ALL_POSTED_ERRORS_TO_STDERR");
  __p = 0;
  v5 = 0;
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C51B1C8, 3, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(v6) < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7[0]);
  v3 = sub_20BEBF224();
  pxrInternal__aapl__pxrReserved__::TfDebug::_RegisterDebugSymbolImpl(v3 + 12, "TF_PRINT_ALL_POSTED_ERRORS_TO_STDERR", "print all posted errors immediately, meaning that even errors that are expected and handled will be printed, producing possibly confusing output");
}

void sub_20BEBCC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::Delegate::_UnhandledAbort(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::Delegate *this, BOOL a2)
{
  uint64_t v2;
  BOOL v3;

  v2 = sub_20BEBCCCC((uint64_t)this, a2);
  return sub_20BEBCCCC(v2, v3);
}

uint64_t sub_20BEBCCCC(uint64_t a1, BOOL a2)
{
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)pxrInternal__aapl__pxrReserved__::ArchAbort(0, a2);
  return pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::TfDiagnosticMgr(v2);
}

pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::TfDiagnosticMgr(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this)
{
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *v2;
  unint64_t v3;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *Instance;
  uint64_t v6[4];
  char v7;
  int v8;

  *((_QWORD *)this + 1) = 0;
  *(_QWORD *)this = off_24C51B180;
  sub_20BEBF810((_QWORD *)this + 2);
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  sub_20BEBF9EC((_QWORD *)this + 19);
  sub_20BEBFBCC((_QWORD *)this + 31);
  v6[0] = 0;
  v2 = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)sub_20BEBF58C((_QWORD *)this + 43, v6);
  *((_BYTE *)this + 448) = 0;
  atomic_store(0, (unint64_t *)this + 18);
  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  while (__stlxr((unint64_t)this, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance));
  if (v3)
  {
    v6[0] = (uint64_t)"tf/instantiateSingleton.h";
    v6[1] = (uint64_t)"SetInstanceConstructed";
    v6[2] = 56;
    v6[3] = (uint64_t)"static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagn"
                     "osticMgr>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr]";
    v7 = 0;
    v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed");
  }
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(v2);
  return this;
}

void sub_20BEBCDEC(_Unwind_Exception *a1)
{
  unsigned int **v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  void *v8;
  const void *v9;

  sub_20BEC0070(v5);
  sub_20BEBFEA4(v4);
  v8 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v3 + 120) = v8;
    operator delete(v8);
  }
  sub_20BEBFDB4(v2);
  sub_20BEBCE60(v1, v9);
  _Unwind_Resume(a1);
}

unsigned int **sub_20BEBCE60(unsigned int **a1, const void *a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;

  v3 = *a1;
  if (*a1)
  {
    *((_BYTE *)v3 + 14) = 0;
    if (*((_BYTE *)v3 + 13))
      pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::Invoke2((uint64_t)v3, a2);
    v4 = v3 + 2;
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::~TfDiagnosticMgr(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this)
{
  void *v2;
  const void *v3;

  *(_QWORD *)this = off_24C51B180;
  sub_20BEC01C0((_QWORD *)this + 43);
  sub_20BEC0070((_QWORD *)this + 31);
  sub_20BEBFEA4((_QWORD *)this + 19);
  v2 = (void *)*((_QWORD *)this + 14);
  if (v2)
  {
    *((_QWORD *)this + 15) = v2;
    operator delete(v2);
  }
  sub_20BEBFDB4((_QWORD *)this + 2);
  sub_20BEBCE60((unsigned int **)this + 1, v3);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::~TfDiagnosticMgr(this);
  operator delete(v1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AddDelegate(_QWORD *this, pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::Delegate *a2)
{
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;

  if (a2)
  {
    v3 = this;
    v19 = 1;
    v18 = this + 17;
    tbb::spin_rw_mutex_v3::internal_acquire_writer((tbb::spin_rw_mutex_v3 *)(this + 17));
    v4 = v3[16];
    v5 = (_QWORD *)v3[15];
    if ((unint64_t)v5 >= v4)
    {
      v7 = v3[14];
      v8 = ((uint64_t)v5 - v7) >> 3;
      if ((unint64_t)(v8 + 1) >> 61)
        sub_20BDDF694();
      v9 = v4 - v7;
      v10 = v9 >> 2;
      if (v9 >> 2 <= (unint64_t)(v8 + 1))
        v10 = v8 + 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
        v11 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v11 = v10;
      if (v11)
        v12 = (char *)sub_20BDDF6A8((uint64_t)(v3 + 16), v11);
      else
        v12 = 0;
      v13 = &v12[8 * v8];
      v14 = &v12[8 * v11];
      *(_QWORD *)v13 = a2;
      v6 = v13 + 8;
      v16 = (char *)v3[14];
      v15 = (char *)v3[15];
      if (v15 != v16)
      {
        do
        {
          v17 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *((_QWORD *)v13 - 1) = v17;
          v13 -= 8;
        }
        while (v15 != v16);
        v15 = (char *)v3[14];
      }
      v3[14] = v13;
      v3[15] = v6;
      v3[16] = v14;
      if (v15)
        operator delete(v15);
    }
    else
    {
      *v5 = a2;
      v6 = v5 + 1;
    }
    v3[15] = v6;
    return sub_20BEBF29C(&v18);
  }
  return this;
}

void sub_20BEBD04C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEBF29C(&a9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::RemoveDelegate(_QWORD *this, pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::Delegate *a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  char v5;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::Delegate *v6;

  v6 = a2;
  if (a2)
  {
    v2 = (uint64_t)this;
    v5 = 1;
    v4 = this + 17;
    tbb::spin_rw_mutex_v3::internal_acquire_writer((tbb::spin_rw_mutex_v3 *)(this + 17));
    v3 = sub_20BEBD100(*(_QWORD **)(v2 + 112), *(_QWORD **)(v2 + 120), &v6);
    if (*(_QWORD **)(v2 + 120) != v3)
      *(_QWORD *)(v2 + 120) = v3;
    return sub_20BEBF29C(&v4);
  }
  return this;
}

void sub_20BEBD0EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEBD100(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *i;

  if (result == a2)
  {
LABEL_4:
    result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2)
        goto LABEL_4;
    }
  }
  if (result != a2)
  {
    for (i = result + 1; i != a2; ++i)
    {
      if (*i != *a3)
        *result++ = *i;
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AppendError(unint64_t *a1, __int128 *a2)
{
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;

  v10 = 0;
  if (*(_QWORD *)sub_20BEBF348(a1 + 43, &v10))
  {
    v11 = 0;
    v4 = (uint64_t *)sub_20BEB5B80(a1 + 19, &v11);
    v5 = sub_20BEC0250((uint64_t)v4, 0, 0, a2);
    v6 = *v4;
    *v5 = *v4;
    v5[1] = v4;
    *(_QWORD *)(v6 + 8) = v5;
    *v4 = (uint64_t)v5;
    ++v4[2];
    v7 = a1 + 18;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    v9 = *v4;
    *(_QWORD *)(v9 + 152) = v8;
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_AppendErrorsToLogText((uint64_t)a1, v9);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_ReportError(a1, (uint64_t)a2);
  }
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_ReportError(unint64_t *a1, uint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  FILE *v10;
  __int128 v11;

  LOBYTE(v11) = 0;
  v4 = (_BYTE *)sub_20BEB5B80(a1 + 2, &v11);
  if (!*v4)
  {
    v5 = v4;
    *v4 = 1;
    BYTE8(v11) = 0;
    *(_QWORD *)&v11 = a1 + 17;
    tbb::spin_rw_mutex_v3::internal_acquire_reader(a1 + 17);
    v6 = (_QWORD *)a1[14];
    v7 = (_QWORD *)a1[15];
    if (v6 == v7)
    {
      v8 = (_QWORD *)a1[14];
    }
    else
    {
      do
      {
        if (*v6)
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v6 + 16))(*v6, a2);
        ++v6;
      }
      while (v6 != v7);
      v8 = (_QWORD *)a1[14];
      v6 = (_QWORD *)a1[15];
    }
    sub_20BEBF29C(&v11);
    if (v8 == v6 && *(_BYTE *)(a2 + 144) == 0)
    {
      v10 = (FILE *)*MEMORY[0x24BDAC8D8];
      v11 = *(_OWORD *)(a2 + 64);
      sub_20BEBD700(v10, (uint64_t *)&v11, a2, (uint64_t *)(a2 + 40));
    }
    *v5 = 0;
  }
}

void sub_20BEBD304(_Unwind_Exception *exception_object)
{
  _BYTE *v1;

  *v1 = 0;
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_AppendErrorsToLogText(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v6 = 0;
  v4 = sub_20BEB5B80((unint64_t *)(a1 + 248), &v6);
  v7 = 0;
  v5 = sub_20BEB5B80((unint64_t *)(a1 + 152), &v7);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText::_AppendAndPublishImpl(v4, 0, a2, v5);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_SpliceErrors(unint64_t *a1, _QWORD *a2)
{
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *i;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *j;
  char v11;
  char v12;

  v11 = 0;
  if (*(_QWORD *)sub_20BEBF348(a1 + 43, &v11))
  {
    v4 = a1 + 18;
    v5 = a2[2];
    do
      v6 = __ldaxr(v4);
    while (__stlxr(v6 + v5, v4));
    for (i = (_QWORD *)a2[1]; i != a2; i = (_QWORD *)i[1])
      i[19] = v6++;
    v12 = 0;
    v8 = (uint64_t *)sub_20BEB5B80(a1 + 19, &v12);
    v9 = a2[1];
    sub_20BEBD458((uint64_t)v8, v8, a2);
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_AppendErrorsToLogText((uint64_t)a1, v9);
  }
  else
  {
    for (j = (_QWORD *)a2[1]; j != a2; j = (_QWORD *)j[1])
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_ReportError(a1, (uint64_t)(j + 2));
  }
}

uint64_t sub_20BEBD458(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, void (**a7)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), unsigned __int8 a8)
{
  _BOOL8 v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20[4])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);
  void *__p[2];
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  uint64_t (*v27[7])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v27[6] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v18 = a2;
  v19 = a3;
  v16 = sub_20BEB8B64(7);
  if (v16)
    pxrInternal__aapl__pxrReserved__::ArchDebuggerTrap((pxrInternal__aapl__pxrReserved__ *)v16);
  if (sub_20BEBD6A0(0))
  {
    sub_20BEBD700((FILE *)*MEMORY[0x24BDAC8D8], &v18, a5, a6);
    sub_20BDDC0E4(__p, "ERROR");
    pxrInternal__aapl__pxrReserved__::TfLogStackTrace((char *)__p, 0);
    if (v22 < 0)
      operator delete(__p[0]);
  }
  else if (sub_20BEBD6A0(3))
  {
    sub_20BEBD700((FILE *)*MEMORY[0x24BDAC8D8], &v18, a5, a6);
  }
  v17 = *(_BYTE *)(a1 + 448);
  v20[0] = 0;
  v20[1] = 0;
  if (*a7)
    (*a7)(1, a7, v20, 0, 0);
  ((void (*)(void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD), BOOL, uint64_t, uint64_t))pxrInternal__aapl__pxrReserved__::TfError::TfError)(__p, a2, a3, a4, a5, a6, v20, (v17 | a8) != 0, v18, v19);
  sub_20BEBAE7C(v20);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::AppendError((unint64_t *)a1, (__int128 *)__p);
  sub_20BEBAE7C(v27);
  if (v26 < 0)
    operator delete(v25);
  if (v24 < 0)
    operator delete(v23);
}

void sub_20BEBD65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20BEBD6A0(int a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v5;
  uint64_t v6;

  v2 = sub_20BEBF224();
  v3 = atomic_load((unsigned int *)(v2 + 4 * a1));
  if (!v3)
  {
    v5 = v2;
    v6 = sub_20BEBF224();
    pxrInternal__aapl__pxrReserved__::TfDebug::_InitializeNode((void *)(v6 + 4 * a1), off_24C51B630[a1]);
    v3 = atomic_load((unsigned int *)(v5 + 4 * a1));
  }
  return v3 == 2;
}

void sub_20BEBD700(FILE *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  void **v5;
  void *__p[2];
  char v7;

  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::FormatDiagnostic(a2, a3, a4, (uint64_t)__p);
  if (v7 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  fputs((const char *)v5, a1);
  if (v7 < 0)
    operator delete(__p[0]);
}

uint64_t sub_20BEBD764(uint64_t a1)
{
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  return a1;
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostError(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this, const pxrInternal__aapl__pxrReserved__::TfDiagnosticBase *a2))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void (*v9)(uint64_t, char *, _QWORD, _QWORD, _QWORD);
  void (*v11[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v11[4] = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v4 = (char *)a2 + 80;
  v5 = *((_QWORD *)a2 + 8);
  v6 = *((_QWORD *)a2 + 9);
  if (*((char *)a2 + 103) >= 0)
    v7 = (char *)a2 + 80;
  else
    v7 = (char *)*((_QWORD *)a2 + 10);
  v8 = (char *)a2 + 104;
  v9 = (void (*)(uint64_t, char *, _QWORD, _QWORD, _QWORD))*((_QWORD *)v4 + 3);
  v11[0] = 0;
  v11[1] = 0;
  if (v9)
    v9(1, v8, v11, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostError((uint64_t)this, v5, v6, (uint64_t)v7, (uint64_t)a2, (uint64_t *)v4 - 5, v11, *((_BYTE *)a2 + 144));
  return sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v11);
}

void sub_20BEBD878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostWarning(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, __int128 *a5, std::string *a6, void (**a7)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD), char a8)
{
  _BYTE *v16;
  _BYTE *v17;
  _BOOL8 v18;
  _BOOL4 v19;
  char v20;
  char v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  BOOL v26;
  uint64_t v27;
  char v28;
  uint64_t v29[2];
  void (*v30[4])(uint64_t, _QWORD, void (**)(uint64_t), _QWORD, _QWORD);
  void *__p[2];
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  uint64_t (*v37[8])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v37[6] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v29[0] = a2;
  v29[1] = a3;
  LOBYTE(__p[0]) = 0;
  v16 = (_BYTE *)sub_20BEB5B80((unint64_t *)(a1 + 16), __p);
  v17 = v16;
  if (!*v16)
  {
    *v16 = 1;
    v18 = sub_20BEB8B64(9);
    if (v18)
      pxrInternal__aapl__pxrReserved__::ArchDebuggerTrap((pxrInternal__aapl__pxrReserved__ *)v18);
    v19 = sub_20BEBD6A0(1);
    if (v19)
    {
      sub_20BEBD700((FILE *)*MEMORY[0x24BDAC8D8], v29, (uint64_t)a5, (uint64_t *)a6);
      sub_20BDDC0E4(__p, "WARNING");
      pxrInternal__aapl__pxrReserved__::TfLogStackTrace((char *)__p, 0);
      if (v32 < 0)
        operator delete(__p[0]);
    }
    v26 = v19;
    v20 = *(_BYTE *)(a1 + 448);
    v30[0] = 0;
    v30[1] = 0;
    if (*a7)
      (*a7)(1, a7, v30, 0, 0);
    v21 = v20 | a8;
    sub_20BEBF3AC((uint64_t)__p, a2, a3, a4, a5, a6, v30, v21 != 0);
    sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v30);
    v28 = 0;
    v27 = a1 + 136;
    tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)(a1 + 136));
    v22 = *(_QWORD **)(a1 + 112);
    v23 = *(_QWORD **)(a1 + 120);
    if (v22 == v23)
    {
      v24 = *(_QWORD **)(a1 + 112);
    }
    else
    {
      do
      {
        if (*v22)
          (*(void (**)(_QWORD, void **))(*(_QWORD *)*v22 + 40))(*v22, __p);
        ++v22;
      }
      while (v22 != v23);
      v24 = *(_QWORD **)(a1 + 112);
      v22 = *(_QWORD **)(a1 + 120);
    }
    sub_20BEBF29C(&v27);
    v25 = v26;
    if (v24 != v22)
      v25 = 1;
    if (!v21 && (v25 & 1) == 0)
      sub_20BEBD700((FILE *)*MEMORY[0x24BDAC8D8], v29, (uint64_t)a5, (uint64_t *)a6);
    sub_20BEBAE7C(v37);
    if (v36 < 0)
      operator delete(v35);
    if (v34 < 0)
      operator delete(v33);
    *v17 = 0;
  }
}

void sub_20BEBDAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _BYTE *v23;

  sub_20BEBD764((uint64_t)&__p);
  *v23 = 0;
  _Unwind_Resume(a1);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostWarning(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this, const pxrInternal__aapl__pxrReserved__::TfDiagnosticBase *a2))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void (*v9)(uint64_t, char *, _QWORD, _QWORD, _QWORD);
  void (*v11[5])(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v11[4] = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v4 = (char *)a2 + 80;
  v5 = *((_QWORD *)a2 + 8);
  v6 = *((_QWORD *)a2 + 9);
  if (*((char *)a2 + 103) >= 0)
    v7 = (char *)a2 + 80;
  else
    v7 = (char *)*((_QWORD *)a2 + 10);
  v8 = (char *)a2 + 104;
  v9 = (void (*)(uint64_t, char *, _QWORD, _QWORD, _QWORD))*((_QWORD *)v4 + 3);
  v11[0] = 0;
  v11[1] = 0;
  if (v9)
    v9(1, v8, v11, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostWarning((uint64_t)this, v5, v6, v7, (__int128 *)a2, (std::string *)(v4 - 40), v11, *((_BYTE *)a2 + 144));
  return sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v11);
}

void sub_20BEBDC0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostStatus(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, __int128 *a5, std::string *a6, void (**a7)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD), char a8)
{
  _BYTE *v16;
  _BYTE *v17;
  char v18;
  char v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  char v24;
  uint64_t v25[2];
  void (*v26[4])(uint64_t, _QWORD, void (**)(uint64_t), _QWORD, _QWORD);
  _BYTE v27[40];
  void *v28;
  char v29;
  void *__p;
  char v31;
  uint64_t (*v32[8])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v32[6] = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v25[0] = a2;
  v25[1] = a3;
  v27[0] = 0;
  v16 = (_BYTE *)sub_20BEB5B80((unint64_t *)(a1 + 16), v27);
  v17 = v16;
  if (!*v16)
  {
    *v16 = 1;
    v18 = *(_BYTE *)(a1 + 448);
    v26[0] = 0;
    v26[1] = 0;
    if (*a7)
      (*a7)(1, a7, v26, 0, 0);
    v19 = v18 | a8;
    sub_20BEBF49C((uint64_t)v27, a2, a3, a4, a5, a6, v26, v19 != 0);
    sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v26);
    v24 = 0;
    v23 = a1 + 136;
    tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)(a1 + 136));
    v20 = *(_QWORD **)(a1 + 112);
    v21 = *(_QWORD **)(a1 + 120);
    if (v20 == v21)
    {
      v22 = *(_QWORD **)(a1 + 112);
    }
    else
    {
      do
      {
        if (*v20)
          (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*v20 + 32))(*v20, v27);
        ++v20;
      }
      while (v20 != v21);
      v22 = *(_QWORD **)(a1 + 112);
      v20 = *(_QWORD **)(a1 + 120);
    }
    sub_20BEBF29C(&v23);
    if (!v19 && v22 == v20)
      sub_20BEBD700((FILE *)*MEMORY[0x24BDAC8D8], v25, (uint64_t)a5, (uint64_t *)a6);
    sub_20BEBAE7C(v32);
    if (v31 < 0)
      operator delete(__p);
    if (v29 < 0)
      operator delete(v28);
    *v17 = 0;
  }
}

void sub_20BEBDDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  _BYTE *v10;
  va_list va;

  va_start(va, a10);
  sub_20BEBD764((uint64_t)va);
  *v10 = 0;
  _Unwind_Resume(a1);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostStatus(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this, const pxrInternal__aapl__pxrReserved__::TfDiagnosticBase *a2))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  void (*v9)(uint64_t, char *, _QWORD, _QWORD, _QWORD);
  void (*v11[5])(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v11[4] = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  v4 = (char *)a2 + 80;
  v5 = *((_QWORD *)a2 + 8);
  v6 = *((_QWORD *)a2 + 9);
  if (*((char *)a2 + 103) >= 0)
    v7 = (char *)a2 + 80;
  else
    v7 = (char *)*((_QWORD *)a2 + 10);
  v8 = (char *)a2 + 104;
  v9 = (void (*)(uint64_t, char *, _QWORD, _QWORD, _QWORD))*((_QWORD *)v4 + 3);
  v11[0] = 0;
  v11[1] = 0;
  if (v9)
    v9(1, v8, v11, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostStatus((uint64_t)this, v5, v6, v7, (__int128 *)a2, (std::string *)(v4 - 40), v11, *((_BYTE *)a2 + 144));
  return sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v11);
}

void sub_20BEBDF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  v7 = 0;
  v3 = sub_20BEB5B80((unint64_t *)(a1 + 152), &v7);
  if ((uint64_t *)v3 != a2)
  {
    v4 = *a2;
    v5 = a2[1];
    *(_QWORD *)(v4 + 8) = v5;
    *(_QWORD *)a2[1] = v4;
    --*(_QWORD *)(v3 + 16);
    sub_20BEC0024((uint64_t)(a2 + 2));
    operator delete(a2);
    return (uint64_t *)v5;
  }
  return a2;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_GetErrorMarkBegin(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this, unint64_t a2, unint64_t *a3)
{
  _QWORD *result;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  char v11;

  v11 = 0;
  result = (_QWORD *)sub_20BEB5B80((unint64_t *)this + 19, &v11);
  v7 = atomic_load((unint64_t *)this + 18);
  if (v7 <= a2 || !result[2])
  {
    if (!a3)
      return result;
    v9 = 0;
    goto LABEL_12;
  }
  v8 = (_QWORD *)result[1];
  if (result == v8)
  {
    v9 = 0;
    if (!a3)
      return result;
    goto LABEL_12;
  }
  v9 = 0;
  while (1)
  {
    v10 = (_QWORD *)*result;
    if (*(_QWORD *)(*result + 152) < a2)
      break;
    ++v9;
    result = (_QWORD *)*result;
    if (v10 == v8)
    {
      result = v8;
      break;
    }
  }
  if (a3)
LABEL_12:
    *a3 = v9;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(unint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v6;
  char v8;

  v3 = a3;
  if (a2 != a3)
  {
    v8 = 0;
    v6 = sub_20BEB5B80(a1 + 19, &v8);
    v3 = sub_20BEBE0AC(v6, a2, v3);
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_RebuildErrorLogText((pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)a1);
  }
  return v3;
}

_QWORD *sub_20BEBE0AC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  if (a2 != a3)
  {
    v4 = a2;
    v6 = *a3;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v6 + 8) = v7;
    do
    {
      v8 = (_QWORD *)v4[1];
      --*(_QWORD *)(a1 + 16);
      sub_20BEC0024((uint64_t)(v4 + 2));
      operator delete(v4);
      v4 = v8;
    }
    while (v8 != a3);
  }
  return a3;
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_RebuildErrorLogText(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *this)
{
  unint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;

  v1 = (unint64_t *)this;
  v5 = 0;
  v2 = sub_20BEB5B80((unint64_t *)this + 31, &v5);
  v1 += 19;
  v6 = 0;
  v3 = *(_QWORD *)(sub_20BEB5B80(v1, &v6) + 8);
  v7 = 0;
  v4 = sub_20BEB5B80(v1, &v7);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText::_AppendAndPublishImpl(v2, 1, v3, v4);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostWithInfo(_QWORD *a1, uint64_t *a2, void (**a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  unint64_t Instance;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v11[4] = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v11[0] = 0;
  v11[1] = 0;
  if (*a3)
    (*a3)(1, a3, v11, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostError(Instance, v7, v8, v9, (uint64_t)a1, a2, v11, 0);
  return sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v11);
}

void sub_20BEBE28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(_QWORD *a1, uint64_t *a2))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  uint64_t Instance;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v9[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v9[4] = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v9[0] = 0;
  v9[1] = 0;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostError(Instance, v5, v6, v7, (uint64_t)a1, a2, v9, 0);
  return sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v9);
}

void sub_20BEBE340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))va);
  _Unwind_Resume(a1);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostQuietly(_QWORD *a1, uint64_t *a2, void (**a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  unint64_t Instance;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11[5])(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD);

  v11[4] = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  v11[0] = 0;
  v11[1] = 0;
  if (*a3)
    (*a3)(1, a3, v11, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostError(Instance, v7, v8, v9, (uint64_t)a1, a2, v11, 1u);
  return sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v11);
}

void sub_20BEBE43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3, ...)
{
  void *__p[2];
  char v5;
  va_list v6;
  va_list va;

  va_start(va, a3);
  va_copy(v6, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, a2, va, a3);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::Post(this, (uint64_t *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20BEBE4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostQuietly(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3, ...)
{
  void *__p[2];
  char v5;
  va_list v6;
  void (*v7[5])(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  va_list va;

  va_start(va, a3);
  v7[4] = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  va_copy(v6, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, a2, va, a3);
  v7[0] = 0;
  v7[1] = 0;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::ErrorHelper::PostQuietly(this, (uint64_t *)__p, v7);
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v7);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20BEBE568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t (*a17)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  sub_20BEBAE7C(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3, ...)
{
  std::string __p;
  va_list v5;
  va_list va;

  va_start(va, a3);
  va_copy(v5, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a2, va, a3);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BEBE5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::Post(uint64_t a1, std::string *a2))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  unint64_t Instance;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v9[5])(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v9[4] = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(char **)(a1 + 56);
  v9[0] = 0;
  v9[1] = 0;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostWarning(Instance, v5, v6, v7, (__int128 *)a1, a2, v9, 0);
  return sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v9);
}

void sub_20BEBE6A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))va);
  _Unwind_Resume(a1);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::WarningHelper::PostWithInfo(uint64_t a1, std::string *a2, void (**a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  unint64_t Instance;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v11[5])(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v11[4] = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(char **)(a1 + 56);
  v11[0] = 0;
  v11[1] = 0;
  if (*a3)
    (*a3)(1, a3, v11, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostWarning(Instance, v7, v8, v9, (__int128 *)a1, a2, v11, 0);
  return sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v11);
}

void sub_20BEBE7A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post(pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3, ...)
{
  std::string __p;
  va_list v5;
  va_list va;

  va_start(va, a3);
  va_copy(v5, va);
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)&__p, a2, va, a3);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BEBE818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::Post(uint64_t a1, std::string *a2))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  unint64_t Instance;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void (*v9[5])(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v9[4] = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(char **)(a1 + 56);
  v9[0] = 0;
  v9[1] = 0;
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostStatus(Instance, v5, v6, v7, (__int128 *)a1, a2, v9, 0);
  return sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v9);
}

void sub_20BEBE8CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))va);
  _Unwind_Resume(a1);
}

uint64_t (**pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::StatusHelper::PostWithInfo(uint64_t a1, std::string *a2, void (**a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD)))(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)
{
  unint64_t Instance;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v11[5])(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);

  v11[4] = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))MEMORY[0x24BDAC8D0];
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  v9 = *(char **)(a1 + 56);
  v11[0] = 0;
  v11[1] = 0;
  if (*a3)
    (*a3)(1, a3, v11, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::PostStatus(Instance, v7, v8, v9, (__int128 *)a1, a2, v11, 0);
  return sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v11);
}

void sub_20BEBE9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::GetCodeName(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const char *v5;
  char *v6;
  void **v7;
  void *__p[2];
  char v9;
  __int128 v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName(*a1, a1[1], a2);
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(*a1 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
    if (v9 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"(%s)%d", v5, v6, v7, *((unsigned int *)a1 + 2));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v10;
    *(_QWORD *)(a2 + 16) = v11;
    HIBYTE(v11) = 0;
    LOBYTE(v10) = 0;
    if (v9 < 0)
      operator delete(__p[0]);
  }
}

void sub_20BEBEAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v16 + 23) < 0)
    operator delete(*(void **)v16);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_SetLogInfoForErrors(uint64_t a1, _QWORD *a2)
{
  const char *v3;
  char *v4;
  void *v5;
  _QWORD *v6;
  pthread_t v7;
  void *v8;
  char v9;
  void *__p;
  char v11;

  v7 = pthread_self();
  sub_20BEBEBB0();
  if (v9 >= 0)
    v5 = &v8;
  else
    v5 = v8;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Thread %s Pending Diagnostics", v3, v4, v5, v7);
  if (*a2 == a2[1])
    v6 = 0;
  else
    v6 = a2;
  pxrInternal__aapl__pxrReserved__::ArchSetExtraLogInfoForErrors((const void **)&__p, v6);
  if (v11 < 0)
    operator delete(__p);
  if (v9 < 0)
    operator delete(v8);
}

void sub_20BEBEB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEBEBB0()
{
  _QWORD v1[11];
  char v2;
  uint64_t v3;

  sub_20BDDE5E0((uint64_t)v1);
  sub_20BEC03C8(v1);
  std::stringbuf::str();
  v1[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v1[1] = MEMORY[0x24BEDB848] + 16;
  if (v2 < 0)
    operator delete((void *)v1[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v3);
}

void sub_20BEBEC64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText::AppendAndPublish(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText::_AppendAndPublishImpl(a1, 0, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText::_AppendAndPublishImpl(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  const char *v21;
  char *v22;
  void **v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  void *__p[2];
  uint64_t v40;
  void *v41[2];
  _QWORD *v42;
  char *v43;
  uint64_t *v44;

  if (*(_BYTE *)(a1 + 48))
    v6 = (uint64_t *)(a1 + 24);
  else
    v6 = (uint64_t *)a1;
  if (*(_BYTE *)(a1 + 48))
    v7 = (uint64_t *)a1;
  else
    v7 = (uint64_t *)(a1 + 24);
  if (a2)
    sub_20BDE5078(v6);
  if (a3 != a4)
  {
    v8 = a3;
    do
    {
      *(_OWORD *)v41 = *(_OWORD *)(v8 + 80);
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::FormatDiagnostic((uint64_t *)v41, v8 + 16, (uint64_t *)(v8 + 56), (uint64_t)__p);
      v10 = v6[1];
      v9 = v6[2];
      if (v10 >= v9)
      {
        v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - *v6) >> 3);
        v13 = v12 + 1;
        if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *v6) >> 3);
        if (2 * v14 > v13)
          v13 = 2 * v14;
        if (v14 >= 0x555555555555555)
          v15 = 0xAAAAAAAAAAAAAAALL;
        else
          v15 = v13;
        v44 = v6 + 2;
        if (v15)
          v16 = (char *)sub_20BDE4FF4((uint64_t)(v6 + 2), v15);
        else
          v16 = 0;
        v17 = &v16[24 * v12];
        v41[0] = v16;
        v41[1] = v17;
        v43 = &v16[24 * v15];
        v18 = *(_OWORD *)__p;
        *((_QWORD *)v17 + 2) = v40;
        *(_OWORD *)v17 = v18;
        __p[1] = 0;
        v40 = 0;
        __p[0] = 0;
        v42 = v17 + 24;
        sub_20BDF34C0(v6, v41);
        v19 = v6[1];
        sub_20BDF3648((uint64_t)v41);
        v20 = SHIBYTE(v40);
        v6[1] = v19;
        if (v20 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v11 = *(_OWORD *)__p;
        *(_QWORD *)(v10 + 16) = v40;
        *(_OWORD *)v10 = v11;
        v6[1] = v10 + 24;
      }
      v8 = *(_QWORD *)(v8 + 8);
    }
    while (v8 != a4);
  }
  pthread_self();
  sub_20BEBEBB0();
  if (v40 >= 0)
    v23 = __p;
  else
    v23 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Thread %s Pending Diagnostics", v21, v22, v23);
  if (*v6 == v6[1])
    v24 = 0;
  else
    v24 = v6;
  pxrInternal__aapl__pxrReserved__::ArchSetExtraLogInfoForErrors((const void **)v41, v24);
  if (SHIBYTE(v42) < 0)
    operator delete(v41[0]);
  if (SHIBYTE(v40) < 0)
    operator delete(__p[0]);
  if (a2)
    sub_20BDE5078(v7);
  for (; a3 != a4; a3 = *(_QWORD *)(a3 + 8))
  {
    *(_OWORD *)v41 = *(_OWORD *)(a3 + 80);
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::FormatDiagnostic((uint64_t *)v41, a3 + 16, (uint64_t *)(a3 + 56), (uint64_t)__p);
    v26 = v7[1];
    v25 = v7[2];
    if (v26 >= v25)
    {
      v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *v7) >> 3);
      v29 = v28 + 1;
      if (v28 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v25 - *v7) >> 3);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x555555555555555)
        v31 = 0xAAAAAAAAAAAAAAALL;
      else
        v31 = v29;
      v44 = v7 + 2;
      if (v31)
        v32 = (char *)sub_20BDE4FF4((uint64_t)(v7 + 2), v31);
      else
        v32 = 0;
      v33 = &v32[24 * v28];
      v41[0] = v32;
      v41[1] = v33;
      v43 = &v32[24 * v31];
      v34 = *(_OWORD *)__p;
      *((_QWORD *)v33 + 2) = v40;
      *(_OWORD *)v33 = v34;
      __p[1] = 0;
      v40 = 0;
      __p[0] = 0;
      v42 = v33 + 24;
      sub_20BDF34C0(v7, v41);
      v35 = v7[1];
      sub_20BDF3648((uint64_t)v41);
      v36 = SHIBYTE(v40);
      v7[1] = v35;
      if (v36 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v27 = *(_OWORD *)__p;
      *(_QWORD *)(v26 + 16) = v40;
      *(_OWORD *)v26 = v27;
      v7[1] = v26 + 24;
    }
  }
  *(_BYTE *)(a1 + 48) ^= 1u;
}

void sub_20BEBEFE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText::RebuildAndPublish(uint64_t a1, uint64_t a2, uint64_t a3)
{
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText::_AppendAndPublishImpl(a1, 1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::FormatDiagnostic(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__ *v7;
  _BYTE *v8;
  void **v9;
  _BOOL8 v10;
  _BOOL4 v11;
  int v12;
  uint64_t *v13;
  const char *ProgramNameForErrors;
  const char *v15;
  char *v16;
  uint64_t *v17;
  const char *v18;
  uint64_t v19;
  int v20;
  void **v21;
  _BOOL4 IsMainThread;
  const char *v23;
  char *v24;
  void **v25;
  const char *v26;
  uint64_t *v27;
  uint64_t v28;
  _BYTE v29[15];
  char v30;
  void *__p[2];
  char v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::GetCodeName(a1, (uint64_t)__p);
  v8 = *(_BYTE **)(a2 + 8);
  if (v8)
  {
    if (!*(_BYTE *)(a2 + 32) && *v8 && **(_BYTE **)a2)
    {
      v20 = v32;
      v21 = (void **)__p[0];
      IsMainThread = pxrInternal__aapl__pxrReserved__::ArchIsMainThread(v7);
      v25 = __p;
      if (v20 < 0)
        v25 = v21;
      v26 = " (secondary thread)";
      if (IsMainThread)
        v26 = "";
      if (*((char *)a3 + 23) >= 0)
        v27 = a3;
      else
        v27 = (uint64_t *)*a3;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s: in %s at line %zu of %s -- %s\n", v23, v24, v25, v26, *(_OWORD *)(a2 + 8), *(_QWORD *)a2, v27);
    }
    else
    {
      if (v32 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      v10 = pxrInternal__aapl__pxrReserved__::ArchIsMainThread(v7);
      v11 = v10;
      v12 = *((char *)a3 + 23);
      v13 = (uint64_t *)*a3;
      ProgramNameForErrors = pxrInternal__aapl__pxrReserved__::ArchGetProgramNameForErrors((pxrInternal__aapl__pxrReserved__ *)v10);
      if (v12 >= 0)
        v17 = a3;
      else
        v17 = v13;
      v18 = " (secondary thread)";
      if (v11)
        v18 = "";
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s%s: %s [%s]\n", v15, v16, v9, v18, v17, ProgramNameForErrors);
    }
    v33[0] = *(_QWORD *)v29;
    *(_QWORD *)((char *)v33 + 7) = *(_QWORD *)&v29[7];
    v19 = v33[0];
    *(_QWORD *)a4 = v28;
    *(_QWORD *)(a4 + 8) = v19;
    *(_QWORD *)(a4 + 15) = *(_QWORD *)((char *)v33 + 7);
    *(_BYTE *)(a4 + 23) = v30;
  }
  else
  {
    sub_20BDDC0E4((_QWORD *)a4, "");
  }
  if (v32 < 0)
    operator delete(__p[0]);
}

void sub_20BEBF1F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEBF224()
{
  unsigned __int8 v0;
  _QWORD *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_25473B188);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473B188))
  {
    v2 = operator new(0x10uLL);
    *v2 = 0;
    v2[1] = 0;
    qword_25473B180 = (uint64_t)v2;
    __cxa_guard_release(&qword_25473B188);
  }
  return qword_25473B180;
}

void sub_20BEBF284(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473B188);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEBF29C(_QWORD *a1)
{
  if (*a1)
    sub_20BEBF2D0((uint64_t)a1);
  return a1;
}

uint64_t sub_20BEBF2D0(uint64_t result)
{
  unint64_t *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = *(unint64_t **)result;
  *(_QWORD *)result = 0;
  if (*(_BYTE *)(result + 8))
  {
    while (1)
    {
      v2 = *v1;
      v3 = *v1 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        while (1)
        {
          v4 = __ldaxr(v1);
          if (v4 != v2)
            break;
          if (!__stlxr(v3, v1))
            return result;
        }
        __clrex();
        do
          v5 = __ldxr(v1);
        while (__stxr(v5, v1));
      }
      while (v5 == v2);
      result = sched_yield();
    }
  }
  do
    v6 = __ldaxr(v1);
  while (__stlxr(v6 - 4, v1));
  return result;
}

const void *sub_20BEBF348(unint64_t *a1, _BYTE *a2)
{
  void *v4;
  const void *v5;

  v4 = pthread_getspecific(a1[3]);
  if (v4)
  {
    v5 = v4;
    *a2 = 1;
  }
  else
  {
    v5 = (const void *)sub_20BEB5B80(a1, a2);
    pthread_setspecific(a1[3], v5);
  }
  return v5;
}

uint64_t sub_20BEBF3AC(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, __int128 *a5, std::string *__str, void (**a7)(uint64_t, _QWORD, void (**)(uint64_t), _QWORD, _QWORD), char a8)
{
  void (*v16[5])(uint64_t);

  v16[4] = *(void (**)(uint64_t))MEMORY[0x24BDAC8D0];
  v16[0] = 0;
  v16[1] = 0;
  if (*a7)
    (*a7)(1, a7, v16, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticBase::TfDiagnosticBase(a1, a2, a3, a4, a5, __str, v16, a8);
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v16);
  return a1;
}

void sub_20BEBF480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEBF49C(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, __int128 *a5, std::string *__str, void (**a7)(uint64_t, _QWORD, void (**)(uint64_t), _QWORD, _QWORD), char a8)
{
  void (*v16[5])(uint64_t);

  v16[4] = *(void (**)(uint64_t))MEMORY[0x24BDAC8D0];
  v16[0] = 0;
  v16[1] = 0;
  if (*a7)
    (*a7)(1, a7, v16, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticBase::TfDiagnosticBase(a1, a2, a3, a4, a5, __str, v16, a8);
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v16);
  return a1;
}

void sub_20BEBF570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BEBF58C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t i;

  *sub_20BEBF628(a1) = &unk_24C51B1E8;
  v4 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x10);
  v5 = *a2;
  *v4 = &unk_24C51B298;
  v4[1] = v5;
  a1[4] = v4;
  for (i = 10; i != 13; ++i)
    a1[i] = 0;
  a1[8] = 0;
  a1[7] = 0;
  a1[9] = a1 + 10;
  a1[6] = sub_20BEB4DA8;
  return a1;
}

void sub_20BEBF614(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF688(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEBF628(_QWORD *a1)
{
  *a1 = &unk_24C51AE78;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_24C51B260;
  pthread_key_create(a1 + 3, 0);
  return a1;
}

void sub_20BEBF680(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEBF688(_QWORD *a1)
{
  *a1 = &unk_24C51B260;
  pthread_key_delete(a1[3]);
  *a1 = &unk_24C51AE78;
  return a1;
}

uint64_t sub_20BEBF6D4(uint64_t a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((tbb::internal::concurrent_vector_base_v3 *)(a1 + 48), 1, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<unsigned long>,128ul>>>::initialize_array, 0);
  v3 = sub_20BEB4B94((unint64_t)v2);
  v4 = *(_QWORD *)(a1 + 72);
  __dmb(0xBu);
  v5 = *(_QWORD *)(v4 + 8 * v3) + (((_QWORD)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32), v5);
  *(_BYTE *)(v5 + 8) = 1;
  return v5;
}

uint64_t sub_20BEBF758(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_20BEBF76C(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_20BEBF774(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20BEC01C0(a1);
  operator delete(v1);
}

_QWORD *sub_20BEBF788(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x10);
  *result = &unk_24C51B320;
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C51B298;
  result[1] = v3;
  return result;
}

uint64_t sub_20BEBF7D0(uint64_t a1)
{
  void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

uint64_t sub_20BEBF804(uint64_t result, _QWORD *a2)
{
  *a2 = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20BEBF810(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t i;

  *a1 = &unk_24C51AE78;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_24C51B358;
  v2 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *v2 = &unk_24C51B3B8;
  a1[3] = v2;
  for (i = 9; i != 12; ++i)
    a1[i] = 0;
  a1[7] = 0;
  a1[6] = 0;
  a1[8] = a1 + 9;
  a1[5] = sub_20BEBF9CC;
  return a1;
}

void sub_20BEBF8AC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BEBF8B4(uint64_t a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((tbb::internal::concurrent_vector_base_v3 *)(a1 + 40), 1, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>>>::initialize_array, 0);
  v3 = sub_20BEB4B94((unint64_t)v2);
  v4 = *(_QWORD *)(a1 + 64);
  __dmb(0xBu);
  v5 = *(_QWORD *)(v4 + 8 * v3) + (((_QWORD)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5);
  *(_BYTE *)(v5 + 1) = 1;
  return v5;
}

uint64_t sub_20BEBF938(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_20BEBF94C(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_20BEBF954(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20BEBFDB4(a1);
  operator delete(v1);
}

_QWORD *sub_20BEBF968()
{
  _QWORD *result;

  result = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *result = &unk_24C51B3B8;
  return result;
}

uint64_t sub_20BEBF990(uint64_t a1)
{
  void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_20BEBF9C4(uint64_t a1, _BYTE *a2)
{
  *a2 = 0;
}

uint64_t sub_20BEBF9CC(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    bzero(a1, a3 << 7);
}

_QWORD *sub_20BEBF9EC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t i;

  *a1 = &unk_24C51AE78;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_24C51B450;
  v2 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *v2 = &unk_24C51B4B0;
  a1[3] = v2;
  for (i = 9; i != 12; ++i)
    a1[i] = 0;
  a1[7] = 0;
  a1[6] = 0;
  a1[8] = a1 + 9;
  a1[5] = sub_20BEBFBAC;
  return a1;
}

void sub_20BEBFA88(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BEBFA90(uint64_t a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((tbb::internal::concurrent_vector_base_v3 *)(a1 + 40), 1, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>>>::initialize_array, 0);
  v3 = sub_20BEB4B94((unint64_t)v2);
  v4 = *(_QWORD *)(a1 + 64);
  __dmb(0xBu);
  v5 = *(_QWORD *)(v4 + 8 * v3) + (((_QWORD)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5);
  *(_BYTE *)(v5 + 24) = 1;
  return v5;
}

uint64_t sub_20BEBFB14(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_20BEBFB28(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_20BEBFB30(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20BEBFEA4(a1);
  operator delete(v1);
}

_QWORD *sub_20BEBFB44()
{
  _QWORD *result;

  result = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *result = &unk_24C51B4B0;
  return result;
}

uint64_t sub_20BEBFB6C(uint64_t a1)
{
  void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_20BEBFBA0(uint64_t a1, _QWORD *a2)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
}

uint64_t sub_20BEBFBAC(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    bzero(a1, a3 << 7);
}

_QWORD *sub_20BEBFBCC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t i;

  *a1 = &unk_24C51AE78;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_24C51B548;
  v2 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *v2 = &unk_24C51B5A8;
  a1[3] = v2;
  for (i = 9; i != 12; ++i)
    a1[i] = 0;
  a1[7] = 0;
  a1[6] = 0;
  a1[8] = a1 + 9;
  a1[5] = sub_20BEBFD94;
  return a1;
}

void sub_20BEBFC68(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BEBFC70(uint64_t a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((tbb::internal::concurrent_vector_base_v3 *)(a1 + 40), 1, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>>>::initialize_array, 0);
  v3 = sub_20BEB4B94((unint64_t)v2);
  v4 = *(_QWORD *)(a1 + 64);
  __dmb(0xBu);
  v5 = *(_QWORD *)(v4 + 8 * v3) + (((_QWORD)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5);
  *(_BYTE *)(v5 + 56) = 1;
  return v5;
}

uint64_t sub_20BEBFCF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_20BEBFD08(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_20BEBFD10(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20BEC0070(a1);
  operator delete(v1);
}

_QWORD *sub_20BEBFD24()
{
  _QWORD *result;

  result = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *result = &unk_24C51B5A8;
  return result;
}

uint64_t sub_20BEBFD4C(uint64_t a1)
{
  void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

double sub_20BEBFD80(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)(a2 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  return result;
}

uint64_t sub_20BEBFD94(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    bzero(a1, a3 << 7);
}

_QWORD *sub_20BEBFDB4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51B358;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20BEB4954((uint64_t)a1);
  sub_20BEBFE1C(a1 + 4);
  *a1 = &unk_24C51AE78;
  return a1;
}

unint64_t *sub_20BEBFE1C(unint64_t *a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  _QWORD *v3;
  unint64_t v4;
  void *v5;

  v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  v3 = (_QWORD *)a1[4];
  v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>>>::destroy_array);
  sub_20BEB4AD0((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

uint64_t tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<BOOL>,128ul>>>::destroy_array(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  if (a2)
  {
    v2 = (_BYTE *)(result + (a2 << 7) - 127);
    do
    {
      if (*v2)
        *v2 = 0;
      v2 -= 128;
      --a2;
    }
    while (a2);
  }
  return result;
}

_QWORD *sub_20BEBFEA4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51B450;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20BEB4954((uint64_t)a1);
  sub_20BEBFF0C(a1 + 4);
  *a1 = &unk_24C51AE78;
  return a1;
}

unint64_t *sub_20BEBFF0C(unint64_t *a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  _QWORD *v3;
  unint64_t v4;
  void *v5;

  v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  v3 = (_QWORD *)a1[4];
  v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>>>::destroy_array);
  sub_20BEB4AD0((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<pxrInternal__aapl__pxrReserved__::TfError>>,128ul>>>::destroy_array(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a2;
    v3 = a1 + (a2 << 7) - 128;
    do
    {
      if (*(_BYTE *)(v3 + 24))
      {
        sub_20BEBFFB4((uint64_t *)v3);
        *(_BYTE *)(v3 + 24) = 0;
      }
      v3 -= 128;
      --v2;
    }
    while (v2);
  }
}

void sub_20BEBFFB4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        sub_20BEC0024((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_20BEC0024(uint64_t a1)
{
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(a1 + 104));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

_QWORD *sub_20BEC0070(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51B548;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20BEB4954((uint64_t)a1);
  sub_20BEC00D8(a1 + 4);
  *a1 = &unk_24C51AE78;
  return a1;
}

unint64_t *sub_20BEC00D8(unint64_t *a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  _QWORD *v3;
  unint64_t v4;
  void *v5;

  v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  v3 = (_QWORD *)a1[4];
  v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>>>::destroy_array);
  sub_20BEB4AD0((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

uint64_t tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_LogText>,128ul>>>::destroy_array(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  if (a2)
  {
    v2 = a2;
    result = result + (a2 << 7) - 128;
    do
    {
      --v2;
      result = sub_20BEC0170(result) - 128;
    }
    while (v2);
  }
  return result;
}

uint64_t sub_20BEC0170(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 56))
  {
    v3 = (void **)(a1 + 24);
    sub_20BDE5038(&v3);
    v3 = (void **)a1;
    sub_20BDE5038(&v3);
    *(_BYTE *)(a1 + 56) = 0;
  }
  return a1;
}

_QWORD *sub_20BEC01C0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51B1E8;
  v2 = a1[4];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20BEC0218((uint64_t)a1);
  sub_20BEB4A70(a1 + 5);
  return sub_20BEBF688(a1);
}

uint64_t sub_20BEC0218(uint64_t a1)
{
  pthread_key_t *v2;

  v2 = (pthread_key_t *)(a1 + 24);
  pthread_key_delete(*(_QWORD *)(a1 + 24));
  pthread_key_create(v2, 0);
  return sub_20BEB4954(a1);
}

_QWORD *sub_20BEC0250(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  uint64_t v7;
  _QWORD *v8;

  v7 = a1 + 16;
  v8 = operator new(0xA8uLL);
  *v8 = a2;
  v8[1] = a3;
  sub_20BEC02C0(v7, (uint64_t)(v8 + 2), a4);
  return v8;
}

void sub_20BEC02AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_20BEC02C0(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  void *result;
  __int128 v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v12;

  v5 = *a3;
  v6 = a3[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  *(_OWORD *)(a2 + 16) = v6;
  v7 = (_BYTE *)(a2 + 40);
  if (*((char *)a3 + 63) < 0)
  {
    result = sub_20BDDBFAC(v7, *((void **)a3 + 5), *((_QWORD *)a3 + 6));
  }
  else
  {
    v8 = *(__int128 *)((char *)a3 + 40);
    *(_QWORD *)(a2 + 56) = *((_QWORD *)a3 + 7);
    *(_OWORD *)v7 = v8;
  }
  *(_OWORD *)(a2 + 64) = a3[4];
  if (*((char *)a3 + 103) < 0)
  {
    result = sub_20BDDBFAC((_BYTE *)(a2 + 80), *((void **)a3 + 10), *((_QWORD *)a3 + 11));
  }
  else
  {
    v10 = a3[5];
    *(_QWORD *)(a2 + 96) = *((_QWORD *)a3 + 12);
    *(_OWORD *)(a2 + 80) = v10;
  }
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))*((_QWORD *)a3 + 13);
  if (v11)
    result = (void *)v11(1, (uint64_t)a3 + 104, a2 + 104, 0, 0);
  v12 = *((_QWORD *)a3 + 17);
  *(_BYTE *)(a2 + 144) = *((_BYTE *)a3 + 144);
  *(_QWORD *)(a2 + 136) = v12;
  return result;
}

void sub_20BEC0394(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BEC03C8(_QWORD *a1)
{
  uint64_t v2;
  const std::locale *v3;
  std::locale *v4;
  std::locale *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  void *__p[2];
  unsigned __int8 v11;
  std::locale v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;
  std::locale v16;

  sub_20BDDE5E0((uint64_t)v13);
  v2 = *(_QWORD *)(v13[0] - 24);
  v3 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + v2));
  std::ios_base::imbue((std::ios_base *)((char *)v13 + v2), v3);
  std::locale::~locale((std::locale *)__p);
  v4 = *(std::locale **)((char *)&v13[5] + v2);
  if (v4)
  {
    (*((void (**)(std::locale *, const std::locale *))v4->__locale_ + 2))(v4, v3);
    v5 = v4 + 1;
    std::locale::locale(&v16, v5);
    std::locale::operator=(v5, v3);
    std::locale::~locale(&v16);
  }
  std::locale::~locale(&v12);
  std::ostream::operator<<();
  std::stringbuf::str();
  if ((v11 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v7 = v11;
  else
    v7 = (uint64_t)__p[1];
  v8 = sub_20BDDC1C8(a1, (uint64_t)v6, v7);
  if ((char)v11 < 0)
    operator delete(__p[0]);
  v13[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v13[1] = MEMORY[0x24BEDB848] + 16;
  if (v14 < 0)
    operator delete((void *)v13[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x212B92EB0](&v15);
  return v8;
}

void sub_20BEC0544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  sub_20BDDE6CC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DlOpenIsActive(pxrInternal__aapl__pxrReserved__ *this)
{
  return byte_2547850C0;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_DlCloseIsActive(pxrInternal__aapl__pxrReserved__ *this)
{
  return byte_2547850C1;
}

void *pxrInternal__aapl__pxrReserved__::TfDlopen(char *a1, uint64_t a2, void **a3)
{
  const char *v6;
  char *v7;
  char *v8;
  char v9;
  char *v10;
  void *v11;
  const char *v12;
  char *v13;
  char *v14;
  void *v15;
  const char *v16;
  char *v17;
  char *v18;
  void **v19;
  void *__p[2];
  void *v22;

  if (sub_20BEB8B64(3))
  {
    if (a1[23] >= 0)
      v8 = a1;
    else
      v8 = *(char **)a1;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfDlopen: [opening] '%s' (flag=%x)...\n", v6, v7, v8, a2);
  }
  v9 = byte_2547850C0;
  byte_2547850C0 = 1;
  if (a1[23] >= 0)
    v10 = a1;
  else
    v10 = *(char **)a1;
  sub_20BDDC0E4(__p, v10);
  v11 = pxrInternal__aapl__pxrReserved__::ArchLibraryOpen((uint64_t)__p, a2);
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  byte_2547850C0 = v9;
  if (sub_20BEB8B64(3))
  {
    if (a1[23] >= 0)
      v14 = a1;
    else
      v14 = *(char **)a1;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfDlopen: [opened] '%s' (handle=%p)\n", v12, v13, v14, v11);
  }
  pxrInternal__aapl__pxrReserved__::ArchLibraryError(__p);
  v15 = (void *)HIBYTE(v22);
  if (SHIBYTE(v22) < 0)
    v15 = __p[1];
  if (v15)
  {
    if (sub_20BEB8B64(3))
    {
      if (a1[23] >= 0)
        v18 = a1;
      else
        v18 = *(char **)a1;
      v19 = __p;
      if (SHIBYTE(v22) < 0)
        v19 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfDlopen: [error on opening] '%s': %s\n", v16, v17, v18, v19);
    }
    if (a3)
    {
      if (*((char *)a3 + 23) < 0)
        operator delete(*a3);
      *(_OWORD *)a3 = *(_OWORD *)__p;
      a3[2] = v22;
      return v11;
    }
  }
  else if (a3)
  {
    if (*((char *)a3 + 23) < 0)
    {
      *(_BYTE *)*a3 = 0;
      a3[1] = 0;
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *((_BYTE *)a3 + 23) = 0;
    }
  }
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  return v11;
}

void sub_20BEC073C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfDlclose(pxrInternal__aapl__pxrReserved__ *this, void *a2)
{
  char v3;
  const char *v4;
  char *v5;
  uint64_t result;

  v3 = byte_2547850C1;
  byte_2547850C1 = 1;
  if (sub_20BEB8B64(4))
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfDlclose: handle = %p\n", v4, v5, this);
  result = pxrInternal__aapl__pxrReserved__::ArchLibraryClose(this);
  byte_2547850C1 = v3;
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  void *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA59716 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C(&v15, "Tf", "TfSingleton::_CreateInstance", __p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = operator new(0xF8uLL);
      sub_20BEC1BB4((unint64_t)v10);
      v12 = atomic_load(a1);
      if (v12)
      {
        if (v10 != (void *)v12)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistr"
                "y>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance");
        }
      }
      else
      {
        do
          v13 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistr"
                "y>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_15Tf_EnumRegistryEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BEC09B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::DeleteInstance()
{
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *i;
  unint64_t v1;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *v2;

  for (i = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
        i;
        i = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
    if ((pxrInternal__aapl__pxrReserved__::TfRegistryManager *)v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance))
      {
        v2 = sub_20BEC1A1C(i);
        operator delete(v2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

void pxrInternal__aapl__pxrReserved__::TfEnum::_AddName(std::string::size_type a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::string::size_type v7;
  std::string::size_type size;
  char v9;
  unint64_t Instance;
  size_t v11;
  std::string *v12;
  void **v13;
  std::string *p_str;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  std::string *v24;
  std::string *v25;
  unsigned __int8 *v26;
  std::string::size_type v27;
  uint64_t *v28;
  uint64_t *v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  std::string::size_type v33;
  unsigned __int8 *v34;
  uint64_t v35;
  std::string *v36;
  uint64_t v37;
  uint64_t v38;
  std::string *v39;
  uint64_t v40;
  _BYTE *v41;
  std::string __p;
  _BYTE *v44;
  std::string __str;
  void *v46[2];
  unsigned __int8 v47;
  uint64_t v48;
  int v49;
  std::string::size_type v50;
  uint64_t v51;
  std::string *v52;
  std::string v53;
  std::string *v54;
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  v50 = a1;
  v51 = a2;
  sub_20BEB59B0((uint64_t)&v48, (uint64_t)"Tf", (uint64_t)"TfEnum::_AddName");
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v46);
  v7 = std::string::rfind((const std::string *)a3, 58, 0xFFFFFFFFFFFFFFFFLL);
  if (v7 == -1)
  {
    if (*(char *)(a3 + 23) < 0)
      sub_20BDDBFAC(&__str, *(void **)a3, *(_QWORD *)(a3 + 8));
    else
      __str = *(std::string *)a3;
  }
  else
  {
    std::string::basic_string(&__str, (const std::string *)a3, v7 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v53);
  }
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
    if (!Instance)
      Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
    sub_20BEB3FEC((uint64_t)&v44, Instance);
    if ((v47 & 0x80u) == 0)
      v11 = v47;
    else
      v11 = (size_t)v46[1];
    v12 = &v53;
    sub_20BDF6BDC((uint64_t)&v53, v11 + 2);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if (v11)
    {
      if ((v47 & 0x80u) == 0)
        v13 = v46;
      else
        v13 = (void **)v46[0];
      memmove(v12, v13, v11);
    }
    strcpy((char *)v12 + v11, "::");
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      v15 = __str.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v53, (const std::string::value_type *)p_str, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
    v18 = sub_20BEC21AC(Instance + 8, (int *)&v50, (uint64_t)&unk_20CAC184C, &v53);
    std::string::operator=((std::string *)(v18 + 4), &__str);
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
    v19 = sub_20BEC21AC(Instance + 48, (int *)&v50, (uint64_t)&unk_20CAC184C, &v53);
    std::string::operator=((std::string *)(v19 + 4), &__p);
    v20 = *(unsigned __int8 *)(a4 + 23);
    v21 = *(_QWORD *)(a4 + 8);
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
    v22 = sub_20BEC21AC(Instance + 88, (int *)&v50, (uint64_t)&unk_20CAC184C, &v53);
    if ((v20 & 0x80u) == 0)
      v23 = v20;
    else
      v23 = v21;
    v24 = (std::string *)(v22 + 4);
    if (v23)
      v25 = (std::string *)a4;
    else
      v25 = &__str;
    std::string::operator=(v24, v25);
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v26 = sub_20BEC24F8(Instance + 128, (unsigned __int8 *)&__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v53);
    v27 = v50;
    *((_QWORD *)v26 + 5) = v50;
    *((_DWORD *)v26 + 12) = v51;
    sub_20BDDC0E4(&v53, (char *)(*(_QWORD *)(v27 + 8) & 0x7FFFFFFFFFFFFFFFLL));
    v52 = &v53;
    v28 = (uint64_t *)sub_20BEC1E04(Instance + 168, (unsigned __int8 *)&v53, (uint64_t)&unk_20CAC184C, (__int128 **)&v52);
    v29 = v28;
    v30 = v28[6];
    if (v30 >= v28[7])
    {
      v32 = sub_20BE4EE50(v28 + 5, (__int128 *)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20BDDBFAC((_BYTE *)v28[6], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        v31 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(_QWORD *)(v30 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
        *(_OWORD *)v30 = v31;
      }
      v32 = v30 + 24;
      v29[6] = v30 + 24;
    }
    v29[6] = v32;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    v33 = v50;
    v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
    v34 = sub_20BEC286C(Instance + 208, (unsigned __int8 *)v46, (uint64_t)&unk_20CAC184C, (__int128 **)&v53);
    *((_QWORD *)v34 + 5) = v33;
    v35 = pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance((pxrInternal__aapl__pxrReserved__::TfRegistryManager *)v34);
    v36 = (std::string *)operator new(0x20uLL);
    v36->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C51B670;
    v36->__r_.__value_.__l.__size_ = Instance;
    v36->__r_.__value_.__r.__words[2] = v50;
    LODWORD(v36[1].__r_.__value_.__l.__data_) = v51;
    v54 = v36;
    pxrInternal__aapl__pxrReserved__::TfRegistryManager::AddFunctionForUnload(v35, (uint64_t)&v53);
    v39 = v54;
    if (v54 == &v53)
    {
      v40 = 4;
      v39 = &v53;
    }
    else
    {
      if (!v54)
      {
LABEL_48:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v41 = v44;
        if (v44)
        {
          __dmb(0xBu);
          *v41 = 0;
        }
        v9 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        goto LABEL_53;
      }
      v40 = 5;
    }
    (*(void (**)(std::string *, uint64_t, uint64_t))(v39->__r_.__value_.__r.__words[0] + 8 * v40))(v39, v37, v38);
    goto LABEL_48;
  }
LABEL_53:
  if (v9 < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if ((char)v47 < 0)
    operator delete(v46[0]);
  while (v49--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v48);
}

void sub_20BEC0F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, _BYTE *a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  *(_QWORD *)(v31 + 48) = v32;
  if (*(char *)(v33 - 49) < 0)
    operator delete(*(void **)(v33 - 72));
  if (a14 < 0)
    operator delete(__p);
  if (a16)
  {
    __dmb(0xBu);
    *a16 = 0;
  }
  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  sub_20BEB24F4((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfEnum::GetName(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  char *v6;
  unint64_t Instance;
  uint64_t *v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  if (!strcmp((const char *)(*(_QWORD *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d", v5, v6, a2);
  }
  else
  {
    Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
    if (!Instance)
      Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
    sub_20BEB3FEC((uint64_t)&v11, Instance);
    v8 = sub_20BEC31D8((_QWORD *)(Instance + 8), (int *)v12);
    if (v8)
    {
      if (*((char *)v8 + 55) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, (void *)v8[4], v8[5]);
      }
      else
      {
        v9 = *((_OWORD *)v8 + 2);
        *(_QWORD *)(a3 + 16) = v8[6];
        *(_OWORD *)a3 = v9;
      }
    }
    else
    {
      sub_20BDDC0E4((_QWORD *)a3, "");
    }
    v10 = v11;
    if (v11)
    {
      __dmb(0xBu);
      *v10 = 0;
    }
  }
}

void sub_20BEC1160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _BYTE *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfEnum::GetFullName(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  char *v6;
  unint64_t Instance;
  uint64_t *v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  if (!strcmp((const char *)(*(_QWORD *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"int::%d", v5, v6, a2);
  }
  else
  {
    Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
    if (!Instance)
      Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
    sub_20BEB3FEC((uint64_t)&v11, Instance);
    v8 = sub_20BEC31D8((_QWORD *)(Instance + 48), (int *)v12);
    if (v8)
    {
      if (*((char *)v8 + 55) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, (void *)v8[4], v8[5]);
      }
      else
      {
        v9 = *((_OWORD *)v8 + 2);
        *(_QWORD *)(a3 + 16) = v8[6];
        *(_OWORD *)a3 = v9;
      }
    }
    else
    {
      sub_20BDDC0E4((_QWORD *)a3, "");
    }
    v10 = v11;
    if (v11)
    {
      __dmb(0xBu);
      *v10 = 0;
    }
  }
}

void sub_20BEC1268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _BYTE *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  char *v6;
  unint64_t Instance;
  uint64_t *v8;
  __int128 v9;
  _BYTE *v10;
  _BYTE *v11;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  if (!strcmp((const char *)(*(_QWORD *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d", v5, v6, a2);
  }
  else
  {
    Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
    if (!Instance)
      Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
    sub_20BEB3FEC((uint64_t)&v11, Instance);
    v8 = sub_20BEC31D8((_QWORD *)(Instance + 88), (int *)v12);
    if (v8)
    {
      if (*((char *)v8 + 55) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, (void *)v8[4], v8[5]);
      }
      else
      {
        v9 = *((_OWORD *)v8 + 2);
        *(_QWORD *)(a3 + 16) = v8[6];
        *(_OWORD *)a3 = v9;
      }
    }
    else
    {
      sub_20BDDC0E4((_QWORD *)a3, "");
    }
    v10 = v11;
    if (v11)
    {
      __dmb(0xBu);
      *v10 = 0;
    }
  }
}

void sub_20BEC1370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, _BYTE *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfEnum::GetAllNames(pxrInternal__aapl__pxrReserved__::TfEnum *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t Instance;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  _BYTE *v8;
  void *__p[2];
  char v10;
  _BYTE *v11;

  if (!strcmp((const char *)(*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL)))
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    return;
  }
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  sub_20BEB3FEC((uint64_t)&v11, Instance);
  sub_20BDDC0E4(__p, (char *)(*((_QWORD *)this + 1) & 0x7FFFFFFFFFFFFFFFLL));
  v6 = sub_20BEC301C((_QWORD *)(Instance + 168), (unsigned __int8 *)__p);
  v7 = v6;
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7)
      goto LABEL_6;
  }
  else if (v6)
  {
LABEL_6:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    sub_20BE78B98((char *)a2, *((__int128 **)v7 + 5), *((__int128 **)v7 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v7 + 6) - *((_QWORD *)v7 + 5)) >> 3));
    goto LABEL_10;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
LABEL_10:
  v8 = v11;
  if (v11)
  {
    __dmb(0xBu);
    *v8 = 0;
  }
}

void sub_20BEC148C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, _BYTE *a16)
{
  if (a16)
  {
    __dmb(0xBu);
    *a16 = 0;
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::TfEnum::GetTypeFromName(unsigned __int8 *a1)
{
  unint64_t Instance;
  unsigned __int8 *result;
  _BYTE *v4;
  _BYTE *v5;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  sub_20BEB3FEC((uint64_t)&v5, Instance);
  result = sub_20BEC301C((_QWORD *)(Instance + 208), a1);
  if (result)
    result = (unsigned __int8 *)*((_QWORD *)result + 5);
  v4 = v5;
  if (v5)
  {
    __dmb(0xBu);
    *v4 = 0;
  }
  return result;
}

void sub_20BEC1538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfEnum::GetValueFromName(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  std::string *v6;
  __int128 v7;
  int v8;
  const std::string::value_type *v9;
  std::string::size_type v10;
  std::string *v11;
  __int128 v12;
  uint64_t ValueFromFullName;
  int v14;
  std::string v16;
  std::string v17;
  void *__p[2];
  std::string::size_type v19;
  unsigned __int8 v20;

  v20 = 0;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v16);
  v6 = std::string::append(&v16, "::");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = *(char *)(a2 + 23);
  if (v8 >= 0)
    v9 = (const std::string::value_type *)a2;
  else
    v9 = *(const std::string::value_type **)a2;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a2 + 23);
  else
    v10 = *(_QWORD *)(a2 + 8);
  v11 = std::string::append(&v17, v9, v10);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v19 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  ValueFromFullName = pxrInternal__aapl__pxrReserved__::TfEnum::GetValueFromFullName((char *)__p, &v20);
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  v14 = v20;
  if (v20)
    v14 = strcmp((const char *)(*(_QWORD *)(ValueFromFullName + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a1 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  if (a3)
    *a3 = v14;
  if (v14)
    return ValueFromFullName;
  else
    return MEMORY[0x24BEDB798];
}

void sub_20BEC167C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfEnum::GetValueFromFullName(char *a1, _BYTE *a2)
{
  unint64_t Instance;
  unsigned __int8 *v5;
  uint64_t result;
  uint64_t v7;
  int v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v15;
  _BYTE *v16;
  _BYTE *v17;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  sub_20BEB3FEC((uint64_t)&v17, Instance);
  v5 = sub_20BEC301C((_QWORD *)(Instance + 128), (unsigned __int8 *)a1);
  if (v5)
  {
    if (a2)
      *a2 = 1;
    result = *((_QWORD *)v5 + 5);
  }
  else
  {
    v7 = a1[23];
    v8 = (char)v7;
    v9 = *(char **)a1;
    if ((v7 & 0x80u) != 0)
      v7 = *((_QWORD *)a1 + 1);
    if (v8 >= 0)
      v10 = a1;
    else
      v10 = *(char **)a1;
    if (v7 >= 5)
    {
      v11 = &v10[v7];
      v12 = v10;
      do
      {
        v13 = (char *)memchr(v12, 105, v7 - 4);
        if (!v13)
          break;
        if (*(_DWORD *)v13 == 980708969 && v13[4] == 58)
        {
          if (v13 == v11 || v13 != v10)
            break;
          if (a2)
          {
            *a2 = 1;
            LOBYTE(v8) = a1[23];
            v9 = *(char **)a1;
          }
          if ((v8 & 0x80u) == 0)
            v15 = a1;
          else
            v15 = v9;
          atoi(v15 + 5);
          result = MEMORY[0x24BEDB798];
          goto LABEL_32;
        }
        v12 = v13 + 1;
        v7 = v11 - v12;
      }
      while (v11 - v12 >= 5);
    }
    if (a2)
      *a2 = 0;
    result = MEMORY[0x24BEDB798];
  }
LABEL_32:
  v16 = v17;
  if (v17)
  {
    __dmb(0xBu);
    *v16 = 0;
  }
  return result;
}

void sub_20BEC1834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfEnum::_FatalGetValueError(pxrInternal__aapl__pxrReserved__::TfEnum *this, const std::type_info *a2)
{
  char *v3;
  _QWORD *v4;
  _QWORD v5[2];
  char v6;
  _QWORD v7[4];
  char v8;
  int v9;

  v7[0] = "tf/enum.cpp";
  v7[1] = "_FatalGetValueError";
  v7[2] = 251;
  v7[3] = "void pxrInternal__aapl__pxrReserved__::TfEnum::_FatalGetValueError(const std::type_info &) const";
  v8 = 0;
  v9 = 4;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(a2->__type_name & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v5);
  if (v6 >= 0)
    v4 = v5;
  else
    v4 = (_QWORD *)v5[0];
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Attempted to get a '%s' from a TfEnum holding a '%s'.", v3, v4, *(_QWORD *)(*(_QWORD *)this + 8) & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_20BEC18D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  void *v27;
  char v28;

  if (v28 < 0)
    operator delete(v27);
}

void sub_20BEC18F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfEnum::IsKnownEnumType(unsigned __int8 *a1)
{
  unint64_t Instance;
  unsigned __int8 *v3;
  _BYTE *v4;
  _BYTE *v6;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  sub_20BEB3FEC((uint64_t)&v6, Instance);
  v3 = sub_20BEC301C((_QWORD *)(Instance + 208), a1);
  v4 = v6;
  if (v6)
  {
    __dmb(0xBu);
    *v4 = 0;
  }
  return v3 != 0;
}

void sub_20BEC1980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, uint64_t *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetFullName(*a2, a2[1], (uint64_t)__p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_20BDDC1C8(a1, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  char v9;

  LOBYTE(v8) = 40;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v8, 1);
  v8 = *a2;
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3);
  v5 = sub_20BDDC1C8(v4, (uint64_t)", ", 2);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5);
  v9 = 41;
  return sub_20BDDC1C8(v6, (uint64_t)&v9, 1);
}

{
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;

  LOBYTE(v12) = 91;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v12, 1);
  v4 = *((_DWORD *)a2 + 2);
  v12 = *a2;
  v13 = v4;
  v5 = pxrInternal__aapl__pxrReserved__::operator<<(v3, (float *)&v12);
  v6 = sub_20BDDC1C8(v5, (uint64_t)"...", 3);
  v7 = *((_DWORD *)a2 + 5);
  v10 = *(uint64_t *)((char *)a2 + 12);
  v11 = v7;
  v8 = pxrInternal__aapl__pxrReserved__::operator<<(v6, (float *)&v10);
  v14 = 93;
  return sub_20BDDC1C8(v8, (uint64_t)&v14, 1);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  char v9;

  LOBYTE(v8) = 91;
  v3 = sub_20BDDC1C8(a1, (uint64_t)&v8, 1);
  v8 = *a2;
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v3);
  v5 = sub_20BDDC1C8(v4, (uint64_t)":", 1);
  v6 = pxrInternal__aapl__pxrReserved__::operator<<(v5);
  v9 = 93;
  return sub_20BDDC1C8(v6, (uint64_t)&v9, 1);
}

{
  uint64_t (*v4)(uint64_t *);
  char v5;
  uint64_t *v6;

  v4 = sub_20C20BDB4(a2);
  if (!(v5 & 1 | (unint64_t)v4))
    return sub_20BDDC1C8(a1, (uint64_t)"@<expired>@", 11);
  v6 = (uint64_t *)(sub_20C1FF3C0(a2) + 24);
  return pxrInternal__aapl__pxrReserved__::operator<<(a1, v6);
}

{
  uint64_t *v3;

  if (!*a2)
    return sub_20BDDC1C8(a1, (uint64_t)"@NULL@", 6);
  v3 = (uint64_t *)(sub_20C1FE500(a2) + 24);
  return pxrInternal__aapl__pxrReserved__::operator<<(a1, v3);
}

{
  std::ios_base *v3;
  int v4;

  sub_20C24A544(a1, a2);
  v3 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  v4 = sub_20C24A408();
  *std::ios_base::iword(v3, v4) = 0;
  return a1;
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = pxrInternal__aapl__pxrReserved__::operator<<(a1, a2);
  v4 = sub_20BDDC1C8(v3, (uint64_t)"<", 1);
  v5 = pxrInternal__aapl__pxrReserved__::operator<<(v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 10));
  return sub_20BDDC1C8(v5, (uint64_t)">", 1);
}

{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = pxrInternal__aapl__pxrReserved__::operator<<(a1, a2);
  v4 = sub_20BDDC1C8(v3, (uint64_t)"<", 1);
  v5 = pxrInternal__aapl__pxrReserved__::operator<<(v4, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 1));
  return sub_20BDDC1C8(v5, (uint64_t)">", 1);
}

{
  void *v4;
  uint64_t *String;
  const char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  const char *v11;
  double v12;
  const char *p_p;
  void **v14;
  uint64_t v15;
  void *__p;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23[2];
  unsigned __int8 v24;

  v4 = &v21;
  sub_20C018EB4(*a2 + 40);
  if (v22 < 0)
    v4 = v21;
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString((pxrInternal__aapl__pxrReserved__::SdfPath *)(*a2 + 88));
  if (*((char *)String + 23) >= 0)
    v8 = (uint64_t)String;
  else
    v8 = *String;
  v9 = *a2;
  v10 = *(double *)(*a2 + 104);
  if (v10 == -1.79769313e308)
  {
    v11 = "-inf";
  }
  else
  {
    v11 = (const char *)&v19;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%.3f", v6, v7, *(_QWORD *)(*a2 + 104));
    if (v20 < 0)
      v11 = (const char *)v19;
    v9 = *a2;
  }
  v12 = *(double *)(v9 + 112);
  if (v12 == 1.79769313e308)
  {
    p_p = "inf";
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%.3f", v6, v7, *(_QWORD *)&v12);
    if (v18 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s<%s> (start: %s end: %s)", v6, v7, v4, v8, v11, p_p);
  if ((v24 & 0x80u) == 0)
    v14 = v23;
  else
    v14 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v15 = v24;
  else
    v15 = (uint64_t)v23[1];
  sub_20BDDC1C8(a1, (uint64_t)v14, v15);
  if ((char)v24 < 0)
    operator delete(v23[0]);
  if (v12 != 1.79769313e308 && v18 < 0)
    operator delete(__p);
  if (v10 != -1.79769313e308 && v20 < 0)
    operator delete(v19);
  if (v22 < 0)
    operator delete(v21);
  return a1;
}

{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t *EmptyString;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  pxrInternal__aapl__pxrReserved__::TfToken *v11;
  pxrInternal__aapl__pxrReserved__::TfToken *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v27;

  v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDDC1C8(a1, (uint64_t)"(", 1);
  v5 = v4;
  if ((a2[1] & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((a2[1] & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  v7 = *((char *)EmptyString + 23);
  if (v7 >= 0)
    v8 = (uint64_t)EmptyString;
  else
    v8 = *EmptyString;
  if (v7 >= 0)
    v9 = *((unsigned __int8 *)EmptyString + 23);
  else
    v9 = EmptyString[1];
  v10 = sub_20BDDC1C8(v5, v8, v9);
  v11 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDDC1C8(v10, (uint64_t)", ", 2);
  v12 = v11;
  v13 = *a2;
  if ((*a2 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      v13 &= 0xFFFFFFFFFFFFFFF8;
  }
  v16 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
  if ((v13 & 0xFFFFFFFFFFFFFFF8) != 0)
    v17 = (uint64_t *)(v16 + 4);
  else
    v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
  v18 = *((char *)v17 + 23);
  if (v18 >= 0)
    v19 = (uint64_t)v17;
  else
    v19 = *v17;
  if (v18 >= 0)
    v20 = *((unsigned __int8 *)v17 + 23);
  else
    v20 = v17[1];
  v21 = sub_20BDDC1C8(v12, v19, v20);
  v22 = sub_20BDDC1C8(v21, (uint64_t)", (", 3);
  v27 = a2[6];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v22, a2 + 2, (uint64_t)&v27, (void (*)(uint64_t, _QWORD *))sub_20BF65494);
  v23 = sub_20BDDC1C8(v22, (uint64_t)"), (", 4);
  v27 = a2[11];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v23, a2 + 7, (uint64_t)&v27, (void (*)(uint64_t, _QWORD *))sub_20BF65494);
  v24 = sub_20BDDC1C8(v23, (uint64_t)"), (", 4);
  v27 = a2[16];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v24, a2 + 12, (uint64_t)&v27, (void (*)(uint64_t, _QWORD *))sub_20BF65494);
  sub_20BDDC1C8(v24, (uint64_t)"))", 2);
  if ((v13 & 7) != 0)
  {
    do
      v25 = __ldxr(v16);
    while (__stlxr(v25 - 2, v16));
  }
  return a1;
}

{
  pxrInternal__aapl__pxrReserved__::TfToken *v4;
  pxrInternal__aapl__pxrReserved__::TfToken *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  uint64_t *EmptyString;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  pxrInternal__aapl__pxrReserved__::TfToken *v26;
  pxrInternal__aapl__pxrReserved__::TfToken *v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int *v31;
  uint64_t *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v45;

  v4 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDDC1C8(a1, (uint64_t)"(", 1);
  v5 = v4;
  v6 = a2[2];
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    if ((v8 & 1) == 0)
      v6 &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
  if ((v6 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)(v9 + 4);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v4);
  v11 = *((char *)EmptyString + 23);
  if (v11 >= 0)
    v12 = (uint64_t)EmptyString;
  else
    v12 = *EmptyString;
  if (v11 >= 0)
    v13 = *((unsigned __int8 *)EmptyString + 23);
  else
    v13 = EmptyString[1];
  v14 = sub_20BDDC1C8(v5, v12, v13);
  v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDDC1C8(v14, (uint64_t)", ", 2);
  v16 = v15;
  v17 = a2[1];
  if ((v17 & 7) != 0)
  {
    v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 2, v18));
    if ((v19 & 1) == 0)
      v17 &= 0xFFFFFFFFFFFFFFF8;
  }
  v20 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
  if ((v17 & 0xFFFFFFFFFFFFFFF8) != 0)
    v21 = (uint64_t *)(v20 + 4);
  else
    v21 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
  v22 = *((char *)v21 + 23);
  if (v22 >= 0)
    v23 = (uint64_t)v21;
  else
    v23 = *v21;
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)v21 + 23);
  else
    v24 = v21[1];
  v25 = sub_20BDDC1C8(v16, v23, v24);
  v26 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BDDC1C8(v25, (uint64_t)", ", 2);
  v27 = v26;
  v28 = a2[3];
  if ((v28 & 7) != 0)
  {
    v29 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 2, v29));
    if ((v30 & 1) == 0)
      v28 &= 0xFFFFFFFFFFFFFFF8;
  }
  v31 = (unsigned int *)(v28 & 0xFFFFFFFFFFFFFFF8);
  if ((v28 & 0xFFFFFFFFFFFFFFF8) != 0)
    v32 = (uint64_t *)(v31 + 4);
  else
    v32 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
  v33 = *((char *)v32 + 23);
  if (v33 >= 0)
    v34 = (uint64_t)v32;
  else
    v34 = *v32;
  if (v33 >= 0)
    v35 = *((unsigned __int8 *)v32 + 23);
  else
    v35 = v32[1];
  v36 = sub_20BDDC1C8(v27, v34, v35);
  v37 = sub_20BDDC1C8(v36, (uint64_t)", (", 3);
  v45 = a2[8];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v37, a2 + 4, (uint64_t)&v45, (void (*)(uint64_t, _QWORD *))sub_20BF65494);
  v38 = sub_20BDDC1C8(v37, (uint64_t)"), (", 4);
  v45 = a2[13];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v38, a2 + 9, (uint64_t)&v45, (void (*)(uint64_t, _QWORD *))sub_20BF65494);
  v39 = sub_20BDDC1C8(v38, (uint64_t)"), (", 4);
  v45 = a2[18];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v39, a2 + 14, (uint64_t)&v45, (void (*)(uint64_t, _QWORD *))sub_20BF65494);
  v40 = sub_20BDDC1C8(v39, (uint64_t)"), (", 4);
  v45 = a2[23];
  pxrInternal__aapl__pxrReserved__::VtStreamOutArray(v40, a2 + 19, (uint64_t)&v45, (void (*)(uint64_t, _QWORD *))sub_20BF65494);
  sub_20BDDC1C8(v40, (uint64_t)"))", 2);
  if ((v28 & 7) != 0)
  {
    do
      v41 = __ldxr(v31);
    while (__stlxr(v41 - 2, v31));
  }
  if ((v17 & 7) != 0)
  {
    do
      v42 = __ldxr(v20);
    while (__stlxr(v42 - 2, v20));
  }
  if ((v6 & 7) != 0)
  {
    do
      v43 = __ldxr(v9);
    while (__stlxr(v43 - 2, v9));
  }
  return a1;
}

void sub_20BEC1A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::TfRegistryManager *sub_20BEC1A1C(pxrInternal__aapl__pxrReserved__::TfRegistryManager *a1)
{
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *Instance;

  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(a1);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_UnsubscribeFrom(Instance, (const std::type_info *)&unk_24C51B650);
  sub_20BEB3F28((uint64_t)a1 + 208);
  sub_20BEC1A80((uint64_t)a1 + 168);
  sub_20BEB3F28((uint64_t)a1 + 128);
  sub_20BEC1B38((uint64_t)a1 + 88);
  sub_20BEC1B38((uint64_t)a1 + 48);
  sub_20BEC1B38((uint64_t)a1 + 8);
  return a1;
}

uint64_t sub_20BEC1A80(uint64_t a1)
{
  void *v2;

  sub_20BEC1AB8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BEC1AB8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BEC1AF4((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20BEC1AF4(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  sub_20BDE5038(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20BEC1B38(uint64_t a1)
{
  void *v2;

  sub_20BEC1B70(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BEC1B70(int a1, void **__p)
{
  void **v2;
  void **v3;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (void **)*v2;
      if (*((char *)v2 + 55) < 0)
        operator delete(v2[4]);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

unint64_t sub_20BEC1BB4(unint64_t a1)
{
  unint64_t v2;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *Instance;
  _QWORD v5[4];
  char v6;
  int v7;

  *(_BYTE *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1065353216;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 1065353216;
  do
    v2 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance);
  while (__stlxr(a1, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>::_instance));
  if (v2)
  {
    v5[0] = "tf/instantiateSingleton.h";
    v5[1] = "SetInstanceConstructed";
    v5[2] = 56;
    v5[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnumRegistry]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed");
  }
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance((pxrInternal__aapl__pxrReserved__::TfRegistryManager *)a1);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, (const std::type_info *)&unk_24C51B650);
  return a1;
}

void sub_20BEC1CC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_20BEB3F28(v6);
  sub_20BEC1A80(v5);
  sub_20BEB3F28(v4);
  sub_20BEC1B38(v3);
  sub_20BEC1B38(v2);
  sub_20BEC1B38(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BEC1D04()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C51B650, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, (std::type_info *)&unk_24C51B650, (char *)0x10, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20BEC1DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20BEC1E04(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unsigned __int8 *v6;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unsigned __int8 **v23;
  unint64_t v24;
  unsigned __int8 *v26;
  char v27;

  v6 = a2;
  v26 = 0;
  v27 = 0;
  v8 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v26);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v6) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20BEC20C8(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26)
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  i = v26;
  v26 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20BEC2168((uint64_t)&v26, 0);
  return i;
}

void sub_20BEC20B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEC2168((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_BYTE *sub_20BEC20C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BEC2150(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEC2168(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20BEC2168(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BEC1AF4((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_20BEC21AC(uint64_t a1, int *a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v26 = 0;
  LOBYTE(v27) = 0;
  sub_20BEC2434((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, a2);
  v8 = bswap64(0x9E3779B97F4A7C55 * v26);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v8)
          {
            if (sub_20BEC24AC((_DWORD *)v13 + 4, a2))
              return v13;
          }
          else
          {
            if (v11 > 1)
            {
              if (v14 >= v9)
                v14 %= v9;
            }
            else
            {
              v14 &= v9 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v15 = (_QWORD *)(a1 + 16);
  v13 = operator new(0x38uLL);
  v27 = a1 + 16;
  *v13 = 0;
  v13[1] = v8;
  *((_OWORD *)v13 + 1) = **a4;
  v13[5] = 0;
  v13[6] = 0;
  v13[4] = 0;
  v28 = 1;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    v18 = 1;
    if (v9 >= 3)
      v18 = (v9 & (v9 - 1)) != 0;
    v19 = v18 | (2 * v9);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *v13 = *v23;
LABEL_38:
    *v23 = v13;
    goto LABEL_39;
  }
  *v13 = *v15;
  *v15 = v13;
  *(_QWORD *)(v22 + 8 * v4) = v15;
  if (*v13)
  {
    v24 = *(_QWORD *)(*v13 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v24 >= v9)
        v24 %= v9;
    }
    else
    {
      v24 &= v9 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20BEC2418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_20BDEEB58(v11, v10);
  _Unwind_Resume(a1);
}

unint64_t sub_20BEC2434(pxrInternal__aapl__pxrReserved__::Tf_HashState *a1, int *a2)
{
  char *v4;
  char *v5;
  unint64_t result;
  uint64_t v7;

  v4 = (char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL);
  v5 = (char *)strlen(v4);
  result = pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(a1, (pxrInternal__aapl__pxrReserved__ *)v4, v5);
  v7 = a2[2];
  if (*((_BYTE *)a1 + 8))
    v7 += (unint64_t)(*(_QWORD *)a1 + v7 + (*(_QWORD *)a1 + v7) * (*(_QWORD *)a1 + v7)) >> 1;
  else
    *((_BYTE *)a1 + 8) = 1;
  *(_QWORD *)a1 = v7;
  return result;
}

BOOL sub_20BEC24AC(_DWORD *a1, _DWORD *a2)
{
  return a2[2] == a1[2]
      && strcmp((const char *)(*(_QWORD *)(*(_QWORD *)a2 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)a1 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

unsigned __int8 *sub_20BEC24F8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unsigned __int8 *v6;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unsigned __int8 **v23;
  unint64_t v24;
  unsigned __int8 *v26;
  char v27;

  v6 = a2;
  v26 = 0;
  v27 = 0;
  v8 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v26);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v6) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20BEC27B8(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26)
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  i = v26;
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20BEC2794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    sub_20BEB52E4((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20BEC27B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = v8 + 16;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  *((_QWORD *)v8 + 5) = MEMORY[0x24BEDB798];
  *((_DWORD *)v8 + 12) = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BEC2850(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BEB52E4(v3, v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20BEC286C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unsigned __int8 *v6;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unsigned __int8 **v23;
  unint64_t v24;
  unsigned __int8 *v26;
  char v27;

  v6 = a2;
  v26 = 0;
  v27 = 0;
  v8 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v26);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v6) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20BEC2B2C(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26)
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  i = v26;
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20BEC2B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    sub_20BEB52E4((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20BEC2B2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = v8 + 2;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  v8[5] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BEC2BB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BEB52E4(v3, v2);
  _Unwind_Resume(a1);
}

__n128 sub_20BEC2BDC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C51B670;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20BEC2C1C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C51B670;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20BEC2C44(uint64_t a1)
{
  sub_20BEC2C9C(*(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_20BEC2C54(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51B6E0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BEC2C90()
{
  return &unk_24C51B6E0;
}

void sub_20BEC2C9C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  _QWORD *v6;
  char *v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t i;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _BYTE *v20;
  void *__dst[2];
  uint64_t v22;
  void *__p;
  _BYTE *v24;
  uint64_t v25;
  _BYTE *v26;
  _QWORD v27[2];
  _OWORD *v28;

  v27[0] = a2;
  v27[1] = a3;
  sub_20BEB3FEC((uint64_t)&v26, (uint64_t)a1);
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&__p);
  sub_20BEC2FE8(a1 + 26, (unsigned __int8 *)&__p);
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  sub_20BDDC0E4(&__p, (char *)(*(_QWORD *)(v27[0] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  __dst[0] = &__p;
  v5 = sub_20BEC1E04((uint64_t)(a1 + 21), (unsigned __int8 *)&__p, (uint64_t)&unk_20CAC184C, (__int128 **)__dst);
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  __p = 0;
  v24 = 0;
  v25 = 0;
  sub_20BE78B98((char *)&__p, *((__int128 **)v5 + 5), *((__int128 **)v5 + 6), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v5 + 6) - *((_QWORD *)v5 + 5)) >> 3));
  v28 = v27;
  v6 = sub_20BEC21AC((uint64_t)(a1 + 1), (int *)v27, (uint64_t)&unk_20CAC184C, &v28);
  if (*((char *)v6 + 55) < 0)
  {
    sub_20BDDBFAC(__dst, (void *)v6[4], v6[5]);
  }
  else
  {
    *(_OWORD *)__dst = *((_OWORD *)v6 + 2);
    v22 = v6[6];
  }
  sub_20BDE5078((uint64_t *)v5 + 5);
  v7 = (char *)__p;
  v8 = v24;
  if (v24 != __p)
  {
    v9 = 0;
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((v8 - v7) >> 3); ++i)
    {
      v11 = &v7[24 * i];
      v12 = v11[23];
      if ((v12 & 0x80u) == 0)
        v13 = v11[23];
      else
        v13 = *((_QWORD *)v11 + 1);
      v14 = (void *)HIBYTE(v22);
      if (v22 < 0)
        v14 = __dst[1];
      if ((void *)v13 != v14)
        goto LABEL_26;
      if (v22 >= 0)
        v15 = __dst;
      else
        v15 = (void **)__dst[0];
      if ((v12 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v11, v15, *((_QWORD *)v11 + 1)))
          goto LABEL_26;
      }
      else if (v11[23])
      {
        v16 = v9;
        while (v7[v16] == *(_BYTE *)v15)
        {
          v15 = (void **)((char *)v15 + 1);
          ++v16;
          if (!--v12)
            goto LABEL_30;
        }
LABEL_26:
        v17 = *((_QWORD *)v5 + 6);
        if (v17 >= *((_QWORD *)v5 + 7))
        {
          v18 = sub_20BE4EE50((uint64_t *)v5 + 5, (__int128 *)v11);
        }
        else
        {
          sub_20BE4EDF4((_QWORD *)v5 + 5, (__int128 *)v11);
          v18 = v17 + 24;
        }
        *((_QWORD *)v5 + 6) = v18;
        v7 = (char *)__p;
        v8 = v24;
      }
LABEL_30:
      v9 += 24;
    }
  }
  v28 = v27;
  v19 = (unsigned __int8 *)sub_20BEC21AC((uint64_t)(a1 + 6), (int *)v27, (uint64_t)&unk_20CAC184C, &v28);
  sub_20BEC2FE8(a1 + 16, v19 + 32);
  sub_20BEC31A4(a1 + 6, (int *)v27);
  sub_20BEC31A4(a1 + 1, (int *)v27);
  sub_20BEC31A4(a1 + 11, (int *)v27);
  if (SHIBYTE(v22) < 0)
    operator delete(__dst[0]);
  __dst[0] = &__p;
  sub_20BDE5038((void ***)__dst);
  v20 = v26;
  if (v26)
  {
    __dmb(0xBu);
    *v20 = 0;
  }
}

void sub_20BEC2F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,_BYTE *a23)
{
  if (a23)
  {
    __dmb(0xBu);
    *a23 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20BEC2FE8(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t *result;

  result = (uint64_t *)sub_20BEC301C(a1, a2);
  if (result)
  {
    sub_20BEC315C(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

unsigned __int8 *sub_20BEC301C(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  char *v4;
  char *v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;

  v2 = a2;
  v16 = 0;
  v17 = 0;
  v4 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v5 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v5 = v4;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v16, (pxrInternal__aapl__pxrReserved__ *)a2, v5);
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = bswap64(0x9E3779B97F4A7C55 * v16);
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v7;
    if (v7 >= *(_QWORD *)&v6)
      v10 = v7 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v7;
  }
  v11 = *(unsigned __int8 ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (*v11)
  {
    v13 = (uint64_t)(a1 + 4);
    do
    {
      v14 = *((_QWORD *)v12 + 1);
      if (v14 == v7)
      {
        if ((sub_20BEB4EF8(v13, v12 + 16, v2) & 1) != 0)
          return v12;
      }
      else
      {
        if (v9 > 1)
        {
          if (v14 >= *(_QWORD *)&v6)
            v14 %= *(_QWORD *)&v6;
        }
        else
        {
          v14 &= *(_QWORD *)&v6 - 1;
        }
        if (v14 != v10)
          return 0;
      }
      v12 = *(unsigned __int8 **)v12;
    }
    while (v12);
  }
  return v12;
}

uint64_t sub_20BEC315C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  sub_20BEB587C(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    sub_20BEB52E4((uint64_t)&v6, v3);
  return v2;
}

uint64_t *sub_20BEC31A4(_QWORD *a1, int *a2)
{
  uint64_t *result;

  result = sub_20BEC31D8(a1, a2);
  if (result)
  {
    sub_20BEC32F8(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t *sub_20BEC31D8(_QWORD *a1, int *a2)
{
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  uint64_t v13;
  char v14;

  v13 = 0;
  v14 = 0;
  sub_20BEC2434((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v13, a2);
  v4 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v4)
    return 0;
  v5 = bswap64(0x9E3779B97F4A7C55 * v13);
  v6 = (uint8x8_t)vcnt_s8(v4);
  v6.i16[0] = vaddlv_u8(v6);
  v7 = v6.u32[0];
  if (v6.u32[0] > 1uLL)
  {
    v8 = v5;
    if (v5 >= *(_QWORD *)&v4)
      v8 = v5 % *(_QWORD *)&v4;
  }
  else
  {
    v8 = (*(_QWORD *)&v4 - 1) & v5;
  }
  v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9)
    return 0;
  for (i = *v9; i; i = (uint64_t *)*i)
  {
    v11 = i[1];
    if (v11 == v5)
    {
      if (sub_20BEC24AC((_DWORD *)i + 4, a2))
        return i;
    }
    else
    {
      if (v7 > 1)
      {
        if (v11 >= *(_QWORD *)&v4)
          v11 %= *(_QWORD *)&v4;
      }
      else
      {
        v11 &= *(_QWORD *)&v4 - 1;
      }
      if (v11 != v8)
        return 0;
    }
  }
  return i;
}

uint64_t sub_20BEC32F8(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  sub_20BEB587C(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    sub_20BDEEB58((uint64_t)&v6, v3);
  return v2;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  void *v6;
  char *v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA59877 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v6 = operator new(0x70uLL);
      sub_20BEC450C((unint64_t)v6);
      v8 = atomic_load(a1);
      if (v8)
      {
        if (v6 != (void *)v8)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingR"
                "egistry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v7);
        }
      }
      else
      {
        do
          v10 = __ldaxr(a1);
        while (__stlxr((unint64_t)v6, a1));
        if (v10)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingR"
                "egistry>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v7, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry*> &)::isInitializing);
  }
  v11 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_21Tf_EnvSettingRegistryEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BEC3530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::SetInstanceConstructed(unint64_t result)
{
  unint64_t v1;
  char *v2;
  char *v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance));
  if (v1)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", 47);
    v4[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", (uint64_t)v2, 0x2Fu);
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingReg"
            "istry>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::DeleteInstance()
{
  std::mutex *i;
  unint64_t v1;
  void *v2;

  for (i = (std::mutex *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
        i;
        i = (std::mutex *)v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
    if ((std::mutex *)v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance))
      {
        sub_20BEC43B0((uint64_t)&i[1]);
        std::mutex::~mutex(i);
        operator delete(v2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

void pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>(uint64_t a1)
{
  int v2;
  const char *v3;
  char *v4;
  const char *v5;
  void **v6;
  std::mutex *Instance;
  uint64_t v8;
  char *v9;
  int v10;
  void **v11;
  char *v12;
  const char *v13;
  char *v14;
  void **v15;
  void **v16;
  size_t v17;
  void **v18;
  void **v19;
  void *v20[2];
  char v21;
  void *__b[2];
  char v23;
  void *__p[2];
  unsigned __int8 v25;
  unsigned __int8 v26;
  void *v27[2];
  char v28;

  sub_20BDDC0E4(v27, *(char **)(a1 + 16));
  v26 = *(_BYTE *)(a1 + 8);
  v2 = v28;
  v3 = (const char *)v27[0];
  if (v26)
    v4 = "true";
  else
    v4 = "false";
  sub_20BDDC0E4(__p, v4);
  if (v2 >= 0)
    v5 = (const char *)v27;
  else
    v5 = v3;
  if ((v25 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  setenv(v5, (const char *)v6, 1);
  if ((char)v25 < 0)
    operator delete(__p[0]);
  Instance = (std::mutex *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  if (!Instance)
    Instance = (std::mutex *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  if (sub_20BEC3948(Instance, (uint64_t)v27, &v26, *(unint64_t **)a1) && *(unsigned __int8 *)(a1 + 8) != v26)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v26)
      v9 = "true";
    else
      v9 = "false";
    sub_20BDDC0E4(__b, v9);
    v10 = v23;
    v11 = (void **)__b[0];
    if (*(_BYTE *)(a1 + 8))
      v12 = "true";
    else
      v12 = "false";
    sub_20BDDC0E4(v20, v12);
    v15 = __b;
    if (v10 < 0)
      v15 = v11;
    if (v21 >= 0)
      v16 = v20;
    else
      v16 = (void **)v20[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"#  %s is overridden to '%s'.  Default is '%s'.  #", v13, v14, v8, v15, v16);
    if (v21 < 0)
      operator delete(v20[0]);
    if (v23 < 0)
      operator delete(__b[0]);
    if ((v25 & 0x80u) == 0)
      v17 = v25;
    else
      v17 = (size_t)__p[1];
    sub_20BDDC468(__b, v17, 35);
    if (v23 >= 0)
      v18 = __b;
    else
      v18 = (void **)__b[0];
    v19 = __p;
    if ((v25 & 0x80u) != 0)
      v19 = (void **)__p[0];
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n%s\n%s\n", (const char *)v18, (const char *)v19, (const char *)v18);
    if (v23 < 0)
      operator delete(__b[0]);
    if ((char)v25 < 0)
      operator delete(__p[0]);
  }
  if (v28 < 0)
    operator delete(v27[0]);
}

{
  __ZN32pxrInternal__aapl__pxrReserved__23Tf_InitializeEnvSettingIbEEvPNS_12TfEnvSettingIT_EE(a1);
}

void sub_20BEC38DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 65) < 0)
    operator delete(*(void **)(v29 - 88));
  _Unwind_Resume(exception_object);
}

BOOL sub_20BEC3948(std::mutex *a1, uint64_t a2, _BYTE *a3, unint64_t *a4)
{
  unsigned __int8 *v10;
  char v11;
  char v12;
  unint64_t v13;
  const char *v14;
  void *__p[2];
  uint64_t v16;
  const char *v17;
  char v18;
  int v19;
  int v20;

  std::mutex::lock(a1);
  if (atomic_load(a4))
  {
    std::mutex::unlock(a1);
    return 0;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
  }
  LOBYTE(v17) = *a3;
  v20 = 1;
  v10 = sub_20BEC4A8C((uint64_t)&a1[1], (unsigned __int8 *)__p, (__int128 *)__p);
  v12 = v11;
  sub_20BEC4498((uint64_t)&v17);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  v13 = (unint64_t)(v10 + 40);
  if (*((_DWORD *)v10 + 16) != 1)
    v13 = 0;
  atomic_store(v13, a4);
  std::mutex::unlock(a1);
  if (!v12)
  {
    __p[0] = "tf/envSetting.cpp";
    __p[1] = "Define";
    v16 = 148;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry::Define(const string &, const U &, std::atomic<U "
          "*> *) [U = BOOL]";
    v18 = 0;
    v19 = 1;
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const char *)a2;
    else
      v14 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Multiple definitions of TfEnvSetting variable detected.  This is usually due to software misconfiguration.  Contact the build team for assistance.  (duplicate '%s')", v14);
    return 0;
  }
  return a1[1].__m_.__opaque[32] != 0;
}

void sub_20BEC3A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex *v11;

  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>(uint64_t a1)
{
  int v2;
  const char *v3;
  const char *v4;
  char *v5;
  const char *v6;
  void **v7;
  std::mutex *Instance;
  const char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  void **v13;
  const char *v14;
  char *v15;
  const char *v16;
  char *v17;
  void **v18;
  void *v19;
  size_t v20;
  void **v21;
  void **v22;
  void *v23;
  char v24;
  void *__b[2];
  char v26;
  void *__p[2];
  unsigned __int8 v28;
  unsigned int v29;
  void *v30[2];
  char v31;

  sub_20BDDC0E4(v30, *(char **)(a1 + 16));
  v29 = *(_DWORD *)(a1 + 8);
  v2 = v31;
  v3 = (const char *)v30[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d", v4, v5, v29);
  if (v2 >= 0)
    v6 = (const char *)v30;
  else
    v6 = v3;
  if ((v28 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  setenv(v6, (const char *)v7, 1);
  if ((char)v28 < 0)
    operator delete(__p[0]);
  Instance = (std::mutex *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  if (!Instance)
    Instance = (std::mutex *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  if (sub_20BEC3D2C(Instance, (uint64_t)v30, &v29, *(unint64_t **)a1) && *(_DWORD *)(a1 + 8) != v29)
  {
    v11 = *(_QWORD *)(a1 + 16);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d", v9, v10, v29);
    v12 = v26;
    v13 = (void **)__b[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d", v14, v15, *(unsigned int *)(a1 + 8));
    v18 = __b;
    if (v12 < 0)
      v18 = v13;
    if (v24 >= 0)
      v19 = &v23;
    else
      v19 = v23;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"#  %s is overridden to '%s'.  Default is '%s'.  #", v16, v17, v11, v18, v19);
    if (v24 < 0)
      operator delete(v23);
    if (v26 < 0)
      operator delete(__b[0]);
    if ((v28 & 0x80u) == 0)
      v20 = v28;
    else
      v20 = (size_t)__p[1];
    sub_20BDDC468(__b, v20, 35);
    if (v26 >= 0)
      v21 = __b;
    else
      v21 = (void **)__b[0];
    v22 = __p;
    if ((v28 & 0x80u) != 0)
      v22 = (void **)__p[0];
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n%s\n%s\n", (const char *)v21, (const char *)v22, (const char *)v21);
    if (v26 < 0)
      operator delete(__b[0]);
    if ((char)v28 < 0)
      operator delete(__p[0]);
  }
  if (v31 < 0)
    operator delete(v30[0]);
}

{
  __ZN32pxrInternal__aapl__pxrReserved__23Tf_InitializeEnvSettingIiEEvPNS_12TfEnvSettingIT_EE(a1);
}

void sub_20BEC3CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a29 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 49) < 0)
    operator delete(*(void **)(v29 - 72));
  _Unwind_Resume(exception_object);
}

BOOL sub_20BEC3D2C(std::mutex *a1, uint64_t a2, _DWORD *a3, unint64_t *a4)
{
  unsigned __int8 *v10;
  char v11;
  char v12;
  unint64_t v13;
  const char *v14;
  void *__p[2];
  uint64_t v16;
  const char *v17;
  char v18;
  int v19;
  int v20;

  std::mutex::lock(a1);
  if (atomic_load(a4))
  {
    std::mutex::unlock(a1);
    return 0;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v16 = *(_QWORD *)(a2 + 16);
  }
  LODWORD(v17) = *a3;
  v20 = 0;
  v10 = sub_20BEC4A8C((uint64_t)&a1[1], (unsigned __int8 *)__p, (__int128 *)__p);
  v12 = v11;
  sub_20BEC4498((uint64_t)&v17);
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0]);
  v13 = (unint64_t)(v10 + 40);
  if (*((_DWORD *)v10 + 16))
    v13 = 0;
  atomic_store(v13, a4);
  std::mutex::unlock(a1);
  if (!v12)
  {
    __p[0] = "tf/envSetting.cpp";
    __p[1] = "Define";
    v16 = 148;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry::Define(const string &, const U &, std::atomic<U *> *) [U = int]";
    v18 = 0;
    v19 = 1;
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const char *)a2;
    else
      v14 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Multiple definitions of TfEnvSetting variable detected.  This is usually due to software misconfiguration.  Contact the build team for assistance.  (duplicate '%s')", v14);
    return 0;
  }
  return a1[1].__m_.__opaque[32] != 0;
}

void sub_20BEC3E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  std::mutex *v11;

  std::mutex::unlock(v11);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>(uint64_t a1)
{
  const char *v2;
  void **v3;
  std::mutex *Instance;
  _BOOL4 v5;
  char v6;
  char *v7;
  size_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  int v12;
  void **v13;
  const char *v14;
  char *v15;
  void **v16;
  void **v17;
  size_t v18;
  void **v19;
  void **v20;
  void *v21[2];
  char v22;
  void *__b[2];
  uint64_t v24;
  void *__p[2];
  uint64_t v26;
  __int128 __s1;
  uint64_t v28;
  void *v29[2];
  char v30;

  v2 = (const char *)v29;
  sub_20BDDC0E4(v29, *(char **)(a1 + 16));
  sub_20BDDC0E4(&__s1, *(char **)(a1 + 8));
  if (v30 < 0)
    v2 = (const char *)v29[0];
  if (SHIBYTE(v28) < 0)
  {
    sub_20BDDBFAC(__p, (void *)__s1, *((unint64_t *)&__s1 + 1));
  }
  else
  {
    *(_OWORD *)__p = __s1;
    v26 = v28;
  }
  if (v26 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  setenv(v2, (const char *)v3, 1);
  if (SHIBYTE(v26) < 0)
    operator delete(__p[0]);
  Instance = (std::mutex *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  if (!Instance)
    Instance = (std::mutex *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  v5 = sub_20BEC41CC(Instance, (uint64_t)v29, &__s1, *(unint64_t **)a1);
  v6 = HIBYTE(v28);
  if (!v5)
  {
LABEL_47:
    if ((v6 & 0x80) == 0)
      goto LABEL_49;
    goto LABEL_48;
  }
  v7 = *(char **)(a1 + 8);
  v8 = strlen(v7);
  if ((SHIBYTE(v28) & 0x80000000) == 0)
  {
    if (v8 != HIBYTE(v28))
    {
LABEL_18:
      v9 = *(_QWORD *)(a1 + 16);
      *(_OWORD *)__b = __s1;
      v24 = v28;
LABEL_25:
      v12 = SHIBYTE(v24);
      v13 = (void **)__b[0];
      sub_20BDDC0E4(v21, v7);
      v16 = __b;
      if (v12 < 0)
        v16 = v13;
      if (v22 >= 0)
        v17 = v21;
      else
        v17 = (void **)v21[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"#  %s is overridden to '%s'.  Default is '%s'.  #", v14, v15, v9, v16, v17);
      if (v22 < 0)
        operator delete(v21[0]);
      if (SHIBYTE(v24) < 0)
        operator delete(__b[0]);
      if (v26 >= 0)
        v18 = HIBYTE(v26);
      else
        v18 = (size_t)__p[1];
      sub_20BDDC468(__b, v18, 35);
      if (v24 >= 0)
        v19 = __b;
      else
        v19 = (void **)__b[0];
      v20 = __p;
      if (v26 < 0)
        v20 = (void **)__p[0];
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "%s\n%s\n%s\n", (const char *)v19, (const char *)v20, (const char *)v19);
      if (SHIBYTE(v24) < 0)
        operator delete(__b[0]);
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
      v6 = HIBYTE(v28);
      goto LABEL_47;
    }
    if (v8 != -1)
    {
      if (!memcmp(&__s1, v7, v8))
        goto LABEL_49;
      goto LABEL_18;
    }
LABEL_52:
    sub_20BEB9180();
  }
  v10 = *((_QWORD *)&__s1 + 1);
  if (v8 != *((_QWORD *)&__s1 + 1))
  {
    v9 = *(_QWORD *)(a1 + 16);
    v11 = (void *)__s1;
    goto LABEL_24;
  }
  if (v8 == -1)
    goto LABEL_52;
  v11 = (void *)__s1;
  if (memcmp((const void *)__s1, v7, v8))
  {
    v9 = *(_QWORD *)(a1 + 16);
LABEL_24:
    sub_20BDDBFAC(__b, v11, v10);
    v7 = *(char **)(a1 + 8);
    goto LABEL_25;
  }
LABEL_48:
  operator delete((void *)__s1);
LABEL_49:
  if (v30 < 0)
    operator delete(v29[0]);
}

{
  __ZN32pxrInternal__aapl__pxrReserved__23Tf_InitializeEnvSettingINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEEEvPNS_12TfEnvSettingIT_EE(a1);
}

void sub_20BEC4144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  if (*(char *)(v30 - 49) < 0)
    operator delete(*(void **)(v30 - 72));
  _Unwind_Resume(exception_object);
}

BOOL sub_20BEC41CC(std::mutex *a1, uint64_t a2, __int128 *a3, unint64_t *a4)
{
  unsigned __int8 *v10;
  char v11;
  char v12;
  unint64_t v13;
  const char *v14;
  __int128 __p;
  uint64_t v16;
  const char *v17;
  char v18;
  int v19;

  std::mutex::lock(a1);
  if (atomic_load(a4))
  {
    std::mutex::unlock(a1);
    return 0;
  }
  sub_20BEC4F78((char *)&__p, (__int128 *)a2, a3);
  v10 = sub_20BEC4A8C((uint64_t)&a1[1], (unsigned __int8 *)&__p, &__p);
  v12 = v11;
  sub_20BEC4498((uint64_t)&v17);
  if (SHIBYTE(v16) < 0)
    operator delete((void *)__p);
  v13 = (unint64_t)(v10 + 40);
  if (*((_DWORD *)v10 + 16) != 2)
    v13 = 0;
  atomic_store(v13, a4);
  std::mutex::unlock(a1);
  if (!v12)
  {
    *(_QWORD *)&__p = "tf/envSetting.cpp";
    *((_QWORD *)&__p + 1) = "Define";
    v16 = 148;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry::Define(const string &, const U &, std::atomic<U "
          "*> *) [U = std::string]";
    v18 = 0;
    v19 = 1;
    if (*(char *)(a2 + 23) >= 0)
      v14 = (const char *)a2;
    else
      v14 = *(const char **)a2;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"Multiple definitions of TfEnvSetting variable detected.  This is usually due to software misconfiguration.  Contact the build team for assistance.  (duplicate '%s')", v14);
    return 0;
  }
  return a1[1].__m_.__opaque[32] != 0;
}

void sub_20BEC42F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20BEC4460((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::Tf_GetEnvSettingByName(unsigned __int8 *a1)
{
  std::mutex *Instance;

  Instance = (std::mutex *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  if (!Instance)
    Instance = (std::mutex *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  return sub_20BEC4354(Instance, a1);
}

unsigned __int8 *sub_20BEC4354(std::mutex *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;

  std::mutex::lock(a1);
  v4 = sub_20BEB4DB8(&a1[1].__m_.__sig, a2);
  if (v4)
    v5 = v4 + 40;
  else
    v5 = 0;
  std::mutex::unlock(a1);
  return v5;
}

void sub_20BEC439C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEC43B0(uint64_t a1)
{
  void *v2;

  sub_20BEC43E8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BEC43E8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BEC4424((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20BEC4424(uint64_t a1)
{
  sub_20BEC4498(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_20BEC4460(uint64_t a1)
{
  sub_20BEC4498(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20BEC4498(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C51B6F0[v2])(&v4, a1);
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

void sub_20BEC44F8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

unint64_t sub_20BEC450C(unint64_t a1)
{
  void **v2;
  FILE *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type size;
  std::string *p_p;
  std::string *p_str;
  std::string::size_type v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::string::size_type v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  std::string::size_type v27;
  _BOOL8 v28;
  char *v29;
  unint64_t v30;
  pxrInternal__aapl__pxrReserved__::TfRegistryManager *Instance;
  uint64_t v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string __str;
  const char *v38[2];
  int v39;
  std::string __p;
  void *v41[2];
  char v42;
  char v43;
  void *v44[2];
  uint64_t v45;
  const char *v46;
  char v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = 850045863;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1065353216;
  sub_20BDDC0E4(v44, "PIXAR_TF_ENV_SETTING_FILE");
  sub_20BDDC0E4(&__p, "");
  pxrInternal__aapl__pxrReserved__::TfGetenv((const char *)v44, (uint64_t)&__p, (uint64_t)v41);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45) < 0)
    operator delete(v44[0]);
  if (v42 >= 0)
    v2 = v41;
  else
    v2 = (void **)v41[0];
  v3 = pxrInternal__aapl__pxrReserved__::ArchOpenFile((const char *)v2, "r");
  if (v3)
  {
    v39 = 0;
    v38[0] = (const char *)v41;
    v38[1] = (const char *)&v39;
    while (fgets((char *)v44, 1024, v3))
    {
      ++v39;
      sub_20BDDC0E4(&__p, (char *)v44);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (p_p->__r_.__value_.__s.__data_[size - 1] == 10)
      {
        pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", &__p, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          if (__str.__r_.__value_.__l.__size_)
          {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            goto LABEL_22;
          }
LABEL_39:
          operator delete(__str.__r_.__value_.__l.__data_);
          goto LABEL_40;
        }
        if (*((_BYTE *)&__str.__r_.__value_.__s + 23))
        {
          p_str = &__str;
LABEL_22:
          if (p_str->__r_.__value_.__s.__data_[0] != 35)
          {
            v13 = std::string::find(&__str, 61, 0);
            if (v13 == -1)
            {
              sub_20BEC49E8(v38, (pxrInternal__aapl__pxrReserved__ *)"no '=' found", v14, v15, v16, v17, v18, v19, v33);
            }
            else
            {
              v20 = v13;
              std::string::basic_string(&v35, &__str, 0, v13, (std::allocator<char> *)&v34);
              pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", &v35, &v36);
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v35.__r_.__value_.__l.__data_);
              std::string::basic_string(&v34, &__str, v20 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v43);
              pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", &v34, &v35);
              if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v34.__r_.__value_.__l.__data_);
              v27 = HIBYTE(v36.__r_.__value_.__r.__words[2]);
              if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v27 = v36.__r_.__value_.__l.__size_;
              if (v27)
                pxrInternal__aapl__pxrReserved__::ArchSetEnv((const char *)&v36, (const char *)&v35, 0);
              else
                sub_20BEC49E8(v38, (pxrInternal__aapl__pxrReserved__ *)"empty key", v21, v22, v23, v24, v25, v26, v33);
              if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v35.__r_.__value_.__l.__data_);
              if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v36.__r_.__value_.__l.__data_);
            }
          }
          if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_40;
          goto LABEL_39;
        }
      }
      else
      {
        sub_20BEC49E8(v38, (pxrInternal__aapl__pxrReserved__ *)"line too long; ignored", v4, v5, v6, v7, v8, v9, v33);
      }
LABEL_40:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    fclose(v3);
  }
  sub_20BDDC0E4(v44, "TF_ENV_SETTING_ALERTS_ENABLED");
  v28 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)v44, 1);
  *(_BYTE *)(a1 + 104) = v28;
  if (SHIBYTE(v45) < 0)
    operator delete(v44[0]);
  do
    v30 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance);
  while (__stlxr(a1, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry>::_instance));
  if (v30)
  {
    v44[0] = "tf/instantiateSingleton.h";
    v44[1] = "SetInstanceConstructed";
    v45 = 56;
    v46 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegis"
          "try>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::Tf_EnvSettingRegistry]";
    v47 = 0;
    v48 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v44, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v29);
  }
  Instance = (pxrInternal__aapl__pxrReserved__::TfRegistryManager *)pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance((pxrInternal__aapl__pxrReserved__::TfRegistryManager *)v28);
  pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(Instance, &stru_24C51B708);
  if (v42 < 0)
    operator delete(v41[0]);
  return a1;
}

void sub_20BEC48D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  std::mutex *v55;

  if (a33 < 0)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  if (a48 < 0)
    operator delete(a43);
  sub_20BEC43B0((uint64_t)&v55[1]);
  std::mutex::~mutex(v55);
  _Unwind_Resume(a1);
}

void sub_20BEC49E8(const char **a1, pxrInternal__aapl__pxrReserved__ *this, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  FILE *v9;
  const char *v10;
  int v11;
  void **v12;
  void *__p[2];
  char v14;
  const char *v15;

  v15 = (const char *)&a9;
  v9 = (FILE *)*MEMORY[0x24BDAC8D8];
  v10 = *a1;
  if ((*a1)[23] < 0)
    v10 = *(const char **)v10;
  v11 = *(_DWORD *)a1[1];
  pxrInternal__aapl__pxrReserved__::TfVStringPrintf((uint64_t *)__p, this, v15, a3);
  if (v14 >= 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  fprintf(v9, "File '%s' (From PIXAR_TF_ENV_SETTING_FILE) line %d: %s.\n", v10, v11, (const char *)v12);
  if (v14 < 0)
    operator delete(__p[0]);
}

unsigned __int8 *sub_20BEC4A8C(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  unsigned __int8 *v5;
  char *v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unsigned __int8 **v22;
  unint64_t v23;
  unsigned __int8 *v25;
  char v26;

  v5 = a2;
  v25 = 0;
  v26 = 0;
  v7 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v8 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v8 = v7;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v25, (pxrInternal__aapl__pxrReserved__ *)a2, v8);
  v9 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v25);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v10)
        v3 = v9 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v5) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_20BEC4D38(a1, v9, a3, (uint64_t)&v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25 = *v22;
    *v22 = v25;
  }
  else
  {
    *(_QWORD *)v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25)
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25;
    }
  }
  i = v25;
  v25 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20BEC4F34((uint64_t)&v25, 0);
  return i;
}

void sub_20BEC4D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEC4F34((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEC4D38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20BEC4DAC(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BEC4D94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEC4F34(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEC4DAC(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_20BEC4E20((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_20BEC4E04(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEC4E20(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_DWORD *)(a1 + 24) = -1;
  sub_20BEC4E64(a1, a2);
  return a1;
}

void sub_20BEC4E50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEC4498(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEC4E64(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;

  v3 = result;
  v4 = *(unsigned int *)(result + 24);
  if ((_DWORD)v4 != -1)
    result = ((uint64_t (*)(char *, uint64_t))off_24C51B6F0[v4])(&v7, result);
  *(_DWORD *)(v3 + 24) = -1;
  v5 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v5 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C51B718[v5])(&v6, v3, a2);
    *(_DWORD *)(v3 + 24) = v5;
  }
  return result;
}

void sub_20BEC4EF0(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  *a2 = *a3;
}

void sub_20BEC4EFC(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  *a2 = *a3;
}

void *sub_20BEC4F08(int a1, _QWORD *__dst, __int128 *a3)
{
  __int128 v3;
  void *result;

  if (*((char *)a3 + 23) < 0)
    return sub_20BDDBFAC(__dst, *(void **)a3, *((_QWORD *)a3 + 1));
  v3 = *a3;
  __dst[2] = *((_QWORD *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

void sub_20BEC4F34(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BEC4424((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

char *sub_20BEC4F78(char *__dst, __int128 *a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(v6, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v6 = v7;
  }
  *((_DWORD *)__dst + 12) = 2;
  return __dst;
}

void sub_20BEC4FF8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfError::TfError(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, __int128 *a5, std::string *__str, void (**a7)(uint64_t, _QWORD, void (**)(uint64_t), _QWORD, _QWORD), char a8)
{
  unint64_t Instance;
  unint64_t *v16;
  unint64_t v17;
  void (*v19[5])(uint64_t);

  v19[4] = *(void (**)(uint64_t))MEMORY[0x24BDAC8D0];
  v19[0] = 0;
  v19[1] = 0;
  if (*a7)
    (*a7)(1, a7, v19, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticBase::TfDiagnosticBase(a1, a2, a3, a4, a5, __str, v19, a8);
  sub_20BEBAE7C((uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))v19);
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v16 = (unint64_t *)(Instance + 144);
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 + 1, v16));
  *(_QWORD *)(a1 + 136) = v17;
  return a1;
}

void sub_20BEC511C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEBD764(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl(pxrInternal__aapl__pxrReserved__::TfErrorMark *this, pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *a2)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char v7;
  char v8;

  v3 = (unint64_t *)((char *)a2 + 152);
  v7 = 0;
  v4 = *(_QWORD *)(sub_20BEB5B80((unint64_t *)a2 + 19, &v7) + 8);
  v8 = 0;
  v5 = sub_20BEB5B80(v3, &v8);
  return v4 == v5 || *(_QWORD *)(*(_QWORD *)v5 + 152) < *(_QWORD *)this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfErrorMark::_ReportErrors(pxrInternal__aapl__pxrReserved__::TfErrorMark *this, pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char v7;

  v3 = sub_20BEC5244((unint64_t *)this, 0);
  v7 = 0;
  v4 = (_QWORD *)sub_20BEB5B80((unint64_t *)a2 + 19, &v7);
  if (v4 != v3)
  {
    v5 = v3;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_ReportError((unint64_t *)a2, (uint64_t)(v5 + 2));
      v5 = (_QWORD *)v5[1];
    }
    while (v5 != v4);
  }
  return pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange((unint64_t *)a2, v3, v4);
}

_QWORD *sub_20BEC5244(unint64_t *a1, unint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *Instance;

  Instance = (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  return pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_GetErrorMarkBegin(Instance, *a1, a2);
}

pxrInternal__aapl__pxrReserved__::TfErrorMark *pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark(pxrInternal__aapl__pxrReserved__::TfErrorMark *this)
{
  unint64_t Instance;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  char v7;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v7 = 0;
  v3 = sub_20BEBF348((unint64_t *)(Instance + 344), &v7);
  ++*v3;
  v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!v4)
    v4 = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v5 = atomic_load((unint64_t *)(v4 + 144));
  *(_QWORD *)this = v5;
  return this;
}

void pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark(pxrInternal__aapl__pxrReserved__::TfErrorMark *this)
{
  unint64_t *Instance;
  _QWORD *v3;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v8 = 0;
  v3 = sub_20BEBF348(Instance + 43, &v8);
  if ((*v3)-- == 1)
  {
    v5 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!v5)
      v5 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v6 = *(_QWORD *)this;
    v7 = atomic_load(v5 + 18);
    if (v6 < v7
      && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl(this, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)v5))
    {
      pxrInternal__aapl__pxrReserved__::TfErrorMark::_ReportErrors(this, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance);
    }
  }
}

void pxrInternal__aapl__pxrReserved__::TfReportActiveErrorMarks(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t v1;
  char *v2;
  std::string *v3;
  char v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  const char *p_p;
  _OWORD *v18;
  void *__p;
  char v20;
  _QWORD v21[2];
  _QWORD v22[11];
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  int v29;
  std::string v30;

  memset(&v30, 0, sizeof(v30));
  std::string::append(&v30, "- Set _enableTfErrorMarkStackTraces and recompile tf/errorMark.cpp.\n");
  if (!sub_20BEBD6A0(2))
    std::string::append(&v30, "- Enable the TF_ERROR_MARK_TRACKING debug code.\n");
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v30.__r_.__value_.__l.__size_)
    {
      v3 = (std::string *)v30.__r_.__value_.__r.__words[0];
      goto LABEL_8;
    }
  }
  else if (*((_BYTE *)&v30.__r_.__value_.__s + 23))
  {
    v3 = &v30;
LABEL_8:
    printf("Active error mark stack traces are disabled.  To enable, please do the following:\n%s", (const char *)v3);
    goto LABEL_30;
  }
  v27 = 0u;
  v28 = 0u;
  v29 = 1065353216;
LABEL_10:
  v4 = 8 * (&dword_2547850C8 & 3);
  v5 = *(_DWORD *)((unint64_t)&dword_2547850C8 & 0xFFFFFFFFFFFFFFFCLL) & ~(255 << v4);
  v6 = v5 | (1 << v4);
  do
  {
    while (1)
    {
      v7 = __ldaxr((unsigned int *)((unint64_t)&dword_2547850C8 & 0xFFFFFFFFFFFFFFFCLL));
      if (v7 == v5)
        break;
      __clrex();
      if (*(_DWORD *)((unint64_t)&dword_2547850C8 & 0xFFFFFFFFFFFFFFFCLL) != v5)
      {
        sched_yield();
        goto LABEL_10;
      }
    }
  }
  while (__stlxr(v6, (unsigned int *)((unint64_t)&dword_2547850C8 & 0xFFFFFFFFFFFFFFFCLL)));
  v8 = atomic_load((unsigned __int8 *)&qword_2547850D8);
  if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2547850D8))
  {
    v18 = operator new(0x28uLL);
    *v18 = 0u;
    v18[1] = 0u;
    *((_DWORD *)v18 + 8) = 1065353216;
    qword_2547850D0 = (uint64_t)v18;
    __cxa_guard_release(&qword_2547850D8);
  }
  if (&v27 != (__int128 *)qword_2547850D0)
  {
    v29 = *(_DWORD *)(qword_2547850D0 + 32);
    sub_20BEC586C(&v27, *(_QWORD **)(qword_2547850D0 + 16), 0);
  }
  __dmb(0xBu);
  LOBYTE(dword_2547850C8) = 0;
  v25 = v28;
  v26 = 0;
  v9 = *MEMORY[0x24BEDB7F0];
  v10 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v11 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  v12 = MEMORY[0x24BEDB848] + 16;
  while (v25 != v26)
  {
    v13 = sub_20BEC56FC(&v25, v1, v2);
    printf("== TfErrorMark @ %p created from ===========================\n", *(const void **)(*v13 + 16));
    sub_20BDDBD68((uint64_t)v21);
    v16 = sub_20BEC56FC(&v25, v14, v15);
    pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames(v22, (uint64_t *)(*v16 + 24), 0);
    std::stringbuf::str();
    if (v20 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    puts(p_p);
    if (v20 < 0)
      operator delete(__p);
    v21[0] = v9;
    *(_QWORD *)((char *)v21 + *(_QWORD *)(v9 - 24)) = v10;
    v22[0] = v11;
    v22[1] = v12;
    if (v23 < 0)
      operator delete((void *)v22[9]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x212B92EB0](&v24);
    sub_20BEC5774((uint64_t)&v25);
  }
  sub_20BEC57F0((uint64_t)&v27);
LABEL_30:
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_20BEC568C(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_2547850D8);
  __dmb(0xBu);
  LOBYTE(dword_2547850C8) = 0;
  sub_20BEC57F0(v1 - 160);
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEC56FC(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHashMap<const pxr"
            "Internal__aapl__pxrReserved__::TfErrorMark *, std::vector<unsigned long>, pxrInternal__aapl__pxrReserved__::"
            "TfHash>>::operator->() [T = pxrInternal__aapl__pxrReserved__::TfHashMap<const pxrInternal__aapl__pxrReserved"
            "__::TfErrorMark *, std::vector<unsigned long>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20BEC5774(uint64_t a1)
{
  _QWORD v3[4];
  char v4;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::TfHas"
            "hMap<const pxrInternal__aapl__pxrReserved__::TfErrorMark *, std::vector<unsigned long>, pxrInternal__aapl__p"
            "xrReserved__::TfHash>>::operator++() [T = pxrInternal__aapl__pxrReserved__::TfHashMap<const pxrInternal__aap"
            "l__pxrReserved__::TfErrorMark *, std::vector<unsigned long>, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)a1 = **(_QWORD **)a1;
  }
  return a1;
}

uint64_t sub_20BEC57F0(uint64_t a1)
{
  void *v2;

  sub_20BEC5828(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BEC5828(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[3];
      if (v4)
      {
        v2[4] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20BEC586C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD v13[2];

  v4 = a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v13[0] = v8 + 2;
        v13[1] = v8 + 3;
        sub_20BEC59B0((uint64_t)v13, (uint64_t)(v4 + 2));
        v10 = (_QWORD *)*v8;
        v11 = bswap64(0x9E3779B97F4A7C55 * v8[2]);
        v8[1] = v11;
        v12 = sub_20BEC5A00((uint64_t)a1, v11, v8 + 2);
        sub_20BEC5B54(a1, v8, v12);
        v4 = (_QWORD *)*v4;
        if (!v10)
          break;
        v8 = v10;
      }
      while (v4 != a3);
    }
    sub_20BEC5828((int)a1, v10);
  }
  while (v4 != a3)
  {
    sub_20BEC5E88(a1, v4 + 2);
    v4 = (_QWORD *)*v4;
  }
}

void sub_20BEC5980(void *a1)
{
  int v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  sub_20BEC5828(v1, v2);
  __cxa_rethrow();
}

void sub_20BEC599C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20BEC59B0(uint64_t a1, uint64_t a2)
{
  char *v3;

  **(_QWORD **)a1 = *(_QWORD *)a2;
  v3 = *(char **)(a1 + 8);
  if (v3 != (char *)(a2 + 8))
    sub_20BDDF7E4(v3, *(char **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  return a1;
}

_QWORD *sub_20BEC5A00(uint64_t a1, unint64_t a2, _QWORD *a3)
{
  unint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  _BOOL8 v10;
  size_t v11;
  unint64_t v12;
  size_t v13;
  uint8x8_t v14;
  unint64_t v15;
  _QWORD *v16;
  int v17;
  _QWORD *result;
  unint64_t v19;
  unint64_t v20;
  _BOOL4 v21;
  int v22;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v8 = *(float *)(a1 + 32);
  if (!v6 || (float)(v8 * (float)v6) < v7)
  {
    v9 = 2 * v6;
    v10 = v6 < 3 || (v6 & (v6 - 1)) != 0;
    v11 = v10 | v9;
    v12 = vcvtps_u32_f32(v7 / v8);
    if (v11 <= v12)
      v13 = v12;
    else
      v13 = v11;
    sub_20BEC5C3C(a1, v13);
    v6 = *(_QWORD *)(a1 + 8);
  }
  v14 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
  v14.i16[0] = vaddlv_u8(v14);
  if (v14.u32[0] > 1uLL)
  {
    v15 = a2;
    if (v6 <= a2)
      v15 = a2 % v6;
  }
  else
  {
    v15 = (v6 - 1) & a2;
  }
  v16 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
  if (!v16)
    return 0;
  v17 = 0;
  do
  {
    result = v16;
    v16 = (_QWORD *)*v16;
    if (!v16)
      break;
    v19 = v16[1];
    if (v14.u32[0] > 1uLL)
    {
      v20 = v16[1];
      if (v19 >= v6)
        v20 = v19 % v6;
    }
    else
    {
      v20 = v19 & (v6 - 1);
    }
    if (v20 != v15)
      break;
    v21 = v19 == a2 && v16[2] == *a3;
    v22 = v17 & !v21;
    v17 |= v21;
  }
  while (v22 != 1);
  return result;
}

_QWORD *sub_20BEC5B54(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  if (!a3)
  {
    *a2 = result[2];
    result[2] = a2;
    *(_QWORD *)(*result + 8 * v4) = result + 2;
    if (!*a2)
      goto LABEL_19;
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
LABEL_18:
    *(_QWORD *)(*result + 8 * v6) = a2;
    goto LABEL_19;
  }
  *a2 = *a3;
  *a3 = a2;
  if (*a2)
  {
    v6 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v6 >= *(_QWORD *)&v3)
        v6 %= *(_QWORD *)&v3;
    }
    else
    {
      v6 &= *(_QWORD *)&v3 - 1;
    }
    if (v6 != v4)
      goto LABEL_18;
  }
LABEL_19:
  ++result[3];
  return result;
}

void sub_20BEC5C3C(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_20BEC5D18(a1, prime);
  }
}

void sub_20BEC5D18(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *i;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;

  if (a2)
  {
    if (a2 >> 61)
      sub_20BDDF5B4();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      for (i = (_QWORD *)*v7; *v7; i = (_QWORD *)*v7)
      {
        v12 = i[1];
        if (v9.u32[0] > 1uLL)
        {
          if (v12 >= a2)
            v12 %= a2;
        }
        else
        {
          v12 &= a2 - 1;
        }
        if (v12 == v8)
        {
          v7 = i;
        }
        else
        {
          v13 = i;
          if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
          {
            do
            {
              v14 = v13;
              v13 = (_QWORD *)*v13;
            }
            while (v13 && i[2] == v13[2]);
            *v7 = v13;
            *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = i;
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
            v7 = i;
            v8 = v12;
          }
        }
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

_QWORD *sub_20BEC5E88(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v8;

  sub_20BEC5F1C((uint64_t)a1, a2, (uint64_t)&v8);
  v3 = v8;
  v4 = v8 + 2;
  v5 = bswap64(0x9E3779B97F4A7C55 * v8[2]);
  v8[1] = v5;
  v6 = sub_20BEC5A00((uint64_t)a1, v5, v4);
  sub_20BEC5B54(a1, v3, v6);
  return v3;
}

void sub_20BEC5EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_20BEC604C((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BEC5F1C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  const void *v7;
  _QWORD *result;

  v5 = a1 + 16;
  v6 = operator new(0x30uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *v6 = 0;
  v6[1] = 0;
  v7 = (const void *)a2[1];
  v6[2] = *a2;
  v6[4] = 0;
  v6[5] = 0;
  v6[3] = 0;
  result = sub_20BEC5FD4(v6 + 3, v7, a2[2], (uint64_t)(a2[2] - (_QWORD)v7) >> 3);
  *(_BYTE *)(a3 + 16) = 1;
  v6[1] = bswap64(0x9E3779B97F4A7C55 * v6[2]);
  return result;
}

void sub_20BEC5FB8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  sub_20BEC604C(v3, v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEC5FD4(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDDF654(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20BEC6030(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20BEC604C(uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[3];
    if (v3)
    {
      __p[4] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void pxrInternal__aapl__pxrReserved__::TfErrorTransport::_PostImpl(pxrInternal__aapl__pxrReserved__::TfErrorTransport *this)
{
  unint64_t *Instance;

  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::_SpliceErrors(Instance, this);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfBaseException::TfBaseException(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = off_24C51B740;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  v3 = a1 + 72;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v3, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  return a1;
}

void sub_20BEC6148(_Unwind_Exception *a1)
{
  std::exception *v1;
  void **v2;
  void **v3;
  std::exception_vtbl *v5;

  v3 = v2;
  v5 = (std::exception_vtbl *)*v3;
  if (*v3)
  {
    v1[7].__vftable = v5;
    operator delete(v5);
  }
  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfBaseException::~TfBaseException(std::exception *this)
{
  std::exception_vtbl *v2;

  this->__vftable = (std::exception_vtbl *)off_24C51B740;
  if (SHIBYTE(this[11].__vftable) < 0)
    operator delete(this[9].__vftable);
  v2 = this[6].__vftable;
  if (v2)
  {
    this[7].__vftable = v2;
    operator delete(v2);
  }
  std::exception::~exception(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::TfBaseException::~TfBaseException(this);
  operator delete(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfBaseException::_ThrowImpl(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), int a5)
{
  _BOOL4 v10;
  _BOOL4 v11;
  uint64_t v12;
  char *v13;
  void **v14;
  BOOL v15;
  int v16;
  __int128 v17;
  __int128 v18;
  void *v20[2];
  char v21;
  void *__p[2];
  uint64_t v23;
  const char *v24;
  char v25;
  int v26;

  sub_20BDDC0E4(__p, "TF_FATAL_THROW");
  v10 = pxrInternal__aapl__pxrReserved__::TfGetenvBool((const char *)__p, 0);
  v11 = v10;
  if (SHIBYTE(v23) < 0)
  {
    operator delete(__p[0]);
    if (!v11)
      goto LABEL_9;
LABEL_5:
    __p[0] = "tf/exception.cpp";
    __p[1] = "_ThrowImpl";
    v23 = 52;
    v24 = "static void pxrInternal__aapl__pxrReserved__::TfBaseException::_ThrowImpl(const TfCallContext &, TfBaseExcepti"
          "on &, TfFunctionRef<void ()>, int)";
    v25 = 0;
    v26 = 4;
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a2 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v20);
    if (v21 >= 0)
      v14 = v20;
    else
      v14 = (void **)v20[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"%s (%s thrown)", v13, v12, v14);
  }
  if (v10)
    goto LABEL_5;
LABEL_9:
  if (*(_QWORD *)a1)
    v15 = *((_QWORD *)a1 + 1) == 0;
  else
    v15 = 1;
  if (v15)
    v16 = a5;
  else
    v16 = a5 + 1;
  pxrInternal__aapl__pxrReserved__::ArchGetStackFrames((pxrInternal__aapl__pxrReserved__ *)0x40, v16 + 2, (uint64_t *)(a2 + 48));
  v17 = *a1;
  v18 = a1[1];
  *(_BYTE *)(a2 + 40) = *((_BYTE *)a1 + 32);
  *(_OWORD *)(a2 + 24) = v18;
  *(_OWORD *)(a2 + 8) = v17;
  return a4(a3);
}

void sub_20BEC6334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfBaseException::what(pxrInternal__aapl__pxrReserved__::TfBaseException *this)
{
  uint64_t result;

  result = (uint64_t)this + 72;
  if (*((char *)this + 95) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::Invoke(uint64_t this, const void *a2)
{
  if (pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func)
    return pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func(this);
  return this;
}

uint64_t (*pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::SetNotifier(uint64_t (*this)(_QWORD), void (*a2)(const void *), char *a3))(_QWORD)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (this && pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func)
  {
    v3[0] = "tf/expiryNotifier.cpp";
    v3[1] = "SetNotifier";
    v3[2] = 43;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::SetNotifier(void (*)(const void *))";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"cannot override already installed notification function", a3);
  }
  pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func = this;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::Invoke2(uint64_t this, const void *a2)
{
  if (pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func2)
    return pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func2(this);
  return this;
}

uint64_t (*pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::SetNotifier2(uint64_t (*this)(_QWORD), void (*a2)(const void *), char *a3))(_QWORD)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (this && pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func2)
  {
    v3[0] = "tf/expiryNotifier.cpp";
    v3[1] = "SetNotifier2";
    v3[2] = 57;
    v3[3] = "static void pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::SetNotifier2(void (*)(const void *))";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"cannot override already installed notification(2) function", a3);
  }
  pxrInternal__aapl__pxrReserved__::Tf_ExpiryNotifier::_func2 = this;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFastCompression::GetMaxInputSize(pxrInternal__aapl__pxrReserved__::TfFastCompression *this)
{
  return 0x3E82000000;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize(pxrInternal__aapl__pxrReserved__::TfFastCompression *this)
{
  uint64_t v2;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v3;
  uint64_t v4;

  if ((unint64_t)this > 0x3E82000000)
    return 0;
  if ((unint64_t)this <= 0x7E000000)
    return (int)(pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compressBound(this) + 1);
  v2 = (((unint64_t)this >> 25) * (unsigned __int128)0x410410410410411uLL) >> 64;
  v3 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)((char *)this - 2113929216 * v2);
  v4 = ((int)pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compressBound((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)0x7E000000)
      + 4)
     * v2;
  if (v3)
    return v4 + (int)pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compressBound(v3) + 5;
  else
    return v4 + 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer(pxrInternal__aapl__pxrReserved__::TfFastCompression *this, char *a2, unint64_t a3)
{
  char *v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v9;
  char v10;
  int v11;
  int v12;
  _QWORD v13[4];
  char v14;

  if (a3 <= 0x3E82000000)
  {
    if (a3 > 0x7E000000)
    {
      v8 = ((a3 >> 25) * (unsigned __int128)0x410410410410411uLL) >> 64;
      v9 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(a3 - 2113929216 * v8);
      if (v9)
        v10 = v8 + 1;
      else
        v10 = ((a3 >> 25) * (unsigned __int128)0x410410410410411uLL) >> 64;
      *a2 = v10;
      v7 = a2 + 1;
      do
      {
        pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compressBound((pxrInternal__aapl__pxrReserved__::pxr_lz4 *)0x7E000000);
        v11 = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_default(this, v7 + 4, (char *)0x7E000000);
        *(_DWORD *)v7 = v11;
        v7 += v11 + 4;
        this = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)((char *)this + 2113929216);
        --v8;
      }
      while (v8);
      if (v9)
      {
        pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compressBound(v9);
        v12 = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_default(this, v7 + 4, (char *)v9);
        *(_DWORD *)v7 = v12;
        v7 += v12 + 4;
      }
    }
    else
    {
      *a2 = 0;
      pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)a3);
      v7 = &a2[(int)(pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_compress_default(this, a2 + 1, (char *)a3) + 1)];
    }
    return v7 - a2;
  }
  else
  {
    v13[0] = "tf/fastCompression.cpp";
    v13[1] = "CompressToBuffer";
    v13[2] = 72;
    v13[3] = "static size_t pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer(const char *, char *, size_t)";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to compress a buffer of %zu bytes, more than the maximum supported %zu", a3, 0x3E82000000uLL);
    return 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(pxrInternal__aapl__pxrReserved__::TfFastCompression *this, char *__dst, char *a3, unint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::pxr_lz4 *v12;
  char *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  char *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  char v24;

  v4 = 0;
  if (a3)
  {
    v5 = a4;
    if (a4)
    {
      v7 = __dst;
      v8 = (char *)this + 1;
      v9 = *(unsigned __int8 *)this;
      if (*(_BYTE *)this)
      {
        v4 = 0;
        v10 = 1;
        while (1)
        {
          v11 = v10 + 4;
          if (v10 + 4 > (unint64_t)a3)
          {
            v20 = "tf/fastCompression.cpp";
            v21 = "DecompressFromBuffer";
            v22 = 143;
            v23 = "static size_t pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(const char *, "
                  "char *, size_t, size_t)";
            v24 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to decompress data. Couldn't read chunk size.");
            return 0;
          }
          v14 = *(_DWORD *)v8;
          v12 = (pxrInternal__aapl__pxrReserved__::pxr_lz4 *)(v8 + 4);
          v13 = (char *)v14;
          if ((v14 & 0x80000000) != 0)
            break;
          v10 = (uint64_t)&v13[v11];
          if (&v13[v11] > a3)
          {
            v20 = "tf/fastCompression.cpp";
            v21 = "DecompressFromBuffer";
            v22 = 157;
            v23 = "static size_t pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(const char *, "
                  "char *, size_t, size_t)";
            v24 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to decompress data. Chunk too large.");
            return 0;
          }
          if (v5 >= 0x7E000000)
            v15 = 2113929216;
          else
            v15 = v5;
          v16 = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe(v12, v7, v13, v15);
          if ((v16 & 0x80000000) != 0)
          {
            v20 = "tf/fastCompression.cpp";
            v21 = "DecompressFromBuffer";
            v18 = 165;
            goto LABEL_20;
          }
          v8 = &v13[(_QWORD)v12];
          v7 += v16;
          v5 -= v16;
          v4 += v16;
          if (!--v9)
            return v4;
        }
        v20 = "tf/fastCompression.cpp";
        v21 = "DecompressFromBuffer";
        v22 = 151;
        v23 = "static size_t pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(const char *, char"
              " *, size_t, size_t)";
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to decompress data. Invalid chunk size.");
        return 0;
      }
      v17 = pxrInternal__aapl__pxrReserved__::pxr_lz4::LZ4_decompress_safe((pxrInternal__aapl__pxrReserved__::TfFastCompression *)((char *)this + 1), __dst, (char *)((_DWORD)a3 - 1), a4);
      if ((v17 & 0x80000000) != 0)
      {
        v20 = "tf/fastCompression.cpp";
        v21 = "DecompressFromBuffer";
        v18 = 131;
LABEL_20:
        v22 = v18;
        v23 = "static size_t pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(const char *, char"
              " *, size_t, size_t)";
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to decompress data, possibly corrupt? LZ4 error code: %d");
        return 0;
      }
      return v17;
    }
  }
  return v4;
}

BOOL pxrInternal__aapl__pxrReserved__::TfPathExists(const char *a1, int a2)
{
  _BOOL8 v2;

  v2 = sub_20BEC68D8(a1, a2, 0);
  if (!v2 && *__error() == 2)
    *__error() = 0;
  return v2;
}

BOOL sub_20BEC68D8(const char *a1, int a2, stat *a3)
{
  uint64_t v3;
  int v4;
  stat *v5;
  int v6;
  uint64_t v8;

  v3 = *((unsigned __int8 *)a1 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *((_QWORD *)a1 + 1);
  if (!v3)
    return 0;
  v5 = (stat *)&v8;
  if (a3)
    v5 = a3;
  if (v4 < 0)
    a1 = *(const char **)a1;
  if (a2)
    v6 = stat(a1, v5);
  else
    v6 = lstat(a1, v5);
  return v6 == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsDir(const char *a1, int a2)
{
  uint64_t result;
  stat v3;

  LODWORD(result) = sub_20BEC68D8(a1, a2, &v3);
  if ((v3.st_mode & 0xF000) == 0x4000)
    return result;
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsFile(const char *a1, int a2)
{
  uint64_t result;
  stat v3;

  LODWORD(result) = sub_20BEC68D8(a1, a2, &v3);
  if ((v3.st_mode & 0xF000) == 0x8000)
    return result;
  else
    return 0;
}

BOOL pxrInternal__aapl__pxrReserved__::TfIsLink(const char *a1)
{
  uint64_t v1;
  int v2;
  stat v5;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (v2 < 0)
    a1 = *(const char **)a1;
  return !lstat(a1, &v5) && (v5.st_mode & 0xF000) == 40960;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsWritable(const char *a1)
{
  uint64_t v1;
  int v2;
  const stat *v3;
  stat v5;

  v1 = *((unsigned __int8 *)a1 + 23);
  v2 = (char)v1;
  if ((v1 & 0x80u) != 0)
    v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (v2 < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &v5))
    return pxrInternal__aapl__pxrReserved__::ArchStatIsWritable((uint64_t)&v5, v3);
  else
    return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfIsDirEmpty(const char *a1)
{
  char v1;
  uint64_t v2;
  int v3;
  const char *v4;
  int v5;
  uint64_t result;
  const char *v7;
  DIR *v8;
  DIR *v9;
  dirent *v10;
  const char *d_name;
  stat v12;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a1 + 1);
  if (!v2)
    return 0;
  v4 = a1;
  if (v3 < 0)
    a1 = *(const char **)a1;
  v5 = lstat(a1, &v12);
  result = 0;
  if (!v5 && (v12.st_mode & 0xF000) == 0x4000)
  {
    if (v4[23] >= 0)
      v7 = v4;
    else
      v7 = *(const char **)v4;
    v8 = opendir(v7);
    v9 = v8;
    if (v8)
    {
      v10 = readdir(v8);
      if (v10)
      {
        while (1)
        {
          if (v10->d_ino)
          {
            d_name = v10->d_name;
            if (strcmp(v10->d_name, "."))
            {
              if (strcmp(d_name, ".."))
                break;
            }
          }
          v10 = readdir(v9);
          if (!v10)
            goto LABEL_17;
        }
        v1 = 0;
      }
      else
      {
LABEL_17:
        v1 = 1;
      }
      closedir(v9);
    }
    return (v9 != 0) & v1;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::TfSymlink(const char *a1, const char *a2)
{
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  return symlink(a1, a2) != -1;
}

BOOL pxrInternal__aapl__pxrReserved__::TfDeleteFile(const char *a1)
{
  const char *v1;
  int v2;
  int *v3;
  void **v4;
  void *__p[2];
  char v7;
  _QWORD v8[4];
  char v9;

  v1 = a1;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v2 = unlink(a1);
  if (v2)
  {
    v8[0] = "tf/fileUtils.cpp";
    v8[1] = "TfDeleteFile";
    v8[2] = 281;
    v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::TfDeleteFile(const std::string &)";
    v9 = 0;
    if (v1[23] < 0)
      v1 = *(const char **)v1;
    v3 = __error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v3, __p);
    if (v7 >= 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to delete '%s': %s", v1, (const char *)v4);
    if (v7 < 0)
      operator delete(__p[0]);
  }
  return v2 == 0;
}

void sub_20BEC6C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfMakeDir(const char *a1, int a2)
{
  mode_t v2;

  if (a1[23] < 0)
    a1 = *(const char **)a1;
  if (a2 == -1)
    v2 = 511;
  else
    v2 = a2;
  return mkdir(a1, v2) != -1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMakeDirs(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  std::string __p;

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0;
  pxrInternal__aapl__pxrReserved__::TfNormPath(&__p, a1, 0);
  v6 = sub_20BEC6D70(&__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v6;
}

void sub_20BEC6D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEC6D70(std::string *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v6;
  char *v7;
  std::string::size_type size;
  std::string::size_type v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string::size_type v12;
  int v13;
  std::string *v14;
  std::string *p_s1;
  const char *v16;
  mode_t v17;
  uint64_t v18;
  std::string::size_type v19;
  int v20;
  const char *v21;
  std::string v23;
  std::string __s1;
  stat __p;

  v6 = atomic_load((unsigned __int8 *)&qword_2547850F8);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_2547850F8))
  {
    sub_20BDDC0E4(&qword_2547850E0, "/");
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2547850E0, &dword_20BDBC000);
    __cxa_guard_release(&qword_2547850F8);
  }
  pxrInternal__aapl__pxrReserved__::TfGetPathName(a1, (std::string *)&__p);
  if (byte_2547850F7 >= 0)
    v7 = (char *)&qword_2547850E0;
  else
    v7 = (char *)qword_2547850E0;
  pxrInternal__aapl__pxrReserved__::TfStringTrimRight(v7, (const std::string *)&__p, &__s1);
  if (SHIBYTE(__p.st_gid) < 0)
    operator delete(*(void **)&__p.st_dev);
  pxrInternal__aapl__pxrReserved__::TfGetBaseName(a1, &v23);
  size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __s1.__r_.__value_.__l.__size_;
  if (size)
  {
    v9 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = v23.__r_.__value_.__l.__size_;
    if (v9 && !pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)&__s1, 0))
    {
      v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v11 = __s1.__r_.__value_.__l.__size_;
      v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
      v13 = (char)v12;
      if ((v12 & 0x80u) != 0)
        v12 = a1->__r_.__value_.__l.__size_;
      if (v11 == v12)
      {
        if (v13 >= 0)
          v14 = a1;
        else
          v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          if (!memcmp(__s1.__r_.__value_.__l.__data_, v14, __s1.__r_.__value_.__l.__size_))
            goto LABEL_32;
        }
        else
        {
          if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
            goto LABEL_32;
          p_s1 = &__s1;
          while (p_s1->__r_.__value_.__s.__data_[0] == v14->__r_.__value_.__s.__data_[0])
          {
            p_s1 = (std::string *)((char *)p_s1 + 1);
            v14 = (std::string *)((char *)v14 + 1);
            if (!--v10)
              goto LABEL_32;
          }
        }
      }
      if ((sub_20BEC6D70(&__s1, a2, a3) & 1) == 0 && *__error() != 17)
      {
LABEL_50:
        v18 = 0;
        goto LABEL_51;
      }
    }
  }
LABEL_32:
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = (const char *)a1;
  else
    v16 = (const char *)a1->__r_.__value_.__r.__words[0];
  if ((_DWORD)a2 == -1)
    v17 = 511;
  else
    v17 = a2;
  if (mkdir(v16, v17) != -1)
    goto LABEL_39;
  if (!(_DWORD)a3)
    goto LABEL_50;
  v19 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  v20 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v19 = a1->__r_.__value_.__l.__size_;
  if (!v19)
    goto LABEL_50;
  if (v20 >= 0)
    v21 = (const char *)a1;
  else
    v21 = (const char *)a1->__r_.__value_.__r.__words[0];
  v18 = 0;
  if (!lstat(v21, &__p) && (__p.st_mode & 0xF000) == 0x4000)
LABEL_39:
    v18 = 1;
LABEL_51:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
  return v18;
}

void sub_20BEC6FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __cxa_guard_abort(&qword_2547850F8);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfReadDir(const char *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  DIR *v9;
  DIR *v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  __int128 v41;
  uint64_t v42;
  int v43;
  char *v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  char *v48;
  __int128 v49;
  uint64_t v50;
  int v51;
  int *v53;
  const char *v54;
  char *v55;
  void *v56;
  void *__p[2];
  uint64_t v58;
  stat v59;
  dirent *v60;
  void *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t *v65;
  dirent v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v60 = 0;
  if (a1[23] < 0)
    a1 = *(const char **)a1;
  v9 = opendir(a1);
  v10 = v9;
  if (v9)
  {
    v11 = readdir_r(v9, &v66, &v60);
    if (v60 && !v11)
    {
      do
      {
        if (*(unsigned __int16 *)v66.d_name != 46)
        {
          if (*(unsigned __int16 *)v66.d_name ^ 0x2E2E | v66.d_name[2])
          {
            v12 = dirfd(v10);
            if (!fstatat(v12, v66.d_name, &v59, 32))
            {
              v15 = v59.st_mode & 0xF000;
              if (v15 == 40960)
              {
                if (a4)
                {
                  sub_20BDDC0E4(__p, v66.d_name);
                  v20 = a4[1];
                  v19 = a4[2];
                  if (v20 >= v19)
                  {
                    v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a4) >> 3);
                    v31 = v30 + 1;
                    if (v30 + 1 > 0xAAAAAAAAAAAAAAALL)
                      sub_20BDDF694();
                    v32 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - *a4) >> 3);
                    if (2 * v32 > v31)
                      v31 = 2 * v32;
                    if (v32 >= 0x555555555555555)
                      v33 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v33 = v31;
                    v65 = a4 + 2;
                    if (v33)
                      v34 = (char *)sub_20BDE4FF4((uint64_t)(a4 + 2), v33);
                    else
                      v34 = 0;
                    v44 = &v34[24 * v30];
                    v61 = v34;
                    v62 = v44;
                    v64 = &v34[24 * v33];
                    v45 = *(_OWORD *)__p;
                    *((_QWORD *)v44 + 2) = v58;
                    *(_OWORD *)v44 = v45;
                    __p[1] = 0;
                    v58 = 0;
                    __p[0] = 0;
                    v63 = v44 + 24;
                    sub_20BDF34C0(a4, &v61);
                    v46 = a4[1];
                    sub_20BDF3648((uint64_t)&v61);
                    v47 = SHIBYTE(v58);
                    a4[1] = v46;
                    if ((v47 & 0x80000000) == 0)
                      goto LABEL_9;
LABEL_57:
                    operator delete(__p[0]);
                    goto LABEL_9;
                  }
                  v21 = *(_OWORD *)__p;
                  *(_QWORD *)(v20 + 16) = v58;
                  *(_OWORD *)v20 = v21;
                  a4[1] = v20 + 24;
                }
              }
              else if (v15 == 0x4000)
              {
                if (a2)
                {
                  sub_20BDDC0E4(__p, v66.d_name);
                  v17 = a2[1];
                  v16 = a2[2];
                  if (v17 >= v16)
                  {
                    v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a2) >> 3);
                    v26 = v25 + 1;
                    if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
                      sub_20BDDF694();
                    v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a2) >> 3);
                    if (2 * v27 > v26)
                      v26 = 2 * v27;
                    if (v27 >= 0x555555555555555)
                      v28 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v28 = v26;
                    v65 = a2 + 2;
                    if (v28)
                      v29 = (char *)sub_20BDE4FF4((uint64_t)(a2 + 2), v28);
                    else
                      v29 = 0;
                    v40 = &v29[24 * v25];
                    v61 = v29;
                    v62 = v40;
                    v64 = &v29[24 * v28];
                    v41 = *(_OWORD *)__p;
                    *((_QWORD *)v40 + 2) = v58;
                    *(_OWORD *)v40 = v41;
                    __p[1] = 0;
                    v58 = 0;
                    __p[0] = 0;
                    v63 = v40 + 24;
                    sub_20BDF34C0(a2, &v61);
                    v42 = a2[1];
                    sub_20BDF3648((uint64_t)&v61);
                    v43 = SHIBYTE(v58);
                    a2[1] = v42;
                    if ((v43 & 0x80000000) == 0)
                      goto LABEL_9;
                    goto LABEL_57;
                  }
                  v18 = *(_OWORD *)__p;
                  *(_QWORD *)(v17 + 16) = v58;
                  *(_OWORD *)v17 = v18;
                  a2[1] = v17 + 24;
                }
              }
              else if (a3)
              {
                sub_20BDDC0E4(__p, v66.d_name);
                v23 = a3[1];
                v22 = a3[2];
                if (v23 >= v22)
                {
                  v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a3) >> 3);
                  v36 = v35 + 1;
                  if (v35 + 1 > 0xAAAAAAAAAAAAAAALL)
                    sub_20BDDF694();
                  v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a3) >> 3);
                  if (2 * v37 > v36)
                    v36 = 2 * v37;
                  if (v37 >= 0x555555555555555)
                    v38 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v38 = v36;
                  v65 = a3 + 2;
                  if (v38)
                    v39 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 2), v38);
                  else
                    v39 = 0;
                  v48 = &v39[24 * v35];
                  v61 = v39;
                  v62 = v48;
                  v64 = &v39[24 * v38];
                  v49 = *(_OWORD *)__p;
                  *((_QWORD *)v48 + 2) = v58;
                  *(_OWORD *)v48 = v49;
                  __p[1] = 0;
                  v58 = 0;
                  __p[0] = 0;
                  v63 = v48 + 24;
                  sub_20BDF34C0(a3, &v61);
                  v50 = a3[1];
                  sub_20BDF3648((uint64_t)&v61);
                  v51 = SHIBYTE(v58);
                  a3[1] = v50;
                  if ((v51 & 0x80000000) == 0)
                    goto LABEL_9;
                  goto LABEL_57;
                }
                v24 = *(_OWORD *)__p;
                *(_QWORD *)(v23 + 16) = v58;
                *(_OWORD *)v23 = v24;
                a3[1] = v23 + 24;
              }
            }
          }
        }
LABEL_9:
        v13 = readdir_r(v10, &v66, &v60);
        if (v60)
          v14 = v13 == 0;
        else
          v14 = 0;
      }
      while (v14);
    }
    closedir(v10);
  }
  else if (a5)
  {
    v53 = __error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v53, &v61);
    if (SHIBYTE(v63) >= 0)
      v56 = &v61;
    else
      v56 = v61;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"opendir failed: %s", v54, v55, v56);
    if (*(char *)(a5 + 23) < 0)
      operator delete(*(void **)a5);
    *(_OWORD *)a5 = *(_OWORD *)&v59.st_dev;
    *(_QWORD *)(a5 + 16) = *(_QWORD *)&v59.st_uid;
    HIBYTE(v59.st_gid) = 0;
    LOBYTE(v59.st_dev) = 0;
    if (SHIBYTE(v63) < 0)
      operator delete(v61);
  }
  return v10 != 0;
}

void sub_20BEC7510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfWalkDirs(const char *a1, const char *a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v6;
  uint64_t v7;
  int v8;
  uint64_t *v12;
  uint64_t v13;
  void *__p[2];
  char v15;
  stat v16;

  v6 = (uint64_t *)a1;
  v7 = *((unsigned __int8 *)a1 + 23);
  v8 = (char)v7;
  if ((v7 & 0x80u) != 0)
    v7 = *((_QWORD *)a1 + 1);
  if (!v7)
    goto LABEL_22;
  if (v8 < 0)
    a1 = *(const char **)a1;
  if (!stat(a1, &v16) && (v16.st_mode & 0xF000) == 0x4000)
  {
    memset(&v16, 0, 32);
    LODWORD(v16.st_atimespec.tv_sec) = 1065353216;
    pxrInternal__aapl__pxrReserved__::TfNormPath(__p, v6, 0);
    sub_20BEC76F0((uint64_t)__p, (uint64_t)a2, (uint64_t)a3, a4, a5, &v16);
    if (v15 < 0)
      operator delete(__p[0]);
    sub_20BEB3FA4((uint64_t)&v16);
  }
  else
  {
LABEL_22:
    if (*(_QWORD *)(a4 + 24))
    {
      if (*((char *)v6 + 23) >= 0)
        v12 = v6;
      else
        v12 = (uint64_t *)*v6;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s is not a directory", a2, a3, v12);
      v13 = *(_QWORD *)(a4 + 24);
      if (!v13)
        sub_20BE9E974();
      (*(void (**)(uint64_t, uint64_t *, stat *))(*(_QWORD *)v13 + 48))(v13, v6, &v16);
      if (SHIBYTE(v16.st_gid) < 0)
        operator delete(*(void **)&v16.st_dev);
    }
  }
}

void sub_20BEC76AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  sub_20BEB3FA4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEC76F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v10;
  std::string *v11;
  __int128 *v12;
  size_t v13;
  std::string *v14;
  const void *v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type size;
  std::string *v19;
  __int128 v20;
  char *v21;
  std::string::size_type v22;
  std::string *p_p;
  _BOOL4 v24;
  __int128 *v25;
  __int128 v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *i;
  size_t v34;
  std::string *v35;
  const void *v36;
  int v37;
  const std::string::value_type *v38;
  std::string::size_type v39;
  std::string *v40;
  __int128 v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  std::string v48;
  void *v49[2];
  int64_t v50;
  std::string __p;
  stat v52;
  std::string *v53;
  __int128 *v54;
  uint64_t v55;
  uint64_t v56;
  std::string *v57;
  unint64_t v58;
  __int128 *v59;
  __int128 *v60;
  unint64_t v61;

  if (a6
    || (*(_QWORD *)&v52.st_dev = "tf/fileUtils.cpp",
        v52.st_ino = (__darwin_ino64_t)"Tf_WalkDirsRec",
        *(_QWORD *)&v52.st_uid = 507,
        *(_QWORD *)&v52.st_rdev = "BOOL pxrInternal__aapl__pxrReserved__::Tf_WalkDirsRec(const string &, const TfWalkFunc"
                                  "tion &, BOOL, const TfWalkErrorHandler &, BOOL, Tf_FileIdSet *)",
        LOBYTE(v52.st_atimespec.tv_sec) = 0,
        v44 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v52, "linkTargets", 0) & 1) != 0))
  {
    v59 = 0;
    v60 = 0;
    v61 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v53 = 0;
    v54 = 0;
    v55 = 0;
    memset(&v52, 0, 24);
    if (!pxrInternal__aapl__pxrReserved__::TfReadDir((const char *)a1, (uint64_t *)&v59, &v56, (uint64_t *)&v53, (uint64_t)&v52))
    {
      v10 = *(_QWORD *)(a4 + 24);
      if (v10)
        (*(void (**)(uint64_t, uint64_t, stat *))(*(_QWORD *)v10 + 48))(v10, a1, &v52);
    }
    if (SHIBYTE(v52.st_gid) < 0)
    {
      operator delete(*(void **)&v52.st_dev);
      if ((_DWORD)a5)
      {
LABEL_7:
        v11 = v53;
        v12 = v54;
        while (v11 != (std::string *)v12)
        {
          if (*(char *)(a1 + 23) >= 0)
            v13 = *(unsigned __int8 *)(a1 + 23);
          else
            v13 = *(_QWORD *)(a1 + 8);
          sub_20BDF6BDC((uint64_t)&v48, v13 + 1);
          if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v14 = &v48;
          else
            v14 = (std::string *)v48.__r_.__value_.__r.__words[0];
          if (v13)
          {
            if (*(char *)(a1 + 23) >= 0)
              v15 = (const void *)a1;
            else
              v15 = *(const void **)a1;
            memmove(v14, v15, v13);
          }
          *(_WORD *)((char *)&v14->__r_.__value_.__l.__data_ + v13) = 47;
          v16 = SHIBYTE(v11->__r_.__value_.__r.__words[2]);
          if (v16 >= 0)
            v17 = (const std::string::value_type *)v11;
          else
            v17 = (const std::string::value_type *)v11->__r_.__value_.__r.__words[0];
          if (v16 >= 0)
            size = HIBYTE(v11->__r_.__value_.__r.__words[2]);
          else
            size = v11->__r_.__value_.__l.__size_;
          v19 = std::string::append(&v48, v17, size);
          v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v50 = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)v49 = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          if (v50 >= 0)
            v21 = (char *)v49;
          else
            v21 = (char *)v49[0];
          sub_20BDDC0E4(&__p, v21);
          v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v22 = __p.__r_.__value_.__l.__size_;
          if (v22)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            v24 = stat((const char *)p_p, &v52) == 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_35:
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v24 = 0;
            if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
              goto LABEL_35;
          }
          if (SHIBYTE(v50) < 0)
            operator delete(v49[0]);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v48.__r_.__value_.__l.__data_);
            if (!v24)
            {
LABEL_48:
              v27 = v57;
              if ((unint64_t)v57 >= v58)
                goto LABEL_55;
              if ((SHIBYTE(v11->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_53;
              goto LABEL_50;
            }
          }
          else if (!v24)
          {
            goto LABEL_48;
          }
          if ((v52.st_mode & 0xF000) == 0x4000)
          {
            LODWORD(__p.__r_.__value_.__l.__data_) = v52.st_dev;
            __p.__r_.__value_.__l.__size_ = v52.st_ino;
            if (!sub_20BEC89D0(a6, (int *)&__p))
            {
              sub_20BEC8ABC((uint64_t)a6, (int *)&__p, &__p);
              v25 = v60;
              if ((unint64_t)v60 >= v61)
              {
                v30 = (__int128 *)sub_20BE4EE50((uint64_t *)&v59, (__int128 *)v11);
              }
              else
              {
                if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_20BDDBFAC(v60, v11->__r_.__value_.__l.__data_, v11->__r_.__value_.__l.__size_);
                }
                else
                {
                  v26 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
                  *((_QWORD *)v60 + 2) = *((_QWORD *)&v11->__r_.__value_.__l + 2);
                  *v25 = v26;
                }
                v30 = (__int128 *)((char *)v25 + 24);
              }
              v60 = v30;
            }
            goto LABEL_57;
          }
          v27 = v57;
          if ((unint64_t)v57 >= v58)
          {
LABEL_55:
            v29 = (std::string *)sub_20BE4EE50(&v56, (__int128 *)v11);
            goto LABEL_56;
          }
          if ((SHIBYTE(v11->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_53:
            v28 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
            v27->__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
            goto LABEL_54;
          }
LABEL_50:
          sub_20BDDBFAC(v57, v11->__r_.__value_.__l.__data_, v11->__r_.__value_.__l.__size_);
LABEL_54:
          v29 = v27 + 1;
LABEL_56:
          v57 = v29;
LABEL_57:
          ++v11;
        }
LABEL_66:
        if ((_DWORD)a3)
        {
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
          v31 = *(_QWORD *)(a2 + 24);
          if (!v31)
            goto LABEL_102;
          if (!(*(unsigned int (**)(uint64_t, uint64_t, std::string *, uint64_t *))(*(_QWORD *)v31 + 48))(v31, a1, &__p, &v56))goto LABEL_97;
        }
        v32 = (uint64_t)v59;
        for (i = v60; (__int128 *)v32 != i; v32 += 24)
        {
          if (*(char *)(a1 + 23) >= 0)
            v34 = *(unsigned __int8 *)(a1 + 23);
          else
            v34 = *(_QWORD *)(a1 + 8);
          sub_20BDF6BDC((uint64_t)&__p, v34 + 1);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v35 = &__p;
          else
            v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
          if (v34)
          {
            if (*(char *)(a1 + 23) >= 0)
              v36 = (const void *)a1;
            else
              v36 = *(const void **)a1;
            memmove(v35, v36, v34);
          }
          *(_WORD *)((char *)&v35->__r_.__value_.__l.__data_ + v34) = 47;
          v37 = *(char *)(v32 + 23);
          if (v37 >= 0)
            v38 = (const std::string::value_type *)v32;
          else
            v38 = *(const std::string::value_type **)v32;
          if (v37 >= 0)
            v39 = *(unsigned __int8 *)(v32 + 23);
          else
            v39 = *(_QWORD *)(v32 + 8);
          v40 = std::string::append(&__p, v38, v39);
          v41 = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
          *(_QWORD *)&v52.st_uid = *((_QWORD *)&v40->__r_.__value_.__l + 2);
          *(_OWORD *)&v52.st_dev = v41;
          v40->__r_.__value_.__l.__size_ = 0;
          v40->__r_.__value_.__r.__words[2] = 0;
          v40->__r_.__value_.__r.__words[0] = 0;
          v42 = sub_20BEC76F0(&v52, a2, a3, a4, a5, a6);
          if (SHIBYTE(v52.st_gid) < 0)
            operator delete(*(void **)&v52.st_dev);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if ((v42 & 1) == 0)
            goto LABEL_97;
        }
        if ((a3 & 1) != 0)
        {
LABEL_96:
          v44 = 1;
LABEL_98:
          *(_QWORD *)&v52.st_dev = &v53;
          sub_20BDE5038((void ***)&v52);
          *(_QWORD *)&v52.st_dev = &v56;
          sub_20BDE5038((void ***)&v52);
          *(_QWORD *)&v52.st_dev = &v59;
          sub_20BDE5038((void ***)&v52);
          return v44;
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v59;
        v43 = *(_QWORD *)(a2 + 24);
        if (v43)
        {
          if ((*(unsigned int (**)(uint64_t, uint64_t, std::string *, uint64_t *))(*(_QWORD *)v43 + 48))(v43, a1, &__p, &v56))
          {
            goto LABEL_96;
          }
LABEL_97:
          v44 = 0;
          goto LABEL_98;
        }
LABEL_102:
        sub_20BE9E974();
      }
    }
    else if ((_DWORD)a5)
    {
      goto LABEL_7;
    }
    sub_20BEC8D0C(&v56, v57, v53, v54, 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v53) >> 3));
    goto LABEL_66;
  }
  return v44;
}

void sub_20BEC7C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;
  uint64_t v36;

  *(_QWORD *)(v36 - 112) = v35;
  __p = (void *)(v36 - 168);
  sub_20BDE5038((void ***)&__p);
  __p = (void *)(v36 - 144);
  sub_20BDE5038((void ***)&__p);
  __p = (void *)(v36 - 120);
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

char *pxrInternal__aapl__pxrReserved__::TfRmTree(const char *a1, uint64_t a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t (*v14)(const void **, uint64_t, uint64_t *, uint64_t);
  _BYTE v15[24];
  _BYTE *v16;
  char v17[24];
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v14 = sub_20BEC7F5C;
  v4 = v15;
  sub_20BE9E6E8((uint64_t)v15, a2);
  v18 = 0;
  v5 = (char *)operator new(0x30uLL);
  *(_QWORD *)v5 = &unk_24C51B830;
  *((_QWORD *)v5 + 1) = sub_20BEC7F5C;
  sub_20BEC9228((uint64_t)(v5 + 16), (uint64_t)v15);
  v18 = v5;
  if (*(_QWORD *)(a2 + 24))
  {
    sub_20BE9E6E8((uint64_t)v12, a2);
  }
  else
  {
    v12[0] = &unk_24C51B780;
    v12[1] = sub_20BEC8260;
    v13 = v12;
  }
  pxrInternal__aapl__pxrReserved__::TfWalkDirs(a1, v17, 0, (uint64_t)v12, 0);
  v7 = v13;
  if (v13 == v12)
  {
    v8 = 4;
    v7 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_9;
    v8 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v7 + 8 * v8))(v7, v6);
LABEL_9:
  result = v18;
  if (v18 == v17)
  {
    v10 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_14;
    v10 = 5;
  }
  result = (char *)(*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)result + 8 * v10))(result, v6);
LABEL_14:
  if (v16 == v15)
  {
    v11 = 4;
  }
  else
  {
    if (!v16)
      return result;
    v11 = 5;
    v4 = v16;
  }
  return (char *)(*(uint64_t (**)(_QWORD *))(*v4 + 8 * v11))(v4);
}

void sub_20BEC7EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  _QWORD *v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v23 = a21;
  if (a21 == &a18)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (a17 == v21)
  {
    v25 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v25 = 5;
    v21 = a17;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v25))(v21);
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEC7F5C(const void **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t i;
  size_t v8;
  std::string *v9;
  const void *v10;
  int v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  void **v17;
  int *v18;
  const char *v19;
  char *v20;
  void **v21;
  uint64_t v22;
  const char *v23;
  const void *v24;
  int *v25;
  const char *v26;
  char *v27;
  std::string *v28;
  uint64_t v29;
  void *__p[2];
  char v32;
  std::string v33;
  void *v34[2];
  int64_t v35;

  for (i = *a3; i != a3[1]; i += 24)
  {
    if (*((char *)a1 + 23) >= 0)
      v8 = *((unsigned __int8 *)a1 + 23);
    else
      v8 = (size_t)a1[1];
    sub_20BDF6BDC((uint64_t)&v33, v8 + 1);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v33;
    else
      v9 = (std::string *)v33.__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (*((char *)a1 + 23) >= 0)
        v10 = a1;
      else
        v10 = *a1;
      memmove(v9, v10, v8);
    }
    *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 47;
    v11 = *(char *)(i + 23);
    if (v11 >= 0)
      v12 = (const std::string::value_type *)i;
    else
      v12 = *(const std::string::value_type **)i;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(i + 23);
    else
      v13 = *(_QWORD *)(i + 8);
    v14 = std::string::append(&v33, v12, v13);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v35 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)v34 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (v35 >= 0)
      v16 = v34;
    else
      v16 = (void **)v34[0];
    if (unlink((const char *)v16) && *(_QWORD *)(a4 + 24))
    {
      if (v35 >= 0)
        v17 = v34;
      else
        v17 = (void **)v34[0];
      v18 = __error();
      pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v18, __p);
      v21 = __p;
      if (v32 < 0)
        v21 = (void **)__p[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"ArchUnlinkFile failed for '%s': %s", v19, v20, v17, v21);
      v22 = *(_QWORD *)(a4 + 24);
      if (!v22)
        sub_20BE9E974();
      (*(void (**)(uint64_t, const void **, std::string *))(*(_QWORD *)v22 + 48))(v22, a1, &v33);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (v32 < 0)
        operator delete(__p[0]);
    }
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (*((char *)a1 + 23) >= 0)
    v23 = (const char *)a1;
  else
    v23 = (const char *)*a1;
  if (rmdir(v23) && *(_QWORD *)(a4 + 24))
  {
    if (*((char *)a1 + 23) >= 0)
      v24 = a1;
    else
      v24 = *a1;
    v25 = __error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v25, &v33);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &v33;
    else
      v28 = (std::string *)v33.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"rmdir failed for '%s': %s", v26, v27, v24, v28);
    v29 = *(_QWORD *)(a4 + 24);
    if (!v29)
      sub_20BE9E974();
    (*(void (**)(uint64_t, const void **, void **))(*(_QWORD *)v29 + 48))(v29, a1, v34);
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_20BEC81E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BEC8260(uint64_t a1, uint64_t a2)
{
  const char *v2;
  const char *v3;
  _QWORD v4[4];
  char v5;

  v4[0] = "tf/fileUtils.cpp";
  v4[1] = "Tf_RmTreeRaiseErrors";
  v4[2] = 617;
  v4[3] = "void pxrInternal__aapl__pxrReserved__::Tf_RmTreeRaiseErrors(const string &, const string &)";
  v5 = 0;
  if (*(char *)(a1 + 23) >= 0)
    v2 = (const char *)a1;
  else
    v2 = *(const char **)a1;
  if (*(char *)(a2 + 23) >= 0)
    v3 = (const char *)a2;
  else
    v3 = *(const char **)a2;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 3, (pxrInternal__aapl__pxrReserved__ *)"failed to remove '%s': %s", v2, v3);
}

char *pxrInternal__aapl__pxrReserved__::TfListDir@<X0>(const char *a1@<X0>, char a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  char *result;
  uint64_t v10;
  _BYTE v11[24];
  _BYTE *v12;
  char v13[24];
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x20uLL);
  *v6 = &unk_24C51B8D8;
  v6[1] = sub_20BEC8468;
  v6[2] = a3;
  *((_BYTE *)v6 + 24) = a2;
  v14 = (char *)v6;
  v12 = 0;
  pxrInternal__aapl__pxrReserved__::TfWalkDirs(a1, v13, (char *)1, (uint64_t)v11, 0);
  v7 = v12;
  if (v12 == v11)
  {
    v8 = 4;
    v7 = v11;
  }
  else
  {
    if (!v12)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  result = v14;
  if (v14 == v13)
  {
    v10 = 4;
    result = v13;
  }
  else
  {
    if (!v14)
      return result;
    v10 = 5;
  }
  return (char *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v10))();
}

void sub_20BEC83EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  sub_20BDE5038(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEC8468(const void **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, unsigned int a5)
{
  uint64_t i;
  size_t v10;
  std::string *v11;
  const void *v12;
  int v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  std::string::size_type v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t j;
  size_t v33;
  std::string *v34;
  const void *v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  char v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  std::string v53;
  char *v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t *v58;
  std::string v59;
  _QWORD v60[3];

  v60[2] = *MEMORY[0x24BDAC8D0];
  for (i = *a2; i != a2[1]; i += 24)
  {
    if (*((char *)a1 + 23) >= 0)
      v10 = *((unsigned __int8 *)a1 + 23);
    else
      v10 = (size_t)a1[1];
    sub_20BDF6BDC((uint64_t)&v59, v10 + 1);
    if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v59;
    else
      v11 = (std::string *)v59.__r_.__value_.__r.__words[0];
    if (v10)
    {
      if (*((char *)a1 + 23) >= 0)
        v12 = a1;
      else
        v12 = *a1;
      memmove(v11, v12, v10);
    }
    *(_WORD *)((char *)&v11->__r_.__value_.__l.__data_ + v10) = 47;
    v13 = *(char *)(i + 23);
    if (v13 >= 0)
      v14 = (const std::string::value_type *)i;
    else
      v14 = *(const std::string::value_type **)i;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(i + 23);
    else
      v15 = *(_QWORD *)(i + 8);
    v16 = std::string::append(&v59, v14, v15);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v53.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v53, "/");
    v19 = v18->__r_.__value_.__r.__words[0];
    v60[0] = v18->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v60 + 7) = *(std::string::size_type *)((char *)&v18->__r_.__value_.__r.__words[1] + 7);
    v20 = HIBYTE(v18->__r_.__value_.__r.__words[2]);
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v21 = a4[1];
    v22 = a4[2];
    if (v21 >= v22)
    {
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a4) >> 3);
      v26 = v25 + 1;
      if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a4) >> 3);
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0x555555555555555)
        v28 = 0xAAAAAAAAAAAAAAALL;
      else
        v28 = v26;
      v58 = a4 + 2;
      if (v28)
        v29 = (char *)sub_20BDE4FF4((uint64_t)(a4 + 2), v28);
      else
        v29 = 0;
      v30 = &v29[24 * v25];
      v54 = v29;
      v55 = v30;
      v57 = &v29[24 * v28];
      v31 = v60[0];
      *(_QWORD *)v30 = v19;
      *((_QWORD *)v30 + 1) = v31;
      *(_QWORD *)(v30 + 15) = *(_QWORD *)((char *)v60 + 7);
      v30[23] = v20;
      v56 = v30 + 24;
      sub_20BDF34C0(a4, &v54);
      v24 = a4[1];
      sub_20BDF3648((uint64_t)&v54);
    }
    else
    {
      v23 = v60[0];
      *(_QWORD *)v21 = v19;
      *(_QWORD *)(v21 + 8) = v23;
      *(_QWORD *)(v21 + 15) = *(_QWORD *)((char *)v60 + 7);
      *(_BYTE *)(v21 + 23) = v20;
      v24 = v21 + 24;
      a4[1] = v21 + 24;
    }
    a4[1] = v24;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
  }
  for (j = *a3; j != a3[1]; j += 24)
  {
    if (*((char *)a1 + 23) >= 0)
      v33 = *((unsigned __int8 *)a1 + 23);
    else
      v33 = (size_t)a1[1];
    sub_20BDF6BDC((uint64_t)&v53, v33 + 1);
    if ((v53.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v53;
    else
      v34 = (std::string *)v53.__r_.__value_.__r.__words[0];
    if (v33)
    {
      if (*((char *)a1 + 23) >= 0)
        v35 = a1;
      else
        v35 = *a1;
      memmove(v34, v35, v33);
    }
    *(_WORD *)((char *)&v34->__r_.__value_.__l.__data_ + v33) = 47;
    v36 = *(char *)(j + 23);
    if (v36 >= 0)
      v37 = (const std::string::value_type *)j;
    else
      v37 = *(const std::string::value_type **)j;
    if (v36 >= 0)
      v38 = *(unsigned __int8 *)(j + 23);
    else
      v38 = *(_QWORD *)(j + 8);
    v39 = std::string::append(&v53, v37, v38);
    v40 = v39->__r_.__value_.__r.__words[0];
    v59.__r_.__value_.__r.__words[0] = v39->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v39->__r_.__value_.__r.__words[1] + 7);
    v41 = HIBYTE(v39->__r_.__value_.__r.__words[2]);
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    v42 = a4[1];
    v43 = a4[2];
    if (v42 >= v43)
    {
      v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v42 - *a4) >> 3);
      v46 = v45 + 1;
      if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v43 - *a4) >> 3);
      if (2 * v47 > v46)
        v46 = 2 * v47;
      if (v47 >= 0x555555555555555)
        v48 = 0xAAAAAAAAAAAAAAALL;
      else
        v48 = v46;
      v58 = a4 + 2;
      if (v48)
        v49 = (char *)sub_20BDE4FF4((uint64_t)(a4 + 2), v48);
      else
        v49 = 0;
      v50 = &v49[24 * v45];
      v54 = v49;
      v55 = v50;
      v57 = &v49[24 * v48];
      *(_QWORD *)v50 = v40;
      *((_QWORD *)v50 + 1) = v59.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v50 + 15) = *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 7);
      v50[23] = v41;
      v56 = v50 + 24;
      sub_20BDF34C0(a4, &v54);
      v44 = a4[1];
      sub_20BDF3648((uint64_t)&v54);
    }
    else
    {
      *(_QWORD *)v42 = v40;
      *(_QWORD *)(v42 + 8) = v59.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v42 + 15) = *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 7);
      *(_BYTE *)(v42 + 23) = v41;
      v44 = v42 + 24;
      a4[1] = v42 + 24;
    }
    a4[1] = v44;
    if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v53.__r_.__value_.__l.__data_);
  }
  return a5;
}

void sub_20BEC88B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void *v27;
  int v28;

  if (v28 < 0)
    operator delete(v27);
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfTouchFile(const char *a1, int a2)
{
  const char *v2;
  int v3;
  const char *v4;

  v2 = a1;
  if (a2)
  {
    if (a1[23] < 0)
      a1 = *(const char **)a1;
    v3 = open(a1, 131589, 438);
    if (v3 == -1)
      return 0;
    close(v3);
  }
  if (v2[23] >= 0)
    v4 = v2;
  else
    v4 = *(const char **)v2;
  return utimes(v4, 0) == 0;
}

uint64_t *sub_20BEC89D0(_QWORD *a1, int *a2)
{
  int8x8_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint8x8_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = *a2;
  v4 = *((_QWORD *)a2 + 1);
  v5 = bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55 * (v4 + ((unint64_t)(v4 + v3 + (v4 + v3) * (v4 + v3)) >> 1))));
  v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    v7 = v5;
    if (v5 >= *(_QWORD *)&v2)
      v7 = v5 % *(_QWORD *)&v2;
  }
  else
  {
    v7 = v5 & (*(_QWORD *)&v2 - 1);
  }
  v8 = *(uint64_t ***)(*a1 + 8 * v7);
  if (!v8)
    return 0;
  for (result = *v8; result; result = (uint64_t *)*result)
  {
    v10 = result[1];
    if (v10 == v5)
    {
      if (*((_DWORD *)result + 4) == (_DWORD)v3 && result[3] == v4)
        return result;
    }
    else
    {
      if (v6.u32[0] > 1uLL)
      {
        if (v10 >= *(_QWORD *)&v2)
          v10 %= *(_QWORD *)&v2;
      }
      else
      {
        v10 &= *(_QWORD *)&v2 - 1;
      }
      if (v10 != v7)
        return 0;
    }
  }
  return result;
}

_QWORD *sub_20BEC8ABC(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  void **v11;
  _QWORD *v12;
  unint64_t v13;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = *a2;
  v7 = *((_QWORD *)a2 + 1);
  v8 = bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55 * (v7 + ((unint64_t)(v7 + v6 + (v7 + v6) * (v7 + v6)) >> 1))));
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v9)
        v3 = v8 % v9;
    }
    else
    {
      v3 = v8 & (v9 - 1);
    }
    v11 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        do
        {
          v13 = v12[1];
          if (v13 == v8)
          {
            if (*((_DWORD *)v12 + 4) == (_DWORD)v6 && v12[3] == v7)
              return v12;
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9)
                v13 %= v9;
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3)
              break;
          }
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
    }
  }
  v12 = operator new(0x20uLL);
  *v12 = 0;
  v12[1] = v8;
  *((_OWORD *)v12 + 1) = *a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *v12 = *v22;
LABEL_42:
    *v22 = v12;
    goto LABEL_43;
  }
  *v12 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(v21 + 8 * v3) = a1 + 16;
  if (*v12)
  {
    v23 = *(_QWORD *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v12;
}

void sub_20BEC8CF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *sub_20BEC8D0C(uint64_t *a1, std::string *a2, std::string *a3, __int128 *a4, uint64_t a5)
{
  std::string *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  __int128 *v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = (__int128 *)&a3[a5];
      }
      else
      {
        v21 = (__int128 *)(&a3->__r_.__value_.__l.__data_ + ((uint64_t)(v12 - (_QWORD)a2) >> 3));
        a1[1] = (uint64_t)sub_20BE759C4(v9, v21, a4, *(char **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_20BE752D4((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[a5]);
      sub_20BE75A80(a3, (std::string *)v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)sub_20BDE4FF4(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[24 * v15];
      v25 = v24;
      v26 = &v19[24 * v18];
      sub_20BEC8ECC(&v23, (__int128 *)a3, a5);
      v5 = (std::string *)sub_20BE753F0((uint64_t)a1, &v23, (__int128 *)v5);
      sub_20BDF3648((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_20BEC8EAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BEC8ECC(_QWORD *result, __int128 *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  v3 = result;
  v4 = result[2];
  if (a3)
  {
    v6 = v4 + 24 * a3;
    v7 = 24 * a3;
    do
    {
      if (*((char *)a2 + 23) < 0)
      {
        result = sub_20BDDBFAC((_BYTE *)v4, *(void **)a2, *((_QWORD *)a2 + 1));
      }
      else
      {
        v8 = *a2;
        *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v4 = v8;
      }
      v4 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_20BEC8F54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEC8F64(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_24C51B780;
  result[1] = v3;
  return result;
}

uint64_t sub_20BEC8F9C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_24C51B780;
  a2[1] = v2;
  return result;
}

uint64_t sub_20BEC8FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t sub_20BEC8FCC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51B800))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BEC9008()
{
  return &unk_24C51B800;
}

_QWORD *sub_20BEC9014(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_24C51B830;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20BEC9074(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)__p = &unk_24C51B830;
  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

_QWORD *sub_20BEC90D4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &unk_24C51B830;
  v2[1] = v3;
  sub_20BE9E6E8((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_20BEC911C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEC9130(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &unk_24C51B830;
  a2[1] = v2;
  return sub_20BE9E6E8((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *sub_20BEC9154(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_20BEC9188(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

uint64_t sub_20BEC91D8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  return sub_20BEC928C((uint64_t (**)(uint64_t, uint64_t, uint64_t, _BYTE *))(a1 + 8), a2, a3, a4);
}

uint64_t sub_20BEC91E0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51B8B0))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BEC921C()
{
  return &unk_24C51B8B0;
}

uint64_t sub_20BEC9228(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

uint64_t sub_20BEC928C(uint64_t (**a1)(uint64_t, uint64_t, uint64_t, _BYTE *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, _BYTE *);
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = *a3;
  sub_20BE9E6E8((uint64_t)v12, (uint64_t)(a1 + 1));
  v8 = v6(a2, v7, a4, v12);
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_5;
  }
  if (v13)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return v8;
}

void sub_20BEC9350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

__n128 sub_20BEC9398(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C51B8D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20BEC93DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C51B8D8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20BEC9408(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(a1 + 8))(a2, *a3, a4, *(_QWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
}

uint64_t sub_20BEC9428(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C51B948))
    return a1 + 8;
  else
    return 0;
}

void *sub_20BEC9464()
{
  return &unk_24C51B948;
}

void pxrInternal__aapl__pxrReserved__::TfGetenv(const char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  char v6;
  void *__p[2];
  uint64_t v8;

  pxrInternal__aapl__pxrReserved__::ArchGetEnv(a1, __p);
  v5 = (void *)HIBYTE(v8);
  v6 = HIBYTE(v8);
  if (v8 < 0)
    v5 = __p[1];
  if (v5)
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v8;
    return;
  }
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
    if ((v6 & 0x80) == 0)
      return;
    goto LABEL_7;
  }
  sub_20BDDBFAC((_BYTE *)a3, *(void **)a2, *(_QWORD *)(a2 + 8));
  if (v8 < 0)
LABEL_7:
    operator delete(__p[0]);
}

void sub_20BEC9508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetenvInt(const char *a1, uint64_t a2)
{
  std::string::size_type size;
  char v4;
  std::string __str;

  pxrInternal__aapl__pxrReserved__::ArchGetEnv(a1, &__str);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    a2 = std::stoi(&__str, 0, 10);
    v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v4 < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return a2;
}

void sub_20BEC9590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfGetenvBool(const char *a1, _BOOL8 a2)
{
  uint64_t v3;
  _BYTE *p_p;
  unsigned __int8 *v5;
  uint64_t v6;
  void *__p;
  uint64_t v11;
  unsigned __int8 v12;

  pxrInternal__aapl__pxrReserved__::ArchGetEnv(a1, &__p);
  if ((char)v12 < 0)
  {
    v3 = v11;
    if (!v11)
      goto LABEL_40;
    p_p = __p;
  }
  else
  {
    v3 = v12;
    if (!v12)
      return a2;
    p_p = &__p;
  }
  do
  {
    *p_p = __tolower((char)*p_p);
    ++p_p;
    --v3;
  }
  while (v3);
  if ((char)v12 < 0)
  {
    v6 = v11;
    if (v11 == 3)
    {
      if (*(_WORD *)__p == 25977 && *((_BYTE *)__p + 2) == 115)
        goto LABEL_36;
      v6 = v11;
    }
    else if (v11 == 4 && *(_DWORD *)__p == 1702195828)
    {
LABEL_33:
      a2 = 1;
      if ((v12 & 0x80) != 0)
        goto LABEL_40;
      return a2;
    }
    if (v6 != 2)
    {
LABEL_24:
      if (v6 == 1)
      {
        v5 = (unsigned __int8 *)__p;
        goto LABEL_39;
      }
      a2 = 0;
LABEL_40:
      operator delete(__p);
      return a2;
    }
    if (*(_WORD *)__p != 28271)
    {
      v6 = v11;
      goto LABEL_24;
    }
LABEL_36:
    a2 = 1;
    goto LABEL_40;
  }
  v5 = (unsigned __int8 *)&__p;
  switch(v12)
  {
    case 1u:
      break;
    case 2u:
      goto LABEL_9;
    case 3u:
      if ((unsigned __int16)__p == 25977 && BYTE2(__p) == 115)
        goto LABEL_33;
      if (v12 == 1)
        goto LABEL_38;
      if (v12 != 2)
        return 0;
LABEL_9:
      if ((unsigned __int16)__p == 28271)
        goto LABEL_33;
      if (v12 != 1)
        return 0;
LABEL_38:
      v5 = (unsigned __int8 *)&__p;
      break;
    case 4u:
      return (_DWORD)__p == 1702195828;
    default:
      return 0;
  }
LABEL_39:
  a2 = *v5 == 49;
  if ((v12 & 0x80) != 0)
    goto LABEL_40;
  return a2;
}

void sub_20BEC9770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double pxrInternal__aapl__pxrReserved__::TfGetenvDouble(const char *a1, double a2)
{
  std::string::size_type size;
  char v4;
  std::string __str;

  pxrInternal__aapl__pxrReserved__::ArchGetEnv(a1, &__str);
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    a2 = std::stod(&__str, 0);
    v4 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v4 < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return a2;
}

void sub_20BEC97FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes(pxrInternal__aapl__pxrReserved__::Tf_HashState *this, pxrInternal__aapl__pxrReserved__ *a2, char *a3)
{
  unint64_t result;

  result = pxrInternal__aapl__pxrReserved__::ArchHash64(a2, a3, *(_QWORD *)this);
  *(_QWORD *)this = result;
  *((_BYTE *)this + 8) = 1;
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfHashCharPtr::operator()(uint64_t a1, uint64_t a2)
{
  return bswap64(0x9E3779B97F4A7C55 * a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfHashCString::operator()(int a1, char *__s)
{
  const char *v3;

  if (!__s)
    return 0;
  v3 = (const char *)strlen(__s);
  return pxrInternal__aapl__pxrReserved__::ArchHash((pxrInternal__aapl__pxrReserved__ *)__s, v3);
}

BOOL pxrInternal__aapl__pxrReserved__::TfEqualCString::operator()(int a1, char *__s1, char *__s2)
{
  return strcmp(__s1, __s2) == 0;
}

std::string *pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::_MatchString::_MatchString(std::string *__dst, __int128 *a2)
{
  __int128 v3;
  std::string::size_type v4;
  std::string::size_type size;
  std::string::size_type v6;
  int v7;

  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    __dst->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v3;
  }
  LOWORD(__dst[1].__r_.__value_.__l.__data_) = 1;
  v4 = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(__dst->__r_.__value_.__r.__words[2]) < 0)
  {
    size = __dst->__r_.__value_.__l.__size_;
    if (!size)
      return __dst;
  }
  else
  {
    if (!*((_BYTE *)&__dst->__r_.__value_.__s + 23))
      return __dst;
    size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
  }
  v6 = size - 1;
  if ((v4 & 0x80) != 0)
  {
    if (*(_BYTE *)(__dst->__r_.__value_.__r.__words[0] + v6) != 42)
      goto LABEL_16;
    __dst[1].__r_.__value_.__s.__data_[1] = 1;
    v4 = __dst->__r_.__value_.__l.__size_;
LABEL_13:
    std::string::resize(__dst, v4 - 1, 0);
    if ((SHIBYTE(__dst->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (!*((_BYTE *)&__dst->__r_.__value_.__s + 23))
        return __dst;
      goto LABEL_15;
    }
LABEL_16:
    if (!__dst->__r_.__value_.__l.__size_)
      return __dst;
    v7 = *(unsigned __int8 *)__dst->__r_.__value_.__l.__data_;
    goto LABEL_18;
  }
  if (__dst->__r_.__value_.__s.__data_[v6] == 42)
  {
    __dst[1].__r_.__value_.__s.__data_[1] = 1;
    goto LABEL_13;
  }
LABEL_15:
  v7 = __dst->__r_.__value_.__s.__data_[0];
LABEL_18:
  if (v7 == 45)
  {
    __dst[1].__r_.__value_.__s.__data_[0] = 0;
LABEL_21:
    std::string::erase(__dst, 0, 1uLL);
    return __dst;
  }
  if (v7 == 43)
    goto LABEL_21;
  return __dst;
}

void sub_20BEC99E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Tf_MallocTagStringMatchTable(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  return this;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Tf_MallocTagStringMatchTable(_QWORD *a1, unsigned __int8 *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::SetMatchList((uint64_t)a1, a2);
  return a1;
}

void sub_20BEC9A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BED2E10((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::SetMatchList(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  char *v5;
  const std::string *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  std::string v20;
  std::string __p;
  __int16 v22;
  __int128 i;
  __int128 v24;
  void **v25[5];

  sub_20BED2E50((uint64_t *)a1);
  pxrInternal__aapl__pxrReserved__::TfStringTokenize(a2, ",\t\n", &v24);
  for (i = v24; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BEC9CF0(&i))
  {
    v6 = (const std::string *)sub_20BEC9C74((uint64_t *)&i, v4, v5);
    pxrInternal__aapl__pxrReserved__::TfStringTrim(" ", v6, &v20);
    pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::_MatchString::_MatchString(&__p, (__int128 *)&v20);
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v7 >= v8)
    {
      v10 = (uint64_t)(v7 - *(_QWORD *)a1) >> 5;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 59)
        sub_20BDDF694();
      v12 = v8 - *(_QWORD *)a1;
      if (v12 >> 4 > v11)
        v11 = v12 >> 4;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
        v13 = 0x7FFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      v25[4] = (void **)(a1 + 16);
      v14 = (void **)sub_20BED2F10(a1 + 16, v13);
      v15 = &v14[4 * v10];
      v25[0] = v14;
      v25[1] = v15;
      v25[3] = &v14[4 * v16];
      v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v15[2] = (void *)__p.__r_.__value_.__r.__words[2];
      *(_OWORD *)v15 = v17;
      memset(&__p, 0, sizeof(__p));
      *((_WORD *)v15 + 12) = v22;
      v25[2] = v15 + 4;
      sub_20BED2E9C((uint64_t *)a1, v25);
      v18 = *(_QWORD *)(a1 + 8);
      sub_20BED3064((uint64_t)v25);
      v19 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a1 + 8) = v18;
      if (v19 < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v7 = v9;
      memset(&__p, 0, sizeof(__p));
      *(_WORD *)(v7 + 24) = v22;
      *(_QWORD *)(a1 + 8) = v7 + 32;
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
  v25[0] = (void **)&v24;
  sub_20BDE5038(v25);
}

void sub_20BEC9C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v25;

  sub_20BED3064(v25 - 88);
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  __p = &a25;
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEC9C74(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::string>>::operator*() [T = std::vect"
            "or<std::string>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BEC9CE8()
{
  JUMPOUT(0x20BEC9C98);
}

_QWORD *sub_20BEC9CF0(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<std::string>>::operator++()"
            " [T = std::vector<std::string>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 24;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match(pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *this, const char *a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unsigned __int8 *v8;
  int v9;
  size_t v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;

  v2 = *(_QWORD *)this;
  v13 = *((_QWORD *)this + 1);
  v14 = v13;
  v15 = v2;
  for (i = v2; v14 != i; LODWORD(v2) = i)
  {
    v4 = *(unsigned __int8 *)(*(_QWORD *)(sub_20BEC9EA8((uint64_t)&v13) + 8) - 7);
    v5 = *(_QWORD *)(sub_20BEC9EA8((uint64_t)&v13) + 8);
    v6 = (unsigned __int8 *)(v5 - 32);
    if (v4)
    {
      if (*(char *)(v5 - 9) < 0)
        v6 = *(unsigned __int8 **)v6;
      v7 = *v6;
      if (!*v6)
      {
LABEL_20:
        LODWORD(v2) = *(_BYTE *)(*(_QWORD *)(sub_20BEC9EA8((uint64_t)&v13) + 8) - 8) != 0;
        v11 = 1;
        return v11 & v2;
      }
      v8 = v6 + 1;
      while (v7 == *(unsigned __int8 *)a2)
      {
        ++a2;
        v9 = *v8++;
        v7 = v9;
        if (!v9)
          goto LABEL_20;
      }
    }
    else
    {
      v10 = strlen(a2);
      if (*(char *)(v5 - 9) < 0)
      {
        if (v10 != *(_QWORD *)(v5 - 24))
          goto LABEL_18;
        if (v10 == -1)
LABEL_22:
          sub_20BEB9180();
        v6 = *(unsigned __int8 **)v6;
      }
      else
      {
        if (v10 != *(unsigned __int8 *)(v5 - 9))
          goto LABEL_18;
        if (v10 == -1)
          goto LABEL_22;
      }
      if (!memcmp(v6, a2, v10))
        goto LABEL_20;
    }
LABEL_18:
    sub_20BEC9F24((uint64_t)&v13);
  }
  v11 = 0;
  return v11 & v2;
}

uint64_t sub_20BEC9EA8(uint64_t result)
{
  _QWORD v1[4];
  char v2;
  int v3;

  if (*(_QWORD *)(result + 8) == *(_QWORD *)(result + 24))
  {
    v1[0] = "tf/iterator.h";
    v1[1] = "operator->";
    v1[2] = 287;
    v1[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "f_MallocTagStringMatchTable::_MatchString>, true>::operator->() [T = const std::vector<pxrInternal__aapl__px"
            "rReserved__::Tf_MallocTagStringMatchTable::_MatchString>, Reverse = true]";
    v2 = 0;
    v3 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  return result;
}

uint64_t sub_20BEC9F24(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::Tf_MallocTagStringMatchTable::_MatchString>, true>::operator++() [T = const std::vector<pxrInte"
            "rnal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::_MatchString>, Reverse = true]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v2 - 32;
  }
  return a1;
}

char *pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_GetStackTrace(uint64_t a1, uint64_t a2, char *a3, unint64_t *a4)
{
  unint64_t StackFrames;
  _QWORD __src[65];

  __src[64] = *MEMORY[0x24BDAC8D0];
  StackFrames = pxrInternal__aapl__pxrReserved__::ArchGetStackFrames((pxrInternal__aapl__pxrReserved__ *)0x40, a2, (uint64_t)__src, a4);
  return sub_20BDDF7E4(a3, (char *)__src, (uint64_t)&__src[StackFrames], StackFrames);
}

unint64_t pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_SetTraceNames(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  sub_20BECEA48(&v17, 0, a3);
  pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::SetMatchList(a1 + 1816, a2);
  for (result = sub_20BECA10C(a1 + 624, v13); v14 != v16 || v13[0] != v15; result = (unint64_t)sub_20BECA1FC(v13))
  {
    sub_20BECA178(v13, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match((pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *)(a1 + 1816), **(const char ***)(v14 + 24)))
    {
      sub_20BECA178(v13, v9, v10);
      v11 = *(_QWORD *)(v14 + 24);
      v12 = *(_DWORD *)(v11 + 16) | 1;
    }
    else
    {
      sub_20BECA178(v13, v9, v10);
      v11 = *(_QWORD *)(v14 + 24);
      v12 = *(_DWORD *)(v11 + 16) & 0xFFFFFFFE;
    }
    *(_DWORD *)(v11 + 16) = v12;
  }
  *v17 = 0;
  return result;
}

void sub_20BECA0FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  **(_DWORD **)(v1 - 40) = 0;
  _Unwind_Resume(a1);
}

unint64_t sub_20BECA10C@<X0>(unint64_t result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v2 = result;
  v4 = *(_QWORD *)(result + 544);
  v5 = result + 528;
  v8 = result;
  v9 = 0;
  v10 = result + 528;
  v11 = v4;
  if (v4 <= 0x3F)
  {
    result = sub_20BED323C((unint64_t)&v8);
    v7 = v8;
    v6 = v9;
    v5 = v10;
    v4 = v11;
  }
  else
  {
    v6 = 0;
    v7 = result;
  }
  *a2 = v7;
  a2[1] = v6;
  a2[2] = v5;
  a2[3] = v4;
  a2[4] = v2;
  a2[5] = 0;
  a2[6] = 0;
  a2[7] = 0;
  return result;
}

_QWORD *sub_20BECA178(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v4[4];
  char v5;
  int v6;

  if (result[3] == result[7] && *result == result[4])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator->";
    v4[2] = 287;
    v4[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<tbb::interface5::concurrent_hash_map<const char *, px"
            "rInternal__aapl__pxrReserved__::Tf_MallocCallSite *, pxrInternal__aapl__pxrReserved__::(anonymous namespace)"
            "::_HashEqCStr>>::operator->() [T = tbb::interface5::concurrent_hash_map<const char *, pxrInternal__aapl__pxr"
            "Reserved__::Tf_MallocCallSite *, pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_HashEqCStr>, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20BECA1FC(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v4;
  _QWORD v6[4];
  char v7;

  v2 = (uint64_t *)a1[3];
  if (v2 == (uint64_t *)a1[7] && *a1 == a1[4])
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator++";
    v6[2] = 250;
    v6[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<tbb::interface5::concurrent_hash_map<co"
            "nst char *, pxrInternal__aapl__pxrReserved__::Tf_MallocCallSite *, pxrInternal__aapl__pxrReserved__::(anonym"
            "ous namespace)::_HashEqCStr>>::operator++() [T = tbb::interface5::concurrent_hash_map<const char *, pxrInter"
            "nal__aapl__pxrReserved__::Tf_MallocCallSite *, pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_Has"
            "hEqCStr>, Reverse = false]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v4 = *v2;
    a1[3] = v4;
    if (!v4)
      sub_20BED323C((unint64_t)a1);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_MatchesTraceName(uint64_t a1, const char *a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *)(a1 + 1816);
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  return pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match(v2, a2);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_CaptureStackOrDebug(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t v7;
  unint64_t *v8;
  unint64_t StackFrames;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD __src[65];

  __src[64] = *MEMORY[0x24BDAC8D0];
  v13 = a3;
  v4 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if ((v4 & 1) != 0)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    sub_20BECA3AC(result + 230, (uint64_t)&v10, &v13);
    v7 = v12;
    StackFrames = pxrInternal__aapl__pxrReserved__::ArchGetStackFrames((pxrInternal__aapl__pxrReserved__ *)0x40, 3, (uint64_t)__src, v8);
    sub_20BDDF7E4((char *)(v7 + 24), (char *)__src, (uint64_t)&__src[StackFrames], StackFrames);
    *(_QWORD *)(v7 + 48) = a4;
    *(_QWORD *)(v7 + 56) = 1;
    v12 = 0;
    result = sub_20BEBF29C(&v10);
    v4 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  }
  if ((v4 & 2) != 0)
    return (uint64_t *)sub_20BECA410((pxrInternal__aapl__pxrReserved__ *)result);
  return result;
}

void sub_20BECA388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BECA3AC(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20BED32C8(a1, 1, a3, 0, a2, 1, (uint64_t (*)(uint64_t, _QWORD *, uint64_t))sub_20BED35E0, 0);
}

uint64_t sub_20BECA410(pxrInternal__aapl__pxrReserved__ *a1)
{
  return pxrInternal__aapl__pxrReserved__::ArchDebuggerTrap(a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_ReleaseStackOrDebug(uint64_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v5;

  v5 = a3;
  v3 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  if ((v3 & 1) != 0)
  {
    result = (uint64_t *)sub_20BECA474(result + 230, &v5);
    v3 = *(_DWORD *)(*(_QWORD *)a2 + 16);
  }
  if ((v3 & 2) != 0)
    return (uint64_t *)sub_20BECA410((pxrInternal__aapl__pxrReserved__ *)result);
  return result;
}

uint64_t sub_20BECA474(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  tbb::spin_rw_mutex_v3 *v14;
  char v15;
  uint64_t v16;

  v4 = *a2 ^ (*a2 >> 3);
  v5 = *a1;
  __dmb(0xBu);
  while (2)
  {
    sub_20BED37E4((uint64_t)&v14, (uint64_t)a1, v5 & v4, 0);
    while (1)
    {
      v6 = (_QWORD *)(v16 + 16);
      while (1)
      {
        v7 = v6;
        v6 = (_QWORD *)*v6;
        if ((unint64_t)v6 < 0x40)
          break;
        if (*a2 == v6[2])
          goto LABEL_8;
      }
      if (!v6)
        break;
LABEL_8:
      if (v15 || (v15 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v14) & 1) != 0))
      {
        *v7 = *v6;
        v10 = (unint64_t *)(a1 + 65);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        sub_20BEBF29C(&v14);
        v12 = 1;
        v15 = 1;
        v14 = (tbb::spin_rw_mutex_v3 *)(v6 + 1);
        tbb::spin_rw_mutex_v3::internal_acquire_writer((tbb::spin_rw_mutex_v3 *)(v6 + 1));
        sub_20BEBF29C(&v14);
        sub_20BED31B8((int)a1, (tbb::internal *)v6);
        return v12;
      }
      v8 = *a1;
      __dmb(0xBu);
      if (v5 != v8)
      {
        v9 = sub_20BECF7E4((uint64_t)a1, v4, v5, v8);
        v5 = v8;
        if (v9)
          goto LABEL_15;
      }
    }
    v8 = *a1;
    __dmb(0xBu);
    if (v5 != v8 && sub_20BECF7E4((uint64_t)a1, v4, v5, v8))
    {
LABEL_15:
      sub_20BEBF29C(&v14);
      v5 = v8;
      continue;
    }
    break;
  }
  sub_20BEBF29C(&v14);
  return 0;
}

void sub_20BECA5EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

unint64_t pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_SetDebugNames(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  unint64_t v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  sub_20BECEA48(&v17, 0, a3);
  pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::SetMatchList(a1 + 1792, a2);
  for (result = sub_20BECA10C(a1 + 624, v13); v14 != v16 || v13[0] != v15; result = (unint64_t)sub_20BECA1FC(v13))
  {
    sub_20BECA178(v13, v6, v7);
    if (pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match((pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *)(a1 + 1792), **(const char ***)(v14 + 24)))
    {
      sub_20BECA178(v13, v9, v10);
      v11 = *(_QWORD *)(v14 + 24);
      v12 = *(_DWORD *)(v11 + 16) | 2;
    }
    else
    {
      sub_20BECA178(v13, v9, v10);
      v11 = *(_QWORD *)(v14 + 24);
      v12 = *(_DWORD *)(v11 + 16) & 0xFFFFFFFD;
    }
    *(_DWORD *)(v11 + 16) = v12;
  }
  *v17 = 0;
  return result;
}

void sub_20BECA6E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  **(_DWORD **)(v1 - 40) = 0;
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_MatchesDebugName(uint64_t a1, const char *a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *)(a1 + 1792);
  if (a2[23] < 0)
    a2 = *(const char **)a2;
  return pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match(v2, a2);
}

void pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_BuildUniqueMallocStacks(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __int128 *v6;
  int64x2_t *v8;
  const void *v9;
  pxrInternal__aapl__pxrReserved__ *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  __int128 *v16;
  uint8x8_t v17;
  unint64_t v18;
  int64x2_t **v19;
  int64x2_t *i;
  unint64_t v21;
  const void *v22;
  char *v23;
  float v24;
  _BOOL4 v25;
  unint64_t v26;
  unint64_t v27;
  int8x8_t prime;
  void *v29;
  void *v30;
  uint64_t v31;
  _QWORD **v32;
  unint64_t v33;
  uint8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  _QWORD *j;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  int8x16_t *v44;
  int8x16_t *v45;
  int8x16_t *v46;
  _QWORD *v47;
  int8x16_t *v48;
  _QWORD *v49;
  int8x16_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  int8x16_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unsigned int (*v71)(uint64_t, uint64_t);
  const char *v72;
  _QWORD *v73;
  _QWORD *v74;
  void *v75;
  void *v76;
  int64x2_t *v78;
  void *__p;
  void *v80;
  uint64_t v81;
  __int128 v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  BOOL (*v86)(uint64_t, uint64_t);
  const char *v87;
  uint64_t v88;
  const char *v89;
  unsigned int (*v90)(uint64_t, uint64_t);
  const char *v91;
  __int128 v92;
  __int128 v93;
  float v94;
  _QWORD v95[2];
  char v96;

  v3 = *(_QWORD *)(a1 + 2360);
  __dmb(0xBu);
  if (!v3)
    return;
  v92 = 0u;
  v93 = 0u;
  v94 = 1.0;
  sub_20BED3A70((uint64_t)&v86, a1 + 1840);
  v6 = &v93;
  while (v89 != v91 || (char *)v86 != (char *)v90)
  {
    v8 = (int64x2_t *)sub_20BECB030(&v86, v4, v5)[3];
    v9 = (const void *)v8[1].i64[1];
    __p = 0;
    v80 = 0;
    v81 = 0;
    sub_20BEC5FD4(&__p, v9, v8[2].i64[0], (v8[2].i64[0] - (uint64_t)v9) >> 3);
    v83 = 0;
    v10 = (pxrInternal__aapl__pxrReserved__ *)__p;
    v11 = (uint64_t)v80;
    __p = 0;
    v80 = 0;
    v81 = 0;
    v82 = (unint64_t)&v8[1].u64[1];
    v84 = v82;
    v85 = 0;
    v12 = v11 - (_QWORD)v10;
    v13 = pxrInternal__aapl__pxrReserved__::ArchHash(v10, (const char *)(v11 - (_QWORD)v10));
    v14 = v13;
    v15 = *((_QWORD *)&v92 + 1);
    if (*((_QWORD *)&v92 + 1))
    {
      v78 = v8;
      v16 = v6;
      v17 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v92 + 8));
      v17.i16[0] = vaddlv_u8(v17);
      v18 = v17.u32[0];
      if (v17.u32[0] > 1uLL)
      {
        v2 = v13;
        if (*((_QWORD *)&v92 + 1) <= (unint64_t)v13)
          v2 = (unint64_t)v13 % *((_QWORD *)&v92 + 1);
      }
      else
      {
        v2 = (DWORD2(v92) - 1) & v13;
      }
      v19 = *(int64x2_t ***)(v92 + 8 * v2);
      if (v19)
      {
        for (i = *v19; i; i = (int64x2_t *)i->i64[0])
        {
          v21 = i->u64[1];
          if (v21 == v14)
          {
            v22 = (const void *)i[1].i64[0];
            if (i[1].i64[1] - (_QWORD)v22 == v12 && !memcmp(v22, v10, v11 - (_QWORD)v10))
            {
              v6 = v16;
              v8 = v78;
              if (!v10)
                goto LABEL_81;
LABEL_80:
              operator delete(v10);
              goto LABEL_81;
            }
          }
          else
          {
            if (v18 > 1)
            {
              if (v21 >= v15)
                v21 %= v15;
            }
            else
            {
              v21 &= v15 - 1;
            }
            if (v21 != v2)
              break;
          }
        }
      }
      v6 = v16;
      v8 = v78;
    }
    v23 = (char *)operator new(0x40uLL);
    v95[0] = v23;
    v95[1] = v6;
    v96 = 0;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = v14;
    *((_QWORD *)v23 + 3) = 0;
    *((_QWORD *)v23 + 4) = 0;
    *((_QWORD *)v23 + 2) = 0;
    sub_20BEC5FD4((_QWORD *)v23 + 2, v10, v11, v12 >> 3);
    *(_OWORD *)(v23 + 40) = v84;
    *((_QWORD *)v23 + 7) = v85;
    v96 = 1;
    v24 = (float)(unint64_t)(*((_QWORD *)&v93 + 1) + 1);
    if (!v15 || (float)(v94 * (float)v15) < v24)
    {
      v25 = (v15 & (v15 - 1)) == 0;
      if (v15 < 3)
        v25 = 0;
      v26 = (2 * v15) | !v25;
      v27 = vcvtps_u32_f32(v24 / v94);
      if (v26 <= v27)
        prime = (int8x8_t)v27;
      else
        prime = (int8x8_t)v26;
      if (*(_QWORD *)&prime == 1)
      {
        prime = (int8x8_t)2;
      }
      else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
      {
        prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      }
      v15 = *((_QWORD *)&v92 + 1);
      if (*(_QWORD *)&prime <= *((_QWORD *)&v92 + 1))
      {
        if (*(_QWORD *)&prime < *((_QWORD *)&v92 + 1))
        {
          v35 = vcvtps_u32_f32((float)*((unint64_t *)&v93 + 1) / v94);
          if (*((_QWORD *)&v92 + 1) < 3uLL
            || (v36 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v92 + 8)), v36.i16[0] = vaddlv_u8(v36),
                                                                           v36.u32[0] > 1uLL))
          {
            v35 = std::__next_prime(v35);
          }
          else
          {
            v37 = 1 << -(char)__clz(v35 - 1);
            if (v35 >= 2)
              v35 = v37;
          }
          if (*(_QWORD *)&prime <= v35)
            prime = (int8x8_t)v35;
          if (*(_QWORD *)&prime >= v15)
          {
            v15 = *((_QWORD *)&v92 + 1);
          }
          else
          {
            if (prime)
              goto LABEL_37;
            v42 = (void *)v92;
            *(_QWORD *)&v92 = 0;
            if (v42)
              operator delete(v42);
            v15 = 0;
            *((_QWORD *)&v92 + 1) = 0;
          }
        }
      }
      else
      {
LABEL_37:
        if (*(_QWORD *)&prime >> 61)
          sub_20BDDF5B4();
        v29 = operator new(8 * *(_QWORD *)&prime);
        v30 = (void *)v92;
        *(_QWORD *)&v92 = v29;
        if (v30)
          operator delete(v30);
        v31 = 0;
        *((int8x8_t *)&v92 + 1) = prime;
        do
          *(_QWORD *)(v92 + 8 * v31++) = 0;
        while (*(_QWORD *)&prime != v31);
        v32 = (_QWORD **)v93;
        if ((_QWORD)v93)
        {
          v33 = *(_QWORD *)(v93 + 8);
          v34 = (uint8x8_t)vcnt_s8(prime);
          v34.i16[0] = vaddlv_u8(v34);
          if (v34.u32[0] > 1uLL)
          {
            if (v33 >= *(_QWORD *)&prime)
              v33 %= *(_QWORD *)&prime;
          }
          else
          {
            v33 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(v92 + 8 * v33) = v6;
          for (j = *v32; j; v33 = v39)
          {
            v39 = j[1];
            if (v34.u32[0] > 1uLL)
            {
              if (v39 >= *(_QWORD *)&prime)
                v39 %= *(_QWORD *)&prime;
            }
            else
            {
              v39 &= *(_QWORD *)&prime - 1;
            }
            if (v39 != v33)
            {
              if (!*(_QWORD *)(v92 + 8 * v39))
              {
                *(_QWORD *)(v92 + 8 * v39) = v32;
                goto LABEL_62;
              }
              *v32 = (_QWORD *)*j;
              *j = **(_QWORD **)(v92 + 8 * v39);
              **(_QWORD **)(v92 + 8 * v39) = j;
              j = v32;
            }
            v39 = v33;
LABEL_62:
            v32 = (_QWORD **)j;
            j = (_QWORD *)*j;
          }
        }
        v15 = (unint64_t)prime;
      }
      if ((v15 & (v15 - 1)) != 0)
      {
        if (v15 <= v14)
          v2 = v14 % v15;
        else
          v2 = v14;
      }
      else
      {
        v2 = ((_DWORD)v15 - 1) & v14;
      }
    }
    v40 = *(_QWORD **)(v92 + 8 * v2);
    if (v40)
    {
      *(_QWORD *)v95[0] = *v40;
      *v40 = v95[0];
    }
    else
    {
      *(_QWORD *)v95[0] = v93;
      *(_QWORD *)&v93 = v95[0];
      *(_QWORD *)(v92 + 8 * v2) = v6;
      if (*(_QWORD *)v95[0])
      {
        v41 = *(_QWORD *)(*(_QWORD *)v95[0] + 8);
        if ((v15 & (v15 - 1)) != 0)
        {
          if (v41 >= v15)
            v41 %= v15;
        }
        else
        {
          v41 &= v15 - 1;
        }
        *(_QWORD *)(v92 + 8 * v41) = v95[0];
      }
    }
    i = (int64x2_t *)v95[0];
    v95[0] = 0;
    ++*((_QWORD *)&v93 + 1);
    sub_20BED3AEC((uint64_t)v95);
    if (v10)
      goto LABEL_80;
LABEL_81:
    if (__p)
    {
      v80 = __p;
      operator delete(__p);
    }
    i[3] = vaddq_s64(i[3], v8[3]);
    sub_20BECB0B4(&v86);
  }
  v43 = *((_QWORD *)&v93 + 1);
  if (*((_QWORD *)&v93 + 1))
  {
    if (*((_QWORD *)&v93 + 1) >> 61)
      sub_20BDDF694();
    v44 = (int8x16_t *)operator new(8 * *((_QWORD *)&v93 + 1));
    v45 = (int8x16_t *)((char *)v44 + 8 * v43);
    v46 = v44;
  }
  else
  {
    v46 = 0;
    v45 = 0;
  }
  v47 = (_QWORD *)v93;
  if ((_QWORD)v93)
  {
    v48 = v46;
    do
    {
      v49 = v47 + 5;
      if (v48 >= v45)
      {
        v51 = ((char *)v48 - (char *)v46) >> 3;
        v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 61)
          sub_20BDDF694();
        if (((char *)v45 - (char *)v46) >> 2 > v52)
          v52 = ((char *)v45 - (char *)v46) >> 2;
        if ((unint64_t)((char *)v45 - (char *)v46) >= 0x7FFFFFFFFFFFFFF8)
          v53 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v53 = v52;
        if (v53)
        {
          if (v53 >> 61)
            sub_20BDDF5B4();
          v54 = (char *)operator new(8 * v53);
        }
        else
        {
          v54 = 0;
        }
        v55 = &v54[8 * v51];
        *(_QWORD *)v55 = v49;
        v50 = (int8x16_t *)(v55 + 8);
        if (v48 != v46)
        {
          do
          {
            v56 = v48[-1].i64[1];
            v48 = (int8x16_t *)((char *)v48 - 8);
            *((_QWORD *)v55 - 1) = v56;
            v55 -= 8;
          }
          while (v48 != v46);
          v48 = v46;
        }
        v46 = (int8x16_t *)v55;
        v45 = (int8x16_t *)&v54[8 * v53];
        if (v48)
          operator delete(v48);
      }
      else
      {
        v48->i64[0] = (uint64_t)v49;
        v50 = (int8x16_t *)&v48->u64[1];
      }
      v47 = (_QWORD *)*v47;
      v48 = v50;
    }
    while (v47);
  }
  else
  {
    v50 = v46;
  }
  v57 = 126 - 2 * __clz(((char *)v50 - (char *)v46) >> 3);
  v86 = sub_20BECB148;
  if (v50 == v46)
    v58 = 0;
  else
    v58 = v57;
  sub_20BED3B38((uint64_t)v46, v50, (unsigned int (**)(uint64_t, uint64_t))&v86, v58, 1);
  v59 = (uint64_t *)(a2 + 96);
  sub_20BECB15C((uint64_t *)(a2 + 96), ((char *)v50 - (char *)v46) >> 3);
  v60 = a2;
  if (v50 != v46)
  {
    v61 = v50;
    while (1)
    {
      v63 = v61[-1].i64[1];
      v61 = (int8x16_t *)((char *)v61 - 8);
      v62 = v63;
      v64 = *(_QWORD *)(v60 + 104);
      v65 = *(_QWORD *)(v60 + 112);
      if (v64 >= v65)
      {
        v67 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v64 - *v59) >> 3);
        v68 = v67 + 1;
        if (v67 + 1 > 0x666666666666666)
          sub_20BDDF694();
        v69 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v65 - *v59) >> 3);
        if (2 * v69 > v68)
          v68 = 2 * v69;
        v70 = v69 >= 0x333333333333333 ? 0x666666666666666 : v68;
        v90 = (unsigned int (*)(uint64_t, uint64_t))(a2 + 112);
        v71 = v70 ? (unsigned int (*)(uint64_t, uint64_t))sub_20BED4724(a2 + 112, v70) : 0;
        v72 = (char *)v71 + 40 * v67;
        v86 = (BOOL (*)(uint64_t, uint64_t))v71;
        v87 = v72;
        v89 = (char *)v71 + 40 * v70;
        *((_QWORD *)v72 + 4) = 0;
        *(_OWORD *)v72 = 0u;
        *((_OWORD *)v72 + 1) = 0u;
        v88 = (uint64_t)(v72 + 40);
        sub_20BED46B0(v59, &v86);
        v66 = *(_QWORD *)(a2 + 104);
        sub_20BED4888((uint64_t)&v86);
        v60 = a2;
      }
      else
      {
        v66 = v64 + 40;
        *(_QWORD *)(v64 + 32) = 0;
        *(_OWORD *)v64 = 0u;
        *(_OWORD *)(v64 + 16) = 0u;
      }
      *(_QWORD *)(v60 + 104) = v66;
      if (v66 - 40 != *(_QWORD *)v62)
      {
        sub_20BDDF7E4((char *)(v66 - 40), **(char ***)v62, *(_QWORD *)(*(_QWORD *)v62 + 8), (uint64_t)(*(_QWORD *)(*(_QWORD *)v62 + 8) - **(_QWORD **)v62) >> 3);
        v60 = a2;
      }
      *(_OWORD *)(v66 - 16) = *(_OWORD *)(v62 + 8);
      if (v50 == v46)
        break;
      v50 = v61;
      if (v61 == v46)
        goto LABEL_144;
    }
    v86 = (BOOL (*)(uint64_t, uint64_t))"tf/iterator.h";
    v87 = "operator++";
    v88 = 250;
    v89 = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<const pxrInternal__aapl__pxrR"
          "eserved__::(anonymous namespace)::_MallocStackData *>, true>::operator++() [T = std::vector<const pxrInternal_"
          "_aapl__pxrReserved__::(anonymous namespace)::_MallocStackData *>, Reverse = true]";
    LOBYTE(v90) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v86, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
LABEL_144:
  if (v46)
    operator delete(v46);
  v73 = (_QWORD *)v93;
  if ((_QWORD)v93)
  {
    do
    {
      v74 = (_QWORD *)*v73;
      v75 = (void *)v73[2];
      if (v75)
      {
        v73[3] = v75;
        operator delete(v75);
      }
      operator delete(v73);
      v73 = v74;
    }
    while (v74);
  }
  v76 = (void *)v92;
  *(_QWORD *)&v92 = 0;
  if (v76)
    operator delete(v76);
}

void sub_20BECAF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  uint64_t v24;

  if (v23)
    operator delete(v23);
  sub_20BECB20C(v24 - 160);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BECB030(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v4[4];
  char v5;
  int v6;

  if (result[3] == result[7] && *result == result[4])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator->";
    v4[2] = 287;
    v4[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<tbb::interface5::concurrent_hash_map<const void *, px"
            "rInternal__aapl__pxrReserved__::TfMallocTag::CallStackInfo>>::operator->() [T = tbb::interface5::concurrent_"
            "hash_map<const void *, pxrInternal__aapl__pxrReserved__::TfMallocTag::CallStackInfo>, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20BECB0B4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t v4;
  _QWORD v6[4];
  char v7;

  v2 = (uint64_t *)a1[3];
  if (v2 == (uint64_t *)a1[7] && *a1 == a1[4])
  {
    v6[0] = "tf/iterator.h";
    v6[1] = "operator++";
    v6[2] = 250;
    v6[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<tbb::interface5::concurrent_hash_map<co"
            "nst void *, pxrInternal__aapl__pxrReserved__::TfMallocTag::CallStackInfo>>::operator++() [T = tbb::interface"
            "5::concurrent_hash_map<const void *, pxrInternal__aapl__pxrReserved__::TfMallocTag::CallStackInfo>, Reverse = false]";
    v7 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v4 = *v2;
    a1[3] = v4;
    if (!v4)
      sub_20BED323C((unint64_t)a1);
  }
  return a1;
}

BOOL sub_20BECB148(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) < *(_QWORD *)(a2 + 8);
}

uint64_t sub_20BECB15C(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BED4724(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 40 * v6;
    sub_20BED46B0(a1, v7);
    return sub_20BED4888((uint64_t)v7);
  }
  return result;
}

void sub_20BECB1F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BED4888((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BECB20C(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[2];
      if (v4)
      {
        v2[3] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v5 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_BuildPathNodeChildrenTable(pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  unint64_t v5;
  char *v6;
  BOOL v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  BOOL v22;
  _QWORD v23[3];
  unint64_t *v24;
  uint64_t *v25;

  sub_20BED4914((uint64_t)a2, 0, 0.0, 0.5);
  v4 = (char *)this + 1208;
  v5 = *((_QWORD *)this + 219);
  v23[0] = (char *)this + 1208;
  v23[1] = 0;
  v23[2] = (char *)this + 1736;
  v24 = (unint64_t *)v5;
  if (v5 <= 0x3F)
  {
    sub_20BED323C((unint64_t)v23);
    v5 = (unint64_t)v24;
    v6 = (char *)v23[0];
  }
  else
  {
    v6 = (char *)this + 1208;
  }
  if (v5)
    v7 = 0;
  else
    v7 = v6 == v4;
  if (!v7)
  {
    do
    {
      v25 = (uint64_t *)(v5 + 16);
      v8 = (_QWORD *)sub_20BED4B84(a2, (_QWORD *)(v5 + 16), (uint64_t)&unk_20CAC184C, &v25);
      v9 = (_QWORD *)v8[3];
      v10 = v8[4];
      if ((unint64_t)v9 >= v10)
      {
        v12 = v8[2];
        v13 = ((uint64_t)v9 - v12) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          sub_20BDDF694();
        v14 = v10 - v12;
        v15 = v14 >> 2;
        if (v14 >> 2 <= (unint64_t)(v13 + 1))
          v15 = v13 + 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)sub_20BDDF6A8((uint64_t)(v8 + 4), v16);
        else
          v17 = 0;
        v18 = &v17[8 * v13];
        *(_QWORD *)v18 = *(_QWORD *)(v5 + 32);
        v11 = v18 + 8;
        v20 = (char *)v8[2];
        v19 = (char *)v8[3];
        if (v19 != v20)
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *((_QWORD *)v18 - 1) = v21;
            v18 -= 8;
          }
          while (v19 != v20);
          v19 = (char *)v8[2];
        }
        v8[2] = v18;
        v8[3] = v11;
        v8[4] = &v17[8 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *v9 = *(_QWORD *)(v5 + 32);
        v11 = v9 + 1;
      }
      v8[3] = v11;
      v5 = *v24;
      v24 = (unint64_t *)v5;
      if (!v5)
      {
        sub_20BED323C((unint64_t)v23);
        v5 = (unint64_t)v24;
      }
      if (v5)
        v22 = 0;
      else
        v22 = v23[0] == (_QWORD)v4;
    }
    while (!v22);
  }
}

void sub_20BECB42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 + 8);
  sub_20BECEAE0(&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_MallocPathNode::_BuildTree(_QWORD **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned __int8 v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 v20;
  _OWORD v21[5];
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  void **v25;

  *(_QWORD *)&v21[0] = a1;
  if (sub_20BED51B0(a2, v21))
  {
    v25 = (void **)a1;
    v8 = sub_20BED5288(a2, &v25);
    v23 = 0;
    v24 = 0;
    v22 = 0;
    sub_20BED52C8(&v22, *(const void **)(v8 + 16), *(_QWORD *)(v8 + 24), (uint64_t)(*(_QWORD *)(v8 + 24) - *(_QWORD *)(v8 + 16)) >> 3);
    v9 = v23 - v22;
  }
  else
  {
    v9 = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
  }
  sub_20BECB700((uint64_t *)(a3 + 48), v9);
  v10 = atomic_load((unint64_t *)a1 + 1);
  *(_QWORD *)a3 = v10;
  *(_QWORD *)(a3 + 8) = v10;
  v11 = atomic_load((unint64_t *)a1 + 2);
  *(_QWORD *)(a3 + 16) = v11;
  MEMORY[0x212B929D0](a3 + 24, **a1);
  v12 = v22;
  v13 = v23;
  if (v22 != v23)
  {
    do
    {
      v14 = *v12;
      if ((_DWORD)a4 && (v15 = atomic_load((unsigned __int8 *)(v14 + 24)), (v15 & 1) != 0))
      {
        memset((char *)&v21[1] + 8, 0, 48);
        pxrInternal__aapl__pxrReserved__::Tf_MallocPathNode::_BuildTree(v14, a2, v21, 1);
        v20 = v21[3];
        *(_QWORD *)(a3 + 8) += *((_QWORD *)&v21[0] + 1);
        if ((_QWORD)v20 != *((_QWORD *)&v20 + 1))
          sub_20BED5580((uint64_t *)(a3 + 48), *(std::string **)(a3 + 56), (uint64_t *)v20, *((uint64_t *)&v20 + 1), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)&v20 + 1) - v20) >> 3));
        *(_QWORD *)a3 += *(_QWORD *)&v21[0];
        v25 = (void **)&v21[3];
        sub_20BECEBCC(&v25);
        if (SHIBYTE(v21[2]) < 0)
          operator delete(*((void **)&v21[1] + 1));
      }
      else
      {
        memset(v21, 0, 72);
        v16 = *(_QWORD *)(a3 + 56);
        if (v16 >= *(_QWORD *)(a3 + 64))
        {
          v18 = sub_20BED600C((uint64_t *)(a3 + 48), (uint64_t)v21);
        }
        else
        {
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v16 + 16) = 0;
          *(_QWORD *)v16 = 0;
          v17 = *(_OWORD *)((char *)&v21[1] + 8);
          *(_QWORD *)(v16 + 40) = *((_QWORD *)&v21[2] + 1);
          *(_QWORD *)(v16 + 48) = 0;
          *(_OWORD *)(v16 + 24) = v17;
          memset((char *)&v21[1] + 8, 0, 24);
          *(_QWORD *)(v16 + 56) = 0;
          *(_QWORD *)(v16 + 64) = 0;
          *(_OWORD *)(v16 + 48) = v21[3];
          *(_QWORD *)(v16 + 64) = *(_QWORD *)&v21[4];
          memset(&v21[3], 0, 24);
          v18 = v16 + 72;
        }
        *(_QWORD *)(a3 + 56) = v18;
        v25 = (void **)&v21[3];
        sub_20BECEBCC(&v25);
        if (SHIBYTE(v21[2]) < 0)
          operator delete(*((void **)&v21[1] + 1));
        v19 = (_QWORD *)(*(_QWORD *)(a3 + 56) - 72);
        pxrInternal__aapl__pxrReserved__::Tf_MallocPathNode::_BuildTree(v14, a2, v19, a4);
        *(_QWORD *)a3 += *v19;
      }
      ++v12;
    }
    while (v12 != v13);
    v12 = v22;
  }
  if (v12)
  {
    v23 = v12;
    operator delete(v12);
  }
}

void sub_20BECB6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BECB700(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x38E38E38E38E38FLL)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BE7BBA0(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 72 * v6;
    sub_20BED5340(a1, v7);
    return sub_20BED5508((uint64_t)v7);
  }
  return result;
}

void sub_20BECB7A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BED5508((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BECB7BC(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 48);
  sub_20BECEBCC(&v3);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::SetDebugMatchList(uint64_t result, uint64_t a2, char *a3)
{
  unsigned __int8 v3;
  unsigned __int8 *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;

  v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v3 & 1) != 0)
  {
    v4 = (unsigned __int8 *)result;
    v8 = qword_254785110;
    v9 = -1;
    sub_20BECED08((uint64_t)&v8, a2, a3);
    pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_SetDebugNames(qword_254785110, v4, v5);
    return sub_20BECC0B0((uint64_t)&v8, v6, v7);
  }
  return result;
}

void sub_20BECB86C(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BECC0B0((uint64_t)&a9, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::SetCapturedMallocStacksMatchList(uint64_t result, uint64_t a2, char *a3)
{
  unsigned __int8 v3;
  unsigned __int8 *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int v9;

  v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v3 & 1) != 0)
  {
    v4 = (unsigned __int8 *)result;
    v8 = qword_254785110;
    v9 = -1;
    sub_20BECED08((uint64_t)&v8, a2, a3);
    pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_SetTraceNames(qword_254785110, v4, v5);
    return sub_20BECC0B0((uint64_t)&v8, v6, v7);
  }
  return result;
}

void sub_20BECB8EC(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BECC0B0((uint64_t)&a9, a2, a3);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::GetCapturedMallocStacks(uint64_t *a1@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  char *v5;
  uint64_t i;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _BYTE v55[56];
  uint64_t v56;
  int v57;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v3 & 1) != 0)
  {
    sub_20BED61E8((uint64_t)&v56, "Tf", "TfMallocTag::GetCapturedMallocStacks");
    for (i = 536; i != 584; i += 24)
      *(uint64_t *)((char *)&v21 + i) = 0;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    v36 = 0u;
    v35 = 0u;
    v34 = 0u;
    v33 = 0u;
    v32 = 0u;
    v31 = 0u;
    v30 = 0u;
    v29 = 0u;
    v28 = 0u;
    v27 = 0u;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    __dmb(0xBu);
    v21 = 0;
    __dmb(0xBu);
    v54 = 0;
    memset(v55, 0, 48);
    *(_QWORD *)&v22 = v55;
    __dmb(0xBu);
    v21 = 1;
    v16 = qword_254785110;
    v17 = -1;
    sub_20BECED08((uint64_t)&v16, v4, v5);
    v8 = (uint64_t *)(qword_254785110 + 1840);
    if (&v21 != (uint64_t *)(qword_254785110 + 1840))
      sub_20BED6258(&v21, v8);
    sub_20BECC0B0((uint64_t)&v16, (uint64_t)v8, v7);
    sub_20BED3A70((uint64_t)&v16, (uint64_t)&v21);
    while (v18 != v20 || v16 != v19)
    {
      v12 = sub_20BECB030(&v16, v9, v10)[3] + 24;
      v13 = a1[1];
      if (v13 >= a1[2])
      {
        v14 = sub_20BED633C(a1, v12);
      }
      else
      {
        sub_20BED62EC((uint64_t)a1, v12);
        v14 = v13 + 24;
      }
      a1[1] = v14;
      sub_20BECB0B4(&v16);
    }
    sub_20BED30EC((unint64_t *)&v21);
    while (v57--)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v56);
  }
}

void sub_20BECBAD4(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20BECC0B0((uint64_t)va, a2, a3);
  sub_20BED30EC((unint64_t *)va1);
  sub_20BEB24F4(v4 - 48);
  sub_20BED6154((void ***)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::_MallocWrapper(pxrInternal__aapl__pxrReserved__::TfMallocTag *this, unint64_t a2, const void *a3)
{
  off_254785118();
  sub_20C96B11C();
}

void sub_20BECBC7C(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  *a14 = 0;
  sub_20BECC0B0((uint64_t)&a10, a2, a3);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::_ReallocWrapper(pxrInternal__aapl__pxrReserved__::TfMallocTag *this, pxrInternal__aapl__pxrReserved__::TfMallocTag *a2, const void *a3, const void *a4)
{
  if (!this)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_MallocWrapper(a2, (unint64_t)a2, a3);
  sub_20C96B11C();
}

void sub_20BECBE50(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, _DWORD *a14)
{
  *a14 = 0;
  sub_20BECC0B0((uint64_t)&a10, a2, a3);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BECBE88(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *result;
  unint64_t *v22;
  char v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;

  v26 = a2;
  sub_20BECEA48(&v25, 0, a3);
  v22 = 0;
  v23 = 0;
  v24 = 0;
  if (sub_20BECF838(a1 + 5, (uint64_t)&v22, &v26))
  {
    v5 = *(_QWORD *)(v24 + 24);
    v4 = *(_QWORD *)(v24 + 32);
    sub_20BECF89C(a1 + 5, (uint64_t)&v22);
    if (v24)
    {
      v6 = v22;
      v22 = 0;
      if (v23)
      {
        while (1)
        {
          v7 = *v6;
          v8 = *v6 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            while (1)
            {
              v9 = __ldaxr(v6);
              if (v9 != v7)
                break;
              if (!__stlxr(v8, v6))
                goto LABEL_13;
            }
            __clrex();
            do
              v10 = __ldxr(v6);
            while (__stxr(v10, v6));
          }
          while (v10 == v7);
          sched_yield();
        }
      }
      do
        v11 = __ldaxr(v6);
      while (__stlxr(v11 - 4, v6));
LABEL_13:
      v24 = 0;
    }
    v12 = *(_QWORD *)v4;
    if (*(_DWORD *)(*(_QWORD *)v4 + 16))
    {
      pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_ReleaseStackOrDebug(a1, v4, v26);
      v12 = *(_QWORD *)v4;
    }
    v13 = (unint64_t *)(v4 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 - v5, v13));
    v15 = (unint64_t *)(v4 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 - 1, v15));
    v17 = (unint64_t *)(v12 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 - v5, v17));
    v19 = (unint64_t *)(a1 + 3);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 - v5, v19));
  }
  v24 = 0;
  result = sub_20BEBF29C(&v22);
  *v25 = 0;
  return result;
}

void sub_20BECBFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  a11 = 0;
  sub_20BEBF29C(&a9);
  *a13 = 0;
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_FreeWrapper(uint64_t this, void *a2, const void *a3)
{
  if (this)
    sub_20C96B2EC();
  return this;
}

void sub_20BECC044(char a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;

  if ((a1 & 1) != 0)
  {
    a9 = qword_254785110;
    a10 = -1;
    sub_20BECED94((uint64_t)&a9, a2, a3);
    sub_20BECBE88((uint64_t *)qword_254785110, v10, v11);
    sub_20BECC0B0((uint64_t)&a9, v12, v13);
    off_254785130(v10);
    sub_20BECC0B0((uint64_t)&a9, v14, v15);
  }
  JUMPOUT(0x20BECC02CLL);
}

void sub_20BECC098(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BECC0B0((uint64_t)&a9, a2, a3);
  _Unwind_Resume(a1);
}

uint64_t sub_20BECC0B0(uint64_t a1, uint64_t a2, char *a3)
{
  int v3;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 != -1)
  {
    if (v3 == -2)
      return (uint64_t)sub_20BECF9F0(a1, a2, a3);
    else
      return sub_20BECFA7C(a1, a2, a3);
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::Initialize(uint64_t a1)
{
  unsigned __int8 v1;
  uint64_t v3;
  char *v4;

  v1 = atomic_load((unsigned __int8 *)&qword_254785108);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254785108))
  {
    byte_254785100 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Initialize(a1, v3, v4);
    __cxa_guard_release(&qword_254785108);
  }
  return byte_254785100;
}

void sub_20BECC140(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254785108);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_Initialize(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  _QWORD v10[4];
  char v11;
  int v12;

  if (qword_254785110)
  {
    v10[0] = "tf/mallocTag.cpp";
    v10[1] = "_Initialize";
    v10[2] = 1173;
    v10[3] = "static BOOL pxrInternal__aapl__pxrReserved__::TfMallocTag::_Initialize(std::string *)";
    v11 = 0;
    v12 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v10, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "!_mallocGlobalData");
  }
  v4 = (uint64_t *)operator new(0x978uLL);
  sub_20BED04F8((pxrInternal__aapl__pxrReserved__::TfBigRWMutex *)v4);
  qword_254785110 = (uint64_t)v4;
  v5 = sub_20BECFB0C(v4 + 78, "__root");
  v6 = operator new(0x20uLL);
  v6[1] = 0;
  v6[2] = 0;
  *v6 = v5;
  v7 = qword_254785110;
  *((_BYTE *)v6 + 24) = 0;
  *(_QWORD *)(v7 + 16) = v6;
  atomic_store(1u, pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  sub_20BECEA48(v10, 0, v8);
  result = pxrInternal__aapl__pxrReserved__::ArchMallocHook::Initialize((uint64_t)&off_254785118, (uint64_t)pxrInternal__aapl__pxrReserved__::TfMallocTag::_MallocWrapper, (uint64_t)pxrInternal__aapl__pxrReserved__::TfMallocTag::_ReallocWrapper, (uint64_t)pxrInternal__aapl__pxrReserved__::TfMallocTag::_MemalignWrapper, (uint64_t)pxrInternal__aapl__pxrReserved__::TfMallocTag::_FreeWrapper, a1);
  *(_DWORD *)v10[0] = 0;
  return result;
}

void sub_20BECC278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _DWORD *a11)
{
  *a11 = 0;
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfMallocTag::GetCallTree(uint64_t a1, uint64_t a2)
{
  char *v4;
  pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData *v5;
  uint64_t v6;
  char *v7;
  _QWORD **v8;
  char *v9;
  uint64_t i;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void **v22;
  void *v23;
  uint64_t v24;
  char *v25;
  void *__p[2];
  char v28;
  unint64_t v29;
  void **v30[3];
  uint64_t v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD v35[32];
  unint64_t v36;
  _BYTE v37[56];
  pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData *v38;
  int v39;
  _DWORD *v40;

  sub_20BED2E50((uint64_t *)a1);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  if (*(char *)(a1 + 71) < 0)
  {
    **(_BYTE **)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 71) = 0;
  }
  sub_20BECEC54(a1 + 72, *(void ***)(a1 + 72));
  v5 = (pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData *)qword_254785110;
  if (qword_254785110)
  {
    sub_20BECEA48(&v40, 0, v4);
    v38 = v5;
    v39 = -1;
    sub_20BECED08((uint64_t)&v38, v6, v7);
    v8 = (_QWORD **)*((_QWORD *)v5 + 2);
    pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_BuildPathNodeChildrenTable(v5, &v34);
    pxrInternal__aapl__pxrReserved__::Tf_MallocPathNode::_BuildTree(v8, &v34, a1 + 24, a2);
    v30[0] = (void **)v35;
    sub_20BECEAE0(v30);
    for (i = 536; i != 584; i += 24)
      *(uint64_t *)((char *)&v34 + i) = 0;
    memset(v35, 0, sizeof(v35));
    __dmb(0xBu);
    v34 = 0;
    __dmb(0xBu);
    v36 = 0;
    memset(v37, 0, 48);
    *(_QWORD *)&v35[0] = v37;
    __dmb(0xBu);
    v34 = 1;
    sub_20BECC5C0(a1 + 24, &v34, v9);
    v11 = v36;
    __dmb(0xBu);
    sub_20BECC6D8((uint64_t *)a1, v11);
    sub_20BECA10C((unint64_t)&v34, (unint64_t *)v30);
    while (v31 != v33 || v30[0] != v32)
    {
      sub_20BECA178(v30, v12, v13);
      sub_20BDDC0E4(__p, **(char ***)(v31 + 24));
      sub_20BECA178(v30, v15, v16);
      v17 = atomic_load((unint64_t *)(*(_QWORD *)(v31 + 24) + 8));
      v29 = v17;
      v18 = *(_QWORD *)(a1 + 8);
      if (v18 >= *(_QWORD *)(a1 + 16))
      {
        v21 = sub_20BED6828((uint64_t *)a1, (__int128 *)__p);
      }
      else
      {
        sub_20BED67BC((_QWORD *)a1, (__int128 *)__p);
        v21 = v18 + 32;
      }
      *(_QWORD *)(a1 + 8) = v21;
      sub_20BECA178(v30, v19, v20);
      v22 = *(void ***)(v31 + 24);
      if (v22)
      {
        v23 = *v22;
        *v22 = 0;
        if (v23)
          operator delete[](v23);
        operator delete(v22);
      }
      if (v28 < 0)
        operator delete(__p[0]);
      sub_20BECA1FC(v30);
    }
    pxrInternal__aapl__pxrReserved__::Tf_MallocGlobalData::_BuildUniqueMallocStacks((uint64_t)v5, a1);
    sub_20BECC768((unint64_t *)&v34);
    sub_20BECC0B0((uint64_t)&v38, v24, v25);
    *v40 = 0;
  }
  return v5 != 0;
}

void sub_20BECC54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  char *v28;

  a16 = v24 + 8;
  sub_20BECEAE0((void ***)&a16);
  sub_20BECC0B0(v25 - 88, v27, v28);
  **(_DWORD **)(v25 - 72) = 0;
  _Unwind_Resume(a1);
}

char *sub_20BECC5C0(uint64_t a1, uint64_t *a2, char *a3)
{
  char *v5;
  char *result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  if (!a1)
  {
    v16 = "tf/mallocTag.cpp";
    v17 = "_GetCallSites";
    v18 = 1092;
    v19 = "void pxrInternal__aapl__pxrReserved__::_GetCallSites(TfMallocTag::CallTree::PathNode *, Tf_MallocCallSiteTable *)";
    v20 = 0;
    v21 = 4;
    v15 = "node";
    goto LABEL_13;
  }
  if (!a2)
  {
    v16 = "tf/mallocTag.cpp";
    v17 = "_GetCallSites";
    v18 = 1093;
    v19 = "void pxrInternal__aapl__pxrReserved__::_GetCallSites(TfMallocTag::CallTree::PathNode *, Tf_MallocCallSiteTable *)";
    v20 = 0;
    v21 = 4;
    v15 = "table";
LABEL_13:
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v16, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, v15);
  }
  v5 = (char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v5 = *(char **)v5;
  result = (char *)sub_20BECFB0C(a2, v5);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = (unint64_t *)(result + 8);
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 + v9, v10));
  v12 = *(char **)(a1 + 48);
  v13 = *(const char **)(a1 + 56);
  v16 = v12;
  v17 = v13;
  while (v12 != v13)
  {
    v14 = sub_20BECFCA8((uint64_t *)&v16, v7, v8);
    sub_20BECC5C0(v14, a2);
    result = (char *)sub_20BECFD24(&v16);
    v12 = v16;
    v13 = v17;
  }
  return result;
}

uint64_t sub_20BECC6D8(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BED2F10(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_20BED6668(a1, v7);
    return sub_20BED3064((uint64_t)v7);
  }
  return result;
}

void sub_20BECC754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BED3064((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t *sub_20BECC768(unint64_t *a1)
{
  unint64_t v2;
  void *v3;
  unint64_t i;
  unint64_t v5;
  unint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  _QWORD **v11;
  _QWORD *v12;

  v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  for (i = sub_20BEB4B94(v2); ; --i)
  {
    v5 = 0;
    v6 = &a1[i];
    v9 = v6[1];
    v7 = (uint64_t *)(v6 + 1);
    v8 = v9;
    v10 = i <= 1 ? 1 : i;
    do
    {
      v11 = (_QWORD **)(v8 + 24 * v5 + 16);
      while (1)
      {
        v12 = *v11;
        if ((unint64_t)*v11 <= 0x3F)
          break;
        *v11 = (_QWORD *)*v12;
        tbb::internal::deallocate_via_handler_v3((uint64_t)v12, v3);
      }
      ++v5;
    }
    while (!(v5 >> v10));
    if (i < 8 && i != 1)
      break;
    tbb::internal::deallocate_via_handler_v3(*v7, v3);
LABEL_14:
    *v7 = 0;
  }
  if (i)
    goto LABEL_14;
  __dmb(0xBu);
  *a1 = 1;
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::GetTotalBytes(pxrInternal__aapl__pxrReserved__::TfMallocTag *this)
{
  if (qword_254785110)
    return atomic_load((unint64_t *)(qword_254785110 + 24));
  else
    return 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::GetMaxTotalBytes(pxrInternal__aapl__pxrReserved__::TfMallocTag *this)
{
  if (qword_254785110)
    return atomic_load((unint64_t *)(qword_254785110 + 32));
  else
    return 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(char *a1, _DWORD *a2, char *a3)
{
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  int v17;
  _DWORD *v18;

  if (!a1 || !*a1)
    return 0;
  v4 = a2;
  if (!a2)
    sub_20C96B11C();
  sub_20BECEA48(&v18, a2, a3);
  v16 = qword_254785110;
  v17 = -1;
  sub_20BECED94((uint64_t)&v16, v5, v6);
  v7 = sub_20BECFB0C((uint64_t *)(qword_254785110 + 624), a1);
  v8 = v4[2];
  if (v4[1] == v8)
    v9 = (uint64_t *)(qword_254785110 + 16);
  else
    v9 = (uint64_t *)(v8 - 8);
  v10 = sub_20BECC9B0(qword_254785110, *v9, (uint64_t)v7);
  sub_20BECC0B0((uint64_t)&v16, v11, v12);
  sub_20BECCAEC(v4, (uint64_t)v7, (uint64_t)v10);
  sub_20BECC0B0((uint64_t)&v16, v13, v14);
  *v18 = 0;
  return v4;
}

void sub_20BECC974()
{
  JUMPOUT(0x20BECC8C4);
}

void sub_20BECC980(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, _DWORD *a12)
{
  sub_20BECC0B0((uint64_t)&a10, a2, a3);
  *a12 = 0;
  _Unwind_Resume(a1);
}

_QWORD *sub_20BECC9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  __int128 v12;

  *(_QWORD *)&v12 = a2;
  *((_QWORD *)&v12 + 1) = a3;
  v4 = (uint64_t *)(a1 + 1208);
  v9 = 0;
  v10 = 0;
  v11 = 0;
  if ((sub_20BED07B8((uint64_t *)(a1 + 1208), 0, &v12, (uint64_t)&v9, 0, 0) & 1) != 0)
  {
    v5 = *(_QWORD **)(v11 + 32);
  }
  else
  {
    v11 = 0;
    sub_20BEBF29C(&v9);
    v5 = operator new(0x20uLL);
    v5[1] = 0;
    v5[2] = 0;
    *v5 = a3;
    *((_BYTE *)v5 + 24) = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v6 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x28);
    *v6 = 0;
    v6[1] = 0;
    *((_OWORD *)v6 + 1) = v12;
    v6[4] = v5;
    if (!sub_20BED07B8(v4, 1, v6 + 2, (uint64_t)&v9, 1, v6))
    {
      v7 = *(_QWORD *)(v11 + 32);
      v11 = 0;
      sub_20BEBF29C(&v9);
      operator delete(v5);
      return (_QWORD *)v7;
    }
  }
  v11 = 0;
  sub_20BEBF29C(&v9);
  return v5;
}

void sub_20BECCAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;

  a11 = 0;
  sub_20BEBF29C(&a9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void sub_20BECCAEC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a2;
  sub_20BED0E28(a1 + 4, &v33, &v33);
  if ((v5 & 1) != 0)
  {
    v8 = (_QWORD *)a1[2];
  }
  else
  {
    atomic_store(1u, (unsigned __int8 *)(a3 + 24));
    v6 = a1[3];
    v7 = (_QWORD *)a1[2];
    if ((unint64_t)v7 >= v6)
    {
      v9 = a1[1];
      v10 = ((uint64_t)v7 - v9) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        goto LABEL_37;
      v11 = v6 - v9;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 3), v13);
      else
        v14 = 0;
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      *(_QWORD *)v15 = 0;
      v8 = v15 + 8;
      v18 = (char *)a1[1];
      v17 = (char *)a1[2];
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v15 - 1) = v19;
          v15 -= 8;
        }
        while (v17 != v18);
        v17 = (char *)a1[1];
      }
      a1[1] = v15;
      a1[2] = v8;
      a1[3] = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v7 = 0;
      v8 = v7 + 1;
    }
    a1[2] = v8;
  }
  v20 = a1[3];
  if ((unint64_t)v8 < v20)
  {
    *v8 = a3;
    v21 = v8 + 1;
    goto LABEL_36;
  }
  v22 = a1[1];
  v23 = ((uint64_t)v8 - v22) >> 3;
  if ((unint64_t)(v23 + 1) >> 61)
LABEL_37:
    sub_20BDDF694();
  v24 = v20 - v22;
  v25 = v24 >> 2;
  if (v24 >> 2 <= (unint64_t)(v23 + 1))
    v25 = v23 + 1;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v26 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v26 = v25;
  if (v26)
    v27 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 3), v26);
  else
    v27 = 0;
  v28 = &v27[8 * v23];
  v29 = &v27[8 * v26];
  *(_QWORD *)v28 = a3;
  v21 = v28 + 8;
  v31 = (char *)a1[1];
  v30 = (char *)a1[2];
  if (v30 != v31)
  {
    do
    {
      v32 = *((_QWORD *)v30 - 1);
      v30 -= 8;
      *((_QWORD *)v28 - 1) = v32;
      v28 -= 8;
    }
    while (v30 != v31);
    v30 = (char *)a1[1];
  }
  a1[1] = v28;
  a1[2] = v21;
  a1[3] = v29;
  if (v30)
    operator delete(v30);
LABEL_36:
  a1[2] = v21;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if (!result)
    sub_20C96B11C();
  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  v3 = *(_QWORD **)(v1 - 8);
  *(_QWORD *)(result + 16) = v1 - 8;
  if (v2 == v1 - 8)
    return sub_20BED16E8(result + 32, v3, bswap64(0x9E3779B97F4A7C55 * *v3));
  v5 = *(_QWORD *)(v1 - 16);
  v4 = v1 - 16;
  if (v5)
    return sub_20BED16E8(result + 32, v3, bswap64(0x9E3779B97F4A7C55 * *v3));
  *(_QWORD *)(result + 16) = v4;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::CallTree::GetPrettyPrintString(uint64_t a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, std::string *a4@<X8>)
{
  _OWORD *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  void **v14;
  std::string::size_type v15;
  const char *v16;
  char *v17;
  void **v18;
  std::string::size_type v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  std::string *v25;
  void **v26;
  std::string::size_type v27;
  const char *v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void **v33;
  std::string::size_type v34;
  void **v35;
  std::string::size_type v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  std::string::size_type v42;
  const char *v43;
  char *v44;
  std::string *v45;
  void **v46;
  std::string::size_type v47;
  void *v48;
  __int128 v49;
  std::string *v50;
  __int128 v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  void **v56;
  std::string::size_type v57;
  uint64_t v58;
  char *v59;
  double v60;
  uint64_t v61;
  char *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  BOOL v66;
  uint64_t v67;
  const char *v68;
  char *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  const std::string *v73;
  std::string *v74;
  int v75;
  std::string::size_type v76;
  const char *v77;
  char *v78;
  const char *v79;
  char *v80;
  std::string *v81;
  std::string *v82;
  std::string *v83;
  std::string *v84;
  std::string::size_type size;
  unint64_t v86;
  void *__p[2];
  int64_t v88;
  void *v89;
  void *v90[2];
  char v91;
  std::string::value_type __s[23];
  char v93;
  std::string v94;
  std::string v95;
  std::string v96;
  std::string v97;
  std::string v98;
  std::string v99;
  std::string v100;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  v8 = operator new(0x58uLL);
  v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  *(_OWORD *)&v99.__r_.__value_.__r.__words[1] = xmmword_20CA59F40;
  *(_QWORD *)&v9 = 0x2D2D2D2D2D2D2D2DLL;
  *((_QWORD *)&v9 + 1) = 0x2D2D2D2D2D2D2D2DLL;
  *v8 = v9;
  v8[1] = v9;
  v8[2] = v9;
  v8[3] = v9;
  v8[4] = v9;
  *((_BYTE *)v8 + 80) = 0;
  v10 = std::string::insert(&v99, 0, "\n");
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v100.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v100.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v100, "\n");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v88 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (v88 >= 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if (v88 >= 0)
    v15 = HIBYTE(v88);
  else
    v15 = (std::string::size_type)__p[1];
  std::string::append(a4, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(v88) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v99.__r_.__value_.__l.__data_);
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\nMalloc Tag Report\n\n\n", v16, v17);
  if (v88 >= 0)
    v18 = __p;
  else
    v18 = (void **)__p[0];
  if (v88 >= 0)
    v19 = HIBYTE(v88);
  else
    v19 = (std::string::size_type)__p[1];
  std::string::append(a4, (const std::string::value_type *)v18, v19);
  if (SHIBYTE(v88) < 0)
    operator delete(__p[0]);
  if (qword_254785110)
    v22 = atomic_load((unint64_t *)(qword_254785110 + 24));
  else
    v22 = 0;
  sub_20BED1834(v22, v20, v21, &v100);
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v25 = &v100;
  else
    v25 = (std::string *)v100.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Total bytes = %s\n\n\n", v23, v24, v25);
  if (v88 >= 0)
    v26 = __p;
  else
    v26 = (void **)__p[0];
  if (v88 >= 0)
    v27 = HIBYTE(v88);
  else
    v27 = (std::string::size_type)__p[1];
  std::string::append(a4, (const std::string::value_type *)v26, v27);
  if (SHIBYTE(v88) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
  if ((a2 & 0xFFFFFFFD) == 0)
  {
    v100.__r_.__value_.__r.__words[0] = 0;
    v30 = sub_20BECD748(a4, (const std::string *)(a1 + 24), 0, 0, 0, (unint64_t *)&v100, a3);
    if (v100.__r_.__value_.__r.__words[0] >= a3)
    {
      v31 = qword_254785110;
      if (qword_254785110)
        v31 = atomic_load((unint64_t *)(qword_254785110 + 24));
      if (v30 != v31)
      {
        v32 = qword_254785110;
        if (qword_254785110)
          v32 = atomic_load((unint64_t *)(qword_254785110 + 24));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\nWARNING: limit of %zu nodes visted, but only %zu bytes of %zu accounted for.  Running with a larger maxPrintedNodes will produce more accurate results.\n", v28, v29, a3, v30, v32);
        if (v88 >= 0)
          v33 = __p;
        else
          v33 = (void **)__p[0];
        if (v88 >= 0)
          v34 = HIBYTE(v88);
        else
          v34 = (std::string::size_type)__p[1];
        std::string::append(a4, (const std::string::value_type *)v33, v34);
        if (SHIBYTE(v88) < 0)
          operator delete(__p[0]);
      }
    }
  }
  if ((a2 - 1) <= 1)
  {
    v86 = *(_QWORD *)(a1 + 24);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"\n\nCall Sites\n\n", v28, v29);
    if (v88 >= 0)
      v35 = __p;
    else
      v35 = (void **)__p[0];
    if (v88 >= 0)
      v36 = HIBYTE(v88);
    else
      v36 = (std::string::size_type)__p[1];
    std::string::append(a4, (const std::string::value_type *)v35, v36);
    if (SHIBYTE(v88) < 0)
      operator delete(__p[0]);
    *(_OWORD *)&v100.__r_.__value_.__r.__words[1] = 0uLL;
    v100.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100.__r_.__value_.__l.__size_;
    *(_OWORD *)__p = *(_OWORD *)a1;
    while (__p[0] != __p[1])
    {
      v39 = *sub_20BED1A54(__p, (uint64_t)v37, v38);
      v42 = *sub_20BED1A54(__p, v40, v41);
      v99.__r_.__value_.__r.__words[0] = *(_QWORD *)(v39 + 24);
      v99.__r_.__value_.__l.__size_ = v42;
      sub_20BED1C6C((uint64_t **)&v100, (unint64_t *)&v99, (uint64_t *)&v99);
      sub_20BED1ACC(__p);
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%%-%lds %%%lds %%%lds\n", v37, v38, 72, 15, 15);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = &v99;
    else
      v45 = (std::string *)v99.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v45, v43, v44, "NAME", "BYTES", "%ROOT");
    if (v88 >= 0)
      v46 = __p;
    else
      v46 = (void **)__p[0];
    if (v88 >= 0)
      v47 = HIBYTE(v88);
    else
      v47 = (std::string::size_type)__p[1];
    std::string::append(a4, (const std::string::value_type *)v46, v47);
    if (SHIBYTE(v88) < 0)
      operator delete(__p[0]);
    v48 = operator new(0x50uLL);
    v94.__r_.__value_.__r.__words[0] = (std::string::size_type)v48;
    *(_OWORD *)&v94.__r_.__value_.__r.__words[1] = xmmword_20CA59F50;
    *(_QWORD *)&v49 = 0x2D2D2D2D2D2D2D2DLL;
    *((_QWORD *)&v49 + 1) = 0x2D2D2D2D2D2D2D2DLL;
    *(_OWORD *)v48 = v49;
    *((_OWORD *)v48 + 1) = v49;
    *((_OWORD *)v48 + 2) = v49;
    *((_OWORD *)v48 + 3) = v49;
    strcpy((char *)v48 + 64, "--------");
    std::string::push_back(&v94, 32);
    v95 = v94;
    memset(&v94, 0, sizeof(v94));
    v93 = 15;
    strcpy(__s, "---------------");
    v50 = std::string::append(&v95, __s, 0xFuLL);
    v51 = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v96.__r_.__value_.__r.__words[2] = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v96.__r_.__value_.__l.__data_ = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    std::string::push_back(&v96, 32);
    v97 = v96;
    memset(&v96, 0, sizeof(v96));
    v91 = 15;
    strcpy((char *)v90, "---------------");
    v52 = std::string::append(&v97, (const std::string::value_type *)v90, 0xFuLL);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v98.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v98.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = std::string::append(&v98, "\n\n");
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v88 = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    if (v88 >= 0)
      v56 = __p;
    else
      v56 = (void **)__p[0];
    if (v88 >= 0)
      v57 = HIBYTE(v88);
    else
      v57 = (std::string::size_type)__p[1];
    std::string::append(a4, (const std::string::value_type *)v56, v57);
    if (SHIBYTE(v88) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (v91 < 0)
      operator delete(v90[0]);
    if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v97.__r_.__value_.__l.__data_);
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    if (v93 < 0)
      operator delete(*(void **)__s);
    if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v95.__r_.__value_.__l.__data_);
    if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v94.__r_.__value_.__l.__data_);
    __p[0] = &v100.__r_.__value_.__r.__words[1];
    __p[1] = &v100.__r_.__value_.__r.__words[1];
    v88 = v100.__r_.__value_.__r.__words[0];
    v89 = (void *)v100.__r_.__value_.__r.__words[0];
    v60 = (double)v86;
    while (__p[1] != v89)
    {
      v63 = *(_QWORD **)(sub_20BED1B48((uint64_t)__p, v58, v59) + 8);
      v64 = (_QWORD *)*v63;
      if (*v63)
      {
        do
        {
          v65 = v64;
          v64 = (_QWORD *)v64[1];
        }
        while (v64);
      }
      else
      {
        do
        {
          v65 = (_QWORD *)v63[2];
          v66 = *v65 == (_QWORD)v63;
          v63 = v65;
        }
        while (v66);
      }
      v67 = v65[4];
      v70 = *(_QWORD **)(sub_20BED1B48((uint64_t)__p, v61, v62) + 8);
      v71 = (_QWORD *)*v70;
      if (*v70)
      {
        do
        {
          v72 = v71;
          v71 = (_QWORD *)v71[1];
        }
        while (v71);
      }
      else
      {
        do
        {
          v72 = (_QWORD *)v70[2];
          v66 = *v72 == (_QWORD)v70;
          v70 = v72;
        }
        while (v66);
      }
      v73 = (const std::string *)v72[5];
      memset(&v98, 0, sizeof(v98));
      if (v86)
      {
        if ((double)(unint64_t)v67 * 100.0 / v60 < 0.1)
          break;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%.1f%%", v68, v69, (double)(unint64_t)v67 * 100.0 / v60);
        if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v98.__r_.__value_.__l.__data_);
        v98 = v97;
      }
      if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v74 = &v99;
      else
        v74 = (std::string *)v99.__r_.__value_.__r.__words[0];
      std::string::basic_string(&v96, v73, 0, 0x48uLL, (std::allocator<char> *)&v95);
      v75 = SHIBYTE(v96.__r_.__value_.__r.__words[2]);
      v76 = v96.__r_.__value_.__r.__words[0];
      sub_20BED1834(v67, v77, v78, &v95);
      if (v75 >= 0)
        v81 = &v96;
      else
        v81 = (std::string *)v76;
      v82 = (std::string *)v95.__r_.__value_.__r.__words[0];
      if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v82 = &v95;
      if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v83 = &v98;
      else
        v83 = (std::string *)v98.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)v74, v79, v80, v81, v82, v83);
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v84 = &v97;
      else
        v84 = (std::string *)v97.__r_.__value_.__r.__words[0];
      if ((v97.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      else
        size = v97.__r_.__value_.__l.__size_;
      std::string::append(a4, (const std::string::value_type *)v84, size);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v97.__r_.__value_.__l.__data_);
      if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v95.__r_.__value_.__l.__data_);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v96.__r_.__value_.__l.__data_);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v98.__r_.__value_.__l.__data_);
      sub_20BED1BC4((uint64_t)__p);
    }
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    sub_20BE6100C((uint64_t)&v100, (_QWORD *)v100.__r_.__value_.__l.__size_);
  }
}

void sub_20BECD4FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v58 + 23) < 0)
    operator delete(*(void **)v58);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20BECD748(std::string *a1, const std::string *a2, char *a3, unint64_t a4, size_t a5, unint64_t *a6, unint64_t a7)
{
  unint64_t v11;
  std::string *v14;
  std::string::size_type size;
  void *v16;
  __int128 v17;
  const char *v18;
  char *v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  char *v25;
  __int128 v26;
  int v27;
  char v28;
  size_t v29;
  std::string *p_b;
  std::string::size_type v31;
  unint64_t v32;
  std::string *v33;
  int v34;
  std::string::size_type v35;
  const char *v36;
  char *v37;
  const char *v38;
  char *v39;
  std::string *v40;
  std::string *p_p;
  std::string *v42;
  std::string::size_type v43;
  const char *v44;
  char *v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  std::string *v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  std::string::size_type v56;
  std::string::pointer i;
  size_t v59;
  std::string v60;
  std::string __p;
  std::string v62;
  std::string __b;
  std::string v64;

  v11 = (unint64_t)a3;
  if (!a5)
  {
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%-72s %15s%15s %5s %5s %5s\n", (const char *)a2, a3, "TAGNAME", "BytesIncl", "BytesExcl", "%Prnt", "% Exc", "%Totl");
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v64;
    else
      v14 = (std::string *)v64.__r_.__value_.__r.__words[0];
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    else
      size = v64.__r_.__value_.__l.__size_;
    std::string::append(a1, (const std::string::value_type *)v14, size);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    v16 = operator new(0x50uLL);
    *(_QWORD *)&v17 = 0x2D2D2D2D2D2D2D2DLL;
    *((_QWORD *)&v17 + 1) = 0x2D2D2D2D2D2D2D2DLL;
    *(_OWORD *)v16 = v17;
    *((_OWORD *)v16 + 1) = v17;
    *((_OWORD *)v16 + 2) = v17;
    *((_OWORD *)v16 + 3) = v17;
    strcpy((char *)v16 + 64, "--------");
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%-72s %12s%12s %5s %5s %5s\n\n", v18, v19, v16, " --------------", " --------------", "-----", "-----", "-----");
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v64;
    else
      v20 = (std::string *)v64.__r_.__value_.__r.__words[0];
    if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
    else
      v21 = v64.__r_.__value_.__l.__size_;
    std::string::append(a1, (const std::string::value_type *)v20, v21);
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    operator delete(v16);
    v11 = a2->__r_.__value_.__r.__words[0];
  }
  if (*a6 >= a7)
    return 0;
  ++*a6;
  sub_20BDDC468(&__b, a5, 32);
  std::string::basic_string(&v62, a2 + 1, 0, 72 - a5, (std::allocator<char> *)&__p);
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v62;
  else
    v22 = (std::string *)v62.__r_.__value_.__r.__words[0];
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
  else
    v23 = v62.__r_.__value_.__l.__size_;
  v24 = std::string::append(&__b, (const std::string::value_type *)v22, v23);
  v26 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v26;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  v27 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  v28 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v27 = v64.__r_.__value_.__r.__words[1];
  v29 = (72 - v27);
  v59 = a5;
  if ((int)v29 >= 1)
  {
    sub_20BDDC468(&__b, v29, 32);
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_b = &__b;
    else
      p_b = (std::string *)__b.__r_.__value_.__r.__words[0];
    if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v31 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
    else
      v31 = __b.__r_.__value_.__l.__size_;
    std::string::append(&v64, (const std::string::value_type *)p_b, v31);
    if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__b.__r_.__value_.__l.__data_);
    v28 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
  }
  v32 = a4;
  if (v28 >= 0)
    v33 = &v64;
  else
    v33 = (std::string *)v64.__r_.__value_.__r.__words[0];
  sub_20BED1834(a2->__r_.__value_.__r.__words[0], (const char *)v29, v25, &v62);
  v34 = SHIBYTE(v62.__r_.__value_.__r.__words[2]);
  v35 = v62.__r_.__value_.__r.__words[0];
  sub_20BED1834(a2->__r_.__value_.__l.__size_, v36, v37, &__p);
  v40 = &v62;
  if (v34 < 0)
    v40 = (std::string *)v35;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s %15s%15s ", v38, v39, v33, v40, p_p);
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v42 = &__b;
  else
    v42 = (std::string *)__b.__r_.__value_.__r.__words[0];
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v43 = HIBYTE(__b.__r_.__value_.__r.__words[2]);
  else
    v43 = __b.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)v42, v43);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  memset(&__b, 0, sizeof(__b));
  memset(&v62, 0, sizeof(v62));
  memset(&__p, 0, sizeof(__p));
  if (v32)
  {
    v46 = (float)a2->__r_.__value_.__r.__words[0];
    v47 = (float)(v46 / (float)v32) * 100.0;
    if (v47 > 0.5)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" %.0f%%", v44, v45, v47);
      if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__b.__r_.__value_.__l.__data_);
      __b = v60;
      v46 = (float)a2->__r_.__value_.__r.__words[0];
    }
    v48 = (float)a2->__r_.__value_.__l.__size_;
    v49 = (float)(v48 / v46) * 100.0;
    if (v49 > 0.5)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" %.0f%%", v44, v45, v49);
      if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v62.__r_.__value_.__l.__data_);
      v62 = v60;
      v48 = (float)a2->__r_.__value_.__l.__size_;
    }
    v50 = (float)(v48 / (float)v11) * 100.0;
    if (v50 > 0.5)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" %.0f%%", v44, v45, v50);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v60;
    }
  }
  if (!v59)
  {
    v51 = (float)(100 * a2->__r_.__value_.__l.__size_) / (float)v11;
    if (v51 > 0.5)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)" %.0f%%", v44, v45, v51);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v60;
    }
  }
  v52 = &__b;
  if ((__b.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v52 = (std::string *)__b.__r_.__value_.__r.__words[0];
  v53 = &v62;
  if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v53 = (std::string *)v62.__r_.__value_.__r.__words[0];
  v54 = &__p;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%5s %5s %5s\n", v44, v45, v52, v53, v54);
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v55 = &v60;
  else
    v55 = (std::string *)v60.__r_.__value_.__r.__words[0];
  if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = HIBYTE(v60.__r_.__value_.__r.__words[2]);
  else
    v56 = v60.__r_.__value_.__l.__size_;
  std::string::append(a1, (const std::string::value_type *)v55, v56);
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  for (i = a2[2].__r_.__value_.__l.__data_; i != (std::string::pointer)a2[2].__r_.__value_.__l.__size_; i += 72)
    sub_20BECD748(a1, i, v11, a2->__r_.__value_.__r.__words[0], v59 + 1, a6, a7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v62.__r_.__value_.__l.__data_);
  if (SHIBYTE(__b.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__b.__r_.__value_.__l.__data_);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  return v11;
}

void sub_20BECDD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (a27 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (a41 < 0)
    operator delete(a36);
  if (*(char *)(v41 - 105) < 0)
    operator delete(*(void **)(v41 - 128));
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::CallTree::Report(uint64_t a1, _QWORD *a2)
{
  void *__p[2];
  uint64_t v3;

  __p[0] = 0;
  __p[1] = 0;
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::TfMallocTag::CallTree::Report(a1, a2, (uint64_t)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(__p[0]);
}

void sub_20BECDEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfMallocTag::CallTree::Report(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string *v6;
  std::string::size_type size;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const char *v25;
  char *v26;
  std::string *v27;
  std::string::size_type v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  const char *v32;
  char *v33;
  std::string *v34;
  std::string::size_type v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  const char *v39;
  char *v40;
  std::string *v41;
  std::string::size_type v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  const char *v47;
  char *v48;
  std::string *v49;
  std::string::size_type v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  const char *v54;
  char *v55;
  std::string *v56;
  std::string::size_type v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  const char *v61;
  char *v62;
  std::string *v63;
  std::string::size_type v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  const char *v68;
  char *v69;
  void **v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t i;
  uint64_t v75;
  void *v76;
  __int128 v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  const char *v83;
  char *v84;
  std::string *v85;
  std::string::size_type v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  const char *v90;
  char *v91;
  std::string *v92;
  std::string::size_type v93;
  _QWORD *v94;
  uint64_t v95;
  void *__p[2];
  unsigned __int8 v97;
  std::string v98;
  std::string v99;
  std::string v100;
  std::string v101;
  std::string v102;
  std::string v103;

  sub_20BDDC1C8(a2, (uint64_t)"\nTree view  ==============\n", 27);
  sub_20BDDC1C8(a2, (uint64_t)"      inclusive       exclusive\n", 32);
  sub_20BECE5F4(a2, a1 + 24, 0, a3);
  v95 = a1;
  pxrInternal__aapl__pxrReserved__::TfMallocTag::CallTree::GetPrettyPrintString(a1, 1, 0x186A0uLL, &v103);
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v6 = &v103;
  else
    v6 = (std::string *)v103.__r_.__value_.__r.__words[0];
  if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
  else
    size = v103.__r_.__value_.__l.__size_;
  sub_20BDDC1C8(a2, (uint64_t)v6, size);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  v9 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 104);
  if (v9 != v8)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = (unsigned __int128)((v8 - v9) * (__int128)0x6666666666666667) >> 64;
    v16 = (v15 >> 4) + ((unint64_t)v15 >> 63);
    if (v16 >= 0x64)
      v17 = 100;
    else
      v17 = v16;
    if (v16 <= 1)
      v16 = 1;
    v18 = (uint64_t *)(v9 + 32);
    do
    {
      v19 = *(v18 - 1);
      v10 += v19;
      v14 += *v18;
      if (v11 >= v17)
        v19 = 0;
      v13 += v19;
      if (v11 >= v17)
        v20 = 0;
      else
        v20 = *v18;
      v12 += v20;
      ++v11;
      v18 += 5;
    }
    while (v16 != v11);
    v21 = sub_20BDDC1C8(a2, (uint64_t)"\n\n\n", 3);
    v22 = sub_20BDDC1C8(v21, (uint64_t)"Captured Malloc Stacks\n", 23);
    v23 = sub_20BDDC1C8(v22, (uint64_t)"\n", 1);
    v24 = sub_20BDDC1C8(v23, (uint64_t)"Number of unique captured malloc stacks:          ", 50);
    sub_20BED1834(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v95 + 104) - *(_QWORD *)(v95 + 96)) >> 3), v25, v26, &v103);
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = &v103;
    else
      v27 = (std::string *)v103.__r_.__value_.__r.__words[0];
    if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
    else
      v28 = v103.__r_.__value_.__l.__size_;
    v29 = sub_20BDDC1C8(v24, (uint64_t)v27, v28);
    v30 = sub_20BDDC1C8(v29, (uint64_t)"\n", 1);
    v31 = sub_20BDDC1C8(v30, (uint64_t)"Total allocated memory by captured mallocs:       ", 50);
    sub_20BED1834(v10, v32, v33, &v102);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v34 = &v102;
    else
      v34 = (std::string *)v102.__r_.__value_.__r.__words[0];
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v35 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
    else
      v35 = v102.__r_.__value_.__l.__size_;
    v36 = sub_20BDDC1C8(v31, (uint64_t)v34, v35);
    v37 = sub_20BDDC1C8(v36, (uint64_t)"\n", 1);
    v38 = sub_20BDDC1C8(v37, (uint64_t)"Total number of allocations by captured mallocs:  ", 50);
    sub_20BED1834(v14, v39, v40, &v101);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v101;
    else
      v41 = (std::string *)v101.__r_.__value_.__r.__words[0];
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v42 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
    else
      v42 = v101.__r_.__value_.__l.__size_;
    v43 = sub_20BDDC1C8(v38, (uint64_t)v41, v42);
    v44 = sub_20BDDC1C8(v43, (uint64_t)"\n", 1);
    v45 = sub_20BDDC1C8(v44, (uint64_t)"\n", 1);
    v46 = sub_20BDDC1C8(v45, (uint64_t)"Number of captured malloc stacks in report:       ", 50);
    sub_20BED1834(v17, v47, v48, &v100);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v49 = &v100;
    else
      v49 = (std::string *)v100.__r_.__value_.__r.__words[0];
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v50 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    else
      v50 = v100.__r_.__value_.__l.__size_;
    v51 = sub_20BDDC1C8(v46, (uint64_t)v49, v50);
    v52 = sub_20BDDC1C8(v51, (uint64_t)"\n", 1);
    v53 = sub_20BDDC1C8(v52, (uint64_t)"Allocated memory by mallocs in report:            ", 50);
    sub_20BED1834(v13, v54, v55, &v99);
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = &v99;
    else
      v56 = (std::string *)v99.__r_.__value_.__r.__words[0];
    if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
    else
      v57 = v99.__r_.__value_.__l.__size_;
    v58 = sub_20BDDC1C8(v53, (uint64_t)v56, v57);
    v59 = sub_20BDDC1C8(v58, (uint64_t)"\n", 1);
    v60 = sub_20BDDC1C8(v59, (uint64_t)"Number of allocations by mallocs in report:       ", 50);
    sub_20BED1834(v12, v61, v62, &v98);
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = &v98;
    else
      v63 = (std::string *)v98.__r_.__value_.__r.__words[0];
    if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = HIBYTE(v98.__r_.__value_.__r.__words[2]);
    else
      v64 = v98.__r_.__value_.__l.__size_;
    v65 = sub_20BDDC1C8(v60, (uint64_t)v63, v64);
    v66 = sub_20BDDC1C8(v65, (uint64_t)"\n", 1);
    v67 = sub_20BDDC1C8(v66, (uint64_t)"Percentage of allocated memory covered by report: ", 50);
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%.1f%%", v68, v69, (double)(unint64_t)v13 * 100.0 / (double)(unint64_t)v10);
    if ((v97 & 0x80u) == 0)
      v70 = __p;
    else
      v70 = (void **)__p[0];
    if ((v97 & 0x80u) == 0)
      v71 = v97;
    else
      v71 = (uint64_t)__p[1];
    v72 = sub_20BDDC1C8(v67, (uint64_t)v70, v71);
    sub_20BDDC1C8(v72, (uint64_t)"\n\n", 2);
    if ((char)v97 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v98.__r_.__value_.__l.__data_);
    if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v99.__r_.__value_.__l.__data_);
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v100.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v103.__r_.__value_.__l.__data_);
      if (!v17)
        return;
    }
    else if (!v17)
    {
      return;
    }
    v73 = 0;
    for (i = 0; i != v17; ++i)
    {
      v75 = *(_QWORD *)(v95 + 96);
      v76 = operator new(0x68uLL);
      *(_QWORD *)&v77 = 0x2D2D2D2D2D2D2D2DLL;
      *((_QWORD *)&v77 + 1) = 0x2D2D2D2D2D2D2D2DLL;
      *(_OWORD *)v76 = v77;
      *((_OWORD *)v76 + 1) = v77;
      *((_OWORD *)v76 + 2) = v77;
      *((_OWORD *)v76 + 3) = v77;
      *((_OWORD *)v76 + 4) = v77;
      *((_OWORD *)v76 + 5) = v77;
      strcpy((char *)v76 + 96, "----");
      v78 = sub_20BDDC1C8(a2, (uint64_t)v76, 100);
      v79 = sub_20BDDC1C8(v78, (uint64_t)"\n", 1);
      sub_20BDDC1C8(v79, (uint64_t)"Captured malloc stack #", 23);
      v80 = (_QWORD *)std::ostream::operator<<();
      v81 = sub_20BDDC1C8(v80, (uint64_t)"\n", 1);
      v82 = sub_20BDDC1C8(v81, (uint64_t)"Size:            ", 17);
      sub_20BED1834(*(_QWORD *)(v75 + v73 + 24), v83, v84, &v103);
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v85 = &v103;
      else
        v85 = (std::string *)v103.__r_.__value_.__r.__words[0];
      if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v86 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
      else
        v86 = v103.__r_.__value_.__l.__size_;
      v87 = sub_20BDDC1C8(v82, (uint64_t)v85, v86);
      v88 = sub_20BDDC1C8(v87, (uint64_t)"\n", 1);
      v89 = sub_20BDDC1C8(v88, (uint64_t)"Num allocations: ", 17);
      sub_20BED1834(*(_QWORD *)(v75 + v73 + 32), v90, v91, &v102);
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v92 = &v102;
      else
        v92 = (std::string *)v102.__r_.__value_.__r.__words[0];
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v93 = HIBYTE(v102.__r_.__value_.__r.__words[2]);
      else
        v93 = v102.__r_.__value_.__l.__size_;
      v94 = sub_20BDDC1C8(v89, (uint64_t)v92, v93);
      sub_20BDDC1C8(v94, (uint64_t)"\n", 1);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      operator delete(v76);
      pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames(a2, (uint64_t *)(v75 + v73), 0);
      v73 += 40;
    }
  }
}

void sub_20BECE4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a22 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  if (a40 < 0)
    operator delete(a35);
  if (a46 < 0)
    operator delete(a41);
  if (*(char *)(v46 - 89) < 0)
    operator delete(*(void **)(v46 - 112));
  _Unwind_Resume(exception_object);
}

void sub_20BECE5F4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  int v14;
  std::string::size_type v15;
  const char *v16;
  char *v17;
  const char *v18;
  char *v19;
  std::string *v20;
  std::string *v21;
  void **v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void *v37;
  int64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  _QWORD *v50;
  std::string v51;
  std::string v52;
  void *__p[2];
  char *v54;
  void *__b[2];
  unsigned __int8 v56;

  if (!*(_QWORD *)a2)
    return;
  sub_20BDDC468(__b, 2 * a3, 32);
  v10 = a3 + 1;
  if (v10 >= 2)
  {
    v11 = 0;
    v12 = v10 >> 1;
    do
    {
      v13 = (void **)__b[0];
      if ((v56 & 0x80u) == 0)
        v13 = __b;
      *((_BYTE *)v13 + v11) = 124;
      v11 += 4;
      --v12;
    }
    while (v12);
  }
  sub_20BED1834(*(_QWORD *)a2, v8, v9, &v52);
  v14 = SHIBYTE(v52.__r_.__value_.__r.__words[2]);
  v15 = v52.__r_.__value_.__r.__words[0];
  sub_20BED1834(*(_QWORD *)(a2 + 8), v16, v17, &v51);
  v20 = &v52;
  if (v14 < 0)
    v20 = (std::string *)v15;
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &v51;
  else
    v21 = (std::string *)v51.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%13s B %13s B %7ld samples    ", v18, v19, v20, v21, *(_QWORD *)(a2 + 16));
  if (SHIBYTE(v54) >= 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if (SHIBYTE(v54) >= 0)
    v23 = HIBYTE(v54);
  else
    v23 = (uint64_t)__p[1];
  sub_20BDDC1C8(a1, (uint64_t)v22, v23);
  if (SHIBYTE(v54) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v52.__r_.__value_.__l.__data_);
  if ((v56 & 0x80u) == 0)
    v24 = __b;
  else
    v24 = (void **)__b[0];
  if ((v56 & 0x80u) == 0)
    v25 = v56;
  else
    v25 = (uint64_t)__b[1];
  v26 = sub_20BDDC1C8(a1, (uint64_t)v24, v25);
  if (!a4)
    goto LABEL_33;
  v27 = *(char *)(a4 + 23);
  if ((v27 & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a4 + 23))
      goto LABEL_34;
    goto LABEL_33;
  }
  if (!*(_QWORD *)(a4 + 8))
  {
LABEL_33:
    a4 = a2 + 24;
    LOBYTE(v27) = *(_BYTE *)(a2 + 47);
  }
LABEL_34:
  if ((v27 & 0x80u) == 0)
    v28 = a4;
  else
    v28 = *(_QWORD *)a4;
  if ((v27 & 0x80u) == 0)
    v29 = v27;
  else
    v29 = *(_QWORD *)(a4 + 8);
  v30 = sub_20BDDC1C8(v26, v28, v29);
  std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
  v31 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  std::ostream::flush();
  __p[0] = 0;
  __p[1] = 0;
  v54 = 0;
  sub_20BE8BBC4(__p, 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 3));
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 48);
  while (v52.__r_.__value_.__r.__words[0] != v52.__r_.__value_.__l.__size_)
  {
    v34 = sub_20BED1D24((uint64_t *)&v52, v32, v33);
    v35 = v34;
    v36 = (char *)__p[1];
    if (__p[1] >= v54)
    {
      v38 = ((char *)__p[1] - (char *)__p[0]) >> 3;
      if ((unint64_t)(v38 + 1) >> 61)
        sub_20BDDF694();
      v39 = (v54 - (char *)__p[0]) >> 2;
      if (v39 <= v38 + 1)
        v39 = v38 + 1;
      if ((unint64_t)(v54 - (char *)__p[0]) >= 0x7FFFFFFFFFFFFFF8)
        v40 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v40 = v39;
      if (v40)
        v41 = (char *)sub_20BDDF6A8((uint64_t)&v54, v40);
      else
        v41 = 0;
      v42 = (uint64_t *)&v41[8 * v38];
      *v42 = v35;
      v37 = v42 + 1;
      v44 = (char *)__p[0];
      v43 = (char *)__p[1];
      if (__p[1] != __p[0])
      {
        do
        {
          v45 = *((_QWORD *)v43 - 1);
          v43 -= 8;
          *--v42 = v45;
        }
        while (v43 != v44);
        v43 = (char *)__p[0];
      }
      __p[0] = v42;
      __p[1] = v37;
      v54 = &v41[8 * v40];
      if (v43)
        operator delete(v43);
    }
    else
    {
      *(_QWORD *)__p[1] = v34;
      v37 = v36 + 8;
    }
    __p[1] = v37;
    sub_20BED1DA0(&v52);
  }
  v46 = 126 - 2 * __clz(((char *)__p[1] - (char *)__p[0]) >> 3);
  v52.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_20BED1E1C;
  if (__p[1] == __p[0])
    v47 = 0;
  else
    v47 = v46;
  sub_20BED1F84((uint64_t)__p[0], (uint64_t *)__p[1], (uint64_t (**)(uint64_t, uint64_t))&v52, v47, 1);
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
  while (v52.__r_.__value_.__r.__words[0] != v52.__r_.__value_.__l.__size_)
  {
    v50 = (_QWORD *)sub_20BED1E8C((uint64_t *)&v52, v48, v49);
    sub_20BECE5F4(a1, *v50, v10, 0);
    sub_20BED1F08(&v52);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((char)v56 < 0)
    operator delete(__b[0]);
}

void sub_20BECE9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a30 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  if (a23 < 0)
    operator delete(a18);
  if (*(char *)(v30 - 65) < 0)
    operator delete(*(void **)(v30 - 88));
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BECEA48(_QWORD *result, _DWORD *a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (!a2)
    sub_20C96B11C();
  *result = a2;
  if (*a2)
  {
    v3[0] = "tf/mallocTag.cpp";
    v3[1] = "_TemporaryDisabler";
    v3[2] = 603;
    v3[3] = "pxrInternal__aapl__pxrReserved__::_TemporaryDisabler::_TemporaryDisabler(TfMallocTag::_ThreadData *)";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_tls._taggingState == _TaggingEnabled");
  }
  *a2 = 1;
  return result;
}

void sub_20BECEAE0(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20BECEB20((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_20BECEB20(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void *v5;

  for (i = *(_QWORD *)(a1 + 8); i != a2; i -= 40)
  {
    if (*(__int16 *)(i - 36) != -1)
    {
      v5 = *(void **)(i - 24);
      if (v5)
      {
        *(_QWORD *)(i - 16) = v5;
        operator delete(v5);
      }
      *(_WORD *)(i - 36) = -1;
    }
  }
  *(_QWORD *)(a1 + 8) = a2;
}

uint64_t sub_20BECEB88(uint64_t a1)
{
  void *v2;

  if (*(__int16 *)(a1 + 4) != -1)
  {
    v2 = *(void **)(a1 + 16);
    if (v2)
    {
      *(_QWORD *)(a1 + 24) = v2;
      operator delete(v2);
    }
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

void sub_20BECEBCC(void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)v4 - 24;
      do
      {
        v8 = v6;
        sub_20BECEBCC(&v8);
        if (*(char *)(v6 - 1) < 0)
          operator delete(*(void **)(v6 - 24));
        v7 = (void *)(v6 - 48);
        v6 -= 72;
      }
      while (v7 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20BECEC54(uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 3;
    do
    {
      v7 = v5;
      sub_20BECEBCC(&v7);
      if (*((char *)v5 - 1) < 0)
        operator delete(*(v5 - 3));
      v6 = v5 - 6;
      v5 -= 9;
    }
    while (v6 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_20BECECC4(uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 48);
  sub_20BECEBCC(&v3);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
}

uint64_t sub_20BECED08(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  if (*(_DWORD *)(a1 + 8) != -1)
  {
    v5[0] = "tf/bigRWMutex.h";
    v5[1] = "AcquireWrite";
    v5[2] = 159;
    v5[3] = "void pxrInternal__aapl__pxrReserved__::TfBigRWMutex::ScopedLock::AcquireWrite()";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_acqState == NotAcquired");
  }
  result = pxrInternal__aapl__pxrReserved__::TfBigRWMutex::_AcquireWrite(*(pxrInternal__aapl__pxrReserved__::TfBigRWMutex **)a1);
  *(_DWORD *)(a1 + 8) = -2;
  return result;
}

uint64_t sub_20BECED94(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t result;
  unint64_t v5;
  unsigned __int8 v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD v10[4];
  char v11;
  int v12;

  if (*(_DWORD *)(a1 + 8) != -1)
  {
    v10[0] = "tf/bigRWMutex.h";
    v10[1] = "AcquireRead";
    v10[2] = 152;
    v10[3] = "void pxrInternal__aapl__pxrReserved__::TfBigRWMutex::ScopedLock::AcquireRead()";
    v11 = 0;
    v12 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v10, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_acqState == NotAcquired");
  }
  result = *(_QWORD *)a1;
  v5 = ((unint64_t)(0x779B97F4A7C55 * a1) >> 48) & 0xF;
  v6 = atomic_load((unsigned __int8 *)(result + 8));
  if ((v6 & 1) != 0)
    goto LABEL_8;
  v7 = (unsigned int *)(*(_QWORD *)result + (v5 << 7));
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 + 2, v7));
  if ((v8 & 1) != 0)
  {
    do
      v9 = __ldaxr(v7);
    while (__stlxr(v9 - 2, v7));
LABEL_8:
    result = pxrInternal__aapl__pxrReserved__::TfBigRWMutex::_AcquireReadContended(result, (((unint64_t)(0x779B97F4A7C55 * a1) >> 32) >> 16) & 0xF);
  }
  *(_DWORD *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_20BECEE74(uint64_t *a1, uint64_t a2, _QWORD *a3, _OWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v11[2];

  v7 = (uint64_t)(a1 + 72);
  v8 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x28);
  v11[1] = v7;
  *(_QWORD *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)v8 = 0u;
  *(_QWORD *)(v8 + 16) = *a3;
  *(_OWORD *)(v8 + 24) = *a4;
  v11[0] = 0;
  sub_20BECF23C(v11, v9);
  return sub_20BECEF1C(a1, 1, (_QWORD *)(v8 + 16), 0, 0, 0, (uint64_t (*)(uint64_t, _QWORD *, uint64_t))sub_20BECF234, (_QWORD *)v8);
}

uint64_t sub_20BECEF1C(uint64_t *a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, _QWORD *, uint64_t), _QWORD *a8)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  uint64_t v33;
  unint64_t v34;
  tbb::spin_rw_mutex_v3 *v36;
  char v37;
  uint64_t v38;

  v34 = 0;
  v13 = *a3 ^ (*a3 >> 3);
  v14 = *a1;
  __dmb(0xBu);
  v33 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_20BECF53C((uint64_t)&v36, (uint64_t)a1, v14 & v13, 0);
    v15 = (_QWORD *)(v38 + 16);
    do
      v15 = (_QWORD *)*v15;
    while ((unint64_t)v15 >= 0x40 && *a3 != v15[2]);
    if (a2)
      break;
    if (v15)
    {
      v16 = 1;
LABEL_10:
      v17 = (uint64_t)a8;
      if (!a5)
        goto LABEL_51;
      goto LABEL_11;
    }
    v26 = *a1;
    __dmb(0xBu);
    if (v14 == v26 || !sub_20BECF7E4((uint64_t)a1, v13, v14, v26))
    {
      sub_20BEBF29C(&v36);
      return 0;
    }
LABEL_34:
    sub_20BEBF29C(&v36);
    v14 = v26;
  }
  if (v15)
  {
LABEL_7:
    v16 = 0;
    goto LABEL_10;
  }
  if (!a8)
    a8 = (_QWORD *)a7(v33, a3, a4);
  if (!v37)
  {
    v37 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade(v36) & 1) == 0)
    {
      v15 = (_QWORD *)(v38 + 16);
      while (1)
      {
        v15 = (_QWORD *)*v15;
        if ((unint64_t)v15 < 0x40)
          break;
        if (*a3 == v15[2])
        {
          if (!v37)
            goto LABEL_7;
          v27 = (unint64_t *)v36;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 3, v27));
          v16 = 0;
          v37 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  v26 = *a1;
  __dmb(0xBu);
  if (v14 != v26)
  {
    if (!sub_20BECF7E4((uint64_t)a1, v13, v14, v26))
      goto LABEL_36;
    goto LABEL_34;
  }
  v26 = v14;
LABEL_36:
  v34 = sub_20BECF26C((uint64_t)a1, v38, a8, v26);
  v17 = 0;
  v16 = 1;
  v15 = a8;
  if (!a5)
  {
LABEL_51:
    sub_20BEBF29C(&v36);
    goto LABEL_46;
  }
LABEL_11:
  if ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v15 + 1), a6) & 1) == 0)
  {
    sched_yield();
    v18 = 2;
    while ((sub_20BECF35C(a5, (tbb::spin_rw_mutex_v3 *)(v15 + 1), a6) & 1) == 0)
    {
      sched_yield();
      v19 = v18 < 16;
      v18 *= 2;
      if (!v19)
      {
        v20 = (unint64_t *)v36;
        v36 = 0;
        if (v37)
        {
          while (1)
          {
            v21 = *v20;
            v22 = *v20 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v23 = __ldaxr(v20);
                if (v23 != v21)
                  break;
                if (!__stlxr(v22, v20))
                  goto LABEL_25;
              }
              __clrex();
              do
                v24 = __ldxr(v20);
              while (__stxr(v24, v20));
            }
            while (v24 == v21);
            sched_yield();
          }
        }
        do
          v25 = __ldaxr(v20);
        while (__stlxr(v25 - 4, v20));
LABEL_25:
        sched_yield();
        v26 = *a1;
        __dmb(0xBu);
        a8 = (_QWORD *)v17;
        goto LABEL_34;
      }
    }
  }
  sub_20BEBF29C(&v36);
  *(_QWORD *)(a5 + 16) = v15;
  *(_QWORD *)(a5 + 24) = v13;
LABEL_46:
  v29 = (void *)v34;
  if (v34)
    sub_20BECF3A8(a1, v34, v33, 0);
  if (v17)
    tbb::internal::deallocate_via_handler_v3(v17, v29);
  return v16;
}

void sub_20BECF210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BECF234()
{
  return 0;
}

uint64_t *sub_20BECF23C(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

uint64_t sub_20BECF26C(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t a4)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  unint64_t v16;

  v4 = (unint64_t *)(a1 + 520);
  do
  {
    v5 = __ldaxr(v4);
    v6 = v5 + 1;
  }
  while (__stlxr(v6, v4));
  *a3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a3;
  if (v6 >= a4)
  {
    v7 = a4 + 1;
    if (a4 == -1)
    {
      v8 = -1;
    }
    else
    {
      v9 = HIDWORD(v7) != 0;
      if (HIDWORD(v7))
        v7 >>= 32;
      v10 = 32 * v9;
      if (v7 >= 0x10000)
      {
        v7 >>= 16;
        v10 = (32 * v9) | 0x10;
      }
      if (v7 >= 0x100)
      {
        v7 >>= 8;
        v10 |= 8uLL;
      }
      if (v7 >= 0x10)
      {
        v7 >>= 4;
        v10 |= 4uLL;
      }
      if (v7 >= 4)
      {
        v7 >>= 2;
        v10 += 2;
      }
      v8 = ((v7 >> 1) & 1) + v10;
    }
    v11 = a1 + 8 * v8;
    v13 = *(_QWORD *)(v11 + 8);
    v12 = (unint64_t *)(v11 + 8);
    if (!v13)
    {
      do
      {
        while (!__ldaxr(v12))
        {
          if (!__stlxr(2uLL, v12))
            return v8;
        }
        __clrex();
        do
          v16 = __ldxr(v12);
        while (__stxr(v16, v12));
      }
      while (!v16);
    }
  }
  return 0;
}

uint64_t sub_20BECF35C(uint64_t a1, tbb::spin_rw_mutex_v3 *this, int a3)
{
  uint64_t result;

  *(_BYTE *)(a1 + 8) = a3;
  if (a3)
  {
    if (!tbb::spin_rw_mutex_v3::internal_try_acquire_writer(this))
      return 0;
  }
  else
  {
    result = tbb::spin_rw_mutex_v3::internal_try_acquire_reader(this);
    if (!(_DWORD)result)
      return result;
  }
  *(_QWORD *)a1 = this;
  return 1;
}

void sub_20BECF3A8(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;

  if (a2 < 8)
  {
    v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    v10 = v9;
    if ((a4 & 1) != 0)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      v14 = -6096;
      do
      {
        v15 = &v9[v14];
        *((_QWORD *)v15 + 763) = 0;
        *((_QWORD *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    v16 = 0;
    v17 = (int64x2_t)xmmword_20CA59F60;
    v18 = v10 - 48;
    v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    v22 = vdupq_n_s64(2uLL);
    v13 = 255;
    do
    {
      v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_20CA59F70);
      v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if ((vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0] & 1) != 0)
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1] & 1) != 0)
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      v16 += 2;
      v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    v7 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    v8 = v7;
    if ((a4 & 1) != 0)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      v11 = 1 << a2;
      v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_20BECF52C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20BECF53C(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  tbb::spin_rw_mutex_v3 *v10;
  uint64_t v11;
  tbb::spin_rw_mutex_v3 *v12;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (v10 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(_QWORD *)a1 = v10;
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v11 + 16) == 3)
      sub_20BECF660(a2, v11, a3);
  }
  else
  {
    v12 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v12;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v12);
  }
  return a1;
}

void sub_20BECF600(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF29C(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20BECF614(uint64_t a1, unint64_t a2)
{
  unint64_t v4;

  v4 = sub_20BEB4B94(a2);
  return *(_QWORD *)(a1 + 8 * v4 + 8) + 24 * (a2 - ((1 << v4) & 0xFFFFFFFFFFFFFFFELL));
}

_QWORD *sub_20BECF660(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  tbb::spin_rw_mutex_v3 *v15;
  char v16;
  uint64_t v17;

  __dmb(0xBu);
  *(_QWORD *)(a2 + 16) = 0;
  if (a3)
  {
    v5 = HIDWORD(a3);
    if (!HIDWORD(a3))
      v5 = a3;
    v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    v7 = v5 >= 4;
    if (v5 >= 4)
      LODWORD(v5) = v5 >> 2;
    v8 = (v5 >> 1) & 1;
    if (v7)
      v6 += 2;
    v9 = v8 + v6;
  }
  else
  {
    v9 = -1;
  }
  v10 = ~(-1 << v9);
  sub_20BECF53C(&v15, a1, v10 & a3, 0);
  v11 = (_QWORD *)(v17 + 16);
  v12 = *(_QWORD **)(v17 + 16);
  __dmb(0xBu);
  if ((unint64_t)v12 >= 0x40)
  {
    v13 = (2 * v10) | 1;
    while ((((v12[2] >> 3) ^ v12[2]) & v13) == a3)
    {
      if (v16 || (v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v15) & 1) != 0))
      {
        *v11 = *v12;
        *v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v12;
LABEL_24:
        v12 = (_QWORD *)*v11;
        if (*v11 <= 0x3FuLL)
          return sub_20BEBF29C(&v15);
      }
      else
      {
        v11 = (_QWORD *)(v17 + 16);
        v12 = *(_QWORD **)(v17 + 16);
        __dmb(0xBu);
        if ((unint64_t)v12 < 0x40)
          return sub_20BEBF29C(&v15);
      }
    }
    v11 = v12;
    goto LABEL_24;
  }
  return sub_20BEBF29C(&v15);
}

void sub_20BECF7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20BECF7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  if (((a4 ^ a3) & a2) == 0)
    return 0;
  v4 = a3 + 1;
  do
  {
    v5 = (v4 & a2) == 0;
    v4 *= 2;
  }
  while (v5);
  v6 = *(_QWORD *)(sub_20BECF614(a1, (v4 - 1) & a2) + 16);
  __dmb(0xBu);
  return v6 != 3;
}

uint64_t sub_20BECF838(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  return sub_20BECEF1C(a1, 0, a3, 0, a2, 0, (uint64_t (*)(uint64_t, _QWORD *, uint64_t))sub_20BECF234, 0);
}

BOOL sub_20BECF89C(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  _QWORD v15[3];

  v4 = *(_QWORD **)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *a1;
  __dmb(0xBu);
  while (1)
  {
    sub_20BECF53C((uint64_t)v15, (uint64_t)a1, v6 & v5, 1);
    v7 = (_QWORD *)(v15[2] + 16);
    do
    {
      v8 = v7;
      v7 = (_QWORD *)*v7;
      if (v7)
        v9 = v7 == v4;
      else
        v9 = 1;
    }
    while (!v9);
    if (v7)
      break;
    v10 = *a1;
    __dmb(0xBu);
    if (v6 == v10 || !sub_20BECF7E4((uint64_t)a1, v5, v6, v10))
    {
      if (*(_QWORD *)(a2 + 16))
      {
        sub_20BEBF2D0(a2);
        *(_QWORD *)(a2 + 16) = 0;
      }
      sub_20BEBF29C(v15);
      return v7 != 0;
    }
    sub_20BEBF29C(v15);
    v6 = v10;
  }
  *v8 = *v4;
  v11 = (unint64_t *)(a1 + 65);
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  sub_20BEBF29C(v15);
  if (!*(_BYTE *)(a2 + 8))
  {
    *(_BYTE *)(a2 + 8) = 1;
    tbb::spin_rw_mutex_v3::internal_upgrade(*(tbb::spin_rw_mutex_v3 **)a2);
  }
  if (*(_QWORD *)(a2 + 16))
  {
    sub_20BEBF2D0(a2);
    *(_QWORD *)(a2 + 16) = 0;
  }
  tbb::internal::deallocate_via_handler_v3((uint64_t)v4, v13);
  return v7 != 0;
}

void sub_20BECF9D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20BECF9F0(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 *result;
  _QWORD v5[4];
  char v6;
  int v7;

  if (*(_DWORD *)(a1 + 8) != -2)
  {
    v5[0] = "tf/bigRWMutex.h";
    v5[1] = "_ReleaseWrite";
    v5[2] = 186;
    v5[3] = "void pxrInternal__aapl__pxrReserved__::TfBigRWMutex::ScopedLock::_ReleaseWrite()";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_acqState == WriteAcquired");
  }
  result = pxrInternal__aapl__pxrReserved__::TfBigRWMutex::_ReleaseWrite(*(unsigned __int8 **)a1);
  *(_DWORD *)(a1 + 8) = -1;
  return result;
}

uint64_t sub_20BECFA7C(uint64_t result, uint64_t a2, char *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD v6[4];
  char v7;
  int v8;

  v3 = *(unsigned int *)(result + 8);
  if ((v3 & 0x80000000) != 0)
  {
    v6[0] = "tf/bigRWMutex.h";
    v6[1] = "_ReleaseRead";
    v6[2] = 180;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::TfBigRWMutex::ScopedLock::_ReleaseRead()";
    v7 = 0;
    v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "_acqState >= 0");
  }
  v4 = (unsigned int *)(**(_QWORD **)result + (v3 << 7));
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 - 2, v4));
  *(_DWORD *)(result + 8) = -1;
  return result;
}

void *sub_20BECFB0C(uint64_t *a1, char *a2)
{
  void *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *v10;
  void *__p;
  char v12;
  uint64_t v13;
  char *v14;

  v14 = a2;
  __p = 0;
  v12 = 0;
  v13 = 0;
  if ((sub_20BECFDA0(a1, 0, &v14, (uint64_t)&__p, 0, 0) & 1) != 0)
  {
    v4 = *(void **)(v13 + 24);
    v13 = 0;
    sub_20BEBF29C(&__p);
  }
  else
  {
    v13 = 0;
    sub_20BEBF29C(&__p);
    v5 = (uint64_t *)operator new(0x18uLL);
    sub_20BDDC0E4(&__p, a2);
    sub_20BED03DC((uint64_t)v5, (uint64_t)&__p);
    v10 = v5;
    if (SHIBYTE(v13) < 0)
      operator delete(__p);
    __p = 0;
    v12 = 0;
    v13 = 0;
    v6 = *v5;
    v7 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x20);
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = v6;
    *(_QWORD *)(v7 + 24) = v5;
    if (sub_20BECFDA0(a1, 1, (char **)(v7 + 16), (uint64_t)&__p, 1, (_QWORD *)v7))
    {
      v4 = v10;
      v10 = 0;
    }
    else
    {
      v4 = *(void **)(v13 + 24);
    }
    v13 = 0;
    sub_20BEBF29C(&__p);
    v8 = (void **)v10;
    v10 = 0;
    if (v8)
      sub_20BED04C0((int)&v10, v8);
  }
  return v4;
}

void sub_20BECFC40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  operator delete(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20BECFCA8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfMallo"
            "cTag::CallTree::PathNode>>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfMallocTag::Call"
            "Tree::PathNode>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BECFD1C()
{
  JUMPOUT(0x20BECFCCCLL);
}

_QWORD *sub_20BECFD24(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::TfMallocTag::CallTree::PathNode>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::Tf"
            "MallocTag::CallTree::PathNode>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

uint64_t sub_20BECFDA0(uint64_t *a1, int a2, char **a3, uint64_t a4, int a5, _QWORD *a6)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  uint64_t v16;
  int v17;
  BOOL v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  const char *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int64x2_t v37;
  uint64_t v38;
  uint64x2_t v39;
  uint64x2_t v40;
  int8x16_t v41;
  int64x2_t v42;
  uint64x2_t v43;
  int8x16_t v44;
  unsigned int v46;
  tbb::spin_rw_mutex_v3 *v48;
  char v49;
  uint64_t v50;

  v11 = pxrInternal__aapl__pxrReserved__::TfHashCString::operator()((int)&v48, *a3);
  v12 = 0;
  v13 = *a1;
  __dmb(0xBu);
  while (1)
  {
    sub_20BED01CC((uint64_t)&v48, (uint64_t)a1, v13 & v11);
    v14 = v50 + 16;
    v15 = *a3;
    do
      v14 = *(_QWORD *)v14;
    while (v14 >= 0x40 && strcmp(v15, *(const char **)(v14 + 16)));
    if (a2)
      break;
    if (v14)
    {
      v46 = 1;
LABEL_10:
      v16 = (uint64_t)a6;
      if (!a4)
        goto LABEL_61;
      goto LABEL_11;
    }
    v25 = *a1;
    __dmb(0xBu);
    if (v13 == v25 || !sub_20BECF7E4((uint64_t)a1, v11, v13, v25))
    {
      sub_20BEBF29C(&v48);
      return 0;
    }
LABEL_32:
    sub_20BEBF29C(&v48);
    v13 = v25;
  }
  if (v14)
  {
LABEL_7:
    v46 = 0;
    goto LABEL_10;
  }
  if (!v49)
  {
    v49 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade(v48) & 1) == 0)
    {
      v14 = v50 + 16;
      v26 = *a3;
      while (1)
      {
        v14 = *(_QWORD *)v14;
        if (v14 < 0x40)
          break;
        if (!strcmp(v26, *(const char **)(v14 + 16)))
        {
          if (!v49)
            goto LABEL_7;
          v27 = (unint64_t *)v48;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 3, v27));
          v46 = 0;
          v49 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  v25 = *a1;
  __dmb(0xBu);
  if (v13 != v25)
  {
    if (!sub_20BECF7E4((uint64_t)a1, v11, v13, v25))
      goto LABEL_34;
    goto LABEL_32;
  }
  v25 = v13;
LABEL_34:
  v12 = sub_20BECF26C((uint64_t)a1, v50, a6, v25);
  v16 = 0;
  v46 = 1;
  v14 = (unint64_t)a6;
  if (!a4)
  {
LABEL_61:
    sub_20BEBF29C(&v48);
    if (!v12)
      goto LABEL_57;
    goto LABEL_44;
  }
LABEL_11:
  if ((sub_20BECF35C(a4, (tbb::spin_rw_mutex_v3 *)(v14 + 8), a5) & 1) == 0)
  {
    sched_yield();
    v17 = 2;
    while ((sub_20BECF35C(a4, (tbb::spin_rw_mutex_v3 *)(v14 + 8), a5) & 1) == 0)
    {
      sched_yield();
      v18 = v17 < 16;
      v17 *= 2;
      if (!v18)
      {
        v19 = (unint64_t *)v48;
        v48 = 0;
        if (v49)
        {
          while (1)
          {
            v20 = *v19;
            v21 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v22 = __ldaxr(v19);
                if (v22 != v20)
                  break;
                if (!__stlxr(v21, v19))
                  goto LABEL_25;
              }
              __clrex();
              do
                v23 = __ldxr(v19);
              while (__stxr(v23, v19));
            }
            while (v23 == v20);
            sched_yield();
          }
        }
        do
          v24 = __ldaxr(v19);
        while (__stlxr(v24 - 4, v19));
LABEL_25:
        sched_yield();
        v25 = *a1;
        __dmb(0xBu);
        a6 = (_QWORD *)v16;
        goto LABEL_32;
      }
    }
  }
  sub_20BEBF29C(&v48);
  *(_QWORD *)(a4 + 16) = v14;
  *(_QWORD *)(a4 + 24) = v11;
  if (v12)
  {
LABEL_44:
    if (v12 < 8)
    {
      v34 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
      v35 = -6096;
      do
      {
        v36 = v34 + v35;
        *(_QWORD *)(v36 + 6104) = 0;
        *(_QWORD *)(v36 + 6112) = 3;
        v35 += 24;
      }
      while (v35);
      v37 = (int64x2_t)xmmword_20CA59F60;
      v38 = v34 - 48;
      v39 = (uint64x2_t)vdupq_n_s64(7uLL);
      v40 = (uint64x2_t)vdupq_n_s64(1uLL);
      v41 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
      v42 = vdupq_n_s64(2uLL);
      v33 = 255;
      do
      {
        v43 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v35), (int8x16_t)xmmword_20CA59F70);
        v44 = vandq_s8((int8x16_t)vshlq_u64(v40, (uint64x2_t)v37), v41);
        if ((vmovn_s64((int64x2_t)vcgtq_u64(v39, v43)).u8[0] & 1) != 0)
          a1[v35 + 2] = v38 + 24 * v44.i64[0];
        if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v43)).i32[1] & 1) != 0)
          a1[v35 + 3] = v38 + 24 * v44.i64[1];
        v35 += 2;
        v37 = vaddq_s64(v37, v42);
      }
      while (v35 != 8);
    }
    else
    {
      v30 = tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << v12));
      v31 = 1 << v12;
      v32 = (_QWORD *)(v30 + 16);
      do
      {
        *(v32 - 1) = 0;
        *v32 = 3;
        v32 += 3;
        --v31;
      }
      while (v31);
      a1[v12 + 1] = v30;
      v33 = (2 << v12) - 1;
    }
    __dmb(0xBu);
    *a1 = v33;
  }
LABEL_57:
  if (v16)
    tbb::internal::deallocate_via_handler_v3(v16, v29);
  return v46;
}

void sub_20BED0194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8 * v11 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BED01CC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  tbb::spin_rw_mutex_v3 *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  unsigned int v13;
  char v14;
  unint64_t *v15;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  tbb::spin_rw_mutex_v3 *v21;
  char v22;
  uint64_t v23;
  char v24;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v6 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(v6 + 16);
  __dmb(0xBu);
  if (v7 == 3
    && (v8 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v8)))
  {
    *(_QWORD *)a1 = v8;
    v9 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v9 + 16) == 3)
    {
      __dmb(0xBu);
      *(_QWORD *)(v9 + 16) = 0;
      if (a3)
      {
        v10 = HIDWORD(a3);
        if (!HIDWORD(a3))
          v10 = a3;
        v11 = 32 * (HIDWORD(a3) != 0);
        if (v10 >= 0x10000)
        {
          v10 >>= 16;
          v11 = (32 * (HIDWORD(a3) != 0)) | 0x10;
        }
        if (v10 >= 0x100)
        {
          v10 >>= 8;
          v11 |= 8u;
        }
        if (v10 >= 0x10)
        {
          v10 >>= 4;
          v11 |= 4u;
        }
        v12 = v10 >= 4;
        if (v10 >= 4)
          LODWORD(v10) = v10 >> 2;
        v13 = (v10 >> 1) & 1;
        if (v12)
          v11 += 2;
        v14 = v13 + v11;
      }
      else
      {
        v14 = -1;
      }
      v17 = ~(-1 << v14);
      sub_20BED01CC(&v21, a2, v17 & a3);
      v18 = (unint64_t *)(v23 + 16);
      v19 = *(_QWORD *)(v23 + 16);
      __dmb(0xBu);
      if (v19 >= 0x40)
      {
        v20 = (2 * v17) | 1;
        while ((pxrInternal__aapl__pxrReserved__::TfHashCString::operator()((int)&v24, *(char **)(v19 + 16)) & v20) == a3)
        {
          if (v22 || (v22 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v21) & 1) != 0))
          {
            *v18 = *(_QWORD *)v19;
            *(_QWORD *)v19 = *(_QWORD *)(v9 + 16);
            *(_QWORD *)(v9 + 16) = v19;
LABEL_29:
            v19 = *v18;
            if (*v18 <= 0x3F)
              goto LABEL_32;
          }
          else
          {
            v18 = (unint64_t *)(v23 + 16);
            v19 = *(_QWORD *)(v23 + 16);
            __dmb(0xBu);
            if (v19 < 0x40)
              goto LABEL_32;
          }
        }
        v18 = (unint64_t *)v19;
        goto LABEL_29;
      }
LABEL_32:
      sub_20BEBF29C(&v21);
    }
  }
  else
  {
    v15 = (unint64_t *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)a1 = v15;
    tbb::spin_rw_mutex_v3::internal_acquire_reader(v15);
  }
  return a1;
}

void sub_20BED03B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;

  sub_20BEBF29C(&a9);
  sub_20BEBF29C(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_20BED03DC(uint64_t a1, uint64_t a2)
{
  const char *v4;
  size_t v5;
  void *v6;
  const char *v7;
  int v8;
  const char *v9;
  int v10;
  int v11;
  const char *v12;

  if (*(char *)(a2 + 23) >= 0)
    v4 = (const char *)a2;
  else
    v4 = *(const char **)a2;
  v5 = strlen(v4) + 1;
  v6 = operator new[](v5);
  bzero(v6, v5);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v7 = (const char *)a2;
  else
    v7 = *(const char **)a2;
  v8 = pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match((pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *)(qword_254785110 + 1792), v7);
  if (*(char *)(a2 + 23) >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  v10 = pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable::Match((pxrInternal__aapl__pxrReserved__::Tf_MallocTagStringMatchTable *)(qword_254785110 + 1816), v9);
  if (v8)
    v11 = 2;
  else
    v11 = 0;
  *(_DWORD *)(a1 + 16) = v11 | v10;
  if (*(char *)(a2 + 23) >= 0)
    v12 = (const char *)a2;
  else
    v12 = *(const char **)a2;
  strcpy(*(char **)a1, v12);
  return a1;
}

void sub_20BED04A4(_Unwind_Exception *exception_object)
{
  void **v1;
  void *v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    operator delete[](v3);
  _Unwind_Resume(exception_object);
}

void sub_20BED04C0(int a1, void **__p)
{
  void *v3;

  if (__p)
  {
    v3 = *__p;
    *__p = 0;
    if (v3)
      operator delete[](v3);
    operator delete(__p);
  }
}

double sub_20BED04F8(pxrInternal__aapl__pxrReserved__::TfBigRWMutex *a1)
{
  pxrInternal__aapl__pxrReserved__::TfBigRWMutex *v1;
  _OWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t i;
  _OWORD *v6;
  uint64_t j;
  _OWORD *v8;
  uint64_t v9;
  double result;

  v1 = pxrInternal__aapl__pxrReserved__::TfBigRWMutex::TfBigRWMutex(a1);
  v2 = (_OWORD *)((char *)v1 + 568);
  *((_QWORD *)v1 + 2) = 0;
  *((_QWORD *)v1 + 3) = 0;
  v3 = 576;
  *((_QWORD *)v1 + 4) = 0;
  do
  {
    *(_QWORD *)((char *)v1 + v3) = 0;
    v3 += 24;
  }
  while (v3 != 624);
  *((_OWORD *)v1 + 33) = 0u;
  *((_OWORD *)v1 + 34) = 0u;
  *((_OWORD *)v1 + 31) = 0u;
  *((_OWORD *)v1 + 32) = 0u;
  *((_OWORD *)v1 + 29) = 0u;
  *((_OWORD *)v1 + 30) = 0u;
  *((_OWORD *)v1 + 27) = 0u;
  *((_OWORD *)v1 + 28) = 0u;
  *((_OWORD *)v1 + 25) = 0u;
  *((_OWORD *)v1 + 26) = 0u;
  *((_OWORD *)v1 + 23) = 0u;
  *((_OWORD *)v1 + 24) = 0u;
  *((_OWORD *)v1 + 21) = 0u;
  *((_OWORD *)v1 + 22) = 0u;
  *((_OWORD *)v1 + 19) = 0u;
  *((_OWORD *)v1 + 20) = 0u;
  *((_OWORD *)v1 + 17) = 0u;
  *((_OWORD *)v1 + 18) = 0u;
  *((_OWORD *)v1 + 15) = 0u;
  *((_OWORD *)v1 + 16) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 11) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 9) = 0u;
  *((_OWORD *)v1 + 10) = 0u;
  *((_OWORD *)v1 + 7) = 0u;
  *((_OWORD *)v1 + 8) = 0u;
  *((_OWORD *)v1 + 5) = 0u;
  *((_OWORD *)v1 + 6) = 0u;
  *((_OWORD *)v1 + 3) = 0u;
  *((_OWORD *)v1 + 4) = 0u;
  __dmb(0xBu);
  *((_QWORD *)v1 + 5) = 0;
  __dmb(0xBu);
  *((_QWORD *)v1 + 70) = 0;
  *v2 = 0u;
  *(_OWORD *)((char *)v1 + 584) = 0u;
  *(_OWORD *)((char *)v1 + 600) = 0u;
  *((_QWORD *)v1 + 6) = v2;
  __dmb(0xBu);
  v4 = (_OWORD *)((char *)v1 + 1152);
  *((_QWORD *)v1 + 5) = 1;
  for (i = 1160; i != 1208; i += 24)
    *(_QWORD *)((char *)v1 + i) = 0;
  *(_OWORD *)((char *)v1 + 872) = 0u;
  *(_OWORD *)((char *)v1 + 856) = 0u;
  *(_OWORD *)((char *)v1 + 840) = 0u;
  *(_OWORD *)((char *)v1 + 824) = 0u;
  *(_OWORD *)((char *)v1 + 808) = 0u;
  *(_OWORD *)((char *)v1 + 792) = 0u;
  *(_OWORD *)((char *)v1 + 776) = 0u;
  *(_OWORD *)((char *)v1 + 760) = 0u;
  *(_OWORD *)((char *)v1 + 744) = 0u;
  *(_OWORD *)((char *)v1 + 728) = 0u;
  *(_OWORD *)((char *)v1 + 712) = 0u;
  *(_OWORD *)((char *)v1 + 696) = 0u;
  *(_OWORD *)((char *)v1 + 680) = 0u;
  *(_OWORD *)((char *)v1 + 664) = 0u;
  *(_OWORD *)((char *)v1 + 648) = 0u;
  *(_OWORD *)((char *)v1 + 632) = 0u;
  *(_OWORD *)((char *)v1 + 1112) = 0u;
  *(_OWORD *)((char *)v1 + 1128) = 0u;
  *(_OWORD *)((char *)v1 + 1080) = 0u;
  *(_OWORD *)((char *)v1 + 1096) = 0u;
  *(_OWORD *)((char *)v1 + 1048) = 0u;
  *(_OWORD *)((char *)v1 + 1064) = 0u;
  *(_OWORD *)((char *)v1 + 1016) = 0u;
  *(_OWORD *)((char *)v1 + 1032) = 0u;
  *(_OWORD *)((char *)v1 + 984) = 0u;
  *(_OWORD *)((char *)v1 + 1000) = 0u;
  *(_OWORD *)((char *)v1 + 952) = 0u;
  *(_OWORD *)((char *)v1 + 968) = 0u;
  *(_OWORD *)((char *)v1 + 920) = 0u;
  *(_OWORD *)((char *)v1 + 936) = 0u;
  *(_OWORD *)((char *)v1 + 888) = 0u;
  *(_OWORD *)((char *)v1 + 904) = 0u;
  __dmb(0xBu);
  *((_QWORD *)v1 + 78) = 0;
  __dmb(0xBu);
  *((_QWORD *)v1 + 143) = 0;
  *v4 = 0u;
  *((_OWORD *)v1 + 73) = 0u;
  *((_OWORD *)v1 + 74) = 0u;
  *((_QWORD *)v1 + 79) = v4;
  __dmb(0xBu);
  v6 = (_OWORD *)((char *)v1 + 1736);
  *((_QWORD *)v1 + 78) = 1;
  for (j = 1744; j != 1792; j += 24)
    *(_QWORD *)((char *)v1 + j) = 0;
  *((_OWORD *)v1 + 107) = 0u;
  *((_OWORD *)v1 + 106) = 0u;
  *((_OWORD *)v1 + 105) = 0u;
  *((_OWORD *)v1 + 104) = 0u;
  *((_OWORD *)v1 + 103) = 0u;
  *((_OWORD *)v1 + 102) = 0u;
  *((_OWORD *)v1 + 101) = 0u;
  *((_OWORD *)v1 + 100) = 0u;
  *((_OWORD *)v1 + 99) = 0u;
  *((_OWORD *)v1 + 98) = 0u;
  *((_OWORD *)v1 + 97) = 0u;
  *((_OWORD *)v1 + 96) = 0u;
  *((_OWORD *)v1 + 95) = 0u;
  *((_OWORD *)v1 + 94) = 0u;
  *((_OWORD *)v1 + 93) = 0u;
  *((_OWORD *)v1 + 92) = 0u;
  *((_OWORD *)v1 + 91) = 0u;
  *((_OWORD *)v1 + 90) = 0u;
  *((_OWORD *)v1 + 89) = 0u;
  *((_OWORD *)v1 + 88) = 0u;
  *((_OWORD *)v1 + 87) = 0u;
  *((_OWORD *)v1 + 86) = 0u;
  *((_OWORD *)v1 + 85) = 0u;
  *((_OWORD *)v1 + 84) = 0u;
  *((_OWORD *)v1 + 83) = 0u;
  *((_OWORD *)v1 + 82) = 0u;
  *((_OWORD *)v1 + 81) = 0u;
  *((_OWORD *)v1 + 80) = 0u;
  *((_OWORD *)v1 + 79) = 0u;
  *((_OWORD *)v1 + 78) = 0u;
  *((_OWORD *)v1 + 77) = 0u;
  *((_OWORD *)v1 + 76) = 0u;
  __dmb(0xBu);
  *((_QWORD *)v1 + 151) = 0;
  __dmb(0xBu);
  *((_QWORD *)v1 + 216) = 0;
  *v6 = 0u;
  *(_OWORD *)((char *)v1 + 1752) = 0u;
  *(_OWORD *)((char *)v1 + 1768) = 0u;
  *((_QWORD *)v1 + 152) = v6;
  __dmb(0xBu);
  *((_QWORD *)v1 + 151) = 1;
  v8 = (_OWORD *)((char *)v1 + 2368);
  *((_OWORD *)v1 + 112) = 0u;
  *((_OWORD *)v1 + 113) = 0u;
  v9 = 2376;
  *((_OWORD *)v1 + 114) = 0u;
  do
  {
    *(_QWORD *)((char *)v1 + v9) = 0;
    v9 += 24;
  }
  while (v9 != 2424);
  result = 0.0;
  *(_OWORD *)((char *)v1 + 2088) = 0u;
  *(_OWORD *)((char *)v1 + 2072) = 0u;
  *(_OWORD *)((char *)v1 + 2056) = 0u;
  *(_OWORD *)((char *)v1 + 2040) = 0u;
  *(_OWORD *)((char *)v1 + 2024) = 0u;
  *(_OWORD *)((char *)v1 + 2008) = 0u;
  *(_OWORD *)((char *)v1 + 1992) = 0u;
  *(_OWORD *)((char *)v1 + 1976) = 0u;
  *(_OWORD *)((char *)v1 + 1960) = 0u;
  *(_OWORD *)((char *)v1 + 1944) = 0u;
  *(_OWORD *)((char *)v1 + 1928) = 0u;
  *(_OWORD *)((char *)v1 + 1912) = 0u;
  *(_OWORD *)((char *)v1 + 1896) = 0u;
  *(_OWORD *)((char *)v1 + 1880) = 0u;
  *(_OWORD *)((char *)v1 + 1864) = 0u;
  *(_OWORD *)((char *)v1 + 1848) = 0u;
  *(_OWORD *)((char *)v1 + 2328) = 0u;
  *(_OWORD *)((char *)v1 + 2344) = 0u;
  *(_OWORD *)((char *)v1 + 2296) = 0u;
  *(_OWORD *)((char *)v1 + 2312) = 0u;
  *(_OWORD *)((char *)v1 + 2264) = 0u;
  *(_OWORD *)((char *)v1 + 2280) = 0u;
  *(_OWORD *)((char *)v1 + 2232) = 0u;
  *(_OWORD *)((char *)v1 + 2248) = 0u;
  *(_OWORD *)((char *)v1 + 2200) = 0u;
  *(_OWORD *)((char *)v1 + 2216) = 0u;
  *(_OWORD *)((char *)v1 + 2168) = 0u;
  *(_OWORD *)((char *)v1 + 2184) = 0u;
  *(_OWORD *)((char *)v1 + 2136) = 0u;
  *(_OWORD *)((char *)v1 + 2152) = 0u;
  *(_OWORD *)((char *)v1 + 2104) = 0u;
  *(_OWORD *)((char *)v1 + 2120) = 0u;
  __dmb(0xBu);
  *((_QWORD *)v1 + 230) = 0;
  __dmb(0xBu);
  *((_QWORD *)v1 + 295) = 0;
  *v8 = 0u;
  *((_OWORD *)v1 + 149) = 0u;
  *((_OWORD *)v1 + 150) = 0u;
  *((_QWORD *)v1 + 231) = v8;
  __dmb(0xBu);
  *((_QWORD *)v1 + 230) = 1;
  return result;
}

uint64_t sub_20BED07B8(uint64_t *a1, int a2, _QWORD *a3, uint64_t a4, int a5, _QWORD *a6)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v16;
  int v17;
  BOOL v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int64x2_t v37;
  uint64_t v38;
  uint64x2_t v39;
  uint64x2_t v40;
  int8x16_t v41;
  int64x2_t v42;
  uint64x2_t v43;
  int8x16_t v44;
  unsigned int v46;
  tbb::spin_rw_mutex_v3 *v48;
  char v49;
  uint64_t v50;

  v11 = 0;
  v12 = bswap64(0x9E3779B97F4A7C55 * (a3[1] + ((a3[1] + *a3 + (a3[1] + *a3) * (a3[1] + *a3)) >> 1)));
  v13 = *a1;
  __dmb(0xBu);
  while (1)
  {
    sub_20BED0BFC((uint64_t)&v48, (uint64_t)a1, v13 & v12);
    v14 = (_QWORD *)(v50 + 16);
    do
    {
      v14 = (_QWORD *)*v14;
      if ((unint64_t)v14 < 0x40)
        break;
    }
    while (*a3 != v14[2] || a3[1] != v14[3]);
    if (a2)
      break;
    if (v14)
    {
      v46 = 1;
LABEL_14:
      v16 = (uint64_t)a6;
      if (!a4)
        goto LABEL_69;
      goto LABEL_15;
    }
    v25 = *a1;
    __dmb(0xBu);
    if (v13 == v25 || !sub_20BECF7E4((uint64_t)a1, v12, v13, v25))
    {
      sub_20BEBF29C(&v48);
      return 0;
    }
LABEL_36:
    sub_20BEBF29C(&v48);
    v13 = v25;
  }
  if (v14)
  {
LABEL_11:
    v46 = 0;
    goto LABEL_14;
  }
  if (!v49)
  {
    v49 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade(v48) & 1) == 0)
    {
      v14 = (_QWORD *)(v50 + 16);
      while (1)
      {
        v14 = (_QWORD *)*v14;
        if ((unint64_t)v14 < 0x40)
          break;
        if (*a3 == v14[2] && a3[1] == v14[3])
        {
          if (!v49)
            goto LABEL_11;
          v27 = (unint64_t *)v48;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 3, v27));
          v46 = 0;
          v49 = 0;
          goto LABEL_14;
        }
      }
    }
  }
  v25 = *a1;
  __dmb(0xBu);
  if (v13 != v25)
  {
    if (!sub_20BECF7E4((uint64_t)a1, v12, v13, v25))
      goto LABEL_38;
    goto LABEL_36;
  }
  v25 = v13;
LABEL_38:
  v11 = sub_20BECF26C((uint64_t)a1, v50, a6, v25);
  v16 = 0;
  v46 = 1;
  v14 = a6;
  if (!a4)
  {
LABEL_69:
    sub_20BEBF29C(&v48);
    if (!v11)
      goto LABEL_65;
    goto LABEL_52;
  }
LABEL_15:
  if ((sub_20BECF35C(a4, (tbb::spin_rw_mutex_v3 *)(v14 + 1), a5) & 1) == 0)
  {
    sched_yield();
    v17 = 2;
    while ((sub_20BECF35C(a4, (tbb::spin_rw_mutex_v3 *)(v14 + 1), a5) & 1) == 0)
    {
      sched_yield();
      v18 = v17 < 16;
      v17 *= 2;
      if (!v18)
      {
        v19 = (unint64_t *)v48;
        v48 = 0;
        if (v49)
        {
          while (1)
          {
            v20 = *v19;
            v21 = *v19 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v22 = __ldaxr(v19);
                if (v22 != v20)
                  break;
                if (!__stlxr(v21, v19))
                  goto LABEL_29;
              }
              __clrex();
              do
                v23 = __ldxr(v19);
              while (__stxr(v23, v19));
            }
            while (v23 == v20);
            sched_yield();
          }
        }
        do
          v24 = __ldaxr(v19);
        while (__stlxr(v24 - 4, v19));
LABEL_29:
        sched_yield();
        v25 = *a1;
        __dmb(0xBu);
        a6 = (_QWORD *)v16;
        goto LABEL_36;
      }
    }
  }
  sub_20BEBF29C(&v48);
  *(_QWORD *)(a4 + 16) = v14;
  *(_QWORD *)(a4 + 24) = v12;
  if (v11)
  {
LABEL_52:
    if (v11 < 8)
    {
      v34 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
      v35 = -6096;
      do
      {
        v36 = v34 + v35;
        *(_QWORD *)(v36 + 6104) = 0;
        *(_QWORD *)(v36 + 6112) = 3;
        v35 += 24;
      }
      while (v35);
      v37 = (int64x2_t)xmmword_20CA59F60;
      v38 = v34 - 48;
      v39 = (uint64x2_t)vdupq_n_s64(7uLL);
      v40 = (uint64x2_t)vdupq_n_s64(1uLL);
      v41 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
      v42 = vdupq_n_s64(2uLL);
      v33 = 255;
      do
      {
        v43 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v35), (int8x16_t)xmmword_20CA59F70);
        v44 = vandq_s8((int8x16_t)vshlq_u64(v40, (uint64x2_t)v37), v41);
        if ((vmovn_s64((int64x2_t)vcgtq_u64(v39, v43)).u8[0] & 1) != 0)
          a1[v35 + 2] = v38 + 24 * v44.i64[0];
        if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v43)).i32[1] & 1) != 0)
          a1[v35 + 3] = v38 + 24 * v44.i64[1];
        v35 += 2;
        v37 = vaddq_s64(v37, v42);
      }
      while (v35 != 8);
    }
    else
    {
      v30 = tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << v11));
      v31 = 1 << v11;
      v32 = (_QWORD *)(v30 + 16);
      do
      {
        *(v32 - 1) = 0;
        *v32 = 3;
        v32 += 3;
        --v31;
      }
      while (v31);
      a1[v11 + 1] = v30;
      v33 = (2 << v11) - 1;
    }
    __dmb(0xBu);
    *a1 = v33;
  }
LABEL_65:
  if (v16)
    tbb::internal::deallocate_via_handler_v3(v16, v29);
  return v46;
}

void sub_20BED0BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8 * v11 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BED0BFC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  tbb::spin_rw_mutex_v3 *v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  BOOL v12;
  unsigned int v13;
  char v14;
  unint64_t *v15;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  tbb::spin_rw_mutex_v3 *v21;
  char v22;
  uint64_t v23;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v6 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(v6 + 16);
  __dmb(0xBu);
  if (v7 == 3
    && (v8 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v8)))
  {
    *(_QWORD *)a1 = v8;
    v9 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v9 + 16) == 3)
    {
      __dmb(0xBu);
      *(_QWORD *)(v9 + 16) = 0;
      if (a3)
      {
        v10 = HIDWORD(a3);
        if (!HIDWORD(a3))
          v10 = a3;
        v11 = 32 * (HIDWORD(a3) != 0);
        if (v10 >= 0x10000)
        {
          v10 >>= 16;
          v11 = (32 * (HIDWORD(a3) != 0)) | 0x10;
        }
        if (v10 >= 0x100)
        {
          v10 >>= 8;
          v11 |= 8u;
        }
        if (v10 >= 0x10)
        {
          v10 >>= 4;
          v11 |= 4u;
        }
        v12 = v10 >= 4;
        if (v10 >= 4)
          LODWORD(v10) = v10 >> 2;
        v13 = (v10 >> 1) & 1;
        if (v12)
          v11 += 2;
        v14 = v13 + v11;
      }
      else
      {
        v14 = -1;
      }
      v17 = ~(-1 << v14);
      sub_20BED0BFC(&v21, a2, v17 & a3);
      v18 = (_QWORD *)(v23 + 16);
      v19 = *(_QWORD **)(v23 + 16);
      __dmb(0xBu);
      if ((unint64_t)v19 >= 0x40)
      {
        v20 = (2 * v17) | 1;
        while ((bswap64(0x9E3779B97F4A7C55 * (v19[3]
                                               + ((v19[3] + v19[2] + (v19[3] + v19[2]) * (v19[3] + v19[2])) >> 1))) & v20) == a3)
        {
          if (v22 || (v22 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v21) & 1) != 0))
          {
            *v18 = *v19;
            *v19 = *(_QWORD *)(v9 + 16);
            *(_QWORD *)(v9 + 16) = v19;
LABEL_29:
            v19 = (_QWORD *)*v18;
            if (*v18 <= 0x3FuLL)
              goto LABEL_32;
          }
          else
          {
            v18 = (_QWORD *)(v23 + 16);
            v19 = *(_QWORD **)(v23 + 16);
            __dmb(0xBu);
            if ((unint64_t)v19 < 0x40)
              goto LABEL_32;
          }
        }
        v18 = v19;
        goto LABEL_29;
      }
LABEL_32:
      sub_20BEBF29C(&v21);
    }
  }
  else
  {
    v15 = (unint64_t *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = 0;
    *(_QWORD *)a1 = v15;
    tbb::spin_rw_mutex_v3::internal_acquire_reader(v15);
  }
  return a1;
}

void sub_20BED0E04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  sub_20BEBF29C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20BED0E28(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;

  v5 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v6 = *a1;
  v7 = a1[4];
  v8 = v5 & *a1;
  if (*(__int16 *)(v7 + 16 * v8 + 4) < 0)
  {
    LOWORD(v9) = 0;
LABEL_7:
    v11 = sub_20BED0F94((uint64_t)a1);
    v12 = a1[4];
    if ((v11 & 1) != 0)
    {
      v8 = v5 & *a1;
      v13 = *(__int16 *)(v12 + 16 * v8 + 4);
      if (v13 < 0)
      {
        LOWORD(v9) = 0;
      }
      else
      {
        LOWORD(v9) = 0;
        do
        {
          v9 = (__int16)(v9 + 1);
          v8 = (v8 + 1) & *a1;
          v13 = *(__int16 *)(v12 + 16 * v8 + 4);
        }
        while (v9 <= v13);
      }
      v14 = (unsigned __int16)v13;
    }
    else
    {
      v14 = *(unsigned __int16 *)(v12 + 16 * v8 + 4);
    }
    if (v14 == 0xFFFF)
    {
      v15 = v12 + 16 * v8;
      *(_QWORD *)(v15 + 8) = *a3;
      *(_DWORD *)v15 = v5;
      *(_WORD *)(v15 + 4) = v9;
    }
    else
    {
      v16 = *a3;
      sub_20BED1610(a1, v8, v9, v5, &v16);
    }
    ++a1[6];
    return a1[4] + 16 * v8;
  }
  else
  {
    LOWORD(v9) = 0;
    while (1)
    {
      result = v7 + 16 * v8;
      if (*(_QWORD *)(result + 8) == *a2)
        break;
      v9 = (__int16)(v9 + 1);
      v8 = (v8 + 1) & v6;
      if (v9 > *(__int16 *)(v7 + 16 * v8 + 4))
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t sub_20BED0F94(uint64_t a1)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 48), v2 >= *(_QWORD *)(a1 + 56)))
  {
    v6 = sub_20BED1164((_QWORD *)a1);
    sub_20BED1058(a1, v6);
    *(_BYTE *)(a1 + 72) = 0;
    return 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    *(_BYTE *)(a1 + 73) = 0;
    v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        v8 = *(float *)(a1 + 68);
        v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        sub_20BED1058(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_20BED1058(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD v9[9];
  void **v10;

  sub_20BED12F4((uint64_t)&v8, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 16);
  if (v3 != v4)
  {
    v5 = v3 + 1;
    v6 = (unint64_t)(v9[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        if (v6)
          v7 = bswap64(0x9E3779B97F4A7C55 * *v5);
        else
          v7 = *((unsigned int *)v5 - 2);
        sub_20BED11E4(&v8, v8 & v7, 0, v7, v5);
      }
      v5 += 2;
    }
    while (v5 - 1 != v4);
  }
  v9[5] = *(_QWORD *)(a1 + 48);
  sub_20BED1250(&v8, (uint64_t *)a1);
  v10 = (void **)v9;
  sub_20BED15B4(&v10);
}

void sub_20BED1144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 56) = &a11;
  sub_20BED15B4((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_20BED1164(_QWORD *a1)
{
  std::logic_error *exception;

  if ((unint64_t)(*a1 - 0x4000000000000000) <= 0xBFFFFFFFFFFFFFFELL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The hash table exceeds its maximum size.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  return 2 * *a1 + 2;
}

void sub_20BED11D0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BED11E4(_QWORD *result, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5;
  _WORD *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  while (1)
  {
    v5 = result[4] + 16 * a2;
    v6 = (_WORD *)(v5 + 4);
    v7 = *(__int16 *)(v5 + 4);
    if (v7 >= a3)
      goto LABEL_4;
    v8 = (uint64_t *)(v5 + 8);
    v9 = *a5;
    if (v7 == -1)
      break;
    *a5 = *v8;
    *v8 = v9;
    *v6 = a3;
    v10 = *(_DWORD *)v5;
    *(_DWORD *)v5 = a4;
    a3 = v7;
    a4 = v10;
LABEL_4:
    ++a3;
    a2 = *result & (a2 + 1);
  }
  *v8 = v9;
  *(_DWORD *)v5 = a4;
  *v6 = a3;
  return result;
}

float sub_20BED1250(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float result;

  v2 = *a1;
  v3 = a1[1];
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  *a2 = v2;
  a2[1] = v3;
  v5 = a1[2];
  a1[2] = a2[2];
  a2[2] = v5;
  v6 = a1[3];
  a1[3] = a2[3];
  a2[3] = v6;
  v7 = a1[4];
  v8 = a1[5];
  v9 = a2[5];
  a1[4] = a2[4];
  a1[5] = v9;
  a2[4] = v7;
  a2[5] = v8;
  v10 = a1[6];
  a1[6] = a2[6];
  a2[6] = v10;
  v11 = a1[7];
  a1[7] = a2[7];
  a2[7] = v11;
  v12 = *((_DWORD *)a1 + 16);
  *((_DWORD *)a1 + 16) = *((_DWORD *)a2 + 16);
  *((_DWORD *)a2 + 16) = v12;
  result = *((float *)a1 + 17);
  *((_DWORD *)a1 + 17) = *((_DWORD *)a2 + 17);
  *((float *)a2 + 17) = result;
  LOBYTE(v11) = *((_BYTE *)a1 + 72);
  *((_BYTE *)a1 + 72) = *((_BYTE *)a2 + 72);
  *((_BYTE *)a2 + 72) = v11;
  LOBYTE(v11) = *((_BYTE *)a1 + 73);
  *((_BYTE *)a1 + 73) = *((_BYTE *)a2 + 73);
  *((_BYTE *)a2 + 73) = v11;
  return result;
}

uint64_t sub_20BED12F4(uint64_t a1, unint64_t a2, float a3, float a4)
{
  int *v7;
  unint64_t v8;
  float v9;
  std::logic_error *exception;
  unint64_t v12;

  v12 = a2;
  sub_20BED1408((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >> 60)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  sub_20BED1530((_QWORD *)(a1 + 8), v12);
  v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16))
    v7 = sub_20BED14B8();
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 10) = 1;
  v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_20BED13F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t *sub_20BED1408(unint64_t *result, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  std::logic_error *exception;

  v2 = *a2;
  if ((unint64_t)*a2 >= 0x8000000000000001)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The hash table exceeds its maximum size.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  if (v2)
  {
    v3 = v2 - 1;
    if ((v2 & (v2 - 1)) != 0)
    {
      v4 = 1;
      do
      {
        v3 |= v3 >> v4;
        v5 = v4 >= 0x20;
        v4 *= 2;
      }
      while (!v5);
      v2 = v3 + 1;
    }
    *a2 = v2;
    v6 = v2 - 1;
  }
  else
  {
    v6 = 0;
  }
  *result = v6;
  return result;
}

void sub_20BED14A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_20BED14B8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25473B1C0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473B1C0))
  {
    dword_25473B1B0 = 0;
    word_25473B1B4 = -1;
    byte_25473B1B6 = 1;
    __cxa_atexit((void (*)(void *))sub_20BED15F8, &dword_25473B1B0, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473B1C0);
  }
  return &dword_25473B1B0;
}

_QWORD *sub_20BED1530(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE90F0C(a1, a2);
    v4 = a1[1];
    v5 = v4 + 16 * a2;
    do
    {
      *(_DWORD *)v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(_BYTE *)(v4 + 6) = 0;
      v4 += 16;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20BED15A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BED15B4(&a9);
  _Unwind_Resume(a1);
}

void sub_20BED15B4(void ***a1)
{
  void **v1;
  char *v2;
  char *i;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    for (i = (char *)v1[1]; i != v2; i -= 16)
    {
      if (*((__int16 *)i - 6) != -1)
        *((_WORD *)i - 6) = -1;
    }
    v1[1] = v2;
    operator delete(v2);
  }
}

uint64_t sub_20BED15F8(uint64_t result)
{
  if (*(__int16 *)(result + 4) != -1)
    *(_WORD *)(result + 4) = -1;
  return result;
}

uint64_t *sub_20BED1610(uint64_t *result, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int *v13;
  _WORD *v14;
  int i;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v5 = result[4] + 16 * a2;
  v6 = *a5;
  *a5 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v5 + 8) = v6;
  v7 = *(unsigned __int16 *)(v5 + 4);
  *(_WORD *)(v5 + 4) = a3;
  v8 = *(_DWORD *)v5;
  *(_DWORD *)v5 = a4;
  v9 = *result;
  v10 = (a2 + 1) & *result;
  v11 = v7 + 1;
  v12 = result[4];
  v13 = (int *)(v12 + 16 * v10);
  v14 = v13 + 1;
  for (i = *((unsigned __int16 *)v13 + 2); i != 0xFFFF; i = *((unsigned __int16 *)v13 + 2))
  {
    if ((__int16)v11 <= (__int16)i)
    {
      i = v11;
    }
    else
    {
      if ((__int16)v11 >= 4096)
        *((_BYTE *)result + 72) = 1;
      v16 = v12 + 16 * v10;
      v17 = *a5;
      *a5 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)(v16 + 8) = v17;
      *v14 = v11;
      v18 = *v13;
      *v13 = v8;
      v12 = result[4];
      v8 = v18;
    }
    v10 = (v10 + 1) & v9;
    v11 = i + 1;
    v13 = (int *)(v12 + 16 * v10);
    v14 = v13 + 1;
  }
  *(_QWORD *)(v12 + 16 * v10 + 8) = *a5;
  *v13 = v8;
  *v14 = v11;
  return result;
}

uint64_t sub_20BED16E8(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_20BED17D8((_QWORD *)a1, a2, a3);
  if (*(_QWORD *)(a1 + 32) + 16 * *(_QWORD *)(a1 + 40) == v4)
    return 0;
  sub_20BED1734((uint64_t *)a1, v4);
  result = 1;
  *(_BYTE *)(a1 + 73) = 1;
  return result;
}

uint64_t *sub_20BED1734(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  _WORD *v12;
  int v13;

  if (*(__int16 *)(a2 + 4) != -1)
    *(_WORD *)(a2 + 4) = -1;
  --result[6];
  v2 = result[4];
  v3 = (a2 - v2) >> 4;
  v4 = *result;
  v5 = (v3 + 1) & *result;
  v6 = *(__int16 *)(v2 + 16 * v5 + 4);
  if (v6 >= 1)
  {
    do
    {
      v7 = v2 + 16 * v3;
      v3 = v5;
      v8 = (int *)(v2 + 16 * v5);
      v9 = v6 - 1;
      v10 = *v8;
      *(_QWORD *)(v7 + 8) = *((_QWORD *)v8 + 1);
      *(_DWORD *)v7 = v10;
      *(_WORD *)(v7 + 4) = v9;
      v2 = result[4];
      v11 = v2 + 16 * v3;
      v13 = *(__int16 *)(v11 + 4);
      v12 = (_WORD *)(v11 + 4);
      if (v13 != -1)
        *v12 = -1;
      v5 = (v3 + 1) & v4;
      v6 = *(__int16 *)(v2 + 16 * v5 + 4);
    }
    while (v6 > 0);
  }
  return result;
}

uint64_t sub_20BED17D8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = a1[4];
  v4 = *a1 & a3;
  if (*(__int16 *)(v3 + 16 * v4 + 4) < 0)
  {
LABEL_5:
    v4 = a1[5];
  }
  else
  {
    LOWORD(v5) = 0;
    while (*(_QWORD *)(v3 + 16 * v4 + 8) != *a2)
    {
      v5 = (__int16)(v5 + 1);
      v4 = (v4 + 1) & *a1;
      if (v5 > *(__int16 *)(v3 + 16 * v4 + 4))
        goto LABEL_5;
    }
  }
  return v3 + 16 * v4;
}

void sub_20BED1834(uint64_t a1@<X0>, const char *a2@<X1>, char *a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char *p_p;
  unint64_t v9;
  BOOL v10;
  std::string::value_type *v11;
  char *v12;
  char *v13;
  void *__p;
  unint64_t v15;
  unsigned __int8 v16;

  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%ld", a2, a3, a1);
  if ((v16 & 0x80u) == 0)
    v7 = v16;
  else
    v7 = v15;
  if ((v16 & 0x80u) == 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  v12 = p_p;
  v13 = &p_p[v7];
  while (v12 != v13)
  {
    v9 = v16;
    if ((v16 & 0x80u) != 0)
      v9 = v15;
    if (v7 % 3)
      v10 = 1;
    else
      v10 = v7 >= v9;
    if (!v10)
      std::string::push_back(a4, 44);
    v11 = (std::string::value_type *)sub_20BED195C((uint64_t *)&v12, v5, v6);
    std::string::push_back(a4, *v11);
    --v7;
    sub_20BED19D8(&v12);
  }
  if ((char)v16 < 0)
    operator delete(__p);
}

void sub_20BED1928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BED195C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::string>::operator*() [T = std::string, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BED19D0()
{
  JUMPOUT(0x20BED1980);
}

_QWORD *sub_20BED19D8(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::string>::operator++() [T = std::st"
            "ring, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    ++*a1;
  }
  return a1;
}

_QWORD *sub_20BED1A54(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fMallocTag::CallTree::CallSite>>::operator->() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TfMa"
            "llocTag::CallTree::CallSite>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20BED1ACC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfMallocTag::CallTree::CallSite>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrRe"
            "served__::TfMallocTag::CallTree::CallSite>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

uint64_t sub_20BED1B48(uint64_t result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*(_QWORD *)(result + 8) == *(_QWORD *)(result + 24))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<unsigned long, const std::string *>, true>::"
            "operator->() [T = std::map<unsigned long, const std::string *>, Reverse = true]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20BED1BC4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2 == *(_QWORD **)(a1 + 24))
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::map<unsigned long, const std::stri"
            "ng *>, true>::operator++() [T = std::map<unsigned long, const std::string *>, Reverse = true]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)*v2;
    if (*v2)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)v3[1];
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t *sub_20BED1C6C(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    v11 = a3[1];
    v10[4] = *a3;
    v10[5] = v11;
    sub_20BDDE1B4(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_20BED1D24(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::T"
            "fMallocTag::CallTree::PathNode>>::operator*() [T = const std::vector<pxrInternal__aapl__pxrReserved__::TfMal"
            "locTag::CallTree::PathNode>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BED1D98()
{
  JUMPOUT(0x20BED1D48);
}

_QWORD *sub_20BED1DA0(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::TfMallocTag::CallTree::PathNode>>::operator++() [T = const std::vector<pxrInternal__aapl__pxrRe"
            "served__::TfMallocTag::CallTree::PathNode>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 72;
  }
  return a1;
}

BOOL sub_20BED1E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  int v13;

  v4 = *(_QWORD *)(a2 + 24);
  v2 = a2 + 24;
  v3 = v4;
  v5 = *(char *)(v2 + 23);
  v8 = *(_QWORD *)(a1 + 24);
  v6 = a1 + 24;
  v7 = v8;
  v9 = *(char *)(v6 + 23);
  if (v9 >= 0)
    v10 = *(unsigned __int8 *)(v6 + 23);
  else
    v10 = *(_QWORD *)(v6 + 8);
  if (v9 < 0)
    v6 = v7;
  if (v5 >= 0)
    v11 = *(unsigned __int8 *)(v2 + 23);
  else
    v11 = *(_QWORD *)(v2 + 8);
  if (v5 < 0)
    v2 = v3;
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  v13 = memcmp((const void *)v6, (const void *)v2, v12);
  if (v13)
    return v13 < 0;
  else
    return v10 < v11;
}

uint64_t sub_20BED1E8C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<const pxrInternal__aapl__pxrReserved__::T"
            "fMallocTag::CallTree::PathNode *>>::operator*() [T = std::vector<const pxrInternal__aapl__pxrReserved__::TfM"
            "allocTag::CallTree::PathNode *>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BED1F00()
{
  JUMPOUT(0x20BED1EB0);
}

_QWORD *sub_20BED1F08(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<const pxrInternal__aapl__px"
            "rReserved__::TfMallocTag::CallTree::PathNode *>>::operator++() [T = std::vector<const pxrInternal__aapl__pxr"
            "Reserved__::TfMallocTag::CallTree::PathNode *>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_20BED1F84(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = (*a3)(*(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return sub_20BED2418(v9, v9 + 1, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 4uLL:
        return sub_20BED28CC(v9, v9 + 1, v9 + 2, a2 - 1, (unsigned int (**)(_QWORD))a3);
      case 5uLL:
        return sub_20BED297C(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, (unsigned int (**)(_QWORD))a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return sub_20BED22C4((uint64_t)v9, a2, a3);
          else
            return sub_20BED2384((uint64_t)v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_20BED2418(&v9[v13 >> 1], v9, a2 - 1, (unsigned int (**)(_QWORD))a3);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_20BED2418(v9, &v9[v13 >> 1], a2 - 1, (unsigned int (**)(_QWORD))a3);
            sub_20BED2418(v9 + 1, v15 - 1, a2 - 2, (unsigned int (**)(_QWORD))a3);
            sub_20BED2418(v9 + 2, &v9[v14 + 1], a2 - 3, (unsigned int (**)(_QWORD))a3);
            sub_20BED2418(v15 - 1, v15, &v9[v14 + 1], (unsigned int (**)(_QWORD))a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (((*a3)(*(v9 - 1), *v9) & 1) == 0)
          {
            result = (uint64_t)sub_20BED2504(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = sub_20BED2610(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = sub_20BED2728(v9, v17, (unsigned int (**)(_QWORD))a3);
          v9 = v17 + 1;
          result = sub_20BED2728(v17 + 1, a2, (unsigned int (**)(_QWORD))a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = sub_20BED1F84(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_20BED2A54((char *)v9, (char *)a2, a2, a3);
        return result;
    }
  }
}

uint64_t sub_20BED22C4(uint64_t result, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  if ((uint64_t *)result != a2)
  {
    v4 = (_QWORD *)result;
    v5 = (uint64_t *)(result + 8);
    if ((uint64_t *)(result + 8) != a2)
    {
      v7 = 0;
      v8 = (uint64_t *)result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (*a3)(v9, v10);
        if ((_DWORD)result)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(_QWORD *)((char *)v4 + v12 + 8) = *(_QWORD *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (*a3)(v11, *(_QWORD *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              v13 = (_QWORD *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_20BED2384(uint64_t result, _QWORD *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  _QWORD *v4;
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if ((_QWORD *)result != a2)
  {
    v4 = (_QWORD *)result;
    for (i = (_QWORD *)(result + 8); v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (*a3)(v7, v8);
      if ((_DWORD)result)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (*a3)(v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t sub_20BED2418(_QWORD *a1, _QWORD *a2, _QWORD *a3, unsigned int (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!((unsigned int (*)(_QWORD, _QWORD))*a4)(*a2, *a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  v10 = *a1;
  if (!(_DWORD)result)
  {
    *a1 = *a2;
    *a2 = v10;
    if (!(*a4)(*a3))
      return 1;
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    return 2;
  }
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

uint64_t *sub_20BED2504(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2;
  v6 = *a1;
  if (((*a3)(*a1, *(a2 - 1)) & 1) != 0)
  {
    v7 = a1;
    do
    {
      v8 = v7[1];
      ++v7;
    }
    while (((*a3)(v6, v8) & 1) == 0);
  }
  else
  {
    v9 = a1 + 1;
    do
    {
      v7 = v9;
      if (v9 >= v4)
        break;
      ++v9;
    }
    while (!(*a3)(v6, *v7));
  }
  if (v7 < v4)
  {
    do
      v10 = *--v4;
    while (((*a3)(v6, v10) & 1) != 0);
  }
  while (v7 < v4)
  {
    v11 = *v7;
    *v7 = *v4;
    *v4 = v11;
    do
    {
      v12 = v7[1];
      ++v7;
    }
    while (!(*a3)(v6, v12));
    do
      v13 = *--v4;
    while (((*a3)(v6, v13) & 1) != 0);
  }
  if (v7 - 1 != a1)
    *a1 = *(v7 - 1);
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *sub_20BED2610(uint64_t *a1, uint64_t *a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = 0;
  v7 = *a1;
  do
    v8 = (*a3)(a1[++v6], v7);
  while ((v8 & 1) != 0);
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (((*a3)(v12, v7) & 1) == 0);
  }
  else
  {
    do
      v11 = *--a2;
    while (!(*a3)(v11, v7));
  }
  if (v9 < a2)
  {
    v13 = &a1[v6];
    v14 = a2;
    do
    {
      v15 = *v13;
      *v13 = *v14;
      *v14 = v15;
      do
      {
        v16 = v13[1];
        ++v13;
      }
      while (((*a3)(v16, v7) & 1) != 0);
      do
        v17 = *--v14;
      while (!(*a3)(v17, v7));
    }
    while (v13 < v14);
    v10 = v13 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL sub_20BED2728(_QWORD *a1, _QWORD *a2, unsigned int (**a3)(_QWORD))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*(a2 - 1), *a1))
      {
        v8 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return 1;
    case 3:
      sub_20BED2418(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_20BED28CC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20BED297C(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v9 = a1 + 2;
      sub_20BED2418(a1, a1 + 1, a1 + 2, a3);
      v10 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if (((unsigned int (*)(_QWORD, _QWORD))*a3)(*v10, *v9))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(_QWORD *)((char *)a1 + v14 + 24) = *(_QWORD *)((char *)a1 + v14 + 16);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (_QWORD *)((char *)a1 + v14 + 24);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == a2;
    }
    v9 = v10;
    v11 += 8;
    if (++v10 == a2)
      return 1;
  }
}

uint64_t sub_20BED28CC(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int (**a5)(_QWORD))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_20BED2418(a1, a2, a3, a5);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_20BED297C(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, unsigned int (**a6)(_QWORD))
{
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_20BED28CC(a1, a2, a3, a4, a6);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a5, *a4);
  if ((_DWORD)result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a4, *a3);
    if ((_DWORD)result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a3, *a2);
      if ((_DWORD)result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = ((uint64_t (*)(_QWORD, _QWORD))*a6)(*a2, *a1);
        if ((_DWORD)result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_20BED2A54(char *a1, char *a2, uint64_t *a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        sub_20BED2BA8((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != (char *)a3)
    {
      v14 = (uint64_t *)a2;
      do
      {
        if ((*a4)(*v14, *(_QWORD *)a1))
        {
          v15 = *v14;
          *v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          sub_20BED2BA8((uint64_t)a1, (unsigned int (**)(_QWORD, _QWORD))a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = (char *)a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      v17 = a2 - 8;
      do
      {
        v18 = *(_QWORD *)a1;
        v19 = (char *)sub_20BED2CC8(a1, (unsigned int (**)(_QWORD, _QWORD))a4, v16);
        if (v17 == v19)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v17;
          *(_QWORD *)v17 = v18;
          sub_20BED2D74((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
        v17 -= 8;
      }
      while (v16-- > 2);
    }
    return (uint64_t *)v13;
  }
  return a3;
}

uint64_t sub_20BED2BA8(uint64_t result, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (_QWORD *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(*v12, v12[1]))
      {
        ++v12;
        v11 = v13;
      }
      result = ((uint64_t (*)(_QWORD, _QWORD))*a2)(*v12, *v5);
      if ((result & 1) == 0)
      {
        v14 = *v5;
        do
        {
          v15 = v12;
          *v5 = *v12;
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (_QWORD *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3)
          {
            if ((*a2)(*v12, v12[1]))
            {
              ++v12;
              v16 = 2 * v11 + 2;
            }
          }
          result = ((uint64_t (*)(_QWORD, uint64_t))*a2)(*v12, v14);
          v5 = v15;
          v11 = v16;
        }
        while (!(_DWORD)result);
        *v15 = v14;
      }
    }
  }
  return result;
}

_QWORD *sub_20BED2CC8(_QWORD *a1, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1[v6 + 1], a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

uint64_t sub_20BED2D74(uint64_t result, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = (uint64_t *)(a2 - 8);
    result = (*a3)(*v8, *(_QWORD *)(a2 - 8));
    if ((_DWORD)result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        result = (*a3)(*v8, v10);
        v9 = v11;
      }
      while ((result & 1) != 0);
      *v11 = v10;
    }
  }
  return result;
}

void sub_20BED2E10(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20BED2E50((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20BED2E50(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 9) < 0)
      operator delete(*(void **)(i - 32));
  }
  a1[1] = v2;
}

uint64_t sub_20BED2E9C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BED2F44((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20BED2F10(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_20BDDF5B4();
  return operator new(32 * a2);
}

uint64_t sub_20BED2F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_WORD *)(v7 - 8) = *(_WORD *)(a3 - 8);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20BED2FEC((uint64_t)v11);
  return v9;
}

uint64_t sub_20BED2FEC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BED3020(a1);
  return a1;
}

void sub_20BED3020(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 32;
  }
}

uint64_t sub_20BED3064(uint64_t a1)
{
  sub_20BED3098(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BED3098(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 4;
      *(_QWORD *)(a1 + 16) = v2 - 4;
      if (*((char *)v2 - 9) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_20BED30EC(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;
  unint64_t v9;
  tbb::internal *v10;
  tbb::internal **v11;
  unint64_t v12;
  uint64_t result;

  v2 = *a1;
  __dmb(0xBu);
  __dmb(0xBu);
  a1[65] = 0;
  v3 = sub_20BEB4B94(v2);
  do
  {
    v4 = 0;
    v5 = v3;
    v6 = a1[v3 + 1];
    if (v3-- > 1)
      v8 = v5;
    else
      v8 = 1;
    do
    {
      v9 = v6 + 24 * v4;
      v12 = *(_QWORD *)(v9 + 16);
      v11 = (tbb::internal **)(v9 + 16);
      v10 = (tbb::internal *)v12;
      if (v12 >= 0x40)
      {
        do
        {
          *v11 = *(tbb::internal **)v10;
          sub_20BED31B8((int)a1, v10);
          v10 = *v11;
        }
        while ((unint64_t)*v11 > 0x3F);
      }
      ++v4;
    }
    while (!(v4 >> v8));
    result = sub_20BED31F0((uint64_t)a1, v5);
  }
  while (v5);
  __dmb(0xBu);
  *a1 = 1;
  return result;
}

uint64_t sub_20BED31B8(int a1, tbb::internal *this)
{
  void *v3;

  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
  {
    *((_QWORD *)this + 4) = v3;
    operator delete(v3);
  }
  return tbb::internal::deallocate_via_handler_v3((uint64_t)this, this);
}

uint64_t sub_20BED31F0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  uint64_t v5;

  v2 = a1 + 8 * a2;
  v5 = *(_QWORD *)(v2 + 8);
  v4 = (_QWORD *)(v2 + 8);
  result = v5;
  if (a2 < 8)
  {
    if (!a2)
      return result;
    if (a2 == 1)
      result = tbb::internal::deallocate_via_handler_v3(result, (void *)1);
  }
  else
  {
    result = tbb::internal::deallocate_via_handler_v3(result, (void *)a2);
  }
  *v4 = 0;
  return result;
}

unint64_t sub_20BED323C(unint64_t result)
{
  uint64_t *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = (uint64_t *)result;
  v2 = (_QWORD *)(result + 16);
  v3 = *(_QWORD *)(result + 8) - 1;
  while (1)
  {
    v4 = v3;
    v5 = v3 + 2;
    v6 = *(_QWORD *)*v1;
    __dmb(0xBu);
    if (v5 > v6)
      break;
    if ((v5 & v4) != 0)
      result = *v2 + 24;
    else
      result = sub_20BECF614(*v1, v5);
    v7 = *(_QWORD *)(result + 16);
    v1[2] = result;
    v1[3] = v7;
    v3 = v4 + 1;
    if (v7 > 0x3F)
      goto LABEL_9;
  }
  *v2 = 0;
  v2[1] = 0;
LABEL_9:
  v1[1] = v4 + 2;
  return result;
}

uint64_t sub_20BED32C8(uint64_t *a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t, _QWORD *, uint64_t), tbb::internal *a8)
{
  uint64_t v13;
  uint64_t v14;
  tbb::internal *v15;
  uint64_t v16;
  tbb::internal *v17;
  int v18;
  BOOL v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v32;
  unint64_t v33;
  tbb::spin_rw_mutex_v3 *v35;
  char v36;
  uint64_t v37;

  v33 = 0;
  v13 = *a3 ^ (*a3 >> 3);
  v14 = *a1;
  __dmb(0xBu);
  v32 = (uint64_t)(a1 + 72);
  while (1)
  {
    sub_20BED37E4((uint64_t)&v35, (uint64_t)a1, v14 & v13, 0);
    v15 = (tbb::internal *)(v37 + 16);
    do
      v15 = *(tbb::internal **)v15;
    while ((unint64_t)v15 >= 0x40 && *a3 != *((_QWORD *)v15 + 2));
    if (a2)
      break;
    if (v15)
    {
      v16 = 1;
LABEL_10:
      v17 = a8;
      if (!a5)
        goto LABEL_51;
      goto LABEL_11;
    }
    v26 = *a1;
    __dmb(0xBu);
    if (v14 == v26 || !sub_20BECF7E4((uint64_t)a1, v13, v14, v26))
    {
      sub_20BEBF29C(&v35);
      return 0;
    }
LABEL_34:
    sub_20BEBF29C(&v35);
    v14 = v26;
  }
  if (v15)
  {
LABEL_7:
    v16 = 0;
    goto LABEL_10;
  }
  if (!a8)
    a8 = (tbb::internal *)a7(v32, a3, a4);
  if (!v36)
  {
    v36 = 1;
    if ((tbb::spin_rw_mutex_v3::internal_upgrade(v35) & 1) == 0)
    {
      v15 = (tbb::internal *)(v37 + 16);
      while (1)
      {
        v15 = *(tbb::internal **)v15;
        if ((unint64_t)v15 < 0x40)
          break;
        if (*a3 == *((_QWORD *)v15 + 2))
        {
          if (!v36)
            goto LABEL_7;
          v27 = (unint64_t *)v35;
          do
            v28 = __ldaxr(v27);
          while (__stlxr(v28 + 3, v27));
          v16 = 0;
          v36 = 0;
          goto LABEL_10;
        }
      }
    }
  }
  v26 = *a1;
  __dmb(0xBu);
  if (v14 != v26)
  {
    if (!sub_20BECF7E4((uint64_t)a1, v13, v14, v26))
      goto LABEL_36;
    goto LABEL_34;
  }
  v26 = v14;
LABEL_36:
  v33 = sub_20BECF26C((uint64_t)a1, v37, a8, v26);
  v17 = 0;
  v16 = 1;
  v15 = a8;
  if (!a5)
  {
LABEL_51:
    sub_20BEBF29C(&v35);
    goto LABEL_46;
  }
LABEL_11:
  if ((sub_20BECF35C(a5, (tbb::internal *)((char *)v15 + 8), a6) & 1) == 0)
  {
    sched_yield();
    v18 = 2;
    while ((sub_20BECF35C(a5, (tbb::internal *)((char *)v15 + 8), a6) & 1) == 0)
    {
      sched_yield();
      v19 = v18 < 16;
      v18 *= 2;
      if (!v19)
      {
        v20 = (unint64_t *)v35;
        v35 = 0;
        if (v36)
        {
          while (1)
          {
            v21 = *v20;
            v22 = *v20 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              while (1)
              {
                v23 = __ldaxr(v20);
                if (v23 != v21)
                  break;
                if (!__stlxr(v22, v20))
                  goto LABEL_25;
              }
              __clrex();
              do
                v24 = __ldxr(v20);
              while (__stxr(v24, v20));
            }
            while (v24 == v21);
            sched_yield();
          }
        }
        do
          v25 = __ldaxr(v20);
        while (__stlxr(v25 - 4, v20));
LABEL_25:
        sched_yield();
        v26 = *a1;
        __dmb(0xBu);
        a8 = v17;
        goto LABEL_34;
      }
    }
  }
  sub_20BEBF29C(&v35);
  *(_QWORD *)(a5 + 16) = v15;
  *(_QWORD *)(a5 + 24) = v13;
LABEL_46:
  if (v33)
    sub_20BED3650(a1, v33, v32, 0);
  if (v17)
    sub_20BED31B8((int)a1, v17);
  return v16;
}

void sub_20BED35C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BED35E0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v7[2];

  v4 = tbb::internal::allocate_via_handler_v3((tbb::internal *)0x40);
  v7[1] = a1;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 16) = *a2;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_QWORD *)(v4 + 56) = 0;
  v7[0] = 0;
  sub_20BED3A40(v7, v5);
  return v4;
}

void sub_20BED3650(uint64_t *a1, unint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64x2_t v19;
  uint64x2_t v20;
  int8x16_t v21;
  int64x2_t v22;
  uint64x2_t v23;
  int8x16_t v24;

  if (a2 < 8)
  {
    v9 = (char *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x17D0);
    v10 = v9;
    if ((a4 & 1) != 0)
    {
      bzero(v9, 0x17D0uLL);
    }
    else
    {
      v14 = -6096;
      do
      {
        v15 = &v9[v14];
        *((_QWORD *)v15 + 763) = 0;
        *((_QWORD *)v15 + 764) = 3;
        v14 += 24;
      }
      while (v14);
    }
    v16 = 0;
    v17 = (int64x2_t)xmmword_20CA59F60;
    v18 = v10 - 48;
    v19 = (uint64x2_t)vdupq_n_s64(7uLL);
    v20 = (uint64x2_t)vdupq_n_s64(1uLL);
    v21 = (int8x16_t)vdupq_n_s64(0x7FFFFFFFFFFFFFFEuLL);
    v22 = vdupq_n_s64(2uLL);
    v13 = 255;
    do
    {
      v23 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v16), (int8x16_t)xmmword_20CA59F70);
      v24 = vandq_s8((int8x16_t)vshlq_u64(v20, (uint64x2_t)v17), v21);
      if ((vmovn_s64((int64x2_t)vcgtq_u64(v19, v23)).u8[0] & 1) != 0)
        a1[v16 + 2] = (uint64_t)&v18[24 * v24.i64[0]];
      if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(7uLL), v23)).i32[1] & 1) != 0)
        a1[v16 + 3] = (uint64_t)&v18[24 * v24.i64[1]];
      v16 += 2;
      v17 = vaddq_s64(v17, v22);
    }
    while (v16 != 8);
  }
  else
  {
    v7 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)(24 << a2));
    v8 = v7;
    if ((a4 & 1) != 0)
    {
      bzero(v7, 24 << a2);
    }
    else
    {
      v11 = 1 << a2;
      v12 = v7 + 2;
      do
      {
        *(v12 - 1) = 0;
        *v12 = 3;
        v12 += 3;
        --v11;
      }
      while (v11);
    }
    a1[a2 + 1] = (uint64_t)v8;
    v13 = (2 << a2) - 1;
  }
  __dmb(0xBu);
  *a1 = v13;
}

void sub_20BED37D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8 * v2 + 8) = 0;
  _Unwind_Resume(a1);
}

uint64_t sub_20BED37E4(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  unint64_t v8;
  uint64_t v9;
  tbb::spin_rw_mutex_v3 *v10;
  uint64_t v11;
  tbb::spin_rw_mutex_v3 *v12;

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  v8 = sub_20BECF614(a2, a3);
  *(_QWORD *)(a1 + 16) = v8;
  v9 = *(_QWORD *)(v8 + 16);
  __dmb(0xBu);
  if (v9 == 3
    && (v10 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8),
        *(_BYTE *)(a1 + 8) = 1,
        tbb::spin_rw_mutex_v3::internal_try_acquire_writer(v10)))
  {
    *(_QWORD *)a1 = v10;
    v11 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(v11 + 16) == 3)
      sub_20BED38BC(a2, v11, a3);
  }
  else
  {
    v12 = (tbb::spin_rw_mutex_v3 *)(*(_QWORD *)(a1 + 16) + 8);
    *(_BYTE *)(a1 + 8) = a4;
    *(_QWORD *)a1 = v12;
    if (a4)
      tbb::spin_rw_mutex_v3::internal_acquire_writer(v12);
    else
      tbb::spin_rw_mutex_v3::internal_acquire_reader((unint64_t *)v12);
  }
  return a1;
}

void sub_20BED38A8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20BEBF29C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BED38BC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  char v6;
  BOOL v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  tbb::spin_rw_mutex_v3 *v15;
  char v16;
  uint64_t v17;

  __dmb(0xBu);
  *(_QWORD *)(a2 + 16) = 0;
  if (a3)
  {
    v5 = HIDWORD(a3);
    if (!HIDWORD(a3))
      v5 = a3;
    v6 = 32 * (HIDWORD(a3) != 0);
    if (v5 >= 0x10000)
    {
      v5 >>= 16;
      v6 = (32 * (HIDWORD(a3) != 0)) | 0x10;
    }
    if (v5 >= 0x100)
    {
      v5 >>= 8;
      v6 |= 8u;
    }
    if (v5 >= 0x10)
    {
      v5 >>= 4;
      v6 |= 4u;
    }
    v7 = v5 >= 4;
    if (v5 >= 4)
      LODWORD(v5) = v5 >> 2;
    v8 = (v5 >> 1) & 1;
    if (v7)
      v6 += 2;
    v9 = v8 + v6;
  }
  else
  {
    v9 = -1;
  }
  v10 = ~(-1 << v9);
  sub_20BED37E4(&v15, a1, v10 & a3, 0);
  v11 = (_QWORD *)(v17 + 16);
  v12 = *(_QWORD **)(v17 + 16);
  __dmb(0xBu);
  if ((unint64_t)v12 >= 0x40)
  {
    v13 = (2 * v10) | 1;
    while ((((v12[2] >> 3) ^ v12[2]) & v13) == a3)
    {
      if (v16 || (v16 = 1, (tbb::spin_rw_mutex_v3::internal_upgrade(v15) & 1) != 0))
      {
        *v11 = *v12;
        *v12 = *(_QWORD *)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v12;
LABEL_24:
        v12 = (_QWORD *)*v11;
        if (*v11 <= 0x3FuLL)
          return sub_20BEBF29C(&v15);
      }
      else
      {
        v11 = (_QWORD *)(v17 + 16);
        v12 = *(_QWORD **)(v17 + 16);
        __dmb(0xBu);
        if ((unint64_t)v12 < 0x40)
          return sub_20BEBF29C(&v15);
      }
    }
    v11 = v12;
    goto LABEL_24;
  }
  return sub_20BEBF29C(&v15);
}

void sub_20BED3A2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEBF29C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BED3A40(uint64_t *a1, void *a2)
{
  uint64_t v3;

  v3 = *a1;
  if (v3)
    tbb::internal::deallocate_via_handler_v3(v3, a2);
  return a1;
}

uint64_t sub_20BED3A70(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v4 = a2 + 528;
  v5 = *(_QWORD *)(a2 + 544);
  v9 = a2;
  v10 = 0;
  v11 = a2 + 528;
  v12 = v5;
  if (v5 <= 0x3F)
  {
    sub_20BED323C((unint64_t)&v9);
    v7 = v9;
    v6 = v10;
    v4 = v11;
    v5 = v12;
  }
  else
  {
    v6 = 0;
    v7 = a2;
  }
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

uint64_t sub_20BED3AEC(uint64_t a1)
{
  _QWORD *v2;
  void *v3;

  v2 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
    {
      v3 = (void *)v2[2];
      if (v3)
      {
        v2[3] = v3;
        operator delete(v3);
      }
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_20BED3B38(uint64_t result, int8x16_t *a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4, char a5)
{
  int8x16_t *v9;
  uint64_t *v10;
  int8x16_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t *v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  int8x16_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int8x16_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t *v46;
  BOOL v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  int8x16_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t *v73;
  int8x16_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  int64_t v85;
  int8x16_t *v86;
  int8x16_t *v87;
  int64_t v88;
  uint64_t v89;

  v9 = (int8x16_t *)result;
LABEL_2:
  v10 = &a2[-1].i64[1];
  v86 = a2;
  v87 = a2 - 1;
  v84 = &a2[-2].i64[1];
  v11 = v9;
  while (2)
  {
    v9 = v11;
    v12 = (char *)a2 - (char *)v11;
    v13 = ((char *)a2 - (char *)v11) >> 3;
    switch(v13)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v9->i64[0]);
        if ((_DWORD)result)
        {
          v40 = v9->i64[0];
          v9->i64[0] = a2[-1].i64[1];
          a2[-1].i64[1] = v40;
        }
        return result;
      case 3:
        return sub_20BED42F8(v9, &v9->i64[1], v10, (uint64_t (**)(_QWORD))a3);
      case 4:
        return sub_20BED4600(v9, &v9->i64[1], (int8x16_t *)v9[1].i64, v10, (uint64_t (**)(_QWORD))a3);
      case 5:
        v41 = v9 + 1;
        v42 = &v9[1].i64[1];
        sub_20BED4600(v9, &v9->i64[1], (int8x16_t *)v9[1].i64, &v9[1].i64[1], (uint64_t (**)(_QWORD))a3);
        result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(a2[-1].i64[1], v9[1].i64[1]);
        if ((_DWORD)result)
        {
          v43 = *v42;
          *v42 = a2[-1].i64[1];
          a2[-1].i64[1] = v43;
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v42, v41->i64[0]);
          if ((_DWORD)result)
          {
            v44 = v41->i64[0];
            v41->i64[0] = *v42;
            *v42 = v44;
            result = ((uint64_t (*)(void))*a3)();
            if ((_DWORD)result)
            {
              v45 = v9->i64[1];
              v9->i64[1] = v9[1].i64[0];
              v9[1].i64[0] = v45;
              result = ((uint64_t (*)(void))*a3)();
              if ((_DWORD)result)
                *v9 = vextq_s8(*v9, *v9, 8uLL);
            }
          }
        }
        return result;
      default:
        if (v12 <= 191)
        {
          v46 = (int8x16_t *)&v9->u64[1];
          v47 = v9 == a2 || v46 == a2;
          v48 = v47;
          if ((a5 & 1) != 0)
          {
            if ((v48 & 1) == 0)
            {
              v49 = 0;
              v50 = (uint64_t *)v9;
              do
              {
                v52 = *v50;
                v51 = v50[1];
                v50 = (uint64_t *)v46;
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v51, v52);
                if ((_DWORD)result)
                {
                  v53 = *v50;
                  v54 = v49;
                  while (1)
                  {
                    *(uint64_t *)((char *)&v9->i64[1] + v54) = *(uint64_t *)((char *)v9->i64 + v54);
                    if (!v54)
                      break;
                    result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v53, *(uint64_t *)((char *)&v9->i64[-1] + v54));
                    v54 -= 8;
                    if ((result & 1) == 0)
                    {
                      v55 = (uint64_t *)((char *)&v9->i64[1] + v54);
                      goto LABEL_78;
                    }
                  }
                  v55 = (uint64_t *)v9;
LABEL_78:
                  *v55 = v53;
                }
                v46 = (int8x16_t *)(v50 + 1);
                v49 += 8;
              }
              while (v50 + 1 != (uint64_t *)a2);
            }
          }
          else if ((v48 & 1) == 0)
          {
            do
            {
              v79 = v9->i64[0];
              v78 = v9->i64[1];
              v9 = v46;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v78, v79);
              if ((_DWORD)result)
              {
                v80 = v9->i64[0];
                v81 = (uint64_t *)v9;
                do
                {
                  v82 = v81;
                  v83 = *--v81;
                  *v82 = v83;
                  result = ((uint64_t (*)(uint64_t, _QWORD))*a3)(v80, *(v82 - 2));
                }
                while ((result & 1) != 0);
                *v81 = v80;
              }
              v46 = (int8x16_t *)&v9->u64[1];
            }
            while (&v9->u64[1] != (unint64_t *)a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v9 != a2)
          {
            v56 = (unint64_t)(v13 - 2) >> 1;
            v88 = v56;
            do
            {
              v57 = v56;
              if (v88 >= v56)
              {
                v58 = (2 * v56) | 1;
                v59 = &v9->i64[v58];
                if (2 * v56 + 2 < v13 && (*a3)(*v59, v59[1]))
                {
                  ++v59;
                  v58 = 2 * v57 + 2;
                }
                v60 = &v9->i64[v57];
                result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v59, *v60);
                if ((result & 1) == 0)
                {
                  v85 = v57;
                  v61 = *v60;
                  do
                  {
                    v62 = v59;
                    *v60 = *v59;
                    if (v88 < v58)
                      break;
                    v63 = (2 * v58) | 1;
                    v59 = &v9->i64[v63];
                    if (2 * v58 + 2 < v13 && (*a3)(*v59, v59[1]))
                    {
                      ++v59;
                      v63 = 2 * v58 + 2;
                    }
                    result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v59, v61);
                    v60 = v62;
                    v58 = v63;
                  }
                  while (!(_DWORD)result);
                  *v62 = v61;
                  v57 = v85;
                  a2 = v86;
                }
              }
              v56 = v57 - 1;
            }
            while (v57);
            v64 = (unint64_t)v12 >> 3;
            do
            {
              v65 = a2;
              v66 = 0;
              v89 = v9->i64[0];
              v67 = (uint64_t *)v9;
              do
              {
                v68 = &v67[v66 + 1];
                v69 = (2 * v66) | 1;
                v70 = 2 * v66 + 2;
                if (v70 < v64)
                {
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v67[v66 + 1], v67[v66 + 2]);
                  if ((_DWORD)result)
                  {
                    ++v68;
                    v69 = v70;
                  }
                }
                *v67 = *v68;
                v67 = v68;
                v66 = v69;
              }
              while (v69 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 = (int8x16_t *)((char *)v65 - 8);
              if (v68 == (uint64_t *)&v65[-1].u64[1])
              {
                *v68 = v89;
              }
              else
              {
                *v68 = a2->i64[0];
                a2->i64[0] = v89;
                v71 = (char *)v68 - (char *)v9 + 8;
                if (v71 >= 9)
                {
                  v72 = (((unint64_t)v71 >> 3) - 2) >> 1;
                  v73 = &v9->i64[v72];
                  result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v73, *v68);
                  if ((_DWORD)result)
                  {
                    v74 = (int8x16_t *)((char *)v65 - 8);
                    v75 = *v68;
                    do
                    {
                      v76 = v73;
                      *v68 = *v73;
                      if (!v72)
                        break;
                      v72 = (v72 - 1) >> 1;
                      v73 = &v9->i64[v72];
                      result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(*v73, v75);
                      v68 = v76;
                    }
                    while ((result & 1) != 0);
                    *v76 = v75;
                    a2 = v74;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return result;
        }
        v14 = (unint64_t)v13 >> 1;
        v15 = &v9->i64[(unint64_t)v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          sub_20BED42F8(v15, v9, v10, (uint64_t (**)(_QWORD))a3);
        }
        else
        {
          sub_20BED42F8(v9, v15, v10, (uint64_t (**)(_QWORD))a3);
          sub_20BED42F8(&v9->i64[1], v15 - 1, v87, (uint64_t (**)(_QWORD))a3);
          sub_20BED42F8((int8x16_t *)v9[1].i64, &v9->i64[v14 + 1], v84, (uint64_t (**)(_QWORD))a3);
          sub_20BED42F8(v15 - 1, v15, &v9->i64[v14 + 1], (uint64_t (**)(_QWORD))a3);
          v16 = v9->i64[0];
          v9->i64[0] = *v15;
          *v15 = v16;
        }
        --a4;
        if ((a5 & 1) == 0 && (((uint64_t (*)(uint64_t, uint64_t))*a3)(v9[-1].i64[1], v9->i64[0]) & 1) == 0)
        {
          v31 = v9->i64[0];
          result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v9->i64[0], *v10);
          if ((result & 1) != 0)
          {
            v11 = v9;
            do
            {
              v32 = v11->i64[1];
              v11 = (int8x16_t *)((char *)v11 + 8);
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v32);
            }
            while ((result & 1) == 0);
          }
          else
          {
            v33 = &v9->i64[1];
            do
            {
              v11 = (int8x16_t *)v33;
              if (v33 >= (uint64_t *)a2)
                break;
              ++v33;
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v11->i64[0]);
            }
            while (!(_DWORD)result);
          }
          v34 = a2;
          if (v11 < a2)
          {
            v34 = a2;
            do
            {
              v35 = v34[-1].i64[1];
              v34 = (int8x16_t *)((char *)v34 - 8);
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v35);
            }
            while ((result & 1) != 0);
          }
          while (v11 < v34)
          {
            v36 = v11->i64[0];
            v11->i64[0] = v34->i64[0];
            v34->i64[0] = v36;
            do
            {
              v37 = v11->i64[1];
              v11 = (int8x16_t *)((char *)v11 + 8);
            }
            while (!(*a3)(v31, v37));
            do
            {
              v38 = v34[-1].i64[1];
              v34 = (int8x16_t *)((char *)v34 - 8);
              result = ((uint64_t (*)(uint64_t, uint64_t))*a3)(v31, v38);
            }
            while ((result & 1) != 0);
          }
          v39 = &v11[-1].i64[1];
          if (&v11[-1].u64[1] != (unint64_t *)v9)
            v9->i64[0] = *v39;
          a5 = 0;
          *v39 = v31;
          continue;
        }
        v17 = 0;
        v18 = v9->i64[0];
        do
          v19 = (*a3)(v9->i64[++v17], v18);
        while ((v19 & 1) != 0);
        v20 = &v9->i64[v17];
        v21 = (uint64_t *)v86;
        v47 = v17 == 1;
        a2 = v86;
        if (v47)
        {
          v21 = (uint64_t *)v86;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *--v21;
          }
          while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v23, v18) & 1) == 0);
        }
        else
        {
          do
            v22 = *--v21;
          while (!(*a3)(v22, v18));
        }
        if (v20 >= v21)
        {
          v29 = (int8x16_t *)(v20 - 1);
        }
        else
        {
          v24 = v20;
          v25 = v21;
          do
          {
            v26 = *v24;
            *v24 = *v25;
            *v25 = v26;
            do
            {
              v27 = v24[1];
              ++v24;
            }
            while ((((uint64_t (*)(uint64_t, uint64_t))*a3)(v27, v18) & 1) != 0);
            do
              v28 = *--v25;
            while (!(*a3)(v28, v18));
          }
          while (v24 < v25);
          v29 = (int8x16_t *)(v24 - 1);
          a2 = v86;
        }
        if (v29 != v9)
          v9->i64[0] = v29->i64[0];
        v29->i64[0] = v18;
        if (v20 < v21)
        {
LABEL_32:
          result = sub_20BED3B38(v9, v29, a3, a4, a5 & 1);
          a5 = 0;
          v11 = (int8x16_t *)&v29->u64[1];
          continue;
        }
        v30 = sub_20BED43D8(v9, v29, a3);
        v11 = (int8x16_t *)&v29->u64[1];
        result = sub_20BED43D8((int8x16_t *)&v29->u64[1], a2, a3);
        if (!(_DWORD)result)
        {
          if (v30)
            continue;
          goto LABEL_32;
        }
        a2 = v29;
        if (!v30)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_20BED42F8(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t (**a4)(_QWORD))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a3, *a2);
  if ((v8 & 1) != 0)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
    }
    else
    {
      *a1 = *a2;
      *a2 = v10;
      result = (*a4)(*a3);
      if ((_DWORD)result)
      {
        v13 = *a2;
        *a2 = *a3;
        *a3 = v13;
      }
    }
  }
  else if ((_DWORD)result)
  {
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a4)(*a2, *a1);
    if ((_DWORD)result)
    {
      v12 = *a1;
      *a1 = *a2;
      *a2 = v12;
    }
  }
  return result;
}

BOOL sub_20BED43D8(int8x16_t *a1, int8x16_t *a2, unsigned int (**a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  int8x16_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int8 *v15;
  uint64_t *v16;
  int8x16_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)(a2[-1].i64[1], a1->i64[0]))
      {
        v8 = a1->i64[0];
        a1->i64[0] = a2[-1].i64[1];
        a2[-1].i64[1] = v8;
      }
      return 1;
    case 3:
      sub_20BED42F8(a1, &a1->i64[1], &a2[-1].i64[1], (uint64_t (**)(_QWORD))a3);
      return 1;
    case 4:
      sub_20BED4600(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, &a2[-1].i64[1], (uint64_t (**)(_QWORD))a3);
      return 1;
    case 5:
      v17 = a1 + 1;
      v18 = &a1[1].i64[1];
      sub_20BED4600(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, &a1[1].i64[1], (uint64_t (**)(_QWORD))a3);
      if ((*a3)(a2[-1].i64[1], a1[1].i64[1]))
      {
        v19 = *v18;
        *v18 = a2[-1].i64[1];
        a2[-1].i64[1] = v19;
        if ((*a3)(*v18, v17->i64[0]))
        {
          v20 = v17->i64[0];
          v17->i64[0] = *v18;
          *v18 = v20;
          if (((unsigned int (*)(void))*a3)())
          {
            v21 = a1->i64[1];
            a1->i64[1] = a1[1].i64[0];
            a1[1].i64[0] = v21;
            if (((unsigned int (*)(void))*a3)())
              *a1 = vextq_s8(*a1, *a1, 8uLL);
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 1;
      sub_20BED42F8(a1, &a1->i64[1], (int8x16_t *)a1[1].i64, (uint64_t (**)(_QWORD))a3);
      v10 = &a1[1].i64[1];
      if (&a1[1].u64[1] == (unint64_t *)a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(*v10, v9->i64[0]))
    {
      v13 = *v10;
      v14 = v11;
      while (1)
      {
        v15 = &a1->i8[v14];
        *(uint64_t *)((char *)&a1[1].i64[1] + v14) = *(uint64_t *)((char *)a1[1].i64 + v14);
        if (v14 == -16)
          break;
        v14 -= 8;
        if ((((uint64_t (*)(uint64_t, _QWORD))*a3)(v13, *((_QWORD *)v15 + 1)) & 1) == 0)
        {
          v16 = (uint64_t *)((char *)&a1[1].i64[1] + v14);
          goto LABEL_13;
        }
      }
      v16 = (uint64_t *)a1;
LABEL_13:
      *v16 = v13;
      if (++v12 == 8)
        return v10 + 1 == (uint64_t *)a2;
    }
    v9 = (int8x16_t *)v10;
    v11 += 8;
    if (++v10 == (uint64_t *)a2)
      return 1;
  }
}

uint64_t sub_20BED4600(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t (**a5)(_QWORD))
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_20BED42F8(a1, a2, a3, a5);
  result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a4, *a3);
  if ((_DWORD)result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a3, *a2);
    if ((_DWORD)result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = ((uint64_t (*)(_QWORD, _QWORD))*a5)(*a2, *a1);
      if ((_DWORD)result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

uint64_t sub_20BED46B0(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BED4768((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_20BED4724(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    sub_20BDDF5B4();
  return operator new(40 * a2);
}

uint64_t sub_20BED4768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      v8 = *(_OWORD *)(a3 - 40);
      a3 -= 40;
      *(_OWORD *)(v7 - 40) = v8;
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 40;
      *((_QWORD *)&v14 + 1) -= 40;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20BED4810((uint64_t)v11);
  return v9;
}

uint64_t sub_20BED4810(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BED4844(a1);
  return a1;
}

void sub_20BED4844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 40;
  }
}

uint64_t sub_20BED4888(uint64_t a1)
{
  sub_20BED48BC(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BED48BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 40);
    *(_QWORD *)(a1 + 16) = v2 - 40;
    if (v5)
    {
      *(_QWORD *)(v2 - 32) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
}

uint64_t sub_20BED4914(uint64_t a1, unint64_t a2, float a3, float a4)
{
  int *v7;
  unint64_t v8;
  float v9;
  std::logic_error *exception;
  unint64_t v12;

  v12 = a2;
  sub_20BED1408((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0x666666666666667)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  sub_20BED4AAC((_QWORD *)(a1 + 8), v12);
  v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16))
    v7 = sub_20BED4A34();
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 34) = 1;
  v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_20BED4A20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_20BED4A34()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25473B1F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473B1F0))
  {
    dword_25473B1C8 = 0;
    word_25473B1CC = -1;
    byte_25473B1CE = 1;
    __cxa_atexit((void (*)(void *))sub_20BECEB88, &dword_25473B1C8, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473B1F0);
  }
  return &dword_25473B1C8;
}

_QWORD *sub_20BED4AAC(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BED4B34(a1, a2);
    v4 = a1[1];
    v5 = v4 + 40 * a2;
    do
    {
      *(_DWORD *)v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(_BYTE *)(v4 + 6) = 0;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20BED4B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BECEAE0(&a9);
  _Unwind_Resume(a1);
}

char *sub_20BED4B34(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    sub_20BDDF694();
  result = (char *)sub_20BED4724((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t sub_20BED4B84(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v17;

  v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v10 = a1[4];
  v11 = v9 & *a1;
  if (*(__int16 *)(v10 + 40 * v11 + 4) < 0)
  {
    LOWORD(v12) = 0;
LABEL_7:
    v13 = sub_20BED4D48((uint64_t)a1);
    v14 = a1[4];
    if ((v13 & 1) != 0)
    {
      v11 = v9 & *a1;
      if (*(__int16 *)(v14 + 40 * v11 + 4) < 0)
      {
        LOWORD(v12) = 0;
        v15 = *(unsigned __int16 *)(v14 + 40 * v11 + 4);
      }
      else
      {
        LOWORD(v12) = 0;
        do
        {
          v12 = (__int16)(v12 + 1);
          v11 = (v11 + 1) & *a1;
        }
        while (v12 <= *(__int16 *)(v14 + 40 * v11 + 4));
        v15 = *(unsigned __int16 *)(v14 + 40 * v11 + 4);
      }
    }
    else
    {
      v15 = *(unsigned __int16 *)(v14 + 40 * v11 + 4);
    }
    if (v15 == 0xFFFF)
    {
      v17 = v14 + 40 * v11;
      *(_QWORD *)(v17 + 8) = **a4;
      *(_QWORD *)(v17 + 16) = 0;
      *(_QWORD *)(v17 + 24) = 0;
      *(_QWORD *)(v17 + 32) = 0;
      *(_DWORD *)v17 = v9;
      *(_WORD *)(v17 + 4) = v12;
    }
    else
    {
      sub_20BED4E0C(a1, v11, v12, v9, a3, a4);
    }
    ++a1[6];
    return a1[4] + 40 * v11;
  }
  else
  {
    LOWORD(v12) = 0;
    while (*(_QWORD *)(v10 + 40 * v11 + 8) != *a2)
    {
      v12 = (__int16)(v12 + 1);
      v11 = (v11 + 1) & *a1;
      if (v12 > *(__int16 *)(v10 + 40 * v11 + 4))
        goto LABEL_7;
    }
    return v10 + 40 * v11;
  }
}

uint64_t sub_20BED4D48(uint64_t a1)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 48), v2 >= *(_QWORD *)(a1 + 56)))
  {
    v6 = sub_20BED1164((_QWORD *)a1);
    sub_20BED4E4C(a1, v6);
    *(_BYTE *)(a1 + 72) = 0;
    return 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    *(_BYTE *)(a1 + 73) = 0;
    v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        v8 = *(float *)(a1 + 68);
        v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        sub_20BED4E4C(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_20BED4E0C(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5, uint64_t **a6)
{
  uint64_t v6;
  void *__p;
  void *v8;
  uint64_t v9;

  v6 = **a6;
  __p = 0;
  v8 = 0;
  v9 = 0;
  sub_20BED504C(a1, a2, a3, a4, &v6);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_20BED4E4C(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD v10[9];
  void **v11;

  sub_20BED4914((uint64_t)&v9, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  v3 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 16);
  if (v3 != v4)
  {
    v5 = v3 + 1;
    v6 = (unint64_t)(v10[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        if (v6)
        {
          v8 = 0x9DDFEA08EB382D69 * ((8 * *v5 + 8) ^ HIDWORD(*v5));
          v7 = 0x9DDFEA08EB382D69
             * ((0x9DDFEA08EB382D69 * (HIDWORD(*v5) ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69
                                                                            * (HIDWORD(*v5) ^ (v8 >> 47) ^ v8)) >> 47));
        }
        else
        {
          v7 = *((unsigned int *)v5 - 2);
        }
        sub_20BED4F78(&v9, v9 & v7, 0, v7, v5);
      }
      v5 += 5;
    }
    while (v5 - 1 != v4);
  }
  v10[5] = *(_QWORD *)(a1 + 48);
  sub_20BED1250(&v9, (uint64_t *)a1);
  v11 = (void **)v10;
  sub_20BECEAE0(&v11);
}

void sub_20BED4F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 56) = &a11;
  sub_20BECEAE0((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

__n128 sub_20BED4F78(_QWORD *a1, uint64_t a2, __int16 a3, int a4, _QWORD *a5)
{
  uint64_t v5;
  int *v6;
  _WORD *v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __n128 *v16;
  __n128 result;

  while (1)
  {
    v5 = a1[4];
    v6 = (int *)(v5 + 40 * a2);
    v7 = v6 + 1;
    v8 = *((__int16 *)v6 + 2);
    if (v8 >= a3)
      goto LABEL_4;
    v9 = (_QWORD *)(v5 + 40 * a2 + 8);
    v10 = *a5;
    if (v8 == -1)
      break;
    *a5 = *v9;
    *v9 = v10;
    v11 = (_QWORD *)(v5 + 40 * a2);
    v12 = a5[1];
    a5[1] = v11[2];
    v11[2] = v12;
    v13 = a5[2];
    a5[2] = v11[3];
    v11[3] = v13;
    v14 = a5[3];
    a5[3] = v11[4];
    v11[4] = v14;
    *v7 = a3;
    v15 = *v6;
    *v6 = a4;
    a3 = v8;
    a4 = v15;
LABEL_4:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  *v9 = v10;
  v16 = (__n128 *)(v5 + 40 * a2);
  v16[1].n128_u64[1] = 0;
  v16[2].n128_u64[0] = 0;
  v16[1].n128_u64[0] = 0;
  result = *(__n128 *)(a5 + 1);
  v16[1] = result;
  v16[2].n128_u64[0] = a5[3];
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = 0;
  *v6 = a4;
  *v7 = a3;
  return result;
}

__n128 sub_20BED504C(uint64_t *a1, uint64_t a2, __int16 a3, int a4, _QWORD *a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int *v16;
  int i;
  _WORD *v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __n128 *v25;
  __n128 result;

  v5 = a1[4] + 40 * a2;
  v6 = *a5;
  *a5 = *(_QWORD *)(v5 + 8);
  *(_QWORD *)(v5 + 8) = v6;
  v7 = a5[1];
  a5[1] = *(_QWORD *)(v5 + 16);
  *(_QWORD *)(v5 + 16) = v7;
  v8 = a5[2];
  a5[2] = *(_QWORD *)(v5 + 24);
  *(_QWORD *)(v5 + 24) = v8;
  v9 = a5[3];
  a5[3] = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = v9;
  v10 = *(unsigned __int16 *)(v5 + 4);
  *(_WORD *)(v5 + 4) = a3;
  v11 = *(_DWORD *)v5;
  *(_DWORD *)v5 = a4;
  v12 = *a1;
  v13 = (a2 + 1) & *a1;
  v14 = v10 + 1;
  v15 = a1[4];
  v16 = (int *)(v15 + 40 * v13);
  v18 = v16 + 1;
  for (i = *((unsigned __int16 *)v16 + 2); i != 0xFFFF; i = *((unsigned __int16 *)v16 + 2))
  {
    if ((__int16)v14 <= (__int16)i)
    {
      i = v14;
    }
    else
    {
      if ((__int16)v14 >= 4096)
        *((_BYTE *)a1 + 72) = 1;
      v19 = (_QWORD *)(v15 + 40 * v13);
      v20 = *a5;
      *a5 = v19[1];
      v19[1] = v20;
      v21 = a5[1];
      a5[1] = v19[2];
      v19[2] = v21;
      v22 = a5[2];
      a5[2] = v19[3];
      v19[3] = v22;
      v23 = a5[3];
      a5[3] = v19[4];
      v19[4] = v23;
      *v18 = v14;
      v24 = *v16;
      *v16 = v11;
      v15 = a1[4];
      v11 = v24;
    }
    v13 = (v13 + 1) & v12;
    v14 = i + 1;
    v16 = (int *)(v15 + 40 * v13);
    v18 = v16 + 1;
  }
  v25 = (__n128 *)(v15 + 40 * v13);
  v25->n128_u64[1] = *a5;
  v25[1].n128_u64[0] = 0;
  v25[1].n128_u64[1] = 0;
  v25[2].n128_u64[0] = 0;
  result = *(__n128 *)(a5 + 1);
  v25[1] = result;
  v25[2].n128_u64[0] = a5[3];
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = 0;
  *v16 = v11;
  *v18 = v14;
  return result;
}

BOOL sub_20BED51B0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;

  v2 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  return a1[4] + 40 * a1[5] != sub_20BED5220(a1, a2, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) ^ ((0x9DDFEA08EB382D69* (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) >> 47)));
}

uint64_t sub_20BED5220(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = a1[4];
  v4 = *a1 & a3;
  if (*(__int16 *)(v3 + 40 * v4 + 4) < 0)
  {
LABEL_5:
    v4 = a1[5];
  }
  else
  {
    LOWORD(v5) = 0;
    while (*(_QWORD *)(v3 + 40 * v4 + 8) != *a2)
    {
      v5 = (__int16)(v5 + 1);
      v4 = (v4 + 1) & *a1;
      if (v5 > *(__int16 *)(v3 + 40 * v4 + 4))
        goto LABEL_5;
    }
  }
  return v3 + 40 * v4;
}

uint64_t sub_20BED5288(_QWORD *a1, _QWORD *a2)
{
  unint64_t v2;

  v2 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  return sub_20BED5220(a1, a2, 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) ^ ((0x9DDFEA08EB382D69* (HIDWORD(*a2) ^ (v2 >> 47) ^ v2)) >> 47)));
}

_QWORD *sub_20BED52C8(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDDF654(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20BED5324(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BED5340(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BED53B4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BED53B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v7 - 56) = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v7 - 72) = v8;
      v9 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v7 - 48) = v9;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 72;
      *((_QWORD *)&v15 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20BED5484((uint64_t)v12);
  return v10;
}

uint64_t sub_20BED5484(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BED54B8((uint64_t *)a1);
  return a1;
}

void sub_20BED54B8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20BECECC4(v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

uint64_t sub_20BED5508(uint64_t a1)
{
  sub_20BED553C(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BED553C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = v4 - 72;
    sub_20BECECC4(v5, v4 - 72);
  }
}

std::string *sub_20BED5580(uint64_t *a1, std::string *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  std::string *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v5 = a2;
  if (a5 >= 1)
  {
    v7 = a3;
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = &a3[9 * a5];
      }
      else
      {
        v21 = &a3[(uint64_t)(v12 - (_QWORD)a2) >> 3];
        a1[1] = sub_20BED58E4(v9, (uint64_t)v21, a4, *(_QWORD *)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      sub_20BED5790((uint64_t)a1, (uint64_t)v5, v12, (uint64_t)&v5[3 * a5]);
      sub_20BED5D1C((uint64_t)v27, v7, v21, v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x71C71C71C71C71C7 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0x38E38E38E38E38ELL)
        sub_20BDDF694();
      v15 = 0x8E38E38E38E38E39 * (((uint64_t)a2 - v13) >> 3);
      v16 = 0x8E38E38E38E38E39 * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x1C71C71C71C71C7)
        v18 = 0x38E38E38E38E38ELL;
      else
        v18 = v17;
      v30 = v9;
      if (v18)
        v19 = (char *)sub_20BE7BBA0(v9, v18);
      else
        v19 = 0;
      v22 = (uint64_t)&v19[72 * v15];
      v27[0] = v19;
      v27[1] = v22;
      v28 = v22;
      v29 = &v19[72 * v18];
      v23 = 9 * a5;
      v24 = v22 + 72 * a5;
      v25 = 8 * v23;
      do
      {
        sub_20BED5A0C(v30, v22, (__int128 *)v7);
        v22 += 72;
        v7 += 9;
        v25 -= 72;
      }
      while (v25);
      v28 = v24;
      v5 = (std::string *)sub_20BED5834((uint64_t)a1, v27, (__int128 *)v5);
      sub_20BED5508((uint64_t)v27);
    }
  }
  return v5;
}

void sub_20BED5764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BED5790(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  char v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v8 = v10;
      v11 = *(_OWORD *)(v9 + 24);
      *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 24) = v11;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_QWORD *)(v8 + 56) = 0;
      *(_QWORD *)(v8 + 64) = 0;
      *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
      *(_QWORD *)(v8 + 64) = *(_QWORD *)(v9 + 64);
      *(_QWORD *)(v9 + 48) = 0;
      *(_QWORD *)(v9 + 56) = 0;
      *(_QWORD *)(v9 + 64) = 0;
      v8 += 72;
      v9 += 72;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20BED5C1C((uint64_t)&v13, a2, v7, v6);
}

uint64_t sub_20BED5834(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  sub_20BED53B4(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_20BED5F58(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_20BED58E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a4;
  v13 = a4;
  v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  v12 = 0;
  if (a2 != a3)
  {
    v6 = (__int128 *)(a2 + 24);
    do
    {
      v7 = *(__int128 *)((char *)v6 - 24);
      *(_QWORD *)(v4 + 16) = *((_QWORD *)v6 - 1);
      *(_OWORD *)v4 = v7;
      if (*((char *)v6 + 23) < 0)
      {
        sub_20BDDBFAC((_BYTE *)(v4 + 24), *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v8 = *v6;
        *(_QWORD *)(v4 + 40) = *((_QWORD *)v6 + 2);
        *(_OWORD *)(v4 + 24) = v8;
      }
      v9 = (uint64_t)v6 - 24;
      *(_QWORD *)(v4 + 48) = 0;
      *(_QWORD *)(v4 + 56) = 0;
      *(_QWORD *)(v4 + 64) = 0;
      sub_20BED5AC0((_QWORD *)(v4 + 48), *((_QWORD *)v6 + 3), *((_QWORD *)v6 + 4), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)v6 + 4) - *((_QWORD *)v6 + 3)) >> 3));
      v4 = v14 + 72;
      v14 += 72;
      v6 = (__int128 *)((char *)v6 + 72);
    }
    while (v9 + 72 != a3);
  }
  v12 = 1;
  sub_20BED5B98((uint64_t)v11);
  return v4;
}

void sub_20BED59E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BED5B98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BED5A0C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  v5 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v5;
  v6 = (_BYTE *)(a2 + 24);
  if (*((char *)a3 + 47) < 0)
  {
    sub_20BDDBFAC(v6, *((void **)a3 + 3), *((_QWORD *)a3 + 4));
  }
  else
  {
    v7 = *(__int128 *)((char *)a3 + 24);
    *(_QWORD *)(a2 + 40) = *((_QWORD *)a3 + 5);
    *(_OWORD *)v6 = v7;
  }
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  return sub_20BED5AC0((_QWORD *)(a2 + 48), *((_QWORD *)a3 + 6), *((_QWORD *)a3 + 7), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)a3 + 7) - *((_QWORD *)a3 + 6)) >> 3));
}

void sub_20BED5AA4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BED5AC0(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BED5B44(result, a4);
    result = (_QWORD *)sub_20BED58E4(v6 + 2, a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20BED5B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BECEBCC(&a9);
  _Unwind_Resume(a1);
}

char *sub_20BED5B44(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x38E38E38E38E38FLL)
    sub_20BDDF694();
  result = (char *)sub_20BE7BBA0((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

uint64_t sub_20BED5B98(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BED5BCC((uint64_t *)a1);
  return a1;
}

void sub_20BED5BCC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 72;
      sub_20BECECC4(v5, v3);
    }
    while (v3 != v4);
  }
}

uint64_t sub_20BED5C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void **v11;
  __int128 v12;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 72);
      *(_QWORD *)(v9 - 56) = *(_QWORD *)(a3 + v7 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      v11 = (void **)(a4 + v7 - 48);
      if (*(char *)(a4 + v7 - 25) < 0)
        operator delete(*v11);
      v12 = *(_OWORD *)(v8 - 48);
      *(_QWORD *)(a4 + v7 - 32) = *(_QWORD *)(v8 - 32);
      *(_OWORD *)v11 = v12;
      *(_BYTE *)(v8 - 25) = 0;
      *(_BYTE *)(v8 - 48) = 0;
      sub_20BED5CE4(v9 - 24);
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(v8 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(v8 - 8);
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      v7 -= 72;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void sub_20BED5CE4(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {
    sub_20BECEC54(a1, *(void ***)a1);
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t *sub_20BED5D1C(uint64_t a1, uint64_t *a2, uint64_t *a3, std::string *a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  __int128 v8;

  if (a2 == a3)
    return a2;
  v5 = a3;
  v6 = a2 + 7;
  do
  {
    v7 = v6 - 7;
    v8 = *(_OWORD *)(v6 - 7);
    a4->__r_.__value_.__r.__words[2] = *(v6 - 5);
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v8;
    std::string::operator=(a4 + 1, (const std::string *)(v6 - 4));
    if (a4 != (std::string *)(v6 - 7))
      sub_20BED5DCC(a4[2].__r_.__value_.__r.__words, *(v6 - 1), *v6, 0x8E38E38E38E38E39 * ((*v6 - *(v6 - 1)) >> 3));
    a4 += 3;
    v6 += 9;
  }
  while (v7 + 9 != v5);
  return v5;
}

void sub_20BED5DCC(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  char v14;
  char v15;

  v8 = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 3) < a4)
  {
    sub_20BED5CE4((uint64_t)a1);
    if (a4 > 0x38E38E38E38E38ELL)
      sub_20BDDF694();
    v9 = 0x1C71C71C71C71C72 * ((uint64_t)(a1[2] - *a1) >> 3);
    if (v9 <= a4)
      v9 = a4;
    if (0x8E38E38E38E38E39 * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
      v10 = 0x38E38E38E38E38ELL;
    else
      v10 = v9;
    sub_20BED5B44(a1, v10);
    v11 = sub_20BED58E4(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0x8E38E38E38E38E39 * ((uint64_t)(a1[1] - *a1) >> 3) < a4)
  {
    v12 = a2 + 8 * ((uint64_t)(a1[1] - *a1) >> 3);
    sub_20BED5D1C(&v14, a2, v12);
    v11 = sub_20BED58E4(v8, v12, a3, a1[1]);
LABEL_11:
    a1[1] = v11;
    return;
  }
  sub_20BED5D1C(&v15, a2, a3);
  sub_20BECEC54((uint64_t)a1, v13);
}

void sub_20BED5F48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20BED5F50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BED5F58(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v11 = a4;
  v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v4 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)(v4 + 24) = v6;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 3) = 0;
      *(_QWORD *)(v4 + 48) = 0;
      *(_QWORD *)(v4 + 56) = 0;
      *(_QWORD *)(v4 + 64) = 0;
      *(_OWORD *)(v4 + 48) = a2[3];
      *(_QWORD *)(v4 + 64) = *((_QWORD *)a2 + 8);
      *((_QWORD *)a2 + 6) = 0;
      *((_QWORD *)a2 + 7) = 0;
      *((_QWORD *)a2 + 8) = 0;
      v4 += 72;
      a2 = (__int128 *)((char *)a2 + 72);
    }
    while (a2 != a3);
    v11 = v4;
  }
  v9 = 1;
  sub_20BED5B98((uint64_t)v8);
  return v4;
}

uint64_t sub_20BED600C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[5];

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  v10 = (char *)sub_20BE7BBA0(v7, v9);
  v11 = &v10[72 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[72 * v12];
  v13 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 2) = v13;
  v14 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)v11 + 5) = v14;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *((_QWORD *)v11 + 7) = 0;
  *((_QWORD *)v11 + 8) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_OWORD *)v11 + 3) = *(_OWORD *)(a2 + 48);
  *((_QWORD *)v11 + 8) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  v17[2] = v11 + 72;
  sub_20BED5340(a1, v17);
  v15 = a1[1];
  sub_20BED5508((uint64_t)v17);
  return v15;
}

void sub_20BED6140(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BED5508((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BED6154(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20BED6194((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20BED6194(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

uint64_t sub_20BED61E8(uint64_t a1, char *a2, char *a3)
{
  unsigned __int8 v4;
  int v5;
  _QWORD *v7;
  char *v8;

  v4 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v4 & 1) != 0)
  {
    v7 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, 0, a3);
    *(_QWORD *)a1 = v7;
    if (v7)
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a3, v7, v8);
      v5 = 2;
    }
    else
    {
      v5 = 0;
    }
  }
  else
  {
    v5 = 0;
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v5;
  return a1;
}

uint64_t *sub_20BED6258(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = 0;
  v12 = *result;
  v3 = *a2;
  __dmb(0xBu);
  *result = v3;
  v4 = v12;
  __dmb(0xBu);
  *a2 = v4;
  v13 = result[65];
  v5 = a2[65];
  __dmb(0xBu);
  result[65] = v5;
  v6 = v13;
  __dmb(0xBu);
  a2[65] = v6;
  v7 = result[68];
  result[68] = a2[68];
  a2[68] = v7;
  v8 = result[71];
  result[71] = a2[71];
  a2[71] = v8;
  v9 = result + 2;
  v10 = a2 + 2;
  do
  {
    v11 = v9[v2];
    v9[v2] = v10[v2];
    v10[v2++] = v11;
  }
  while (v2 != 63);
  return result;
}

_QWORD *sub_20BED62EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = sub_20BEC5FD4(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_20BED6334(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BED633C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_20BEC5FD4(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  v15 += 24;
  sub_20BED6450(a1, v14);
  v12 = a1[1];
  sub_20BED65DC((uint64_t)v14);
  return v12;
}

void sub_20BED643C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BED65DC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BED6450(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BED64C4((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BED64C4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20BED6564((uint64_t)v11);
  return v9;
}

uint64_t sub_20BED6564(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BED6598(a1);
  return a1;
}

void sub_20BED6598(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_20BED65DC(uint64_t a1)
{
  sub_20BED6610(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_20BED6610(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t sub_20BED6668(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20BED66DC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20BED66DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  sub_20BED6788((uint64_t)v12);
  return v10;
}

uint64_t sub_20BED6788(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BED3020(a1);
  return a1;
}

_QWORD *sub_20BED67BC(_QWORD *result, __int128 *a2)
{
  _QWORD *v3;
  uint64_t v4;
  __int128 v5;

  v3 = result;
  v4 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_20BDDBFAC((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  *(_QWORD *)(v4 + 24) = *((_QWORD *)a2 + 3);
  v3[1] = v4 + 32;
  return result;
}

void sub_20BED6820(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BED6828(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = sub_20BED2F10(v7, v9);
  else
    v10 = 0;
  v11 = (char *)&v10[4 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[4 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v10[4 * v4 + 3] = *((_QWORD *)a2 + 3);
  v16 = v11 + 32;
  sub_20BED6668(a1, v15);
  v13 = a1[1];
  sub_20BED3064((uint64_t)v15);
  return v13;
}

void sub_20BED6920(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BED3064((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20BED6934(unint64_t *a1@<X8>)
{
  uint64_t v1;
  unint64_t v2;

  v2 = __ldxr(a1);
  __stxr(v2 + v1, a1);
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::~_DelivererBase(unsigned int **this, const void *a2)
{
  sub_20BEBCE60(this + 1, a2);
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_BeginDelivery(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_BeginDelivery(Instance, a2, a3, a4, a5, a6, a7);
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_DelivererBase::_EndDelivery(uint64_t a1, uint64_t *a2)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_EndDelivery(Instance, a2);
}

void pxrInternal__aapl__pxrReserved__::TfNotice::Probe::~Probe(unsigned int **this, const void *a2)
{
  sub_20BEBCE60(this + 1, a2);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfNotice::InsertProbe(_QWORD *a1)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  return pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_InsertProbe(Instance, a1);
}

uint64_t *pxrInternal__aapl__pxrReserved__::TfNotice::RemoveProbe(uint64_t a1)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  return pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_RemoveProbe(Instance, a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_Register@<X0>(pxrInternal__aapl__pxrReserved__::TfNotice *this@<X0>, char **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *Instance;

  Instance = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  return pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Register(Instance, this, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_Send(_QWORD *a1, const std::type_info *a2, char *a3, uint64_t a4)
{
  unint64_t Instance;
  uint64_t v10;

  if (!a1)
    __cxa_bad_typeid();
  v10 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid(*(pxrInternal__aapl__pxrReserved__::TfType **)(*a1 - 8), a2, a3);
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  return pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Send(Instance, a1, &v10, (uint64_t)a2, (uint64_t)a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::_SendWithType(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  return pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Send(Instance, a1, a2, a3, a4, a5);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::Send(pxrInternal__aapl__pxrReserved__::TfNotice *this)
{
  return pxrInternal__aapl__pxrReserved__::TfNotice::_Send(this, 0, 0, MEMORY[0x24BEDB7C8]);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfNotice::SendWithWeakBase(_QWORD *a1, const std::type_info *a2, char *a3, uint64_t a4)
{
  if (!a2)
    a4 = MEMORY[0x24BEDB7C8];
  return pxrInternal__aapl__pxrReserved__::TfNotice::_Send(a1, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::TfNotice::Revoke(uint64_t *a1)
{
  _BOOL8 v2;
  unint64_t Instance;

  v2 = sub_20BED6EB8(a1);
  if (v2)
  {
    Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
    if (!Instance)
      Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
    pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_Revoke(Instance, a1);
  }
  return v2;
}

unsigned int *pxrInternal__aapl__pxrReserved__::TfNotice::Revoke(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  v8 = *a1;
  v9 = v5;
  while (v4 != v5)
  {
    v6 = (uint64_t *)sub_20BED6CE0(&v8, a2, a3);
    pxrInternal__aapl__pxrReserved__::TfNotice::Revoke(v6);
    sub_20BED6D5C(&v8);
    v4 = v8;
    v5 = v9;
  }
  return sub_20BEB4884((unsigned int *)a1);
}

uint64_t sub_20BED6CE0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::TfNotic"
            "e::Key>>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfNotice::Key>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20BED6D54()
{
  JUMPOUT(0x20BED6D04);
}

_QWORD *sub_20BED6D5C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::TfNotice::Key>>::operator++() [T = std::vector<pxrInternal__aapl__pxrReserved__::TfNotice::Key>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 16;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfNotice::_VerifyFailedCast(std::type_info *this, const std::type_info *a2, const pxrInternal__aapl__pxrReserved__::TfNotice *a3, const pxrInternal__aapl__pxrReserved__::TfNotice *a4)
{
  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *Instance;

  Instance = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_VerifyFailedCast(Instance, this, (const pxrInternal__aapl__pxrReserved__::TfNotice *)a2, a3);
}

pxrInternal__aapl__pxrReserved__::TfNotice::Block *pxrInternal__aapl__pxrReserved__::TfNotice::Block::Block(pxrInternal__aapl__pxrReserved__::TfNotice::Block *this)
{
  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *Instance;

  Instance = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_IncrementBlockCount(Instance);
  return this;
}

void pxrInternal__aapl__pxrReserved__::TfNotice::Block::~Block(pxrInternal__aapl__pxrReserved__::TfNotice::Block *this)
{
  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *Instance;

  Instance = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry>::_instance);
  pxrInternal__aapl__pxrReserved__::Tf_NoticeRegistry::_DecrementBlockCount(Instance);
}

BOOL sub_20BED6EB8(uint64_t *a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;

  v2 = sub_20BEB3DAC(a1);
  return v3 & 1 | (unint64_t)v2 && *(_BYTE *)(sub_20BEB3210(a1) + 32) != 0;
}

void pxrInternal__aapl__pxrReserved__::TfRealPath(std::string *this@<X0>, int a2@<W1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  void **v7;
  std::string::size_type size;
  std::string::size_type LongestAccessiblePrefix;
  std::string *p_p;
  int *v11;
  void *v12[2];
  void *v13;
  std::string __p;
  std::string v15;
  void *v16[2];
  uint64_t v17;
  std::string __dst;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  if (a3)
  {
    v7 = (void **)a3;
    if (*(char *)(a3 + 23) < 0)
    {
      **(_BYTE **)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 23) = 0;
    }
  }
  else
  {
    v7 = v16;
  }
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&this->__r_.__value_.__s + 23))
    {
      memset(&v15, 0, sizeof(v15));
      __p = *this;
      goto LABEL_11;
    }
LABEL_15:
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_39;
  }
  size = this->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_15;
  memset(&v15, 0, sizeof(v15));
  sub_20BDDBFAC(&__p, this->__r_.__value_.__l.__data_, size);
LABEL_11:
  if (!a2)
    goto LABEL_22;
  LongestAccessiblePrefix = pxrInternal__aapl__pxrReserved__::TfFindLongestAccessiblePrefix(this, (uint64_t)v7);
  if ((*((char *)v7 + 23) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)v7 + 23))
      goto LABEL_17;
LABEL_34:
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
    goto LABEL_35;
  }
  if (v7[1])
    goto LABEL_34;
LABEL_17:
  std::string::basic_string(&__dst, this, 0, LongestAccessiblePrefix, (std::allocator<char> *)v12);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = __dst;
  sub_20BED7C58(&__dst, (uint64_t *)this, LongestAccessiblePrefix);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  v15 = __dst;
LABEL_22:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__p.__r_.__value_.__l.__size_)
    {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      goto LABEL_27;
    }
  }
  else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    p_p = &__p;
LABEL_27:
    if (realpath_DARWIN_EXTSN((const char *)p_p, (char *)&__dst))
    {
      std::operator+<char>();
      pxrInternal__aapl__pxrReserved__::ArchAbsPath((uint64_t)v12, a4);
      if (SHIBYTE(v13) < 0)
        operator delete(v12[0]);
      goto LABEL_35;
    }
    v11 = __error();
    pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v11, v12);
    if (*((char *)v7 + 23) < 0)
      operator delete(*v7);
    *(_OWORD *)v7 = *(_OWORD *)v12;
    v7[2] = v13;
    goto LABEL_34;
  }
  pxrInternal__aapl__pxrReserved__::ArchAbsPath((uint64_t)&v15, a4);
LABEL_35:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
LABEL_39:
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
}

void sub_20BED7160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

std::string::size_type pxrInternal__aapl__pxrReserved__::TfFindLongestAccessiblePrefix(std::string *this, uint64_t a2)
{
  std::string::size_type size;
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string::size_type i;
  char *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  std::string::size_type *v17;
  std::string::size_type v18;
  char *v19;
  char *v20;
  std::string::size_type v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  std::string::size_type *v29;
  char *v30;
  std::string::size_type v31;
  char *v32;
  unint64_t v33;
  std::string::size_type *v34;
  _BOOL4 v35;
  std::string::size_type v36;
  std::string v38;
  uint64_t v39;
  void *__p;
  char *v41;
  char *v42;

  __p = 0;
  v41 = 0;
  v42 = 0;
  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v5 = this;
  else
    v5 = (std::string *)this->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v6 = 0;
    while (v5->__r_.__value_.__s.__data_[v6] == 47)
    {
      if (size == ++v6)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    v6 = -1;
  }
  v7 = std::string::find(this, 47, v6);
  if (v7 == -1)
  {
    v20 = 0;
    v19 = 0;
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      v21 = this->__r_.__value_.__l.__size_;
  }
  else
  {
    for (i = v7; i != -1; i = std::string::find(this, 47, i + 1))
    {
      v9 = v41;
      if (v41 >= v42)
      {
        v11 = (char *)__p;
        v12 = (v41 - (_BYTE *)__p) >> 3;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 61)
          sub_20BDDF694();
        v14 = v42 - (_BYTE *)__p;
        if ((v42 - (_BYTE *)__p) >> 2 > v13)
          v13 = v14 >> 2;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)sub_20BDDF6A8((uint64_t)&v42, v15);
          v11 = (char *)__p;
          v9 = v41;
        }
        else
        {
          v16 = 0;
        }
        v17 = (std::string::size_type *)&v16[8 * v12];
        *v17 = i;
        v10 = (char *)(v17 + 1);
        while (v9 != v11)
        {
          v18 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *--v17 = v18;
        }
        __p = v17;
        v41 = v10;
        v42 = &v16[8 * v15];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *(_QWORD *)v41 = i;
        v10 = v9 + 8;
      }
      v41 = v10;
    }
    v20 = v41;
    v19 = v42;
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      v21 = this->__r_.__value_.__l.__size_;
    if (v41 < v42)
    {
      *(_QWORD *)v41 = v21;
      v22 = v20 + 8;
      goto LABEL_52;
    }
  }
  v23 = (char *)__p;
  v24 = (v20 - (_BYTE *)__p) >> 3;
  v25 = v24 + 1;
  if ((unint64_t)(v24 + 1) >> 61)
    sub_20BDDF694();
  v26 = v19 - (_BYTE *)__p;
  if (v26 >> 2 > v25)
    v25 = v26 >> 2;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
    v27 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v27 = v25;
  if (v27)
  {
    v28 = (char *)sub_20BDDF6A8((uint64_t)&v42, v27);
    v23 = (char *)__p;
    v20 = v41;
  }
  else
  {
    v28 = 0;
  }
  v29 = (std::string::size_type *)&v28[8 * v24];
  v30 = &v28[8 * v27];
  *v29 = v21;
  v22 = (char *)(v29 + 1);
  while (v20 != v23)
  {
    v31 = *((_QWORD *)v20 - 1);
    v20 -= 8;
    *--v29 = v31;
  }
  __p = v29;
  v41 = v22;
  v42 = v30;
  if (v23)
    operator delete(v23);
LABEL_52:
  v41 = v22;
  v32 = (char *)__p;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    sub_20BDDBFAC(&v38, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  else
    v38 = *this;
  v39 = a2;
  if (v22 != v32)
  {
    v33 = (v22 - v32) >> 3;
    v22 = v32;
    do
    {
      v34 = (std::string::size_type *)&v22[8 * (v33 >> 1)];
      v35 = sub_20BED7568(&v38, *v34, 0xFFFFFFFFFFFFFFFFLL, v39);
      if (v35)
        v33 += ~(v33 >> 1);
      else
        v33 >>= 1;
      if (v35)
        v22 = (char *)(v34 + 1);
    }
    while (v33);
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (v22 == __p)
  {
    v36 = 0;
    if (!__p)
      return v36;
    goto LABEL_73;
  }
  if (v22 != v41)
  {
    v36 = *((_QWORD *)v22 - 1);
    if (!__p)
      return v36;
    goto LABEL_73;
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v36 = this->__r_.__value_.__l.__size_;
    if (!__p)
      return v36;
    goto LABEL_73;
  }
  v36 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (__p)
  {
LABEL_73:
    v41 = (char *)__p;
    operator delete(__p);
  }
  return v36;
}

void sub_20BED7524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20BED7568(std::string *a1, std::string::size_type a2, std::string::size_type __n, uint64_t a4)
{
  if (a2 == __n)
    return 0;
  if (a2 == -1)
    return !sub_20BED7AB4(a1, __n, a4);
  if (__n == -1)
    return sub_20BED7AB4(a1, a2, a4);
  return a2 < __n;
}

void pxrInternal__aapl__pxrReserved__::TfGetExtension(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 v3;
  uint64_t v4;
  std::string::size_type size;
  int v6;
  uint64_t v7;
  std::string v8;
  std::string __p;

  v3 = atomic_load((unsigned __int8 *)&qword_254785150);
  if ((v3 & 1) == 0)
  {
    v7 = a1;
    v6 = __cxa_guard_acquire(&qword_254785150);
    a1 = v7;
    if (v6)
    {
      xmmword_254785138 = 0uLL;
      unk_254785148 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254785138, &dword_20BDBC000);
      __cxa_guard_release(&qword_254785150);
      a1 = v7;
    }
  }
  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    pxrInternal__aapl__pxrReserved__::TfGetBaseName((std::string *)a1, &__p);
    pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix((uint64_t)&__p, 46, &v8);
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    {
      size = v8.__r_.__value_.__l.__size_;
      operator delete(v8.__r_.__value_.__l.__data_);
      if (size)
        goto LABEL_7;
    }
    else if (*((_BYTE *)&v8.__r_.__value_.__s + 23))
    {
LABEL_7:
      pxrInternal__aapl__pxrReserved__::TfStringGetSuffix(&__p, 46, a2);
LABEL_15:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    }
    if (byte_25478514F < 0)
    {
      sub_20BDDBFAC(a2, (void *)xmmword_254785138, *((unint64_t *)&xmmword_254785138 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = xmmword_254785138;
      a2->__r_.__value_.__r.__words[2] = unk_254785148;
    }
    goto LABEL_15;
  }
  if (byte_25478514F < 0)
  {
    sub_20BDDBFAC(a2, (void *)xmmword_254785138, *((unint64_t *)&xmmword_254785138 + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = xmmword_254785138;
    a2->__r_.__value_.__r.__words[2] = unk_254785148;
  }
}

void sub_20BED773C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfReadLink(char *a1@<X0>, _QWORD *a2@<X8>)
{
  if (a1[23] < 0)
    a1 = *(char **)a1;
  pxrInternal__aapl__pxrReserved__::ArchReadLink((pxrInternal__aapl__pxrReserved__ *)a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::TfIsRelativePath(unsigned __int8 *a1)
{
  if (((char)a1[23] & 0x80000000) == 0)
  {
    if (!a1[23])
      return 1;
    return *a1 != 47;
  }
  if (*((_QWORD *)a1 + 1))
  {
    a1 = *(unsigned __int8 **)a1;
    return *a1 != 47;
  }
  return 1;
}

void pxrInternal__aapl__pxrReserved__::TfGlob(const char **a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  const char *v5;
  unsigned int v7;
  const char *v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t *v12;
  const char *v13;
  size_t gl_pathc;
  size_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  void *__p[2];
  uint64_t v30;
  glob_t v31;
  _QWORD v32[5];

  v5 = *a1;
  if (v5 == a1[1])
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  else
  {
    v7 = a2 & 0xFFFFFFFE;
    if (v5[23] < 0)
      v5 = *(const char **)v5;
    glob(v5, v7, 0, &v31);
    v8 = *a1;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) >= 2)
    {
      v9 = 0;
      v10 = a2 | 1;
      v11 = 1;
      do
      {
        v12 = (uint64_t *)&v8[v9];
        v13 = (const char *)(v12 + 3);
        if (*((char *)v12 + 47) < 0)
          v13 = *(const char **)v13;
        glob(v13, v10, 0, &v31);
        ++v11;
        v8 = *a1;
        v9 += 24;
      }
      while (v11 < 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    gl_pathc = v31.gl_pathc;
    if (v31.gl_pathc)
    {
      v15 = 0;
      do
      {
        v16 = v31.gl_pathv[v15];
        if (v16)
        {
          sub_20BDDC0E4(__p, v16);
          v18 = a3[1];
          v17 = a3[2];
          if (v18 >= v17)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *a3) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *a3) >> 3);
            if (2 * v22 > v21)
              v21 = 2 * v22;
            if (v22 >= 0x555555555555555)
              v23 = 0xAAAAAAAAAAAAAAALL;
            else
              v23 = v21;
            v32[4] = a3 + 2;
            if (v23)
              v24 = (char *)sub_20BDE4FF4((uint64_t)(a3 + 2), v23);
            else
              v24 = 0;
            v25 = &v24[24 * v20];
            v32[0] = v24;
            v32[1] = v25;
            v32[3] = &v24[24 * v23];
            v26 = *(_OWORD *)__p;
            *((_QWORD *)v25 + 2) = v30;
            *(_OWORD *)v25 = v26;
            __p[1] = 0;
            v30 = 0;
            __p[0] = 0;
            v32[2] = v25 + 24;
            sub_20BDF34C0(a3, v32);
            v27 = a3[1];
            sub_20BDF3648((uint64_t)v32);
            v28 = SHIBYTE(v30);
            a3[1] = v27;
            if (v28 < 0)
              operator delete(__p[0]);
          }
          else
          {
            v19 = *(_OWORD *)__p;
            *(_QWORD *)(v18 + 16) = v30;
            *(_OWORD *)v18 = v19;
            a3[1] = v18 + 24;
          }
          gl_pathc = v31.gl_pathc;
        }
        ++v15;
      }
      while (v15 < gl_pathc);
    }
    globfree(&v31);
  }
}

void sub_20BED79D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfGlob(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  const char *v6[3];
  const char **v7;

  v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    sub_20BED7D38(v6, 1uLL, (__int128 *)a1);
    pxrInternal__aapl__pxrReserved__::TfGlob(v6, a2, a3);
    v7 = v6;
    sub_20BDE5038((void ***)&v7);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_20BED7A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

BOOL sub_20BED7AB4(std::string *__str, std::string::size_type __n, uint64_t a3)
{
  uint64_t v4;
  _BOOL8 v5;
  __n128 v7;
  char v8;
  std::string v9;

  std::string::basic_string(&v9, __str, 0, __n, (std::allocator<char> *)&v8);
  *__error() = 0;
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  if (pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)&v9, 0))
  {
    if (!pxrInternal__aapl__pxrReserved__::TfIsLink((const char *)&v9)
      || pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)&v9, 1))
    {
      sub_20BED7BD8(a3);
LABEL_7:
      if (*(char *)(a3 + 23) < 0)
        v4 = *(_QWORD *)(a3 + 8);
      else
        v4 = *(unsigned __int8 *)(a3 + 23);
      v5 = v4 == 0;
      goto LABEL_12;
    }
    v7.n128_f64[0] = sub_20BED7BD8(a3);
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8))
        goto LABEL_7;
    }
    else if (*(_BYTE *)(a3 + 23))
    {
      goto LABEL_7;
    }
    MEMORY[0x212B929D0](a3, "encountered dangling symbolic link", v7);
    goto LABEL_7;
  }
  sub_20BED7BD8(a3);
  v5 = 0;
LABEL_12:
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return v5;
}

void sub_20BED7BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20BED7BD8(uint64_t a1)
{
  double result;
  __int128 v3;
  uint64_t v4;

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      return result;
  }
  else if (*(_BYTE *)(a1 + 23))
  {
    return result;
  }
  if (*__error())
  {
    pxrInternal__aapl__pxrReserved__::ArchStrerror(&v3);
  }
  else
  {
    v3 = 0uLL;
    v4 = 0;
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

_QWORD *sub_20BED7C58(_QWORD *__dst, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  unint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (v6 < a3)
      goto LABEL_15;
    v4 = (uint64_t *)*a2;
  }
  else
  {
    v6 = *((unsigned __int8 *)a2 + 23);
    if (v6 < a3)
LABEL_15:
      sub_20BEB9180();
  }
  v7 = v6 - a3;
  if (v6 - a3 >= 0x7FFFFFFFFFFFFFF8)
    sub_20BDDC038();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = v10 | 0x8000000000000000;
    *__dst = v8;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v7;
    v8 = __dst;
    if (v6 == a3)
      goto LABEL_14;
  }
  memmove(v8, (char *)v4 + a3, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  return __dst;
}

_QWORD *sub_20BED7D38(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE4FA4(a1, a2);
    v6 = a1[1];
    v7 = 3 * a2;
    v8 = v6 + 24 * a2;
    v9 = 8 * v7;
    do
    {
      if (*((char *)a3 + 23) < 0)
      {
        sub_20BDDBFAC((_BYTE *)v6, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v10 = *a3;
        *(_QWORD *)(v6 + 16) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v6 = v10;
      }
      v6 += 24;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_20BED7DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20BDE5038(&a9);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::TfPatternMatcher::TfPatternMatcher(pxrInternal__aapl__pxrReserved__::TfPatternMatcher *this)
{
  double result;

  *(_WORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 10) = 0;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  return result;
}

{
  double result;

  *(_WORD *)this = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_BYTE *)this + 32) = 1;
  *((_DWORD *)this + 10) = 0;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_QWORD *)this + 10) = 0;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfPatternMatcher::TfPatternMatcher(uint64_t a1, __int128 *a2, char a3, char a4)
{
  uint64_t v5;
  __int128 v6;

  *(_BYTE *)a1 = a3;
  *(_BYTE *)(a1 + 1) = a4;
  v5 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v5, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
  }
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfPatternMatcher::~TfPatternMatcher(void **this)
{
  pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)(this + 5));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfPatternMatcher::GetInvalidReason@<X0>(pxrInternal__aapl__pxrReserved__::TfPatternMatcher *this@<X0>, _QWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::TfPatternMatcher::_Compile(this);
  return pxrInternal__aapl__pxrReserved__::ArchRegex::GetError((_QWORD *)this + 5, a2);
}

void pxrInternal__aapl__pxrReserved__::TfPatternMatcher::_Compile(pxrInternal__aapl__pxrReserved__::TfPatternMatcher *this)
{
  _BYTE v2[48];

  if (*((_BYTE *)this + 32))
  {
    *((_BYTE *)this + 32) = 0;
    pxrInternal__aapl__pxrReserved__::ArchRegex::ArchRegex(v2, (char *)this + 8, (*(_BYTE *)this == 0) | (2 * *((unsigned __int8 *)this + 1)));
    sub_20BED8164((uint64_t)this + 40, (uint64_t)v2);
    pxrInternal__aapl__pxrReserved__::ArchRegex::~ArchRegex((pxrInternal__aapl__pxrReserved__::ArchRegex *)v2);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::TfPatternMatcher::IsValid(pxrInternal__aapl__pxrReserved__::TfPatternMatcher *this)
{
  pxrInternal__aapl__pxrReserved__::TfPatternMatcher::_Compile(this);
  return pxrInternal__aapl__pxrReserved__::ArchRegex::operator BOOL((uint64_t)this + 40);
}

const regex_t *pxrInternal__aapl__pxrReserved__::TfPatternMatcher::Match(pxrInternal__aapl__pxrReserved__::TfPatternMatcher *a1, const char *a2, uint64_t a3)
{
  _QWORD *v6;
  __int128 v8;
  uint64_t v9;

  pxrInternal__aapl__pxrReserved__::TfPatternMatcher::_Compile(a1);
  v6 = (_QWORD *)((char *)a1 + 40);
  if (pxrInternal__aapl__pxrReserved__::ArchRegex::operator BOOL((uint64_t)v6))
  {
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
    }
    return pxrInternal__aapl__pxrReserved__::ArchRegex::Match((uint64_t)v6, a2);
  }
  else
  {
    if (a3)
    {
      pxrInternal__aapl__pxrReserved__::ArchRegex::GetError(v6, &v8);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 16) = v9;
    }
    return 0;
  }
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::TfPatternMatcher::SetIsCaseSensitive(unsigned __int8 *this, int a2)
{
  if (*this != a2)
  {
    this[32] = 1;
    *this = a2;
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfPatternMatcher::SetIsGlobPattern(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 1) != a2)
  {
    *(_BYTE *)(this + 32) = 1;
    *(_BYTE *)(this + 1) = a2;
  }
  return this;
}

std::string *pxrInternal__aapl__pxrReserved__::TfPatternMatcher::SetPattern(std::string *result, std::string *__str)
{
  std::string *v3;
  std::string *v4;
  uint64_t v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string::size_type v8;
  int v9;
  std::string::value_type *v10;
  std::string *i;

  v3 = result;
  v4 = (std::string *)&result->__r_.__value_.__r.__words[1];
  v5 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  size = __str->__r_.__value_.__l.__size_;
  if ((v5 & 0x80u) == 0)
    v7 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    v7 = __str->__r_.__value_.__l.__size_;
  v8 = result[1].__r_.__value_.__s.__data_[7];
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = result->__r_.__value_.__r.__words[2];
  if (v7 == v8)
  {
    if (v9 >= 0)
      v10 = &result->__r_.__value_.__s.__data_[8];
    else
      v10 = (std::string::value_type *)v4->__r_.__value_.__r.__words[0];
    if ((v5 & 0x80) != 0)
    {
      result = (std::string *)memcmp(__str->__r_.__value_.__l.__data_, v10, size);
      if (!(_DWORD)result)
        return result;
    }
    else
    {
      if (!(_DWORD)v5)
        return result;
      for (i = __str; i->__r_.__value_.__s.__data_[0] == *v10; i = (std::string *)((char *)i + 1))
      {
        ++v10;
        if (!--v5)
          return result;
      }
    }
  }
  v3[1].__r_.__value_.__s.__data_[8] = 1;
  return std::string::operator=(v4, __str);
}

uint64_t sub_20BED8164(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v4);
  v5 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  sub_20BDE82DC(a1 + 32, (__int128 *)(a2 + 32));
  return a1;
}

__n128 pxrInternal__aapl__pxrReserved__::TfRefBase::SetUniqueChangedListener(__n128 *a1, uint64_t a2, char *a3)
{
  BOOL v3;
  __n128 result;
  _QWORD v6[4];
  char v7;
  int v8;

  if (pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener)
    v3 = 0;
  else
    v3 = *(&pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener + 1) == 0;
  if (!v3 || off_2549907C8 != 0)
  {
    v6[0] = "tf/refBase.cpp";
    v6[1] = "SetUniqueChangedListener";
    v6[2] = 44;
    v6[3] = "static void pxrInternal__aapl__pxrReserved__::TfRefBase::SetUniqueChangedListener(UniqueChangedListener)";
    v7 = 0;
    v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"Setting an already set UniqueChangedListener", a3);
  }
  result = *a1;
  off_2549907C8 = (uint64_t (*)(_QWORD))a1[1].n128_u64[0];
  *(__n128 *)&pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_AddRefMaybeLocked(uint64_t this, const pxrInternal__aapl__pxrReserved__::TfRefBase *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = this;
  v3 = (unsigned int *)(this + 8);
  if ((_DWORD)a2 != -1)
  {
    do
    {
      v4 = __ldxr(v3);
      if (v4 == (_DWORD)a2)
      {
        if (!__stxr((_DWORD)a2 - 1, v3))
          return this;
      }
      else
      {
        __clrex();
      }
      LODWORD(a2) = v4;
    }
    while (v4 != -1);
  }
  pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener();
  do
    v5 = __ldxr(v3);
  while (__stxr(v5 - 1, v3));
  if (v5 == -1)
    ((void (*)(uint64_t, _QWORD))*(&pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener + 1))(v2, 0);
  return off_2549907C8();
}

BOOL pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::_RemoveRefMaybeLocked(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *this, const pxrInternal__aapl__pxrReserved__::TfRefBase *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;

  v3 = (unsigned int *)((char *)this + 8);
  if ((_DWORD)a2 != -2)
  {
    v4 = a2;
    do
    {
      v5 = __ldxr(v3);
      if (v5 == v4)
      {
        if (!__stlxr(v4 + 1, v3))
          return v4 == -1;
      }
      else
      {
        __clrex();
      }
      v4 = v5;
    }
    while (v5 != -2);
  }
  v6 = pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener();
  do
    v4 = __ldxr(v3);
  while (__stlxr(v4 + 1, v3));
  if (v4 == -2)
    v6 = ((uint64_t (*)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, uint64_t))*(&pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener + 1))(this, 1);
  off_2549907C8(v6);
  return v4 == -1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::AddRefIfNonzero(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *this, const pxrInternal__aapl__pxrReserved__::TfRefBase *a2)
{
  unsigned int *v3;
  int v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  unsigned int v12;

  v3 = (unsigned int *)((char *)this + 8);
  v4 = atomic_load((unsigned int *)this + 2);
  if (v4 >= 1)
  {
    do
    {
      v5 = __ldaxr(v3);
      if (v5 == v4)
      {
        if (!__stlxr(v4 + 1, v3))
          return 1;
      }
      else
      {
        __clrex();
      }
      v4 = v5;
    }
    while (v5 > 0);
    if (v5 < 0)
      goto LABEL_11;
    return 0;
  }
  v5 = v4;
  if ((v4 & 0x80000000) == 0)
    return 0;
LABEL_11:
  if (v5 == -1)
    goto LABEL_21;
  v7 = v5 - 1;
  do
  {
    v8 = v5;
    v5 = __ldaxr(v3);
    if (v5 == v8)
    {
      if (!__stlxr(v7, v3))
      {
        v9 = 1;
        goto LABEL_18;
      }
    }
    else
    {
      __clrex();
    }
    v9 = 0;
LABEL_18:
    if ((v9 & 1) != 0)
      return 1;
    v7 = v5 - 1;
  }
  while ((v5 - 1) < 0xFFFFFFFE);
  if (!v5)
    return 0;
LABEL_21:
  v10 = pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener();
  v11 = -1;
  while (1)
  {
    v12 = __ldaxr(v3);
    if (v12 == v11)
    {
      if (!__stlxr(v11 - 1, v3))
      {
        v6 = 1;
        goto LABEL_27;
      }
    }
    else
    {
      __clrex();
    }
    v6 = 0;
LABEL_27:
    if ((v6 & 1) != 0)
      break;
    v11 = v12;
    if (!v12)
      goto LABEL_33;
  }
  if (v11 == -1)
    v10 = ((uint64_t (*)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *, _QWORD))*(&pxrInternal__aapl__pxrReserved__::TfRefBase::_uniqueChangedListener + 1))(this, 0);
LABEL_33:
  off_2549907C8(v10);
  return v6;
}

void pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError(uint64_t a1, pxrInternal__aapl__pxrReserved__ *this)
{
  __int128 v2;
  const char *v3;
  _QWORD v4[2];
  char v5;
  _OWORD v6[2];
  uint64_t v7;
  int v8;

  v2 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v2;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = 4;
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled(this, (uint64_t)v4);
  if (v5 >= 0)
    v3 = (const char *)v4;
  else
    v3 = (const char *)v4[0];
  pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"attempted member lookup on NULL %s", v3);
}

void sub_20BED8590(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  BOOL v15;
  _Unwind_Exception *v16;

  std::string::~string((std::string *)&a10);
  v16 = (_Unwind_Exception *)pxrInternal__aapl__pxrReserved__::ArchAbort((pxrInternal__aapl__pxrReserved__ *)1, v15);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(v16);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v10;
  unint64_t v11;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA5A084 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v6 = (char *)operator new(0xA0uLL);
      *(_QWORD *)v6 = 0;
      *((_QWORD *)v6 + 1) = 850045863;
      *((_OWORD *)v6 + 1) = 0u;
      *((_OWORD *)v6 + 2) = 0u;
      *((_OWORD *)v6 + 3) = 0u;
      *((_QWORD *)v6 + 8) = 0;
      *((_QWORD *)v6 + 9) = 20;
      *((_OWORD *)v6 + 5) = 0u;
      *((_OWORD *)v6 + 6) = 0u;
      *((_DWORD *)v6 + 28) = 1065353216;
      *(_OWORD *)(v6 + 120) = 0u;
      *(_OWORD *)(v6 + 136) = 0u;
      *((_DWORD *)v6 + 38) = 1065353216;
      v8 = atomic_load(a1);
      if (v8)
      {
        if (v6 != (char *)v8)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracke"
                "r>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TfRefPtrTracker]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v7);
        }
      }
      else
      {
        do
          v10 = __ldaxr(a1);
        while (__stlxr((unint64_t)v6, a1));
        if (v10)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracke"
                "r>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TfRefPtrTracker]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v7, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker*> &)::isInitializing);
  }
  v11 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_15TfRefPtrTrackerEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BED87D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::SetInstanceConstructed(unint64_t result)
{
  unint64_t v1;
  char *v2;
  char *v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_instance));
  if (v1)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", 47);
    v4[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/instantiateSingleton.h", (uint64_t)v2, 0x2Fu);
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>"
            "::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TfRefPtrTracker]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", v3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::DeleteInstance()
{
  pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *i;
  unint64_t v1;
  void *v2;

  for (i = (pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_instance);
        i;
        i = (pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *)v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_instance);
    if ((pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *)v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRefPtrTracker>::_instance))
      {
        pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::~TfRefPtrTracker(i);
        operator delete(v2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

double pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::TfRefPtrTracker(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 850045863;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 20;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  return result;
}

{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 850045863;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 20;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_DWORD *)this + 28) = 1065353216;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *((_DWORD *)this + 38) = 1065353216;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::~TfRefPtrTracker(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this)
{
  const void *v2;

  sub_20BEC57F0((uint64_t)this + 120);
  sub_20BEB3FA4((uint64_t)this + 80);
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  sub_20BEBCE60((unsigned int **)this, v2);
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::_Watch(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this, const pxrInternal__aapl__pxrReserved__::TfRefBase *a2)
{
  std::mutex *v4;
  __int128 v5;

  v4 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  v5 = (unint64_t)a2;
  sub_20BED9934((uint64_t)this + 80, &v5, &v5);
  std::mutex::unlock(v4);
}

void sub_20BED8A54(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::_Unwatch(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this, const pxrInternal__aapl__pxrReserved__::TfRefBase *a2)
{
  std::mutex *v3;
  const pxrInternal__aapl__pxrReserved__::TfRefBase *v4;

  v4 = a2;
  v3 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  sub_20BED9B64((_QWORD *)this + 10, &v4);
  std::mutex::unlock(v3);
}

void sub_20BED8AB0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::_AddTrace(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  std::mutex *v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v11 = a3;
  v12 = a2;
  v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v7 = sub_20BEB4074((_QWORD *)(a1 + 120), &v12);
  if (v7)
  {
    v8 = sub_20BEB4074((_QWORD *)(a1 + 80), v7 + 6);
    if (v8)
      --v8[3];
  }
  v9 = sub_20BEB4074((_QWORD *)(a1 + 80), &v11);
  if (v9)
  {
    ++v9[3];
    v13 = &v12;
    v10 = sub_20BED9BD8(a1 + 120, &v12, (uint64_t)&unk_20CAC184C, &v13);
    pxrInternal__aapl__pxrReserved__::ArchGetStackFrames(*(pxrInternal__aapl__pxrReserved__ **)(a1 + 72), 2, (uint64_t *)v10 + 3);
    *((_QWORD *)v10 + 6) = v11;
    *((_DWORD *)v10 + 14) = a4;
  }
  else if (v7)
  {
    sub_20BED9E48((_QWORD *)(a1 + 120), v7);
  }
  std::mutex::unlock(v6);
}

void sub_20BED8BBC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::_RemoveTraces(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this, const void *a2)
{
  std::mutex *v3;
  uint64_t *v4;
  _QWORD *v5;
  const void *v6;

  v6 = a2;
  v3 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  v4 = sub_20BEB4074((_QWORD *)this + 15, &v6);
  if (v4)
  {
    v5 = sub_20BEB4074((_QWORD *)this + 10, v4 + 6);
    if (v5)
      --v5[3];
    sub_20BED9E48((_QWORD *)this + 15, v4);
  }
  std::mutex::unlock(v3);
}

void sub_20BED8C60(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::GetWatchedCounts(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this@<X0>, uint64_t a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  sub_20BED9E90(a2, (uint64_t)this + 80);
  std::mutex::unlock(v4);
}

void sub_20BED8CBC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::GetAllTraces(pxrInternal__aapl__pxrReserved__::TfRefPtrTracker *this@<X0>, uint64_t a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  sub_20BED9F04(a2, (uint64_t)this + 120);
  std::mutex::unlock(v4);
}

void sub_20BED8D14(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::ReportAllWatchedCounts(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  const std::locale::facet *v5;
  uint64_t result;
  std::locale::id *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void **v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  std::locale v21;

  v4 = sub_20BDDC1C8(a2, (uint64_t)"TfRefPtrTracker watched counts:", 31);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet((const std::locale *)__p, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale((std::locale *)__p);
  std::ostream::put();
  result = std::ostream::flush();
  v19 = *(_QWORD *)(a1 + 96);
  v20 = 0;
  if (v19)
  {
    v7 = (std::locale::id *)MEMORY[0x24BEDB350];
    do
    {
      sub_20BDDC1C8(a2, (uint64_t)"  ", 2);
      sub_20BED8F70(&v19);
      v8 = (_QWORD *)std::ostream::operator<<();
      sub_20BDDC1C8(v8, (uint64_t)": ", 2);
      sub_20BED8F70(&v19);
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = sub_20BDDC1C8(v9, (uint64_t)" (type ", 7);
      v11 = sub_20BED8F70(&v19);
      sub_20BED8FF8(*(_QWORD **)(*v11 + 16), __p);
      if ((v18 & 0x80u) == 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      if ((v18 & 0x80u) == 0)
        v13 = v18;
      else
        v13 = (uint64_t)__p[1];
      v14 = sub_20BDDC1C8(v10, (uint64_t)v12, v13);
      v15 = sub_20BDDC1C8(v14, (uint64_t)")", 1);
      std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
      v16 = std::locale::use_facet(&v21, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
      std::locale::~locale(&v21);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v18 < 0)
        operator delete(__p[0]);
      result = sub_20BED9020((uint64_t)&v19);
    }
    while (v19 != v20);
  }
  return result;
}

void sub_20BED8F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::locale a17)
{
  std::locale::~locale((std::locale *)&__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BED8F70(_QWORD *result)
{
  char *v1;
  char *v2;
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TfHashMap<con"
            "st pxrInternal__aapl__pxrReserved__::TfRefBase *, unsigned long, pxrInternal__aapl__pxrReserved__::TfHash>>:"
            ":operator->() [T = const pxrInternal__aapl__pxrReserved__::TfHashMap<const pxrInternal__aapl__pxrReserved__:"
            ":TfRefBase *, unsigned long, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

void sub_20BED8FF8(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  if (a1)
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)a2);
  else
    sub_20BDDC0E4(a2, "<unknown>");
}

uint64_t sub_20BED9020(uint64_t a1)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TfHashMap<const pxrInternal__aapl__pxrReserved__::TfRefBase *, unsigned long, pxrInternal__aapl__pxrReserve"
            "d__::TfHash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::TfHashMap<const pxrInternal__aapl__"
            "pxrReserved__::TfRefBase *, unsigned long, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)a1 = **(_QWORD **)a1;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::ReportAllTraces(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  const std::locale::facet *v5;
  std::locale::id *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  const std::locale::facet *v17;
  std::locale v18;
  std::locale::__imp *v19;
  std::locale v20;

  v4 = sub_20BDDC1C8(a2, (uint64_t)"TfRefPtrTracker traces:", 23);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  std::ostream::flush();
  std::mutex::lock((std::mutex *)(a1 + 8));
  v18.__locale_ = *(std::locale::__imp **)(a1 + 136);
  v19 = 0;
  v6 = (std::locale::id *)MEMORY[0x24BEDB350];
  while (v18.__locale_ != v19)
  {
    v7 = *sub_20BED9398(&v18);
    sub_20BDDC1C8(a2, (uint64_t)"  Owner: ", 9);
    sub_20BED9398(&v18);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = sub_20BDDC1C8(v8, (uint64_t)" ", 1);
    v10 = strlen(off_24C51BA68[*(unsigned int *)(v7 + 56)]);
    v11 = sub_20BDDC1C8(v9, (uint64_t)off_24C51BA68[*(unsigned int *)(v7 + 56)], v10);
    sub_20BDDC1C8(v11, (uint64_t)" ", 1);
    v12 = (_QWORD *)std::ostream::operator<<();
    v13 = sub_20BDDC1C8(v12, (uint64_t)":", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
    v14 = std::locale::use_facet(&v20, v6);
    ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
    std::locale::~locale(&v20);
    std::ostream::put();
    std::ostream::flush();
    v15 = sub_20BDDC1C8(a2, (uint64_t)"==============================================================", 62);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v20, v6);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v20);
    std::ostream::put();
    std::ostream::flush();
    pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames(a2, (uint64_t *)(v7 + 24), 0);
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v17 = std::locale::use_facet(&v20, v6);
    ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
    std::locale::~locale(&v20);
    std::ostream::put();
    std::ostream::flush();
    sub_20BED9420((uint64_t)&v18);
  }
  std::mutex::unlock((std::mutex *)(a1 + 8));
}

void sub_20BED9358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, std::locale a10, uint64_t a11, std::locale a12)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BED9398(_QWORD *result)
{
  char *v1;
  char *v2;
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v1 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/iterator.h", (uint64_t)v1, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TfHashMap<con"
            "st void *, pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::Trace, pxrInternal__aapl__pxrReserved__::TfHas"
            "h>>::operator->() [T = const pxrInternal__aapl__pxrReserved__::TfHashMap<const void *, pxrInternal__aapl__px"
            "rReserved__::TfRefPtrTracker::Trace, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", v2);
  }
  return result;
}

uint64_t sub_20BED9420(uint64_t a1)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TfHashMap<const void *, pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::Trace, pxrInternal__aapl__pxrRes"
            "erved__::TfHash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::TfHashMap<const void *, pxrInte"
            "rnal__aapl__pxrReserved__::TfRefPtrTracker::Trace, pxrInternal__aapl__pxrReserved__::TfHash>, Reverse = false]";
    v4 = 0;
    v5 = 1;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)a1 = **(_QWORD **)a1;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfRefPtrTracker::ReportTracesForWatched(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  void *p_p;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const std::locale::facet *v11;
  std::locale::id *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;
  _QWORD *v19;
  const std::locale::facet *v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  const std::locale::facet *v23;
  _QWORD *v24;
  const std::locale::facet *v25;
  _QWORD *v26;
  _QWORD *v27;
  const std::locale::facet *v28;
  std::mutex *v29;
  void *__p;
  void *v31;
  unsigned __int8 v32;
  _QWORD *v33;
  std::locale v34;

  v33 = a3;
  v29 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (sub_20BEDA270((_QWORD *)(a1 + 80), &v33))
  {
    sub_20BDDC1C8(a2, (uint64_t)"TfRefPtrTracker traces for ", 27);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = sub_20BDDC1C8(v5, (uint64_t)" (type ", 7);
    sub_20BED8FF8(v33, &__p);
    if ((v32 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v32 & 0x80u) == 0)
      v8 = v32;
    else
      v8 = (uint64_t)v31;
    v9 = sub_20BDDC1C8(v6, (uint64_t)p_p, v8);
    v10 = sub_20BDDC1C8(v9, (uint64_t)")", 1);
    std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(_QWORD *)(*v10 - 24)));
    v11 = std::locale::use_facet(&v34, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
    std::locale::~locale(&v34);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v32 < 0)
      operator delete(__p);
    __p = *(void **)(a1 + 136);
    v31 = 0;
    v12 = (std::locale::id *)MEMORY[0x24BEDB350];
    while (__p != v31)
    {
      v13 = sub_20BED9398(&__p);
      v14 = *v13;
      if (*(_QWORD **)(*v13 + 48) == v33)
      {
        sub_20BDDC1C8(a2, (uint64_t)"  Owner: ", 9);
        sub_20BED9398(&__p);
        v15 = (_QWORD *)std::ostream::operator<<();
        v16 = sub_20BDDC1C8(v15, (uint64_t)" ", 1);
        v17 = strlen(off_24C51BA68[*(unsigned int *)(v14 + 56)]);
        v18 = sub_20BDDC1C8(v16, (uint64_t)off_24C51BA68[*(unsigned int *)(v14 + 56)], v17);
        v19 = sub_20BDDC1C8(v18, (uint64_t)":", 1);
        std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
        v20 = std::locale::use_facet(&v34, v12);
        ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
        v21 = sub_20BDDC1C8(a2, (uint64_t)"==============================================================", 62);
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
        v22 = std::locale::use_facet(&v34, v12);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
        pxrInternal__aapl__pxrReserved__::ArchPrintStackFrames(a2, (uint64_t *)(v14 + 24), 0);
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
        v23 = std::locale::use_facet(&v34, v12);
        ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
        std::locale::~locale(&v34);
        std::ostream::put();
        std::ostream::flush();
      }
      sub_20BED9420((uint64_t)&__p);
    }
    v24 = sub_20BDDC1C8(a2, (uint64_t)"==============================================================", 62);
    std::ios_base::getloc((const std::ios_base *)((char *)v24 + *(_QWORD *)(*v24 - 24)));
    v25 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v25->__vftable[2].~facet_0)(v25, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
  }
  else
  {
    sub_20BDDC1C8(a2, (uint64_t)"TfRefPtrTracker traces for ", 27);
    v26 = (_QWORD *)std::ostream::operator<<();
    v27 = sub_20BDDC1C8(v26, (uint64_t)":  not watched", 14);
    std::ios_base::getloc((const std::ios_base *)((char *)v27 + *(_QWORD *)(*v27 - 24)));
    v28 = std::locale::use_facet((const std::locale *)&__p, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
    std::locale::~locale((std::locale *)&__p);
    std::ostream::put();
  }
  std::ostream::flush();
  std::mutex::unlock(v29);
}

void sub_20BED98C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::locale a17)
{
  std::mutex::unlock(a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BED9934(uint64_t a1, _QWORD *a2, _OWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = v6;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v6;
  *((_OWORD *)i + 1) = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20BED9B50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20BED9B64(_QWORD *a1, _QWORD *a2)
{
  uint64_t *result;

  result = sub_20BEB4074(a1, a2);
  if (result)
  {
    sub_20BED9B98(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t sub_20BED9B98(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  void *__p;

  v2 = *a2;
  sub_20BEB587C(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    operator delete(v3);
  return v2;
}

char *sub_20BED9BD8(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;

  v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == *a2)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v13 = (_QWORD *)(a1 + 16);
  v11 = (char *)operator new(0x40uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  *(_OWORD *)(v11 + 24) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *((_QWORD *)v11 + 7) = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_20BDEC6E0(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v11 = *v21;
LABEL_38:
    *v21 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *v13;
  *v13 = v11;
  *(_QWORD *)(v20 + 8 * v4) = v13;
  if (*(_QWORD *)v11)
  {
    v22 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (_QWORD *)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_20BED9E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20BEC604C(v11, v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20BED9E48(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  sub_20BEB587C(a1, a2, (uint64_t)&__p);
  v3 = __p;
  __p = 0;
  if (v3)
    sub_20BEC604C((uint64_t)&v6, v3);
  return v2;
}

uint64_t sub_20BED9E90(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20BDEC6E0(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20BED9934(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_20BED9EEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEB3FA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20BED9F04(uint64_t a1, uint64_t a2)
{
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20BDEC6E0(a1, *(_QWORD *)(a2 + 8));
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_20BED9F78(a1, i + 2, (uint64_t)(i + 2));
  return a1;
}

void sub_20BED9F60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BEC57F0(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BED9F78(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD *v19;

  v5 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = v5;
      if (v5 >= v6)
        v3 = v5 % v6;
    }
    else
    {
      v3 = v5 & (v6 - 1);
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      result = (_QWORD *)*v8;
      if (*v8)
      {
        do
        {
          v10 = result[1];
          if (v10 == v5)
          {
            if (result[2] == *a2)
              return result;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6)
                v10 %= v6;
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20BEDA1C4(a1, v5, a3, (uint64_t)&v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    sub_20BDEC6E0(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *v19 = *v17;
    *v17 = v19;
  }
  else
  {
    *v19 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*v19)
    {
      v18 = *(_QWORD *)(*v19 + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19;
    }
  }
  result = v19;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20BEDA1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_20BEC604C((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BEDA1C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  const void *v9;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = *(const void **)(a3 + 8);
  v8[2] = *(_QWORD *)a3;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  result = sub_20BEC5FD4(v8 + 3, v9, *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - (_QWORD)v9) >> 3);
  v8[6] = *(_QWORD *)(a3 + 32);
  *((_DWORD *)v8 + 14) = *(_DWORD *)(a3 + 40);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20BEDA254(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BEC604C(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEDA270(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = v3;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = v3 & (*(_QWORD *)&v2 - 1);
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  _OWORD *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CA5A0C6 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfRegTest*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfRegTest*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = operator new(0x50uLL);
      *v10 = 0u;
      v10[1] = 0u;
      *((_DWORD *)v10 + 8) = 1065353216;
      *(_OWORD *)((char *)v10 + 40) = 0u;
      *(_OWORD *)((char *)v10 + 56) = 0u;
      *((_DWORD *)v10 + 18) = 1065353216;
      v12 = atomic_load(a1);
      if (v12)
      {
        if (v10 != (_OWORD *)v12)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_C"
                "reateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TfRegTest]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v11);
        }
      }
      else
      {
        do
          v13 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_C"
                "reateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::TfRegTest]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::TfRegTest*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_9TfRegTestEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20BEDA538(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::SetI"
            "nstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::TfRegTest]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::DeleteInstance()
{
  uint64_t i;
  unint64_t v1;
  void *v2;

  for (i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance);
        i;
        i = v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance);
    if (v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance))
      {
        sub_20BEB3F28(i + 40);
        v2 = (void *)sub_20BEB3F28(i);
        operator delete(v2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

unint64_t pxrInternal__aapl__pxrReserved__::TfRegTest::GetInstance(pxrInternal__aapl__pxrReserved__::TfRegTest *this)
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfRegTest>::_instance);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRegTest::Register(pxrInternal__aapl__pxrReserved__::TfRegTest *this, char *a2, BOOL (*a3)(void))
{
  void *__p[2];
  char v7;
  void **v8;

  sub_20BDDC0E4(__p, a2);
  v8 = __p;
  *((_QWORD *)sub_20BEC286C((uint64_t)this, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8) + 5) = a3;
  if (v7 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_20BEDA734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRegTest::Register(pxrInternal__aapl__pxrReserved__::TfRegTest *this, char *a2, BOOL (*a3)(int, char **))
{
  char *v4;
  void *__p[2];
  char v7;
  void **v8;

  v4 = (char *)this + 40;
  sub_20BDDC0E4(__p, a2);
  v8 = __p;
  *((_QWORD *)sub_20BEC286C((uint64_t)v4, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8) + 5) = a3;
  if (v7 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_20BEDA7C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfRegTest::_PrintTestNames(pxrInternal__aapl__pxrReserved__::TfRegTest *this)
{
  _QWORD *v2;
  uint64_t *v3;
  unint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t *v7;
  unint64_t v8;
  __int128 *v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const std::locale::facet *v20;
  uint64_t *v21;
  void *__dst;
  unint64_t v23;
  std::locale v24;

  v2 = (_QWORD *)MEMORY[0x24BEDB310];
  sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)"Valid tests are:", 16);
  v21 = 0;
  __dst = 0;
  v23 = 0;
  sub_20BE71C2C((uint64_t *)&v21, *((_QWORD *)this + 8) + *((_QWORD *)this + 3));
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  if (v3)
  {
    v4 = (unint64_t)__dst;
    do
    {
      v5 = (__int128 *)(v3 + 2);
      if (v4 >= v23)
      {
        v4 = sub_20BE4EE50((uint64_t *)&v21, v5);
      }
      else
      {
        if (*((char *)v3 + 39) < 0)
        {
          sub_20BDDBFAC((_BYTE *)v4, (void *)v3[2], v3[3]);
        }
        else
        {
          v6 = *v5;
          *(_QWORD *)(v4 + 16) = v3[4];
          *(_OWORD *)v4 = v6;
        }
        v4 += 24;
      }
      __dst = (void *)v4;
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  v7 = (uint64_t *)*((_QWORD *)this + 7);
  if (v7)
  {
    v8 = (unint64_t)__dst;
    do
    {
      v9 = (__int128 *)(v7 + 2);
      if (v8 >= v23)
      {
        v8 = sub_20BE4EE50((uint64_t *)&v21, v9);
      }
      else
      {
        if (*((char *)v7 + 39) < 0)
        {
          sub_20BDDBFAC((_BYTE *)v8, (void *)v7[2], v7[3]);
        }
        else
        {
          v10 = *v9;
          *(_QWORD *)(v8 + 16) = v7[4];
          *(_OWORD *)v8 = v10;
        }
        v8 += 24;
      }
      __dst = (void *)v8;
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  else
  {
    v8 = (unint64_t)__dst;
  }
  v11 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - (_QWORD)v21) >> 3));
  if ((uint64_t *)v8 == v21)
    v12 = 0;
  else
    v12 = v11;
  sub_20BEDAFAC((uint64_t)v21, (const void **)v8, (uint64_t)&v24, v12, 1);
  v13 = v21;
  v14 = (uint64_t *)__dst;
  if (v21 != __dst)
  {
    v15 = (_QWORD *)MEMORY[0x24BEDB310];
    do
    {
      v16 = sub_20BDDC1C8(v15, (uint64_t)"\n    ", 5);
      v17 = *((char *)v13 + 23);
      if (v17 >= 0)
        v18 = (uint64_t)v13;
      else
        v18 = *v13;
      if (v17 >= 0)
        v19 = *((unsigned __int8 *)v13 + 23);
      else
        v19 = v13[1];
      sub_20BDDC1C8(v16, v18, v19);
      v13 += 3;
    }
    while (v13 != v14);
  }
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v20 = std::locale::use_facet(&v24, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v20->__vftable[2].~facet_0)(v20, 10);
  std::locale::~locale(&v24);
  std::ostream::put();
  std::ostream::flush();
  v24.__locale_ = (std::locale::__imp *)&v21;
  sub_20BDE5038((void ***)&v24);
}

void sub_20BEDAA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, std::locale a14)
{
  std::locale::~locale(&a14);
  a13 = &a10;
  sub_20BDE5038((void ***)&a13);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRegTest::_Main(pxrInternal__aapl__pxrReserved__::TfRegTest *this, int a2, char **a3)
{
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char **v11;
  char *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  void *p_p;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  const std::locale::facet *v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _BYTE v35[8];
  void *__p;
  uint64_t v37;
  unsigned __int8 v38;
  void *v39;
  uint64_t v40;
  unsigned __int8 v41;
  std::locale v42;

  sub_20BDDC0E4(&v39, *a3);
  if (a2 <= 1)
  {
    v6 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)"Usage: ", 7);
    if ((v41 & 0x80u) == 0)
      v7 = &v39;
    else
      v7 = v39;
    if ((v41 & 0x80u) == 0)
      v8 = v41;
    else
      v8 = v40;
    v9 = sub_20BDDC1C8(v6, (uint64_t)v7, v8);
    sub_20BDDC1C8(v9, (uint64_t)" testName [args]\n", 17);
    pxrInternal__aapl__pxrReserved__::TfRegTest::_PrintTestNames(this);
    v10 = 2;
    goto LABEL_43;
  }
  v12 = a3[1];
  v11 = a3 + 1;
  sub_20BDDC0E4(&__p, v12);
  if (sub_20BEC301C(this, (unsigned __int8 *)&__p))
  {
    if (a2 >= 3)
    {
      if ((v41 & 0x80u) == 0)
        v13 = &v39;
      else
        v13 = v39;
      if ((v41 & 0x80u) == 0)
        v14 = v41;
      else
        v14 = v40;
      v15 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v13, v14);
      v16 = sub_20BDDC1C8(v15, (uint64_t)": test function '", 17);
      if ((v38 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v38 & 0x80u) == 0)
        v18 = v38;
      else
        v18 = v37;
      v19 = sub_20BDDC1C8(v16, (uint64_t)p_p, v18);
      v20 = sub_20BDDC1C8(v19, (uint64_t)"' takes no arguments.", 21);
      std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
      v21 = std::locale::use_facet(&v42, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale(&v42);
      std::ostream::put();
      std::ostream::flush();
      v10 = 2;
      goto LABEL_41;
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v35);
    v42.__locale_ = (std::locale::__imp *)&__p;
    v25 = sub_20BEC286C((uint64_t)this, (unsigned __int8 *)&__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v42);
    v26 = (*((uint64_t (**)(void))v25 + 5))();
    v24 = sub_20BEDADA8((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v35, v26);
LABEL_27:
    v10 = v24;
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v35);
    goto LABEL_41;
  }
  if (sub_20BEC301C((_QWORD *)this + 5, (unsigned __int8 *)&__p))
  {
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v35);
    v42.__locale_ = (std::locale::__imp *)&__p;
    v22 = sub_20BEC286C((uint64_t)this + 40, (unsigned __int8 *)&__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v42);
    v23 = (*((uint64_t (**)(_QWORD, char **))v22 + 5))((a2 - 1), v11);
    v24 = sub_20BEDADA8((pxrInternal__aapl__pxrReserved__::TfErrorMark *)v35, v23);
    goto LABEL_27;
  }
  if ((v41 & 0x80u) == 0)
    v27 = &v39;
  else
    v27 = v39;
  if ((v41 & 0x80u) == 0)
    v28 = v41;
  else
    v28 = v40;
  v29 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v27, v28);
  v30 = sub_20BDDC1C8(v29, (uint64_t)": unknown test function ", 24);
  if ((v38 & 0x80u) == 0)
    v31 = &__p;
  else
    v31 = __p;
  if ((v38 & 0x80u) == 0)
    v32 = v38;
  else
    v32 = v37;
  v33 = sub_20BDDC1C8(v30, (uint64_t)v31, v32);
  sub_20BDDC1C8(v33, (uint64_t)".\n", 2);
  pxrInternal__aapl__pxrReserved__::TfRegTest::_PrintTestNames(this);
  v10 = 3;
LABEL_41:
  if ((char)v38 < 0)
    operator delete(__p);
LABEL_43:
  if ((char)v41 < 0)
    operator delete(v39);
  return v10;
}

void sub_20BEDAD3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEDADA8(pxrInternal__aapl__pxrReserved__::TfErrorMark *this, int a2)
{
  unint64_t *Instance;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *__p[2];
  unsigned __int8 v21;

  if (!a2)
    return 1;
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v4 = *(_QWORD *)this;
  v5 = atomic_load(Instance + 18);
  if (v4 >= v5
    || pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl(this, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    return 0;
  }
  v8 = sub_20BEC5244((unint64_t *)this, 0);
  v6 = 100;
  if (v8 != (_QWORD *)sub_20BEDAF68())
  {
    v9 = (_QWORD *)MEMORY[0x24BEDB310];
    do
    {
      v10 = sub_20BDDC1C8(v9, (uint64_t)"*** Error in ", 13);
      sub_20BDDC0E4(__p, (char *)v8[2]);
      if ((v21 & 0x80u) == 0)
        v11 = __p;
      else
        v11 = (void **)__p[0];
      if ((v21 & 0x80u) == 0)
        v12 = v21;
      else
        v12 = (uint64_t)__p[1];
      v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
      sub_20BDDC1C8(v13, (uint64_t)"@line ", 6);
      v14 = (_QWORD *)std::ostream::operator<<();
      v15 = sub_20BDDC1C8(v14, (uint64_t)"\n    ", 5);
      v16 = *((char *)v8 + 79);
      if (v16 >= 0)
        v17 = (uint64_t)(v8 + 7);
      else
        v17 = v8[7];
      if (v16 >= 0)
        v18 = *((unsigned __int8 *)v8 + 79);
      else
        v18 = v8[8];
      v19 = sub_20BDDC1C8(v15, v17, v18);
      sub_20BDDC1C8(v19, (uint64_t)"\n", 1);
      if ((char)v21 < 0)
        operator delete(__p[0]);
      v8 = (_QWORD *)v8[1];
      v6 = (v6 + 1);
    }
    while (v8 != (_QWORD *)sub_20BEDAF68());
  }
  return v6;
}

void sub_20BEDAF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEDAF68()
{
  unint64_t Instance;
  char v2;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v2 = 0;
  return sub_20BEB5B80((unint64_t *)(Instance + 152), &v2);
}

void sub_20BEDAFAC(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, char a5)
{
  const void **v9;
  const void **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const void **v16;
  uint64_t v17;
  const void **v18;
  const void **v19;
  const void **v20;
  __int128 v21;
  unint64_t v22;
  char v23;
  BOOL v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const void *v28;
  const void *v29;

void sub_20BEDB350(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v7;
  uint64_t v9;
  const void **v10;
  const void **v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  uint64_t v16;
  __int128 v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;

  if ((const void **)a1 != a2)
  {
    v19 = v3;
    v20 = v4;
    v7 = (const void **)(a1 + 24);
    if ((const void **)(a1 + 24) != a2)
    {
      v9 = 0;
      v10 = (const void **)a1;
      do
      {
        v11 = v10;
        v10 = v7;
        if (sub_20BDDDF74(a3, v7, v11))
        {
          v17 = *(_OWORD *)v10;
          v18 = v10[2];
          v10[1] = 0;
          v10[2] = 0;
          *v10 = 0;
          v12 = v9;
          do
          {
            v13 = a1 + v12;
            v14 = (void **)(a1 + v12 + 24);
            if (*(char *)(a1 + v12 + 47) < 0)
              operator delete(*v14);
            *(_OWORD *)v14 = *(_OWORD *)v13;
            *(_QWORD *)(a1 + v12 + 40) = *(_QWORD *)(v13 + 16);
            *(_BYTE *)(v13 + 23) = 0;
            *(_BYTE *)v13 = 0;
            if (!v12)
            {
              v16 = a1;
              goto LABEL_13;
            }
            v12 -= 24;
          }
          while (sub_20BDDDF74(a3, (const void **)&v17, (const void **)(v12 + a1)));
          v15 = *(char *)(a1 + v12 + 47);
          v16 = a1 + v12 + 24;
          if (v15 < 0)
            operator delete(*(void **)v16);
LABEL_13:
          *(_OWORD *)v16 = v17;
          *(_QWORD *)(v16 + 16) = v18;
        }
        v7 = v10 + 3;
        v9 += 24;
      }
      while (v10 + 3 != a2);
    }
  }
}

void sub_20BEDB470(const void **a1, const void **a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  const void **v6;
  const void **v7;
  const void **v9;
  const void **v10;
  const void **v11;
  void **v12;
  BOOL v13;
  int v14;
  const void **v15;
  __int128 v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 != a2)
  {
    v18 = v3;
    v19 = v4;
    v6 = a1;
    v7 = a1 + 3;
    if (a1 + 3 != a2)
    {
      v9 = a1 - 3;
      do
      {
        v10 = v6;
        v6 = v7;
        if (sub_20BDDDF74(a3, v7, v10))
        {
          v16 = *(_OWORD *)v6;
          v17 = v6[2];
          v6[1] = 0;
          v6[2] = 0;
          *v6 = 0;
          v11 = v9;
          do
          {
            v12 = (void **)(v11 + 6);
            if (*((char *)v11 + 71) < 0)
              operator delete(*v12);
            *(_OWORD *)v12 = *(_OWORD *)(v11 + 3);
            v11[8] = v11[5];
            *((_BYTE *)v11 + 47) = 0;
            *((_BYTE *)v11 + 24) = 0;
            v13 = sub_20BDDDF74(a3, (const void **)&v16, v11);
            v11 -= 3;
          }
          while (v13);
          v14 = *((char *)v11 + 71);
          v15 = v11 + 6;
          if (v14 < 0)
            operator delete((void *)*v15);
          *(_OWORD *)v15 = v16;
          v15[2] = v17;
        }
        v7 = v6 + 3;
        v9 += 3;
      }
      while (v6 + 3 != a2);
    }
  }
}

uint64_t sub_20BEDB574(const void **a1, const void **a2, const void **a3, uint64_t a4)
{
  BOOL v8;
  uint64_t result;
  const void *v10;
  __int128 v11;
  const void *v12;
  const void *v13;
  __int128 v14;
  const void *v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  __int128 v23;
  const void *v24;

  v8 = sub_20BDDDF74(a4, a2, a1);
  result = sub_20BDDDF74(a4, a3, a2);
  if (!v8)
  {
    if (!(_DWORD)result)
      return result;
    v13 = a2[2];
    v14 = *(_OWORD *)a2;
    v15 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v15;
    *(_OWORD *)a3 = v14;
    a3[2] = v13;
    if (!sub_20BDDDF74(a4, a2, a1))
      return 1;
    v16 = a1[2];
    v17 = *(_OWORD *)a1;
    v18 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v18;
    *(_OWORD *)a2 = v17;
    a2[2] = v16;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v19 = a1[2];
    v20 = *(_OWORD *)a1;
    v21 = a2[2];
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = v21;
    *(_OWORD *)a2 = v20;
    a2[2] = v19;
    if (!sub_20BDDDF74(a4, a3, a2))
      return 1;
    v22 = a2[2];
    v23 = *(_OWORD *)a2;
    v24 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v24;
    *(_OWORD *)a3 = v23;
    a3[2] = v22;
    return 2;
  }
  v10 = a1[2];
  v11 = *(_OWORD *)a1;
  v12 = a3[2];
  *(_OWORD *)a1 = *(_OWORD *)a3;
  a1[2] = v12;
  *(_OWORD *)a3 = v11;
  a3[2] = v10;
  return 1;
}

const void **sub_20BEDB6BC(const void **a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  const void **v6;
  const void **v7;
  _BOOL4 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  void **v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  const void *v17;
  __int128 v18;
  const void *v19;

  v4 = a2;
  v16 = *(_OWORD *)a1;
  v17 = a1[2];
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (sub_20BDDDF74(a3, (const void **)&v16, (const void **)(a2 - 24)))
  {
    v6 = a1;
    do
      v6 += 3;
    while (!sub_20BDDDF74(a3, (const void **)&v16, v6));
  }
  else
  {
    v7 = a1 + 3;
    do
    {
      v6 = v7;
      if ((unint64_t)v7 >= v4)
        break;
      v8 = sub_20BDDDF74(a3, (const void **)&v16, v7);
      v7 = v6 + 3;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 24;
    while (sub_20BDDDF74(a3, (const void **)&v16, (const void **)v4));
  }
  while ((unint64_t)v6 < v4)
  {
    v9 = *(_OWORD *)v6;
    v19 = v6[2];
    v18 = v9;
    v10 = *(_OWORD *)v4;
    v6[2] = *(const void **)(v4 + 16);
    *(_OWORD *)v6 = v10;
    v11 = v18;
    *(_QWORD *)(v4 + 16) = v19;
    *(_OWORD *)v4 = v11;
    do
      v6 += 3;
    while (!sub_20BDDDF74(a3, (const void **)&v16, v6));
    do
      v4 -= 24;
    while (sub_20BDDDF74(a3, (const void **)&v16, (const void **)v4));
  }
  v12 = (void **)(v6 - 3);
  if (v6 - 3 == a1)
  {
    if (*((char *)v6 - 1) < 0)
      operator delete(*v12);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete((void *)*a1);
    v13 = *(_OWORD *)v12;
    a1[2] = *(v6 - 1);
    *(_OWORD *)a1 = v13;
    *((_BYTE *)v6 - 1) = 0;
    *((_BYTE *)v6 - 24) = 0;
  }
  v14 = v16;
  *(v6 - 1) = v17;
  *(_OWORD *)v12 = v14;
  return v6;
}

unint64_t sub_20BEDB84C(__int128 *a1, const void **a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const void **v9;
  __int128 v10;
  const void *v11;
  const void *v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  const void *v20;

  v6 = 0;
  v17 = *a1;
  v18 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  do
    v6 += 24;
  while (sub_20BDDDF74(a3, (const void **)((char *)a1 + v6), (const void **)&v17));
  v7 = (unint64_t)a1 + v6;
  if (v6 == 24)
  {
    do
    {
      if (v7 >= (unint64_t)a2)
        break;
      a2 -= 3;
    }
    while (!sub_20BDDDF74(a3, a2, (const void **)&v17));
  }
  else
  {
    do
      a2 -= 3;
    while (!sub_20BDDDF74(a3, a2, (const void **)&v17));
  }
  v8 = (unint64_t)a1 + v6;
  if (v7 < (unint64_t)a2)
  {
    v9 = a2;
    do
    {
      v19 = *(_OWORD *)v8;
      v10 = v19;
      v20 = *(const void **)(v8 + 16);
      v11 = v20;
      v12 = v9[2];
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = v12;
      v9[2] = v11;
      *(_OWORD *)v9 = v10;
      do
        v8 += 24;
      while (sub_20BDDDF74(a3, (const void **)v8, (const void **)&v17));
      do
        v9 -= 3;
      while (!sub_20BDDDF74(a3, v9, (const void **)&v17));
    }
    while (v8 < (unint64_t)v9);
  }
  v13 = (void **)(v8 - 24);
  if ((__int128 *)(v8 - 24) == a1)
  {
    if (*(char *)(v8 - 1) < 0)
      operator delete(*v13);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v14 = *(_OWORD *)v13;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v8 - 8);
    *a1 = v14;
    *(_BYTE *)(v8 - 1) = 0;
    *(_BYTE *)(v8 - 24) = 0;
  }
  v15 = v17;
  *(_QWORD *)(v8 - 8) = v18;
  *(_OWORD *)v13 = v15;
  return v8 - 24;
}

BOOL sub_20BEDB9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  const void **v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = a2 - 24;
      if (sub_20BDDDF74(a3, (const void **)(a2 - 24), (const void **)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(v8 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_QWORD *)(a1 + 16) = v11;
        *(_OWORD *)v8 = v10;
        *(_QWORD *)(v8 + 16) = v9;
      }
      return 1;
    case 3uLL:
      sub_20BEDB574((const void **)a1, (const void **)(a1 + 24), (const void **)(a2 - 24), a3);
      return 1;
    case 4uLL:
      sub_20BEDBC08(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a2 - 24), a3);
      return 1;
    case 5uLL:
      sub_20BEDBCF0(a1, (const void **)(a1 + 24), (const void **)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a2 - 24), a3);
      return 1;
    default:
      v12 = (const void **)(a1 + 48);
      sub_20BEDB574((const void **)a1, (const void **)(a1 + 24), (const void **)(a1 + 48), a3);
      v13 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v14 = 0;
      v15 = 0;
      break;
  }
  while (1)
  {
    if (sub_20BDDDF74(a3, (const void **)v13, v12))
    {
      v22 = *(_OWORD *)v13;
      v23 = *(_QWORD *)(v13 + 16);
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)v13 = 0;
      v16 = v14;
      do
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 72);
        if (*(char *)(a1 + v16 + 95) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 48);
        *(_QWORD *)(a1 + v16 + 88) = *(_QWORD *)(v17 + 64);
        *(_BYTE *)(v17 + 71) = 0;
        *(_BYTE *)(v17 + 48) = 0;
        if (v16 == -48)
        {
          v21 = a1;
          goto LABEL_15;
        }
        v19 = sub_20BDDDF74(a3, (const void **)&v22, (const void **)(a1 + v16 + 24));
        v16 -= 24;
      }
      while (v19);
      v20 = *(char *)(a1 + v16 + 95);
      v21 = a1 + v16 + 72;
      if (v20 < 0)
        operator delete(*(void **)v21);
LABEL_15:
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(v21 + 16) = v23;
      if (++v15 == 8)
        return v13 + 24 == a2;
    }
    v12 = (const void **)v13;
    v14 += 24;
    v13 += 24;
    if (v13 == a2)
      return 1;
  }
}

__n128 sub_20BEDBC08(uint64_t a1, const void **a2, const void **a3, __int128 *a4, uint64_t a5)
{
  __n128 result;
  const void *v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  __int128 v15;
  const void *v16;
  const void *v17;
  const void *v18;

  sub_20BEDB574((const void **)a1, a2, a3, a5);
  if (sub_20BDDDF74(a5, (const void **)a4, a3))
  {
    v11 = a3[2];
    v12 = *(_OWORD *)a3;
    v13 = (const void *)*((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *a4;
    a3[2] = v13;
    *a4 = v12;
    *((_QWORD *)a4 + 2) = v11;
    if (sub_20BDDDF74(a5, a3, a2))
    {
      v14 = a2[2];
      v15 = *(_OWORD *)a2;
      v16 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v16;
      *(_OWORD *)a3 = v15;
      a3[2] = v14;
      if (sub_20BDDDF74(a5, a2, (const void **)a1))
      {
        v17 = *(const void **)(a1 + 16);
        result = *(__n128 *)a1;
        v18 = a2[2];
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v18;
        *(__n128 *)a2 = result;
        a2[2] = v17;
      }
    }
  }
  return result;
}

__n128 sub_20BEDBCF0(uint64_t a1, const void **a2, const void **a3, __int128 *a4, __int128 *a5, uint64_t a6)
{
  __n128 result;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  const void *v16;
  __int128 v17;
  const void *v18;
  const void *v19;
  __int128 v20;
  const void *v21;
  const void *v22;
  const void *v23;

  sub_20BEDBC08(a1, a2, a3, a4, a6);
  if (sub_20BDDDF74(a6, (const void **)a5, (const void **)a4))
  {
    v13 = *((_QWORD *)a4 + 2);
    v14 = *a4;
    v15 = *((_QWORD *)a5 + 2);
    *a4 = *a5;
    *((_QWORD *)a4 + 2) = v15;
    *a5 = v14;
    *((_QWORD *)a5 + 2) = v13;
    if (sub_20BDDDF74(a6, (const void **)a4, a3))
    {
      v16 = a3[2];
      v17 = *(_OWORD *)a3;
      v18 = (const void *)*((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *a4;
      a3[2] = v18;
      *a4 = v17;
      *((_QWORD *)a4 + 2) = v16;
      if (sub_20BDDDF74(a6, a3, a2))
      {
        v19 = a2[2];
        v20 = *(_OWORD *)a2;
        v21 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v21;
        *(_OWORD *)a3 = v20;
        a3[2] = v19;
        if (sub_20BDDDF74(a6, a2, (const void **)a1))
        {
          v22 = *(const void **)(a1 + 16);
          result = *(__n128 *)a1;
          v23 = a2[2];
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v23;
          *(__n128 *)a2 = result;
          a2[2] = v22;
        }
      }
    }
  }
  return result;
}

__int128 *sub_20BEDBE10(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  int64_t v18;
  __int128 *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  _BYTE v28[15];

  if ((__int128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 24 * v10);
      do
      {
        sub_20BEDC058(a1, a4, v9, v12);
        v12 = (__n128 *)((char *)v12 - 24);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (sub_20BDDDF74(a4, (const void **)v14, (const void **)a1))
        {
          v15 = *((_QWORD *)v14 + 2);
          v16 = *v14;
          v17 = *(_QWORD *)(a1 + 16);
          *v14 = *(_OWORD *)a1;
          *((_QWORD *)v14 + 2) = v17;
          *(_OWORD *)a1 = v16;
          *(_QWORD *)(a1 + 16) = v15;
          sub_20BEDC058(a1, a4, v9, (__n128 *)a1);
        }
        v14 = (__int128 *)((char *)v14 + 24);
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = (__int128 *)((char *)a2 - 24);
      do
      {
        v20 = *(_QWORD *)a1;
        *(_QWORD *)v28 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v28[7] = *(_QWORD *)(a1 + 15);
        v21 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v22 = sub_20BEDC1EC(a1, a4, v18);
        v23 = v22;
        v24 = *(char *)(v22 + 23);
        if (v19 == (__int128 *)v22)
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          *(_QWORD *)v23 = v20;
          *(_QWORD *)(v23 + 8) = *(_QWORD *)v28;
          *(_QWORD *)(v23 + 15) = *(_QWORD *)&v28[7];
          *(_BYTE *)(v23 + 23) = v21;
        }
        else
        {
          if (v24 < 0)
            operator delete(*(void **)v22);
          v25 = *v19;
          *(_QWORD *)(v23 + 16) = *((_QWORD *)v19 + 2);
          *(_OWORD *)v23 = v25;
          *(_QWORD *)v19 = v20;
          *((_QWORD *)v19 + 1) = *(_QWORD *)v28;
          *(_QWORD *)((char *)v19 + 15) = *(_QWORD *)&v28[7];
          *((_BYTE *)v19 + 23) = v21;
          sub_20BEDC2C4(a1, v23 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v23 + 24 - a1) >> 3));
        }
        v19 = (__int128 *)((char *)v19 - 24);
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_20BEDC040(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__n128 sub_20BEDC058(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 *v7;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;
  __n128 *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v22 = v4;
    v23 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)a4 - a1) >> 3)))
    {
      v12 = (0x5555555555555556 * (((uint64_t)a4 - a1) >> 3)) | 1;
      v13 = a1 + 24 * v12;
      v14 = 0x5555555555555556 * (((uint64_t)a4 - a1) >> 3) + 2;
      if (v14 < a3 && sub_20BDDDF74(a2, (const void **)(a1 + 24 * v12), (const void **)(v13 + 24)))
      {
        v13 += 24;
        v12 = v14;
      }
      if (!sub_20BDDDF74(a2, (const void **)v13, (const void **)v7))
      {
        v20 = *v7;
        v21 = v7[1].n128_u64[0];
        v7->n128_u64[1] = 0;
        v7[1].n128_u64[0] = 0;
        v7->n128_u64[0] = 0;
        while (1)
        {
          v16 = (__n128 *)v13;
          if (v7[1].n128_i8[7] < 0)
            operator delete((void *)v7->n128_u64[0]);
          v17 = *(__n128 *)v13;
          v7[1].n128_u64[0] = *(_QWORD *)(v13 + 16);
          *v7 = v17;
          *(_BYTE *)(v13 + 23) = 0;
          *(_BYTE *)v13 = 0;
          if (v9 < v12)
            break;
          v18 = (2 * v12) | 1;
          v13 = a1 + 24 * v18;
          v19 = 2 * v12 + 2;
          if (v19 < a3 && sub_20BDDDF74(a2, (const void **)(a1 + 24 * v18), (const void **)(v13 + 24)))
          {
            v13 += 24;
            v18 = v19;
          }
          v7 = v16;
          v12 = v18;
          if (sub_20BDDDF74(a2, (const void **)v13, (const void **)&v20))
          {
            if (v16[1].n128_i8[7] < 0)
              operator delete((void *)v16->n128_u64[0]);
            break;
          }
        }
        result = v20;
        v16[1].n128_u64[0] = v21;
        *v16 = result;
      }
    }
  }
  return result;
}

uint64_t sub_20BEDC1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 < a3 && sub_20BDDDF74(a2, (const void **)v9, (const void **)(v9 + 24)))
    {
      v9 += 24;
      v6 = v11;
    }
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v12 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)a1 = v12;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double sub_20BEDC2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v8;
  __int128 *v9;
  __int128 *v10;
  double result;
  __int128 *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a4 >= 2)
  {
    v16 = v4;
    v17 = v5;
    v8 = (unint64_t)(a4 - 2) >> 1;
    v9 = (__int128 *)(a1 + 24 * v8);
    v10 = (__int128 *)(a2 - 24);
    if (sub_20BDDDF74(a3, (const void **)v9, (const void **)(a2 - 24)))
    {
      v14 = *v10;
      v15 = *((_QWORD *)v10 + 2);
      *((_QWORD *)v10 + 1) = 0;
      *((_QWORD *)v10 + 2) = 0;
      *(_QWORD *)v10 = 0;
      while (1)
      {
        v12 = v9;
        if (*((char *)v10 + 23) < 0)
          operator delete(*(void **)v10);
        v13 = *v9;
        *((_QWORD *)v10 + 2) = *((_QWORD *)v9 + 2);
        *v10 = v13;
        *((_BYTE *)v9 + 23) = 0;
        *(_BYTE *)v9 = 0;
        if (!v8)
          break;
        v8 = (v8 - 1) >> 1;
        v9 = (__int128 *)(a1 + 24 * v8);
        v10 = v12;
        if (!sub_20BDDDF74(a3, (const void **)v9, (const void **)&v14))
        {
          if (*((char *)v12 + 23) < 0)
            operator delete(*(void **)v12);
          break;
        }
      }
      result = *(double *)&v14;
      *v12 = v14;
      *((_QWORD *)v12 + 2) = v15;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfRegistryManager::GetInstance(pxrInternal__aapl__pxrReserved__::TfRegistryManager *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254785168);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254785168))
  {
    qword_254785160 = (uint64_t)operator new(1uLL);
    __cxa_guard_release(&qword_254785168);
  }
  return qword_254785160;
}

void sub_20BEDC42C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254785168);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfRegistryManager::RunUnloadersAtExit(pxrInternal__aapl__pxrReserved__::TfRegistryManager *this)
{
  byte_254785170 = 1;
}

BOOL pxrInternal__aapl__pxrReserved__::TfRegistryManager::AddFunctionForUnload(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  char v9;

  v3 = sub_20BEDC4FC();
  std::recursive_mutex::lock((std::recursive_mutex *)v3);
  v9 = 0;
  v4 = (uint64_t *)sub_20BEB5B80((unint64_t *)(v3 + 240), &v9);
  v5 = (uint64_t *)*v4;
  if (*v4)
  {
    v6 = sub_20BEDD9B8(*v4, 0, 0, a2);
    v7 = *v5;
    *v6 = *v5;
    v6[1] = v5;
    *(_QWORD *)(v7 + 8) = v6;
    *v5 = (uint64_t)v6;
    ++v5[2];
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)v3);
  return v5 != 0;
}

void sub_20BEDC4E8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20BEDC4FC()
{
  unint64_t v0;
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t i;
  unint64_t v11;
  const char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  std::string v16;
  uint64_t v17;
  int v18;
  void *__p[2];
  uint64_t v20;
  const char *v21;
  char v22;
  int v23;

  v0 = atomic_load(&qword_254785158);
  if (!v0)
  {
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_122Tf_RegistryManagerImplE" & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v16);
    v2 = std::string::insert(&v16, 0, "Create Singleton ");
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v20 = v2->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v3;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    v2->__r_.__value_.__r.__words[0] = 0;
    sub_20BEB4C0C(&v17, "Tf", "TfSingleton::_CreateInstance", __p);
    if (SHIBYTE(v20) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    do
      v4 = __ldaxr(byte_254785171);
    while (__stlxr(1u, byte_254785171));
    if ((v4 & 1) != 0)
    {
      while (!atomic_load(&qword_254785158))
        sched_yield();
    }
    else
    {
      if (!atomic_load(&qword_254785158))
      {
        v8 = operator new(0x1B0uLL);
        MEMORY[0x212B92CA0]();
        v8[9] = 0;
        v8[8] = v8 + 9;
        v8[12] = 0;
        v8[10] = 0;
        v8[11] = v8 + 12;
        v8[13] = 0;
        v8[14] = v8 + 14;
        v8[15] = v8 + 14;
        *((_OWORD *)v8 + 8) = 0u;
        *((_OWORD *)v8 + 9) = 0u;
        v8[20] = 0;
        *((_DWORD *)v8 + 42) = 1065353216;
        *((_OWORD *)v8 + 11) = 0u;
        *((_OWORD *)v8 + 12) = 0u;
        *((_DWORD *)v8 + 52) = 1065353216;
        v8[27] = v8 + 27;
        v8[28] = v8 + 27;
        v8[29] = 0;
        sub_20BEDD2E0(v8 + 30);
        v8[42] = &unk_24C51AE78;
        __dmb(0xBu);
        v8[43] = 0;
        __dmb(0xBu);
        v8[44] = 0;
        v8[42] = off_24C51BB80;
        v9 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
        *v9 = off_24C51BBE0;
        v8[45] = v9;
        for (i = 51; i != 54; ++i)
          v8[i] = 0;
        v8[49] = 0;
        v8[48] = 0;
        v8[50] = v8 + 51;
        v8[47] = sub_20BEDD5E0;
        do
          v11 = __ldaxr(&qword_254785158);
        while (__stlxr((unint64_t)v8, &qword_254785158));
        if (v11)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "SetInstanceConstructed";
          v20 = 56;
          v21 = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::(anonymous n"
                "amespace)::Tf_RegistryManagerImpl>::SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::("
                "anonymous namespace)::Tf_RegistryManagerImpl]";
          v22 = 0;
          v23 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed");
        }
        if ((sub_20BEB8B64(0) & 1) != 0)
          pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfRegistryManager: initialized\n", v12, v13);
        v14 = atomic_load(&qword_254785158);
        if (v14)
        {
          if (v8 != (_QWORD *)v14)
          {
            __p[0] = "tf/instantiateSingleton.h";
            __p[1] = "_CreateInstance";
            v20 = 84;
            v21 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::(anonymous n"
                  "amespace)::Tf_RegistryManagerImpl>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrRes"
                  "erved__::(anonymous namespace)::Tf_RegistryManagerImpl]";
            v22 = 0;
            v23 = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance");
          }
        }
        else
        {
          do
            v15 = __ldaxr(&qword_254785158);
          while (__stlxr((unint64_t)v8, &qword_254785158));
          if (v15)
          {
            __p[0] = "tf/instantiateSingleton.h";
            __p[1] = "_CreateInstance";
            v20 = 88;
            v21 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::(anonymous n"
                  "amespace)::Tf_RegistryManagerImpl>::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrRes"
                  "erved__::(anonymous namespace)::Tf_RegistryManagerImpl]";
            v22 = 0;
            v23 = 4;
            pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v13, "instance.exchange(newInst) == nullptr");
          }
        }
      }
      atomic_store(0, byte_254785171);
    }
    v0 = atomic_load(&qword_254785158);
    while (v18--)
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v17);
  }
  return v0;
}

void sub_20BEDC828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, int a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  while (a19--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(a18);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfRegistryManager::_SubscribeTo(pxrInternal__aapl__pxrReserved__::TfRegistryManager *this, const std::type_info *a2)
{
  unint64_t v3;
  char v4;
  _QWORD *v5;
  uint64_t v6;
  void *__p[2];
  char v8;

  v3 = sub_20BEDC4FC();
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(a2->__type_name & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  std::recursive_mutex::lock((std::recursive_mutex *)v3);
  sub_20BEDDA14(v3);
  sub_20BE74FC0((uint64_t **)(v3 + 88), (const void **)__p, (uint64_t)__p);
  if ((v4 & 1) != 0)
  {
    v5 = sub_20BEDE334(v3 + 112, 0, 0, (uint64_t)__p);
    v5[1] = v3 + 112;
    v6 = *(_QWORD *)(v3 + 112);
    *v5 = v6;
    *(_QWORD *)(v6 + 8) = v5;
    *(_QWORD *)(v3 + 112) = v5;
    ++*(_QWORD *)(v3 + 128);
    sub_20BEDDB7C(v3, (pxrInternal__aapl__pxrReserved__ *)__p);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)v3);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_20BEDCA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::recursive_mutex *v15;

  std::recursive_mutex::unlock(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfRegistryManager::_UnsubscribeFrom(pxrInternal__aapl__pxrReserved__::TfRegistryManager *this, const std::type_info *a2)
{
  unint64_t v3;
  void *__p[2];
  char v5;

  v3 = sub_20BEDC4FC();
  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(a2->__type_name & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)__p);
  std::recursive_mutex::lock((std::recursive_mutex *)v3);
  if (sub_20BE9DDA0((uint64_t **)(v3 + 88), (const void **)__p))
    sub_20BEDE668(v3 + 112, (unsigned __int8 **)__p);
  std::recursive_mutex::unlock((std::recursive_mutex *)v3);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20BEDCAC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *pxrInternal__aapl__pxrReserved__::Tf_RegistryInit::Tf_RegistryInit(const char **this, const char *a2)
{
  unint64_t v4;
  char *v5;
  const char *v6;
  std::recursive_mutex *v7;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  _BYTE v12[7];
  _QWORD v13[4];
  char v14;
  _DWORD v15[3];

  *this = a2;
  if (atomic_load(&qword_254785158))
  {
    v4 = sub_20BEDC4FC();
    v6 = *this;
    if (!*this || !*v6)
    {
      v13[0] = "tf/registryManager.cpp";
      v13[1] = "ClearActiveLibrary";
      v13[2] = 310;
      v13[3] = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::ClearActiveLibrary(const char *)";
      v14 = 0;
      v15[0] = *(_DWORD *)v12;
      *(_DWORD *)((char *)v15 + 3) = *(_DWORD *)&v12[3];
      *(_DWORD *)((char *)&v15[1] + 3) = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v13, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v5, "libraryName && libraryName[0]");
    }
    v7 = (std::recursive_mutex *)v4;
    LOBYTE(v13[0]) = 0;
    v8 = sub_20BEB5B80((unint64_t *)(v4 + 336), v13);
    v9 = (_QWORD *)(v8 + 8);
    v10 = strlen(v6);
    if (*(char *)(v8 + 31) < 0)
    {
      if (v10 != *(_QWORD *)(v8 + 16))
        return (pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *)this;
      if (v10 == -1)
        goto LABEL_15;
      v9 = (_QWORD *)*v9;
    }
    else
    {
      if (v10 != *(unsigned __int8 *)(v8 + 31))
        return (pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *)this;
      if (v10 == -1)
LABEL_15:
        sub_20BEB9180();
    }
    if (!memcmp(v9, v6, v10))
    {
      std::recursive_mutex::lock(v7);
      sub_20BEDDA14((uint64_t)v7);
      std::recursive_mutex::unlock(v7);
    }
  }
  return (pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *)this;
}

void sub_20BEDCC40(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_RegistryInit::~Tf_RegistryInit(char **this)
{
  unint64_t v3;
  char *v4;
  const char *v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t *i;
  uint64_t v11;
  _QWORD *j;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  char v24;
  _BYTE v25[7];
  int v26;

  if (atomic_load(&qword_254785158))
  {
    v3 = sub_20BEDC4FC();
    v4 = *this;
    if ((pxrInternal__aapl__pxrReserved__::Tf_DlCloseIsActive((pxrInternal__aapl__pxrReserved__ *)v3) & 1) != 0
      || byte_254785170 == 1)
    {
      std::recursive_mutex::lock((std::recursive_mutex *)v3);
      if (sub_20BEB8B64(0))
        pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfRegistryManager: unloading '%s'\n", v5, v6, v4);
      if (!v4 || !*v4)
      {
        v20 = "tf/registryManager.cpp";
        v21 = "_UnloadNoLock";
        v22 = 518;
        v23 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::_UnloadNoLock(const char *)";
        v24 = 0;
        *(_DWORD *)v25 = v16;
        *(_DWORD *)&v25[3] = *(_DWORD *)((char *)&v16 + 3);
        v26 = 4;
        pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v20, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v6, "libraryName && libraryName[0]");
      }
      v19 = sub_20BEDE880(v3, v4);
      v7 = sub_20BEDE9B4((_QWORD *)(v3 + 176), &v19);
      v8 = v7;
      if (v7)
      {
        v16 = (uint64_t)&v16;
        v17 = &v16;
        v18 = 0;
        sub_20BEDEA80((__int128 *)(v7 + 3), &v16);
        if (v8[5])
        {
          v20 = "tf/registryManager.cpp";
          v21 = "_UnloadNoLock";
          v22 = 527;
          v23 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::_UnloadNoLock(const char *)";
          v24 = 0;
          v26 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v20, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v9, "i->second.empty()");
        }
        for (i = v17; i != &v16; i = (uint64_t *)i[1])
        {
          v11 = i[5];
          if (!v11)
            sub_20BE9E974();
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
        }
        sub_20BEDD7D0(&v16);
      }
      for (j = *(_QWORD **)(v3 + 152); j; j = (_QWORD *)*j)
      {
        v13 = (uint64_t *)j[6];
        if (v13 != j + 5)
        {
          do
          {
            v14 = (uint64_t *)v13[1];
            if (v13[3] == v19)
            {
              v15 = *v13;
              *(_QWORD *)(v15 + 8) = v14;
              *(_QWORD *)v13[1] = v15;
              --j[7];
              operator delete(v13);
            }
            v13 = v14;
          }
          while (v14 != j + 5);
        }
      }
      std::recursive_mutex::unlock((std::recursive_mutex *)v3);
    }
  }
}

void sub_20BEDCE90(void *a1)
{
  sub_20BDC12F4(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_RegistryInit::Add(pxrInternal__aapl__pxrReserved__::Tf_RegistryInit *this, const char *a2, void (*a3)(void *, void *), const char *a4)
{
  const char *v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  const void **v11;
  size_t v12;
  size_t v13;
  const void *v14;
  const char *v15;
  char *v16;
  void **v17;
  char *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  void *__p;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;
  int v30;

  v9 = sub_20BEDC4FC();
  if (!this || !*(_BYTE *)this)
  {
    __p = "tf/registryManager.cpp";
    v26 = "AddRegistrationFunction";
    v27 = 327;
    v28 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::AddRegistrationFunction("
          "const char *, RegistrationFunction, const char *)";
    v29 = 0;
    v23 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"TfRegistryManager: Ignoring library with no name", v7, v8);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "libraryName && libraryName[0]", v23) & 1) == 0)
      return;
  }
  if (!a3 || !*(_BYTE *)a3)
  {
    __p = "tf/registryManager.cpp";
    v26 = "AddRegistrationFunction";
    v27 = 333;
    v28 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::AddRegistrationFunction("
          "const char *, RegistrationFunction, const char *)";
    v29 = 0;
    v24 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"TfRegistryManager: Ignoring registration with no type in %s", v7, v8, this);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "typeName && typeName[0]", v24) & 1) == 0)
      return;
  }
  LOBYTE(__p) = 0;
  v10 = sub_20BEB5B80((unint64_t *)(v9 + 336), &__p);
  v11 = (const void **)(v10 + 8);
  v12 = strlen((const char *)this);
  v13 = v12;
  if (*(char *)(v10 + 31) < 0)
  {
    if (v12 == *(_QWORD *)(v10 + 16))
    {
      if (v12 == -1)
        goto LABEL_30;
      v14 = *v11;
      goto LABEL_12;
    }
LABEL_13:
    std::recursive_mutex::lock((std::recursive_mutex *)v9);
    sub_20BEDDA14(v9);
    std::recursive_mutex::unlock((std::recursive_mutex *)v9);
    goto LABEL_14;
  }
  if (v12 != *(unsigned __int8 *)(v10 + 31))
    goto LABEL_13;
  v14 = (const void *)(v10 + 8);
  if (v13 == -1)
LABEL_30:
    sub_20BEB9180();
LABEL_12:
  if (memcmp(v14, this, v13))
    goto LABEL_13;
LABEL_14:
  if (!*(_QWORD *)v10)
  {
    if (sub_20BEB8B64(0))
    {
      sub_20BDDC0E4(&__p, (char *)this);
      pxrInternal__aapl__pxrReserved__::ArchGetAddressInfo(a2, (uint64_t)&__p, 0, 0, 0);
      v17 = v27 >= 0 ? &__p : (void **)__p;
      pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfRegistryManager: Library %s\n", v15, v16, v17);
      if (SHIBYTE(v27) < 0)
        operator delete(__p);
    }
    MEMORY[0x212B929D0](v11, this);
    std::recursive_mutex::lock((std::recursive_mutex *)v9);
    *(_QWORD *)v10 = sub_20BEDE880(v9, (char *)this);
    std::recursive_mutex::unlock((std::recursive_mutex *)v9);
    if (!*(_QWORD *)v10)
    {
      __p = "tf/registryManager.cpp";
      v26 = "AddRegistrationFunction";
      v27 = 360;
      v28 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::AddRegistrationFunctio"
            "n(const char *, RegistrationFunction, const char *)";
      v29 = 0;
      v30 = 4;
      pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v18, "active.identifier");
    }
  }
  sub_20BDDC0E4(&__p, (char *)a3);
  v19 = sub_20BEDDE48(v10 + 32, (pxrInternal__aapl__pxrReserved__ *)&__p);
  v20 = *(_QWORD *)v10;
  v21 = operator new(0x20uLL);
  v21[2] = a2;
  v21[3] = v20;
  v21[1] = v19;
  v22 = *(_QWORD *)v19;
  *v21 = *(_QWORD *)v19;
  *(_QWORD *)(v22 + 8) = v21;
  *(_QWORD *)v19 = v21;
  ++*((_QWORD *)v19 + 2);
  if (SHIBYTE(v27) < 0)
    operator delete(__p);
}

void sub_20BEDD1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20BEDD1EC(_QWORD *a1)
{
  uint64_t v2;
  tbb::internal **v3;
  void *v4;
  unint64_t v5;
  unint64_t v6;
  tbb::internal **v7;
  tbb::internal *v8;
  tbb::internal *v9;

  *a1 = off_24C51BB80;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20BEB4954((uint64_t)a1);
  v3 = (tbb::internal **)a1[8];
  v5 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 5), (void (*)(void *, unint64_t))sub_20BEDD600);
  v6 = a1[6];
  if (v5 > v6)
  {
    v7 = v3 - 1;
    do
    {
      v8 = v7[v5];
      v7[v5] = 0;
      if ((unint64_t)v8 >= 0x40)
        tbb::internal::NFS_Free(v8, v4);
      --v5;
    }
    while (v5 > v6);
    v5 = v6;
  }
  v9 = *v3;
  if ((unint64_t)*v3 >= 0x40)
  {
    for (; v5; --v5)
      v3[v5 - 1] = 0;
    tbb::internal::NFS_Free(v9, v4);
  }
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3((tbb::internal::concurrent_vector_base_v3 *)(a1 + 5), v4);
  *a1 = &unk_24C51AE78;
  return a1;
}

_QWORD *sub_20BEDD2E0(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t i;

  *a1 = &unk_24C51AE78;
  __dmb(0xBu);
  a1[1] = 0;
  __dmb(0xBu);
  a1[2] = 0;
  *a1 = &unk_24C51BA88;
  v2 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *v2 = &unk_24C51BAE8;
  a1[3] = v2;
  for (i = 9; i != 12; ++i)
    a1[i] = 0;
  a1[7] = 0;
  a1[6] = 0;
  a1[8] = a1 + 9;
  a1[5] = sub_20BEDD49C;
  return a1;
}

void sub_20BEDD37C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20BEDD384(uint64_t a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((tbb::internal::concurrent_vector_base_v3 *)(a1 + 40), 1, (void *)0x80, (void (*)(void *, const void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>>>::initialize_array, 0);
  v3 = sub_20BEB4B94((unint64_t)v2);
  v4 = *(_QWORD *)(a1 + 64);
  __dmb(0xBu);
  v5 = *(_QWORD *)(v4 + 8 * v3) + (((_QWORD)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5);
  *(_BYTE *)(v5 + 8) = 1;
  return v5;
}

uint64_t sub_20BEDD408(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_20BEDD41C(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_20BEDD424(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20BEDD66C(a1);
  operator delete(v1);
}

_QWORD *sub_20BEDD438()
{
  _QWORD *result;

  result = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *result = &unk_24C51BAE8;
  return result;
}

uint64_t sub_20BEDD460(uint64_t a1)
{
  void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

void sub_20BEDD494(uint64_t a1, _QWORD *a2)
{
  *a2 = 0;
}

uint64_t sub_20BEDD49C(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>>>::initialize_array(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    bzero(a1, a3 << 7);
}

uint64_t sub_20BEDD4BC(uint64_t a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = tbb::internal::concurrent_vector_base_v3::internal_grow_by((tbb::internal::concurrent_vector_base_v3 *)(a1 + 40), 1, (void *)0x80, (void (*)(void *, const void *, unint64_t))sub_20BEDD5F0, 0);
  v3 = sub_20BEB4B94((unint64_t)v2);
  v4 = *(_QWORD *)(a1 + 64);
  __dmb(0xBu);
  v5 = *(_QWORD *)(v4 + 8 * v3) + (((_QWORD)v2 - ((1 << v3) & 0x1FFFFFFFFFFFFFELL)) << 7);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v5);
  *(_BYTE *)(v5 + 72) = 1;
  return v5;
}

uint64_t sub_20BEDD540(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)(a2 + 7) >> 3, 8, 0, a4);
}

uint64_t sub_20BEDD554(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_20BEDD55C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = sub_20BEDD1EC(a1);
  operator delete(v1);
}

_QWORD *sub_20BEDD570()
{
  _QWORD *result;

  result = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)8);
  *result = off_24C51BBE0;
  return result;
}

uint64_t sub_20BEDD594(uint64_t a1)
{
  void *v2;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  return tbb::internal::deallocate_via_handler_v3(a1, v2);
}

double sub_20BEDD5C8(uint64_t a1, uint64_t a2)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 64) = 1065353216;
  return result;
}

uint64_t sub_20BEDD5E0(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  return tbb::internal::NFS_Allocate((unint64_t)this, 128, 0, a4);
}

void sub_20BEDD5F0(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    bzero(a1, a3 << 7);
}

void sub_20BEDD600(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE *v3;
  void *v4;

  if (a2)
  {
    v2 = a2;
    v3 = (_BYTE *)(a1 + (a2 << 7) - 56);
    do
    {
      if (*v3)
      {
        sub_20BEDD868((uint64_t)(v3 - 40), *((_QWORD **)v3 - 3));
        v4 = (void *)*((_QWORD *)v3 - 5);
        *((_QWORD *)v3 - 5) = 0;
        if (v4)
          operator delete(v4);
        if ((char)*(v3 - 41) < 0)
          operator delete(*((void **)v3 - 8));
        *v3 = 0;
      }
      v3 -= 128;
      --v2;
    }
    while (v2);
  }
}

_QWORD *sub_20BEDD66C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C51BA88;
  v2 = a1[3];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20BEB4954((uint64_t)a1);
  sub_20BEDD6D4(a1 + 4);
  *a1 = &unk_24C51AE78;
  return a1;
}

unint64_t *sub_20BEDD6D4(unint64_t *a1)
{
  tbb::internal::concurrent_vector_base_v3 *v2;
  _QWORD *v3;
  unint64_t v4;
  void *v5;

  v2 = (tbb::internal::concurrent_vector_base_v3 *)(a1 + 1);
  v3 = (_QWORD *)a1[4];
  v4 = tbb::internal::concurrent_vector_base_v3::internal_clear((tbb::internal::concurrent_vector_base_v3 *)(a1 + 1), (void (*)(void *, unint64_t))tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>>>::destroy_array);
  sub_20BEB4AD0((uint64_t)a1, v3, v4, a1[2]);
  tbb::internal::concurrent_vector_base_v3::~concurrent_vector_base_v3(v2, v5);
  return a1;
}

uint64_t tbb::concurrent_vector<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>,tbb::cache_aligned_allocator<tbb::internal::padded<tbb::interface6::internal::ets_element<std::list<std::function<void ()(void)>> *>,128ul>>>::destroy_array(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  if (a2)
  {
    v2 = (_BYTE *)(result + (a2 << 7) - 120);
    do
    {
      if (*v2)
        *v2 = 0;
      v2 -= 128;
      --a2;
    }
    while (a2);
  }
  return result;
}

uint64_t sub_20BEDD75C(uint64_t a1)
{
  void *v2;

  sub_20BEDD794(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20BEDD794(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BEDD7D0(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20BEDD7D0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      while (1)
      {
        v5 = (uint64_t *)v3[1];
        v6 = (uint64_t *)v3[5];
        if (v6 == v3 + 2)
          break;
        if (v6)
        {
          v7 = 5;
LABEL_7:
          (*(void (**)(void))(*v6 + 8 * v7))();
        }
        operator delete(v3);
        v3 = v5;
        if (v5 == a1)
          return;
      }
      v6 = v3 + 2;
      v7 = 4;
      goto LABEL_7;
    }
  }
}

void sub_20BEDD868(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BEDD8A4((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20BEDD8A4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = (uint64_t *)(a1 + 24);
    v4 = *(_QWORD *)(a1 + 24);
    v3 = *(uint64_t **)(a1 + 32);
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    *(_QWORD *)(a1 + 40) = 0;
    if (v3 != (uint64_t *)(a1 + 24))
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != v2);
    }
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20BEDD928(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = a1[1];
    v4 = *(_QWORD **)v2;
    v4[1] = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while ((_QWORD *)v2 != a1)
    {
      v5 = *(_QWORD *)(v2 + 8);
      sub_20BEDD988((int)a1, (void **)v2);
      v2 = v5;
    }
  }
}

void sub_20BEDD988(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0)
    operator delete(__p[2]);
  operator delete(__p);
}

_QWORD *sub_20BEDD9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x30uLL);
  *v7 = a2;
  v7[1] = a3;
  sub_20BE9E6E8((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_20BEDDA00(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20BEDDA14(uint64_t a1)
{
  unint64_t *v2;
  uint64_t v3;
  const void **v4;
  _BOOL4 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t j;
  char v10;
  char v11;

  v2 = (unint64_t *)(a1 + 336);
  v10 = 0;
  if (*(_QWORD *)sub_20BEB5B80((unint64_t *)(a1 + 336), &v10))
  {
    v11 = 0;
    v3 = sub_20BEB5B80(v2, &v11);
    v4 = *(const void ***)(v3 + 48);
    if (v4)
    {
      LOBYTE(v5) = 0;
      do
      {
        if (v5)
        {
          v5 = 1;
        }
        else if (v4[7])
        {
          v5 = sub_20BDDDEF8(a1 + 88, v4 + 2) != 0;
        }
        else
        {
          v5 = 0;
        }
        v6 = (uint64_t *)sub_20BEDDE48(a1 + 136, (pxrInternal__aapl__pxrReserved__ *)(v4 + 2));
        sub_20BEBD458((uint64_t)v6, v6, v4 + 5);
        v4 = (const void **)*v4;
      }
      while (v4);
    }
    else
    {
      v5 = 0;
    }
    *(_QWORD *)v3 = 0;
    if (*(char *)(v3 + 31) < 0)
    {
      **(_BYTE **)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v3 + 8) = 0;
      *(_BYTE *)(v3 + 31) = 0;
    }
    if (*(_QWORD *)(v3 + 56))
    {
      sub_20BEDD868(v3 + 32, *(_QWORD **)(v3 + 48));
      *(_QWORD *)(v3 + 48) = 0;
      v7 = *(_QWORD *)(v3 + 40);
      if (v7)
      {
        for (i = 0; i != v7; ++i)
          *(_QWORD *)(*(_QWORD *)(v3 + 32) + 8 * i) = 0;
      }
      *(_QWORD *)(v3 + 56) = 0;
    }
    if (v5)
    {
      for (j = *(_QWORD *)(a1 + 120); j != a1 + 112; j = *(_QWORD *)(j + 8))
        sub_20BEDDB7C(a1, (pxrInternal__aapl__pxrReserved__ *)(j + 16));
    }
  }
}

void sub_20BEDDB7C(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2)
{
  unsigned __int8 *v2;
  char *v4;
  char *v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  const char *v14;
  char *v15;
  uint64_t *v16;
  const char *v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  uint64_t j;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;
  const char *v29;
  char v30;
  int v31;
  _QWORD *v32;

  v2 = (unsigned __int8 *)a2;
  *(_QWORD *)&v27 = 0;
  BYTE8(v27) = 0;
  v4 = (char *)*((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    v5 = v4;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v27, a2, v5);
  v6 = *(int8x8_t *)(a1 + 144);
  if (v6)
  {
    v7 = bswap64(0x9E3779B97F4A7C55 * v27);
    v8 = (uint8x8_t)vcnt_s8(v6);
    v8.i16[0] = vaddlv_u8(v8);
    v9 = v8.u32[0];
    if (v8.u32[0] > 1uLL)
    {
      v10 = v7;
      if (v7 >= *(_QWORD *)&v6)
        v10 = v7 % *(_QWORD *)&v6;
    }
    else
    {
      v10 = (*(_QWORD *)&v6 - 1) & v7;
    }
    v11 = *(unsigned __int8 ***)(*(_QWORD *)(a1 + 136) + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = *(unsigned __int8 **)i)
      {
        v13 = *((_QWORD *)i + 1);
        if (v13 == v7)
        {
          if ((sub_20BEB4EF8(a1 + 168, i + 16, v2) & 1) != 0)
          {
            if (sub_20BEB8B64(0))
            {
              if ((v2[23] & 0x80u) == 0)
                v20 = (uint64_t *)v2;
              else
                v20 = *(uint64_t **)v2;
              pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfRegistryManager: running %zd functions for %s\n", v18, v19, *((_QWORD *)i + 7), v20);
            }
            sub_20BEBD458(a1 + 216, *(uint64_t **)(a1 + 224), (_QWORD *)i + 5);
            if (*((_QWORD *)i + 7))
            {
              *(_QWORD *)&v27 = "tf/registryManager.cpp";
              *((_QWORD *)&v27 + 1) = "_RunRegistrationFunctionsNoLock";
              v28 = 489;
              v29 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::Tf_RegistryManagerImpl::_RunRegistrati"
                    "onFunctionsNoLock(const string &)";
              v30 = 0;
              v31 = 4;
              pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v27, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v21, "i->second.empty()");
            }
            for (j = *(_QWORD *)(a1 + 232); j; j = *(_QWORD *)(a1 + 232))
            {
              v23 = *(_OWORD **)(a1 + 224);
              v27 = v23[1];
              v24 = *(_QWORD *)v23;
              *(_QWORD *)(v24 + 8) = *((_QWORD *)v23 + 1);
              **((_QWORD **)v23 + 1) = v24;
              *(_QWORD *)(a1 + 232) = j - 1;
              operator delete(v23);
              LOBYTE(v32) = 0;
              v25 = *(_QWORD *)sub_20BEB5B80((unint64_t *)(a1 + 240), &v32);
              v32 = (_QWORD *)&v27 + 1;
              v26 = sub_20BEDE3AC(a1 + 176, (_QWORD *)&v27 + 1, (uint64_t)&unk_20CAC184C, &v32) + 3;
              LOBYTE(v32) = 0;
              *(_QWORD *)sub_20BEB5B80((unint64_t *)(a1 + 240), &v32) = v26;
              std::recursive_mutex::unlock((std::recursive_mutex *)a1);
              ((void (*)(_QWORD, _QWORD))v27)(0, 0);
              std::recursive_mutex::lock((std::recursive_mutex *)a1);
              LOBYTE(v32) = 0;
              *(_QWORD *)sub_20BEB5B80((unint64_t *)(a1 + 240), &v32) = v25;
            }
            return;
          }
        }
        else
        {
          if (v9 > 1)
          {
            if (v13 >= *(_QWORD *)&v6)
              v13 %= *(_QWORD *)&v6;
          }
          else
          {
            v13 &= *(_QWORD *)&v6 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  if (sub_20BEB8B64(0))
  {
    if ((v2[23] & 0x80u) == 0)
      v16 = (uint64_t *)v2;
    else
      v16 = *(uint64_t **)v2;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"TfRegistryManager: no functions to run for %s\n", v14, v15, v16);
  }
}

unsigned __int8 *sub_20BEDDE48(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2)
{
  unint64_t v2;
  pxrInternal__aapl__pxrReserved__ *v3;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *i;
  unint64_t v13;
  _QWORD *v14;
  unsigned __int8 *v15;
  _BYTE *v16;
  float v17;
  float v18;
  _BOOL4 v19;
  unint64_t v20;
  unint64_t v21;
  int8x8_t prime;
  void *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint8x8_t v28;
  unint64_t v29;
  uint8x8_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unsigned __int8 **v34;
  unint64_t v35;
  void *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  char v40;

  v3 = a2;
  v38 = 0;
  LOBYTE(v39) = 0;
  v5 = (char *)*((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = (char *)*((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(pxrInternal__aapl__pxrReserved__ **)a2;
    v6 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v38, a2, v6);
  v7 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v38);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v2 = v7;
      if (v7 >= v8)
        v2 = v7 % v8;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
    v11 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
    if (v11)
    {
      for (i = *v11; i; i = *(unsigned __int8 **)i)
      {
        v13 = *((_QWORD *)i + 1);
        if (v13 == v7)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, (unsigned __int8 *)v3) & 1) != 0)
            return i + 40;
        }
        else
        {
          if (v10 > 1)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v2)
            break;
        }
      }
    }
  }
  v14 = (_QWORD *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x40uLL);
  v38 = v15;
  v39 = a1 + 16;
  v40 = 0;
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v7;
  v16 = v15 + 16;
  if (*((char *)v3 + 23) < 0)
  {
    sub_20BDDBFAC(v16, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    *(_OWORD *)v16 = *(_OWORD *)v3;
    *((_QWORD *)v15 + 4) = *((_QWORD *)v3 + 2);
  }
  *((_QWORD *)v15 + 5) = v15 + 40;
  *((_QWORD *)v15 + 6) = v15 + 40;
  *((_QWORD *)v15 + 7) = 0;
  v40 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v8 || (float)(v18 * (float)v8) < v17)
  {
    v19 = (v8 & (v8 - 1)) == 0;
    if (v8 < 3)
      v19 = 0;
    v20 = (2 * v8) | !v19;
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      prime = (int8x8_t)v21;
    else
      prime = (int8x8_t)v20;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v8 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v8)
      goto LABEL_36;
    if (*(_QWORD *)&prime < v8)
    {
      v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v8 < 3 || (v30 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        v29 = std::__next_prime(v29);
      }
      else
      {
        v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2)
          v29 = v31;
      }
      if (*(_QWORD *)&prime <= v29)
        prime = (int8x8_t)v29;
      if (*(_QWORD *)&prime >= v8)
      {
        v8 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_36:
          if (*(_QWORD *)&prime >> 61)
            sub_20BDDF5B4();
          v23 = operator new(8 * *(_QWORD *)&prime);
          v24 = *(void **)a1;
          *(_QWORD *)a1 = v23;
          if (v24)
            operator delete(v24);
          v25 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v25++) = 0;
          while (*(_QWORD *)&prime != v25);
          v26 = (_QWORD *)*v14;
          if (*v14)
          {
            v27 = v26[1];
            v28 = (uint8x8_t)vcnt_s8(prime);
            v28.i16[0] = vaddlv_u8(v28);
            if (v28.u32[0] > 1uLL)
            {
              if (v27 >= *(_QWORD *)&prime)
                v27 %= *(_QWORD *)&prime;
            }
            else
            {
              v27 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v27) = v14;
            v32 = (_QWORD *)*v26;
            if (*v26)
            {
              do
              {
                v33 = v32[1];
                if (v28.u32[0] > 1uLL)
                {
                  if (v33 >= *(_QWORD *)&prime)
                    v33 %= *(_QWORD *)&prime;
                }
                else
                {
                  v33 &= *(_QWORD *)&prime - 1;
                }
                if (v33 != v27)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v33))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v33) = v26;
                    goto LABEL_61;
                  }
                  *v26 = *v32;
                  *v32 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v33);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v33) = v32;
                  v32 = v26;
                }
                v33 = v27;
LABEL_61:
                v26 = v32;
                v32 = (_QWORD *)*v32;
                v27 = v33;
              }
              while (v32);
            }
          }
          v8 = (unint64_t)prime;
          goto LABEL_65;
        }
        v37 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v37)
          operator delete(v37);
        v8 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_65:
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v2 = v7 % v8;
      else
        v2 = v7;
    }
    else
    {
      v2 = (v8 - 1) & v7;
    }
  }
  v34 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v2);
  if (v34)
  {
    *(_QWORD *)v38 = *v34;
    *v34 = v38;
  }
  else
  {
    *(_QWORD *)v38 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v38;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v2) = v14;
    if (*(_QWORD *)v38)
    {
      v35 = *(_QWORD *)(*(_QWORD *)v38 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v35 >= v8)
          v35 %= v8;
      }
      else
      {
        v35 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v35) = v38;
    }
  }
  i = v38;
  v38 = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20BEDE2F0((uint64_t)&v38);
  return i + 40;
}

void sub_20BEDE2D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEDE2F0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEDE2F0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BEDD8A4((uint64_t)v2 + 16);
    operator delete(v2);
  }
  return a1;
}

_QWORD *sub_20BEDE334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _BYTE *v8;

  v7 = operator new(0x28uLL);
  *v7 = a2;
  v7[1] = a3;
  v8 = v7 + 2;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_20BDDBFAC(v8, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a4;
    v7[4] = *(_QWORD *)(a4 + 16);
  }
  return v7;
}

void sub_20BEDE398(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20BEDE3AC(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (v11[2] == *a2)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v13 = a1 + 16;
  v14 = operator new(0x30uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *v14 = 0;
  v14[1] = v7;
  v14[2] = **a4;
  v14[3] = v14 + 3;
  v14[4] = v14 + 3;
  v14[5] = 0;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  v11 = (_QWORD *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20BEDE624((uint64_t)v24, 0);
  return v11;
}

void sub_20BEDE60C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEDE624((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_20BEDE624(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  v2 = *(uint64_t **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BEDD7D0(v2 + 3);
    operator delete(v2);
  }
}

void sub_20BEDE668(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  char v15;
  uint64_t v16[3];

  v16[0] = (uint64_t)v16;
  v16[1] = (uint64_t)v16;
  v16[2] = 0;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 != a1)
  {
    do
    {
      v5 = *(unsigned __int8 *)(v2 + 39);
      if ((v5 & 0x80u) == 0)
        v6 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 39);
      else
        v6 = *(unsigned __int8 **)(v2 + 24);
      v7 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
      v8 = (char)v7;
      if ((char)v7 < 0)
        v7 = a2[1];
      if (v6 == v7)
      {
        if (v8 >= 0)
          v9 = (unsigned __int8 *)a2;
        else
          v9 = *a2;
        if ((v5 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v2 + 16), v9, *(_QWORD *)(v2 + 24)))
          {
LABEL_22:
            for (i = *(_QWORD *)(v2 + 8); i != a1; i = *(_QWORD *)(i + 8))
            {
              v12 = *(unsigned __int8 *)(i + 39);
              if ((v12 & 0x80u) == 0)
                v13 = (unsigned __int8 *)*(unsigned __int8 *)(i + 39);
              else
                v13 = *(unsigned __int8 **)(i + 24);
              if (v13 != v6)
                goto LABEL_36;
              if ((v12 & 0x80) != 0)
              {
                if (memcmp(*(const void **)(i + 16), v9, *(_QWORD *)(i + 24)))
                  goto LABEL_36;
              }
              else if (*(_BYTE *)(i + 39))
              {
                v14 = 0;
                while (*(unsigned __int8 *)(i + v14 + 16) == v9[v14])
                {
                  if (v12 == ++v14)
                    goto LABEL_35;
                }
LABEL_36:
                v15 = 0;
                goto LABEL_38;
              }
LABEL_35:
              ;
            }
            v15 = 1;
            i = a1;
LABEL_38:
            sub_20BEDE808((uint64_t)v16, v16, a1, (_QWORD *)v2, (_QWORD *)i);
            if ((v15 & 1) != 0)
              goto LABEL_20;
            goto LABEL_19;
          }
        }
        else
        {
          if (!*(_BYTE *)(v2 + 39))
            goto LABEL_22;
          v10 = 0;
          while (*(unsigned __int8 *)(v2 + v10 + 16) == v9[v10])
          {
            if (v5 == ++v10)
              goto LABEL_22;
          }
        }
      }
      i = v2;
LABEL_19:
      i = *(_QWORD *)(i + 8);
LABEL_20:
      v2 = i;
    }
    while (i != a1);
  }
  sub_20BEDD928(v16);
}

void sub_20BEDE7F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEDD928((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEDE808(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4 != a5)
  {
    v5 = (_QWORD *)*a5;
    if (result != a3)
    {
      v6 = 1;
      if (v5 != a4)
      {
        v7 = a4;
        do
        {
          v7 = (_QWORD *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(_QWORD *)(a3 + 16) -= v6;
      *(_QWORD *)(result + 16) += v6;
    }
    v8 = *a4;
    *(_QWORD *)(v8 + 8) = v5[1];
    *(_QWORD *)v5[1] = v8;
    v9 = *a2;
    *(_QWORD *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

uint64_t sub_20BEDE880(uint64_t a1, char *a2)
{
  uint64_t **v3;
  _OWORD *v4;
  uint64_t result;
  void *__p[2];
  char v7;
  void **v8;

  v3 = (uint64_t **)(a1 + 64);
  sub_20BDDC0E4(__p, a2);
  v8 = __p;
  v4 = sub_20BEDE91C(v3, (const void **)__p, (uint64_t)&unk_20CAC184C, (_OWORD **)&v8);
  if (v7 < 0)
    operator delete(__p[0]);
  result = *((_QWORD *)v4 + 7);
  if (!result)
  {
    result = *(_QWORD *)(a1 + 80);
    *((_QWORD *)v4 + 7) = result;
  }
  return result;
}

void sub_20BEDE900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_OWORD *sub_20BEDE91C(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)sub_20BDDE084((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    sub_20BDDE1B4(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_20BEDE9B4(_QWORD *a1, _QWORD *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = v3;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (*(_QWORD *)&v2 - 1) & v3;
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *a2)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

__int128 *sub_20BEDEA80(__int128 *result, uint64_t *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 *v4;
  uint64_t *v5;

  v2 = *((_QWORD *)result + 2);
  *((_QWORD *)result + 2) = a2[2];
  a2[2] = v2;
  v3 = *result;
  *result = *(_OWORD *)a2;
  *(_OWORD *)a2 = v3;
  if (*((_QWORD *)result + 2))
  {
    **((_QWORD **)result + 1) = result;
    v4 = *(__int128 **)result;
  }
  else
  {
    *(_QWORD *)result = result;
    v4 = result;
  }
  *((_QWORD *)v4 + 1) = result;
  if (a2[2])
  {
    *(_QWORD *)a2[1] = a2;
    v5 = (uint64_t *)*a2;
  }
  else
  {
    *a2 = (uint64_t)a2;
    v5 = a2;
  }
  v5[1] = (uint64_t)a2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile(void **this)
{
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Close((pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *)this);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Close(pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *this)
{
  FILE *v2;
  _QWORD v3[4];
  char v4;
  void *__p[2];
  uint64_t v6;

  v2 = *(FILE **)this;
  if (v2)
  {
    fclose(v2);
    *(_QWORD *)this = 0;
    if (*((char *)this + 55) < 0)
    {
      if (!*((_QWORD *)this + 5))
        return;
    }
    else if (!*((_BYTE *)this + 55))
    {
      return;
    }
    __p[0] = 0;
    __p[1] = 0;
    v6 = 0;
    if (!pxrInternal__aapl__pxrReserved__::Tf_AtomicRenameFileOver((const std::__fs::filesystem::path *)((char *)this + 32), (const std::__fs::filesystem::path *)((char *)this + 8), (uint64_t)__p))
    {
      v3[0] = "tf/safeOutputFile.cpp";
      v3[1] = "Close";
      v3[2] = 86;
      v3[3] = "void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Close()";
      v4 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 3);
    }
    if (*((char *)this + 55) < 0)
    {
      **((_BYTE **)this + 4) = 0;
      *((_QWORD *)this + 5) = 0;
    }
    else
    {
      *((_BYTE *)this + 32) = 0;
      *((_BYTE *)this + 55) = 0;
    }
    if (*((char *)this + 31) < 0)
    {
      **((_BYTE **)this + 1) = 0;
      *((_QWORD *)this + 2) = 0;
    }
    else
    {
      *((_BYTE *)this + 8) = 0;
      *((_BYTE *)this + 31) = 0;
    }
    if (SHIBYTE(v6) < 0)
      operator delete(__p[0]);
  }
}

void sub_20BEDEC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::IsOpenForUpdate(pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *this)
{
  uint64_t v1;

  if (!*(_QWORD *)this)
    return 0;
  if (*((char *)this + 55) < 0)
    v1 = *((_QWORD *)this + 5);
  else
    v1 = *((unsigned __int8 *)this + 55);
  return v1 == 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::ReleaseUpdatedFile(pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *this)
{
  uint64_t result;
  _QWORD v3[4];
  char v4;

  result = *(_QWORD *)this;
  if (!result)
    goto LABEL_6;
  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 55))
    {
      *(_QWORD *)this = 0;
      *((_BYTE *)this + 32) = 0;
      *((_BYTE *)this + 55) = 0;
      goto LABEL_9;
    }
LABEL_6:
    v3[0] = "tf/safeOutputFile.cpp";
    v3[1] = "ReleaseUpdatedFile";
    v3[2] = 60;
    v3[3] = "FILE *pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::ReleaseUpdatedFile()";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid output file (failed to open, or opened for replace)");
    return 0;
  }
  if (*((_QWORD *)this + 5))
    goto LABEL_6;
  *(_QWORD *)this = 0;
  **((_BYTE **)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
LABEL_9:
  if (*((char *)this + 31) < 0)
  {
    **((_BYTE **)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  else
  {
    *((_BYTE *)this + 8) = 0;
    *((_BYTE *)this + 31) = 0;
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Discard(pxrInternal__aapl__pxrReserved__::TfSafeOutputFile *this)
{
  void *v1;
  char v2;
  void *__p[2];
  uint64_t v4;
  const char *v5;
  char v6;

  if (!*(_QWORD *)this)
    goto LABEL_4;
  if (*((char *)this + 55) < 0)
  {
    if (*((_QWORD *)this + 5))
      goto LABEL_4;
LABEL_11:
    __p[0] = "tf/safeOutputFile.cpp";
    __p[1] = "Discard";
    v4 = 98;
    v5 = "void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Discard()";
    v6 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid output file (failed to open, or opened for update)");
    return;
  }
  if (!*((_BYTE *)this + 55))
    goto LABEL_11;
LABEL_4:
  *(_OWORD *)__p = *((_OWORD *)this + 2);
  v4 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Close(this);
  v1 = (void *)HIBYTE(v4);
  v2 = HIBYTE(v4);
  if (v4 < 0)
    v1 = __p[1];
  if (v1)
  {
    pxrInternal__aapl__pxrReserved__::TfDeleteFile((const char *)__p);
    v2 = HIBYTE(v4);
  }
  if (v2 < 0)
    operator delete(__p[0]);
}

void sub_20BEDEE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Update(std::string *__str@<X0>, uint64_t a2@<X8>)
{
  std::string *v4;
  FILE *v5;
  std::string *v6;
  _QWORD v7[4];
  char v8;

  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::operator=((std::string *)(a2 + 8), __str);
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = __str;
  else
    v4 = (std::string *)__str->__r_.__value_.__r.__words[0];
  v5 = pxrInternal__aapl__pxrReserved__::ArchOpenFile((const char *)v4, "rb+");
  if (v5)
  {
    *(_QWORD *)a2 = v5;
  }
  else
  {
    v7[0] = "tf/safeOutputFile.cpp";
    v7[1] = "Update";
    v7[2] = 121;
    v7[3] = "static TfSafeOutputFile pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Update(const std::string &)";
    v8 = 0;
    if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = __str;
    else
      v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to open file '%s' for writing", (const char *)v6);
  }
}

void sub_20BEDEEE4(_Unwind_Exception *a1)
{
  void **v1;

  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Replace(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  FILE *v4;
  int *v5;
  const char *v6;
  void *__p[2];
  char v8;
  char *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  char v13;
  std::string __dst;
  void *v15[2];
  uint64_t v16;

  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  if (*(char *)(a1 + 23) < 0)
    sub_20BDDBFAC(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  else
    __dst = *(std::string *)a1;
  v3 = pxrInternal__aapl__pxrReserved__::Tf_CreateSiblingTempFile(&__dst, (std::string *)(a2 + 8), (std::string *)(a2 + 32), (uint64_t)v15);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v3 == -1)
  {
    v9 = "tf/safeOutputFile.cpp";
    v10 = "Replace";
    v11 = 138;
    v12 = "static TfSafeOutputFile pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Replace(const std::string &)";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 3);
  }
  else
  {
    v4 = fdopen(v3, "wb");
    *(_QWORD *)a2 = v4;
    if (!v4)
    {
      v9 = "tf/safeOutputFile.cpp";
      v10 = "Replace";
      v11 = 146;
      v12 = "static TfSafeOutputFile pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::Replace(const std::string &)";
      v13 = 0;
      v5 = __error();
      pxrInternal__aapl__pxrReserved__::ArchStrerror((pxrInternal__aapl__pxrReserved__ *)*v5, __p);
      v6 = v8 >= 0 ? (const char *)__p : (const char *)__p[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 3, (pxrInternal__aapl__pxrReserved__ *)"Unable to obtain writable FILE pointer: %s", v6);
      if (v8 < 0)
        operator delete(__p[0]);
    }
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20BEDF06C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void **v16;
  uint64_t v17;

  if (a16 < 0)
    operator delete(__p);
  if (*(char *)(v17 - 17) < 0)
    operator delete(*(void **)(v17 - 40));
  pxrInternal__aapl__pxrReserved__::TfSafeOutputFile::~TfSafeOutputFile(v16);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(uint64_t a1, uint64_t *a2, __int128 *a3)
{
  uint64_t *v4;
  __int128 v5;
  __int128 v6;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *a3;
  v6 = a3[1];
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 56) = v6;
  *(_OWORD *)(a1 + 40) = v5;
  sub_20BEDF134(a1);
  return a1;
}

void sub_20BEDF118(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_20C96B330((void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20BEDF134(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t result;
  _BYTE *v5;
  uint64_t (*v6)(uint64_t (**)(void));
  uint64_t **v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  _QWORD *v10;
  pthread_t v11;
  unint64_t v12;
  pthread_t *v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  pthread_t *v27;
  _BYTE *v28;
  void *v29;
  uint64_t (*v30)(uint64_t (**)(void));
  pthread_t v31;
  __int128 __p;
  _opaque_pthread_t *v33;
  uint64_t v34;
  _QWORD v35[3];

  v2 = *(uint64_t **)off_254740AB0();
  if (!v2)
  {
    if ((*(_BYTE *)off_254740AE0() & 1) == 0)
    {
      v30 = v6;
      v8 = off_254740AC8;
      v9 = off_254740AC8();
      *(_QWORD *)v9 = 0;
      *(_BYTE *)(v9 + 8) = 0;
      v10 = (_QWORD *)sub_20BEE0354();
      v11 = pthread_self();
      v35[2] = v11;
      sub_20BEB3FEC((uint64_t)v35, (uint64_t)v10);
      v31 = v11;
      sub_20BEBEBB0();
      v34 = ((uint64_t (*)(uint64_t (**)(void)))v8)(&off_254740AC8);
      v13 = (pthread_t *)v10[2];
      v12 = v10[3];
      if ((unint64_t)v13 >= v12)
      {
        v16 = (_QWORD *)v10[1];
        v17 = 0xCCCCCCCCCCCCCCCDLL * (v13 - (pthread_t *)v16) + 1;
        if (v17 > 0x666666666666666)
          sub_20BDDF694();
        v18 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v12 - (_QWORD)v16) >> 3);
        if (2 * v18 > v17)
          v17 = 2 * v18;
        if (v18 >= 0x333333333333333)
          v19 = 0x666666666666666;
        else
          v19 = v17;
        if (v19 > 0x666666666666666)
          sub_20BDDF5B4();
        v20 = (char *)operator new(40 * v19) + 8 * (v13 - (pthread_t *)v16);
        *(_QWORD *)v20 = v31;
        *(_OWORD *)(v20 + 8) = __p;
        *((_QWORD *)v20 + 3) = v33;
        __p = 0uLL;
        v33 = 0;
        v21 = ((uint64_t (*)(uint64_t (**)(void)))v8)(&off_254740AC8);
        *(_QWORD *)(v23 + 32) = v21;
        if (v13 == v16)
        {
          v15 = (_QWORD *)(v23 + 40);
          v10[1] = v23;
          v10[2] = v23 + 40;
          v10[3] = v22 + 40 * v19;
        }
        else
        {
          v24 = v23;
          do
          {
            v25 = (uint64_t)*(v13 - 5);
            v13 -= 5;
            *(_QWORD *)(v24 - 40) = v25;
            v24 -= 40;
            v26 = *(_OWORD *)(v13 + 1);
            *(_QWORD *)(v24 + 24) = v13[3];
            *(_OWORD *)(v24 + 8) = v26;
            v13[2] = 0;
            v13[3] = 0;
            v13[1] = 0;
            *(_QWORD *)(v24 + 32) = v13[4];
          }
          while (v13 != v16);
          v13 = (pthread_t *)v10[1];
          v27 = (pthread_t *)v10[2];
          v15 = (_QWORD *)(v23 + 40);
          v10[1] = v24;
          v10[2] = v23 + 40;
          v10[3] = v22 + 40 * v19;
          while (v27 != v13)
          {
            if (*((char *)v27 - 9) < 0)
              operator delete(*(v27 - 4));
            v27 -= 5;
          }
        }
        if (v13)
          operator delete(v13);
      }
      else
      {
        *v13 = v31;
        v14 = __p;
        v13[3] = v33;
        *(_OWORD *)(v13 + 1) = v14;
        v33 = 0;
        __p = 0uLL;
        v13[4] = (pthread_t)v34;
        v15 = v13 + 5;
      }
      v10[2] = v15;
      if (SHIBYTE(v33) < 0)
        operator delete((void *)__p);
      v28 = (_BYTE *)v35[0];
      if (v35[0])
      {
        __dmb(0xBu);
        *v28 = 0;
      }
      v29 = (void *)((uint64_t (*)(uint64_t (**)(void)))v8)(&off_254740AC8);
      _tlv_atexit((void (__cdecl *)(void *))sub_20BEE0184, v29);
      *(_BYTE *)v30(&off_254740AE0) = 1;
    }
    v2 = (uint64_t *)off_254740AC8();
    *v7 = v2;
  }
  v3 = *v2;
  *(_QWORD *)(a1 + 80) = v2;
  *(_QWORD *)(a1 + 88) = v3;
  result = sub_20BEB3FEC((uint64_t)&v31, (uint64_t)(v2 + 1));
  *v2 = a1;
  v5 = v31;
  if (v31)
  {
    __dmb(0xBu);
    *v5 = 0;
  }
  return result;
}

void sub_20BEDF43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, _BYTE *a19)
{
  if (a19)
  {
    __dmb(0xBu);
    *a19 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a1 + 24) = 1;
  v5 = a1;
  if (*(char *)(a1 + 23) < 0)
    v5 = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *a3;
  v7 = a3[1];
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  sub_20BEDF134(a1);
  return a1;
}

void sub_20BEDF4E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  v4 = *a3;
  v5 = a3[1];
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a3 + 4);
  *(_OWORD *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 40) = v4;
  sub_20BEDF134(a1);
  return a1;
}

void sub_20BEDF554(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    sub_20C96B330((void **)v1);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription(pxrInternal__aapl__pxrReserved__::TfScopeDescription *this, uint64_t a2, char *a3)
{
  pxrInternal__aapl__pxrReserved__::TfScopeDescription **v3;
  _BYTE *v5;
  _QWORD v6[4];
  char v7;
  int v8;

  v3 = (pxrInternal__aapl__pxrReserved__::TfScopeDescription **)*((_QWORD *)this + 10);
  if (*v3 != this)
  {
    v6[0] = "tf/scopeDescription.cpp";
    v6[1] = "_Pop";
    v6[2] = 339;
    v6[3] = "void pxrInternal__aapl__pxrReserved__::TfScopeDescription::_Pop() const";
    v7 = 0;
    v8 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v6, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", a3, "stack.head == this");
  }
  sub_20BEB3FEC((uint64_t)v6, (uint64_t)(v3 + 1));
  *v3 = (pxrInternal__aapl__pxrReserved__::TfScopeDescription *)*((_QWORD *)this + 11);
  v5 = (_BYTE *)v6[0];
  if (v6[0])
  {
    __dmb(0xBu);
    *v5 = 0;
  }
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*(void **)this);
  }
}

void pxrInternal__aapl__pxrReserved__::TfScopeDescription::SetDescription(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  _BYTE *v5;
  _BYTE *v6;

  sub_20BEB3FEC((uint64_t)&v6, *(_QWORD *)(a1 + 80) + 8);
  if (*((char *)a2 + 23) >= 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  *(_QWORD *)(a1 + 32) = v4;
  v5 = v6;
  if (v6)
  {
    __dmb(0xBu);
    *v5 = 0;
  }
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::TfScopeDescription::SetDescription(uint64_t a1, __int128 *a2)
{
  uint64_t result;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;

  sub_20BEB3FEC((uint64_t)&v7, *(_QWORD *)(a1 + 80) + 8);
  result = sub_20BEDF734(a1, a2);
  v5 = a1;
  if (*(char *)(a1 + 23) < 0)
    v5 = *(_QWORD *)a1;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = v7;
  if (v7)
  {
    __dmb(0xBu);
    *v6 = 0;
  }
  return result;
}

void sub_20BEDF720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20BEDF734(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v4 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((_BYTE *)a2 + 23) = 0;
    *(_BYTE *)a2 = 0;
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void pxrInternal__aapl__pxrReserved__::TfScopeDescription::SetDescription(pxrInternal__aapl__pxrReserved__::TfScopeDescription *this, const char *a2)
{
  _BYTE *v4;
  _BYTE *v5;

  sub_20BEB3FEC((uint64_t)&v5, *((_QWORD *)this + 10) + 8);
  *((_QWORD *)this + 4) = a2;
  v4 = v5;
  if (v5)
  {
    __dmb(0xBu);
    *v4 = 0;
  }
  if (*((_BYTE *)this + 24))
  {
    if (*((char *)this + 23) < 0)
      operator delete(*(void **)this);
    *((_BYTE *)this + 24) = 0;
  }
}

double pxrInternal__aapl__pxrReserved__::TfGetCurrentScopeDescriptionStack@<D0>(pxrInternal__aapl__pxrReserved__ *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t MainThreadId;
  double result;

  MainThreadId = pxrInternal__aapl__pxrReserved__::ArchGetMainThreadId(this);
  *(_QWORD *)&result = sub_20BEDF838(MainThreadId, a2).n128_u64[0];
  return result;
}

__n128 sub_20BEDF838@<Q0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __n128 result;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  char *v11;
  _BYTE *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  char *v21;
  _BYTE *v22;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v4 = sub_20BEE0354();
  sub_20BEE03BC(v4);
  v6 = *(_QWORD **)(v4 + 8);
  v7 = *(_QWORD **)(v4 + 16);
  if (v6 != v7)
  {
    while (1)
    {
      if (*v6)
      {
        if (a1 && *v6 == a1)
          break;
      }
      else if (!a1)
      {
        break;
      }
      v6 += 5;
      if (v6 == v7)
        goto LABEL_19;
    }
  }
  if (v6 != v7)
  {
    v8 = (uint64_t *)v6[4];
    if (v8)
    {
      sub_20BEB3FEC((uint64_t)&v22, (uint64_t)(v8 + 1));
      v9 = *v8;
      if (*v8)
      {
        v10 = (_QWORD *)a2[1];
        do
        {
          v11 = *(char **)(v9 + 32);
          v21 = v11;
          if ((unint64_t)v10 >= a2[2])
          {
            v10 = (_QWORD *)sub_20BEE0434(a2, &v21);
          }
          else
          {
            sub_20BDDC0E4(v10, v11);
            v10 += 3;
            a2[1] = (uint64_t)v10;
          }
          a2[1] = (uint64_t)v10;
          v9 = *(_QWORD *)(v9 + 88);
        }
        while (v9);
      }
      v12 = v22;
      if (v22)
      {
        __dmb(0xBu);
        *v12 = 0;
      }
    }
  }
LABEL_19:
  __dmb(0xBu);
  *(_BYTE *)v4 = 0;
  v13 = *a2;
  v14 = a2[1];
  v15 = v14 - 24;
  if (*a2 != v14 && v15 > v13)
  {
    v17 = v13 + 24;
    do
    {
      v18 = *(_QWORD *)(v17 - 8);
      result = *(__n128 *)(v17 - 24);
      v19 = *(_QWORD *)(v15 + 16);
      *(_OWORD *)(v17 - 24) = *(_OWORD *)v15;
      *(_QWORD *)(v17 - 8) = v19;
      *(__n128 *)v15 = result;
      *(_QWORD *)(v15 + 16) = v18;
      v15 -= 24;
      v20 = v17 >= v15;
      v17 += 24;
    }
    while (!v20);
  }
  return result;
}

void sub_20BEDF984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _BYTE *v3;
  va_list va;

  va_start(va, a3);
  __dmb(0xBu);
  *v3 = 0;
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::TfGetThisThreadScopeDescriptionStack@<D0>(uint64_t *a1@<X8>)
{
  pthread_t v3;
  double result;

  v3 = pthread_self();
  *(_QWORD *)&result = sub_20BEDF838((uint64_t)v3, a1).n128_u64[0];
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::Tf_ScopeDescriptionStackReportLock(pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *this, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char *v19;
  _QWORD *v20;
  char v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  char *v28;
  _QWORD *v29;
  char v30;
  unsigned __int8 *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  char *v39;
  _QWORD *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  char v49;
  BOOL v50;
  _BYTE *v51;
  char v52;
  unsigned __int8 *v53;
  int v54;
  uint64_t v55;
  char v56;
  char *v57;
  _BYTE *v58;
  char v59;
  unsigned __int8 *v60;
  int v61;
  uint64_t v62;
  char v63;
  char *v64;
  _BYTE *v65;
  char v66;
  unsigned __int8 *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  char *v74;
  char v75;
  _BYTE *v76;
  uint64_t v77;
  char v78;
  _BYTE *v79;
  unint64_t v81;
  _BYTE *MainThreadId;
  char v83;
  _BYTE *v84;
  char v85;
  _OWORD v86[512];
  uint64_t v87;

  v3 = (_QWORD *)MEMORY[0x24BDAC7A8](this, a2, a3);
  v87 = *MEMORY[0x24BDAC8D0];
  sub_20BEE03BC((uint64_t)&byte_254785178);
  v4 = sub_20BEE0354();
  v84 = 0;
  v85 = 0;
  v5 = sub_20BEE0538(&v84, v4);
  if ((v5 & 1) != 0)
  {
    memset(v86, 0, 512);
    v6 = *(_QWORD *)(v4 + 8);
    v7 = 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v4 + 16) - v6) >> 3);
    if (v7 >= 0x400)
      v7 = 1024;
    v81 = v7;
    if (v7)
    {
      v8 = v86;
      v9 = v81;
      do
      {
        *v8++ = v6;
        v6 += 40;
        --v9;
      }
      while (v9);
    }
    MainThreadId = (_BYTE *)pxrInternal__aapl__pxrReserved__::ArchGetMainThreadId((pxrInternal__aapl__pxrReserved__ *)v5);
    v10 = 126 - 2 * __clz(v81);
    if (v81)
      v11 = v10;
    else
      v11 = 0;
    sub_20BEE0674((unint64_t)v86, (unint64_t **)v86 + v81, (uint64_t *)&MainThreadId, v11, 1);
    if (v81)
    {
      v12 = 0;
      v13 = 0x1FFFFFu;
      v14 = byte_2547851B0;
      do
      {
        v15 = (uint64_t *)*((_QWORD *)v86 + v12);
        MainThreadId = 0;
        v83 = 0;
        v16 = sub_20BEE0538(&MainThreadId, v15[4] + 8);
        if ((v16 & 1) == 0)
        {
          v17 = 0;
          v18 = 69;
          while (1)
          {
            v19 = &byte_2547851B0[v13];
            if (&v14[v17] == &byte_2547851B0[v13])
              break;
            v14[v17] = v18;
            v18 = aErrorCannotWri[++v17];
            if (v17 == 56)
            {
              v19 = v14 + 56;
              break;
            }
          }
          *v19 = 0;
          v20 = v15 + 1;
          if (*((char *)v15 + 31) < 0)
            v20 = (_QWORD *)*v20;
          v21 = *(_BYTE *)v20;
          if (*(_BYTE *)v20)
          {
            v22 = (unsigned __int8 *)v20 + 1;
            while (v19 != &byte_2547851B0[v13])
            {
              *v19++ = v21;
              v23 = *v22++;
              v21 = v23;
              if (!v23)
                goto LABEL_25;
            }
            v19 = &byte_2547851B0[v13];
          }
LABEL_25:
          v24 = 0;
          *v19 = 0;
          v25 = 32;
          while (1)
          {
            v14 = &byte_2547851B0[v13];
            if (&v19[v24] == &byte_2547851B0[v13])
              break;
            v19[v24] = v25;
            v25 = aFailedToAcquir[++v24];
            if (v24 == 34)
            {
              v14 = v19 + 34;
              break;
            }
          }
          *v14 = 0;
        }
        if (!*(_QWORD *)v15[4])
          goto LABEL_118;
        v26 = 0;
        v27 = 84;
        while (1)
        {
          v28 = &byte_2547851B0[v13];
          if (&v14[v26] == &byte_2547851B0[v13])
            break;
          v14[v26] = v27;
          v27 = aThread[++v26];
          if (v26 == 7)
          {
            v28 = v14 + 7;
            break;
          }
        }
        *v28 = 0;
        v29 = v15 + 1;
        if (*((char *)v15 + 31) < 0)
          v29 = (_QWORD *)*v29;
        v30 = *(_BYTE *)v29;
        if (*(_BYTE *)v29)
        {
          v31 = (unsigned __int8 *)v29 + 1;
          while (v28 != &byte_2547851B0[v13])
          {
            *v28++ = v30;
            v32 = *v31++;
            v30 = v32;
            if (!v32)
              goto LABEL_43;
          }
          v28 = &byte_2547851B0[v13];
        }
LABEL_43:
        *v28 = 0;
        v33 = *v15;
        v34 = pxrInternal__aapl__pxrReserved__::ArchGetMainThreadId((pxrInternal__aapl__pxrReserved__ *)v16);
        if (v33)
        {
          if (v34 && v33 == v34)
          {
LABEL_46:
            v35 = 0;
            v36 = 32;
            while (&v28[v35] != &byte_2547851B0[v13])
            {
              v28[v35] = v36;
              v36 = aMain[++v35];
              if (v35 == 7)
              {
                v28 += 7;
                goto LABEL_53;
              }
            }
            v28 = &byte_2547851B0[v13];
LABEL_53:
            *v28 = 0;
          }
        }
        else if (!v34)
        {
          goto LABEL_46;
        }
        v37 = 0;
        v38 = 32;
        while (1)
        {
          v39 = &byte_2547851B0[v13];
          if (&v28[v37] == &byte_2547851B0[v13])
            break;
          v28[v37] = v38;
          v38 = aScopeDescripti[++v37];
          if (v37 == 20)
          {
            v39 = v28 + 20;
            break;
          }
        }
        *v39 = 0;
        v40 = *(_QWORD **)v15[4];
        if (v40)
        {
          v41 = 1;
          while (2)
          {
            if (v39 == &byte_2547851B0[v13])
            {
              v42 = &byte_2547851B0[v13];
              byte_2547851B0[v13] = 0;
            }
            else
            {
              *(_WORD *)v39 = 35;
              v42 = &byte_2547851B0[v13];
              if (v39 + 1 != &byte_2547851B0[v13])
              {
                v43 = 0;
                v44 = v41;
                do
                {
                  v45 = &v39[v43 + 2];
                  v39[++v43] = (v44 % 0xA) | 0x30;
                  if (v44 < 0xA)
                    break;
                  v44 /= 0xAuLL;
                }
                while (v45 != &byte_2547851B0[v13]);
                v46 = &v39[v43];
                if (v43 >= 2)
                {
                  v47 = v39 + 2;
                  v48 = &v39[v43];
                  do
                  {
                    v49 = *(v47 - 1);
                    *(v47 - 1) = *v48;
                    *v48-- = v49;
                    v50 = v47++ >= v48;
                  }
                  while (!v50);
                }
                v42 = &byte_2547851B0[v13];
                v46[1] = 0;
                if (v45 != &byte_2547851B0[v13])
                {
                  v42 = &v39[v43 + 2];
                  v46[1] = 32;
                }
              }
            }
            *v42 = 0;
            v51 = (_BYTE *)v40[4];
            v52 = *v51;
            if (*v51)
            {
              v53 = v51 + 1;
              while (v42 != &byte_2547851B0[v13])
              {
                *v42++ = v52;
                v54 = *v53++;
                v52 = v54;
                if (!v54)
                  goto LABEL_78;
              }
              v42 = &byte_2547851B0[v13];
            }
LABEL_78:
            *v42 = 0;
            if (!v40[5] || !v40[6])
              goto LABEL_112;
            v55 = 0;
            v56 = 32;
            while (1)
            {
              v57 = &byte_2547851B0[v13];
              if (&v42[v55] == &byte_2547851B0[v13])
                break;
              v42[v55] = v56;
              v56 = aFrom[++v55];
              if (v55 == 7)
              {
                v57 = v42 + 7;
                break;
              }
            }
            *v57 = 0;
            v58 = (_BYTE *)v40[6];
            v59 = *v58;
            if (*v58)
            {
              v60 = v58 + 1;
              while (v57 != &byte_2547851B0[v13])
              {
                *v57++ = v59;
                v61 = *v60++;
                v59 = v61;
                if (!v61)
                  goto LABEL_90;
              }
              v57 = &byte_2547851B0[v13];
            }
LABEL_90:
            v62 = 0;
            *v57 = 0;
            v63 = 32;
            while (1)
            {
              v64 = &byte_2547851B0[v13];
              if (&v57[v62] == &byte_2547851B0[v13])
                break;
              v57[v62] = v63;
              v63 = aIn[++v62];
              if (v62 == 4)
              {
                v64 = v57 + 4;
                break;
              }
            }
            *v64 = 0;
            v65 = (_BYTE *)v40[5];
            v66 = *v65;
            if (*v65)
            {
              v67 = v65 + 1;
              while (v64 != &byte_2547851B0[v13])
              {
                *v64++ = v66;
                v68 = *v67++;
                v66 = v68;
                if (!v68)
                  goto LABEL_98;
              }
              byte_2547851B0[v13] = 0;
LABEL_110:
              v42 = &byte_2547851B0[v13];
              byte_2547851B0[v13] = 0;
            }
            else
            {
LABEL_98:
              *v64 = 0;
              if (v64 == &byte_2547851B0[v13])
                goto LABEL_110;
              *(_WORD *)v64 = 35;
              v42 = &byte_2547851B0[v13];
              if (v64 + 1 != &byte_2547851B0[v13])
              {
                v69 = 0;
                v70 = v40[7];
                do
                {
                  v71 = &v64[v69 + 2];
                  v64[++v69] = (v70 % 0xA) | 0x30;
                  if (v70 < 0xA)
                    break;
                  v70 /= 0xAuLL;
                }
                while (v71 != &byte_2547851B0[v13]);
                v72 = &v64[v69];
                if (v69 >= 2)
                {
                  v73 = v64 + 2;
                  v74 = &v64[v69];
                  do
                  {
                    v75 = *(v73 - 1);
                    *(v73 - 1) = *v74;
                    *v74-- = v75;
                    v50 = v73++ >= v74;
                  }
                  while (!v50);
                }
                v42 = &byte_2547851B0[v13];
                v72[1] = 0;
                if (v71 != &byte_2547851B0[v13])
                {
                  v42 = &v64[v69 + 2];
                  v72[1] = 41;
                }
              }
            }
            *v42 = 0;
LABEL_112:
            v39 = &byte_2547851B0[v13];
            if (v42 != &byte_2547851B0[v13])
            {
              *v42 = 10;
              v39 = v42 + 1;
            }
            ++v41;
            *v39 = 0;
            v40 = (_QWORD *)v40[11];
            if (!v40)
              break;
            continue;
          }
        }
        v14 = &byte_2547851B0[v13];
        if (v39 != &byte_2547851B0[v13])
        {
          *v39 = 10;
          v14 = v39 + 1;
        }
        *v14 = 0;
LABEL_118:
        v76 = MainThreadId;
        if (MainThreadId)
        {
          __dmb(0xBu);
          *v76 = 0;
        }
        ++v12;
      }
      while (v12 != v81);
    }
  }
  else
  {
    v77 = 0;
    v78 = 69;
    do
    {
      byte_2547851B0[v77] = v78;
      v78 = aErrorCannotGen[++v77];
    }
    while (v77 != 99);
    unk_254785213 = 0;
  }
  v79 = v84;
  if (v84)
  {
    __dmb(0xBu);
    *v79 = 0;
  }
  *v3 = byte_2547851B0;
  return v3;
}

void sub_20BEE0134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _BYTE *a13)
{
  if (a13)
  {
    __dmb(0xBu);
    *a13 = 0;
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::~Tf_ScopeDescriptionStackReportLock(pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *this)
{
  __dmb(0xBu);
  byte_254785178 = 0;
}

{
  __dmb(0xBu);
  byte_254785178 = 0;
}

uint64_t sub_20BEE0184(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE v14[7];
  _BYTE *v15;
  __int128 v16;
  uint64_t v17;
  const char *v18;
  char v19;
  _DWORD v20[3];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = sub_20BEE0354();
  sub_20BEB3FEC((uint64_t)&v15, v2);
  v4 = *(uint64_t **)(v2 + 8);
  v5 = *(uint64_t **)(v2 + 16);
  if (v4 != v5)
  {
    while (v4[4] != a1)
    {
      v4 += 5;
      if (v4 == v5)
        goto LABEL_4;
    }
  }
  if (v4 == v5)
  {
LABEL_4:
    *(_QWORD *)&v16 = "tf/scopeDescription.cpp";
    *((_QWORD *)&v16 + 1) = "Remove";
    v17 = 143;
    v18 = "void pxrInternal__aapl__pxrReserved__::(anonymous namespace)::_StackRegistry::Remove(_Stack *)";
    v19 = 0;
    v20[0] = *(_DWORD *)v14;
    *(_DWORD *)((char *)v20 + 3) = *(_DWORD *)&v14[3];
    *(_DWORD *)((char *)&v20[1] + 3) = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v16, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v3, "it != _stacks.end()");
  }
  v6 = *v4;
  v7 = v4[1];
  *(_QWORD *)((char *)&v16 + 7) = *(uint64_t *)((char *)v4 + 23);
  *(_QWORD *)&v16 = v4[2];
  v8 = *((_BYTE *)v4 + 31);
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  v9 = v4[4];
  *v4 = *(v5 - 5);
  v10 = *((_OWORD *)v5 - 2);
  v4[3] = *(v5 - 2);
  *(_OWORD *)(v4 + 1) = v10;
  *((_BYTE *)v5 - 9) = 0;
  *((_BYTE *)v5 - 32) = 0;
  v4[4] = *(v5 - 1);
  *(v5 - 5) = v6;
  if (*((char *)v5 - 9) < 0)
    operator delete((void *)*(v5 - 4));
  *(v5 - 4) = v7;
  *(v5 - 3) = v16;
  *(uint64_t *)((char *)v5 - 17) = *(_QWORD *)((char *)&v16 + 7);
  *((_BYTE *)v5 - 9) = v8;
  *(v5 - 1) = v9;
  v11 = *(_QWORD *)(v2 + 16);
  if (*(char *)(v11 - 9) < 0)
    operator delete(*(void **)(v11 - 32));
  *(_QWORD *)(v2 + 16) = v11 - 40;
  v12 = v15;
  if (v15)
  {
    __dmb(0xBu);
    *v12 = 0;
  }
  return a1;
}

void sub_20BEE0330(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

uint64_t sub_20BEE0354()
{
  unsigned __int8 v0;
  unsigned __int8 *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2547851A8);
  v1 = byte_254785000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_2547851A8);
    v1 = byte_254785000;
    if (v3)
    {
      byte_254785180 = 0;
      qword_254785190 = 0;
      unk_254785198 = 0;
      qword_254785188 = 0;
      qword_2547851A0 = (uint64_t)&byte_254785180;
      __cxa_guard_release(&qword_2547851A8);
      v1 = byte_254785000;
    }
  }
  return *((_QWORD *)v1 + 52);
}

uint64_t sub_20BEE03BC(uint64_t result)
{
  unsigned int *v1;
  int v2;
  int v3;
  int v4;
  unsigned int v5;

  v1 = (unsigned int *)(result & 0xFFFFFFFFFFFFFFFCLL);
  v2 = 1 << (8 * (result & 3));
  v3 = ~(255 << (8 * (result & 3)));
LABEL_2:
  v4 = *v1 & v3;
  do
  {
    while (1)
    {
      v5 = __ldaxr(v1);
      if (v5 == v4)
        break;
      __clrex();
      if (*v1 != v4)
      {
        result = sched_yield();
        goto LABEL_2;
      }
    }
  }
  while (__stlxr(v4 | v2, v1));
  return result;
}

uint64_t sub_20BEE0434(uint64_t *a1, char **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v15 = v14;
  v16 = &v10[24 * v9];
  sub_20BDDC0E4(v14, *a2);
  v15 = v14 + 24;
  sub_20BDF34C0(a1, &v13);
  v11 = a1[1];
  sub_20BDF3648((uint64_t)&v13);
  return v11;
}

void sub_20BEE0524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDF3648((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20BEE0538(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int rep;

  if ((sub_20BEE05D0(a1, a2) & 1) != 0)
    return 1;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  do
  {
    sched_yield();
    v4 = sub_20BEE05D0(a1, a2);
  }
  while ((v4 & 1) == 0 && (int)(std::chrono::steady_clock::now().__d_.__rep_ - rep) / 1000000 < 10);
  return v4;
}

uint64_t sub_20BEE05D0(_QWORD *a1, uint64_t a2)
{
  unsigned int *v4;
  int v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t result;

  v4 = (unsigned int *)(a2 & 0xFFFFFFFFFFFFFFFCLL);
  v5 = 255 << (8 * (a2 & 3));
  v6 = 1 << (8 * (a2 & 3));
  while (1)
  {
    v7 = *v4 & ~v5;
    do
    {
      while (1)
      {
        v8 = __ldaxr(v4);
        if (v8 != v7)
          break;
        if (!__stlxr(v7 | v6, v4))
        {
          result = 1;
          *a1 = a2;
          return result;
        }
      }
      result = 0;
      __clrex();
    }
    while (*v4 == v7);
    if ((*v4 & v5) != 0)
      break;
    sched_yield();
  }
  return result;
}

unint64_t sub_20BEE0674(unint64_t result, unint64_t **a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t **v9;
  unint64_t **v10;
  unint64_t **i;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t **v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  uint64_t v21;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  int v26;
  BOOL v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  unint64_t **v31;
  unint64_t v32;
  unint64_t **j;
  unint64_t v34;
  int v35;
  unint64_t v36;
  char v37;
  unint64_t *v39;
  unint64_t **v40;
  unint64_t **v41;
  unint64_t v42;
  uint64_t v43;
  BOOL v44;
  int v45;
  BOOL v46;
  unint64_t v47;
  char v48;
  unint64_t *v49;
  unint64_t v50;
  int v51;
  BOOL v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  BOOL v56;
  BOOL v57;
  BOOL v58;
  char v59;
  unint64_t v60;
  BOOL v61;
  char v62;
  BOOL v63;
  BOOL v64;
  _BOOL4 v65;
  uint64_t v67;
  BOOL v68;
  char v69;
  unint64_t v70;
  BOOL v71;
  char v72;
  BOOL v73;
  BOOL v74;
  int v75;
  BOOL v76;
  unint64_t **v77;
  uint64_t v78;
  BOOL v79;
  char v80;
  BOOL v81;
  char v82;
  BOOL v83;
  _BOOL4 v84;
  unint64_t *v85;
  unint64_t *v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  BOOL v90;
  char v91;
  unint64_t v92;
  BOOL v93;
  BOOL v94;
  _BOOL4 v95;
  BOOL v97;
  char v98;
  unint64_t *v99;
  unint64_t v100;
  BOOL v101;
  BOOL v102;
  BOOL v103;
  BOOL v104;
  char v105;
  unint64_t **v106;
  unint64_t *v107;
  unint64_t *v108;
  unint64_t v109;
  unint64_t v110;
  BOOL v111;
  uint64_t v112;
  BOOL v113;
  BOOL v114;
  unint64_t **v115;
  BOOL v117;
  uint64_t v118;
  unint64_t **v119;
  unint64_t **v120;
  unint64_t *v121;
  unint64_t v122;
  unint64_t v123;
  BOOL v124;
  uint64_t v125;
  BOOL v127;
  BOOL v128;
  unint64_t **v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  BOOL v135;
  uint64_t v136;
  BOOL v137;
  BOOL v138;
  _BOOL4 v139;
  BOOL v141;
  int64_t v142;
  int64_t v143;
  int64_t v144;
  uint64_t v145;
  unint64_t **v146;
  unint64_t v147;
  unint64_t v148;
  BOOL v149;
  BOOL v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  BOOL v154;
  BOOL v155;
  unint64_t **v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  BOOL v161;
  uint64_t v162;
  BOOL v163;
  char v164;
  unint64_t v165;
  BOOL v166;
  uint64_t v167;
  BOOL v168;
  _BOOL4 v169;
  uint64_t v171;
  uint64_t v172;
  unint64_t *v173;
  unint64_t **v174;
  unint64_t **v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  BOOL v180;
  BOOL v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t **v185;
  unint64_t v186;
  unint64_t v187;
  BOOL v188;
  uint64_t v189;
  BOOL v190;
  BOOL v191;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  BOOL v196;
  uint64_t v197;
  BOOL v199;
  _BOOL4 v200;
  unint64_t **v203;
  unint64_t *v204;
  unint64_t *v205;
  unint64_t v206;
  unint64_t v207;
  BOOL v208;
  uint64_t v209;
  BOOL v211;
  BOOL v212;
  unint64_t **v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t v217;
  BOOL v218;
  uint64_t v219;
  BOOL v221;
  _BOOL4 v222;

  v9 = (unint64_t **)result;
LABEL_2:
  v10 = a2 - 1;
  i = v9;
  while (2)
  {
    v9 = i;
    v12 = (char *)a2 - (char *)i;
    v13 = a2 - i;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v107 = *(a2 - 1);
        v108 = *i;
        v109 = *v107;
        v110 = **i;
        if (*v107)
        {
          if (v110)
            v111 = v109 == v110;
          else
            v111 = 0;
          if (v111)
            return result;
          v112 = *a3;
          if (!*a3 || v109 != v112)
          {
            if (!v110)
              return result;
            v113 = v112 && v110 == v112;
            v114 = v113;
            if (v109 >= v110 || v114)
              return result;
          }
        }
        else if (!v110 || *a3 && v110 == *a3)
        {
          return result;
        }
        *i = v107;
        *(a2 - 1) = v108;
        return result;
      case 3uLL:
        return (unint64_t)sub_20BEE16C8(i, i + 1, a2 - 1, a3);
      case 4uLL:
        return (unint64_t)sub_20BEE1B98(i, i + 1, i + 2, a2 - 1, a3);
      case 5uLL:
        return (unint64_t)sub_20BEE14D0(i, i + 1, i + 2, i + 3, a2 - 1, a3);
      default:
        if (v12 <= 191)
        {
          v115 = i + 1;
          v117 = i == a2 || v115 == a2;
          if ((a5 & 1) == 0)
          {
            if (v117)
              return result;
            while (1)
            {
              v203 = v9;
              v9 = v115;
              v205 = *v203;
              v204 = v203[1];
              v206 = *v204;
              v207 = **v203;
              if (*v204)
              {
                if (v207)
                  v208 = v206 == v207;
                else
                  v208 = 0;
                if (!v208)
                {
                  v209 = *a3;
                  if (*a3 && v206 == v209)
                    goto LABEL_609;
                  if (v207)
                  {
                    v211 = v209 && v207 == v209;
                    v212 = v211;
                    if (v206 < v207 && !v212)
                      goto LABEL_609;
                  }
                }
              }
              else if (v207)
              {
                if (!*a3 || v207 != *a3)
                {
                  do
                  {
LABEL_609:
                    while (1)
                    {
                      v214 = v203;
                      v215 = *--v203;
                      v203[2] = v205;
                      v205 = v215;
                      v216 = *v204;
                      v217 = *v215;
                      if (!*v204)
                        break;
                      if (v217)
                        v218 = v216 == v217;
                      else
                        v218 = 0;
                      if (!v218)
                      {
                        v219 = *a3;
                        if (*a3 && v216 == v219)
                          continue;
                        if (v217)
                        {
                          v221 = v219 && v217 == v219;
                          v222 = v221;
                          if (v216 < v217 && !v222)
                            continue;
                        }
                      }
                      goto LABEL_636;
                    }
                    if (!v217)
                      break;
                  }
                  while (!*a3 || v217 != *a3);
LABEL_636:
                  *v214 = v204;
                }
              }
              v115 = v9 + 1;
              if (v9 + 1 == a2)
                return result;
            }
          }
          if (v117)
            return result;
          v118 = 0;
          v119 = i;
LABEL_349:
          v120 = v119;
          v119 = v115;
          v121 = v120[1];
          v122 = *v121;
          v123 = **v120;
          if (*v121)
          {
            if (v123)
              v124 = v122 == v123;
            else
              v124 = 0;
            if (v124)
              goto LABEL_405;
            v125 = *a3;
            if (!*a3 || v122 != v125)
            {
              if (!v123)
                goto LABEL_405;
              v127 = v125 && v123 == v125;
              v128 = v127;
              if (v122 >= v123 || v128)
                goto LABEL_405;
            }
          }
          else
          {
            if (!v123)
              goto LABEL_405;
            if (*a3 && v123 == *a3)
              goto LABEL_405;
          }
          v120[1] = *v120;
          v130 = i;
          if (v120 == i)
            goto LABEL_404;
          v131 = v118;
          while (1)
          {
            v132 = *(unint64_t **)((char *)i + v131 - 8);
            v133 = *v121;
            v134 = *v132;
            if (*v121)
            {
              if (v134)
                v135 = v133 == v134;
              else
                v135 = 0;
              if (v135)
                goto LABEL_403;
              v136 = *a3;
              if (*a3)
                v137 = v133 == v136;
              else
                v137 = 0;
              if (!v137)
              {
                if (!v134)
                  goto LABEL_403;
                v138 = v136 && v134 == v136;
                v139 = v138;
                if (v133 >= v134 || v139)
                {
                  v130 = (unint64_t **)((char *)i + v131);
                  goto LABEL_404;
                }
              }
            }
            else if (!v134 || (*a3 ? (v141 = v134 == *a3) : (v141 = 0), v141))
            {
LABEL_403:
              v130 = v120;
LABEL_404:
              *v130 = v121;
LABEL_405:
              v115 = v119 + 1;
              v118 += 8;
              if (v119 + 1 == a2)
                return result;
              goto LABEL_349;
            }
            --v120;
            *(unint64_t **)((char *)i + v131) = v132;
            v131 -= 8;
            if (!v131)
            {
              v130 = i;
              goto LABEL_404;
            }
          }
        }
        if (!a4)
        {
          if (i == a2)
            return result;
          v142 = (v13 - 2) >> 1;
          v143 = v142;
          while (1)
          {
            v144 = v143;
            if (v142 < v143)
              goto LABEL_502;
            v145 = (2 * v143) | 1;
            v146 = &i[v145];
            if (2 * v144 + 2 >= (uint64_t)v13)
              goto LABEL_432;
            result = (unint64_t)v146[1];
            v147 = **v146;
            v148 = *(_QWORD *)result;
            if (v147)
            {
              if (v148)
                v149 = v147 == v148;
              else
                v149 = 0;
              if (v149)
                goto LABEL_432;
              result = *a3;
              if (!*a3 || v147 != result)
              {
                if (!v148)
                  goto LABEL_432;
                v150 = result && v148 == result;
                result = v150;
                if (v147 >= v148 || (result & 1) != 0)
                  goto LABEL_432;
              }
            }
            else if (!v148 || *a3 && v148 == *a3)
            {
              goto LABEL_432;
            }
            ++v146;
            v145 = 2 * v144 + 2;
LABEL_432:
            v151 = i[v144];
            v152 = **v146;
            v153 = *v151;
            if (v152)
            {
              if (v153)
                v154 = v152 == v153;
              else
                v154 = 0;
              if (!v154)
              {
                result = *a3;
                if (*a3)
                {
                  if (v152 == result)
                    goto LABEL_502;
                }
                if (v153)
                {
                  v155 = result && v153 == result;
                  result = v155;
                  if (v152 < v153 && (result & 1) == 0)
                    goto LABEL_502;
                }
              }
            }
            else if (v153 && (!*a3 || v153 != *a3))
            {
              goto LABEL_502;
            }
            i[v144] = *v146;
            while (1)
            {
              if (v142 < v145)
                goto LABEL_501;
              v156 = v146;
              v157 = 2 * v145;
              v145 = (2 * v145) | 1;
              v146 = &i[v145];
              v158 = v157 + 2;
              if (v158 < (uint64_t)v13)
              {
                v159 = **v146;
                v160 = *v146[1];
                if (v159)
                {
                  if (v160)
                    v161 = v159 == v160;
                  else
                    v161 = 0;
                  if (!v161)
                  {
                    if ((v162 = *a3) != 0 && v159 == v162
                      || v160
                      && (v162 ? (v163 = v160 == v162) : (v163 = 0),
                          !v163 ? (v164 = 0) : (v164 = 1),
                          v159 < v160 && (v164 & 1) == 0))
                    {
LABEL_475:
                      ++v146;
                      v145 = v158;
                    }
                  }
                }
                else if (v160 && (!*a3 || v160 != *a3))
                {
                  goto LABEL_475;
                }
              }
              result = **v146;
              v165 = *v151;
              if (result)
                break;
              if (v165)
              {
                result = *a3;
                if (!*a3 || v165 != result)
                  goto LABEL_500;
              }
LABEL_499:
              *v156 = *v146;
            }
            if (v165)
              v166 = result == v165;
            else
              v166 = 0;
            if (v166)
              goto LABEL_499;
            v167 = *a3;
            if (!*a3 || result != v167)
            {
              if (!v165)
                goto LABEL_499;
              v168 = v167 && v165 == v167;
              v169 = v168;
              if (result >= v165 || v169)
                goto LABEL_499;
            }
LABEL_500:
            v146 = v156;
LABEL_501:
            *v146 = v151;
LABEL_502:
            v143 = v144 - 1;
            if (!v144)
            {
              v171 = (unint64_t)v12 >> 3;
              while (1)
              {
                v172 = 0;
                v173 = *i;
                v174 = i;
                do
                {
                  v175 = v174;
                  v174 += v172 + 1;
                  v176 = 2 * v172;
                  v172 = (2 * v172) | 1;
                  v177 = v176 + 2;
                  if (v177 >= v171)
                    goto LABEL_527;
                  result = (unint64_t)v174[1];
                  v178 = **v174;
                  v179 = *(_QWORD *)result;
                  if (v178)
                  {
                    if (v179)
                      v180 = v178 == v179;
                    else
                      v180 = 0;
                    if (!v180)
                    {
                      if ((result = *a3) != 0 && v178 == result
                        || v179
                        && (result ? (v181 = v179 == result) : (v181 = 0),
                            !v181 ? (result = 0) : (result = 1),
                            v178 < v179 && (result & 1) == 0))
                      {
LABEL_526:
                        ++v174;
                        v172 = v177;
                      }
                    }
                  }
                  else if (v179 && (!*a3 || v179 != *a3))
                  {
                    goto LABEL_526;
                  }
LABEL_527:
                  *v175 = *v174;
                }
                while (v172 <= (uint64_t)((unint64_t)(v171 - 2) >> 1));
                if (v174 == --a2)
                  goto LABEL_552;
                *v174 = *a2;
                *a2 = v173;
                v182 = (char *)v174 - (char *)i + 8;
                if (v182 >= 9)
                {
                  v183 = ((unint64_t)v182 >> 3) - 2;
                  v184 = v183 >> 1;
                  v185 = &i[v183 >> 1];
                  v173 = *v174;
                  v186 = **v185;
                  v187 = **v174;
                  if (v186)
                  {
                    if (v187)
                      v188 = v186 == v187;
                    else
                      v188 = 0;
                    if (v188)
                      goto LABEL_553;
                    v189 = *a3;
                    if (!*a3 || v186 != v189)
                    {
                      if (!v187)
                        goto LABEL_553;
                      v190 = v189 && v187 == v189;
                      v191 = v190;
                      if (v186 >= v187 || v191)
                        goto LABEL_553;
                    }
LABEL_550:
                    *v174 = *v185;
                    if (v183 >= 2)
                    {
                      while (1)
                      {
                        v193 = v184 - 1;
                        v184 = (v184 - 1) >> 1;
                        v174 = &i[v184];
                        v194 = **v174;
                        v195 = *v173;
                        if (v194)
                        {
                          if (v195)
                            v196 = v194 == v195;
                          else
                            v196 = 0;
                          if (v196)
                            break;
                          v197 = *a3;
                          if (!*a3 || v194 != v197)
                          {
                            if (!v195)
                              break;
                            v199 = v197 && v195 == v197;
                            v200 = v199;
                            if (v194 >= v195 || v200)
                              break;
                          }
                        }
                        else
                        {
                          if (!v195)
                            break;
                          if (*a3 && v195 == *a3)
                            break;
                        }
                        *v185 = *v174;
                        v185 = &i[v184];
                        if (v193 < 2)
                          goto LABEL_552;
                      }
                    }
                    v174 = v185;
LABEL_552:
                    *v174 = v173;
                  }
                  else if (v187 && (!*a3 || v187 != *a3))
                  {
                    goto LABEL_550;
                  }
                }
LABEL_553:
                if (v171-- <= 2)
                  return result;
              }
            }
          }
        }
        v14 = v13 >> 1;
        v15 = &i[v13 >> 1];
        if ((unint64_t)v12 < 0x401)
        {
          result = (unint64_t)sub_20BEE16C8(&v9[v13 >> 1], v9, a2 - 1, a3);
        }
        else
        {
          sub_20BEE16C8(v9, &v9[v13 >> 1], a2 - 1, a3);
          sub_20BEE16C8(v9 + 1, v15 - 1, a2 - 2, a3);
          sub_20BEE16C8(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
          result = (unint64_t)sub_20BEE16C8(v15 - 1, v15, &v9[v14 + 1], a3);
          v16 = *v9;
          *v9 = *v15;
          *v15 = v16;
        }
        --a4;
        v17 = *v9;
        v18 = **v9;
        if ((a5 & 1) == 0)
        {
          v19 = **(v9 - 1);
          if (v19)
          {
            if (v18)
              v20 = v19 == v18;
            else
              v20 = 0;
            if (!v20)
            {
              v21 = *a3;
              if (*a3 && v19 == v21)
                goto LABEL_30;
              if (!v18)
              {
LABEL_134:
                v53 = **v10;
                if (!v53)
                {
                  v54 = 1;
                  goto LABEL_185;
                }
                v55 = *a3;
                v54 = 1;
                if (*a3 && v53 == v55)
                  goto LABEL_185;
                goto LABEL_150;
              }
              if (v18 != v21 || v21 == 0)
              {
                v23 = v19 >= v18;
                v19 = *a3;
                if (!v23)
                  goto LABEL_30;
              }
            }
          }
          else
          {
            if (!v18)
              goto LABEL_134;
            v19 = *a3;
            if (!*a3 || v18 != v19)
              goto LABEL_30;
          }
          v53 = **v10;
          if (v53 && v18 == v53)
          {
            v54 = 0;
            v53 = **v9;
LABEL_185:
            i = v9 + 1;
            if (v9 + 1 >= a2)
              goto LABEL_221;
            v67 = *a3;
            if (*a3)
              v68 = v18 == v67;
            else
              v68 = 0;
            v69 = v68;
            while (1)
            {
              v70 = **i;
              if (v54)
              {
                if (v67)
                  v71 = v70 == v67;
                else
                  v71 = 0;
                v72 = !v71;
                if (v70 && (v72 & 1) != 0)
                {
                  v54 = 1;
                  goto LABEL_221;
                }
              }
              else
              {
                if (v70)
                  v73 = v18 == v70;
                else
                  v73 = 0;
                if (!v73)
                {
                  if ((v69 & 1) != 0
                    || v70
                    && (v67 ? (v74 = v70 == v67) : (v74 = 0),
                        !v74 ? (v75 = 0) : (v75 = 1),
                        v18 < v70 ? (v76 = v75 == 0) : (v76 = 0),
                        v76))
                  {
                    v54 = 0;
                    goto LABEL_221;
                  }
                }
              }
              if (++i >= a2)
                goto LABEL_221;
            }
          }
          v55 = *a3;
          if (*a3 && v18 == v55)
          {
            v54 = 0;
            v55 = **v9;
          }
          else
          {
            v54 = 0;
            if (!v53)
              goto LABEL_185;
            v56 = v55 && v53 == v55;
            v57 = v56;
            if (v18 >= v53 || v57)
              goto LABEL_185;
          }
LABEL_150:
          if (v55)
            v58 = v18 == v55;
          else
            v58 = 0;
          v59 = v58;
          for (i = v9 + 1; ; ++i)
          {
            v60 = **i;
            if (!v54)
              break;
            if (v55)
              v61 = v60 == v55;
            else
              v61 = 0;
            v62 = !v61;
            if (v60 && (v62 & 1) != 0)
              goto LABEL_221;
LABEL_183:
            ;
          }
          if (v60)
            v63 = v18 == v60;
          else
            v63 = 0;
          if (v63)
            goto LABEL_183;
          if ((v59 & 1) == 0)
          {
            if (!v60)
              goto LABEL_183;
            v64 = v55 && v60 == v55;
            v65 = v64;
            if (v18 >= v60 || v65)
              goto LABEL_183;
          }
LABEL_221:
          v77 = a2;
          if (i >= a2)
            goto LABEL_252;
          v78 = *a3;
          if (*a3)
            v79 = v18 == v78;
          else
            v79 = 0;
          v80 = v79;
          v77 = a2 - 1;
          if (!v54)
            goto LABEL_238;
LABEL_229:
          if (v78)
            v81 = v53 == v78;
          else
            v81 = 0;
          v82 = !v81;
          if (v53 && (v82 & 1) != 0)
          {
            while (1)
            {
              v85 = *--v77;
              v53 = *v85;
              if (v54)
                goto LABEL_229;
LABEL_238:
              if (!v53 || v18 != v53)
              {
                if ((v80 & 1) != 0)
                  continue;
                if (v53)
                {
                  v83 = v78 && v53 == v78;
                  v84 = v83;
                  if (v18 < v53 && !v84)
                    continue;
                }
              }
              break;
            }
          }
LABEL_252:
          if (i >= v77)
            goto LABEL_313;
          v86 = *i;
          v87 = *v77;
          while (2)
          {
            *i++ = v87;
            *v77 = v86;
            v88 = *v17;
            v89 = *a3;
            if (*a3)
              v90 = v88 == v89;
            else
              v90 = 0;
            v91 = v90;
            while (2)
            {
              v86 = *i;
              v92 = **i;
              if (v88)
              {
                if (v92)
                  v93 = v88 == v92;
                else
                  v93 = 0;
                if (!v93)
                {
                  if ((v91 & 1) != 0)
                    goto LABEL_288;
                  if (v92)
                  {
                    v94 = v89 && v92 == v89;
                    v95 = v94;
                    if (v88 < v92 && !v95)
                      goto LABEL_288;
                  }
                }
                goto LABEL_287;
              }
              if (v89)
                v97 = v92 == v89;
              else
                v97 = 0;
              v98 = !v97;
              if (!v92 || (v98 & 1) == 0)
              {
LABEL_287:
                ++i;
                continue;
              }
              break;
            }
            do
            {
LABEL_288:
              while (1)
              {
                v99 = *--v77;
                v87 = v99;
                v100 = *v99;
                if (!v88)
                  break;
                if (v100)
                  v101 = v88 == v100;
                else
                  v101 = 0;
                if (!v101)
                {
                  if ((v91 & 1) != 0)
                    continue;
                  if (v100)
                  {
                    v102 = v89 && v100 == v89;
                    v103 = v102;
                    if (v88 < v100 && !v103)
                      continue;
                  }
                }
                goto LABEL_312;
              }
              if (v89)
                v104 = v100 == v89;
              else
                v104 = 0;
              v105 = !v104;
            }
            while (v100 && (v105 & 1) != 0);
LABEL_312:
            if (i < v77)
              continue;
            break;
          }
LABEL_313:
          v106 = i - 1;
          if (i - 1 != v9)
            *v9 = *v106;
          a5 = 0;
          *v106 = v17;
          continue;
        }
        v19 = *a3;
LABEL_30:
        v24 = 0;
        if (v19)
          v25 = v18 == v19;
        else
          v25 = 0;
        v26 = v25;
        v27 = v25 || v18 == 0;
        while (1)
        {
          v28 = v9[v24 + 1];
          v29 = *v28;
          if (*v28)
            break;
          if (v27)
            goto LABEL_52;
LABEL_51:
          ++v24;
        }
        if (!v18 || v29 != v18)
        {
          if (v19 && v29 == v19)
            goto LABEL_51;
          v30 = v29 >= v18 ? 1 : v26;
          if (v18 && (v30 & 1) == 0)
            goto LABEL_51;
        }
LABEL_52:
        v31 = &v9[v24];
        v32 = (unint64_t)&v9[v24 + 1];
        j = a2 - 1;
        if (v24 * 8)
        {
          while (1)
          {
            v34 = **j;
            if (v34)
            {
              if (!v18 || v34 != v18)
              {
                if (v19 && v34 == v19)
                  goto LABEL_87;
                v35 = v34 >= v18 ? 1 : v26;
                if (v18 && !v35)
                  goto LABEL_87;
              }
            }
            else if (!v27)
            {
              goto LABEL_87;
            }
            --j;
          }
        }
        j = a2;
        if (v32 < (unint64_t)a2)
        {
          for (j = a2 - 1; ; --j)
          {
            v36 = **j;
            if (v36)
            {
              if (v18 && v36 == v18)
                goto LABEL_80;
              if (v19 && v36 == v19)
                break;
              if (!v18)
              {
LABEL_80:
                if (v32 >= (unint64_t)j)
                  break;
              }
              else
              {
                if (v36 >= v18)
                  v37 = 1;
                else
                  v37 = v26;
                if (v32 >= (unint64_t)j || (v37 & 1) == 0)
                  break;
              }
            }
            else if (v32 >= (unint64_t)j || !v27)
            {
              break;
            }
          }
        }
LABEL_87:
        if (v32 >= (unint64_t)j)
          goto LABEL_125;
        v39 = *j;
        v40 = (unint64_t **)v32;
        v41 = j;
        while (2)
        {
          *v40++ = v39;
          *v41 = v28;
          v42 = *v17;
          v43 = *a3;
          if (*a3)
            v44 = v42 == v43;
          else
            v44 = 0;
          v45 = v44;
          v46 = v44 || *v17 == 0;
          while (2)
          {
            v28 = *v40;
            v47 = **v40;
            if (!v47)
            {
              if (v46)
                goto LABEL_111;
LABEL_110:
              ++v40;
              continue;
            }
            break;
          }
          if (!v42 || v47 != v42)
          {
            if (v43 && v47 == v43)
              goto LABEL_110;
            v48 = v47 >= v42 ? 1 : v45;
            if (v42 && (v48 & 1) == 0)
              goto LABEL_110;
          }
          while (1)
          {
LABEL_111:
            while (1)
            {
              v49 = *--v41;
              v39 = v49;
              v50 = *v49;
              if (*v49)
                break;
              if (!v46)
                goto LABEL_123;
            }
            if (!v42 || v50 != v42)
            {
              if (v43 && v50 == v43)
                break;
              v51 = v50 >= v42 ? 1 : v45;
              if (v42 && !v51)
                break;
            }
          }
LABEL_123:
          if (v40 < v41)
            continue;
          break;
        }
        v31 = v40 - 1;
LABEL_125:
        if (v31 != v9)
          *v9 = *v31;
        *v31 = v17;
        if (v32 < (unint64_t)j)
        {
LABEL_130:
          result = sub_20BEE0674(v9, v31, a3, a4, a5 & 1);
          a5 = 0;
          i = v31 + 1;
          continue;
        }
        v52 = sub_20BEE190C(v9, v31, a3);
        i = v31 + 1;
        result = sub_20BEE190C(v31 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v52)
            continue;
          goto LABEL_130;
        }
        a2 = v31;
        if (!v52)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t **sub_20BEE14D0(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4, unint64_t **a5, uint64_t *a6)
{
  unint64_t **result;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  BOOL v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  BOOL v37;
  BOOL v38;

  result = sub_20BEE1B98(a1, a2, a3, a4, a6);
  v13 = *a4;
  v14 = **a5;
  v15 = **a4;
  if (!v14)
  {
    if (!v15 || *a6 && v15 == *a6)
      return result;
LABEL_21:
    *a4 = *a5;
    *a5 = v13;
    v20 = *a3;
    v21 = **a4;
    v22 = **a3;
    if (v21)
    {
      if (v22)
        v23 = v21 == v22;
      else
        v23 = 0;
      if (v23)
        return result;
      v24 = *a6;
      if (!*a6 || v21 != v24)
      {
        if (!v22)
          return result;
        v25 = v24 && v22 == v24;
        v26 = v25;
        if (v21 >= v22 || v26)
          return result;
      }
    }
    else if (!v22 || *a6 && v22 == *a6)
    {
      return result;
    }
    *a3 = *a4;
    *a4 = v20;
    v27 = *a2;
    v28 = **a3;
    v29 = **a2;
    if (v28)
    {
      if (v29 && v28 == v29)
        return result;
      v30 = *a6;
      if (!*a6 || v28 != v30)
      {
        if (!v29)
          return result;
        v31 = v30 && v29 == v30;
        v32 = v31;
        if (v28 >= v29 || v32)
          return result;
      }
    }
    else if (!v29 || *a6 && v29 == *a6)
    {
      return result;
    }
    *a2 = *a3;
    *a3 = v27;
    v33 = *a1;
    v34 = **a2;
    v35 = **a1;
    if (v34)
    {
      if (v35 && v34 == v35)
        return result;
      v36 = *a6;
      if (!*a6 || v34 != v36)
      {
        if (!v35)
          return result;
        v37 = v36 && v35 == v36;
        v38 = v37;
        if (v34 >= v35 || v38)
          return result;
      }
    }
    else if (!v35 || *a6 && v35 == *a6)
    {
      return result;
    }
    *a1 = *a2;
    *a2 = v33;
    return result;
  }
  if (v15)
    v16 = v14 == v15;
  else
    v16 = 0;
  if (!v16)
  {
    v17 = *a6;
    if (*a6)
    {
      if (v14 == v17)
        goto LABEL_21;
    }
    if (v15)
    {
      v18 = v17 && v15 == v17;
      v19 = v18;
      if (v14 < v15 && !v19)
        goto LABEL_21;
    }
  }
  return result;
}

unint64_t **sub_20BEE16C8(unint64_t **result, unint64_t **a2, unint64_t **a3, uint64_t *a4)
{
  unint64_t *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  char v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  BOOL v29;
  char v30;

  v4 = *a2;
  v5 = *result;
  v6 = **a2;
  v7 = **result;
  if (!v6)
  {
    if (!v7)
    {
      v12 = *a3;
      v13 = **a3;
      if (!v13)
        return result;
      v17 = *a4;
      if (*a4 && v13 == v17)
        goto LABEL_45;
      if (!v17)
        return result;
      goto LABEL_44;
    }
    v15 = *a4;
    v12 = *a3;
    v13 = **a3;
    if (*a4)
      v16 = v7 == v15;
    else
      v16 = 0;
    if (v16)
    {
      if (!v13)
        return result;
      if (v13 == v7)
        goto LABEL_45;
      goto LABEL_44;
    }
    if (!v13)
      goto LABEL_77;
    if (v15 && v13 == v15)
      goto LABEL_94;
    if (!v15)
      goto LABEL_77;
LABEL_73:
    if (v13 < v6)
    {
LABEL_94:
      *result = v12;
LABEL_99:
      *a3 = v5;
      return result;
    }
    goto LABEL_77;
  }
  if (v7)
    v8 = v6 == v7;
  else
    v8 = 0;
  if (v8)
    goto LABEL_16;
  v9 = *a4;
  if (*a4)
    v10 = v6 == v9;
  else
    v10 = 0;
  v11 = v10;
  if (!v10)
  {
    if (v7)
    {
      if (v9 && v7 == v9)
        goto LABEL_16;
    }
    else if (!v9)
    {
LABEL_16:
      v12 = *a3;
      v13 = **a3;
      if (v13)
      {
LABEL_17:
        if (v13 == v6)
          return result;
        v14 = *a4;
        if (*a4 && v13 == v14)
          goto LABEL_45;
        if (v14 && v6 == v14)
          return result;
LABEL_44:
        if (v13 >= v6)
          return result;
        goto LABEL_45;
      }
      v9 = *a4;
LABEL_34:
      if (v9 && v6 == v9)
        return result;
LABEL_45:
      *a2 = v12;
      *a3 = v4;
      v18 = *result;
      v19 = **a2;
      v20 = **result;
      if (v19)
      {
        if (v20)
          v21 = v19 == v20;
        else
          v21 = 0;
        if (v21)
          return result;
        v22 = *a4;
        if (!*a4 || v19 != v22)
        {
          if (!v20)
            return result;
          v23 = v22 && v20 == v22;
          v24 = v23;
          if (v19 >= v20 || v24)
            return result;
        }
      }
      else if (!v20 || *a4 && v20 == *a4)
      {
        return result;
      }
      *result = *a2;
      *a2 = v18;
      return result;
    }
    if (v6 >= v7)
    {
      v12 = *a3;
      v13 = **a3;
      if (v13)
        goto LABEL_17;
      goto LABEL_34;
    }
  }
  v12 = *a3;
  v13 = **a3;
  if (!v13)
  {
    if (!v9 || v6 != v9)
      goto LABEL_94;
    goto LABEL_77;
  }
  if (v13 != v6)
  {
    if (v9 && v13 == v9)
      goto LABEL_94;
    if ((v11 & 1) == 0)
      goto LABEL_73;
  }
LABEL_77:
  *result = v4;
  *a2 = v5;
  v25 = **a3;
  v26 = *v5;
  if (!v25)
  {
    if (!v26 || *a4 && v26 == *a4)
      return result;
    goto LABEL_98;
  }
  if (v26)
    v27 = v25 == v26;
  else
    v27 = 0;
  if (!v27)
  {
    if ((v28 = *a4) != 0 && v25 == v28
      || v26 && (v28 ? (v29 = v26 == v28) : (v29 = 0), !v29 ? (v30 = 0) : (v30 = 1), v25 < v26 && (v30 & 1) == 0))
    {
LABEL_98:
      *a2 = *a3;
      goto LABEL_99;
    }
  }
  return result;
}

BOOL sub_20BEE190C(unint64_t **a1, unint64_t **a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  unint64_t **v16;
  unint64_t **v17;
  uint64_t v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  BOOL v26;
  BOOL v27;
  unint64_t **v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  char v38;
  BOOL v39;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      v10 = *v8;
      v11 = **a1;
      if (!*v8)
      {
        if (!v11 || *a3 && v11 == *a3)
          return result;
LABEL_86:
        *a1 = v8;
        *(a2 - 1) = v9;
        return result;
      }
      if (v11)
        v12 = v10 == v11;
      else
        v12 = 0;
      if (!v12)
      {
        v13 = *a3;
        if (*a3)
        {
          if (v10 == v13)
            goto LABEL_86;
        }
        if (v11)
        {
          v14 = v13 && v11 == v13;
          v15 = v14;
          if (v10 < v11 && !v15)
            goto LABEL_86;
        }
      }
      return result;
    case 3:
      sub_20BEE16C8(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_20BEE1B98(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_20BEE14D0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v16 = a1 + 2;
      sub_20BEE16C8(a1, a1 + 1, a1 + 2, a3);
      v17 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v18 = 0;
      v19 = 0;
      break;
  }
LABEL_21:
  v20 = *v17;
  v21 = **v17;
  v22 = **v16;
  if (v21)
  {
    if (v22)
      v23 = v21 == v22;
    else
      v23 = 0;
    if (v23)
      goto LABEL_75;
    v24 = *a3;
    if (!*a3 || v21 != v24)
    {
      if (!v22)
        goto LABEL_75;
      v26 = v24 && v22 == v24;
      v27 = v26;
      if (v21 >= v22 || v27)
        goto LABEL_75;
    }
  }
  else
  {
    if (!v22)
      goto LABEL_75;
    if (*a3 && v22 == *a3)
      goto LABEL_75;
  }
  *v17 = *v16;
  v29 = a1;
  if (v16 == a1)
    goto LABEL_74;
  v30 = v18;
  while (1)
  {
    v31 = *(unint64_t **)((char *)a1 + v30 + 8);
    v32 = *v20;
    v33 = *v31;
    if (*v20)
    {
      if (v33)
        v34 = v32 == v33;
      else
        v34 = 0;
      if (v34
        || ((v35 = *a3) != 0 ? (v36 = v32 == v35) : (v36 = 0),
            !v36
         && (!v33 || (v35 ? (v37 = v33 == v35) : (v37 = 0), !v37 ? (v38 = 0) : (v38 = 1), v32 >= v33 || (v38 & 1) != 0))))
      {
LABEL_73:
        v29 = v16;
        goto LABEL_74;
      }
    }
    else
    {
      if (!v33)
        goto LABEL_73;
      if (*a3)
        v39 = v33 == *a3;
      else
        v39 = 0;
      if (v39)
      {
        v29 = (unint64_t **)((char *)a1 + v30 + 16);
LABEL_74:
        *v29 = v20;
        if (++v19 == 8)
          return v17 + 1 == a2;
LABEL_75:
        v16 = v17;
        v18 += 8;
        if (++v17 == a2)
          return 1;
        goto LABEL_21;
      }
    }
    --v16;
    *(unint64_t **)((char *)a1 + v30 + 16) = v31;
    v30 -= 8;
    if (v30 == -16)
    {
      v29 = a1;
      goto LABEL_74;
    }
  }
}

unint64_t **sub_20BEE1B98(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4, uint64_t *a5)
{
  unint64_t **result;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  BOOL v16;
  BOOL v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  BOOL v23;
  BOOL v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;

  result = sub_20BEE16C8(a1, a2, a3, a5);
  v11 = *a3;
  v12 = **a4;
  v13 = **a3;
  if (!v12)
  {
    if (!v13 || *a5 && v13 == *a5)
      return result;
LABEL_21:
    *a3 = *a4;
    *a4 = v11;
    v18 = *a2;
    v19 = **a3;
    v20 = **a2;
    if (v19)
    {
      if (v20)
        v21 = v19 == v20;
      else
        v21 = 0;
      if (v21)
        return result;
      v22 = *a5;
      if (!*a5 || v19 != v22)
      {
        if (!v20)
          return result;
        v23 = v22 && v20 == v22;
        v24 = v23;
        if (v19 >= v20 || v24)
          return result;
      }
    }
    else if (!v20 || *a5 && v20 == *a5)
    {
      return result;
    }
    *a2 = *a3;
    *a3 = v18;
    v25 = *a1;
    v26 = **a2;
    v27 = **a1;
    if (v26)
    {
      if (v27 && v26 == v27)
        return result;
      v28 = *a5;
      if (!*a5 || v26 != v28)
      {
        if (!v27)
          return result;
        v29 = v28 && v27 == v28;
        v30 = v29;
        if (v26 >= v27 || v30)
          return result;
      }
    }
    else if (!v27 || *a5 && v27 == *a5)
    {
      return result;
    }
    *a1 = *a2;
    *a2 = v25;
    return result;
  }
  if (v13)
    v14 = v12 == v13;
  else
    v14 = 0;
  if (!v14)
  {
    v15 = *a5;
    if (*a5)
    {
      if (v12 == v15)
        goto LABEL_21;
    }
    if (v13)
    {
      v16 = v15 && v13 == v15;
      v17 = v16;
      if (v12 < v13 && !v17)
        goto LABEL_21;
    }
  }
  return result;
}

void sub_20BEE1D20(void **a1)
{
  operator delete(*a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSetenv(char *a1, char *a2)
{
  char *v3;
  char *v4;
  char *v5;
  _BOOL8 v6;
  char *v7;
  void **v8;
  void *v10[2];
  uint64_t v11;
  const char *v12;
  char v13;
  void *__p[2];
  char v15;

  v3 = a1;
  if (a1[23] >= 0)
    v4 = a1;
  else
    v4 = *(char **)a1;
  sub_20BDDC0E4(v10, v4);
  if (a2[23] >= 0)
    v5 = a2;
  else
    v5 = *(char **)a2;
  sub_20BDDC0E4(__p, v5);
  v6 = pxrInternal__aapl__pxrReserved__::ArchSetEnv((const char *)v10, (const char *)__p, 1);
  if (v15 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v11) < 0)
  {
    operator delete(v10[0]);
    if (v6)
      return v6;
  }
  else if (v6)
  {
    return v6;
  }
  v10[0] = "tf/setenv.cpp";
  v10[1] = "TfSetenv";
  v11 = 50;
  v12 = "BOOL pxrInternal__aapl__pxrReserved__::TfSetenv(const std::string &, const std::string &)";
  v13 = 0;
  if (v3[23] < 0)
    v3 = *(char **)v3;
  pxrInternal__aapl__pxrReserved__::ArchStrerror(__p);
  if (v15 >= 0)
    v8 = __p;
  else
    v8 = (void **)__p[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v10, (pxrInternal__aapl__pxrReserved__ *)"Error setting '%s': %s", v7, v3, v8);
  if (v15 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_20BEE1E44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::TfUnsetenv(char *a1)
{
  char *v1;
  char *v2;
  _BOOL8 v3;
  _BOOL8 v4;
  char *v5;
  void **v6;
  void *v8[2];
  char v9;
  void *__p[2];
  uint64_t v11;
  const char *v12;
  char v13;

  v1 = a1;
  if (a1[23] >= 0)
    v2 = a1;
  else
    v2 = *(char **)a1;
  sub_20BDDC0E4(__p, v2);
  v3 = pxrInternal__aapl__pxrReserved__::ArchRemoveEnv((const char *)__p);
  v4 = v3;
  if (SHIBYTE(v11) < 0)
  {
    operator delete(__p[0]);
    if (v4)
      return v4;
  }
  else if (v3)
  {
    return v4;
  }
  __p[0] = "tf/setenv.cpp";
  __p[1] = "TfUnsetenv";
  v11 = 67;
  v12 = "BOOL pxrInternal__aapl__pxrReserved__::TfUnsetenv(const std::string &)";
  v13 = 0;
  if (v1[23] < 0)
    v1 = *(char **)v1;
  pxrInternal__aapl__pxrReserved__::ArchStrerror(v8);
  if (v9 >= 0)
    v6 = v8;
  else
    v6 = (void **)v8[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)__p, (pxrInternal__aapl__pxrReserved__ *)"Error unsetting '%s': %s", v5, v1, v6);
  if (v9 < 0)
    operator delete(v8[0]);
  return v4;
}

void sub_20BEE1F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *pxrInternal__aapl__pxrReserved__::TfSpinMutex::_AcquireContended(unsigned __int8 *this)
{
  unsigned __int8 *v1;
  unsigned __int8 v2;
  int v3;
  unsigned __int8 v4;
  unsigned __int8 v5;

  v1 = this;
  do
    v2 = __ldaxr(this);
  while (__stxr(1u, this));
  if ((v2 & 1) != 0)
  {
    v3 = 0;
    while (1)
    {
      __yield();
      do
        v4 = __ldaxr(this);
      while (__stxr(1u, this));
      if ((v4 & 1) == 0)
        break;
      if (++v3 == 32)
      {
        do
        {
          this = (unsigned __int8 *)sched_yield();
          do
            v5 = __ldaxr(v1);
          while (__stxr(1u, v1));
        }
        while ((v5 & 1) != 0);
        return this;
      }
    }
  }
  return this;
}

unsigned int *pxrInternal__aapl__pxrReserved__::TfSpinRWMutex::_WaitForWriter(unsigned int *this)
{
  char v1;
  unsigned int *v2;
  int v3;
  char v4;
  char v5;

  v1 = atomic_load(this);
  if ((v1 & 1) != 0)
  {
    v2 = this;
    v3 = 32;
    while (1)
    {
      __yield();
      v4 = atomic_load(this);
      if ((v4 & 1) == 0)
        break;
      if (!--v3)
      {
        do
        {
          this = (unsigned int *)sched_yield();
          v5 = atomic_load(v2);
        }
        while ((v5 & 1) != 0);
        return this;
      }
    }
  }
  return this;
}

unsigned int *pxrInternal__aapl__pxrReserved__::TfSpinRWMutex::_WaitForReaders(unsigned int *this)
{
  unsigned int v1;
  unsigned int *v2;
  int v3;
  unsigned int v4;
  unsigned int v5;

  v1 = atomic_load(this);
  if (v1 != 1)
  {
    v2 = this;
    v3 = 32;
    while (1)
    {
      __yield();
      v4 = atomic_load(this);
      if (v4 == 1)
        break;
      if (!--v3)
      {
        do
        {
          this = (unsigned int *)sched_yield();
          v5 = atomic_load(v2);
        }
        while (v5 != 1);
        return this;
      }
    }
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfPrintStackTrace(FILE *a1, uint64_t a2)
{
  FILE *v4;
  const char *p_p;
  void *__p;
  char v8;
  _QWORD v9[11];
  char v10;
  uint64_t v11;

  sub_20BDDE5E0((uint64_t)v9);
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(v9, a2);
  if (a1)
    v4 = a1;
  else
    v4 = (FILE *)*MEMORY[0x24BDAC8D8];
  std::stringbuf::str();
  if (v8 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  fputs(p_p, v4);
  if (v8 < 0)
    operator delete(__p);
  fflush(v4);
  v9[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v9[1] = MEMORY[0x24BEDB848] + 16;
  if (v10 < 0)
    operator delete((void *)v9[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v11);
}

void sub_20BEE21C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetStackTrace(pxrInternal__aapl__pxrReserved__ *this)
{
  void *__p[2];
  uint64_t v3;
  _QWORD v4[11];
  char v5;
  uint64_t v6;

  sub_20BDDE5E0((uint64_t)v4);
  __p[0] = 0;
  __p[1] = 0;
  v3 = 0;
  pxrInternal__aapl__pxrReserved__::ArchPrintStackTrace(v4, (uint64_t)__p);
  if (SHIBYTE(v3) < 0)
    operator delete(__p[0]);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v4[1] = MEMORY[0x24BEDB848] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v6);
}

void sub_20BEE22A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_20BDDE6CC((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfLogStackTrace(char *a1, int a2)
{
  const char *ProgramNameForErrors;
  const char *v5;
  char *v6;
  int TmpFile;
  FILE *v8;
  FILE *v9;
  const char *v10;
  std::string *v11;
  const char *v12;
  pxrInternal__aapl__pxrReserved__ *v13;
  const char *v14;
  int *v15;
  FILE **v16;
  std::string v17;
  void *__p;
  char v19;
  std::string __str;

  memset(&v17, 0, sizeof(v17));
  memset(&__str, 0, sizeof(__str));
  ProgramNameForErrors = pxrInternal__aapl__pxrReserved__::ArchGetProgramNameForErrors((pxrInternal__aapl__pxrReserved__ *)a1);
  pxrInternal__aapl__pxrReserved__::ArchStringPrintf((pxrInternal__aapl__pxrReserved__ *)"st_%s", v5, v6, ProgramNameForErrors);
  TmpFile = pxrInternal__aapl__pxrReserved__::ArchMakeTmpFile((const char *)&__p, (char *)&__str);
  if (v19 < 0)
    operator delete(__p);
  std::string::operator=(&v17, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (TmpFile == -1)
  {
    v16 = (FILE **)MEMORY[0x24BDAC8D8];
    fwrite("Error writing to stack trace file. Printing stack to stderr\n", 0x3CuLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
    pxrInternal__aapl__pxrReserved__::TfPrintStackTrace(*v16, (uint64_t)a1);
  }
  else
  {
    v8 = fdopen(TmpFile, "w");
    v9 = (FILE *)*MEMORY[0x24BDAC8D8];
    v10 = pxrInternal__aapl__pxrReserved__::ArchGetProgramNameForErrors((pxrInternal__aapl__pxrReserved__ *)v8);
    v11 = &v17;
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = (std::string *)v17.__r_.__value_.__r.__words[0];
    if (a1[23] >= 0)
      v12 = a1;
    else
      v12 = *(const char **)a1;
    fprintf(v9, "Writing stack for %s to %s because of %s.\n", v10, (const char *)v11, v12);
    pxrInternal__aapl__pxrReserved__::TfPrintStackTrace(v8, (uint64_t)a1);
    v13 = (pxrInternal__aapl__pxrReserved__ *)fclose(v8);
    if (a2 && pxrInternal__aapl__pxrReserved__::ArchGetFatalStackLogging(v13))
    {
      if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = (int *)&v17;
      else
        v15 = (int *)v17.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::ArchLogSessionInfo(v15, v14);
    }
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
}

void sub_20BEE2448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfLogCrash(char *a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  const char *ProgramNameForErrors;
  const char *v9;
  char *v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  const std::string::value_type *v14;
  void *v15;
  const char *v16;
  std::string *v17;
  void *__p[2];
  unsigned __int8 v19;
  std::string v20;

  ProgramNameForErrors = pxrInternal__aapl__pxrReserved__::ArchGetProgramNameForErrors((pxrInternal__aapl__pxrReserved__ *)a1);
  if (a1[23] >= 0)
    v11 = a1;
  else
    v11 = *(char **)a1;
  if (*((char *)a2 + 23) >= 0)
    v12 = a2;
  else
    v12 = (uint64_t *)*a2;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%s crashed. %s: %s\nin %s at line %zu of %s", v9, v10, ProgramNameForErrors, v11, v12, a4[1], a4[2], *a4);
  v13 = *(unsigned __int8 *)(a3 + 23);
  if ((v13 & 0x80u) != 0)
    v13 = *(_QWORD *)(a3 + 8);
  if (v13)
  {
    std::operator+<char>();
    v14 = (v19 & 0x80u) == 0 ? (const std::string::value_type *)__p : (const std::string::value_type *)__p[0];
    v15 = (v19 & 0x80u) == 0 ? (void *)v19 : __p[1];
    std::string::append(&v20, v14, (std::string::size_type)v15);
    if ((char)v19 < 0)
      operator delete(__p[0]);
  }
  pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::Tf_ScopeDescriptionStackReportLock((pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *)__p);
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v20;
  else
    v17 = (std::string *)v20.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::ArchLogFatalProcessState(0, (const char *)v17, (const char *)__p[0], v16);
  pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock::~Tf_ScopeDescriptionStackReportLock((pxrInternal__aapl__pxrReserved__::Tf_ScopeDescriptionStackReportLock *)__p);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_20BEE25C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 - 33) < 0)
    operator delete(*(void **)(v20 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfGetAppLaunchTime(pxrInternal__aapl__pxrReserved__ *this)
{
  uint64_t AppLaunchTime;
  _QWORD v3[4];
  char v4;
  int v5;

  AppLaunchTime = pxrInternal__aapl__pxrReserved__::ArchGetAppLaunchTime(this);
  if (!AppLaunchTime)
  {
    v3[0] = "tf/stackTrace.cpp";
    v3[1] = "TfGetAppLaunchTime";
    v3[2] = 154;
    v3[3] = "time_t pxrInternal__aapl__pxrReserved__::TfGetAppLaunchTime()";
    v4 = 0;
    v5 = 3;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"Could not determine application launch time.");
  }
  return AppLaunchTime;
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_GetEmptyHashMapBucketCount(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2549851D8);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2549851D8))
  {
    *(_OWORD *)((char *)&word_2549851AF + 1) = 0u;
    unk_2549851C0 = 0u;
    dword_2549851D0 = 1065353216;
    sub_20BDEC6E0((uint64_t)&word_2549851AF + 1, 0);
    __cxa_atexit((void (*)(void *))sub_20BEE2728, (char *)&word_2549851AF + 1, &dword_20BDBC000);
    __cxa_guard_release(&qword_2549851D8);
  }
  return qword_2549851B8;
}

void sub_20BEE2704(_Unwind_Exception *a1)
{
  sub_20BEB3FA4((uint64_t)&word_2549851AF + 1);
  __cxa_guard_abort(&qword_2549851D8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Tf_GetEmptyHashSetBucketCount(pxrInternal__aapl__pxrReserved__ *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254985208);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254985208))
  {
    unk_2549851E0 = 0u;
    *(_OWORD *)algn_2549851F0 = 0u;
    dword_254985200 = 1065353216;
    sub_20BDEC6E0((uint64_t)&unk_2549851E0, 0);
    __cxa_atexit((void (*)(void *))sub_20BEE27DC, &unk_2549851E0, &dword_20BDBC000);
    __cxa_guard_release(&qword_254985208);
  }
  return qword_2549851E8;
}

void sub_20BEE27B8(_Unwind_Exception *a1)
{
  sub_20BEB3FA4((uint64_t)&unk_2549851E0);
  __cxa_guard_abort(&qword_254985208);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(uint64_t a1, pxrInternal__aapl__pxrReserved__ **a2)
{
  _QWORD *v2;

  pxrInternal__aapl__pxrReserved__::ArchTicksToSeconds(*a2);
  v2 = (_QWORD *)std::ostream::operator<<();
  return sub_20BDDC1C8(v2, (uint64_t)" seconds", 8);
}

void pxrInternal__aapl__pxrReserved__::TfVStringPrintf(char *a1, const char *a2, char *a3)
{
  if (a1[23] < 0)
    a1 = *(char **)a1;
  pxrInternal__aapl__pxrReserved__::ArchVStringPrintf((pxrInternal__aapl__pxrReserved__ *)a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::TfStringPrintf(pxrInternal__aapl__pxrReserved__ *this, const char *a2, char *a3, ...)
{
  va_list va;

  va_start(va, a3);
  pxrInternal__aapl__pxrReserved__::ArchVStringPrintf(this, va, a3);
}

double pxrInternal__aapl__pxrReserved__::TfStringToDouble(pxrInternal__aapl__pxrReserved__ *this, const char *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  __int16 v9;

  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  v7 = "inf";
  v8 = "nan";
  v9 = 0;
  return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringToDouble((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter *)&v4, (char *)this, (int)a2, &v3);
}

{
  int v3;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const char *v10;
  __int16 v11;

  v3 = strlen((const char *)this);
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = 0;
  v9 = "inf";
  v10 = "nan";
  v11 = 0;
  return pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter::StringToDouble((pxrInternal__aapl__pxrReserved__::pxr_double_conversion::StringToDoubleConverter *)&v6, (char *)this, v3, &v5);
}

double pxrInternal__aapl__pxrReserved__::TfStringToDouble(char *a1, const char *a2)
{
  if (a1[23] < 0)
    a1 = *(char **)a1;
  return pxrInternal__aapl__pxrReserved__::TfStringToDouble((pxrInternal__aapl__pxrReserved__ *)a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringToLong(pxrInternal__aapl__pxrReserved__ *this, char *a2, BOOL *a3)
{
  int v4;
  int v5;
  uint64_t result;
  unsigned __int8 *v7;
  uint64_t v8;
  int64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v4 = *(unsigned __int8 *)this;
  if (v4 == 45)
  {
    v5 = *((unsigned __int8 *)this + 1);
    if ((v5 - 48) <= 9)
    {
      result = 0;
      v7 = (unsigned __int8 *)this + 2;
      while (1)
      {
        v8 = (v5 - 48);
        v9 = v8 <= 8 ? 0xF333333333333334 : 0xF333333333333335;
        if (result < v9)
          break;
        result = 10 * result - v8;
        v10 = *v7++;
        v5 = v10;
        if ((v10 - 48) >= 0xA)
          return result;
      }
      result = 0x8000000000000000;
      if (!a2)
        return result;
LABEL_22:
      *a2 = 1;
      return result;
    }
    return 0;
  }
  if ((v4 - 48) > 9)
    return 0;
  result = 0;
  v11 = (unsigned __int8 *)this + 1;
  while (1)
  {
    v12 = (v4 - 48);
    v13 = v12 > 7 ? 0xCCCCCCCCCCCCCCBLL : 0xCCCCCCCCCCCCCCCLL;
    if (result > v13)
      break;
    result = v12 + 10 * result;
    v14 = *v11++;
    v4 = v14;
    if ((v14 - 48) >= 0xA)
      return result;
  }
  result = 0x7FFFFFFFFFFFFFFFLL;
  if (a2)
    goto LABEL_22;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringToLong(char *a1, char *a2, BOOL *a3)
{
  if (a1[23] < 0)
    a1 = *(char **)a1;
  return pxrInternal__aapl__pxrReserved__::TfStringToLong((pxrInternal__aapl__pxrReserved__ *)a1, a2, a3);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStringToULong(pxrInternal__aapl__pxrReserved__ *this, char *a2, BOOL *a3)
{
  int v3;
  unint64_t result;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v3 = *(unsigned __int8 *)this;
  if ((v3 - 48) > 9)
    return 0;
  result = 0;
  v6 = (unsigned __int8 *)this + 1;
  while (1)
  {
    v7 = (v3 - 48);
    v8 = v7 > 5 ? 0x1999999999999998 : 0x1999999999999999;
    if (result > v8)
      break;
    result = v7 + 10 * result;
    v9 = *v6++;
    v3 = v9;
    if ((v9 - 48) >= 0xA)
      return result;
  }
  if (a2)
    *a2 = 1;
  return -1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStringToULong(char *a1, char *a2, BOOL *a3)
{
  if (a1[23] < 0)
    a1 = *(char **)a1;
  return pxrInternal__aapl__pxrReserved__::TfStringToULong((pxrInternal__aapl__pxrReserved__ *)a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringToInt64(pxrInternal__aapl__pxrReserved__ *this, char *a2, BOOL *a3)
{
  int v4;
  int v5;
  uint64_t result;
  unsigned __int8 *v7;
  uint64_t v8;
  int64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v4 = *(unsigned __int8 *)this;
  if (v4 == 45)
  {
    v5 = *((unsigned __int8 *)this + 1);
    if ((v5 - 48) <= 9)
    {
      result = 0;
      v7 = (unsigned __int8 *)this + 2;
      while (1)
      {
        v8 = (v5 - 48);
        v9 = v8 <= 8 ? 0xF333333333333334 : 0xF333333333333335;
        if (result < v9)
          break;
        result = 10 * result - v8;
        v10 = *v7++;
        v5 = v10;
        if ((v10 - 48) >= 0xA)
          return result;
      }
      result = 0x8000000000000000;
      if (!a2)
        return result;
LABEL_22:
      *a2 = 1;
      return result;
    }
    return 0;
  }
  if ((v4 - 48) > 9)
    return 0;
  result = 0;
  v11 = (unsigned __int8 *)this + 1;
  while (1)
  {
    v12 = (v4 - 48);
    v13 = v12 > 7 ? 0xCCCCCCCCCCCCCCBLL : 0xCCCCCCCCCCCCCCCLL;
    if (result > v13)
      break;
    result = v12 + 10 * result;
    v14 = *v11++;
    v4 = v14;
    if ((v14 - 48) >= 0xA)
      return result;
  }
  result = 0x7FFFFFFFFFFFFFFFLL;
  if (a2)
    goto LABEL_22;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::TfStringToInt64(char *a1, char *a2, BOOL *a3)
{
  if (a1[23] < 0)
    a1 = *(char **)a1;
  return pxrInternal__aapl__pxrReserved__::TfStringToInt64((pxrInternal__aapl__pxrReserved__ *)a1, a2, a3);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStringToUInt64(pxrInternal__aapl__pxrReserved__ *this, char *a2, BOOL *a3)
{
  int v3;
  unint64_t result;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  int v9;

  v3 = *(unsigned __int8 *)this;
  if ((v3 - 48) > 9)
    return 0;
  result = 0;
  v6 = (unsigned __int8 *)this + 1;
  while (1)
  {
    v7 = (v3 - 48);
    v8 = v7 > 5 ? 0x1999999999999998 : 0x1999999999999999;
    if (result > v8)
      break;
    result = v7 + 10 * result;
    v9 = *v6++;
    v3 = v9;
    if ((v9 - 48) >= 0xA)
      return result;
  }
  if (a2)
    *a2 = 1;
  return -1;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfStringToUInt64(char *a1, char *a2, BOOL *a3)
{
  if (a1[23] < 0)
    a1 = *(char **)a1;
  return pxrInternal__aapl__pxrReserved__::TfStringToUInt64((pxrInternal__aapl__pxrReserved__ *)a1, a2, a3);
}

BOOL pxrInternal__aapl__pxrReserved__::TfStringContains(char **a1, char *__s)
{
  char *v4;
  char *v5;
  int64_t v6;
  int64_t v7;
  char *v8;
  char *v9;
  char *v10;
  int v13;
  void *v14;
  char *v15;
  char *v16;

  v4 = (char *)*((unsigned __int8 *)a1 + 23);
  if ((char)v4 >= 0)
    v5 = (char *)a1;
  else
    v5 = *a1;
  v6 = strlen(__s);
  if (!v6)
    return 1;
  v7 = v6;
  if ((char)v4 >= 0)
    v8 = v4;
  else
    v8 = a1[1];
  v9 = &v8[(_QWORD)v5];
  if ((uint64_t)v8 >= v6)
  {
    v13 = *__s;
    v14 = v5;
    do
    {
      v15 = &v8[-v7];
      if (v15 == (char *)-1)
        break;
      v16 = (char *)memchr(v14, v13, (size_t)(v15 + 1));
      if (!v16)
        break;
      v10 = v16;
      if (!memcmp(v16, __s, v7))
        return v10 != v9 && v10 - v5 != -1;
      v14 = v10 + 1;
      v8 = (char *)(v9 - (v10 + 1));
    }
    while ((uint64_t)v8 >= v7);
  }
  v10 = v9;
  return v10 != v9 && v10 - v5 != -1;
}

BOOL pxrInternal__aapl__pxrReserved__::TfStringContains(char **a1, _QWORD *a2)
{
  unint64_t v2;
  char *v3;

  v2 = *a2 & 0xFFFFFFFFFFFFFFF8;
  if (v2)
  {
    v3 = (char *)(v2 + 16);
    if (*(char *)(v2 + 39) < 0)
      v3 = *(char **)v3;
  }
  else
  {
    v3 = "";
  }
  return pxrInternal__aapl__pxrReserved__::TfStringContains(a1, v3);
}

void pxrInternal__aapl__pxrReserved__::TfStringToLower(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4;
  uint64_t i;
  uint64_t *v6;
  std::string::value_type v7;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*((char *)a1 + 23) >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  std::string::reserve(a2, v4);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      if (*((char *)a1 + 23) >= 0)
        v6 = a1;
      else
        v6 = (uint64_t *)*a1;
      v7 = __tolower(*((char *)v6 + i));
      std::string::push_back(a2, v7);
    }
  }
}

void sub_20BEE2DA0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfStringToUpper(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4;
  uint64_t i;
  uint64_t *v6;
  std::string::value_type v7;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (*((char *)a1 + 23) >= 0)
    v4 = *((unsigned __int8 *)a1 + 23);
  else
    v4 = a1[1];
  std::string::reserve(a2, v4);
  if (v4)
  {
    for (i = 0; i != v4; ++i)
    {
      if (*((char *)a1 + 23) >= 0)
        v6 = a1;
      else
        v6 = (uint64_t *)*a1;
      v7 = __toupper(*((char *)v6 + i));
      std::string::push_back(a2, v7);
    }
  }
}

void sub_20BEE2E48(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::TfStringCapitalize@<X0>(void *result@<X0>, char *a2@<X8>)
{
  int v3;
  void *v4;
  unint64_t v5;
  char *v6;
  _BYTE *v7;

  v3 = *((char *)result + 23);
  if (v3 < 0)
  {
    v4 = *(void **)result;
    v5 = *((_QWORD *)result + 1);
    if (!v5)
      return sub_20BDDBFAC(a2, v4, 0);
    sub_20BDDBFAC(a2, v4, v5);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)result;
    *((_QWORD *)a2 + 2) = *((_QWORD *)result + 2);
    if (!v3)
      return result;
  }
  if (a2[23] >= 0)
    v6 = a2;
  else
    v6 = *(char **)a2;
  result = (void *)__toupper(*v6);
  if (a2[23] >= 0)
    v7 = a2;
  else
    v7 = *(_BYTE **)a2;
  *v7 = (_BYTE)result;
  return result;
}

void sub_20BEE2EEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::TfStringGetCommonPrefix@<X0>(char *a1@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;

  if ((char)a2[23] < 0)
    v5 = *((_QWORD *)a2 + 1);
  else
    v5 = a2[23];
  LODWORD(v6) = a1[23];
  if ((v6 & 0x80000000) != 0)
    v7 = *((_QWORD *)a1 + 1);
  else
    v7 = a1[23];
  if (v5 < v7)
  {
    v8 = *((_QWORD *)a2 + 2);
    v9 = *(_OWORD *)a2;
    v10 = *((_QWORD *)a1 + 2);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *((_QWORD *)a2 + 2) = v10;
    *(_OWORD *)a1 = v9;
    *((_QWORD *)a1 + 2) = v8;
    v6 = HIBYTE(v8);
  }
  if ((v6 & 0x80) != 0)
  {
    v12 = *(char **)a1;
    v11 = *((_QWORD *)a1 + 1);
  }
  else
  {
    v11 = v6;
    v12 = a1;
  }
  if ((char)a2[23] < 0)
  {
    a2 = *(unsigned __int8 **)a2;
    if (!v11)
      goto LABEL_20;
  }
  else if (!v11)
  {
    goto LABEL_20;
  }
  v13 = &v12[v11];
  while (*v12 == *a2)
  {
    ++v12;
    ++a2;
    if (!--v11)
    {
      v12 = v13;
      break;
    }
  }
LABEL_20:
  if ((v6 & 0x80) != 0)
    a1 = *(char **)a1;
  return sub_20BE93368(a3, a1, v12, v12 - a1);
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringGetSuffix@<X0>(const std::string *a1@<X0>, std::string::value_type a2@<W1>, std::string *a3@<X8>)
{
  std::string::size_type v5;
  char v7;

  v5 = std::string::rfind(a1, a2, 0xFFFFFFFFFFFFFFFFLL);
  if (v5 == -1)
    return (std::string *)sub_20BDDC0E4(a3, "");
  else
    return std::string::basic_string(a3, a1, v5 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v7);
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringGetBeforeSuffix@<X0>(uint64_t a1@<X0>, std::string::value_type a2@<W1>, std::string *a3@<X8>)
{
  std::string *result;
  char v6;

  result = (std::string *)std::string::rfind((const std::string *)a1, a2, 0xFFFFFFFFFFFFFFFFLL);
  if (result != (std::string *)-1)
    return std::string::basic_string(a3, (const std::string *)a1, 0, (std::string::size_type)result, (std::allocator<char> *)&v6);
  if (*(char *)(a1 + 23) < 0)
    return (std::string *)sub_20BDDBFAC(a3, *(void **)a1, *(_QWORD *)(a1 + 8));
  *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
  a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfGetBaseName(std::string *a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4;
  unsigned __int8 *v5;
  std::string::size_type size;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  int v12;
  std::string::size_type v13;
  unint64_t v14;
  std::string::size_type v15;
  std::string *v16;
  std::string __p;
  char v18;

  v4 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
  {
    v5 = (unsigned __int8 *)a1->__r_.__value_.__r.__words[0];
    size = a1->__r_.__value_.__l.__size_;
    if (!size)
    {
      v16 = a2;
      v14 = 0;
      goto LABEL_27;
    }
  }
  else
  {
    if (!*((_BYTE *)&a1->__r_.__value_.__s + 23))
    {
LABEL_24:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
      a2->__r_.__value_.__r.__words[2] = a1->__r_.__value_.__r.__words[2];
      return;
    }
    v5 = (unsigned __int8 *)a1;
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  v7 = &v5[size];
  v8 = v5;
  v9 = v7;
  do
  {
    v10 = v8;
    v11 = v8;
    while (1)
    {
      v12 = *v11++;
      if (v12 == 47)
        break;
      v10 = v11;
      if (v11 == v7)
      {
        v10 = v9;
        goto LABEL_11;
      }
    }
    v8 = v10 + 1;
    v9 = v10;
  }
  while (v11 != v7);
LABEL_11:
  if (v10 == v7)
    v13 = -1;
  else
    v13 = v10 - v5;
  v14 = a1->__r_.__value_.__l.__size_;
  if ((v4 & 0x80u) == 0)
    v15 = v4;
  else
    v15 = a1->__r_.__value_.__l.__size_;
  if (v13 != v15 - 1)
  {
    if (v13 != -1)
    {
      std::string::basic_string(a2, a1, v13 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
      return;
    }
    if ((v4 & 0x80) == 0)
      goto LABEL_24;
    v5 = (unsigned __int8 *)a1->__r_.__value_.__r.__words[0];
    v16 = a2;
LABEL_27:
    sub_20BDDBFAC(v16, v5, v14);
    return;
  }
  std::string::basic_string(&__p, a1, 0, v13, (std::allocator<char> *)&v18);
  pxrInternal__aapl__pxrReserved__::TfGetBaseName(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20BEE3214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::TfGetPathName@<X0>(std::string *__str@<X0>, std::string *a2@<X8>)
{
  std::string::size_type size;
  std::string *v3;
  unsigned __int8 *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  unsigned __int8 *v9;
  int v10;
  int64_t v11;
  char v13;

  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v3 = __str;
  else
    v3 = (std::string *)__str->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (!size)
    return (std::string *)sub_20BDDC0E4(a2, "");
  v5 = (unsigned __int8 *)v3 + size;
  v6 = v3;
  v7 = (std::string *)v5;
  do
  {
    v8 = v6;
    v9 = (unsigned __int8 *)v6;
    while (1)
    {
      v10 = *v9++;
      if (v10 == 47)
        break;
      v8 = (std::string *)v9;
      if (v9 == v5)
      {
        v8 = v7;
        goto LABEL_13;
      }
    }
    v6 = (std::string *)((char *)&v8->__r_.__value_.__l.__data_ + 1);
    v7 = v8;
  }
  while (v9 != v5);
LABEL_13:
  if (v8 == (std::string *)v5)
    return (std::string *)sub_20BDDC0E4(a2, "");
  v11 = (char *)v8 - (char *)v3;
  if (v11 == -1)
    return (std::string *)sub_20BDDC0E4(a2, "");
  else
    return std::string::basic_string(a2, __str, 0, v11 + 1, (std::allocator<char> *)&v13);
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringTrimRight@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6;
  const std::string *v7;
  std::string::size_type size;
  size_t v9;
  uint64_t v10;
  std::string::size_type v11;
  char v14;

  v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  v9 = strlen(__s);
  v10 = (uint64_t)&v7[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    v11 = size;
    if (!size)
      break;
    if (!v9)
      break;
  }
  while (memchr(__s, *(char *)(v10 + size--), v9));
  return std::string::basic_string(a3, a2, 0, v11, (std::allocator<char> *)&v14);
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringTrimLeft@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6;
  const std::string *v7;
  std::string::size_type size;
  std::string *result;
  const std::string *v10;
  size_t v11;
  char v12;

  v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  result = (std::string *)strlen(__s);
  if (size)
  {
    v10 = v7;
    v11 = (size_t)result;
    if (result)
    {
      while (1)
      {
        result = (std::string *)memchr(__s, v10->__r_.__value_.__s.__data_[0], v11);
        if (!result)
          break;
        v10 = (const std::string *)((char *)v10 + 1);
        if (!--size)
          goto LABEL_14;
      }
    }
    if ((char *)v10 - (char *)v7 != -1)
      return std::string::basic_string(a3, a2, (char *)v10 - (char *)v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
  }
LABEL_14:
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  return result;
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringTrim@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6;
  const std::string *v7;
  std::string::size_type size;
  std::string *result;
  size_t v10;
  const std::string *v11;
  std::string::size_type v12;
  std::string::size_type v13;
  std::string::size_type v14;
  std::string::size_type v15;
  void *v16;
  char v17;

  v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = a2;
  else
    v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  result = (std::string *)strlen(__s);
  if (!size)
    goto LABEL_19;
  v10 = (size_t)result;
  v11 = v7;
  if (result)
  {
    v12 = size;
    v11 = v7;
    while (1)
    {
      result = (std::string *)memchr(__s, v11->__r_.__value_.__s.__data_[0], v10);
      if (!result)
        break;
      v11 = (const std::string *)((char *)v11 + 1);
      if (!--v12)
        goto LABEL_19;
    }
  }
  v13 = (char *)v11 - (char *)v7;
  if (v13 == -1)
  {
LABEL_19:
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v14 = size - 1;
    do
    {
      v15 = v14;
      if (v14 == -1)
        break;
      if (!v10)
        break;
      v16 = memchr(__s, v7->__r_.__value_.__s.__data_[v14], v10);
      v14 = v15 - 1;
    }
    while (v16);
    return std::string::basic_string(a3, a2, v13, v15 - v13 + 1, (std::allocator<char> *)&v17);
  }
  return result;
}

char *pxrInternal__aapl__pxrReserved__::TfStringReplace@<X0>(char *result@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X2>, std::string *a4@<X8>)
{
  char *v4;
  std::string::size_type v6;
  signed __int8 v7;
  size_t v8;
  uint64_t v9;
  uint64_t v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  std::string::size_type v16;
  std::string::size_type v17;
  std::string::size_type size;
  std::string::size_type v19;
  BOOL v20;
  unsigned __int8 *v21;
  int64_t v22;
  char *v23;
  int64_t v24;
  int v25;
  int64_t v26;
  char *v27;
  std::string::size_type v28;
  int v29;
  const std::string::value_type *v30;
  std::string::size_type v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  BOOL v35;

  v4 = result;
  v6 = a2[23];
  v7 = v6;
  v8 = *((_QWORD *)a2 + 1);
  if ((v6 & 0x80u) == 0)
    v9 = a2[23];
  else
    v9 = *((_QWORD *)a2 + 1);
  if (!v9)
    goto LABEL_20;
  v12 = a3[23];
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)a3 + 1);
  if (v9 == v12)
  {
    if (v13 >= 0)
      v14 = a3;
    else
      v14 = *(unsigned __int8 **)a3;
    if (((char)v6 & 0x80000000) == 0)
    {
      if ((_BYTE)v6)
      {
        v15 = a2;
        v16 = v6;
        while (*v15 == *v14)
        {
          ++v15;
          ++v14;
          if (!--v16)
            goto LABEL_20;
        }
        goto LABEL_18;
      }
LABEL_20:
      if (v4[23] < 0)
        return (char *)sub_20BDDBFAC(a4, *(void **)v4, *((_QWORD *)v4 + 1));
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
      a4->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
      return result;
    }
    result = (char *)memcmp(*(const void **)a2, v14, v8);
    if (!(_DWORD)result)
      goto LABEL_20;
  }
LABEL_18:
  v34 = a3;
  if (v4[23] < 0)
  {
    result = (char *)sub_20BDDBFAC(a4, *(void **)v4, *((_QWORD *)v4 + 1));
    v6 = a2[23];
    v8 = *((_QWORD *)a2 + 1);
    v7 = a2[23];
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    a4->__r_.__value_.__r.__words[2] = *((_QWORD *)v4 + 2);
  }
  v17 = 0;
  size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v19 = (std::string::size_type)a4;
  else
    v19 = a4->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a4->__r_.__value_.__l.__size_;
  v20 = v7 < 0;
  v35 = v20;
  if (v7 >= 0)
    v21 = a2;
  else
    v21 = *(unsigned __int8 **)a2;
  if (v20)
    v22 = v8;
  else
    v22 = v6;
  while (!v22)
  {
LABEL_46:
    if (v17 != -1)
    {
      if (v35)
        v28 = v8;
      else
        v28 = v6;
      v29 = (char)v34[23];
      if (v29 >= 0)
        v30 = (const std::string::value_type *)v34;
      else
        v30 = *(const std::string::value_type **)v34;
      if (v29 >= 0)
        v31 = v34[23];
      else
        v31 = *((_QWORD *)v34 + 1);
      result = (char *)std::string::replace(a4, v17, v28, v30, v31);
      v32 = v34[23];
      if ((v32 & 0x80u) != 0)
        v32 = *((_QWORD *)v34 + 1);
      v17 += v32;
      size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) == 0)
        v19 = (std::string::size_type)a4;
      else
        v19 = a4->__r_.__value_.__r.__words[0];
      if ((size & 0x80u) != 0)
        size = a4->__r_.__value_.__l.__size_;
      v33 = (char)a2[23];
      v35 = v33 < 0;
      v8 = *((_QWORD *)a2 + 1);
      v6 = a2[23];
      v21 = v33 >= 0 ? a2 : *(unsigned __int8 **)a2;
      v22 = v33 >= 0 ? a2[23] : *((_QWORD *)a2 + 1);
      if (size >= v17)
        continue;
    }
    return result;
  }
  result = (char *)(v19 + v17);
  v23 = (char *)(v19 + size);
  v24 = size - v17;
  if (v24 >= v22)
  {
    v25 = (char)*v21;
    do
    {
      v26 = v24 - v22;
      if (v26 == -1)
        break;
      result = (char *)memchr(result, v25, v26 + 1);
      if (!result)
        break;
      v27 = result;
      result = (char *)memcmp(result, v21, v22);
      if (!(_DWORD)result)
      {
        if (v27 == v23)
          return result;
        v17 = (std::string::size_type)&v27[-v19];
        goto LABEL_46;
      }
      result = v27 + 1;
      v24 = v23 - (v27 + 1);
    }
    while (v24 >= v22);
  }
  return result;
}

void sub_20BEE37E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringJoin@<X0>(char *__s@<X1>, std::string **a2@<X0>, std::string *a3@<X8>)
{
  return sub_20BEE380C(__s, *a2, a2[1], a3);
}

std::string *sub_20BEE380C@<X0>(char *__s@<X2>, std::string *result@<X0>, std::string *a3@<X1>, std::string *a4@<X8>)
{
  std::string *v6;
  __int128 v7;
  uint64_t v9;
  unint64_t v10;
  std::string *v11;
  std::string::size_type size;
  size_t v13;
  int v14;
  const std::string::value_type *v15;
  std::string::size_type v16;
  std::string *i;
  int v18;
  const std::string::value_type *v19;
  std::string::size_type v20;

  if (result == a3)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v6 = result;
    if ((char *)a3 - (char *)result == 24)
    {
      if (SHIBYTE(result->__r_.__value_.__r.__words[2]) < 0)
      {
        return (std::string *)sub_20BDDBFAC(a4, result->__r_.__value_.__l.__data_, result->__r_.__value_.__l.__size_);
      }
      else
      {
        v7 = *(_OWORD *)&result->__r_.__value_.__l.__data_;
        a4->__r_.__value_.__r.__words[2] = result->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v7;
      }
    }
    else
    {
      v9 = 0;
      v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)a3 - (char *)result) >> 3);
      a4->__r_.__value_.__r.__words[0] = 0;
      a4->__r_.__value_.__l.__size_ = 0;
      a4->__r_.__value_.__r.__words[2] = 0;
      v11 = result;
      do
      {
        if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
          size = v11->__r_.__value_.__l.__size_;
        else
          size = HIBYTE(v11->__r_.__value_.__r.__words[2]);
        v9 += size;
        ++v11;
      }
      while (v11 != a3);
      v13 = strlen(__s);
      std::string::reserve(a4, v9 + v13 * (v10 - 1));
      v14 = SHIBYTE(v6->__r_.__value_.__r.__words[2]);
      if (v14 >= 0)
        v15 = (const std::string::value_type *)v6;
      else
        v15 = (const std::string::value_type *)v6->__r_.__value_.__r.__words[0];
      if (v14 >= 0)
        v16 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
      else
        v16 = v6->__r_.__value_.__l.__size_;
      result = std::string::append(a4, v15, v16);
      for (i = v6 + 1; i != a3; ++i)
      {
        std::string::append(a4, __s);
        v18 = SHIBYTE(i->__r_.__value_.__r.__words[2]);
        if (v18 >= 0)
          v19 = (const std::string::value_type *)i;
        else
          v19 = (const std::string::value_type *)i->__r_.__value_.__r.__words[0];
        if (v18 >= 0)
          v20 = HIBYTE(i->__r_.__value_.__r.__words[2]);
        else
          v20 = i->__r_.__value_.__l.__size_;
        result = std::string::append(a4, v19, v20);
      }
    }
  }
  return result;
}

void sub_20BEE3954(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *pxrInternal__aapl__pxrReserved__::TfStringJoin@<X0>(char *__s@<X1>, uint64_t a2@<X0>, std::string *a3@<X8>)
{
  return sub_20BEE3984(__s, *(std::string **)a2, (std::string *)(a2 + 8), a3);
}

std::string *sub_20BEE3984@<X0>(char *__s@<X2>, std::string *result@<X0>, std::string *a3@<X1>, std::string *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  size_t v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  _QWORD *v23;
  uint64_t v24;
  int v25;
  __int128 v26;

  if (result == a3)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    a4->__r_.__value_.__l.__size_ = 0;
    a4->__r_.__value_.__r.__words[2] = 0;
  }
  else
  {
    v7 = (uint64_t)result;
    v8 = 0;
    v9 = (uint64_t)result;
    do
    {
      v10 = v8;
      v11 = *(std::string **)(v9 + 8);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (std::string *)v11->__r_.__value_.__r.__words[0];
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = *(std::string **)(v9 + 16);
          v13 = v12->__r_.__value_.__r.__words[0] == v9;
          v9 = (uint64_t)v12;
        }
        while (!v13);
      }
      v8 = v10 + 1;
      v9 = (uint64_t)v12;
    }
    while (v12 != a3);
    if (v10)
    {
      v14 = 0;
      a4->__r_.__value_.__r.__words[0] = 0;
      a4->__r_.__value_.__l.__size_ = 0;
      v15 = (uint64_t)result;
      a4->__r_.__value_.__r.__words[2] = 0;
      do
      {
        if (*(char *)(v15 + 55) < 0)
          v16 = *(_QWORD *)(v15 + 40);
        else
          v16 = *(unsigned __int8 *)(v15 + 55);
        v17 = *(std::string **)(v15 + 8);
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (std::string *)v17->__r_.__value_.__r.__words[0];
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = *(std::string **)(v15 + 16);
            v13 = v18->__r_.__value_.__r.__words[0] == v15;
            v15 = (uint64_t)v18;
          }
          while (!v13);
        }
        v14 += v16;
        v15 = (uint64_t)v18;
      }
      while (v18 != a3);
      v19 = strlen(__s);
      std::string::reserve(a4, v14 + v19 * v10);
      v20 = *(char *)(v7 + 55);
      if (v20 >= 0)
        v21 = (const std::string::value_type *)(v7 + 32);
      else
        v21 = *(const std::string::value_type **)(v7 + 32);
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(v7 + 55);
      else
        v22 = *(_QWORD *)(v7 + 40);
      while (1)
      {
        result = std::string::append(a4, v21, v22);
        v23 = *(_QWORD **)(v7 + 8);
        v24 = v7;
        if (v23)
        {
          do
          {
            v7 = (uint64_t)v23;
            v23 = (_QWORD *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            v7 = *(_QWORD *)(v24 + 16);
            v13 = *(_QWORD *)v7 == v24;
            v24 = v7;
          }
          while (!v13);
        }
        if ((std::string *)v7 == a3)
          break;
        std::string::append(a4, __s);
        v25 = *(char *)(v7 + 55);
        if (v25 >= 0)
          v21 = (const std::string::value_type *)(v7 + 32);
        else
          v21 = *(const std::string::value_type **)(v7 + 32);
        if (v25 >= 0)
          v22 = *(unsigned __int8 *)(v7 + 55);
        else
          v22 = *(_QWORD *)(v7 + 40);
      }
    }
    else if (result[2].__r_.__value_.__s.__data_[7] < 0)
    {
      return (std::string *)sub_20BDDBFAC(a4, (void *)result[1].__r_.__value_.__l.__size_, result[1].__r_.__value_.__r.__words[2]);
    }
    else
    {
      v26 = *(_OWORD *)&result[1].__r_.__value_.__r.__words[1];
      a4->__r_.__value_.__r.__words[2] = result[2].__r_.__value_.__r.__words[0];
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v26;
    }
  }
  return result;
}

void sub_20BEE3B60(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfStringSplit(std::string *__str@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  std::string::size_type size;
  int v5;
  int v7;
  int64_t v8;
  std::string::size_type v10;
  std::string *v11;
  char *v12;
  std::string::size_type v13;
  char *v14;
  char *v15;
  int64_t v16;
  int v17;
  int64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  std::string v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t *v52;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  v5 = (char)size;
  if ((size & 0x80u) != 0)
    size = __str->__r_.__value_.__l.__size_;
  if (size)
  {
    v7 = a2[23];
    v8 = v7 >= 0 ? a2[23] : *((_QWORD *)a2 + 1);
    if (v8)
    {
      v10 = 0;
      if (v5 >= 0)
        v11 = __str;
      else
        v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
      if (v7 >= 0)
        v12 = a2;
      else
        v12 = *(char **)a2;
      v46 = (uint64_t)(a3 + 2);
      while (1)
      {
        v13 = v10;
        if (v8)
          break;
LABEL_25:
        if (v13 != -1)
        {
          std::string::basic_string(&v47, __str, v10, v13 - v10, (std::allocator<char> *)&v48);
          v22 = a3[1];
          v21 = a3[2];
          if (v22 >= v21)
          {
            v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a3) >> 3);
            v25 = v24 + 1;
            if (v24 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_20BDDF694();
            v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a3) >> 3);
            if (2 * v26 > v25)
              v25 = 2 * v26;
            if (v26 >= 0x555555555555555)
              v27 = 0xAAAAAAAAAAAAAAALL;
            else
              v27 = v25;
            v52 = a3 + 2;
            if (v27)
              v28 = (char *)sub_20BDE4FF4(v46, v27);
            else
              v28 = 0;
            v29 = &v28[24 * v24];
            v48 = v28;
            v49 = v29;
            v51 = &v28[24 * v27];
            v30 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
            *((_QWORD *)v29 + 2) = *((_QWORD *)&v47.__r_.__value_.__l + 2);
            *(_OWORD *)v29 = v30;
            memset(&v47, 0, sizeof(v47));
            v50 = v29 + 24;
            sub_20BDF34C0(a3, &v48);
            v31 = a3[1];
            sub_20BDF3648((uint64_t)&v48);
            v32 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
            a3[1] = v31;
            if (v32 < 0)
              operator delete(v47.__r_.__value_.__l.__data_);
          }
          else
          {
            v23 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
            *(_QWORD *)(v22 + 16) = *((_QWORD *)&v47.__r_.__value_.__l + 2);
            *(_OWORD *)v22 = v23;
            a3[1] = v22 + 24;
          }
          v33 = a2[23];
          size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
          if ((size & 0x80u) == 0)
            v11 = __str;
          else
            v11 = (std::string *)__str->__r_.__value_.__r.__words[0];
          if ((size & 0x80u) != 0)
            size = __str->__r_.__value_.__l.__size_;
          v8 = v33 >= 0 ? a2[23] : *((_QWORD *)a2 + 1);
          v10 = v8 + v13;
          v12 = v33 >= 0 ? a2 : *(char **)a2;
          if (size >= v10)
            continue;
        }
        goto LABEL_51;
      }
      v14 = (char *)v11 + v10;
      v15 = (char *)v11 + size;
      v16 = size - v10;
      if (v16 >= v8)
      {
        v17 = *v12;
        do
        {
          v18 = v16 - v8;
          if (v18 == -1)
            break;
          v19 = (char *)memchr(v14, v17, v18 + 1);
          if (!v19)
            break;
          v20 = v19;
          if (!memcmp(v19, v12, v8))
          {
            if (v20 == v15)
              break;
            v13 = v20 - (char *)v11;
            goto LABEL_25;
          }
          v14 = v20 + 1;
          v16 = v15 - (v20 + 1);
        }
        while (v16 >= v8);
      }
LABEL_51:
      std::string::basic_string(&v47, __str, v10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v48);
      v35 = a3[1];
      v34 = a3[2];
      if (v35 >= v34)
      {
        v37 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35 - *a3) >> 3);
        v38 = v37 + 1;
        if (v37 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v34 - *a3) >> 3);
        if (2 * v39 > v38)
          v38 = 2 * v39;
        if (v39 >= 0x555555555555555)
          v40 = 0xAAAAAAAAAAAAAAALL;
        else
          v40 = v38;
        v52 = a3 + 2;
        if (v40)
          v41 = (char *)sub_20BDE4FF4(v46, v40);
        else
          v41 = 0;
        v42 = &v41[24 * v37];
        v48 = v41;
        v49 = v42;
        v51 = &v41[24 * v40];
        v43 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
        *((_QWORD *)v42 + 2) = *((_QWORD *)&v47.__r_.__value_.__l + 2);
        *(_OWORD *)v42 = v43;
        memset(&v47, 0, sizeof(v47));
        v50 = v42 + 24;
        sub_20BDF34C0(a3, &v48);
        v44 = a3[1];
        sub_20BDF3648((uint64_t)&v48);
        v45 = SHIBYTE(v47.__r_.__value_.__r.__words[2]);
        a3[1] = v44;
        if (v45 < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
      }
      else
      {
        v36 = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
        *(_QWORD *)(v35 + 16) = *((_QWORD *)&v47.__r_.__value_.__l + 2);
        *(_OWORD *)v35 = v36;
        a3[1] = v35 + 24;
      }
    }
  }
}

void sub_20BEE3F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_20BDE5038((void ***)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::TfStringTokenize(unsigned __int8 *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v8 = 0;
  v9 = 0;
  v10 = 0;
  sub_20BEE4030(a1, a2, (uint64_t)&v8);
  sub_20BDE4F04(a3, (v9 - v8) >> 4);
  v4 = v9;
  if (v9 != v8)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v4 = v8;
    do
    {
      sub_20BEE4228((std::string *)(*a3 + v6), *(char **)&v4[v5], *(char **)&v4[v5 + 8]);
      ++v7;
      v4 = v8;
      v6 += 24;
      v5 += 16;
    }
    while (v7 != (v9 - v8) >> 4);
  }
  if (v4)
  {
    v9 = v4;
    operator delete(v4);
  }
}

void sub_20BEE4000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20BEE4030(unsigned __int8 *a1, _BYTE *a2, uint64_t a3)
{
  unsigned int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unint64_t v13;
  unsigned __int8 **v14;
  int64x2_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int64x2_t *v21;
  int64x2_t *v22;
  int64x2_t *v23;
  unsigned __int8 *v24;
  unsigned int v25;
  _OWORD v26[16];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  memset(v26, 0, sizeof(v26));
  v5 = *a2;
  if (*a2)
  {
    v6 = a2 + 1;
    do
    {
      *((_BYTE *)v26 + v5) = 1;
      v7 = *v6++;
      v5 = v7;
    }
    while (v7);
  }
  sub_20BEE6850((void **)a3, 8uLL);
  v8 = a1[23];
  v9 = (char)v8;
  v10 = &a1[v8];
  if (v9 >= 0)
    v11 = v10;
  else
    v11 = (unsigned __int8 *)(*(_QWORD *)a1 + *((_QWORD *)a1 + 1));
  if (v9 >= 0)
    v12 = a1;
  else
    v12 = *(unsigned __int8 **)a1;
  for (; v12 < v11; ++v12)
  {
    if (!*((_BYTE *)v26 + *v12))
    {
      v14 = *(unsigned __int8 ***)(a3 + 8);
      v13 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v14 >= v13)
      {
        v16 = ((uint64_t)v14 - *(_QWORD *)a3) >> 4;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          sub_20BDDF694();
        v18 = v13 - *(_QWORD *)a3;
        if (v18 >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
          v20 = (char *)sub_20BDEA2F0(a3 + 16, v19);
        else
          v20 = 0;
        v21 = (int64x2_t *)&v20[16 * v16];
        *v21 = vdupq_n_s64((unint64_t)v12);
        v15 = v21 + 1;
        v23 = *(int64x2_t **)a3;
        v22 = *(int64x2_t **)(a3 + 8);
        if (v22 != *(int64x2_t **)a3)
        {
          do
          {
            v21[-1] = v22[-1];
            --v21;
            --v22;
          }
          while (v22 != v23);
          v22 = *(int64x2_t **)a3;
        }
        *(_QWORD *)a3 = v21;
        *(_QWORD *)(a3 + 8) = v15;
        *(_QWORD *)(a3 + 16) = &v20[16 * v19];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *v14 = v12;
        v14[1] = v12;
        v15 = (int64x2_t *)(v14 + 2);
      }
      *(_QWORD *)(a3 + 8) = v15;
      v24 = v12 + 1;
      while (v24 != v11)
      {
        v25 = *v24++;
        if (*((_BYTE *)v26 + v25))
        {
          v12 = v24 - 1;
          goto LABEL_33;
        }
      }
      v12 = v11;
LABEL_33:
      v15[-1].i64[1] = (uint64_t)v12;
    }
  }
}

std::string *sub_20BEE4228(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    sub_20BE93368(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_20BEE4380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfStringTokenizeToSet(unsigned __int8 *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void *__p[2];
  char v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v9 = 0;
  v10 = 0;
  v11 = 0;
  sub_20BEE4030(a1, a2, (uint64_t)&v9);
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v4 = v10;
  if (v10 != v9)
  {
    v5 = 0;
    v6 = 0;
    v4 = v9;
    do
    {
      sub_20BE93368(__p, *(char **)&v4[v5], *(char **)&v4[v5 + 8], *(_QWORD *)&v4[v5 + 8] - *(_QWORD *)&v4[v5]);
      sub_20BEE68F0((uint64_t **)a3, (const void **)__p, (uint64_t)__p);
      if (v8 < 0)
        operator delete(__p[0]);
      ++v6;
      v4 = v9;
      v5 += 16;
    }
    while (v6 != (v10 - v9) >> 4);
  }
  if (v4)
  {
    v10 = v4;
    operator delete(v4);
  }
}

void sub_20BEE4458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::TfQuotedStringTokenize(char *__s1@<X1>, uint64_t a2@<X0>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  size_t v11;
  char *v12;
  size_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  size_t v21;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  size_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  std::string *v29;
  std::string::size_type v30;
  uint64_t v31;
  std::string *v32;
  std::string::size_type v33;
  unint64_t v34;
  const char *v35;
  char *v36;
  unint64_t v37;
  std::string *v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type size;
  int v42;
  std::string *v43;
  std::string::size_type v44;
  uint64_t i;
  std::string::value_type v46;
  unint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::string v52;
  std::string __p;
  std::string v54;
  std::string v55;
  std::string v56;
  std::string v57;
  std::string v58;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  memset(&v58, 0, sizeof(v58));
  {
    if (a3)
    {
      MEMORY[0x212B929D0](a3, "Cannot use quotes as delimiters.");
      goto LABEL_115;
    }
    return;
  }
  v51 = a3;
  v8 = 0;
  memset(&v57, 0, sizeof(v57));
LABEL_5:
  if (*(char *)(a2 + 23) < 0)
  {
    v9 = *(_QWORD *)(a2 + 8);
    if (v8 >= v9)
      goto LABEL_113;
    v10 = *(_QWORD *)a2;
  }
  else
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
    v10 = a2;
    if (v8 >= v9)
      goto LABEL_113;
  }
  v11 = strlen(__s1);
  v12 = (char *)(v10 + v8);
  if (v11)
  {
    v13 = v11;
    v14 = v9 - v8;
    while (memchr(__s1, *v12, v13))
    {
      ++v12;
      if (!--v14)
        goto LABEL_113;
    }
  }
  v15 = (unint64_t)&v12[-v10];
  if (v15 != -1)
  {
    std::string::erase(&v57, 0, 0xFFFFFFFFFFFFFFFFLL);
    std::string::erase(&v58, 0, 0xFFFFFFFFFFFFFFFFLL);
    while (1)
    {
      v17 = *(char *)(a2 + 23);
      v18 = *(_QWORD *)a2;
      if (v17 >= 0)
        v19 = a2;
      else
        v19 = *(_QWORD *)a2;
      if (v17 >= 0)
        v20 = *(unsigned __int8 *)(a2 + 23);
      else
        v20 = *(_QWORD *)(a2 + 8);
      v21 = strlen(__s1);
      if (v20 <= v15 || v21 == 0)
      {
        if (v16 == -1)
          goto LABEL_76;
      }
      else
      {
        v23 = (unsigned __int8 *)(v19 + v15);
        v24 = (unsigned __int8 *)(v19 + v20);
LABEL_30:
        v25 = v21;
        v26 = __s1;
        while (*v23 != *v26)
        {
          ++v26;
          if (!--v25)
          {
            if (++v23 != v24)
              goto LABEL_30;
            v23 = (unsigned __int8 *)(v19 + v20);
            break;
          }
        }
        v27 = (uint64_t)&v23[-v19];
        if (v23 == v24)
          v28 = -1;
        else
          v28 = v27;
        if (v16 >= v28)
        {
          if (v28 != -1)
          {
            std::string::basic_string(&v56, (const std::string *)a2, v15, v28 - v15, (std::allocator<char> *)&v55);
            if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v40 = &v56;
            else
              v40 = (std::string *)v56.__r_.__value_.__r.__words[0];
            if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
            else
              size = v56.__r_.__value_.__l.__size_;
            std::string::append(&v58, (const std::string::value_type *)v40, size);
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v56.__r_.__value_.__l.__data_);
            v42 = 0;
            goto LABEL_85;
          }
LABEL_76:
          std::string::basic_string(&v56, (const std::string *)a2, v15, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v55);
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = &v56;
          else
            v43 = (std::string *)v56.__r_.__value_.__r.__words[0];
          if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v44 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
          else
            v44 = v56.__r_.__value_.__l.__size_;
          std::string::append(&v58, (const std::string::value_type *)v43, v44);
          if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v56.__r_.__value_.__l.__data_);
          v27 = -1;
          v42 = 1;
LABEL_85:
          for (i = 0; i != 3; ++i)
          {
            sub_20BDDC0E4(&v54, "\\");
            v46 = asc_20CB3EBDB[i];
            std::string::push_back(&v54, v46);
            v55 = v54;
            memset(&v54, 0, sizeof(v54));
            memset(&v52, 0, sizeof(v52));
            std::string::push_back(&v52, v46);
            __p = v52;
            memset(&v52, 0, sizeof(v52));
            pxrInternal__aapl__pxrReserved__::TfStringReplace((char *)&v58, (unsigned __int8 *)&v55, (unsigned __int8 *)&__p, &v56);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v58.__r_.__value_.__l.__data_);
            v58 = v56;
            *((_BYTE *)&v56.__r_.__value_.__s + 23) = 0;
            v56.__r_.__value_.__s.__data_[0] = 0;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v52.__r_.__value_.__l.__data_);
            if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v55.__r_.__value_.__l.__data_);
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v54.__r_.__value_.__l.__data_);
          }
          v47 = a4[1];
          if (v47 >= a4[2])
          {
            v49 = sub_20BE4EE50(a4, (__int128 *)&v58);
          }
          else
          {
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_20BDDBFAC((_BYTE *)a4[1], v58.__r_.__value_.__l.__data_, v58.__r_.__value_.__l.__size_);
            }
            else
            {
              v48 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
              *(_QWORD *)(v47 + 16) = *((_QWORD *)&v58.__r_.__value_.__l + 2);
              *(_OWORD *)v47 = v48;
            }
            v49 = v47 + 24;
            a4[1] = v47 + 24;
          }
          a4[1] = v49;
          v8 = v27 + 1;
          if (v42)
            break;
          goto LABEL_5;
        }
      }
      if (v16 > v15)
      {
        std::string::basic_string(&v56, (const std::string *)a2, v15, v16 - v15, (std::allocator<char> *)&v55);
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v29 = &v56;
        else
          v29 = (std::string *)v56.__r_.__value_.__r.__words[0];
        if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v30 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
        else
          v30 = v56.__r_.__value_.__l.__size_;
        std::string::append(&v58, (const std::string::value_type *)v29, v30);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v56.__r_.__value_.__l.__data_);
        LOBYTE(v17) = *(_BYTE *)(a2 + 23);
        v18 = *(_QWORD *)a2;
      }
      if ((v17 & 0x80u) == 0)
        v31 = a2;
      else
        v31 = v18;
      std::string::operator=(&v57, *(_BYTE *)(v31 + v16));
      if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v57;
      else
        v32 = (std::string *)v57.__r_.__value_.__r.__words[0];
      v33 = v16 + 1;
      v34 = sub_20BEE4AD4((uint64_t *)a2, (char *)v32, v16 + 1);
      if (v34 == -1)
      {
        if (v51)
        {
          if (*(char *)(a2 + 23) >= 0)
            v50 = a2;
          else
            v50 = *(_QWORD *)a2;
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"String is missing an end-quote ('%s'): %s", v35, v36, v32, v50);
          if (*(char *)(v51 + 23) < 0)
            operator delete(*(void **)v51);
          *(std::string *)v51 = v56;
        }
        sub_20BDE5078(a4);
        break;
      }
      v37 = v34;
      if (v34 > v33)
      {
        std::string::basic_string(&v56, (const std::string *)a2, v33, v34 - v33, (std::allocator<char> *)&v55);
        v38 = (v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v56
            : (std::string *)v56.__r_.__value_.__r.__words[0];
        v39 = (v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(v56.__r_.__value_.__r.__words[2])
            : v56.__r_.__value_.__l.__size_;
        std::string::append(&v58, (const std::string::value_type *)v38, v39);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v56.__r_.__value_.__l.__data_);
      }
      v15 = v37 + 1;
    }
  }
LABEL_113:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
LABEL_115:
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
}

void sub_20BEE49F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  *(_QWORD *)(v48 + 8) = v49;
  if (a48 < 0)
    operator delete(__p);
  if (*(char *)(v50 - 105) < 0)
    operator delete(*(void **)(v50 - 128));
  *(_QWORD *)(v50 - 128) = v48;
  sub_20BDE5038((void ***)(v50 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_20BEE4AD4(uint64_t *a1, char *__s, unint64_t a3)
{
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  size_t v16;
  char *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  size_t v26;
  char *v27;
  uint64_t v28;

  v6 = *((unsigned __int8 *)a1 + 23);
  v7 = (uint64_t *)*a1;
  v8 = a1[1];
  if ((v6 & 0x80u) == 0)
    v9 = (uint64_t)a1;
  else
    v9 = *a1;
  if ((v6 & 0x80u) == 0)
    v10 = *((unsigned __int8 *)a1 + 23);
  else
    v10 = a1[1];
  v11 = strlen(__s);
  if (v10 <= a3 || v11 == 0)
    return -1;
  v14 = (unsigned __int8 *)(v9 + a3);
  v15 = (unsigned __int8 *)(v9 + v10);
  while (2)
  {
    v16 = v11;
    v17 = __s;
    do
    {
      if (*v14 == *v17)
      {
        v18 = &v14[-v9];
        if (v14 == v15)
          v13 = -1;
        else
          v13 = (uint64_t)&v14[-v9];
        v19 = v13 - 1;
        if ((unint64_t)(v13 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v13 = (uint64_t)v18;
          while (1)
          {
            if ((v6 & 0x80) != 0)
            {
              v20 = *((unsigned __int8 *)v7 + v19);
              v21 = v7;
              v22 = v8;
            }
            else
            {
              v20 = *((unsigned __int8 *)a1 + v19);
              v21 = a1;
              v22 = v6;
            }
            if (v20 != 92)
              break;
            v23 = v13 + 1;
            if (v22 <= v23)
              return -1;
            v24 = (unsigned __int8 *)v21 + v23;
            v25 = (unsigned __int8 *)v21 + v22;
LABEL_29:
            v26 = v11;
            v27 = __s;
            while (*v24 != *v27)
            {
              ++v27;
              if (!--v26)
              {
                if (++v24 != v25)
                  goto LABEL_29;
                return -1;
              }
            }
            v13 = v24 - (unsigned __int8 *)v21;
            if (v24 == v25)
              v28 = -1;
            else
              v28 = v24 - (unsigned __int8 *)v21;
            v19 = v28 - 1;
            if ((unint64_t)(v28 - 1) >= 0xFFFFFFFFFFFFFFFELL)
              return v28;
          }
        }
        return v13;
      }
      ++v17;
      --v16;
    }
    while (v16);
    ++v14;
    v13 = -1;
    if (v14 != v15)
      continue;
    return v13;
  }
}

void pxrInternal__aapl__pxrReserved__::TfMatchedStringTokenize(uint64_t __c@<X2>, const std::string *a2@<X0>, uint64_t a3@<X1>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  std::string::size_type v12;
  const std::string *v13;
  const char *v14;
  char *v15;
  uint64_t *v16;
  std::string::size_type v17;
  std::string::size_type size;
  std::string::size_type v19;
  const char *v20;
  char *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  std::string::size_type v33;
  std::string *v34;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  std::string::size_type v38;
  std::string *v39;
  unsigned __int8 *v40;
  int v41;
  const std::string *v42;
  std::string *p_p;
  std::string::size_type v44;
  std::string *v45;
  std::string::size_type v46;
  unint64_t v47;
  __int128 v48;
  char v49;
  uint64_t v50;
  std::string::size_type v51;
  const char *v52;
  char *v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t *v57;
  std::string v58;
  std::string __p;
  std::string v60;
  std::string v61;
  char v62[9];

  *a6 = 0;
  a6[1] = 0;
  a6[2] = 0;
  if (a4 == (_DWORD)a3 || a4 == (_DWORD)__c)
  {
    if (a5)
      MEMORY[0x212B929D0](a5, "Escape character cannot be a delimiter.", __c);
    return;
  }
  v12 = std::string::find(a2, __c, 0);
  if (v12 != -1)
  {
    if (!v12
      || ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v13 = a2)
        : (v13 = (const std::string *)a2->__r_.__value_.__r.__words[0]),
          v13->__r_.__value_.__s.__data_[v12 - 1] != a4))
    {
      if (v12 < std::string::find(a2, a3, 0))
      {
        if (a5)
        {
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v16 = (uint64_t *)a2;
          else
            v16 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"String has unmatched close delimiter ('%c', '%c'): %s", v14, v15, a3, __c, v16);
          if (*(char *)(a5 + 23) < 0)
            operator delete(*(void **)a5);
          *(std::string *)a5 = v61;
        }
        return;
      }
    }
  }
  v56 = a5;
  v57 = a6;
  memset(&v61, 0, sizeof(v61));
  if (a4)
    std::string::push_back(&v61, a4);
  std::string::push_back(&v61, a3);
  if ((_DWORD)a3 != (_DWORD)__c)
    std::string::push_back(&v61, __c);
  v17 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  v19 = std::string::find(a2, a3, 0);
  if (v19 != -1)
  {
    v22 = v19;
    v55 = 0;
    if ((v17 & 0x80u) == 0)
      v23 = v17;
    else
      v23 = size;
    v24 = v23 - 1;
    while (1)
    {
      v25 = 0;
      memset(&v60, 0, sizeof(v60));
      v26 = 1;
      v27 = v22;
      while (2)
      {
        v28 = v27 + 1;
        v29 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
        v30 = a2->__r_.__value_.__l.__size_;
        v31 = v29 < 0;
        if (v29 >= 0)
          v32 = (uint64_t)a2;
        else
          v32 = a2->__r_.__value_.__r.__words[0];
        if (!v31)
          v30 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
        v33 = HIBYTE(v61.__r_.__value_.__r.__words[2]);
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &v61;
        else
          v34 = (std::string *)v61.__r_.__value_.__r.__words[0];
        if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v33 = v61.__r_.__value_.__l.__size_;
        if (v30 <= v28 || v33 == 0)
        {
LABEL_86:
          if (v56)
          {
            pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"String has unmatched open delimiter ('%c', '%c'): %s", v20, v21, a3, __c, v32);
            if (*(char *)(v56 + 23) < 0)
              operator delete(*(void **)v56);
            *(std::string *)v56 = __p;
          }
          sub_20BDE5078(v57);
          v49 = 0;
          v27 = -1;
          v55 = 1;
          goto LABEL_95;
        }
        v36 = (unsigned __int8 *)(v32 + v28);
        v37 = (unsigned __int8 *)(v32 + v30);
LABEL_45:
        v38 = v33;
        v39 = v34;
        while (*v36 != v39->__r_.__value_.__s.__data_[0])
        {
          v39 = (std::string *)((char *)v39 + 1);
          if (!--v38)
          {
            if (++v36 != v37)
              goto LABEL_45;
            goto LABEL_86;
          }
        }
        if (v36 == v37)
          goto LABEL_86;
        v40 = &v36[-v32];
        if (&v36[-v32] == (unsigned __int8 *)-1)
          goto LABEL_86;
        v41 = *v36;
        if (v41 == a4)
        {
          v27 = (unint64_t)(v40 + 1);
          if ((unint64_t)(v40 + 1) < v24)
          {
            std::string::basic_string(&v58, a2, v22 + 1, (std::string::size_type)&v40[~v22], (std::allocator<char> *)v62);
            if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = a2;
            else
              v42 = (const std::string *)a2->__r_.__value_.__r.__words[0];
            std::string::push_back(&v58, v42->__r_.__value_.__s.__data_[v27]);
            __p = v58;
            memset(&v58, 0, sizeof(v58));
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_p = &__p;
            else
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v44 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            else
              v44 = __p.__r_.__value_.__l.__size_;
            std::string::append(&v60, (const std::string::value_type *)p_p, v44);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v58.__r_.__value_.__l.__data_);
            v22 = v27;
            goto LABEL_73;
          }
        }
        else if ((_DWORD)a3 == (_DWORD)__c || v41 != a3)
        {
          ++v25;
        }
        else
        {
          ++v26;
        }
        v27 = (unint64_t)v40;
LABEL_73:
        if (v25 != v26)
          continue;
        break;
      }
      if (v27 > v22 + 1)
      {
        std::string::basic_string(&__p, a2, v22 + 1, v27 + ~v22, (std::allocator<char> *)&v58);
        v45 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v46 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::string::append(&v60, (const std::string::value_type *)v45, v46);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v47 = v57[1];
      if (v47 >= v57[2])
      {
        v50 = sub_20BE4EE50(v57, (__int128 *)&v60);
      }
      else
      {
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20BDDBFAC((_BYTE *)v57[1], v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
        }
        else
        {
          v48 = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
          *(_QWORD *)(v47 + 16) = *((_QWORD *)&v60.__r_.__value_.__l + 2);
          *(_OWORD *)v47 = v48;
        }
        v50 = v47 + 24;
        v57[1] = v47 + 24;
      }
      v57[1] = v50;
      v22 = v27 + 1;
      v49 = 1;
LABEL_95:
      if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v60.__r_.__value_.__l.__data_);
      if ((v49 & 1) == 0)
      {
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v61.__r_.__value_.__l.__data_);
        if ((v55 & 1) == 0)
        {
          v61.__r_.__value_.__r.__words[0] = (std::string::size_type)v57;
          sub_20BDE5038((void ***)&v61);
        }
        return;
      }
      v22 = std::string::find(a2, a3, v22);
      if (v22 == -1)
        goto LABEL_101;
    }
  }
  v27 = 0;
LABEL_101:
  v51 = std::string::find(a2, __c, v27 + 1);
  if (v51 != -1)
  {
    v54 = (a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (uint64_t)a2
        : a2->__r_.__value_.__r.__words[0];
    if (*(unsigned __int8 *)(v51 + v54 - 1) != a4)
    {
      if (v56)
      {
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"String has unmatched close delimiter ('%c', '%c'): %s", v52, v53, a3, __c, v54);
        if (*(char *)(v56 + 23) < 0)
          operator delete(*(void **)v56);
        *(std::string *)v56 = v60;
      }
      sub_20BDE5078(v57);
    }
  }
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
}

