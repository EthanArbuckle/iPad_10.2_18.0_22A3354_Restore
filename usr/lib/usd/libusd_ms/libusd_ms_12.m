void sub_20C2A8650(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((uint64_t *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetTimeSampleValueImpl(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v6;
  const char *v7;
  const char *v8;
  char *v9;
  FILE *v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  char *__dst;
  uint64_t v28;
  std::__shared_weak_count *v29;
  ptrdiff_t v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  int v35;

  v6 = *(_QWORD *)(a2 + 40) + 8 * a3;
  if (*(_BYTE *)(a1 + 6568))
  {
    v7 = *(const char **)(a1 + 6560);
    v33 = a1 + 6448;
    v34 = v7;
    v35 = sub_20C2A2B6C();
    v8 = (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 6448) + 24) + v6);
    v31 = (char *)a1;
    v32 = v8;
    if (sub_20C2C9E6C((uint64_t)&v32, &__dst, 8uLL))
    {
      v9 = __dst;
LABEL_7:
      *a4 = v9;
      v11 = (char *)&off_24C52E948 + 3;
LABEL_9:
      a4[1] = v11;
      return;
    }
    goto LABEL_8;
  }
  v10 = *(FILE **)(a1 + 6456);
  if (v10)
  {
    if (pxrInternal__aapl__pxrReserved__::ArchPRead(v10, (__sFILE *)&v31, (char *)8, *(_QWORD *)(a1 + 6464) + v6) != -1)
    {
      v9 = v31;
      goto LABEL_7;
    }
LABEL_8:
    v11 = 0;
    goto LABEL_9;
  }
  v12 = *(_QWORD *)(a1 + 6488);
  v13 = *(std::__shared_weak_count **)(a1 + 6496);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
    __dst = (char *)a1;
    v28 = v12;
    v29 = v13;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v30 = 0;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  else
  {
    __dst = (char *)a1;
    v28 = v12;
    v29 = 0;
    v30 = 0;
  }
  v30 = v6;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
  v19 = v6;
  if (v6 < 0 || v30 + 8 > v18)
  {
    v31 = "usd/crateFile.cpp";
    v32 = "Read";
    v33 = 770;
    v34 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
    LOBYTE(v35) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v30, v18);
    goto LABEL_26;
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28) - v6;
  if (v20 < 8 || ((v20 | v19) & 0x8000000000000000) != 0)
  {
    v31 = "usd/crateFile.cpp";
    v32 = "Read";
    v33 = 779;
    v34 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
    LOBYTE(v35) = 0;
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v20, v25);
    goto LABEL_26;
  }
  v21 = (*(uint64_t (**)(uint64_t, char **, uint64_t, uint64_t))(*(_QWORD *)v28 + 32))(v28, &v26, 8, v19);
  if ((unint64_t)(v21 + 1) <= 1)
  {
LABEL_26:
    a4[1] = 0;
    goto LABEL_28;
  }
  v30 = v19 + v21;
  *a4 = v26;
  a4[1] = (char *)&off_24C52E948 + 3;
LABEL_28:
  v22 = v29;
  if (v29)
  {
    v23 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_20C2A896C(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_MakeTimeSampleValuesMutableImpl(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  FILE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ssize_t v20;
  ssize_t v21;
  char *v22;
  char **v23;
  char *v24;
  BOOL v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  ptrdiff_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t __dst;
  uint64_t v51;
  std::__shared_weak_count *v52;
  ptrdiff_t v53;
  char *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  int v58;

  v4 = a2 + 2;
  sub_20BFC3800(a2 + 2, (uint64_t)(*(_QWORD *)(a2[1] + 8) - *(_QWORD *)a2[1]) >> 3);
  if (*(_BYTE *)(a1 + 6568))
  {
    v5 = *(const char **)(a1 + 6560);
    v56 = a1 + 6448;
    v57 = v5;
    v58 = sub_20C2A2B6C();
    v6 = (const char *)(*(_QWORD *)(*(_QWORD *)(a1 + 6448) + 24) + a2[5]);
    v54 = (char *)a1;
    v55 = v6;
    v7 = *(_QWORD *)(a2[1] + 8) - *(_QWORD *)a2[1];
    if (v7)
    {
      v8 = 0;
      v9 = v7 >> 3;
      while (sub_20C2C9E6C((uint64_t)&v55, &__dst, 8uLL))
      {
        v10 = __dst;
        v11 = (_QWORD *)(*v4 + v8);
        v12 = v11[1];
        if (v12)
          v13 = (v11[1] & 3) == 3;
        else
          v13 = 1;
        if (!v13)
          (*(void (**)(uint64_t))((v12 & 0xFFFFFFFFFFFFFFF8) + 32))(*v4 + v8);
        *v11 = v10;
        v11[1] = (char *)&off_24C52E948 + 3;
        v8 += 16;
        if (!--v9)
          goto LABEL_11;
      }
      return;
    }
LABEL_11:
    v48 = a2;
LABEL_12:
    *v48 = 0;
    return;
  }
  v14 = *(FILE **)(a1 + 6456);
  v48 = a2;
  if (!v14)
  {
    v26 = *(_QWORD *)(a1 + 6488);
    v27 = *(std::__shared_weak_count **)(a1 + 6496);
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldxr(p_shared_owners);
      while (__stxr(v29 + 1, p_shared_owners));
      __dst = a1;
      v51 = v26;
      v52 = v27;
      do
        v30 = __ldxr(p_shared_owners);
      while (__stxr(v30 + 1, p_shared_owners));
      v53 = 0;
      do
        v31 = __ldaxr(p_shared_owners);
      while (__stlxr(v31 - 1, p_shared_owners));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    else
    {
      __dst = a1;
      v51 = v26;
      v52 = 0;
    }
    v53 = a2[5];
    v32 = *(_QWORD *)(a2[1] + 8) - *(_QWORD *)a2[1];
    if (v32)
    {
      v33 = 0;
      v34 = v32 >> 3;
      v35 = v51;
      while (1)
      {
        v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
        v37 = v53;
        if (v53 < 0 || v53 + 8 > v36)
          break;
        v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35) - v37;
        if (v38 < 8 || ((v38 | v37) & 0x8000000000000000) != 0)
        {
          v54 = "usd/crateFile.cpp";
          v55 = "Read";
          v56 = 779;
          v57 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v58) = 0;
          v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 16))(v35);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v54, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v38, v44);
          goto LABEL_49;
        }
        v39 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, ptrdiff_t))(*(_QWORD *)v35 + 32))(v35, &v49, 8, v37);
        if ((unint64_t)(v39 + 1) < 2)
          goto LABEL_49;
        v53 = v37 + v39;
        v40 = v49;
        v41 = (_QWORD *)(*v4 + v33);
        v42 = v41[1];
        if (v42 && (v41[1] & 3) != 3)
          (*(void (**)(uint64_t))((v42 & 0xFFFFFFFFFFFFFFF8) + 32))(*v4 + v33);
        *v41 = v40;
        v41[1] = (char *)&off_24C52E948 + 3;
        v33 += 16;
        if (!--v34)
          goto LABEL_46;
      }
      v54 = "usd/crateFile.cpp";
      v55 = "Read";
      v56 = 770;
      v57 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
      LOBYTE(v58) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v54, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v53, v36);
LABEL_49:
      v43 = 0;
    }
    else
    {
LABEL_46:
      v43 = 1;
    }
    v45 = v52;
    if (!v52)
      goto LABEL_54;
    v46 = (unint64_t *)&v52->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if (!v43)
        return;
    }
    else
    {
LABEL_54:
      if (!v43)
        return;
    }
    goto LABEL_12;
  }
  v15 = *(_QWORD *)(a2[1] + 8) - *(_QWORD *)a2[1];
  if (!v15)
    goto LABEL_12;
  v16 = 0;
  v17 = *(_QWORD *)(a1 + 6464);
  v18 = v15 >> 3;
  v19 = a2[5];
  while (1)
  {
    v20 = pxrInternal__aapl__pxrReserved__::ArchPRead(v14, (__sFILE *)&v54, (char *)8, v19 + v17);
    if (v20 == -1)
      break;
    v21 = v20;
    v22 = v54;
    v23 = (char **)(*v4 + v16);
    v24 = v23[1];
    if (v24)
      v25 = ((unint64_t)v23[1] & 3) == 3;
    else
      v25 = 1;
    if (!v25)
      (*(void (**)(uint64_t))(((unint64_t)v24 & 0xFFFFFFFFFFFFFFF8) + 32))(*v4 + v16);
    v19 += v21;
    *v23 = v22;
    v23[1] = (char *)&off_24C52E948 + 3;
    v16 += 16;
    if (!--v18)
      goto LABEL_12;
  }
}

void sub_20C2A8DB0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WriteFields(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  _DWORD *v7;
  size_t CompressedBufferSize;
  char *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _QWORD *v15;
  size_t v16;
  char *v17;
  int64_t v18;
  void *__p;
  _BYTE *v20;
  void *__src;
  _BYTE *v22;
  int64_t v23;

  if (((*(unsigned __int8 *)(a1[791] + 248) << 16) | (*(unsigned __int8 *)(a1[791] + 249) << 8)) > 0x3FFu)
  {
    __src = (void *)((uint64_t)(a1[7] - a1[6]) >> 4);
    sub_20C2B7248(a2, (char *)&__src);
    sub_20BDE36C4(&__src, (uint64_t)(a1[7] - a1[6]) >> 4);
    v4 = a1[6];
    v5 = a1[7];
    v6 = __src;
    if (v4 != v5)
    {
      v7 = __src;
      do
      {
        *v7++ = *(_DWORD *)(v4 + 4);
        v4 += 16;
      }
      while (v4 != v5);
    }
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((v22 - v6) >> 2));
    v9 = (char *)operator new[](CompressedBufferSize);
    v11 = (void *)pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__src, (const unsigned int *)((v22 - (_BYTE *)__src) >> 2), v9, v10);
    __p = v11;
    sub_20C2B7248(a2, (char *)&__p);
    sub_20C2A7944(a2, v9, (int64_t)v11);
    sub_20BDE3C3C(&__p, (uint64_t)(a1[7] - a1[6]) >> 4);
    v12 = a1[6];
    v13 = a1[7];
    v14 = __p;
    if (v12 != v13)
    {
      v15 = __p;
      do
      {
        *v15++ = *(_QWORD *)(v12 + 8);
        v12 += 16;
      }
      while (v12 != v13);
    }
    v16 = pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)(v20 - v14));
    v17 = (char *)operator new[](v16);
    v18 = pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::TfFastCompression *)__p, v17, v20 - (_BYTE *)__p);
    v23 = v18;
    sub_20C2B7248(a2, (char *)&v23);
    sub_20C2A7944(a2, v17, v18);
    operator delete[](v17);
    if (__p)
    {
      v20 = __p;
      operator delete(__p);
    }
    operator delete[](v9);
    if (__src)
    {
      v22 = __src;
      operator delete(__src);
    }
  }
  else
  {
    sub_20C2A8FE4(a2, (uint64_t)(a1 + 6));
  }
}

void sub_20C2A8F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v14;

  operator delete[](v14);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2A8FE4(uint64_t a1, uint64_t a2)
{
  uint64_t __src;

  __src = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4;
  sub_20C2B7248(a1, (char *)&__src);
  return sub_20C2CA068(a1, *(char **)a2, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 4);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WriteFieldSets(_QWORD *a1, uint64_t a2)
{
  int *v4;
  int *v5;
  _BYTE *v6;
  _DWORD *v7;
  int v8;
  size_t CompressedBufferSize;
  char *v10;
  char *v11;
  int64_t v12;
  void *__p;
  _BYTE *v14;
  uint64_t __src;

  if (((*(unsigned __int8 *)(a1[791] + 248) << 16) | (*(unsigned __int8 *)(a1[791] + 249) << 8)) > 0x3FFu)
  {
    sub_20BDE36C4(&__p, (uint64_t)(a1[10] - a1[9]) >> 2);
    v4 = (int *)a1[9];
    v5 = (int *)a1[10];
    v6 = __p;
    if (v4 != v5)
    {
      v7 = __p;
      do
      {
        v8 = *v4++;
        *v7++ = v8;
      }
      while (v4 != v5);
    }
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((v14 - v6) >> 2));
    v10 = (char *)operator new[](CompressedBufferSize);
    __src = (v14 - (_BYTE *)__p) >> 2;
    sub_20C2B7248(a2, (char *)&__src);
    v12 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p, (const unsigned int *)((v14 - (_BYTE *)__p) >> 2), v10, v11);
    __src = v12;
    sub_20C2B7248(a2, (char *)&__src);
    sub_20C2A7944(a2, v10, v12);
    operator delete[](v10);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
  else
  {
    sub_20C2A918C(a2, (uint64_t)(a1 + 9));
  }
}

void sub_20C2A915C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  operator delete[](v10);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2A918C(uint64_t a1, uint64_t a2)
{
  uint64_t __src;

  __src = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2;
  sub_20C2B7248(a1, (char *)&__src);
  return sub_20C2C9460(a1, *(char **)a2, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WritePaths(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *j;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _DWORD *v7;
  _DWORD *i;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _DWORD *v18;
  void **v19;

  *(_QWORD *)&v15 = (uint64_t)(*((_QWORD *)a1 + 13) - *((_QWORD *)a1 + 12)) >> 3;
  sub_20C2B7248(a2, (char *)&v15);
  v4 = *((_QWORD *)a1 + 791);
  if (((*(unsigned __int8 *)(v4 + 248) << 16) | (*(unsigned __int8 *)(v4 + 249) << 8)) > 0x3FFu)
  {
    v15 = 0uLL;
    *(_QWORD *)&v16 = 0;
    sub_20C2A990C((uint64_t *)&v15, (uint64_t)(*((_QWORD *)a1 + 13) - *((_QWORD *)a1 + 12)) >> 3);
    v7 = (_DWORD *)*((_QWORD *)a1 + 12);
    for (i = (_DWORD *)*((_QWORD *)a1 + 13); v7 != i; v7 += 2)
    {
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v7))
      {
        v9 = *((_QWORD *)a1 + 791) + 80;
        v18 = v7;
        v10 = sub_20C2B6F24(v9, v7, (uint64_t)&unk_20CAC184C, &v18) + 3;
        v11 = *((_QWORD *)&v15 + 1);
        if (*((_QWORD *)&v15 + 1) >= (unint64_t)v16)
        {
          v12 = sub_20C2CAEF4((uint64_t *)&v15, v7, v10);
        }
        else
        {
          sub_20BFD6E54(*((_DWORD **)&v15 + 1), v7);
          sub_20BFD6EA4((_DWORD *)(v11 + 4), v7 + 1);
          *(_DWORD *)(v11 + 8) = *v10;
          v12 = v11 + 12;
        }
        *((_QWORD *)&v15 + 1) = v12;
      }
    }
    v13 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v15 + 1) - v15) >> 2));
    if (*((_QWORD *)&v15 + 1) == (_QWORD)v15)
      v14 = 0;
    else
      v14 = v13;
    sub_20C2CB00C(v15, *((int **)&v15 + 1), v14, 1);
    sub_20C2A99BC(a1, a2, (pxrInternal__aapl__pxrReserved__::SdfPath **)&v15);
    v19 = (void **)&v15;
    sub_20C2CAC1C(&v19);
  }
  else
  {
    v17 = 0;
    v15 = 0u;
    v16 = 0u;
    for (j = *(uint64_t **)(v4 + 96); j; j = (uint64_t *)*j)
      *(_DWORD *)sub_20C2A93F8((uint64_t)&v15, (_DWORD *)j + 4) = *((_DWORD *)j + 6);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2A9834((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15);
    sub_20C2A948C(a1, a2, v6, 0);
    sub_20C2A9874(&v15);
    sub_20C2CA10C((uint64_t *)&v15);
  }
}

void sub_20C2A93C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a9;
  sub_20C2CAC1C(&a16);
  _Unwind_Resume(a1);
}

char *sub_20C2A93F8(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  int v6;
  _DWORD v7[2];

  sub_20BFD6E54(&v6, a2);
  sub_20BFD6EA4(v7, a2 + 1);
  v7[1] = -1;
  v4 = sub_20C2CA1F4(a1, &v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v7);
  sub_20BFD265C(&v6);
  return (char *)v4 + 8;
}

void sub_20C2A9478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  sub_20C2CA1C8(&a10);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_20C2A948C(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  int64_t v9;
  uint64_t v10;
  _BOOL4 v11;
  _BOOL4 v12;
  int IsPrimPropertyPath;
  unint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  int v17;
  int IndexForToken;
  char v19;
  char v20;
  char v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  char v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int64_t v31;
  int64_t *v32;
  int64_t v33;
  unsigned int *v34;
  unsigned int v35;
  int64_t __src;
  int v38;
  char v39;
  unint64_t v40;
  pxrInternal__aapl__pxrReserved__::SdfPath *v41;
  pxrInternal__aapl__pxrReserved__::SdfPath *i;

  v4 = a4;
  v41 = a3;
  for (i = a3; i != v4; v41 = i)
  {
    v7 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2CA6FC((uint64_t)&v41);
    v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*((_QWORD *)i + 3);
    if (!v8)
      v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2CA6FC((uint64_t)&i);
    i = v8;
    if (v8 == v7)
    {
      v11 = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v8, &__src);
      v9 = __src;
      v10 = *(_QWORD *)v41;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__src + 1);
      v11 = v9 == v10;
      sub_20BFD265C(&__src);
    }
    if (v7 == v4)
    {
      v12 = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v7, &__src);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v41, &v40);
      v12 = __src == v40;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v40 + 1);
      sub_20BFD265C(&v40);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__src + 1);
      sub_20BFD265C(&__src);
    }
    IsPrimPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(v41);
    if (IsPrimPropertyPath)
    {
      v14 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(v41);
      v40 = v14;
      if ((v14 & 7) != 0)
      {
        v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 2, v15));
        if ((v16 & 1) == 0)
          v40 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetElementToken(v41, (unsigned int **)&v40);
    }
    if (((*(unsigned __int8 *)(*((_QWORD *)a1 + 791) + 248) << 16) | (*(unsigned __int8 *)(*((_QWORD *)a1 + 791)
                                                                                            + 249) << 8) | *(unsigned __int8 *)(*((_QWORD *)a1 + 791) + 250)) == 1)
    {
      v17 = *((_DWORD *)v41 + 2);
      IndexForToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetIndexForToken(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40);
      if (v12)
        v19 = 2;
      else
        v19 = 0;
      v20 = v19 | v11;
      if (IsPrimPropertyPath)
        v21 = 4;
      else
        v21 = 0;
      HIDWORD(__src) = v17;
      v38 = IndexForToken;
      v39 = v20 | v21;
      sub_20C2CA738(a2, (char *)&__src);
    }
    else
    {
      v22 = *((_DWORD *)v41 + 2);
      v23 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetIndexForToken(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40);
      if (v12)
        v24 = 2;
      else
        v24 = 0;
      v25 = v24 | v11;
      if (IsPrimPropertyPath)
        v26 = 4;
      else
        v26 = 0;
      __src = __PAIR64__(v23, v22);
      LOBYTE(v38) = v25 | v26;
      sub_20C2CA7D8(a2, (char *)&__src);
    }
    v27 = v12 && v11;
    if (v12 && v11)
    {
      v28 = **(_QWORD **)(a2 + 8);
      __src = -1;
      sub_20C2B7248(a2, (char *)&__src);
      if (!v11)
        goto LABEL_34;
    }
    else
    {
      v28 = -1;
      if (!v11)
      {
LABEL_34:
        if (!v27)
          goto LABEL_45;
        goto LABEL_38;
      }
    }
    i = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2A948C(a1, a2, i, v4);
    if (!v27)
      goto LABEL_45;
LABEL_38:
    __src = 0;
    v29 = *(uint64_t **)(a2 + 8);
    __src = *v29;
    v30 = v29[2];
    if (v30 > v28 || v29[4] + v30 < v28)
    {
      sub_20C2B209C((_BOOL8)v29);
      *v29 = v28;
      v29 += 2;
    }
    *v29 = v28;
    sub_20C2B7248(a2, (char *)&__src);
    v31 = __src;
    v32 = *(int64_t **)(a2 + 8);
    v33 = v32[2];
    if (v33 > __src || v32[4] + v33 < __src)
    {
      sub_20C2B209C(*(_QWORD *)(a2 + 8));
      *v32 = v31;
      v32 += 2;
    }
    *v32 = v31;
LABEL_45:
    if ((v40 & 7) != 0)
    {
      v34 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
      do
        v35 = __ldxr(v34);
      while (__stlxr(v35 - 2, v34));
    }
    if (!v12)
      return i;
  }
  return v4;
}

void sub_20C2A97DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  unsigned int *v12;
  unsigned int v13;

  if ((a12 & 7) != 0)
  {
    v12 = (unsigned int *)(a12 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2A9834(pxrInternal__aapl__pxrReserved__::SdfPath *a1)
{
  unsigned int *v2;

  if (!*((_QWORD *)a1 + 3))
    return 0;
  v2 = (unsigned int *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  return sub_20C2CA694(a1, v2);
}

uint64_t *sub_20C2A9874(__int128 *a1)
{
  uint64_t *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = 0uLL;
  v9 = 0;
  v10 = 0;
  v4 = 0uLL;
  v11 = 0;
  v6 = 0;
  v7 = 0;
  v5 = 0;
  sub_20C2CA8FC(&v4, a1);
  sub_20C2CA8FC(a1, &v8);
  v2 = sub_20C2CA10C((uint64_t *)&v8);
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls((pxrInternal__aapl__pxrReserved__ *)v2) & 1) == 0)
    sub_20C2CA878(&v4);
  return sub_20C2CA10C((uint64_t *)&v4);
}

void sub_20C2A98E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C2CA10C(&a9);
  _Unwind_Resume(a1);
}

void **sub_20C2A990C(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 2) < a2)
  {
    if (a2 >= 0x1555555555555556)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20C152228((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 12 * v6;
    sub_20C2CACCC(a1, v7);
    return sub_20C2CAE80(v7);
  }
  return result;
}

void sub_20C2A99A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2CAE80((void **)va);
  _Unwind_Resume(a1);
}

void sub_20C2A99BC(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath **a3)
{
  size_t CompressedBufferSize;
  char *v7;
  char *v8;
  int64_t v9;
  char *v10;
  int64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  void *__p;
  _BYTE *v16;
  uint64_t v17;
  void *v18;
  _BYTE *v19;
  uint64_t v20;
  void *__src;
  _BYTE *v22;
  uint64_t v23;
  int64_t v24;

  __src = (void *)(0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2));
  sub_20C2B7248(a2, (char *)&__src);
  __src = 0;
  v22 = 0;
  v23 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  __p = 0;
  v16 = 0;
  v17 = 0;
  sub_20BE81ACC((uint64_t)&__src, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2));
  sub_20BE81ACC((uint64_t)&v18, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2));
  sub_20BE81ACC((uint64_t)&__p, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2));
  v14 = 0;
  sub_20C2CC1DC(a1, &v14, *a3, a3[1], &__src, &v18, (uint64_t *)&__p);
  CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 2)));
  v7 = (char *)operator new[](CompressedBufferSize);
  v9 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__src, (const unsigned int *)((v22 - (_BYTE *)__src) >> 2), v7, v8);
  v24 = v9;
  sub_20C2B7248(a2, (char *)&v24);
  sub_20C2A7944(a2, v7, v9);
  v11 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v18, (const int *)((v19 - (_BYTE *)v18) >> 2), v7, v10);
  v24 = v11;
  sub_20C2B7248(a2, (char *)&v24);
  sub_20C2A7944(a2, v7, v11);
  v13 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p, (const int *)((v16 - (_BYTE *)__p) >> 2), v7, v12);
  v24 = v13;
  sub_20C2B7248(a2, (char *)&v24);
  sub_20C2A7944(a2, v7, v13);
  operator delete[](v7);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  if (v18)
  {
    v19 = v18;
    operator delete(v18);
  }
  if (__src)
  {
    v22 = __src;
    operator delete(__src);
  }
}

void sub_20C2A9BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_WriteSpecs(uint64_t **a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  size_t CompressedBufferSize;
  char *v9;
  char *v10;
  uint64_t *v11;
  uint64_t *v12;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v13;
  _DWORD *v14;
  int v15;
  int64_t v16;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v20;
  _DWORD *v21;
  int64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t *v25;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v26;
  _DWORD *v27;
  int64_t v28;
  void *__p;
  _BYTE *v30;
  uint64_t v31;
  unint64_t __src;

  v4 = (*((unsigned __int8 *)a1[791] + 248) << 16) | (*((unsigned __int8 *)a1[791] + 249) << 8) | *((unsigned __int8 *)a1[791]
                                                                                                  + 250);
  if (v4 == 1)
  {
    v5 = *a1;
    v6 = a1[1];
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)*a1) >> 2);
    v30 = 0;
    v31 = 0;
    __p = 0;
    sub_20C2CC48C((char *)&__p, v5, v6, v7);
    sub_20C2A8FE4(a2, (uint64_t)&__p);
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
  }
  else if (v4 > 0x3FF)
  {
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 2)));
    v9 = (char *)operator new[](CompressedBufferSize);
    sub_20BDE36C4(&__p, 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 2));
    __src = 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 2);
    sub_20C2B7248(a2, (char *)&__src);
    v11 = *a1;
    v12 = a1[1];
    v13 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p;
    if (*a1 != v12)
    {
      v14 = __p;
      do
      {
        v15 = *(_DWORD *)v11;
        v11 = (uint64_t *)((char *)v11 + 12);
        *v14++ = v15;
      }
      while (v11 != v12);
    }
    v16 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v13, (const unsigned int *)((v30 - (_BYTE *)v13) >> 2), v9, v10);
    __src = v16;
    sub_20C2B7248(a2, (char *)&__src);
    sub_20C2A7944(a2, v9, v16);
    v18 = *a1;
    v19 = a1[1];
    v20 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p;
    if (*a1 != v19)
    {
      v21 = __p;
      do
      {
        *v21++ = *((_DWORD *)v18 + 1);
        v18 = (uint64_t *)((char *)v18 + 12);
      }
      while (v18 != v19);
    }
    v22 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v20, (const unsigned int *)((v30 - (_BYTE *)v20) >> 2), v9, v17);
    __src = v22;
    sub_20C2B7248(a2, (char *)&__src);
    sub_20C2A7944(a2, v9, v22);
    v24 = *a1;
    v25 = a1[1];
    v26 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p;
    if (*a1 != v25)
    {
      v27 = __p;
      do
      {
        *v27++ = *((_DWORD *)v24 + 2);
        v24 = (uint64_t *)((char *)v24 + 12);
      }
      while (v24 != v25);
    }
    v28 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v26, (const unsigned int *)((v30 - (_BYTE *)v26) >> 2), v9, v23);
    __src = v28;
    sub_20C2B7248(a2, (char *)&__src);
    sub_20C2A7944(a2, v9, v28);
    if (__p)
    {
      v30 = __p;
      operator delete(__p);
    }
    operator delete[](v9);
  }
  else
  {
    sub_20C2A9EA0(a2, (uint64_t)a1);
  }
}

void sub_20C2A9E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  void *v10;

  if (__p)
    operator delete(__p);
  operator delete[](v10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2A9EA0(uint64_t a1, uint64_t a2)
{
  unint64_t __src;

  __src = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  sub_20C2B7248(a1, (char *)&__src);
  return sub_20C2CC508(a1, *(char **)a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2));
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unint64_t a5, int *a6, uint64_t a7)
{
  int *v12;
  _BOOL8 v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  const pxrInternal__aapl__pxrReserved__::TfToken *v17;
  _DWORD *v18;
  char *v19;
  int *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  _DWORD *v30;
  char v31;
  BOOL v32;
  uint64_t v33;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  int v40;
  _QWORD v41[2];

  v12 = a6 + 1;
  v33 = a7 + 264;
  while (1)
  {
    if (a5 >= (uint64_t)(a2[1] - *a2) >> 2)
    {
      *(_QWORD *)&v36 = "usd/crateFile.cpp";
      *((_QWORD *)&v36 + 1) = "_BuildDecompressedPathsImpl";
      *(_QWORD *)&v37 = 4314;
      *((_QWORD *)&v37 + 1) = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsIm"
                              "pl(const vector<uint32_t> &, const vector<int32_t> &, const vector<int32_t> &, size_t, Sdf"
                              "Path, WorkDispatcher &)";
      LOBYTE(v38) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt paths encoding in crate file (index:%zu >= %zu)");
      return;
    }
    if (*(unsigned int *)(*a2 + 4 * a5) >= (unint64_t)((uint64_t)(a1[13] - a1[12]) >> 3))
    {
      *(_QWORD *)&v36 = "usd/crateFile.cpp";
      *((_QWORD *)&v36 + 1) = "_BuildDecompressedPathsImpl";
      *(_QWORD *)&v37 = 4394;
      *((_QWORD *)&v37 + 1) = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsIm"
                              "pl(const vector<uint32_t> &, const vector<int32_t> &, const vector<int32_t> &, size_t, Sdf"
                              "Path, WorkDispatcher &)";
      LOBYTE(v38) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to build paths, (pathIndex[%lu] == %d) > _paths.size().");
      return;
    }
    v13 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a6);
    if (v13)
      break;
    v18 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v13);
    sub_20C01A074(a6, v18);
    sub_20C01A0C8(v12, v18 + 1);
    v19 = (char *)atomic_load(&qword_254988368);
    if (!v19)
      v19 = sub_20BF4742C(&qword_254988368);
    std::mutex::lock((std::mutex *)v19);
    v20 = (int *)(a1[12] + 8 * *(unsigned int *)(*a2 + 4 * a5));
    sub_20C01A074(v20, a6);
    sub_20C01A0C8(v20 + 1, v12);
    std::mutex::unlock((std::mutex *)v19);
LABEL_19:
    if (a5 >= (uint64_t)(a4[1] - *a4) >> 2)
    {
      *(_QWORD *)&v36 = "usd/crateFile.cpp";
      *((_QWORD *)&v36 + 1) = "_BuildDecompressedPathsImpl";
      *(_QWORD *)&v37 = 4353;
      *((_QWORD *)&v37 + 1) = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsIm"
                              "pl(const vector<uint32_t> &, const vector<int32_t> &, const vector<int32_t> &, size_t, Sdf"
                              "Path, WorkDispatcher &)";
      LOBYTE(v38) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read _tokens, jumps index out of bounds");
      return;
    }
    v23 = *(unsigned int *)(*a4 + 4 * a5);
    v24 = (int)v23 > 0;
    if ((int)v23 > 0)
    {
      if (a5 + v23 >= (uint64_t)(a2[1] - *a2) >> 2)
      {
        *(_QWORD *)&v36 = "usd/crateFile.cpp";
        *((_QWORD *)&v36 + 1) = "_BuildDecompressedPathsImpl";
        *(_QWORD *)&v37 = 4369;
        *((_QWORD *)&v37 + 1) = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPaths"
                                "Impl(const vector<uint32_t> &, const vector<int32_t> &, const vector<int32_t> &, size_t,"
                                " SdfPath, WorkDispatcher &)";
        LOBYTE(v38) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt paths jumps table in crate file (jump:%d + thisIndex:%zu >= %zu)");
        return;
      }
      *(_QWORD *)&v36 = a1;
      *((_QWORD *)&v36 + 1) = a2;
      *(_QWORD *)&v37 = a3;
      *((_QWORD *)&v37 + 1) = a4;
      *(_QWORD *)&v38 = a5 + v23;
      *((_QWORD *)&v38 + 1) = a7;
      sub_20BFD6E54(&v39, a6);
      sub_20BFD6EA4(&v40, v12);
      v25 = *(_QWORD *)(a7 + 256);
      v41[0] = 0;
      v41[1] = v25;
      v26 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v41, 0x48uLL);
      *(_BYTE *)(v26 - 11) = 1;
      *(_QWORD *)v26 = off_24C52F4C8;
      v27 = v36;
      v28 = v37;
      *(_OWORD *)(v26 + 40) = v38;
      *(_OWORD *)(v26 + 24) = v28;
      *(_OWORD *)(v26 + 8) = v27;
      sub_20BFD38A4((_DWORD *)(v26 + 56), &v39);
      sub_20BFD38DC((_DWORD *)(v26 + 60), &v40);
      *(_QWORD *)(v26 + 64) = v33;
      (***(void (****)(_QWORD, unint64_t, uint64_t))(v26 - 40))(*(_QWORD *)(v26 - 40), v26, v26 - 8);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v40);
      sub_20BFD265C(&v39);
LABEL_23:
      v29 = (char *)atomic_load(&qword_254988368);
      if (!v29)
        v29 = sub_20BF4742C(&qword_254988368);
      std::mutex::lock((std::mutex *)v29);
      v30 = (_DWORD *)(a1[12] + 8 * *(unsigned int *)(*a2 + 4 * a5));
      sub_20C01A074(a6, v30);
      sub_20C01A0C8(v12, v30 + 1);
      std::mutex::unlock((std::mutex *)v29);
      v31 = 1;
      goto LABEL_28;
    }
    v32 = (_DWORD)v23 == 0;
    if ((_DWORD)v23 == -1)
      goto LABEL_23;
    v31 = 0;
    v24 = v32;
LABEL_28:
    ++a5;
    if ((v31 & 1) == 0 && !v24)
      return;
  }
  if (a5 >= (uint64_t)(a3[1] - *a3) >> 2)
  {
    *(_QWORD *)&v36 = "usd/crateFile.cpp";
    *((_QWORD *)&v36 + 1) = "_BuildDecompressedPathsImpl";
    *(_QWORD *)&v37 = 4326;
    *((_QWORD *)&v37 + 1) = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl"
                            "(const vector<uint32_t> &, const vector<int32_t> &, const vector<int32_t> &, size_t, SdfPath"
                            ", WorkDispatcher &)";
    LOBYTE(v38) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read _tokens, elementToken index out of bounds");
    return;
  }
  v14 = *(_DWORD *)(*a3 + 4 * a5);
  if (v14 >= 0)
    v15 = v14;
  else
    v15 = -v14;
  v16 = a1[15];
  if (v15 < (a1[16] - v16) >> 3)
  {
    v17 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v16 + 8 * v15);
    if (v14 < 0)
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a6, v17, (int *)&v36);
    else
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a6, v17, (int *)&v36);
    v21 = (char *)atomic_load(&qword_254988368);
    if (!v21)
      v21 = sub_20BF4742C(&qword_254988368);
    std::mutex::lock((std::mutex *)v21);
    v22 = (int *)(a1[12] + 8 * *(unsigned int *)(*a2 + 4 * a5));
    sub_20C01A074(v22, &v36);
    sub_20C01A0C8(v22 + 1, (_DWORD *)&v36 + 1);
    std::mutex::unlock((std::mutex *)v21);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
    sub_20BFD265C(&v36);
    goto LABEL_19;
  }
  *(_QWORD *)&v36 = "usd/crateFile.cpp";
  *((_QWORD *)&v36 + 1) = "_BuildDecompressedPathsImpl";
  *(_QWORD *)&v37 = 4335;
  *((_QWORD *)&v37 + 1) = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl(c"
                          "onst vector<uint32_t> &, const vector<int32_t> &, const vector<int32_t> &, size_t, SdfPath, WorkDispatcher &)";
  LOBYTE(v38) = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v36, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read _tokens, tokenIndex out of bounds");
}

void sub_20C2AA3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2AA3FC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 52));
  sub_20BFD265C((_DWORD *)(a1 + 48));
  return a1;
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadRawBytes(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, uint64_t a2, char *a3, __sFILE *a4)
{
  const char *v8;
  const char *v9;
  FILE *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  int v28;

  if (*((_BYTE *)this + 6568))
  {
    v8 = (const char *)*((_QWORD *)this + 820);
    v26 = (uint64_t)this + 6448;
    v27 = v8;
    v28 = sub_20C2A2B6C();
    v9 = (const char *)(*(_QWORD *)(*((_QWORD *)this + 806) + 24) + a2);
    v24 = (char *)this;
    v25 = v9;
    sub_20C2C9E6C((uint64_t)&v25, a4, (size_t)a3);
  }
  else
  {
    v10 = (FILE *)*((_QWORD *)this + 807);
    if (v10)
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(v10, a4, a3, *((_QWORD *)this + 808) + a2);
    }
    else
    {
      v11 = *((_QWORD *)this + 811);
      v12 = (std::__shared_weak_count *)*((_QWORD *)this + 812);
      if (v12)
      {
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldxr(p_shared_owners);
        while (__stxr(v14 + 1, p_shared_owners));
        v22 = v11;
        v23 = v12;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      else
      {
        v22 = *((_QWORD *)this + 811);
        v23 = 0;
      }
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
      if (a2 < 0 || (unint64_t)&a3[a2] > v17)
      {
        v24 = "usd/crateFile.cpp";
        v25 = "Read";
        v26 = 770;
        v27 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v28) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", (size_t)a3, a2, v17);
      }
      else
      {
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22) - a2;
        if (v18 < (unint64_t)a3 || ((v18 | a2) & 0x8000000000000000) != 0)
        {
          v24 = "usd/crateFile.cpp";
          v25 = "Read";
          v26 = 779;
          v27 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v28) = 0;
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", (size_t)a3, v18, v21);
        }
        else
        {
          (*(void (**)(uint64_t, __sFILE *, char *, uint64_t))(*(_QWORD *)v22 + 32))(v22, a4, a3, a2);
        }
      }
      if (v23)
      {
        v19 = (unint64_t *)&v23->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
      }
    }
  }
}

void sub_20C2AA6D0(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v1;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20C2AA6E4(uint64_t a1, __sFILE *a2, char *a3)
{
  ssize_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 32), a2, a3, *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8));
  if (v4 != -1)
    *(_QWORD *)(a1 + 16) += v4;
  return v4 != -1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetIndexForToken(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  _QWORD *v2;
  _QWORD v4[4];
  char v5;

  v2 = sub_20BF2B388(*((_QWORD **)this + 791), a2);
  if (v2)
    return *((unsigned int *)v2 + 6);
  v4[0] = "usd/crateFile.cpp";
  v4[1] = "_GetIndexForToken";
  v4[2] = 4492;
  v4[3] = "TokenIndex pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetIndexForToken(const TfToken &) const";
  v5 = 0;
  if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v4, "iter != _packCtx->tokenToTokenIndex.end()", 0) & 1) != 0)return *((unsigned int *)v2 + 6);
  else
    return 0xFFFFFFFFLL;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(char **a1, unsigned __int8 *a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  char v6;
  char **v7;
  int v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  int v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v25;
  int v26;

  v3 = (uint64_t)(a1[791] + 40);
  v26 = -1;
  v4 = sub_20C2CD110(v3, a2, (uint64_t)a2, &v26);
  v5 = v4;
  if (v6)
  {
    v7 = a1 + 18;
    *((_DWORD *)v4 + 10) = (unint64_t)(a1[19] - a1[18]) >> 2;
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v25);
    v8 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v25);
    v9 = (unint64_t)a1[20];
    v10 = a1[19];
    if ((unint64_t)v10 >= v9)
    {
      v12 = (v10 - *v7) >> 2;
      if ((unint64_t)(v12 + 1) >> 62)
        sub_20BDDF694();
      v13 = v9 - (_QWORD)*v7;
      v14 = v13 >> 1;
      if (v13 >> 1 <= (unint64_t)(v12 + 1))
        v14 = v12 + 1;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      if (v15)
        v16 = (char *)sub_20BDE1330((uint64_t)(a1 + 20), v15);
      else
        v16 = 0;
      v17 = &v16[4 * v12];
      v18 = &v16[4 * v15];
      *(_DWORD *)v17 = v8;
      v11 = v17 + 4;
      v20 = a1[18];
      v19 = a1[19];
      if (v19 != v20)
      {
        do
        {
          v21 = *((_DWORD *)v19 - 1);
          v19 -= 4;
          *((_DWORD *)v17 - 1) = v21;
          v17 -= 4;
        }
        while (v19 != v20);
        v19 = *v7;
      }
      a1[18] = v17;
      a1[19] = v11;
      a1[20] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_DWORD *)v10 = v8;
      v11 = v10 + 4;
    }
    a1[19] = v11;
    if ((v25 & 7) != 0)
    {
      v22 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
      do
        v23 = __ldxr(v22);
      while (__stlxr(v23 - 2, v22));
    }
  }
  return *((unsigned int *)v5 + 10);
}

void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (BYTE6(a2) - 58 > 0xFFFFFFC6)
  {
    if (*(_BYTE *)(a1 + 6568))
    {
      v3 = a1 + 32 * BYTE6(a2) + 2152;
    }
    else
    {
      v4 = a1 + 32 * BYTE6(a2);
      v5 = v4 + 4008;
      v6 = v4 + 296;
      if (*(_QWORD *)(a1 + 6456))
        v3 = v6;
      else
        v3 = v5;
    }
    sub_20C2AAAD0(v3, a2, a3);
  }
  else
  {
    v7[0] = "usd/crateFile.cpp";
    v7[1] = "_UnpackValue";
    v7[2] = 4635;
    v7[3] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_UnpackValue(ValueRep, VtValue *) const";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempted to unpack unsupported type enum value %d", BYTE6(a2));
  }
}

#error "20C2AAA84: call analysis failed (funcsize=31)"

uint64_t sub_20C2AAAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  v6 = a2;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    sub_20BE9E974();
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::GetTypeid(uint64_t a1, uint64_t a2)
{
  void *result;
  void *v3;
  void *v4;

  result = &unk_24C51D8B8;
  switch(BYTE6(a2))
  {
    case 1:
      v3 = (void *)MEMORY[0x24BEDB770];
      v4 = &unk_24C51DCA8;
      goto LABEL_59;
    case 2:
      v3 = (void *)MEMORY[0x24BEDB790];
      v4 = &unk_24C51DCD8;
      goto LABEL_59;
    case 3:
      v3 = (void *)MEMORY[0x24BEDB798];
      v4 = &unk_24C51DD20;
      goto LABEL_59;
    case 4:
      v3 = (void *)MEMORY[0x24BEDB7A0];
      v4 = &unk_24C51DD38;
      goto LABEL_59;
    case 5:
      v3 = (void *)MEMORY[0x24BEDB7D0];
      v4 = &unk_24C51DD50;
      goto LABEL_59;
    case 6:
      v3 = (void *)MEMORY[0x24BEDB7D8];
      v4 = &unk_24C51DD68;
      goto LABEL_59;
    case 7:
      v3 = &unk_24C51BF30;
      v4 = &unk_24C51DDB0;
      goto LABEL_59;
    case 8:
      v3 = (void *)MEMORY[0x24BEDB788];
      v4 = &unk_24C51DD98;
      goto LABEL_59;
    case 9:
      v3 = (void *)MEMORY[0x24BEDB780];
      v4 = &unk_24C51DD80;
      goto LABEL_59;
    case 0xA:
      v3 = &unk_24C516910;
      v4 = &unk_24C51DDC8;
      goto LABEL_59;
    case 0xB:
      v3 = &unk_24C51BCE0;
      v4 = &unk_24C51DDE0;
      goto LABEL_59;
    case 0xC:
      v3 = &unk_24C524DB0;
      v4 = &unk_24C524DC0;
      goto LABEL_59;
    case 0xD:
      v3 = &unk_24C51BF90;
      v4 = &unk_24C51DB28;
      goto LABEL_59;
    case 0xE:
      v3 = &unk_24C51BFC0;
      v4 = &unk_24C51DB10;
      goto LABEL_59;
    case 0xF:
      v3 = &unk_24C51BFE0;
      v4 = &unk_24C51DAF8;
      goto LABEL_59;
    case 0x10:
      v3 = &unk_24C51C010;
      v4 = &unk_24C51DC30;
      goto LABEL_59;
    case 0x11:
      v3 = &unk_24C51C020;
      v4 = &unk_24C51DC18;
      goto LABEL_59;
    case 0x12:
      v3 = &unk_24C51C030;
      v4 = &unk_24C51DC00;
      goto LABEL_59;
    case 0x13:
      v3 = &unk_24C51C110;
      v4 = &unk_24C51DA98;
      goto LABEL_59;
    case 0x14:
      v3 = &unk_24C51C120;
      v4 = &unk_24C51DA50;
      goto LABEL_59;
    case 0x15:
      v3 = &unk_24C51C130;
      v4 = &unk_24C51DA08;
      goto LABEL_59;
    case 0x16:
      v3 = &unk_24C51C140;
      v4 = &unk_24C51D9C0;
      goto LABEL_59;
    case 0x17:
      v3 = &unk_24C51C150;
      v4 = &unk_24C51DA80;
      goto LABEL_59;
    case 0x18:
      v3 = &unk_24C51C160;
      v4 = &unk_24C51DA38;
      goto LABEL_59;
    case 0x19:
      v3 = &unk_24C51C170;
      v4 = &unk_24C51D9F0;
      goto LABEL_59;
    case 0x1A:
      v3 = &unk_24C51C180;
      v4 = &unk_24C51D9A8;
      goto LABEL_59;
    case 0x1B:
      v3 = &unk_24C51C190;
      v4 = &unk_24C51DA68;
      goto LABEL_59;
    case 0x1C:
      v3 = &unk_24C51C1A0;
      v4 = &unk_24C51DA20;
      goto LABEL_59;
    case 0x1D:
      v3 = &unk_24C51C1B0;
      v4 = &unk_24C51D9D8;
      goto LABEL_59;
    case 0x1E:
      v3 = &unk_24C51C1C0;
      v4 = &unk_24C51D990;
      goto LABEL_59;
    case 0x1F:
      return result;
    case 0x20:
      return &unk_24C524D40;
    case 0x21:
      return &unk_24C524D30;
    case 0x22:
      return &unk_24C5249B8;
    case 0x23:
      return &unk_24C524CE0;
    case 0x24:
      return &unk_24C524CF0;
    case 0x25:
      return &unk_24C524D00;
    case 0x26:
      return &unk_24C524D10;
    case 0x27:
      return &unk_24C524D20;
    case 0x28:
      return &unk_24C5269C8;
    case 0x29:
      return &unk_24C51BCF0;
    case 0x2A:
      return &unk_24C527CB0;
    case 0x2B:
      return &unk_24C5298C8;
    case 0x2C:
      return &unk_24C5269D8;
    case 0x2D:
      return &unk_24C526848;
    case 0x2E:
      return &unk_24C52EAA0;
    case 0x2F:
      return &unk_24C529858;
    case 0x30:
      return &unk_24C51BE00;
    case 0x31:
      return &unk_24C524700;
    case 0x32:
      return &unk_24C51BE10;
    case 0x33:
      return &unk_24C527B78;
    case 0x34:
      return &unk_24C520870;
    case 0x35:
      return &unk_24C524D50;
    case 0x36:
      return &unk_24C524D60;
    case 0x37:
      return &unk_24C524CD0;
    case 0x38:
      v3 = &unk_24C525368;
      v4 = &unk_24C525430;
      goto LABEL_59;
    case 0x39:
      v3 = &unk_24C524DD8;
      v4 = &unk_24C524DE8;
LABEL_59:
      if (a2 >= 0)
        result = v3;
      else
        result = v4;
      break;
    default:
      result = (void *)MEMORY[0x24BEDB7C8];
      break;
  }
  return result;
}

_QWORD *sub_20C2AAEF0(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[734] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(MEMORY[0x24BEDB770] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2CD514((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2CD5C0(a1 + 41, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2CD66C(a1 + 273, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2CD718(a1 + 505, (__int128 *)__p);
}

void sub_20C2AAFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AAFDC(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[735] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(MEMORY[0x24BEDB790] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2CFC2C((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2CFCD8(a1 + 45, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2CFD84(a1 + 277, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2CFE30(a1 + 509, (__int128 *)__p);
}

void sub_20C2AB0AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AB0C8(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[736] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(MEMORY[0x24BEDB798] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2D1674((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2D1720(a1 + 49, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2D17CC(a1 + 281, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2D1878(a1 + 513, (__int128 *)__p);
}

void sub_20C2AB19C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AB1B8(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[737] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(MEMORY[0x24BEDB7A0] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2D3BB4((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2D3C60(a1 + 53, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2D3D0C(a1 + 285, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2D3DB8(a1 + 517, (__int128 *)__p);
}

void sub_20C2AB28C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AB2A8(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[738] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(MEMORY[0x24BEDB7D0] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2D5F70((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2D601C(a1 + 57, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2D60C8(a1 + 289, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2D6174(a1 + 521, (__int128 *)__p);
}

void sub_20C2AB37C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AB398(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[739] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(MEMORY[0x24BEDB7D8] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2D8D50((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2D8DFC(a1 + 61, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2D8EA8(a1 + 293, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2D8F54(a1 + 525, (__int128 *)__p);
}

void sub_20C2AB46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AB488(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[740] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAC9F88 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2DB768((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2DB814(a1 + 65, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2DB8C0(a1 + 297, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2DB96C(a1 + 529, (__int128 *)__p);
}

void sub_20C2AB560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AB57C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[741] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(MEMORY[0x24BEDB788] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2DEC78((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2DED24(a1 + 69, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2DEDD0(a1 + 301, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2DEE7C(a1 + 533, (__int128 *)__p);
}

void sub_20C2AB650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AB66C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[742] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(*(_QWORD *)(MEMORY[0x24BEDB780] + 8) & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2E1EEC((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2E1F98(a1 + 73, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2E2044(a1 + 305, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2E20F0(a1 + 537, (__int128 *)__p);
}

void sub_20C2AB740(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AB75C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[743] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CB09018 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2E5650((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2E56FC(a1 + 77, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2E57A8(a1 + 309, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2E5854(a1 + 541, (__int128 *)__p);
}

void sub_20C2AB834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AB850(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[744] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CB09058 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2E7BE8((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2E7C94(a1 + 81, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2E7D40(a1 + 313, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2E7DEC(a1 + 545, (__int128 *)__p);
}

void sub_20C2AB928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AB944(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[745] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAC983ALL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2E9C48((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2E9CF4(a1 + 85, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2E9DA0(a1 + 317, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2E9E4C(a1 + 549, (__int128 *)__p);
}

void sub_20C2ABA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ABA38(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[749] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAC9FBCLL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2EBF84((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2EC030(a1 + 101, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2EC0DC(a1 + 333, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2EC188(a1 + 565, (__int128 *)__p);
}

void sub_20C2ABB10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ABB2C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[750] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAC9FEALL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2EDF28((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2EDFD4(a1 + 105, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2EE080(a1 + 337, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2EE12C(a1 + 569, (__int128 *)__p);
}

void sub_20C2ABC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ABC20(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[751] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA018 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2EFE2C((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2EFED8(a1 + 109, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2EFF84(a1 + 341, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2F0030(a1 + 573, (__int128 *)__p);
}

void sub_20C2ABCF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ABD14(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[752] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA046 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2F1D2C((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2F1DD8(a1 + 113, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2F1E84(a1 + 345, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2F1F30(a1 + 577, (__int128 *)__p);
}

void sub_20C2ABDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ABE08(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[753] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CB0C17CLL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2F3CF8((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2F3DA4(a1 + 117, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2F3E50(a1 + 349, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2F3EFC(a1 + 581, (__int128 *)__p);
}

void sub_20C2ABEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ABEFC(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[754] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA074 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2F5CA8((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2F5D54(a1 + 121, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2F5E00(a1 + 353, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2F5EAC(a1 + 585, (__int128 *)__p);
}

void sub_20C2ABFD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ABFF0(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[755] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA0A2 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2F76EC((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2F7798(a1 + 125, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2F7844(a1 + 357, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2F78F0(a1 + 589, (__int128 *)__p);
}

void sub_20C2AC0C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AC0E4(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[756] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA0D0 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2F963C((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2F96E8(a1 + 129, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2F9794(a1 + 361, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2F9840(a1 + 593, (__int128 *)__p);
}

void sub_20C2AC1BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AC1D8(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[757] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA0FELL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2FB7F4((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2FB8A0(a1 + 133, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2FB94C(a1 + 365, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2FB9F8(a1 + 597, (__int128 *)__p);
}

void sub_20C2AC2B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AC2CC(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[758] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA12CLL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2FD854((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2FD900(a1 + 137, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2FD9AC(a1 + 369, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2FDA58(a1 + 601, (__int128 *)__p);
}

void sub_20C2AC3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AC3C0(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[759] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA15ALL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C2FFACC((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2FFB78(a1 + 141, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C2FFC24(a1 + 373, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C2FFCD0(a1 + 605, (__int128 *)__p);
}

void sub_20C2AC498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AC4B4(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[760] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA188 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C301AD0((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C301B7C(a1 + 145, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C301C28(a1 + 377, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C301CD4(a1 + 609, (__int128 *)__p);
}

void sub_20C2AC58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AC5A8(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[761] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA1B6 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C303B14((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C303BC0(a1 + 149, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C303C6C(a1 + 381, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C303D18(a1 + 613, (__int128 *)__p);
}

void sub_20C2AC680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AC69C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[762] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA1E4 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C305B18((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C305BC4(a1 + 153, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C305C70(a1 + 385, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C305D1C(a1 + 617, (__int128 *)__p);
}

void sub_20C2AC774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AC790(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[763] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA212 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C307B08((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C307BB4(a1 + 157, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C307C60(a1 + 389, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C307D0C(a1 + 621, (__int128 *)__p);
}

void sub_20C2AC868(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AC884(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[746] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CA9B188 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C309AA8((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C309B54(a1 + 89, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C309C00(a1 + 321, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C309CAC(a1 + 553, (__int128 *)__p);
}

void sub_20C2AC95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AC978(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[747] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA240 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C30BB3C((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C30BBE8(a1 + 93, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C30BC94(a1 + 325, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C30BD40(a1 + 557, (__int128 *)__p);
}

void sub_20C2ACA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ACA6C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[748] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA272 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C30DD28((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C30DDD4(a1 + 97, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C30DE80(a1 + 329, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C30DF2C(a1 + 561, (__int128 *)__p);
}

void sub_20C2ACB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ACB60(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[764] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAC17A0 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C30FF1C((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C30FFC8(a1 + 161, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C310074(a1 + 393, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C310120(a1 + 625, (__int128 *)__p);
}

void sub_20C2ACC38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ACC54(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[765] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAC1760 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C3122D0((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C31237C(a1 + 165, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C312428(a1 + 397, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C3124D4(a1 + 629, (__int128 *)__p);
}

void sub_20C2ACD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ACD48(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[766] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAC16ECLL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C31427C((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C314328(a1 + 169, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C3143D4(a1 + 401, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C314480(a1 + 633, (__int128 *)__p);
}

void sub_20C2ACE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ACE3C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[767] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAB01A6 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C315F58((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C316004(a1 + 173, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C3160B0(a1 + 405, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C31615C(a1 + 637, (__int128 *)__p);
}

void sub_20C2ACF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ACF30(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[768] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAB04B6 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C317F54((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C318000(a1 + 177, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C3180AC(a1 + 409, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C318158(a1 + 641, (__int128 *)__p);
}

void sub_20C2AD008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AD024(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[769] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAB04FALL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C31A85C((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C31A908(a1 + 181, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C31A9B4(a1 + 413, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C31AA60(a1 + 645, (__int128 *)__p);
}

void sub_20C2AD0FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AD118(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[770] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAB1260 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C31C50C((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C31C5B8(a1 + 185, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C31C664(a1 + 417, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C31C710(a1 + 649, (__int128 *)__p);
}

void sub_20C2AD1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AD20C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[771] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAC1688 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C31E1CC((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C31E278(a1 + 189, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C31E324(a1 + 421, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C31E3D0(a1 + 653, (__int128 *)__p);
}

void sub_20C2AD2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AD300(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[772] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAB12C4 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C31FD88((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C31FE34(a1 + 193, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C31FEE0(a1 + 425, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C31FF8C(a1 + 657, (__int128 *)__p);
}

void sub_20C2AD3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AD3F4(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[773] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAB11D8 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C321944((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C3219F0(a1 + 197, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C321A9C(a1 + 429, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C321B48(a1 + 661, (__int128 *)__p);
}

void sub_20C2AD4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AD4E8(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[774] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAB1184 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C32278C((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C322838(a1 + 201, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C3228E4(a1 + 433, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C322990(a1 + 665, (__int128 *)__p);
}

void sub_20C2AD5C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AD5DC(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[775] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CABC3EELL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C3235DC((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C323688(a1 + 205, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C323734(a1 + 437, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C3237E0(a1 + 669, (__int128 *)__p);
}

void sub_20C2AD6B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AD6D0(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[776] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CABC45ALL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C323EA4((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C323F50(a1 + 209, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C323FFC(a1 + 441, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C3240A8(a1 + 673, (__int128 *)__p);
}

void sub_20C2AD7A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AD7C4(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[777] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAB122ALL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C3246E0((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C32478C(a1 + 213, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C324838(a1 + 445, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C3248E4(a1 + 677, (__int128 *)__p);
}

void sub_20C2AD89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AD8B8(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[778] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAC17D6 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C324F3C((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C324FE8(a1 + 217, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C325094(a1 + 449, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C325140(a1 + 681, (__int128 *)__p);
}

void sub_20C2AD990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AD9AC(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[779] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAC9D87 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C3267BC((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C326868(a1 + 221, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C326914(a1 + 453, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C3269C0(a1 + 685, (__int128 *)__p);
}

void sub_20C2ADA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ADAA0(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[780] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CABDD1ELL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C329438((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C3294E4(a1 + 225, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C329590(a1 + 457, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C32963C(a1 + 689, (__int128 *)__p);
}

void sub_20C2ADB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ADB94(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[781] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CA5A9EBLL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C32B208((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C32B2B4(a1 + 229, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C32B360(a1 + 461, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C32B40C(a1 + 693, (__int128 *)__p);
}

void sub_20C2ADC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ADC88(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[782] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAC1926 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C32C334((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C32C3E0(a1 + 233, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C32C48C(a1 + 465, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C32C538(a1 + 697, (__int128 *)__p);
}

void sub_20C2ADD60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ADD7C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[783] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAC18D0 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C32DA38((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C32DAE4(a1 + 237, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C32DB90(a1 + 469, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C32DC3C(a1 + 701, (__int128 *)__p);
}

void sub_20C2ADE54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ADE70(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[784] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CB0C148 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C32EB40((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C32EBEC(a1 + 241, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C32EC98(a1 + 473, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C32ED44(a1 + 705, (__int128 *)__p);
}

void sub_20C2ADF48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2ADF64(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[785] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA2A4 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C32F338((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C32F3E4(a1 + 245, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C32F490(a1 + 477, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C32F53C(a1 + 709, (__int128 *)__p);
}

void sub_20C2AE03C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AE058(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[786] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAB052CLL & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C33012C((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C3301D8(a1 + 249, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C330284(a1 + 481, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C330330(a1 + 713, (__int128 *)__p);
}

void sub_20C2AE130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AE14C(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[787] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CABEA02 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C331800((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C3318AC(a1 + 253, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C331958(a1 + 485, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C331A04(a1 + 717, (__int128 *)__p);
}

void sub_20C2AE224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AE240(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[788] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAB1142 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C33396C((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C333A18(a1 + 257, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C333AC4(a1 + 489, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C333B70(a1 + 721, (__int128 *)__p);
}

void sub_20C2AE318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AE334(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[789] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CACA312 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C335988((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C335A34(a1 + 261, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C335AE0(a1 + 493, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C335B8C(a1 + 725, (__int128 *)__p);
}

void sub_20C2AE40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AE428(uint64_t *a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *__p[2];
  char v6;
  __int128 v7;
  void **v8;

  v2 = operator new(0x10uLL);
  *v2 = 0;
  v2[1] = 0;
  a1[790] = (uint64_t)v2;
  *(_QWORD *)&v7 = a1;
  *((_QWORD *)&v7 + 1) = v2;
  sub_20BDDC0E4(__p, (char *)(0x800000020CAC1850 & 0x7FFFFFFFFFFFFFFFLL));
  v8 = __p;
  v3 = sub_20C2CD7C4(a1 + 27, (unsigned __int8 *)__p, (uint64_t)&unk_20CAC184C, (__int128 **)&v8);
  sub_20C337900((_QWORD *)(v3 + 32), &v7);
  if (v6 < 0)
    operator delete(__p[0]);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C3379AC(a1 + 265, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  sub_20C337A58(a1 + 497, (__int128 *)__p);
  __p[0] = a1;
  __p[1] = v2;
  return sub_20C337B04(a1 + 729, (__int128 *)__p);
}

void sub_20C2AE500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_IsKnownSection(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this, const char *a2)
{
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = 0;
  do
  {
    v4 = strcmp((&off_24C52EBB0)[v3], (const char *)this);
    if (!v4)
      break;
    v5 = v3 == 10;
    v3 += 2;
  }
  while (!v5);
  return v4 == 0;
}

void *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyField(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_254988380);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_254988380))
  {
    dword_254988374 = -1;
    __cxa_guard_release(&qword_254988380);
  }
  return &unk_254988370;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2549883A0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2549883A0))
  {
    qword_254988388 = 0;
    unk_254988390 = 0;
    qword_254988398 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254988388, &dword_20BDBC000);
    __cxa_guard_release(&qword_2549883A0);
  }
  return &qword_254988388;
}

uint64_t *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)&qword_2549883B0);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_2549883B0))
  {
    __cxa_atexit((void (*)(void *))sub_20C20ACA4, &qword_2549883A8, &dword_20BDBC000);
    __cxa_guard_release(&qword_2549883B0);
  }
  return &qword_2549883A8;
}

double pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec::Spec(uint64_t a1, uint64_t a2)
{
  int v2;
  double result;

  v2 = *(_DWORD *)(a2 + 12);
  result = *(double *)(a2 + 4);
  *(double *)a1 = result;
  *(_DWORD *)(a1 + 8) = v2;
  return result;
}

{
  int v2;
  double result;

  v2 = *(_DWORD *)(a2 + 12);
  result = *(double *)(a2 + 4);
  *(double *)a1 = result;
  *(_DWORD *)(a1 + 8) = v2;
  return result;
}

double pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec_0_0_1::Spec_0_0_1(uint64_t a1, uint64_t a2)
{
  int v2;
  double result;

  v2 = *(_DWORD *)(a2 + 8);
  result = *(double *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 12) = v2;
  return result;
}

{
  int v2;
  double result;

  v2 = *(_DWORD *)(a2 + 8);
  result = *(double *)a2;
  *(_QWORD *)(a1 + 4) = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 12) = v2;
  return result;
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section *this, const char *__s, uint64_t a3, uint64_t a4)
{
  _QWORD v7[4];
  char v8;

  *((_QWORD *)this + 2) = a3;
  *((_QWORD *)this + 3) = a4;
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (strlen(__s) < 0x10
    || (v7[0] = "usd/crateFile.cpp",
        v7[1] = "_Section",
        v7[2] = 4800,
        v7[3] = "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section::_Section(const char *, int64_t, int64_t)",
        v8 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "strlen(inName) <= _SectionNameMaxLength", 0) & 1) != 0))
  {
    strcpy((char *)this, __s);
  }
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::operator<<(_QWORD *a1, uint64_t a2)
{
  sub_20BDDC1C8(a1, (uint64_t)"ValueRep enum=", 14);
  std::ostream::operator<<();
  if (a2 < 0)
    sub_20BDDC1C8(a1, (uint64_t)" (array)", 8);
  sub_20BDDC1C8(a1, (uint64_t)" payload=", 9);
  return std::ostream::operator<<();
}

_QWORD *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::operator<<(_QWORD *a1)
{
  _QWORD *v1;

  sub_20BDDC1C8(a1, (uint64_t)"TimeSamples with ", 17);
  v1 = (_QWORD *)std::ostream::operator<<();
  return sub_20BDDC1C8(v1, (uint64_t)" samples", 8);
}

uint64_t pxrInternal__aapl__pxrReserved__::Usd_CrateFile::operator<<()
{
  return std::ostream::operator<<();
}

uint64_t *sub_20C2AE8B8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C52EAA0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C52EAA0, (char *)0x30, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C2AE974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2AE9B8(uint64_t a1, void *a2)
{
  void *v3;

  sub_20BF776C4(a1, a2);
  sub_20C2AE9E8(a1 + 16, v3);
  return a1;
}

uint64_t sub_20C2AE9E8(uint64_t a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = (_QWORD *)*v3;
  *v3 = 0;
  if (v4)
  {
    do
    {
      v5 = (uint64_t)v4;
      v4 = (_QWORD *)*v4;
      tbb::internal::deallocate_via_handler_v3(v5, a2);
    }
    while (v4);
    v3 = *(_QWORD **)(a1 + 16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  tbb::internal::deallocate_via_handler_v3((uint64_t)v3, a2);
  return a1;
}

unint64_t **sub_20C2AEA3C(unint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  unint64_t *v9;
  unint64_t v10;

  v8 = operator new(0x258uLL);
  v9 = sub_20C2AEAA0(v8, a2, a3, a4);
  *a1 = v9;
  do
    v10 = __ldxr(v9);
  while (__stxr(v10 + 1, v9));
  return a1;
}

_QWORD *sub_20C2AEAA0(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v9;

  *a1 = 0;
  v5 = *a2;
  v6 = a2[1];
  *a2 = 0;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v5 + a3;
  if (a4 == -1)
    v7 = v6;
  else
    v7 = a4;
  a1[4] = v7;
  sub_20C2AEB1C((uint64_t)(a1 + 5), 8uLL, &v9);
  return a1;
}

void sub_20C2AEB04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE99858(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2AEB1C(uint64_t a1, unint64_t a2, _WORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  char v9;
  uint64_t v11;

  *(_WORD *)a1 = *a3;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = (_QWORD *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x38);
  v5[6] = 0;
  *v5 = 0;
  *(_QWORD *)(a1 + 32) = v5;
  *(_DWORD *)(a1 + 44) = 1082130432;
  if (a2 <= 1)
    v6 = 1;
  else
    v6 = a2;
  v7 = 2 * v6 - 1;
  v8 = HIDWORD(v7) != 0;
  __dmb(0xBu);
  if (HIDWORD(v7))
    v7 >>= 32;
  v9 = 32 * v8;
  if (v7 >= 0x10000)
  {
    v7 >>= 16;
    v9 = (32 * v8) | 0x10;
  }
  if (v7 >= 0x100)
  {
    v7 >>= 8;
    v9 |= 8u;
  }
  if (v7 >= 0x10)
  {
    v7 >>= 4;
    v9 |= 4u;
  }
  if (v7 >= 4)
  {
    v7 >>= 2;
    v9 += 2;
  }
  *(_QWORD *)(a1 + 8) = 1 << (((v7 & 2) != 0) + v9);
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v11 = *(_QWORD *)(a1 + 32);
  sub_20BF6EE60(a1, 0, &v11);
  return a1;
}

void sub_20C2AEC5C(_Unwind_Exception *a1, void *a2)
{
  uint64_t v2;

  sub_20C2AE9E8(v2 + 16, a2);
  _Unwind_Resume(a1);
}

unint64_t **sub_20C2AEC70(unint64_t **a1, void *a2)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a1;
  if (*a1)
  {
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20C2AE9B8((uint64_t)(v3 + 5), a2);
      sub_20BE99858((uint64_t)(v3 + 1), 0);
      operator delete(v3);
    }
  }
  return a1;
}

unint64_t **sub_20C2AECCC(unint64_t **a1)
{
  void *v2;

  sub_20C2A0EB4(a1);
  return sub_20C2AEC70(a1, v2);
}

void sub_20C2AECF4(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C2AED34((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_20C2AED34(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = v2 - 64;
    do
    {
      if (*(__int16 *)(v4 + 4) != -1)
      {
        sub_20C2AEDD4(v4);
        *(_WORD *)(v4 + 4) = -1;
      }
      v5 = v4 == v3;
      v4 -= 64;
    }
    while (!v5);
  }
  a1[1] = v3;
}

uint64_t sub_20C2AED98(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    sub_20C2AEDD4(a1);
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

void sub_20C2AEDD4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 56);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

unint64_t sub_20C2AEE38()
{
  int *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;

  v0 = (int *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_MMAP_PREFETCH_KB);
  if (!v0)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<int>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_MMAP_PREFETCH_KB);
    v0 = (int *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_MMAP_PREFETCH_KB);
  }
  v1 = *v0;
  v2 = sub_20C2A0500() + (v1 << 10) - 1;
  v3 = (sub_20C2AEECC() & v2) >> 10;
  if (v1 != (_DWORD)v3)
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "Rounded USDC_MMAP_PREFETCH_KB value %d to %d", v1, v3);
  return v3;
}

uint64_t sub_20C2AEECC()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_2549883E0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2549883E0))
  {
    qword_2549883D8 = ~(unint64_t)(sub_20C2A0500() - 1);
    __cxa_guard_release(&qword_2549883E0);
  }
  return qword_2549883D8;
}

void sub_20C2AEF2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549883E0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2AEF44(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4)
{
  __int128 v7;
  char v8;
  unsigned __int8 v9;
  __int16 v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[256];
  uint64_t v30;
  _QWORD v31[11];

  v31[9] = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_DWORD *)(a1 + 72) = 1065353216;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 1065353216;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_DWORD *)(a1 + 152) = 1065353216;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  if (*((char *)a4 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)(a1 + 224), *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v7 = *a4;
    *(_QWORD *)(a1 + 240) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 224) = v7;
  }
  if (*(char *)(a2 + 6535) < 0)
  {
    if (*(_QWORD *)(a2 + 6520))
      goto LABEL_6;
  }
  else if (*(_BYTE *)(a2 + 6535))
  {
LABEL_6:
    v8 = *(_BYTE *)(a2 + 6370);
    *(_WORD *)(a1 + 248) = *(_WORD *)(a2 + 6368);
    *(_BYTE *)(a1 + 250) = v8;
    goto LABEL_10;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_2549883F0);
  if ((v9 & 1) == 0)
  {
    v24 = __cxa_guard_acquire(&qword_2549883F0);
    if ((_DWORD)v24)
    {
      v26 = sub_20C2AF440(v24, v25);
      word_2549883E8 = v26;
      byte_2549883EA = BYTE2(v26);
      __cxa_guard_release(&qword_2549883F0);
    }
  }
  v10 = word_2549883E8;
  *(_BYTE *)(a1 + 250) = byte_2549883EA;
  *(_WORD *)(a1 + 248) = v10;
LABEL_10:
  v11 = (uint64_t *)(a1 + 256);
  sub_20C2AF5CC((_QWORD *)(a1 + 256), *a3);
  *(_OWORD *)(a1 + 720) = *(_OWORD *)a3;
  *a3 = 0;
  a3[1] = 0;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v29);
  v27 = 0;
  v28 = v30;
  v12 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v27, 0x20uLL);
  *((_BYTE *)v12 - 11) = 1;
  *v12 = &off_24C52EE98;
  v12[1] = a1;
  v12[2] = a2;
  v12[3] = v31;
  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v12 - 5))(*(v12 - 5), v12, (uint64_t)(v12 - 1));
  v27 = 0;
  v28 = v30;
  v13 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v27, 0x20uLL);
  *((_BYTE *)v13 - 11) = 1;
  *v13 = &off_24C52EEE0;
  v13[1] = a1;
  v13[2] = a2;
  v13[3] = v31;
  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v13 - 5))(*(v13 - 5), v13, (uint64_t)(v13 - 1));
  v27 = 0;
  v28 = v30;
  v14 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v27, 0x20uLL);
  *((_BYTE *)v14 - 11) = 1;
  *v14 = &off_24C52EF28;
  v14[1] = a1;
  v14[2] = a2;
  v14[3] = v31;
  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v14 - 5))(*(v14 - 5), v14, (uint64_t)(v14 - 1));
  v27 = 0;
  v28 = v30;
  v15 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v27, 0x20uLL);
  *((_BYTE *)v15 - 11) = 1;
  *v15 = &off_24C52EF70;
  v15[1] = a1;
  v15[2] = a2 + 72;
  v15[3] = v31;
  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v15 - 5))(*(v15 - 5), v15, (uint64_t)(v15 - 1));
  v27 = 0;
  v28 = v30;
  v16 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v27, 0x20uLL);
  *((_BYTE *)v16 - 11) = 1;
  *v16 = &off_24C52EFB8;
  v16[1] = a1;
  v16[2] = a2;
  v16[3] = v31;
  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v16 - 5))(*(v16 - 5), v16, (uint64_t)(v16 - 1));
  v27 = 0;
  v28 = v30;
  v17 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&v27, 0x20uLL);
  *((_BYTE *)v17 - 11) = 1;
  *v17 = &off_24C52F000;
  v17[1] = a1;
  v17[2] = a2;
  v17[3] = v31;
  (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v17 - 5))(*(v17 - 5), v17, (uint64_t)(v17 - 1));
  v18 = *(_QWORD *)(a2 + 6336);
  v19 = *(_QWORD *)(a2 + 6344);
  if (v18 != v19)
  {
    for (i = v18 + 32; i != v19; i += 32)
    {
      if (*(_QWORD *)(i + 16) < *(_QWORD *)(v18 + 16))
        v18 = i;
    }
  }
  if (v18 == v19)
    v21 = 88;
  else
    v21 = *(_QWORD *)(v18 + 16);
  v22 = *(_QWORD *)(a1 + 272);
  if (v22 > v21 || *(_QWORD *)(a1 + 288) + v22 < v21)
  {
    sub_20C2B209C(a1 + 256);
    *v11 = v21;
    v11 = (uint64_t *)(a1 + 272);
  }
  *v11 = v21;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v29);
  return a1;
}

void sub_20C2AF31C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void **v8;
  va_list va;

  va_start(va, a3);
  __cxa_guard_abort(&qword_2549883F0);
  if (*(char *)(v3 + 247) < 0)
    operator delete(*v8);
  sub_20C2B2388((void ***)va);
  sub_20C2B240C(v7);
  sub_20BEB3FA4(v6);
  sub_20C2B2488(v5);
  sub_20BEB3F28(v4);
  sub_20BF20BCC(v3);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2AF3C8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;

  v2 = a1 + 53;
  v3 = (_QWORD *)a1[56];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 11));
  sub_20C2B00EC(a1 + 8);
  sub_20C2B0254(a1 + 5);
  v5 = (void *)a1[3];
  a1[3] = 0;
  if (v5)
    operator delete[](v5);
  return a1;
}

uint64_t sub_20C2AF440(uint64_t a1, const char *a2)
{
  unint64_t v2;
  __int128 v3;
  void **v4;
  int v5;
  char *v6;
  BOOL v7;
  int v8;
  int v9;
  unsigned __int8 v10;
  void **v12;
  const char *v13;
  uint64_t v14;
  _QWORD v16[4];
  char v17;
  void *__p[2];
  uint64_t v19;

  v2 = atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_WRITE_NEW_USDC_FILES_AS_VERSION);
  if (!v2)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::USD_WRITE_NEW_USDC_FILES_AS_VERSION);
    v2 = atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USD_WRITE_NEW_USDC_FILES_AS_VERSION);
  }
  if (*(char *)(v2 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)v2, *(_QWORD *)(v2 + 8));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    v19 = *(_QWORD *)(v2 + 16);
    *(_OWORD *)__p = v3;
  }
  if (v19 >= 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  v5 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version::FromString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version *)v4, a2);
  if ((_BYTE)v5)
    v7 = 1;
  else
    v7 = (v5 & 0xFF00 | (v5 << 16) & 0xFFFFFF | BYTE2(v5)) == 0;
  if (v7)
    goto LABEL_19;
  v8 = BYTE1(v5);
  v9 = BYTE2(v5);
  if (BYTE1(v5) < 0xAu)
  {
    v10 = 0;
    goto LABEL_23;
  }
  if (BYTE1(v5) != 10 || BYTE2(v5) != 0)
  {
LABEL_19:
    v16[0] = "usd/crateFile.cpp";
    v16[1] = "_GetVersionForNewlyCreatedFiles";
    v16[2] = 400;
    v16[3] = "CrateFile::Version pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_GetVersionForNewlyCreatedFiles()";
    v17 = 0;
    if (v19 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v16, (pxrInternal__aapl__pxrReserved__ *)"Invalid value '%s' for USD_WRITE_NEW_USDC_FILES_AS_VERSION - falling back to default '%s'", v6, v12, "0.9.0");
    v14 = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version::FromString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Version *)"0.9.0", v13);
    v10 = v14;
    v8 = BYTE1(v14);
    v9 = BYTE2(v14);
    goto LABEL_23;
  }
  v9 = 0;
  v10 = 0;
  v8 = 10;
LABEL_23:
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  return (v9 << 16) | (v8 << 8) | v10;
}

void sub_20C2AF5B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2AF5CC(_QWORD *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  int i;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  void *__p[2];

  *a1 = 0;
  a1[1] = a2;
  a1[2] = 0;
  v3 = operator new[](0x80000uLL);
  a1[5] = &unk_24C52ECD0;
  a1[3] = v3;
  a1[4] = 0;
  v5 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v4);
  a1[6] = v5;
  bzero(v5, 0x2C0uLL);
  *(int64x2_t *)(a1[6] + 256) = vdupq_n_s64(0x10uLL);
  a1[8] = &unk_24C52ED80;
  a1[5] = &unk_24C52EC60;
  v7 = (void *)tbb::internal::NFS_Allocate(1uLL, 704, 0, v6);
  a1[9] = v7;
  bzero(v7, 0x2C0uLL);
  *(_OWORD *)(a1[9] + 256) = xmmword_20CADE9A0;
  a1[8] = &unk_24C52ED10;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 11));
  a1[56] = 0;
  v8 = operator new(0x20uLL);
  *v8 = &off_24C52EDC0;
  v8[1] = a1 + 11;
  v8[2] = a1;
  a1[56] = v8;
  a1[57] = 0;
  for (i = 1; i != 8; ++i)
  {
    __p[0] = operator new[](0x80000uLL);
    __p[1] = 0;
    v10 = a1[6];
    v11 = (unint64_t *)(v10 + 128);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 + 1, v11));
    sub_20BF39FFC((_QWORD *)(v10 + 40 * ((3 * (_BYTE)v12) & 7) + 384), (uint64_t)__p, v12, a1 + 5, (uint64_t (*)(_QWORD *, uint64_t))sub_20C2B00DC);
    v13 = __p[0];
    __p[0] = 0;
    if (v13)
      operator delete[](v13);
  }
  return a1;
}

void sub_20C2AF760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *v12;
  void *v14;

  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v12);
  sub_20C2B00EC(v11);
  sub_20C2B0254(v10);
  v14 = *(void **)(v9 + 24);
  *(_QWORD *)(v9 + 24) = 0;
  if (v14)
    operator delete[](v14);
  _Unwind_Resume(a1);
}

void sub_20C2AF804(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_20C2B0254(a1);
  operator delete(v1);
}

uint64_t sub_20C2AF818(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, 16 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C2AF830(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 16 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C2AF848(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4;

  v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4)
    tbb::internal::throw_exception_v4(1);
  return v4;
}

uint64_t sub_20C2AF884(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

void sub_20C2AF88C(_QWORD *a1)
{
  void *v1;

  v1 = (void *)sub_20C2B00EC(a1);
  operator delete(v1);
}

uint64_t sub_20C2AF8A0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, 24 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C2AF8BC(_QWORD *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 40))(a1, a2, 24 * *(_QWORD *)(a1[1] + 256) + 16);
}

uint64_t sub_20C2AF8D8(int a1, tbb::internal *this, uint64_t a3, void *a4)
{
  uint64_t v4;

  v4 = tbb::internal::NFS_Allocate((unint64_t)this, 1, 0, a4);
  if (!v4)
    tbb::internal::throw_exception_v4(1);
  return v4;
}

uint64_t sub_20C2AF914(int a1, tbb::internal *this)
{
  return tbb::internal::NFS_Free(this, this);
}

__n128 sub_20C2AF924(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24C52EDC0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C2AF964(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C52EDC0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C2AF98C(uint64_t a1, uint64_t a2)
{
  return sub_20C2AF9DC((uint64_t *)(a1 + 8), a2);
}

uint64_t sub_20C2AF994(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52EE78))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2AF9D0()
{
  return &unk_24C52EE78;
}

uint64_t sub_20C2AF9DC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD v8[2];

  v4 = *a1;
  v5 = *(_QWORD *)(*a1 + 256);
  v8[0] = 0;
  v8[1] = v5;
  v6 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x20uLL);
  *((_BYTE *)v6 - 11) = 1;
  *v6 = &off_24C52EE40;
  v6[1] = a1;
  v6[2] = a2;
  v6[3] = v4 + 264;
  return (**(uint64_t (***)(_QWORD, _QWORD *, uint64_t))*(v6 - 5))(*(v6 - 5), v6, (uint64_t)(v6 - 1));
}

uint64_t sub_20C2AFA60(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unint64_t *Instance;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
  v2 = *(_QWORD *)(a1 + 8);
  v3 = atomic_load(*(unint64_t **)(a1 + 16));
  sub_20C2AFB7C(*(_QWORD **)(v2 + 8));
  v4 = *(unint64_t **)(a1 + 16);
  while (1)
  {
    v5 = __ldaxr(v4);
    if (v5 != v3)
      break;
    if (!__stlxr(0, v4))
      goto LABEL_12;
  }
  __clrex();
  do
  {
    sub_20C2AFB7C(*(_QWORD **)(v2 + 8));
    v6 = *(unint64_t **)(a1 + 16);
    while (1)
    {
      v7 = __ldaxr(v6);
      if (v7 != v5)
        break;
      if (!__stlxr(0, v6))
      {
        v8 = 1;
        goto LABEL_11;
      }
    }
    v8 = 0;
    __clrex();
LABEL_11:
    v5 = v7;
  }
  while (!v8);
LABEL_12:
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v10 = v13;
  v11 = atomic_load(Instance + 18);
  if (v10 < v11
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v13, *(_QWORD *)(a1 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v13);
  return 0;
}

void sub_20C2AFB64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C2AFB7C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  std::string *p_p;
  std::string::size_type size;
  std::string *v16;
  void *v17;
  void *i;
  uint64_t v19;
  uint64_t v20;
  std::string *v21;
  void *__dst;
  unint64_t v23;
  const char *v24;
  char v25;
  std::string __p;
  std::string v27;
  unint64_t v28;

  v19 = 0;
  v20 = 0;
  for (i = operator new[](0x80000uLL);
        sub_20C2AFE90((uint64_t)(a1 + 8), (uint64_t)&i);
        sub_20BF39FFC((_QWORD *)(v6 + 40 * ((3 * (_BYTE)v8) & 7) + 384), (uint64_t)&i, v8, a1 + 5, (uint64_t (*)(_QWORD *, uint64_t))sub_20C2B00DC))
  {
    v2 = a1[1];
    v4 = i;
    v3 = v19;
    v5 = v20;
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v28);
    if ((*(uint64_t (**)(uint64_t, void *, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, v4, v3, v5) != v3)
    {
      memset(&v27, 0, sizeof(v27));
      if (!sub_20BFCC4FC((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v28))
      {
        v21 = 0;
        __dst = 0;
        v23 = 0;
        v9 = sub_20BEC5244(&v28, 0);
        v10 = sub_20BEDAF68();
        if (v9 != (_QWORD *)v10)
        {
          v11 = (unint64_t)__dst;
          do
          {
            v12 = (__int128 *)(v9 + 7);
            if (v11 >= v23)
            {
              v11 = sub_20BE4EE50((uint64_t *)&v21, v12);
            }
            else
            {
              if (*((char *)v9 + 79) < 0)
              {
                sub_20BDDBFAC((_BYTE *)v11, (void *)v9[7], v9[8]);
              }
              else
              {
                v13 = *v12;
                *(_QWORD *)(v11 + 16) = v9[9];
                *(_OWORD *)v11 = v13;
              }
              v11 += 24;
            }
            __dst = (void *)v11;
            v9 = (_QWORD *)v9[1];
          }
          while (v9 != (_QWORD *)v10);
        }
        MEMORY[0x212B929D0](&v27, ": ");
        pxrInternal__aapl__pxrReserved__::TfStringJoin("; ", &v21, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        else
          size = __p.__r_.__value_.__l.__size_;
        std::string::append(&v27, (const std::string::value_type *)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
        sub_20BDE5038((void ***)&__p);
      }
      v21 = (std::string *)"usd/crateFile.cpp";
      __dst = "WriteToAsset";
      v23 = 194;
      v24 = "int64_t pxrInternal__aapl__pxrReserved__::WriteToAsset(ArWritableAsset *, const void *, int64_t, int64_t)";
      v25 = 0;
      v16 = &v27;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v16 = (std::string *)v27.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed writing usdc data%s", (const char *)v16);
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v28);
    v19 = 0;
    v6 = a1[6];
    v7 = (unint64_t *)(v6 + 128);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
  }
  v17 = i;
  i = 0;
  if (v17)
    operator delete[](v17);
}

void sub_20C2AFDFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a23 < 0)
    operator delete(__p);
  __p = &a13;
  sub_20BDE5038((void ***)&__p);
  if (a29 < 0)
    operator delete(a24);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)(v29 - 88));
  if (a10)
    operator delete[](a10);
  _Unwind_Resume(a1);
}

BOOL sub_20C2AFE90(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(unint64_t **)(a1 + 8);
  while (1)
  {
    v5 = *v4;
    __dmb(0xBu);
    v6 = v4[16];
    __dmb(0xBu);
    v7 = v6 - v5;
    v8 = v7 > 0;
LABEL_3:
    if (v7 < 1)
      return 0;
    do
    {
      while (1)
      {
        v9 = __ldaxr(v4);
        if (v9 == v5)
          break;
        __clrex();
        do
          v10 = __ldxr(v4);
        while (__stxr(v10, v4));
        if (v10 != v5)
        {
          v11 = v4[16];
          __dmb(0xBu);
          v7 = v11 - v10;
          v5 = v10;
          goto LABEL_3;
        }
      }
    }
    while (__stlxr(v5 + 1, v4));
    if (sub_20C2AFF60((uint64_t *)&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1))
      return v8;
  }
}

BOOL sub_20C2AFF60(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22[4];

  v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8)
        break;
      sched_yield();
    }
  }
  v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8)
        break;
      sched_yield();
    }
  }
  v13 = *a1;
  __dmb(0xBu);
  v14 = *(_QWORD *)(a4 + 8);
  v15 = *(_QWORD *)(v14 + 256) - 1;
  v16 = v15 & (a3 >> 3);
  if (v16 == v15)
    v17 = v13;
  else
    v17 = 0;
  v22[0] = v8 + 8;
  v22[1] = (uint64_t)a1;
  v22[2] = v17;
  v22[3] = a4;
  v18 = *(_QWORD *)(v13 + 8) & (1 << v16);
  if (v18)
  {
    sub_20C2B0080((uint64_t)a1, a2, v13, v16);
  }
  else
  {
    v19 = (unint64_t *)(v14 + 272);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
  }
  sub_20BF39F2C(v22);
  return v18 != 0;
}

void sub_20C2B006C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF39F2C(&a9);
  _Unwind_Resume(a1);
}

void sub_20C2B0080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v5 = a3 + 24 * a4;
  v7 = *(_QWORD *)(v5 + 16);
  v6 = v5 + 16;
  *(_QWORD *)v6 = 0;
  v8 = *(void **)a2;
  *(_QWORD *)a2 = v7;
  if (v8)
    operator delete[](v8);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(v6 + 8);
  v9 = *(void **)v6;
  *(_QWORD *)v6 = 0;
  if (v9)
    operator delete[](v9);
}

_QWORD *sub_20C2B00DC(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  v3 = a2[1];
  *a2 = 0;
  *result = v2;
  result[1] = v3;
  return result;
}

uint64_t sub_20C2B00EC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = &unk_24C52ED10;
  sub_20C2B0170((uint64_t)a1);
  v2 = 0;
  v3 = a1[1] + 400;
  do
  {
    v4 = *(void **)(v3 + v2);
    __dmb(0xBu);
    if ((unint64_t)v4 >= 2)
    {
      (*(void (**)(_QWORD *))(*a1 + 24))(a1);
      __dmb(0xBu);
      *(_QWORD *)(v3 + v2) = 0;
    }
    v2 += 40;
  }
  while (v2 != 320);
  return sub_20C2B0218((uint64_t)a1, v4);
}

void sub_20C2B0170(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *__p[3];

  __p[1] = 0;
  __p[2] = 0;
  __p[0] = operator new[](0x80000uLL);
  while (1)
  {
    v2 = *(uint64_t **)(a1 + 8);
    v3 = v2[16];
    __dmb(0xBu);
    v4 = *v2;
    __dmb(0xBu);
    v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4)
        break;
    }
    sub_20C2AFE90(a1, (uint64_t)__p);
  }
  v7 = __p[0];
  __p[0] = 0;
  if (v7)
    operator delete[](v7);
}

void sub_20C2B01FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete[](__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2B0218(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = &unk_24C52ED80;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

uint64_t sub_20C2B0254(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = &unk_24C52EC60;
  sub_20C2B02D8((uint64_t)a1);
  v2 = 0;
  v3 = a1[1] + 400;
  do
  {
    v4 = *(void **)(v3 + v2);
    __dmb(0xBu);
    if ((unint64_t)v4 >= 2)
    {
      (*(void (**)(_QWORD *))(*a1 + 24))(a1);
      __dmb(0xBu);
      *(_QWORD *)(v3 + v2) = 0;
    }
    v2 += 40;
  }
  while (v2 != 320);
  return sub_20C2B037C((uint64_t)a1, v4);
}

void sub_20C2B02D8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *__p[2];

  __p[0] = operator new[](0x80000uLL);
  __p[1] = 0;
  while (1)
  {
    v2 = *(uint64_t **)(a1 + 8);
    v3 = v2[16];
    __dmb(0xBu);
    v4 = *v2;
    __dmb(0xBu);
    v5 = v2[16];
    __dmb(0xBu);
    if (v3 == v5)
    {
      v6 = v2[34];
      __dmb(0xBu);
      if (v3 == v6 + v4)
        break;
    }
    sub_20C2B03B8(a1, (uint64_t)__p);
  }
  v7 = __p[0];
  __p[0] = 0;
  if (v7)
    operator delete[](v7);
}

void sub_20C2B0360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete[](__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2B037C(uint64_t a1, void *a2)
{
  *(_QWORD *)a1 = &unk_24C52ECD0;
  tbb::internal::NFS_Free(*(tbb::internal **)(a1 + 8), a2);
  return a1;
}

BOOL sub_20C2B03B8(uint64_t a1, uint64_t a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v4 = *(unint64_t **)(a1 + 8);
  while (1)
  {
    v5 = *v4;
    __dmb(0xBu);
    v6 = v4[16];
    __dmb(0xBu);
    v7 = v6 - v5;
    v8 = v7 > 0;
LABEL_3:
    if (v7 < 1)
      return 0;
    do
    {
      while (1)
      {
        v9 = __ldaxr(v4);
        if (v9 == v5)
          break;
        __clrex();
        do
          v10 = __ldxr(v4);
        while (__stxr(v10, v4));
        if (v10 != v5)
        {
          v11 = v4[16];
          __dmb(0xBu);
          v7 = v11 - v10;
          v5 = v10;
          goto LABEL_3;
        }
      }
    }
    while (__stlxr(v5 + 1, v4));
    if (sub_20C2B0488((uint64_t *)&v4[5 * ((3 * v5) & 7) + 48], a2, v5, a1))
      return v8;
  }
}

BOOL sub_20C2B0488(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v22[4];

  v8 = a3 & 0xFFFFFFFFFFFFFFF8;
  v9 = a1[1];
  __dmb(0xBu);
  if (v9 != (a3 & 0xFFFFFFFFFFFFFFF8))
  {
    while (1)
    {
      v12 = a1[1];
      __dmb(0xBu);
      if (v12 == v8)
        break;
      sched_yield();
    }
  }
  v10 = a1[3];
  __dmb(0xBu);
  if (v10 == v8)
  {
    while (1)
    {
      v11 = a1[3];
      __dmb(0xBu);
      if (v11 != v8)
        break;
      sched_yield();
    }
  }
  v13 = *a1;
  __dmb(0xBu);
  v14 = *(_QWORD *)(a4 + 8);
  v15 = *(_QWORD *)(v14 + 256) - 1;
  v16 = v15 & (a3 >> 3);
  if (v16 == v15)
    v17 = v13;
  else
    v17 = 0;
  v22[0] = v8 + 8;
  v22[1] = (uint64_t)a1;
  v22[2] = v17;
  v22[3] = a4;
  v18 = *(_QWORD *)(v13 + 8) & (1 << v16);
  if (v18)
  {
    sub_20C2B05A8((uint64_t)a1, a2, v13, v16);
  }
  else
  {
    v19 = (unint64_t *)(v14 + 272);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
  }
  sub_20BF39F2C(v22);
  return v18 != 0;
}

void sub_20C2B0594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF39F2C(&a9);
  _Unwind_Resume(a1);
}

void sub_20C2B05A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v5;
  void *v6;
  void *v7;
  void *v8;

  v5 = (void **)(a3 + 16 + 16 * a4);
  v6 = *v5;
  *v5 = 0;
  v7 = *(void **)a2;
  *(_QWORD *)a2 = v6;
  if (v7)
    operator delete[](v7);
  v8 = *v5;
  *(_QWORD *)(a2 + 8) = v5[1];
  *v5 = 0;
  if (v8)
    operator delete[](v8);
}

uint64_t sub_20C2B0608(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2B06A8((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8));
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2B0694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C2B06A8(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v1;
  uint64_t v2;
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *__p;

  v1 = a1[1];
  v2 = *((_QWORD *)v1 + 792);
  v3 = *((_QWORD *)v1 + 793);
  if (v2 != v3)
  {
    v5 = *a1;
    v6 = (uint64_t *)((char *)*a1 + 200);
    do
    {
      v7 = 0;
      do
      {
        v8 = strcmp((&off_24C52EBB0)[v7], (const char *)v2);
        if (!v8)
          break;
        v9 = v7 == 10;
        v7 += 2;
      }
      while (!v9);
      if (v8)
      {
        sub_20C2B07D8(v2, a1[1], (__sFILE **)&__p);
        v10 = *((_QWORD *)v5 + 26);
        if (v10 >= *((_QWORD *)v5 + 27))
        {
          v12 = sub_20C2B084C(v6, (char *)v2, (uint64_t *)&__p, (_QWORD *)(v2 + 24));
          v13 = __p;
          *((_QWORD *)v5 + 26) = v12;
          __p = 0;
          if (v13)
            operator delete[](v13);
        }
        else
        {
          sub_20BDDC0E4(*((_QWORD **)v5 + 26), (char *)v2);
          v11 = *(_QWORD *)(v2 + 24);
          *(_QWORD *)(v10 + 24) = __p;
          *(_QWORD *)(v10 + 32) = v11;
          *((_QWORD *)v5 + 26) = v10 + 40;
        }
      }
      v2 += 32;
    }
    while (v2 != v3);
  }
}

void sub_20C2B07B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete[](__p);
  _Unwind_Resume(exception_object);
}

void sub_20C2B07D8(uint64_t a1@<X1>, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2@<X2>, __sFILE **a3@<X8>)
{
  char *v6;
  __sFILE *v7;

  v6 = *(char **)(a1 + 24);
  v7 = (__sFILE *)operator new[]((size_t)v6);
  *a3 = v7;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadRawBytes(a2, *(_QWORD *)(a1 + 16), v6, v7);
}

void sub_20C2B0834(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  *v1 = 0;
  operator delete[](v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2B084C(uint64_t *a1, char *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t *v23;

  v5 = *a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    sub_20BDDF694();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x333333333333333)
    v13 = 0x666666666666666;
  else
    v13 = v7;
  v23 = a1 + 2;
  if (v13)
    v14 = (char *)sub_20BED4724(v11, v13);
  else
    v14 = 0;
  v19 = v14;
  v20 = &v14[40 * v6];
  v21 = v20;
  v22 = &v14[40 * v13];
  v15 = sub_20BDDC0E4(v20, a2);
  v16 = *a3;
  *a3 = 0;
  v15[3] = v16;
  v15[4] = *a4;
  v21 += 40;
  sub_20C2B0974(a1, &v19);
  v17 = a1[1];
  sub_20C2B0B6C(&v19);
  return v17;
}

void sub_20C2B0960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2B0B6C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2B0974(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C2B09E8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C2B09E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 40);
      *(_QWORD *)(v8 - 24) = *(_QWORD *)(a3 + v7 - 24);
      *(_OWORD *)(v8 - 40) = v10;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      v11 = *(_QWORD *)(a3 + v7 - 16);
      *(_QWORD *)(v9 - 24) = 0;
      *(_QWORD *)(v9 - 16) = 0;
      *(_QWORD *)(v8 - 16) = v11;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 + v7 - 8);
      *((_QWORD *)&v17 + 1) = a7 + v7 - 40;
      v7 -= 40;
    }
    while (a3 + v7 != a5);
    v12 = v17;
  }
  v15 = 1;
  sub_20C2B0AA4((uint64_t)v14);
  return v12;
}

uint64_t sub_20C2B0AA4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C2B0AD8((uint64_t *)a1);
  return a1;
}

void sub_20C2B0AD8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C2B0B28(v3, v1);
      v1 += 40;
    }
    while (v1 != v2);
  }
}

void sub_20C2B0B28(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = 0;
  if (v3)
    operator delete[](v3);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void **sub_20C2B0B6C(void **a1)
{
  sub_20C2B0B9C(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C2B0B9C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 40;
    sub_20C2B0B28(v4, i - 40);
  }
}

uint64_t sub_20C2B0BE8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *Instance;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  _DWORD *v11;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  v2 = *(_QWORD *)(a1[2] + 96);
  if (*(_QWORD *)(a1[2] + 104) != v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = a1[1] + 80;
    do
    {
      v11 = (_DWORD *)(v2 + v3);
      *((_DWORD *)sub_20C2B6F24(v5, (unsigned int *)(v2 + v3), (uint64_t)&unk_20CAC184C, &v11) + 6) = v4++;
      v2 = *(_QWORD *)(a1[2] + 96);
      v3 += 8;
    }
    while (v4 != (*(_QWORD *)(a1[2] + 104) - v2) >> 3);
  }
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v7 = v10;
  v8 = atomic_load(Instance + 18);
  if (v7 < v8
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v10, a1[3]);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  return 0;
}

void sub_20C2B0CE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2B0D00(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *Instance;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  _OWORD *v11;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  v2 = *(_QWORD *)(a1[2] + 48);
  if (*(_QWORD *)(a1[2] + 56) != v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = a1[1] + 120;
    do
    {
      v11 = (_OWORD *)(v2 + v3);
      *((_DWORD *)sub_20C2B0E10(v5, v2 + v3, (uint64_t)&unk_20CAC184C, &v11) + 8) = v4++;
      v2 = *(_QWORD *)(a1[2] + 48);
      v3 += 16;
    }
    while (v4 != (*(_QWORD *)(a1[2] + 56) - v2) >> 4);
  }
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v7 = v10;
  v8 = atomic_load(Instance + 18);
  if (v7 < v8
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v10, a1[3]);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  return 0;
}

void sub_20C2B0DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2B0E10(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *(unsigned int *)(a2 + 4);
  v8 = bswap64(0x9E3779B97F4A7C55 * v7);
  v9 = *(_QWORD *)(a2 + 8);
  v10 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v9 + ((v8 + v9 + (v8 + v9) * (v8 + v9)) >> 1))));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 5) == (_DWORD)v7 && v14[3] == v9)
              return v14;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x28uLL);
  *v14 = 0;
  v14[1] = v10;
  *((_OWORD *)v14 + 1) = **a4;
  *((_DWORD *)v14 + 8) = -1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *v14 = *v24;
LABEL_42:
    *v24 = v14;
    goto LABEL_43;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v25 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20C2B1060(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2B107C(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2B111C((_QWORD *)(a1 + 8));
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 24));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2B1108(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C2B111C(_QWORD *a1)
{
  char **v1;
  char *v2;
  char *v3;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  void **p_p;

  __p = 0;
  v10 = 0;
  v11 = 0;
  v1 = (char **)a1[1];
  v3 = *v1;
  v2 = v1[1];
  if (v3 != v2)
  {
    v5 = v3;
    while (*(_DWORD *)v5 != -1)
    {
      v5 += 4;
      if (v5 == v2)
      {
        v5 = v2;
        break;
      }
    }
    if (v3 != v2)
    {
      v6 = *a1 + 160;
      do
      {
        sub_20C2B125C((char *)&__p, v3, (uint64_t)v5, (v5 - v3) >> 2);
        v7 = *(_QWORD *)a1[1];
        p_p = &__p;
        *((_DWORD *)sub_20C2B1368(v6, (uint64_t)&__p, (uint64_t)&unk_20CAC184C, (uint64_t *)&p_p) + 10) = (unint64_t)&v3[-v7] >> 2;
        v3 = v5 + 4;
        v8 = *(char **)(a1[1] + 8);
        if (v5 + 4 == v8)
          break;
        v5 += 4;
        while (*(_DWORD *)v5 != -1)
        {
          v5 += 4;
          if (v5 == v8)
          {
            v5 = *(char **)(a1[1] + 8);
            break;
          }
        }
      }
      while (v3 != v8);
      if (__p)
      {
        v10 = __p;
        operator delete(__p);
      }
    }
  }
}

void sub_20C2B123C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20C2B125C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      sub_20BDDF694();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_20BDE3738(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, 4 * v15);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

_QWORD *sub_20C2B1368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  _QWORD *v12;
  _QWORD *result;
  unint64_t v14;
  char *v15;
  char *v16;
  unsigned int *i;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v26[3];

  v8 = sub_20C2B16A8((uint64_t)v26, (unsigned int **)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v10)
        v4 = v8 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v8;
    }
    v12 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      result = (_QWORD *)*v12;
      if (*v12)
      {
        do
        {
          v14 = result[1];
          if (v14 == v9)
          {
            v16 = (char *)result[2];
            v15 = (char *)result[3];
            if (v15 - v16 == *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
            {
              if (v16 == v15)
                return result;
              for (i = *(unsigned int **)a2; *(_DWORD *)v16 == *i; ++i)
              {
                v16 += 4;
                if (v16 == v15)
                  return result;
              }
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C2B1608(a1, v9, a4, (uint64_t)v26);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v10 || (float)(v19 * (float)v10) < v18)
  {
    v20 = 1;
    if (v10 >= 3)
      v20 = (v10 & (v10 - 1)) != 0;
    v21 = v20 | (2 * v10);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_20BDEC6E0(a1, v23);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v26[0] = *v24;
    *v24 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v25 >= v10)
          v25 %= v10;
      }
      else
      {
        v25 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v26[0];
    }
  }
  result = (_QWORD *)v26[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C2B15E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_20C2B1784((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2B1608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = *a3;
  v8[3] = 0;
  v8[4] = 0;
  v8[2] = 0;
  result = sub_20C2B170C(v8 + 2, *(const void **)v9, *(_QWORD *)(v9 + 8), (uint64_t)(*(_QWORD *)(v9 + 8) - *(_QWORD *)v9) >> 2);
  *((_DWORD *)v8 + 10) = -1;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C2B168C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C2B1784(v3, v2);
  _Unwind_Resume(a1);
}

unint64_t sub_20C2B16A8(uint64_t a1, unsigned int **a2)
{
  unsigned int *v2;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v2 = *a2;
  v3 = a2[1];
  v4 = (char *)v3 - (char *)*a2;
  if (v3 == *a2)
  {
    v8 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = v4 >> 2;
    do
    {
      v9 = *v2++;
      v8 = v9;
      if (v6)
        v8 += (unint64_t)(v5 + v8 + (v5 + v8) * (v5 + v8)) >> 1;
      else
        v6 = 1;
      v5 = v8;
      --v7;
    }
    while (v7);
  }
  return bswap64(0x9E3779B97F4A7C55 * v8);
}

_QWORD *sub_20C2B170C(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_20BDE3738(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20C2B1768(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C2B1784(uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[2];
    if (v3)
    {
      __p[3] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t sub_20C2B17D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *Instance;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t *v11;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  v2 = *(_QWORD *)(a1[2] + 120);
  if (*(_QWORD *)(a1[2] + 128) != v2)
  {
    v3 = 0;
    v4 = 0;
    v5 = a1[1];
    do
    {
      v11 = (uint64_t *)(v2 + v3);
      *((_DWORD *)sub_20C2B18E4(v5, (_QWORD *)(v2 + v3), (uint64_t)&unk_20CAC184C, &v11) + 6) = v4++;
      v2 = *(_QWORD *)(a1[2] + 120);
      v3 += 8;
    }
    while (v4 != (*(_QWORD *)(a1[2] + 128) - v2) >> 3);
  }
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v7 = v10;
  v8 = atomic_load(Instance + 18);
  if (v7 < v8
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v10, a1[3]);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v10);
  return 0;
}

void sub_20C2B18CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2B18E4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD *v10;
  _QWORD *result;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  _QWORD *v19;
  unint64_t v20;
  _QWORD *v21;

  v6 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v7 = bswap64(0x9E3779B97F4A7C55 * v6);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = v7;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = v7 & (v8 - 1);
    }
    v10 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      result = (_QWORD *)*v10;
      if (*v10)
      {
        do
        {
          v12 = result[1];
          if (v12 == v7)
          {
            if ((result[2] & 0xFFFFFFFFFFFFFFF8) == v6)
              return result;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C2B1B2C(a1, v7, a4, (uint64_t)&v21);
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_20BDEC6E0(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v19)
  {
    *v21 = *v19;
    *v19 = v21;
  }
  else
  {
    *v21 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*v21)
    {
      v20 = *(_QWORD *)(*v21 + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v20 >= v8)
          v20 %= v8;
      }
      else
      {
        v20 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v20) = v21;
    }
  }
  result = v21;
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C2B1B14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF1EB8C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2B1B2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v7 = a1 + 16;
  result = operator new(0x20uLL);
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = v7;
  *result = 0;
  result[1] = a2;
  v9 = **a3;
  result[2] = v9;
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 2, v10));
    if ((v11 & 1) == 0)
      result[2] &= 0xFFFFFFFFFFFFFFF8;
  }
  *((_DWORD *)result + 6) = -1;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t sub_20C2B1BBC(_QWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *EmptyToken;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *EmptyString;
  unint64_t *Instance;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  __int128 *v19;

  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  v3 = (_QWORD *)a1[2];
  v4 = v3[18];
  v5 = v3[19];
  if (v5 != v4)
  {
    v6 = 0;
    v7 = a1[1] + 40;
    do
    {
      if (v6 >= (unint64_t)((v5 - v4) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
        EmptyString = &qword_254988388;
      }
      else
      {
        v8 = *(unsigned int *)(v4 + 4 * v6);
        v10 = v3 + 15;
        v9 = v3[15];
        if (v8 >= (v10[1] - v9) >> 3)
        {
          EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
          v11 = &qword_2549883A8;
        }
        else
        {
          v11 = (uint64_t *)(v9 + 8 * v8);
        }
        v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
        if (v12)
          EmptyString = (uint64_t *)(v12 + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
      }
      v19 = (__int128 *)EmptyString;
      EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B1D30(v7, (unsigned __int8 *)EmptyString, (uint64_t)&unk_20CAC184C, &v19);
      *((_DWORD *)EmptyToken + 10) = v6++;
      v3 = (_QWORD *)a1[2];
      v4 = v3[18];
      v5 = v3[19];
    }
    while (v6 != (v5 - v4) >> 2);
  }
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v15 = v18;
  v16 = atomic_load(Instance + 18);
  if (v15 < v16
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v18, a1[3]);
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v18);
  return 0;
}

void sub_20C2B1D18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20C2B1D30(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  unsigned __int8 *v6;
  char *v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  unsigned __int8 **v23;
  unint64_t v24;
  unsigned __int8 *v26;
  char v27;

  v6 = a2;
  v26 = 0;
  v27 = 0;
  v8 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v9 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v9 = v8;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v26, (pxrInternal__aapl__pxrReserved__ *)a2, v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v26);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v6) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  sub_20C2B1FF0(a1, v10, a4, (uint64_t)&v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26 = *v23;
    *v23 = v26;
  }
  else
  {
    *(_QWORD *)v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26)
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26 + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26;
    }
  }
  i = v26;
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2B1FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    sub_20BEB52E4((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20C2B1FF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  _BYTE *result;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = v8 + 16;
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)result = v11;
  }
  *((_DWORD *)v8 + 10) = -1;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C2B2080(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BEB52E4(v3, v2);
  _Unwind_Resume(a1);
}

BOOL sub_20C2B209C(_BOOL8 result)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  void *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  void *__p[3];

  v1 = (_QWORD *)result;
  v2 = *(void **)(result + 32);
  if (v2)
  {
    v3 = *(void **)(result + 16);
    v4 = *(void **)(result + 24);
    *(_QWORD *)(result + 24) = 0;
    __p[0] = v4;
    __p[1] = v2;
    __p[2] = v3;
    v5 = *(_QWORD *)(result + 72);
    v6 = (unint64_t *)(v5 + 128);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 + 1, v6));
    sub_20C2B21D0((_QWORD *)(v5 + 40 * ((3 * (_BYTE)v7) & 7) + 384), (uint64_t)__p, v7, (uint64_t *)(result + 64), (uint64_t (*)(_QWORD *, uint64_t))sub_20C2B21B8);
    v8 = __p[0];
    __p[0] = 0;
    if (v8)
      operator delete[](v8);
    v9 = v1 + 57;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    if (!v10)
    {
      v11 = v1[56];
      if (!v11)
        sub_20BE9E974();
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 48))(v11);
    }
    for (result = sub_20C2B03B8((uint64_t)(v1 + 5), (uint64_t)(v1 + 3));
          !result;
          result = sub_20C2B03B8((uint64_t)(v1 + 5), (uint64_t)(v1 + 3)))
    {
      pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(v1 + 11));
    }
  }
  v1[2] = *v1;
  return result;
}

void sub_20C2B219C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete[](__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C2B21B8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  __n128 result;

  v2 = *a2;
  *a2 = 0;
  *(_QWORD *)a1 = v2;
  result = *(__n128 *)(a2 + 1);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t sub_20C2B21D0(_QWORD *a1, uint64_t a2, unint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD *, uint64_t))
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t *v13;
  _QWORD *v14;
  _BYTE *v15;
  uint64_t result;
  unint64_t v17;
  _BYTE *v18;

  v9 = a3 & 0xFFFFFFFFFFFFFFF8;
  v10 = (*(_QWORD *)(a4[1] + 256) - 1) & (a3 >> 3);
  if (v10)
  {
    v11 = 0;
  }
  else
  {
    v11 = (_QWORD *)(*(uint64_t (**)(uint64_t *))(*a4 + 16))(a4);
    *v11 = 0;
    v11[1] = 0;
  }
  v13 = a1 + 3;
  v12 = a1[3];
  __dmb(0xBu);
  if (v12 != v9)
    sub_20BF3A228((uint64_t)a1, a1 + 3, v9, a4[1]);
  if (v11)
  {
    sub_20BEB3FEC((uint64_t)&v18, (uint64_t)(a1 + 4));
    v14 = (_QWORD *)a1[2];
    __dmb(0xBu);
    if ((unint64_t)v14 < 2)
    {
      __dmb(0xBu);
      *a1 = v11;
    }
    else
    {
      *v14 = v11;
    }
    __dmb(0xBu);
    a1[2] = v11;
    v15 = v18;
    if (v18)
    {
      __dmb(0xBu);
      *v15 = 0;
    }
  }
  else
  {
    v11 = (_QWORD *)a1[2];
    __dmb(0xBu);
  }
  result = a5(&v11[3 * v10 + 2], a2);
  v11[1] |= 1 << v10;
  do
    v17 = __ldaxr(v13);
  while (__stlxr(v17 + 8, v13));
  return result;
}

void sub_20C2B2304(void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  __cxa_begin_catch(a1);
  v4 = (unint64_t *)(*(_QWORD *)(v1 + 8) + 272);
  do
    v5 = __ldaxr(v4);
  while (__stlxr(v5 + 1, v4));
  sub_20BF3A1B0(v2, v3);
}

void sub_20C2B232C()
{
  __cxa_end_catch();
  __break(1u);
}

void sub_20C2B2334(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_20C2B2388(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 40;
        sub_20C2B0B28((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_20C2B240C(uint64_t a1)
{
  void *v2;

  sub_20C2B2444(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B2444(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = (void *)v2[2];
      if (v4)
      {
        v2[3] = v4;
        operator delete(v4);
      }
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_20C2B2488(uint64_t a1)
{
  void *v2;

  sub_20C2B24C0(a1, *(_DWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B24C0(uint64_t a1, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(_DWORD **)v2;
      sub_20C2B24FC(v2 + 4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_20C2B24FC(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

void sub_20C2B2528(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C2B2568((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

void sub_20C2B2568(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != a2)
  {
    v5 = *(_QWORD *)(a1 + 8);
    do
    {
      v6 = *(__int16 *)(v5 - 40);
      v5 -= 40;
      if (v6 != -1)
      {
        v7 = *(void **)(v4 - 24);
        if (v7)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        *(_WORD *)(v4 - 40) = -1;
      }
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

__int16 *sub_20C2B25DC(__int16 *a1)
{
  void *v2;

  if (*a1 != -1)
  {
    v2 = (void *)*((_QWORD *)a1 + 2);
    if (v2)
    {
      *((_QWORD *)a1 + 3) = v2;
      operator delete(v2);
    }
    *a1 = -1;
  }
  return a1;
}

uint64_t sub_20C2B2620(uint64_t a1, uint64_t a2)
{
  uint64_t __src;

  __src = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5;
  sub_20C2B7248(a1, (char *)&__src);
  return sub_20C2B2674(a1, *(char **)a2, (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
}

uint64_t sub_20C2B2674(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  v3 = 32 * a3;
  if (32 * a3)
  {
    v5 = *(_QWORD **)(result + 8);
    do
    {
      v6 = v5[2];
      v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7)
        v8 = v6 - *v5 + 0x80000;
      else
        v8 = v3;
      v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4])
        v5[4] = v8 + v9;
      result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3)
        result = sub_20C2B209C((_BOOL8)v5);
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

char *sub_20C2B2718(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      sub_20BDDF694();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_20BF25370(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void sub_20C2B2820(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B284C(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B284C(uint64_t a1)
{
  void *v2;

  sub_20C2B2884(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B2884(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B28C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B28F0(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B28F0(uint64_t a1)
{
  void *v2;

  sub_20C2B2928(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B2928(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B2968(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B2994(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B2994(uint64_t a1)
{
  void *v2;

  sub_20C2B29CC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B29CC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B2A0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B2A38(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B2A38(uint64_t a1)
{
  void *v2;

  sub_20C2B2A70(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B2A70(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B2AB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B2ADC(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B2ADC(uint64_t a1)
{
  void *v2;

  sub_20C2B2B14(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B2B14(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B2B54(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B2B80(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B2B80(uint64_t a1)
{
  void *v2;

  sub_20C2B2BB8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B2BB8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B2BF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B2C24(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B2C24(uint64_t a1)
{
  void *v2;

  sub_20C2B2C5C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B2C5C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B2C9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B2CC8(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B2CC8(uint64_t a1)
{
  void *v2;

  sub_20C2B2D00(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B2D00(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B2D40(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B2D6C(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B2D6C(uint64_t a1)
{
  void *v2;

  sub_20C2B2DA4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B2DA4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B2DE4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B2E10(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B2E10(uint64_t a1)
{
  void *v2;

  sub_20C2B2E48(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B2E48(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C008280(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B2E88(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B2EB4(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B2EB4(uint64_t a1)
{
  void *v2;

  sub_20C2B2EEC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B2EEC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C00918C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B2F2C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B2F58(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B2F58(uint64_t a1)
{
  void *v2;

  sub_20C2B2F90(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B2F90(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C00A724(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B2FD0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B2FFC(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B2FFC(uint64_t a1)
{
  void *v2;

  sub_20C2B3034(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3034(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BDDE3E4((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3070(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B309C(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B309C(uint64_t a1)
{
  void *v2;

  sub_20C2B30D4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B30D4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3114(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3140(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3140(uint64_t a1)
{
  void *v2;

  sub_20C2B3178(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3178(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B31B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B31E4(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B31E4(uint64_t a1)
{
  void *v2;

  sub_20C2B321C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B321C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B325C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3288(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3288(uint64_t a1)
{
  void *v2;

  sub_20C2B32C0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B32C0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3300(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B332C(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B332C(uint64_t a1)
{
  void *v2;

  sub_20C2B3364(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3364(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B33A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B33D0(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B33D0(uint64_t a1)
{
  void *v2;

  sub_20C2B3408(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3408(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3448(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3474(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3474(uint64_t a1)
{
  void *v2;

  sub_20C2B34AC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B34AC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B34EC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3518(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3518(uint64_t a1)
{
  void *v2;

  sub_20C2B3550(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3550(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3590(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B35BC(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B35BC(uint64_t a1)
{
  void *v2;

  sub_20C2B35F4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B35F4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3634(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3660(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3660(uint64_t a1)
{
  void *v2;

  sub_20C2B3698(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3698(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B36D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3704(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3704(uint64_t a1)
{
  void *v2;

  sub_20C2B373C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B373C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B377C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B37A8(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B37A8(uint64_t a1)
{
  void *v2;

  sub_20C2B37E0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B37E0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3820(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B384C(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B384C(uint64_t a1)
{
  void *v2;

  sub_20C2B3884(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3884(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B38C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B38F0(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B38F0(uint64_t a1)
{
  void *v2;

  sub_20C2B3928(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3928(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3968(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3994(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3994(uint64_t a1)
{
  void *v2;

  sub_20C2B39CC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B39CC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3A0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3A38(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3A38(uint64_t a1)
{
  void *v2;

  sub_20C2B3A70(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3A70(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3AB0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3ADC(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3ADC(uint64_t a1)
{
  void *v2;

  sub_20C2B3B14(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3B14(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3B54(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3B80(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3B80(uint64_t a1)
{
  void *v2;

  sub_20C2B3BB8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3BB8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3BF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3C24(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3C24(uint64_t a1)
{
  void *v2;

  sub_20C2B3C5C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3C5C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B3C9C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3C9C(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD ***v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = (_QWORD ***)a1[4];
        if (*a1)
        {
          v9 = 8 * *a1;
          do
          {
            sub_20BF49F14(v8++, 0);
            v9 -= 8;
          }
          while (v9);
          v8 = (_QWORD ***)a1[4];
        }
        operator delete(v8 - 2);
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B3D54(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3D80(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3D80(uint64_t a1)
{
  void *v2;

  sub_20C2B3DB8(a1, *(_QWORD ****)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3DB8(uint64_t a1, _QWORD ***a2)
{
  _QWORD ***v2;
  _QWORD **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      sub_20BF49F14(v2 + 2, 0);
      operator delete(v2);
      v2 = (_QWORD ***)v3;
    }
    while (v3);
  }
}

void sub_20C2B3DF8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3E24(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3E24(uint64_t a1)
{
  void *v2;

  sub_20C2B3E5C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B3E5C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B3E9C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B3E9C(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);
  void **v14;

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v11 = __ldxr(v3);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v3));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v4 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 0;
          v10 = 152 * *a1;
          do
          {
            v14 = (void **)(v8 + v9 + 128);
            sub_20BEEB2B8(&v14);
            v14 = (void **)(v8 + v9 + 104);
            sub_20BEEB2B8(&v14);
            v14 = (void **)(v8 + v9 + 80);
            sub_20BEEB2B8(&v14);
            v14 = (void **)(v8 + v9 + 56);
            sub_20BEEB2B8(&v14);
            v14 = (void **)(v8 + v9 + 32);
            sub_20BEEB2B8(&v14);
            v14 = (void **)(v8 + v9 + 8);
            sub_20BEEB2B8(&v14);
            v9 += 152;
          }
          while (v10 != v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B3FC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B3FF0(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B3FF0(uint64_t a1)
{
  void *v2;

  sub_20C2B4028(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B4028(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      sub_20C2B4064(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B4064(void **a1)
{
  void **v2;

  v2 = a1 + 16;
  sub_20BEEB2B8(&v2);
  v2 = a1 + 13;
  sub_20BEEB2B8(&v2);
  v2 = a1 + 10;
  sub_20BEEB2B8(&v2);
  v2 = a1 + 7;
  sub_20BEEB2B8(&v2);
  v2 = a1 + 4;
  sub_20BEEB2B8(&v2);
  v2 = a1 + 1;
  sub_20BEEB2B8(&v2);
}

void sub_20C2B40E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B4114(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B4114(uint64_t a1)
{
  void *v2;

  sub_20C2B414C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B414C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B418C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B418C(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);
  void **v14;

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v11 = __ldxr(v3);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v3));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v4 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 0;
          v10 = 152 * *a1;
          do
          {
            v14 = (void **)(v8 + v9 + 128);
            sub_20BDE5038(&v14);
            v14 = (void **)(v8 + v9 + 104);
            sub_20BDE5038(&v14);
            v14 = (void **)(v8 + v9 + 80);
            sub_20BDE5038(&v14);
            v14 = (void **)(v8 + v9 + 56);
            sub_20BDE5038(&v14);
            v14 = (void **)(v8 + v9 + 32);
            sub_20BDE5038(&v14);
            v14 = (void **)(v8 + v9 + 8);
            sub_20BDE5038(&v14);
            v9 += 152;
          }
          while (v10 != v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B42B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B42E0(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B42E0(uint64_t a1)
{
  void *v2;

  sub_20C2B4318(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B4318(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      sub_20C2B4354(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B4354(void **a1)
{
  void **v2;

  v2 = a1 + 16;
  sub_20BDE5038(&v2);
  v2 = a1 + 13;
  sub_20BDE5038(&v2);
  v2 = a1 + 10;
  sub_20BDE5038(&v2);
  v2 = a1 + 7;
  sub_20BDE5038(&v2);
  v2 = a1 + 4;
  sub_20BDE5038(&v2);
  v2 = a1 + 1;
  sub_20BDE5038(&v2);
}

void sub_20C2B43D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B4404(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B4404(uint64_t a1)
{
  void *v2;

  sub_20C2B443C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B443C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B447C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B447C(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);
  void **v14;

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v11 = __ldxr(v3);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v3));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v4 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 0;
          v10 = 152 * *a1;
          do
          {
            v14 = (void **)(v8 + v9 + 128);
            sub_20BFD6F90(&v14);
            v14 = (void **)(v8 + v9 + 104);
            sub_20BFD6F90(&v14);
            v14 = (void **)(v8 + v9 + 80);
            sub_20BFD6F90(&v14);
            v14 = (void **)(v8 + v9 + 56);
            sub_20BFD6F90(&v14);
            v14 = (void **)(v8 + v9 + 32);
            sub_20BFD6F90(&v14);
            v14 = (void **)(v8 + v9 + 8);
            sub_20BFD6F90(&v14);
            v9 += 152;
          }
          while (v10 != v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B45A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B45D0(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B45D0(uint64_t a1)
{
  void *v2;

  sub_20C2B4608(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B4608(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      sub_20C2B4644(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B4644(void **a1)
{
  void **v2;

  v2 = a1 + 16;
  sub_20BFD6F90(&v2);
  v2 = a1 + 13;
  sub_20BFD6F90(&v2);
  v2 = a1 + 10;
  sub_20BFD6F90(&v2);
  v2 = a1 + 7;
  sub_20BFD6F90(&v2);
  v2 = a1 + 4;
  sub_20BFD6F90(&v2);
  v2 = a1 + 1;
  sub_20BFD6F90(&v2);
}

void sub_20C2B46C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B46F4(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B46F4(uint64_t a1)
{
  void *v2;

  sub_20C2B472C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B472C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B476C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B476C(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);
  void **v14;

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v11 = __ldxr(v3);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v3));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v4 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 0;
          v10 = 152 * *a1;
          do
          {
            v14 = (void **)(v8 + v9 + 128);
            sub_20C021740(&v14);
            v14 = (void **)(v8 + v9 + 104);
            sub_20C021740(&v14);
            v14 = (void **)(v8 + v9 + 80);
            sub_20C021740(&v14);
            v14 = (void **)(v8 + v9 + 56);
            sub_20C021740(&v14);
            v14 = (void **)(v8 + v9 + 32);
            sub_20C021740(&v14);
            v14 = (void **)(v8 + v9 + 8);
            sub_20C021740(&v14);
            v9 += 152;
          }
          while (v10 != v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B4894(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B48C0(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B48C0(uint64_t a1)
{
  void *v2;

  sub_20C2B48F8(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B48F8(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      sub_20C2B4934(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B4934(void **a1)
{
  void **v2;

  v2 = a1 + 16;
  sub_20C021740(&v2);
  v2 = a1 + 13;
  sub_20C021740(&v2);
  v2 = a1 + 10;
  sub_20C021740(&v2);
  v2 = a1 + 7;
  sub_20C021740(&v2);
  v2 = a1 + 4;
  sub_20C021740(&v2);
  v2 = a1 + 1;
  sub_20C021740(&v2);
}

void sub_20C2B49B8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B49E4(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B49E4(uint64_t a1)
{
  void *v2;

  sub_20C2B4A1C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B4A1C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B4A5C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B4A5C(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  void (*v19)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v17 = __ldxr(v3);
        v18 = v17 - 1;
      }
      while (__stlxr(v18, v3));
      if (!v18)
      {
        __dmb(9u);
        v19 = *(void (**)(void))(*v4 + 8);
        if (v19)
          v19();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 152 * *a1;
          v10 = v8 + 80;
          do
          {
            v11 = *(void **)(v10 + 48);
            if (v11)
            {
              *(_QWORD *)(v10 + 56) = v11;
              operator delete(v11);
            }
            v12 = *(void **)(v10 + 24);
            if (v12)
            {
              *(_QWORD *)(v10 + 32) = v12;
              operator delete(v12);
            }
            v13 = *(void **)v10;
            if (*(_QWORD *)v10)
            {
              *(_QWORD *)(v10 + 8) = v13;
              operator delete(v13);
            }
            v14 = *(void **)(v10 - 24);
            if (v14)
            {
              *(_QWORD *)(v10 - 16) = v14;
              operator delete(v14);
            }
            v15 = *(void **)(v10 - 48);
            if (v15)
            {
              *(_QWORD *)(v10 - 40) = v15;
              operator delete(v15);
            }
            v16 = *(void **)(v10 - 72);
            if (v16)
            {
              *(_QWORD *)(v10 - 64) = v16;
              operator delete(v16);
            }
            v10 += 152;
            v9 -= 152;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B4B70(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B4B9C(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B4B9C(uint64_t a1)
{
  void *v2;

  sub_20C2B4BD4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B4BD4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B4C10(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B4C10(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v2 = (void *)a1[16];
  if (v2)
  {
    a1[17] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[13];
  if (v3)
  {
    a1[14] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[10];
  if (v4)
  {
    a1[11] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[1];
  if (v7)
  {
    a1[2] = v7;
    operator delete(v7);
  }
}

void sub_20C2B4C94(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B4CC0(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B4CC0(uint64_t a1)
{
  void *v2;

  sub_20C2B4CF8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B4CF8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B4A5C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B4D38(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B4D64(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B4D64(uint64_t a1)
{
  void *v2;

  sub_20C2B4D9C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B4D9C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B4A5C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B4DDC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B4E08(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B4E08(uint64_t a1)
{
  void *v2;

  sub_20C2B4E40(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B4E40(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B4A5C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B4E80(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B4EAC(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B4EAC(uint64_t a1)
{
  void *v2;

  sub_20C2B4EE4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B4EE4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B4F24(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B4F24(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);
  void **v13;

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = (void **)a1[4];
        if (*a1)
        {
          v9 = 24 * *a1;
          do
          {
            v13 = v8;
            sub_20BFD6F90(&v13);
            v8 += 3;
            v9 -= 24;
          }
          while (v9);
          v8 = (void **)a1[4];
        }
        operator delete(v8 - 2);
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B4FE8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B5014(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B5014(uint64_t a1)
{
  void *v2;

  sub_20C2B504C(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B504C(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 16);
      sub_20BFD6F90(&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B5098(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B50C4(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B50C4(uint64_t a1)
{
  void *v2;

  sub_20C2B50FC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B50FC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B513C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B513C(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);
  void **v13;

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = (void **)a1[4];
        if (*a1)
        {
          v9 = 24 * *a1;
          do
          {
            v13 = v8;
            sub_20BEEB2B8(&v13);
            v8 += 3;
            v9 -= 24;
          }
          while (v9);
          v8 = (void **)a1[4];
        }
        operator delete(v8 - 2);
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B5200(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B522C(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B522C(uint64_t a1)
{
  void *v2;

  sub_20C2B5264(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B5264(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 16);
      sub_20BEEB2B8(&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B52B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B52DC(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B52DC(uint64_t a1)
{
  void *v2;

  sub_20C2B5314(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B5314(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B5354(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B5380(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B5380(uint64_t a1)
{
  void *v2;

  sub_20C2B53B8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B53B8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B53F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B5424(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B5424(uint64_t a1)
{
  void *v2;

  sub_20C2B545C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B545C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B549C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B54C8(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B54C8(uint64_t a1)
{
  void *v2;

  sub_20C2B5500(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B5500(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B5540(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B5540(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 24 * *a1;
          do
          {
            sub_20BDE9D48(v8, *(_QWORD **)(v8 + 8));
            v8 += 24;
            v9 -= 24;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B55FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B5628(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B5628(uint64_t a1)
{
  void *v2;

  sub_20C2B5660(a1, *(_QWORD ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B5660(uint64_t a1, _QWORD **a2)
{
  _QWORD **v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *v2;
      sub_20BDE9D48((uint64_t)(v2 + 2), v2[3]);
      operator delete(v2);
      v2 = (_QWORD **)v3;
    }
    while (v3);
  }
}

void sub_20C2B56A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B56CC(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B56CC(uint64_t a1)
{
  void *v2;

  sub_20C2B5704(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B5704(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B5744(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B5744(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);
  void **v14;

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v11 = __ldxr(v3);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v3));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v4 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 48 * *a1;
          v10 = (void **)(v8 + 16);
          do
          {
            v14 = v10;
            sub_20BF8CA20(&v14);
            sub_20C020410(v10 - 1);
            v10 += 6;
            v9 -= 48;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B5814(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B5840(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B5840(uint64_t a1)
{
  void *v2;

  sub_20C2B5878(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B5878(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      v4 = v2 + 4;
      sub_20BF8CA20(&v4);
      sub_20C020410(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B58CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B58F8(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B58F8(uint64_t a1)
{
  void *v2;

  sub_20C2B5930(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B5930(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B5970(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B5970(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v11 = __ldxr(v3);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v3));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v4 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 48 * *a1;
          v10 = (_DWORD *)(v8 + 28);
          do
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v10);
            sub_20BFD265C(v10 - 1);
            if (*((char *)v10 - 5) < 0)
              operator delete(*(void **)(v10 - 7));
            v10 += 12;
            v9 -= 48;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B5A48(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B5A74(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B5A74(uint64_t a1)
{
  void *v2;

  sub_20C2B5AAC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B5AAC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B5AE8((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B5AE8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_20C2B5B30(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B5B5C(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B5B5C(uint64_t a1)
{
  void *v2;

  sub_20C2B5B94(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B5B94(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B5BD4(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B5BD4(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  void (*v14)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v12 = __ldxr(v3);
        v13 = v12 - 1;
      }
      while (__stlxr(v13, v3));
      if (!v13)
      {
        __dmb(9u);
        v14 = *(void (**)(void))(*v4 + 8);
        if (v14)
          v14();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 24 * *a1;
          v10 = (_QWORD *)(v8 + 8);
          do
          {
            v11 = (void *)*(v10 - 1);
            if (v11)
            {
              *v10 = v11;
              operator delete(v11);
            }
            v10 += 3;
            v9 -= 24;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B5C98(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B240C(v3);
    operator delete(v4);
  }
}

void sub_20C2B5CC4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B5CF0(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B5CF0(uint64_t a1)
{
  void *v2;

  sub_20C2B5D28(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B5D28(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B5BD4(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B5D68(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B5D94(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B5D94(uint64_t a1)
{
  void *v2;

  sub_20C2B5DCC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B5DCC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B5E0C(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B5E0C(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);
  void **v13;

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = (void **)a1[4];
        if (*a1)
        {
          v9 = 24 * *a1;
          do
          {
            v13 = v8;
            sub_20BDE5038(&v13);
            v8 += 3;
            v9 -= 24;
          }
          while (v9);
          v8 = (void **)a1[4];
        }
        operator delete(v8 - 2);
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B5ED0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B5EFC(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B5EFC(uint64_t a1)
{
  void *v2;

  sub_20C2B5F34(a1, *(char **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B5F34(uint64_t a1, char *a2)
{
  char *v2;
  char *v3;
  void **v4;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = *(char **)v2;
      v4 = (void **)(v2 + 16);
      sub_20BDE5038(&v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B5F80(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B5FAC(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B5FAC(uint64_t a1)
{
  void *v2;

  sub_20C2B5FE4(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B5FE4(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B6024(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B6050(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B6050(uint64_t a1)
{
  void *v2;

  sub_20C2B6088(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B6088(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B60C8(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B60C8(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void (*v12)(void);

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v10 = __ldxr(v3);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v3));
      if (!v11)
      {
        __dmb(9u);
        v12 = *(void (**)(void))(*v4 + 8);
        if (v12)
          v12();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 16 * *a1;
          do
          {
            v8 = sub_20BF4C2D8(v8) + 16;
            v9 -= 16;
          }
          while (v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B6178(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B61A4(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B61A4(uint64_t a1)
{
  void *v2;

  sub_20C2B61DC(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B61DC(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B60C8(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B621C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B6248(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B6248(uint64_t a1)
{
  void *v2;

  sub_20C2B6280(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B6280(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B62C0(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B62C0(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);
  void **v14;

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v11 = __ldxr(v3);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v3));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v4 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 0;
          v10 = 152 * *a1;
          do
          {
            v14 = (void **)(v8 + v9 + 128);
            sub_20BF8CA20(&v14);
            v14 = (void **)(v8 + v9 + 104);
            sub_20BF8CA20(&v14);
            v14 = (void **)(v8 + v9 + 80);
            sub_20BF8CA20(&v14);
            v14 = (void **)(v8 + v9 + 56);
            sub_20BF8CA20(&v14);
            v14 = (void **)(v8 + v9 + 32);
            sub_20BF8CA20(&v14);
            v14 = (void **)(v8 + v9 + 8);
            sub_20BF8CA20(&v14);
            v9 += 152;
          }
          while (v10 != v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B63E8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B6414(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B6414(uint64_t a1)
{
  void *v2;

  sub_20C2B644C(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B644C(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      sub_20C2B6488(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B6488(void **a1)
{
  void **v2;

  v2 = a1 + 16;
  sub_20BF8CA20(&v2);
  v2 = a1 + 13;
  sub_20BF8CA20(&v2);
  v2 = a1 + 10;
  sub_20BF8CA20(&v2);
  v2 = a1 + 7;
  sub_20BF8CA20(&v2);
  v2 = a1 + 4;
  sub_20BF8CA20(&v2);
  v2 = a1 + 1;
  sub_20BF8CA20(&v2);
}

void sub_20C2B650C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B6538(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B6538(uint64_t a1)
{
  void *v2;

  sub_20C2B6570(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B6570(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C2B65B0(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B65B0(_QWORD *a1)
{
  uint64_t v1;
  unint64_t *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void (*v13)(void);
  void **v14;

  v1 = a1[4];
  if (v1)
  {
    v4 = a1 + 3;
    v3 = (unint64_t *)a1[3];
    if (v3)
    {
      do
      {
        v11 = __ldxr(v3);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v3));
      if (!v12)
      {
        __dmb(9u);
        v13 = *(void (**)(void))(*v4 + 8);
        if (v13)
          v13();
      }
    }
    else
    {
      v5 = (unint64_t *)(v1 - 16);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
      {
        __dmb(9u);
        v8 = a1[4];
        if (*a1)
        {
          v9 = 0;
          v10 = 152 * *a1;
          do
          {
            v14 = (void **)(v8 + v9 + 128);
            sub_20C021818(&v14);
            v14 = (void **)(v8 + v9 + 104);
            sub_20C021818(&v14);
            v14 = (void **)(v8 + v9 + 80);
            sub_20C021818(&v14);
            v14 = (void **)(v8 + v9 + 56);
            sub_20C021818(&v14);
            v14 = (void **)(v8 + v9 + 32);
            sub_20C021818(&v14);
            v14 = (void **)(v8 + v9 + 8);
            sub_20C021818(&v14);
            v9 += 152;
          }
          while (v10 != v9);
          v8 = a1[4];
        }
        operator delete((void *)(v8 - 16));
      }
    }
    *v4 = 0;
    v4[1] = 0;
  }
}

void sub_20C2B66D8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B6704(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B6704(uint64_t a1)
{
  void *v2;

  sub_20C2B673C(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B673C(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      sub_20C2B6778(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B6778(void **a1)
{
  void **v2;

  v2 = a1 + 16;
  sub_20C021818(&v2);
  v2 = a1 + 13;
  sub_20C021818(&v2);
  v2 = a1 + 10;
  sub_20C021818(&v2);
  v2 = a1 + 7;
  sub_20C021818(&v2);
  v2 = a1 + 4;
  sub_20C021818(&v2);
  v2 = a1 + 1;
  sub_20C021818(&v2);
}

void sub_20C2B67FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B6828(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B6828(uint64_t a1)
{
  void *v2;

  sub_20C2B6860(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B6860(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20BF5618C((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B68A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B68CC(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B68CC(uint64_t a1)
{
  void *v2;

  sub_20C2B6904(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B6904(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C00E910(v2 + 2);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B6944(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C2B6970(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C2B6970(uint64_t a1)
{
  void *v2;

  sub_20C2B69A8(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B69A8(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C00EDC4((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B69E4(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_20C2B6A68((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void **sub_20C2B6A68(uint64_t a1, uint64_t a2)
{
  void **result;
  unsigned int *v4;
  unsigned int v5;
  void **v6;

  v6 = (void **)(a2 + 24);
  sub_20BF8CA20(&v6);
  result = sub_20C020410((void **)(a2 + 16));
  if ((*(_QWORD *)a2 & 7) != 0)
  {
    v4 = (unsigned int *)(*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return result;
}

void sub_20C2B6AC4(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  unint64_t v8;
  unint64_t **v9;
  uint64_t i;
  int v11;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;

  v5 = a2;
  v8 = bswap64(0x9E3779B97F4A7C55* (*(_QWORD *)(a2 + 32)+ ((*(_QWORD *)(a2 + 32)+ *(_QWORD *)(a2 + 24)+ (*(_QWORD *)(a2 + 32) + *(_QWORD *)(a2 + 24)) * (*(_QWORD *)(a2 + 32) + *(_QWORD *)(a2 + 24))) >> 1)));
  v29 = 0;
  v30 = (unint64_t *)v8;
  v9 = &v30;
  for (i = 7; i != -1; --i)
  {
    v11 = *(unsigned __int8 *)v9;
    v9 = (unint64_t **)((char *)v9 + 1);
    *((_BYTE *)&v29 + i) = byte_20CA9F1BD[v11];
  }
  v12 = v29 | 1;
  sub_20C2B6CE4(a1, v8, &v30);
  v14 = a1 + 16;
  if (a3)
  {
    a3[6] = (unint64_t *)v12;
    *a3 = 0;
  }
  while (1)
  {
    v15 = v30;
    v16 = (unint64_t *)*v30;
    if (*v30)
    {
      v17 = v16[6];
      while (1)
      {
        v18 = v16;
        if (v17 > v12)
          break;
        if (v17 == v12
          && v16[3] == *(_QWORD *)(v5 + 16)
          && v16[4] == *(_QWORD *)(v5 + 24)
          && v16[5] == *(_QWORD *)(v5 + 32))
        {
          if (a3)
            tbb::internal::deallocate_via_handler_v3((uint64_t)a3, v13);
          *(_QWORD *)a4 = v18;
          *(_QWORD *)(a4 + 8) = v14;
          *(_BYTE *)(a4 + 16) = 0;
          return;
        }
        v30 = v16;
        v16 = (unint64_t *)*v16;
        if (!*v18)
        {
          v15 = v18;
          break;
        }
        v17 = v16[6];
        v15 = v18;
      }
    }
    if (!a3)
      v5 = 8;
    *a3 = v16;
    do
    {
      while (1)
      {
        v19 = __ldaxr(v15);
        if ((unint64_t *)v19 == v16)
          break;
        __clrex();
        do
          v20 = __ldxr(v15);
        while (__stxr(v20, v15));
        if ((unint64_t *)v20 != v16)
          goto LABEL_24;
      }
    }
    while (__stlxr((unint64_t)a3, v15));
    v20 = (unint64_t)v16;
LABEL_24:
    if (v16 == (unint64_t *)v20 || v20 == (_QWORD)a3)
      break;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = v14;
    *(_BYTE *)(a4 + 16) = 0;
  }
  v22 = (unint64_t *)(a1 + 24);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 + 1, v22));
  *(_QWORD *)a4 = a3;
  *(_QWORD *)(a4 + 8) = v14;
  *(_BYTE *)(a4 + 16) = 1;
  v26 = *(_QWORD *)(a1 + 8);
  v25 = a1 + 8;
  v24 = v26;
  __dmb(0xBu);
  if ((float)((float)v23 / (float)v26) > *(float *)(v25 + 36))
  {
    do
    {
      while (1)
      {
        v27 = __ldaxr((unint64_t *)v25);
        if (v27 != v24)
          break;
        if (!__stlxr(2 * v24, (unint64_t *)v25))
          return;
      }
      __clrex();
      do
        v28 = __ldxr((unint64_t *)v25);
      while (__stxr(v28, (unint64_t *)v25));
    }
    while (v28 == v24);
  }
}

void sub_20C2B6CE4(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_QWORD *)(a1 + 8);
  __dmb(0xBu);
  v6 = a2 % v5;
  v7 = sub_20BEB4B94(a2 % v5);
  v8 = v6 - ((1 << v7) & 0xFFFFFFFFFFFFFFFELL);
  v9 = a1 + 8 * v7;
  v11 = *(_QWORD *)(v9 + 48);
  v10 = (uint64_t *)(v9 + 48);
  __dmb(0xBu);
  if (!v11 || (v12 = *v10, __dmb(0xBu), !*(_QWORD *)(v12 + 8 * v8)))
    sub_20C2B6D78(a1, (unint64_t *)v6);
  v13 = *v10;
  __dmb(0xBu);
  *a3 = *(_QWORD *)(v13 + 8 * v8);
}

void sub_20C2B6D78(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t **v7;
  uint64_t i;
  int v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;

  v4 = sub_20BF77DA0(a1, (unint64_t)a2);
  if (!sub_20BF77E2C(a1, v4))
    sub_20C2B6D78(a1, v4);
  v5 = sub_20BEB4B94(v4);
  v6 = *(_QWORD *)(a1 + 8 * v5 + 48);
  __dmb(0xBu);
  v11 = *(unint64_t **)(v6 + 8 * (v4 - ((1 << v5) & 0x1FFFFFFFFFFFFFFELL)));
  v12 = 0;
  v13 = a2;
  v7 = &v13;
  for (i = 7; i != -1; --i)
  {
    v9 = *(unsigned __int8 *)v7;
    v7 = (unint64_t **)((char *)v7 + 1);
    *((_BYTE *)&v12 + i) = byte_20CA9F1BD[v9];
  }
  sub_20C2B6E58(&v11, v12 & 0xFFFFFFFFFFFFFFFELL, &v13);
  v10 = v13;
  sub_20BF6EE60(a1, (unint64_t)a2, &v10);
}

unint64_t *sub_20C2B6E58@<X0>(unint64_t **a1@<X1>, unint64_t a2@<X2>, unint64_t **a3@<X8>)
{
  unint64_t *i;
  unint64_t *result;
  void *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;

  i = (unint64_t *)**a1;
  result = (unint64_t *)tbb::internal::allocate_via_handler_v3((tbb::internal *)0x38);
  result[6] = a2;
  *result = 0;
  if (i)
    goto LABEL_2;
LABEL_3:
  while (1)
  {
    v10 = *a1;
    *result = (unint64_t)i;
    do
    {
      while (1)
      {
        v11 = __ldaxr(v10);
        if ((unint64_t *)v11 == i)
          break;
        __clrex();
        do
          v12 = __ldxr(v10);
        while (__stxr(v12, v10));
        if ((unint64_t *)v12 != i)
          goto LABEL_10;
      }
    }
    while (__stlxr((unint64_t)result, v10));
    v12 = (unint64_t)i;
LABEL_10:
    if (i == (unint64_t *)v12 || result == (unint64_t *)v12)
      break;
    for (i = *a1; ; *a1 = i)
    {
      i = (unint64_t *)*i;
      if (!i)
        break;
LABEL_2:
      v9 = i[6];
      if (v9 > a2)
        goto LABEL_3;
      if (v9 == a2)
      {
        result = (unint64_t *)tbb::internal::deallocate_via_handler_v3((uint64_t)result, v8);
        goto LABEL_21;
      }
    }
  }
  i = result;
LABEL_21:
  *a3 = i;
  return result;
}

_QWORD *sub_20C2B6F24(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C2B7190(a1, v6, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C2B7204((uint64_t)v21, 0);
  return v10;
}

void sub_20C2B7178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2B7204((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C2B7190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  _DWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x20uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0;
  v8[1] = a2;
  v9 = *a3;
  sub_20BFD6E54((_DWORD *)v8 + 4, v9);
  result = sub_20BFD6EA4((_DWORD *)v8 + 5, v9 + 1);
  *((_DWORD *)v8 + 6) = -1;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C2B7204(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C2B24FC(v2 + 4);
    operator delete(v2);
  }
}

uint64_t sub_20C2B7248(uint64_t a1, char *__src)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = 8;
  do
  {
    v5 = v3[2];
    v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6)
      v7 = v5 - *v3 + 0x80000;
    else
      v7 = v4;
    v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4])
      v3[4] = v7 + v8;
    result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4)
      result = sub_20C2B209C((_BOOL8)v3);
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

uint64_t sub_20C2B72E8(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;

  v6 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  v7 = a1[2];
  if (v7 < 0 || v7 + a3 > v6)
  {
    v11 = "usd/crateFile.cpp";
    v12 = "Read";
    v13 = 770;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd");
    return 0;
  }
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  v9 = a1[2];
  if (v8 - v9 < a3 || ((v8 - v9) | v9) < 0)
  {
    v11 = "usd/crateFile.cpp";
    v12 = "Read";
    v13 = 779;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
    v15 = 0;
    (*(void (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld");
    return 0;
  }
  result = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*a1 + 32))(*a1, a2, a3);
  if (result == -1)
    return 0;
  if (!a3 || result)
  {
    a1[2] += result;
    return 1;
  }
  return result;
}

uint64_t sub_20C2B7438(uint64_t a1, unint64_t a2, float a3, float a4)
{
  int *v7;
  unint64_t v8;
  float v9;
  std::logic_error *exception;
  unint64_t v12;

  v12 = a2;
  sub_20BED1408((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >> 58)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  sub_20C2B75C4((_QWORD *)(a1 + 8), v12);
  v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16))
    v7 = sub_20C2B754C();
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 58) = 1;
  v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_20C2B7538(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_20C2B754C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25473C968);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473C968))
  {
    dword_25473C928 = 0;
    word_25473C92C = -1;
    byte_25473C92E = 1;
    __cxa_atexit((void (*)(void *))sub_20C2AED98, &dword_25473C928, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473C968);
  }
  return &dword_25473C928;
}

_QWORD *sub_20C2B75C4(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C00D6B0(a1, a2);
    v4 = a1[1];
    v5 = v4 + (a2 << 6);
    do
    {
      *(_DWORD *)v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(_BYTE *)(v4 + 6) = 0;
      v4 += 64;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C2B7634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C2AECF4(&a9);
  _Unwind_Resume(a1);
}

void sub_20C2B7648(void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_20C2B76CC((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_20C2B76CC(uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v4 = (void **)(a2 + 56);
  sub_20C2B69E4(&v4);
  v4 = (void **)(a2 + 32);
  sub_20C0DE330(&v4);
  v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)(a2 + 16) = v3;
    operator delete(v3);
  }
}

uint64_t sub_20C2B7720(uint64_t a1)
{
  void *v2;

  sub_20C2B7758(a1, *(void ***)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C2B7758(uint64_t a1, void **a2)
{
  void **v2;
  void **v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (void **)*v2;
      sub_20C020410(v2 + 3);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_20C2B7794(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  const char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  const char *v11;
  const char *p_p;
  void *__p;
  char v14;
  void *v15;
  char v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = 0x434453552D525850;
  *(_BYTE *)(a3 + 9) = 10;
  if (a2 > 87)
  {
    *(_QWORD *)a1 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 24);
    sub_20C2B9BEC(a1, (void *)a3, 0x58uLL);
    if (*(_QWORD *)a3 == 0x434453552D525850)
    {
      v7 = *(unsigned __int8 *)(a3 + 8);
      v8 = *(unsigned __int8 *)(a3 + 9);
      if (*(_BYTE *)(a3 + 8) || v8 >= 0xB)
      {
        v17 = "usd/crateFile.cpp";
        v18 = "_ReadBootStrap";
        v19 = 3617;
        v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(By"
              "teStream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal_"
              "_aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>]";
        v21 = 0;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v5, v6, v7, v8, *(unsigned __int8 *)(a3 + 10));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v9, v10, 0, 10, 0);
        if (v16 >= 0)
          v11 = (const char *)&v15;
        else
          v11 = (const char *)v15;
        if (v14 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file version mismatch -- file is %s, software supports %s", v11, p_p);
        if (v14 < 0)
          operator delete(__p);
        if (v16 < 0)
          operator delete(v15);
      }
      else if (*(_QWORD *)(a3 + 16) >= a2)
      {
        v17 = "usd/crateFile.cpp";
        v18 = "_ReadBootStrap";
        v19 = 3625;
        v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(By"
              "teStream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal_"
              "_aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>]";
        v21 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, possibly truncated: table of contents at offset %lld but file size is %lld");
      }
    }
    else
    {
      v17 = "usd/crateFile.cpp";
      v18 = "_ReadBootStrap";
      v19 = 3610;
      v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(Byte"
            "Stream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aap"
            "l__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>]";
      v21 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate bootstrap section corrupt");
    }
  }
  else
  {
    v17 = "usd/crateFile.cpp";
    v18 = "_ReadBootStrap";
    v19 = 3603;
    v20 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(ByteSt"
          "ream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__p"
          "xrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>]";
    v21 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v17, 3, (pxrInternal__aapl__pxrReserved__ *)"File too small to contain bootstrap structure");
  }
}

void sub_20C2B79BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_20C2B79F0(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24) + *(_QWORD *)(a2 + 16);
  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  if ((sub_20C2B9DE8(a1, __p) & 1) != 0)
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_20C2B7A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C2B7A8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 6336);
  v3 = *(_QWORD *)(a1 + 6344);
  if (v2 != v3)
  {
    v4 = -1;
    v5 = -1;
    do
    {
      v6 = *(_QWORD *)(v2 + 16);
      if (v6 < v4 || v4 == -1)
        v4 = *(_QWORD *)(v2 + 16);
      v8 = *(_QWORD *)(v2 + 24) + v6;
      if (v8 > v5 || v5 == -1)
        v5 = v8;
      v2 += 32;
    }
    while (v2 != v3);
    if (v4 != -1 && v5 != -1)
      pxrInternal__aapl__pxrReserved__::ArchMemAdvise(*(_QWORD *)(**(_QWORD **)(a2 + 16) + 24) + v4, v5 - v4, 1);
  }
}

void sub_20C2B7B04(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  _QWORD *v6;
  _BOOL4 v7;
  const char *Section;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  char *v18;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  uint64_t v28;
  _BYTE *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t CompressedBufferSize;
  char *v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  int v39;
  size_t __sz;
  const char *v41;
  uint64_t v42;
  const char *v43;
  char v44;
  char *v45;
  void *__p;
  size_t __dst;
  _QWORD *v48;
  int v49;
  char *v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  char v54;
  const char *v55;
  _QWORD v56[10];

  v56[9] = *MEMORY[0x24BDAC8D0];
  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadTokens", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v48 = v6;
  v49 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "TOKENS");
  if (Section)
  {
    v9 = **(_QWORD **)(a2 + 16);
    v10 = *(_QWORD *)(v9 + 32);
    v11 = *((_QWORD *)Section + 2);
    if (v10 > v11 && (v11 & 0x8000000000000000) == 0)
    {
      v12 = a2 + 8;
      *(_QWORD *)(a2 + 8) = *(_QWORD *)(v9 + 24) + v11;
      __dst = 0;
      if ((sub_20C2B9BEC(a2 + 8, &__dst, 8uLL) & 1) == 0)
        goto LABEL_48;
      __p = 0;
      if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x3FFu)
      {
        __sz = 0;
        if ((sub_20C2B9BEC(a2 + 8, &__sz, 8uLL) & 1) == 0)
          goto LABEL_47;
        v45 = 0;
        if ((sub_20C2B9BEC(a2 + 8, &v45, 8uLL) & 1) == 0)
          goto LABEL_47;
        if (!__sz || !v45)
        {
          v50 = "usd/crateFile.cpp";
          v51 = "_ReadTokens";
          v52 = 4008;
          v53 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          v54 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v50, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, tokens section is empty");
          goto LABEL_47;
        }
        v31 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 32);
        v32 = *(_QWORD *)(a2 + 8) - *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24);
        v33 = v31 - v32;
        if (v32 < 0 || (v33 & 0x8000000000000000) != 0 || (unint64_t)v45 > v33)
        {
          v50 = "usd/crateFile.cpp";
          v51 = "_ReadTokens";
          v52 = 4014;
          v53 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          v54 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v50, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens size %llu with remaining file size is %lld of %lld", v45, v33, v31);
          goto LABEL_47;
        }
        CompressedBufferSize = pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)__sz);
        v35 = v45;
        if (!CompressedBufferSize || CompressedBufferSize < (unint64_t)v45)
        {
          v50 = "usd/crateFile.cpp";
          v51 = "_ReadTokens";
          v52 = 4021;
          v53 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          v54 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v50, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens. Corrupt compression data. Compressed size %llu, uncompressed size %llu", v45, __sz);
          goto LABEL_47;
        }
        v36 = __sz;
        v17 = (char *)operator new[](__sz);
        __p = v17;
        v37 = operator new[]((size_t)v35);
        sub_20C2B9BEC(v12, v37, (size_t)v35);
        pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::TfFastCompression *)v37, v17, v45, __sz);
        v18 = &v17[v36];
        v19 = __sz;
        operator delete[](v37);
      }
      else
      {
        __sz = 0;
        if ((sub_20C2B9BEC(a2 + 8, &__sz, 8uLL) & 1) == 0)
          goto LABEL_47;
        v13 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 32);
        v14 = *(_QWORD *)(a2 + 8) - *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24);
        v15 = v13 - v14;
        v16 = __sz;
        if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || __sz > v15)
        {
          v50 = "usd/crateFile.cpp";
          v51 = "_ReadTokens";
          v52 = 3992;
          v53 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          v54 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v50, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens size %llu with remaining file size being %lld of %lld", __sz, v15, v13);
          goto LABEL_47;
        }
        v17 = (char *)operator new[](__sz);
        __p = v17;
        sub_20C2B9BEC(v12, v17, v16);
        v18 = &v17[v16];
        v19 = __sz;
      }
      if (v17 != v18 && *(v18 - 1))
      {
        v50 = "usd/crateFile.cpp";
        v51 = "_ReadTokens";
        v52 = 4036;
        v53 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInternal"
              "__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::"
              "_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
        v54 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v50, 3, (pxrInternal__aapl__pxrReserved__ *)"Tokens section not null-terminated in crate file");
        *(v18 - 1) = 0;
      }
      v20 = __dst;
      if (__dst - 1 >= v19)
      {
        v50 = "usd/crateFile.cpp";
        v51 = "_ReadTokens";
        v52 = 4046;
        v53 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInternal"
              "__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::"
              "_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
        v54 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v50, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens. Corrupt data. Data size %llu, num tokens %llu", v19, __dst);
        __p = 0;
      }
      else
      {
        v21 = *(_QWORD *)(a1 + 120);
        v22 = *(_QWORD *)(a1 + 128);
        v23 = a1 + 120;
        if (v22 != v21)
        {
          do
          {
            v25 = *(_QWORD *)(v22 - 8);
            v22 -= 8;
            v24 = v25;
            if ((v25 & 7) != 0)
            {
              v26 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
              do
                v27 = __ldxr(v26);
              while (__stlxr(v27 - 2, v26));
            }
          }
          while (v22 != v21);
          v20 = __dst;
        }
        *(_QWORD *)(a1 + 128) = v21;
        sub_20C0E5D00(a1 + 120, v20);
        v17[v19 - 1] = 0;
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v50);
        v28 = 0;
        if (v17 < v18 && __dst)
        {
          v28 = 0;
          v29 = __p;
          while (v17 - v29 < v19)
          {
            __sz = 0;
            v41 = v55;
            v30 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&__sz, 0x28uLL);
            *((_BYTE *)v30 - 11) = 1;
            *v30 = &unk_24C52F048;
            v30[1] = v23;
            v30[2] = v28;
            v30[3] = v17;
            v30[4] = v56;
            (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v30 - 5))(*(v30 - 5), v30, (uint64_t)(v30 - 1));
            v17 += strlen(v17) + 1;
            ++v28;
            if (v17 >= v18 || v28 == __dst)
              goto LABEL_30;
          }
          __sz = (size_t)"usd/crateFile.cpp";
          v41 = "_ReadTokens";
          v42 = 4079;
          v43 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          v44 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed read tokens, buffer overflow.");
        }
        else
        {
LABEL_30:
          pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v50);
          if (v28 != __dst)
          {
            __sz = (size_t)"usd/crateFile.cpp";
            v41 = "_ReadTokens";
            v42 = 4089;
            v43 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInte"
                  "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Cra"
                  "teFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
            v44 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz, 3, (pxrInternal__aapl__pxrReserved__ *)"Crate file claims %zu tokens, found %zu", __dst, v28);
          }
          sub_20C2B9F90((pxrInternal__aapl__pxrReserved__ *)&__p);
        }
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v50);
        v17 = (char *)__p;
        __p = 0;
        if (!v17)
          goto LABEL_47;
      }
      operator delete[](v17);
LABEL_47:
      v7 = v49;
      goto LABEL_48;
    }
    v50 = "usd/crateFile.cpp";
    v51 = "_ReadTokens";
    v52 = 3966;
    v53 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInternal__aa"
          "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStr"
          "eam<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v50, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, tokens section is possibly truncatedat offset %lld but file size is %lld", v11, v10);
  }
LABEL_48:
  v49 = v7 - 1;
  if (v7)
  {
    v38 = (uint64_t)v48;
    v39 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v38);
      v49 = v39--;
    }
    while (v39 != -2);
  }
}

void sub_20C2B8158(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (__p)
    operator delete[](__p);
  sub_20BEB24F4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2B8200(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  _QWORD *v6;
  _BOOL4 v7;
  uint64_t result;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadStrings", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  result = (uint64_t)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "STRINGS");
  if (result)
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24) + *(_QWORD *)(result + 16);
    result = sub_20C2BA3B4(a2, (void **)(a1 + 144));
  }
  if (v7)
    return pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
  return result;
}

void sub_20C2B82C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C2B82D4(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v6;
  _BOOL4 v7;
  const char *Section;
  uint64_t v9;
  uint64_t CompressedBufferSize;
  unint64_t DecompressionWorkingSpaceSize;
  _QWORD *v12;
  int v13;
  void *v14;
  void *v15;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v16;
  int *v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  pxrInternal__aapl__pxrReserved__::TfFastCompression *v24;
  _QWORD *v25;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v26;
  _QWORD *v27;
  size_t __sz;
  void *v29;
  _BYTE *v30;
  void *v31[2];
  void *__p[2];
  char v33;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *__dst[2];
  unsigned int v35;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadFields", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  __dst[1] = v6;
  v35 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "FIELDS");
  if (!Section)
    goto LABEL_32;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24) + *((_QWORD *)Section + 2);
  v9 = a2 + 8;
  if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) <= 0x3FFu)
  {
    sub_20C2BA600(a2, (void **)(a1 + 48));
    goto LABEL_32;
  }
  __dst[0] = 0;
  if ((sub_20C2B9BEC(a2 + 8, __dst, 8uLL) & 1) != 0)
  {
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(__dst[0]);
    DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(__dst[0]);
    if (CompressedBufferSize && DecompressionWorkingSpaceSize)
    {
      v12 = (_QWORD *)(a1 + 48);
      sub_20C2BA560((uint64_t)v12, (unint64_t)__dst[0]);
      sub_20BDE36C4(&v29, (unint64_t)__dst[0]);
      *(_OWORD *)v31 = 0u;
      *(_OWORD *)__p = 0u;
      v13 = sub_20C2BA8CC((uint64_t)v31, a2, (unint64_t)v29, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((v30 - (_BYTE *)v29) >> 2));
      v14 = __p[0];
      __p[0] = 0;
      if (v14)
        operator delete[](v14);
      v15 = v31[0];
      v31[0] = 0;
      if (v15)
        operator delete[](v15);
      if (!v13)
        goto LABEL_30;
      v16 = __dst[0];
      if (__dst[0])
      {
        v17 = (int *)v29;
        v18 = (_DWORD *)(*v12 + 4);
        do
        {
          v19 = *v17++;
          *v18 = v19;
          v18 += 4;
          v16 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v16 - 1);
        }
        while (v16);
      }
      __sz = 0;
      if ((sub_20C2B9BEC(a2 + 8, &__sz, 8uLL) & 1) == 0)
        goto LABEL_30;
      v20 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 32);
      v21 = *(_QWORD *)(a2 + 8) - *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24);
      v22 = v20 - v21;
      v23 = __sz;
      if (v21 < 0 || (v22 & 0x8000000000000000) != 0 || __sz > v22)
      {
        v31[0] = "usd/crateFile.cpp";
        v31[1] = "_ReadFields";
        __p[0] = (void *)3739;
        __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFields(Reader) [Reader = pxrInter"
                 "nal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Crate"
                 "File::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
        v33 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v31, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", __sz, v22, v20);
LABEL_30:
        if (v29)
        {
          v30 = v29;
          operator delete(v29);
        }
        goto LABEL_32;
      }
      v24 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](__sz);
      if ((sub_20C2B9BEC(v9, v24, v23) & 1) != 0)
      {
        v31[0] = 0;
        v31[1] = 0;
        __p[0] = 0;
        sub_20BDFC880((uint64_t)v31, (unint64_t)__dst[0]);
        pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(v24, (char *)v31[0], (char *)__sz, (char *)v31[1] - (char *)v31[0]);
        v25 = v31[0];
        if (__dst[0])
        {
          v26 = 0;
          v27 = (_QWORD *)(*v12 + 8);
          do
          {
            *v27 = v25[(_QWORD)v26];
            v27 += 2;
            v26 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v26 + 1);
          }
          while (v26 != __dst[0]);
          goto LABEL_28;
        }
        if (v31[0])
        {
LABEL_28:
          v31[1] = v25;
          operator delete(v25);
        }
      }
      operator delete[](v24);
      goto LABEL_30;
    }
    if (__dst[0])
    {
      v31[0] = "usd/crateFile.cpp";
      v31[1] = "_ReadFields";
      __p[0] = (void *)3720;
      __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFields(Reader) [Reader = pxrInterna"
               "l__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
               "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
      v33 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v31, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed read compressed fields of size %llu.", __dst[0]);
    }
  }
LABEL_32:
  v35 = v7 - 1;
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
    v35 = v7 | 0xFFFFFFFE;
  }
}

void sub_20C2B8600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  uint64_t v18;

  sub_20BEB24F4(v18 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2B8684(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v6;
  _BOOL4 v7;
  const char *Section;
  uint64_t v9;
  uint64_t CompressedBufferSize;
  unint64_t DecompressionWorkingSpaceSize;
  char v12;
  void *v13;
  void *v14;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v15;
  _DWORD *v16;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v17;
  uint64_t v18;
  void *v19[3];
  void *v20[2];
  void *__p[2];
  char v22;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *__dst[2];
  int v24;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadFieldSets", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  __dst[1] = v6;
  v24 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "FIELDSETS");
  if (!Section)
    goto LABEL_27;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24) + *((_QWORD *)Section + 2);
  if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x3FFu)
  {
    __dst[0] = 0;
    if ((sub_20C2B9BEC(a2 + 8, __dst, 8uLL) & 1) == 0)
      goto LABEL_27;
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(__dst[0]);
    DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(__dst[0]);
    if (!CompressedBufferSize || !DecompressionWorkingSpaceSize)
    {
      v20[0] = "usd/crateFile.cpp";
      v20[1] = "_ReadFieldSets";
      __p[0] = (void *)3679;
      __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFieldSets(Reader) [Reader = pxrInte"
               "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
               "ile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed fieldSets of size %llu", __dst[0]);
      goto LABEL_27;
    }
    sub_20C2BAAF8(a1 + 72, (unint64_t)__dst[0]);
    sub_20BDE36C4(v19, (unint64_t)__dst[0]);
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)__p = 0u;
    v12 = sub_20C2BA8CC((uint64_t)v20, a2, (unint64_t)v19[0], __dst[0]);
    v13 = __p[0];
    __p[0] = 0;
    if (v13)
      operator delete[](v13);
    v14 = v20[0];
    v20[0] = 0;
    if (v14)
      operator delete[](v14);
    if ((v12 & 1) != 0)
    {
      v15 = __dst[0];
      v16 = v19[0];
      if (__dst[0])
      {
        v17 = 0;
        v18 = *(_QWORD *)(a1 + 72);
        do
        {
          *(_DWORD *)(v18 + 4 * (_QWORD)v17) = v16[(_QWORD)v17];
          v17 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v17 + 1);
        }
        while (v15 != v17);
LABEL_25:
        v19[1] = v16;
        operator delete(v16);
LABEL_26:
        if ((v12 & 1) == 0)
          goto LABEL_27;
        goto LABEL_7;
      }
    }
    else
    {
      v16 = v19[0];
    }
    if (!v16)
      goto LABEL_26;
    goto LABEL_25;
  }
  if ((sub_20C2BAB28(a2, (void **)(a1 + 72)) & 1) == 0)
    goto LABEL_27;
LABEL_7:
  v9 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 72) != v9 && *(_DWORD *)(v9 - 4) != -1)
  {
    v20[0] = "usd/crateFile.cpp";
    v20[1] = "_ReadFieldSets";
    __p[0] = (void *)3693;
    __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFieldSets(Reader) [Reader = pxrIntern"
             "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile:"
             ":_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt field sets in crate file");
    *(_DWORD *)(*(_QWORD *)(a1 + 80) - 4) = -1;
  }
LABEL_27:
  v24 = v7 - 1;
  if (v7)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
}

void sub_20C2B88FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_20C2BAA20((uint64_t)&a13);
  if (__p)
    operator delete(__p);
  sub_20BEB24F4(v13 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2B894C(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  _QWORD *v6;
  _BOOL4 v7;
  const char *Section;
  unsigned int v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t *v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  __int128 v25[2];
  uint64_t v26;
  _QWORD v27[4];
  char v28;
  uint64_t v29;
  __int128 v30[2];
  uint64_t v31;
  unint64_t __dst;
  _QWORD *v33;
  int v34;
  _BYTE v35[336];
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadPaths", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v33 = v6;
  v34 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "PATHS");
  if (Section)
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24) + *((_QWORD *)Section + 2);
    __dst = 0;
    if ((sub_20C2B9BEC(a2 + 8, &__dst, 8uLL) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v35);
      v9 = (*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8) | *(unsigned __int8 *)(a1 + 6370);
      if (v9 == 1)
      {
        sub_20C13A924((uint64_t *)(a1 + 96), __dst);
        v10 = *(int **)(a1 + 96);
        v11 = *(_QWORD *)(a1 + 104);
        v27[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v27);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v27 + 1);
        if (v11 - (uint64_t)v10 >= 1)
        {
          v12 = ((unint64_t)(v11 - (_QWORD)v10) >> 3) + 1;
          do
          {
            sub_20C01A074(v10, v27);
            sub_20C01A0C8(v10 + 1, (_DWORD *)v27 + 1);
            --v12;
            v10 += 2;
          }
          while (v12 > 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
        sub_20BFD265C(v27);
        v13 = *(_OWORD *)(a2 + 16);
        v30[0] = *(_OWORD *)a2;
        v30[1] = v13;
        v31 = *(_QWORD *)(a2 + 32);
        v29 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v29);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v29 + 1);
        sub_20C2BADE8((char *)a1, v30, (uint64_t)v35, (int *)&v29);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
        v14 = &v29;
      }
      else
      {
        if (v9 > 0x3FF)
        {
          v19 = *(_OWORD *)(a2 + 16);
          v22[0] = *(_OWORD *)a2;
          v22[1] = v19;
          v23 = *(_QWORD *)(a2 + 32);
          sub_20C2BB378((_QWORD *)a1, (uint64_t)v22, (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v35, __dst);
          goto LABEL_19;
        }
        if (__dst > *(_QWORD *)(**(_QWORD **)(a2 + 16) + 32)
                   - *(_QWORD *)(a2 + 8)
                   + *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24))
        {
          v27[0] = "usd/crateFile.cpp";
          v27[1] = "_ReadPaths";
          v27[2] = 4126;
          v27[3] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPaths(Reader) [Reader = pxrInte"
                   "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Cr"
                   "ateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          v28 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid number of paths in file.");
          goto LABEL_19;
        }
        sub_20C13A924((uint64_t *)(a1 + 96), __dst);
        v15 = *(int **)(a1 + 96);
        v16 = *(_QWORD *)(a1 + 104);
        v27[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v27);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v27 + 1);
        if (v16 - (uint64_t)v15 >= 1)
        {
          v17 = ((unint64_t)(v16 - (_QWORD)v15) >> 3) + 1;
          do
          {
            sub_20C01A074(v15, v27);
            sub_20C01A0C8(v15 + 1, (_DWORD *)v27 + 1);
            --v17;
            v15 += 2;
          }
          while (v17 > 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
        sub_20BFD265C(v27);
        v18 = *(_OWORD *)(a2 + 16);
        v25[0] = *(_OWORD *)a2;
        v25[1] = v18;
        v26 = *(_QWORD *)(a2 + 32);
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v24 + 1);
        sub_20C2BB0B0((char *)a1, v25, (uint64_t)v35, (int *)&v24);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
        v14 = &v24;
      }
      sub_20BFD265C(v14);
LABEL_19:
      pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v35);
      v7 = v34;
    }
  }
  v34 = v7 - 1;
  if (v7)
  {
    v20 = (uint64_t)v33;
    v21 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v20);
      v34 = v21--;
    }
    while (v21 != -2);
  }
}

void sub_20C2B8CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&a36);
  sub_20BEB24F4((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_20C2B8D50(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  _QWORD *v6;
  _BOOL4 v7;
  const char *Section;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  const char *v12;
  _DWORD *v13;
  int v14;
  pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  unsigned int *v16;
  char *v17;
  unsigned int *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  const char *v23;
  char *v24;
  unsigned int *v25;
  char v26;
  const char *v27;
  char *v28;
  size_t *v29;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v30;
  __int128 v31;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v32;
  __int128 v33;
  const char *v34;
  char *v35;
  size_t *v36;
  unsigned int v37;
  size_t *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void **v42;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void **v48;
  void **v49;
  __int128 v50;
  __int128 *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void **v55;
  void **v56;
  __int128 v57;
  __int128 *v58;
  void *v59;
  void **v60;
  __int128 v61;
  __int128 *v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  size_t CompressedBufferSize;
  unint64_t DecompressionWorkingSpaceSize;
  size_t v69;
  uint64_t v70;
  uint64_t v71;
  std::string::size_type v72;
  size_t v73;
  void *v74;
  char *v75;
  char *v76;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v77;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **v78;
  _DWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  size_t v83;
  char *v84;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v85;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **v86;
  _DWORD *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  size_t v91;
  char *v92;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v93;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void **v101;
  const char *v102;
  std::string *v103;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  _BOOL4 v108;
  size_t v109[2];
  char v110;
  size_t __n[2];
  char v112;
  std::string v113;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *__dst;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v115;
  unint64_t v116;
  void *__p;
  const char *v118;
  uint64_t v119;
  const char *v120;
  char v121;
  _QWORD *v122;
  int v123;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **p_dst;
  const char *v125;
  uint64_t v126;
  const char *v127;
  unint64_t *v128;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadSpecs", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v122 = v6;
  v123 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "SPECS");
  v9 = a1 + 6368;
  if (Section)
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24) + *((_QWORD *)Section + 2);
    v10 = (*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8) | *(unsigned __int8 *)(a1 + 6370);
    if (v10 == 1)
    {
      __p = 0;
      v118 = 0;
      v119 = 0;
      if ((sub_20C2BC060(a2, &__p) & 1) == 0)
      {
        if (__p)
        {
          v118 = (const char *)__p;
          operator delete(__p);
        }
        goto LABEL_146;
      }
      sub_20C2BC024(a1, (v118 - (_BYTE *)__p) >> 4);
      v11 = (char *)__p;
      v12 = v118;
      if (__p != v118)
      {
        v13 = *(_DWORD **)a1;
        do
        {
          v14 = *((_DWORD *)v11 + 3);
          *(_QWORD *)v13 = *(_QWORD *)(v11 + 4);
          v13[2] = v14;
          v11 += 16;
          v13 += 3;
        }
        while (v11 != v12);
        v11 = (char *)__p;
      }
      if (v11)
      {
        v118 = v11;
        operator delete(v11);
      }
      goto LABEL_15;
    }
    if (v10 <= 0x3FF)
    {
      if ((sub_20C2BC360(a2, (void **)a1) & 1) == 0)
        goto LABEL_146;
      goto LABEL_15;
    }
    __dst = 0;
    if ((sub_20C2B9BEC(a2 + 8, &__dst, 8uLL) & 1) == 0)
      goto LABEL_146;
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(__dst);
    DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(__dst);
    if (!CompressedBufferSize || (v69 = DecompressionWorkingSpaceSize) == 0)
    {
      __p = "usd/crateFile.cpp";
      v118 = "_ReadSpecs";
      v119 = 3784;
      v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__"
             "aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Mm"
             "apStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
      v121 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read specs of size %llu", __dst);
      goto LABEL_146;
    }
    v113.__r_.__value_.__r.__words[0] = 0;
    if ((sub_20C2B9BEC(a2 + 8, &v113, 8uLL) & 1) == 0)
      goto LABEL_146;
    v70 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 32);
    v71 = *(_QWORD *)(a2 + 8) - *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24);
    v72 = v70 - v71;
    v73 = v113.__r_.__value_.__r.__words[0];
    if (v71 < 0 || (v72 & 0x8000000000000000) != 0 || v113.__r_.__value_.__r.__words[0] > v72)
    {
      __p = "usd/crateFile.cpp";
      v118 = "_ReadSpecs";
      v119 = 3795;
      v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__"
             "aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Mm"
             "apStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
      v121 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", v113.__r_.__value_.__r.__words[0], v72, v70);
      goto LABEL_146;
    }
    v74 = operator new[](CompressedBufferSize);
    v75 = (char *)operator new[](v69);
    p_dst = 0;
    v125 = 0;
    v126 = 0;
    if (v73 - 1 >= CompressedBufferSize)
    {
      __p = "usd/crateFile.cpp";
      v118 = "_ReadSpecs";
      v119 = 3817;
      v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__"
             "aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_Mm"
             "apStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
      v121 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read pathIndexes, size > compressedBufferSize.");
    }
    else
    {
      sub_20C2B9BEC(a2 + 8, v74, v73);
      sub_20BE81ACC((uint64_t)&p_dst, (unint64_t)__dst);
      pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v74, v113.__r_.__value_.__l.__data_, (unint64_t)p_dst, (int64_t)__dst, v75, v76);
      sub_20C2BC024(a1, (unint64_t)__dst);
      v77 = __dst;
      if (__dst)
      {
        v78 = p_dst;
        v79 = *(_DWORD **)a1;
        do
        {
          v80 = *(_DWORD *)v78;
          v78 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)((char *)v78 + 4);
          *v79 = v80;
          v79 += 3;
          v77 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v77 - 1);
        }
        while (v77);
      }
      __n[0] = 0;
      if ((sub_20C2B9BEC(a2 + 8, __n, 8uLL) & 1) != 0)
      {
        v81 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 32);
        v82 = *(_QWORD *)(a2 + 8) - *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24);
        v83 = v81 - v82;
        if (v82 < 0 || (v83 & 0x8000000000000000) != 0 || __n[0] > v83)
        {
          __p = "usd/crateFile.cpp";
          v118 = "_ReadSpecs";
          v119 = 3827;
          v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIntern"
                 "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
                 "ile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          v121 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", __n[0], v83, v81);
        }
        else if (__n[0] - 1 >= CompressedBufferSize)
        {
          __p = "usd/crateFile.cpp";
          v118 = "_ReadSpecs";
          v119 = 3841;
          v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIntern"
                 "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
                 "ile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
          v121 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fsetIndexes, size > compressedBufferSize.");
        }
        else
        {
          sub_20C2B9BEC(a2 + 8, v74, __n[0]);
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v74, (char *)__n[0], (unint64_t)p_dst, (int64_t)__dst, v75, v84);
          v85 = __dst;
          if (__dst)
          {
            v86 = p_dst;
            v87 = (_DWORD *)(*(_QWORD *)a1 + 4);
            do
            {
              v88 = *(_DWORD *)v86;
              v86 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)((char *)v86 + 4);
              *v87 = v88;
              v87 += 3;
              v85 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v85 - 1);
            }
            while (v85);
          }
          v109[0] = 0;
          if ((sub_20C2B9BEC(a2 + 8, v109, 8uLL) & 1) != 0)
          {
            v89 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 32);
            v90 = *(_QWORD *)(a2 + 8) - *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24);
            v91 = v89 - v90;
            if (v90 < 0 || (v91 & 0x8000000000000000) != 0 || v109[0] > v91)
            {
              __p = "usd/crateFile.cpp";
              v118 = "_ReadSpecs";
              v119 = 3852;
              v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIn"
                     "ternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Us"
                     "d_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
              v121 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read spec types of size %llu with remaining file size is %lld of %lld", v109[0], v91, v89);
            }
            else
            {
              if (v109[0] - 1 < CompressedBufferSize)
              {
                sub_20C2B9BEC(a2 + 8, v74, v109[0]);
                pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v74, (char *)v109[0], (unint64_t)p_dst, (int64_t)__dst, v75, v92);
                v93 = __dst;
                if (__dst)
                {
                  v94 = 0;
                  v95 = 8;
                  do
                  {
                    v96 = *((unsigned int *)p_dst + (_QWORD)v94);
                    if (v96 >= 0xC)
                    {
                      __p = "usd/crateFile.cpp";
                      v118 = "_ReadSpecs";
                      v119 = 3864;
                      v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader"
                             " = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__p"
                             "xrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                             "rateFile::_FileMapping *>>]";
                      v121 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid spec type %zu", v96);
                      *(_DWORD *)(*(_QWORD *)a1 + v95) = 0;
                      v93 = __dst;
                    }
                    else
                    {
                      *(_DWORD *)(*(_QWORD *)a1 + v95) = v96;
                    }
                    v94 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v94 + 1);
                    v95 += 12;
                  }
                  while (v94 != v93);
                  v106 = 0;
                  v9 = a1 + 6368;
                }
                else
                {
                  v106 = 0;
                }
LABEL_153:
                if (p_dst)
                {
                  v125 = (const char *)p_dst;
                  operator delete(p_dst);
                }
                operator delete[](v75);
                operator delete[](v74);
                if (v106)
                  goto LABEL_146;
                goto LABEL_15;
              }
              __p = "usd/crateFile.cpp";
              v118 = "_ReadSpecs";
              v119 = 3871;
              v120 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIn"
                     "ternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Us"
                     "d_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
              v121 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read spectypes, size > compressedBufferSize.");
            }
          }
        }
      }
    }
    v106 = 1;
    goto LABEL_153;
  }
LABEL_15:
  v108 = v7;
  v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2BC654((uint64_t)&__p, 0, 0.0, 0.5);
  __dst = 0;
  v115 = 0;
  v116 = 0;
  v17 = *(char **)a1;
  v16 = *(unsigned int **)(a1 + 8);
  if (*(unsigned int **)a1 == v16)
    goto LABEL_145;
  v107 = v9;
  v18 = (unsigned int *)(v17 + 8);
  v19 = *(char **)a1;
  do
  {
    v20 = *(v18 - 2);
    v21 = *(_QWORD *)(a1 + 96);
    if (v20 >= (*(_QWORD *)(a1 + 104) - v21) >> 3)
      v22 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v15);
    else
      v22 = (uint64_t *)(v21 + 8 * v20);
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v22))
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec at index %zu has empty path", v23, v24, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v17[-*(_QWORD *)a1] >> 2));
      v32 = v115;
      if ((unint64_t)v115 >= v116)
      {
        v39 = 0xAAAAAAAAAAAAAAABLL * ((v115 - __dst) >> 3);
        v40 = v39 + 1;
        if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        if (0x5555555555555556 * ((uint64_t)(v116 - (_QWORD)__dst) >> 3) > v40)
          v40 = 0x5555555555555556 * ((uint64_t)(v116 - (_QWORD)__dst) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - (_QWORD)__dst) >> 3) >= 0x555555555555555)
          v41 = 0xAAAAAAAAAAAAAAALL;
        else
          v41 = v40;
        v128 = &v116;
        if (v41)
          v42 = (void **)sub_20BDE4FF4((uint64_t)&v116, v41);
        else
          v42 = 0;
        v49 = &v42[3 * v39];
        p_dst = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)v42;
        v125 = (const char *)v49;
        v127 = (const char *)&v42[3 * v41];
        v50 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
        v49[2] = (void *)v113.__r_.__value_.__r.__words[2];
        *(_OWORD *)v49 = v50;
        memset(&v113, 0, sizeof(v113));
        v126 = (uint64_t)(v49 + 3);
        sub_20BDF34C0((uint64_t *)&__dst, &p_dst);
        v51 = (__int128 *)v115;
        v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDF3648((uint64_t)&p_dst);
        v115 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v51;
        if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v113.__r_.__value_.__l.__data_);
      }
      else
      {
        v33 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
        *((_QWORD *)v115 + 2) = *((_QWORD *)&v113.__r_.__value_.__l + 2);
        *(_OWORD *)v32 = v33;
        v115 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v32 + 24);
      }
      v25 = v18;
      goto LABEL_81;
    }
    v25 = (unsigned int *)(v19 + 8);
    if (*v18 && (int)*v18 < 12)
    {
      v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2BC978((uint64_t *)&__p, (unsigned int *)v22, v22);
      if ((v26 & 1) != 0)
        goto LABEL_82;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v22, (uint64_t)__n);
      v29 = __n;
      if (v112 < 0)
        v29 = (size_t *)__n[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec <%s> repeated", v27, v28, v29);
      v30 = v115;
      if ((unint64_t)v115 < v116)
      {
        v31 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
        *((_QWORD *)v115 + 2) = *((_QWORD *)&v113.__r_.__value_.__l + 2);
        *(_OWORD *)v30 = v31;
        memset(&v113, 0, sizeof(v113));
        v115 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v30 + 24);
        goto LABEL_79;
      }
      v52 = 0xAAAAAAAAAAAAAAABLL * ((v115 - __dst) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      if (0x5555555555555556 * ((uint64_t)(v116 - (_QWORD)__dst) >> 3) > v53)
        v53 = 0x5555555555555556 * ((uint64_t)(v116 - (_QWORD)__dst) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - (_QWORD)__dst) >> 3) >= 0x555555555555555)
        v54 = 0xAAAAAAAAAAAAAAALL;
      else
        v54 = v53;
      v128 = &v116;
      if (v54)
        v55 = (void **)sub_20BDE4FF4((uint64_t)&v116, v54);
      else
        v55 = 0;
      v60 = &v55[3 * v52];
      p_dst = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)v55;
      v125 = (const char *)v60;
      v127 = (const char *)&v55[3 * v54];
      v61 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
      v60[2] = (void *)v113.__r_.__value_.__r.__words[2];
      *(_OWORD *)v60 = v61;
      memset(&v113, 0, sizeof(v113));
      v126 = (uint64_t)(v60 + 3);
      sub_20BDF34C0((uint64_t *)&__dst, &p_dst);
      v62 = (__int128 *)v115;
      v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDF3648((uint64_t)&p_dst);
      v115 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v62;
      if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_79;
      v59 = (void *)v113.__r_.__value_.__r.__words[0];
      goto LABEL_78;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v22, (uint64_t)__n);
    if (v112 >= 0)
      v36 = __n;
    else
      v36 = (size_t *)__n[0];
    v37 = *v18;
    if (*v18)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"invalid spec type value %d", v34, v35, *v18);
      v38 = v109;
      if (v110 < 0)
        v38 = (size_t *)v109[0];
    }
    else
    {
      v38 = (size_t *)"unknown spec type";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec <%s> has %s", v34, v35, v36, v38);
    v43 = v115;
    if ((unint64_t)v115 >= v116)
    {
      v45 = 0xAAAAAAAAAAAAAAABLL * ((v115 - __dst) >> 3);
      v46 = v45 + 1;
      if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      if (0x5555555555555556 * ((uint64_t)(v116 - (_QWORD)__dst) >> 3) > v46)
        v46 = 0x5555555555555556 * ((uint64_t)(v116 - (_QWORD)__dst) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v116 - (_QWORD)__dst) >> 3) >= 0x555555555555555)
        v47 = 0xAAAAAAAAAAAAAAALL;
      else
        v47 = v46;
      v128 = &v116;
      if (v47)
        v48 = (void **)sub_20BDE4FF4((uint64_t)&v116, v47);
      else
        v48 = 0;
      v56 = &v48[3 * v45];
      p_dst = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)v48;
      v125 = (const char *)v56;
      v127 = (const char *)&v48[3 * v47];
      v57 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
      v56[2] = (void *)v113.__r_.__value_.__r.__words[2];
      *(_OWORD *)v56 = v57;
      memset(&v113, 0, sizeof(v113));
      v126 = (uint64_t)(v56 + 3);
      sub_20BDF34C0((uint64_t *)&__dst, &p_dst);
      v58 = (__int128 *)v115;
      v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDF3648((uint64_t)&p_dst);
      v115 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v58;
      if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v37)
          goto LABEL_79;
LABEL_71:
        if ((v110 & 0x80000000) == 0)
          goto LABEL_79;
        v59 = (void *)v109[0];
LABEL_78:
        operator delete(v59);
        goto LABEL_79;
      }
      operator delete(v113.__r_.__value_.__l.__data_);
      if (v37)
        goto LABEL_71;
    }
    else
    {
      v44 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
      *((_QWORD *)v115 + 2) = *((_QWORD *)&v113.__r_.__value_.__l + 2);
      *(_OWORD *)v43 = v44;
      memset(&v113, 0, sizeof(v113));
      v115 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v43 + 24);
      if (v37)
        goto LABEL_71;
    }
LABEL_79:
    if (v112 < 0)
      operator delete((void *)__n[0]);
LABEL_81:
    *v25 = 0;
LABEL_82:
    v19 += 12;
    v63 = v18 + 1;
    v18 += 3;
    v17 += 12;
  }
  while (v63 != v16);
  v7 = v108;
  if (__dst != v115)
  {
    v64 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 != v64)
    {
      v65 = *(_QWORD *)a1 + 12;
      while (*(_DWORD *)(v65 - 4))
      {
        v66 = v65 == v64;
        v65 += 12;
        if (v66)
          goto LABEL_134;
      }
      v97 = v65 - 12;
      if (v65 - 12 != v64 && v65 != v64)
      {
        do
        {
          if (*(_DWORD *)(v65 + 8))
          {
            v98 = *(_QWORD *)v65;
            *(_DWORD *)(v97 + 8) = *(_DWORD *)(v65 + 8);
            *(_QWORD *)v97 = v98;
            v97 += 12;
          }
          v65 += 12;
        }
        while (v65 != v64);
        v64 = *(_QWORD *)(a1 + 8);
      }
      if (v97 != v64)
        *(_QWORD *)(a1 + 8) = v97;
    }
LABEL_134:
    v99 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v115 - __dst) >> 3));
    if (v115 == __dst)
      v100 = 0;
    else
      v100 = v99;
    sub_20C2BCF78((uint64_t)__dst, (unint64_t)v115, (uint64_t)&p_dst, v100, 1);
    v101 = sub_20C104400((unsigned __int8 *)__dst, (unsigned __int8 *)v115, (uint64_t)&p_dst);
    sub_20C0F9EEC((uint64_t)&__dst, (uint64_t)v101, (__int128 *)v115);
    p_dst = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)"usd/crateFile.cpp";
    v125 = "_ReadSpecs";
    v126 = 3935;
    v127 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__aa"
           "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapSt"
           "ream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
    LOBYTE(v128) = 0;
    v102 = (const char *)(a1 + 6512);
    if (*(char *)(v107 + 167) < 0)
      v102 = *(const char **)v102;
    pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (std::string **)&__dst, &v113);
    if ((v113.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v103 = &v113;
    else
      v103 = (std::string *)v113.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset @%s@ - ignoring invalid specs: %s.", v102, (const char *)v103);
    if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v113.__r_.__value_.__l.__data_);
    v7 = v123;
  }
LABEL_145:
  p_dst = &__dst;
  sub_20BDE5038((void ***)&p_dst);
  p_dst = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&v118;
  sub_20C2BC86C((void ***)&p_dst);
LABEL_146:
  v123 = v7 - 1;
  if (v7)
  {
    v104 = (uint64_t)v122;
    v105 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v104);
      v123 = v105--;
    }
    while (v105 != -2);
  }
}

void sub_20C2B9A44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;
  void *v38;
  uint64_t v39;
  void *v41;

  v41 = *(void **)(v39 - 128);
  if (v41)
  {
    *(_QWORD *)(v39 - 120) = v41;
    operator delete(v41);
  }
  operator delete[](v38);
  operator delete[](v37);
  sub_20BEB24F4(v39 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2B9BEC(uint64_t a1, void *__dst, size_t __n)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;

  v5 = *(const void **)a1;
  v6 = **(_QWORD **)(a1 + 8);
  v8 = *(_QWORD *)(v6 + 24);
  v7 = *(_QWORD *)(v6 + 32);
  if (v8 > *(_QWORD *)a1 || *(_QWORD *)a1 + __n > v8 + v7)
  {
    v22 = "usd/crateFile.cpp";
    v23 = "Read";
    v24 = 613;
    v25 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
          "ile::CrateFile::_FileMapping *>::Read(void *, size_t) [FileMappingPtr = pxrInternal__aapl__pxrReserved__::Usd_"
          "CrateFile::CrateFile::_FileMapping *]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", __n, (ptrdiff_t)v5 - v8, v7);
    memset(__dst, 153, __n);
    return 0;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v18 = sub_20C2A4C20(v8);
    v19 = sub_20C2A4C20(*(_QWORD *)a1);
    v20 = sub_20C2A4C20(*(_QWORD *)a1 + __n - 1);
    memset((void *)(*(_QWORD *)(a1 + 16) + v19 - v18), 1, v20 - v19 + 1);
    v5 = *(const void **)a1;
    v21 = **(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)(v21 + 24);
    v7 = *(_QWORD *)(v21 + 32);
  }
  v11 = v7 - ((unint64_t)v5 - v8);
  if (v11 < __n || ((v11 | ((size_t)v5 - v8)) & 0x8000000000000000) != 0)
  {
    v22 = "usd/crateFile.cpp";
    v23 = "Read";
    v24 = 631;
    v25 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
          "ile::CrateFile::_FileMapping *>::Read(void *, size_t) [FileMappingPtr = pxrInternal__aapl__pxrReserved__::Usd_"
          "CrateFile::CrateFile::_FileMapping *]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", __n, v7 - ((unint64_t)v5 - v8), v7);
    return 0;
  }
  if (*(_DWORD *)(a1 + 24))
  {
    v12 = sub_20C2AEECC() & v8;
    v13 = *(int *)(a1 + 24);
    v14 = *(_QWORD *)a1 - v12;
    v15 = v12 + v14 / (v13 << 10) * (v13 << 10);
    v16 = (v13 << 10) * ((v14 + __n) / (v13 << 10)) + (v13 << 10);
    if (v16 >= v8 - v12 + *(_QWORD *)(**(_QWORD **)(a1 + 8) + 32))
      v16 = v8 - v12 + *(_QWORD *)(**(_QWORD **)(a1 + 8) + 32);
    pxrInternal__aapl__pxrReserved__::ArchMemAdvise(v15, v12 + v16 - v15, 1);
    v5 = *(const void **)a1;
  }
  memcpy(__dst, v5, __n);
  *(_QWORD *)a1 += __n;
  return 1;
}

uint64_t sub_20C2B9DE8(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *__p;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  unint64_t __dst;

  __dst = 0;
  v4 = a1 + 8;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __p = "usd/crateFile.cpp";
    v13 = "_Read";
    v14 = 1189;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Crat"
          "eFile::_Section]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_20C2B9F1C(&__p, __dst);
  v8 = sub_20C2B9BEC(v4, __p, 32 * __dst);
  v9 = v8;
  if (&__p == a2)
    v10 = 0;
  else
    v10 = v8;
  if ((v10 & 1) != 0)
    sub_20C2B2718((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 5);
  if (__p)
  {
    v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_20C2B9F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2B9F1C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BF25370(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 32 * a2);
    a1[1] = &v4[32 * a2];
  }
  return a1;
}

void sub_20C2B9F74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C2B9F90(pxrInternal__aapl__pxrReserved__ *a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)a1;
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(a1) & 1) == 0)
  {
    sub_20C2BA138((pxrInternal__aapl__pxrReserved__ *)&v2);
    v1 = v2;
  }
  v2 = 0;
  if (v1)
    operator delete[](v1);
}

void sub_20C2B9FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete[](__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2BA004(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2BA0A4(a1 + 8);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2BA090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2BA0A4(uint64_t a1)
{
  uint64_t result;
  uint64_t *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;

  result = pxrInternal__aapl__pxrReserved__::TfToken::TfToken((pxrInternal__aapl__pxrReserved__::TfToken *)&v8, *(const char **)(a1 + 16));
  v3 = (uint64_t *)(**(_QWORD **)a1 + 8 * *(_QWORD *)(a1 + 8));
  if (&v8 == v3)
  {
    if ((v8 & 7) != 0)
    {
      v6 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  else
  {
    if ((*v3 & 7) != 0)
    {
      v4 = (unsigned int *)(*v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
    *v3 = v8;
  }
  return result;
}

void sub_20C2BA138(pxrInternal__aapl__pxrReserved__ *a1)
{
  void *v1;
  _BOOL8 HasConcurrency;
  uint64_t DetachedDispatcher;
  uint64_t v4;
  _QWORD *v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  void *__p;
  _QWORD v8[2];

  v1 = *(void **)a1;
  __p = *(void **)a1;
  *(_QWORD *)a1 = 0;
  HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1);
  if (HasConcurrency)
  {
    DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    v4 = *(_QWORD *)(DetachedDispatcher + 256);
    v8[0] = 0;
    v8[1] = v4;
    v5 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v8, 0x18uLL);
    *((_BYTE *)v5 - 11) = 1;
    *v5 = &unk_24C52F090;
    v5[1] = v1;
    v5[2] = DetachedDispatcher + 264;
    v6 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(_QWORD, _QWORD *, uint64_t))*(v5 - 5))(*(v5 - 5), v5, (uint64_t)(v5 - 1));
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v6);
  }
  else
  {
    sub_20C2BA200();
    if (__p)
      operator delete[](__p);
  }
}

void sub_20C2BA1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p)
    operator delete[](__p);
  _Unwind_Resume(exception_object);
}

void sub_20C2BA200()
{
  unint64_t *Instance;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v1 = sub_20BEC5244(&v3, 0);
  v4 = 0;
  v2 = (_QWORD *)sub_20BEB5B80(Instance + 19, &v4);
  if (v2 != v1)
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v1, v2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_20C2BA288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2BA29C(_QWORD *a1)
{
  void *v2;

  v2 = (void *)a1[1];
  *a1 = &unk_24C52F090;
  a1[1] = 0;
  if (v2)
    operator delete[](v2);
  return a1;
}

void sub_20C2BA2D8(_QWORD *__p)
{
  void *v2;

  v2 = (void *)__p[1];
  *__p = &unk_24C52F090;
  __p[1] = 0;
  if (v2)
    operator delete[](v2);
  operator delete(__p);
}

uint64_t sub_20C2BA314(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2BA200();
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 16));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2BA3A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2BA3B4(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *__p;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  unint64_t __dst;

  __dst = 0;
  v4 = a1 + 8;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __p = "usd/crateFile.cpp";
    v13 = "_Read";
    v14 = 1189;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::TokenIndex]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_20C2BA4E8(&__p, __dst);
  v8 = sub_20C2B9BEC(v4, __p, 4 * __dst);
  v9 = v8;
  if (&__p == a2)
    v10 = 0;
  else
    v10 = v8;
  if ((v10 & 1) != 0)
    sub_20BE8B37C((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_20C2BA4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2BA4E8(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE3738(a1, a2);
    v4 = (char *)a1[1];
    memset(v4, 255, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_20C2BA544(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C2BA560(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_20C2BA7AC((void **)a1, a2 - v2);
  }
}

void sub_20C2BA590(uint64_t a1, unint64_t a2, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a3)
{
  void *v3;
  void *v4;
  void *v5[2];
  void *__p[2];

  *(_OWORD *)v5 = 0u;
  *(_OWORD *)__p = 0u;
  sub_20C2BA8CC((uint64_t)v5, a1, a2, a3);
  v3 = __p[0];
  __p[0] = 0;
  if (v3)
    operator delete[](v3);
  v4 = v5[0];
  v5[0] = 0;
  if (v4)
    operator delete[](v4);
}

void sub_20C2BA5EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C2BAA20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2BA600(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *__p;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  unint64_t __dst;

  __dst = 0;
  v4 = a1 + 8;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __p = "usd/crateFile.cpp";
    v13 = "_Read";
    v14 = 1189;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Field]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_20C2BA734(&__p, __dst);
  v8 = sub_20C2B9BEC(v4, __p, 16 * __dst);
  v9 = v8;
  if (&__p == a2)
    v10 = 0;
  else
    v10 = v8;
  if ((v10 & 1) != 0)
    sub_20BEF5530((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 4);
  if (__p)
  {
    v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_20C2BA718(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2BA734(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE90F0C(a1, a2);
    v4 = a1[1];
    v5 = v4 + 16 * a2;
    v6 = 16 * a2;
    v7 = (_DWORD *)(v4 + 4);
    do
    {
      *v7 = -1;
      v7 += 4;
      v6 -= 16;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C2BA790(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C2BA7AC(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  _DWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _DWORD *v19;
  char *v20;
  char *v21;
  char *v22;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_DWORD **)(v4 - 8);
  if (a2 <= (v6 - (_BYTE *)v7) >> 4)
  {
    if (a2)
    {
      v14 = 16 * a2;
      v15 = v7 + 1;
      v7 += 4 * a2;
      do
      {
        *v15 = -1;
        v15 += 4;
        v14 -= 16;
      }
      while (v14);
    }
    a1[1] = v7;
  }
  else
  {
    v8 = (char *)v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_20BDDF694();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_20BDEA2F0(v4, v12);
    else
      v13 = 0;
    v16 = &v13[16 * v10];
    v17 = &v16[16 * a2];
    v18 = 16 * a2;
    v19 = v16 + 4;
    do
    {
      *v19 = -1;
      v19 += 4;
      v18 -= 16;
    }
    while (v18);
    v20 = &v13[16 * v12];
    v22 = (char *)*a1;
    v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v21 - 1);
        v16 -= 16;
        v21 -= 16;
      }
      while (v21 != v22);
      v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
      operator delete(v21);
  }
}

uint64_t sub_20C2BA8CC(uint64_t a1, uint64_t a2, unint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;
  char *__dst;

  sub_20C2BAA60(a1, this);
  __dst = 0;
  result = sub_20C2B9BEC(a2 + 8, &__dst, 8uLL);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 32);
    v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = __dst;
    if (v11 < (unint64_t)__dst)
      v12 = *(char **)(a1 + 8);
    if (v9 - v10 >= (unint64_t)v12)
      v13 = v12;
    else
      v13 = (char *)(v9 - v10);
    __dst = v13;
    if (v11 && *(_QWORD *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        result = sub_20C2B9BEC(a2 + 8, *(void **)a1, (size_t)v13);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a1, __dst, a3, (int64_t)this, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2158;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, "
            "Int = unsigned int]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2153;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, "
            "Int = unsigned int]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

uint64_t sub_20C2BAA20(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v2)
    operator delete[](v2);
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete[](v3);
  return a1;
}

void sub_20C2BAA60(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  size_t CompressedBufferSize;
  size_t DecompressionWorkingSpaceSize;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(this);
  DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(this);
  if (CompressedBufferSize > *(_QWORD *)(a1 + 8))
  {
    v6 = operator new[](CompressedBufferSize);
    v7 = *(void **)a1;
    *(_QWORD *)a1 = v6;
    if (v7)
      operator delete[](v7);
    *(_QWORD *)(a1 + 8) = CompressedBufferSize;
  }
  if (DecompressionWorkingSpaceSize > *(_QWORD *)(a1 + 24))
  {
    v8 = operator new[](DecompressionWorkingSpaceSize);
    v9 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v8;
    if (v9)
      operator delete[](v9);
    *(_QWORD *)(a1 + 24) = DecompressionWorkingSpaceSize;
  }
}

void sub_20C2BAAF8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    sub_20C2BACD4((char **)a1, a2 - v2);
  }
}

uint64_t sub_20C2BAB28(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *__p;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  unint64_t __dst;

  __dst = 0;
  v4 = a1 + 8;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __p = "usd/crateFile.cpp";
    v13 = "_Read";
    v14 = 1189;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::FieldIndex]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_20C2BAC5C(&__p, __dst);
  v8 = sub_20C2B9BEC(v4, __p, 4 * __dst);
  v9 = v8;
  if (&__p == a2)
    v10 = 0;
  else
    v10 = v8;
  if ((v10 & 1) != 0)
    sub_20BE8B37C((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_20C2BAC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2BAC5C(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE3738(a1, a2);
    v4 = (char *)a1[1];
    memset(v4, 255, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_20C2BACB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C2BACD4(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      memset(*(void **)(v4 - 8), 255, 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      sub_20BDDF694();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_20BDE1330(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    memset(v15, 255, 4 * a2);
    v17 = &v15[4 * a2];
    if (v7 != v8)
    {
      do
      {
        v18 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v15 - 1) = v18;
        v15 -= 4;
      }
      while (v7 != v8);
      v8 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_20C2BADE8(char *a1, __int128 *a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  int *v8;
  _BOOL8 v9;
  uint64_t v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  char v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  _BYTE __dst[4];
  uint64_t v33;
  char v34;

  v7 = (uint64_t)a2 + 8;
  v8 = a4 + 1;
  do
  {
    v33 = -1;
    if (!sub_20C2B9BEC(v7, __dst, 0x10uLL))
      break;
    v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (v9)
    {
      v10 = *((_QWORD *)a1 + 15);
      if (HIDWORD(v33) >= (unint64_t)((*((_QWORD *)a1 + 16) - v10) >> 3)
        || v33 >= (unint64_t)((uint64_t)(*((_QWORD *)a1 + 13) - *((_QWORD *)a1 + 12)) >> 3))
      {
        v23 = "usd/crateFile.cpp";
        *(_QWORD *)&v24 = "_ReadPathsImpl";
        v21 = 4159;
LABEL_23:
        *((_QWORD *)&v24 + 1) = v21;
        *(_QWORD *)&v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPathsImpl(Reader, WorkDi"
                          "spatcher &, SdfPath) [Header = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PathItemHeade"
                          "r_0_0_1, Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInter"
                          "nal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_Cra"
                          "teFile::CrateFile::_FileMapping *>>]";
        BYTE8(v25) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid paths header causing OOB access.", a3);
        return;
      }
      v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 8 * HIDWORD(v33));
      if ((v34 & 4) != 0)
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      else
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      v15 = (int *)(*((_QWORD *)a1 + 12) + 8 * v33);
      sub_20BFD3EBC(v15, (int *)&v23);
      sub_20BFD3F10(v15 + 1, (int *)&v23 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_20BFD265C(&v23);
    }
    else
    {
      v12 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
      sub_20C01A074(a4, v12);
      sub_20C01A0C8(v8, v12 + 1);
      v13 = *((_QWORD *)a1 + 12);
      if (v33 >= (unint64_t)((*((_QWORD *)a1 + 13) - v13) >> 3))
      {
        v23 = "usd/crateFile.cpp";
        *(_QWORD *)&v24 = "_ReadPathsImpl";
        v21 = 4152;
        goto LABEL_23;
      }
      v14 = (int *)(v13 + 8 * v33);
      sub_20C01A074(v14, a4);
      sub_20C01A0C8(v14 + 1, v8);
    }
    v16 = v34;
    if ((v34 & 1) != 0)
    {
      if ((v34 & 2) != 0)
      {
        v31 = 0;
        if (!sub_20C2B9BEC(v7, &v31, 8uLL))
          return;
        v17 = a2[1];
        v24 = *a2;
        v25 = v17;
        v26 = *((_QWORD *)a2 + 4);
        v23 = a1;
        v27 = v31;
        v28 = a3;
        sub_20BFD6E54(&v29, a4);
        sub_20BFD6EA4(&v30, v8);
        v18 = sub_20C2BB834(a3, (uint64_t)&v23);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v18 - 40))(*(_QWORD *)(v18 - 40), v18, v18 - 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
        sub_20BFD265C(&v29);
      }
      v19 = *((_QWORD *)a1 + 12);
      if (v33 >= (unint64_t)((*((_QWORD *)a1 + 13) - v19) >> 3))
      {
        v23 = "usd/crateFile.cpp";
        *(_QWORD *)&v24 = "_ReadPathsImpl";
        v21 = 4195;
        goto LABEL_23;
      }
      v20 = (_DWORD *)(v19 + 8 * v33);
      sub_20C01A074(a4, v20);
      sub_20C01A0C8(v8, v20 + 1);
    }
  }
  while ((v16 & 3) != 0);
}

void sub_20C2BB094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C2BB800((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2BB0B0(char *a1, __int128 *a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  int *v8;
  _BOOL8 v9;
  uint64_t v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  char v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t __dst;
  char v33;

  v7 = (uint64_t)a2 + 8;
  v8 = a4 + 1;
  do
  {
    __dst = -1;
    if (!sub_20C2B9BEC(v7, &__dst, 0xCuLL))
      break;
    v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (v9)
    {
      v10 = *((_QWORD *)a1 + 15);
      if (HIDWORD(__dst) >= (unint64_t)((*((_QWORD *)a1 + 16) - v10) >> 3)
        || __dst >= (unint64_t)((uint64_t)(*((_QWORD *)a1 + 13) - *((_QWORD *)a1 + 12)) >> 3))
      {
        v23 = "usd/crateFile.cpp";
        *(_QWORD *)&v24 = "_ReadPathsImpl";
        v21 = 4159;
LABEL_23:
        *((_QWORD *)&v24 + 1) = v21;
        *(_QWORD *)&v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPathsImpl(Reader, WorkDi"
                          "spatcher &, SdfPath) [Header = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PathItemHeade"
                          "r, Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__a"
                          "apl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                          "::CrateFile::_FileMapping *>>]";
        BYTE8(v25) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid paths header causing OOB access.", a3);
        return;
      }
      v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 8 * HIDWORD(__dst));
      if ((v33 & 4) != 0)
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      else
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      v15 = (int *)(*((_QWORD *)a1 + 12) + 8 * __dst);
      sub_20BFD3EBC(v15, (int *)&v23);
      sub_20BFD3F10(v15 + 1, (int *)&v23 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_20BFD265C(&v23);
    }
    else
    {
      v12 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
      sub_20C01A074(a4, v12);
      sub_20C01A0C8(v8, v12 + 1);
      v13 = *((_QWORD *)a1 + 12);
      if (__dst >= (unint64_t)((*((_QWORD *)a1 + 13) - v13) >> 3))
      {
        v23 = "usd/crateFile.cpp";
        *(_QWORD *)&v24 = "_ReadPathsImpl";
        v21 = 4152;
        goto LABEL_23;
      }
      v14 = (int *)(v13 + 8 * __dst);
      sub_20C01A074(v14, a4);
      sub_20C01A0C8(v14 + 1, v8);
    }
    v16 = v33;
    if ((v33 & 1) != 0)
    {
      if ((v33 & 2) != 0)
      {
        v31 = 0;
        if (!sub_20C2B9BEC(v7, &v31, 8uLL))
          return;
        v17 = a2[1];
        v24 = *a2;
        v25 = v17;
        v26 = *((_QWORD *)a2 + 4);
        v23 = a1;
        v27 = v31;
        v28 = a3;
        sub_20BFD6E54(&v29, a4);
        sub_20BFD6EA4(&v30, v8);
        v18 = sub_20C2BBC0C(a3, (uint64_t)&v23);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v18 - 40))(*(_QWORD *)(v18 - 40), v18, v18 - 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
        sub_20BFD265C(&v29);
      }
      v19 = *((_QWORD *)a1 + 12);
      if (__dst >= (unint64_t)((*((_QWORD *)a1 + 13) - v19) >> 3))
      {
        v23 = "usd/crateFile.cpp";
        *(_QWORD *)&v24 = "_ReadPathsImpl";
        v21 = 4195;
        goto LABEL_23;
      }
      v20 = (_DWORD *)(v19 + 8 * __dst);
      sub_20C01A074(a4, v20);
      sub_20C01A0C8(v8, v20 + 1);
    }
  }
  while ((v16 & 3) != 0);
}

void sub_20C2BB35C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C2BBBD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2BB378(_QWORD *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::WorkDispatcher *a3, unint64_t a4)
{
  uint64_t CompressedBufferSize;
  unint64_t DecompressionWorkingSpaceSize;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;
  void *v27[2];
  void *__p[2];
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *__dst;
  void *v30;
  void *v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  __dst = 0;
  if ((sub_20C2B9BEC(a2 + 8, &__dst, 8uLL) & 1) != 0)
  {
    *(_OWORD *)v27 = 0u;
    *(_OWORD *)__p = 0u;
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(__dst);
    DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(__dst);
    if (CompressedBufferSize && DecompressionWorkingSpaceSize)
    {
      sub_20BE81ACC((uint64_t)&v36, (unint64_t)__dst);
      if (sub_20C2BA8CC((uint64_t)v27, a2, (unint64_t)v36, __dst))
      {
        v10 = v36;
        if (v36 == v37)
        {
          v11 = 0;
LABEL_13:
          if (v11 + 1 < a4)
          {
            v22 = "usd/crateFile.cpp";
            v23 = "_ReadCompressedPaths";
            v24 = 4253;
            v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDisp"
                  "atcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrI"
                  "nternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                  "le::CrateFile::_FileMapping *>>]";
            v26 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths. numPaths = %llu too large for max index = %llu", a4, v11);
          }
          else if ((unint64_t)__dst > a4)
          {
            v22 = "usd/crateFile.cpp";
            v23 = "_ReadCompressedPaths";
            v24 = 4259;
            v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDisp"
                  "atcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrI"
                  "nternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                  "le::CrateFile::_FileMapping *>>]";
            v26 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths. numEncodedPaths %llu > numPaths = %llu", __dst, a4);
          }
          else
          {
            sub_20C13A924(a1 + 12, a4);
            v13 = (int *)a1[12];
            v14 = a1[13];
            v22 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v22);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v22 + 1);
            if (v14 - (uint64_t)v13 >= 1)
            {
              v15 = ((unint64_t)(v14 - (_QWORD)v13) >> 3) + 1;
              do
              {
                sub_20C01A074(v13, &v22);
                sub_20C01A0C8(v13 + 1, (_DWORD *)&v22 + 1);
                --v15;
                v13 += 2;
              }
              while (v15 > 1);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
            sub_20BFD265C(&v22);
            sub_20BE81ACC((uint64_t)&v33, (unint64_t)__dst);
            if ((sub_20C2BBED0((uint64_t)v27, a2, (unint64_t)v33, __dst) & 1) != 0)
            {
              v16 = v33;
              if (v33 == v34)
              {
LABEL_26:
                sub_20BE81ACC((uint64_t)&v30, (unint64_t)__dst);
                if (sub_20C2BBED0((uint64_t)v27, a2, (unint64_t)v30, __dst))
                {
                  v21 = 0;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v21);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v21 + 1);
                  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl(a1, &v36, &v33, &v30, 0, (int *)&v21, (uint64_t)a3);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
                  sub_20BFD265C(&v21);
                  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(a3);
                }
              }
              else
              {
                v17 = (uint64_t)(a1[16] - a1[15]) >> 3;
                while (1)
                {
                  LODWORD(v18) = *v16;
                  v18 = (int)*v16 >= 0 ? v18 : -(int)v18;
                  if (v17 <= v18)
                    break;
                  if (++v16 == v34)
                    goto LABEL_26;
                }
                v22 = "usd/crateFile.cpp";
                v23 = "_ReadCompressedPaths";
                v24 = 4280;
                v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, Work"
                      "Dispatcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Rea"
                      "der<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__:"
                      ":Usd_CrateFile::CrateFile::_FileMapping *>>]";
                v26 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt path element token index in crate file (%d >= %zu)", v18, v17);
              }
            }
          }
        }
        else
        {
          v11 = 0;
          while (1)
          {
            v12 = *v10;
            if (v12 >= a4)
              break;
            if (v11 <= v12)
              v11 = *v10;
            if (++v10 == v37)
              goto LABEL_13;
          }
          v22 = "usd/crateFile.cpp";
          v23 = "_ReadCompressedPaths";
          v24 = 4243;
          v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDispat"
                "cher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInter"
                "nal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cr"
                "ateFile::_FileMapping *>>]";
          v26 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt path index in crate file (%u >= %zu)", v12, a4);
        }
      }
    }
    else
    {
      v22 = "usd/crateFile.cpp";
      v23 = "_ReadCompressedPaths";
      v24 = 4230;
      v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDispatcher"
            " &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
            "l__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>]";
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths of size %llu", __dst);
    }
    v19 = __p[0];
    __p[0] = 0;
    if (v19)
      operator delete[](v19);
    v20 = v27[0];
    v27[0] = 0;
    if (v20)
      operator delete[](v20);
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_20C2BB780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void *v25;
  void *v26;

  sub_20C2BAA20((uint64_t)&a17);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  v25 = *(void **)(v23 - 96);
  if (v25)
  {
    *(_QWORD *)(v23 - 88) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(v23 - 72);
  if (v26)
  {
    *(_QWORD *)(v23 - 64) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C2BB800(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_20BFD265C((_DWORD *)(a1 + 64));
  return a1;
}

unint64_t sub_20C2BB834(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD v10[2];

  v4 = *(_QWORD *)(a1 + 256);
  v10[0] = 0;
  v10[1] = v4;
  v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x58uLL);
  *(_BYTE *)(v5 - 11) = 1;
  *(_QWORD *)v5 = &unk_24C52F0D8;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 56) = v7;
  *(_OWORD *)(v5 + 40) = v6;
  *(_OWORD *)(v5 + 24) = v8;
  sub_20BFD38A4((_DWORD *)(v5 + 72), (_DWORD *)(a2 + 64));
  sub_20BFD38DC((_DWORD *)(v5 + 76), (_DWORD *)(a2 + 68));
  *(_QWORD *)(v5 + 80) = a1 + 264;
  return v5;
}

uint64_t sub_20C2BB8D0(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C52F0D8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 76));
  sub_20BFD265C((_DWORD *)(a1 + 72));
  return a1;
}

void sub_20C2BB910(_DWORD *a1)
{
  *(_QWORD *)a1 = &unk_24C52F0D8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 19);
  sub_20BFD265C(a1 + 18);
  operator delete(a1);
}

uint64_t sub_20C2BB950(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2BB9F0(a1 + 8);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 80));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2BB9DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2BB9F0(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t result;
  int v8;
  int v9;
  __int128 v10[2];
  uint64_t v11;
  uint64_t v12;
  int v13;

  v2 = *(char **)a1;
  sub_20C2BBAF8((uint64_t)&v12, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 24) + *(_QWORD *)(a1 + 48);
  v4 = *(_OWORD *)(a1 + 24);
  v11 = v3;
  v10[0] = *(_OWORD *)(a1 + 8);
  v10[1] = v4;
  v5 = *(_QWORD *)(a1 + 56);
  sub_20BFD6E54(&v8, (_DWORD *)(a1 + 64));
  sub_20BFD6EA4(&v9, (_DWORD *)(a1 + 68));
  sub_20C2BADE8(v2, v10, v5, &v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  for (result = (uint64_t)sub_20BFD265C(&v8); v13--; result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12))
    ;
  return result;
}

void sub_20C2BBAD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  sub_20BEB24F4(v2 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2BBAF8(uint64_t a1, char *a2, char *a3, char *a4, char *a5)
{
  unsigned __int8 v6;
  int v7;
  _QWORD *v11;

  v6 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v6 & 1) != 0)
  {
    v11 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, 0, a3);
    *(_QWORD *)a1 = v11;
    if (v11)
      v7 = sub_20C2BBB80((_DWORD **)a1, a3, a4, a5) + 1;
    else
      v7 = 0;
  }
  else
  {
    v7 = 0;
    *(_QWORD *)a1 = 0;
  }
  *(_DWORD *)(a1 + 8) = v7;
  return a1;
}

uint64_t sub_20C2BBB80(_DWORD **a1, char *a2, char *a3, char *a4)
{
  char *v7;
  char *v8;

  pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a2, *a1, a3);
  pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a3, *a1, v7);
  pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin(a4, *a1, v8);
  return 3;
}

uint64_t sub_20C2BBBD8(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_20BFD265C((_DWORD *)(a1 + 64));
  return a1;
}

unint64_t sub_20C2BBC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD v10[2];

  v4 = *(_QWORD *)(a1 + 256);
  v10[0] = 0;
  v10[1] = v4;
  v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x58uLL);
  *(_BYTE *)(v5 - 11) = 1;
  *(_QWORD *)v5 = &unk_24C52F120;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 56) = v7;
  *(_OWORD *)(v5 + 40) = v6;
  *(_OWORD *)(v5 + 24) = v8;
  sub_20BFD38A4((_DWORD *)(v5 + 72), (_DWORD *)(a2 + 64));
  sub_20BFD38DC((_DWORD *)(v5 + 76), (_DWORD *)(a2 + 68));
  *(_QWORD *)(v5 + 80) = a1 + 264;
  return v5;
}

uint64_t sub_20C2BBCA8(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C52F120;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 76));
  sub_20BFD265C((_DWORD *)(a1 + 72));
  return a1;
}

void sub_20C2BBCE8(_DWORD *a1)
{
  *(_QWORD *)a1 = &unk_24C52F120;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 19);
  sub_20BFD265C(a1 + 18);
  operator delete(a1);
}

uint64_t sub_20C2BBD28(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2BBDC8(a1 + 8);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 80));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2BBDB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2BBDC8(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t result;
  int v8;
  int v9;
  __int128 v10[2];
  uint64_t v11;
  uint64_t v12;
  int v13;

  v2 = *(char **)a1;
  sub_20C2BBAF8((uint64_t)&v12, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(**(_QWORD **)(a1 + 24) + 24) + *(_QWORD *)(a1 + 48);
  v4 = *(_OWORD *)(a1 + 24);
  v11 = v3;
  v10[0] = *(_OWORD *)(a1 + 8);
  v10[1] = v4;
  v5 = *(_QWORD *)(a1 + 56);
  sub_20BFD6E54(&v8, (_DWORD *)(a1 + 64));
  sub_20BFD6EA4(&v9, (_DWORD *)(a1 + 68));
  sub_20C2BB0B0(v2, v10, v5, &v8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  for (result = (uint64_t)sub_20BFD265C(&v8); v13--; result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v12))
    ;
  return result;
}

void sub_20C2BBEB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  sub_20BEB24F4(v2 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2BBED0(uint64_t a1, uint64_t a2, unint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;
  char *__dst;

  sub_20C2BAA60(a1, this);
  __dst = 0;
  result = sub_20C2B9BEC(a2 + 8, &__dst, 8uLL);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 32);
    v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = __dst;
    if (v11 < (unint64_t)__dst)
      v12 = *(char **)(a1 + 8);
    if (v9 - v10 >= (unint64_t)v12)
      v13 = v12;
    else
      v13 = (char *)(v9 - v10);
    __dst = v13;
    if (v11 && *(_QWORD *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        result = sub_20C2B9BEC(a2 + 8, *(void **)a1, (size_t)v13);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a1, __dst, a3, (int64_t)this, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2158;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, Int = int]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2153;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, Int = int]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

void sub_20C2BC024(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_20C2BC20C((char **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 12 * a2;
  }
}

uint64_t sub_20C2BC060(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *__p;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  unint64_t __dst;

  __dst = 0;
  v4 = a1 + 8;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __p = "usd/crateFile.cpp";
    v13 = "_Read";
    v14 = 1189;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Crat"
          "eFile::Spec_0_0_1]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_20C2BC194(&__p, __dst);
  v8 = sub_20C2B9BEC(v4, __p, 16 * __dst);
  v9 = v8;
  if (&__p == a2)
    v10 = 0;
  else
    v10 = v8;
  if ((v10 & 1) != 0)
    sub_20BEF5530((char *)a2, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 4);
  if (__p)
  {
    v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_20C2BC178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2BC194(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BE90F0C(a1, a2);
    v4 = a1[1];
    v5 = v4 + 16 * a2;
    v6 = 16 * a2;
    v7 = (_QWORD *)(v4 + 4);
    do
    {
      *v7 = -1;
      v7 += 2;
      v6 -= 16;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C2BC1F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_20C2BC20C(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int v23;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (char *)v7) >> 2) >= a2)
  {
    if (a2)
    {
      v13 = (_QWORD *)((char *)v7 + 12 * a2);
      v14 = 12 * a2;
      do
      {
        *v7 = -1;
        v7 = (_QWORD *)((char *)v7 + 12);
        v14 -= 12;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = (char *)v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - *a1) >> 2);
    v9 = v8 + a2;
    if (v8 + a2 > 0x1555555555555555)
      sub_20BDDF694();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v11 = 0x1555555555555555;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_20C152228(v4, v11);
    else
      v12 = 0;
    v15 = &v12[12 * v8];
    v16 = &v15[12 * a2];
    v17 = 12 * a2;
    v18 = v15;
    do
    {
      *v18 = -1;
      v18 = (_QWORD *)((char *)v18 + 12);
      v17 -= 12;
    }
    while (v17);
    v19 = &v12[12 * v11];
    v21 = *a1;
    v20 = a1[1];
    if (v20 != *a1)
    {
      do
      {
        v22 = *(_QWORD *)(v20 - 12);
        v20 -= 12;
        v23 = *((_DWORD *)v20 + 2);
        *(_QWORD *)(v15 - 12) = v22;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v23;
      }
      while (v20 != v21);
      v20 = *a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v19;
    if (v20)
      operator delete(v20);
  }
}

uint64_t sub_20C2BC360(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  void *__p;
  const char *v13;
  uint64_t v14;
  const char *v15;
  char v16;
  unint64_t __dst;

  __dst = 0;
  v4 = a1 + 8;
  if (!sub_20C2B9BEC(a1 + 8, &__dst, 8uLL))
    return 0;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + 16) + 32);
  v6 = *(_QWORD *)(a1 + 8) - *(_QWORD *)(**(_QWORD **)(a1 + 16) + 24);
  v7 = v5 - v6;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || __dst > v7)
  {
    __p = "usd/crateFile.cpp";
    v13 = "_Read";
    v14 = 1189;
    v15 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::_Read(ve"
          "ctor<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrRe"
          "served__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec]";
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", __dst, v7, v5);
    return 0;
  }
  sub_20C2BC4A4(&__p, __dst);
  v8 = sub_20C2B9BEC(v4, __p, 12 * __dst);
  v9 = v8;
  if (&__p == a2)
    v10 = 0;
  else
    v10 = v8;
  if ((v10 & 1) != 0)
    sub_20C2BC51C((char *)a2, (char *)__p, (uint64_t)v13, 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)__p) >> 2));
  if (__p)
  {
    v13 = (const char *)__p;
    operator delete(__p);
  }
  return v9;
}

void sub_20C2BC488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2BC4A4(_QWORD *a1, unint64_t a2)
{
  _QWORD *v4;
  char *v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C211DE0(a1, a2);
    v4 = (_QWORD *)a1[1];
    v5 = (char *)v4 + 12 * a2;
    v6 = 12 * a2;
    do
    {
      *v4 = -1;
      v4 = (_QWORD *)((char *)v4 + 12);
      v6 -= 12;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C2BC500(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20C2BC51C(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)result) >> 2) < a4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x1555555555555555)
      sub_20BDDF694();
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 2);
    v11 = 2 * v10;
    if (2 * v10 <= a4)
      v11 = a4;
    if (v10 >= 0xAAAAAAAAAAAAAAALL)
      v12 = 0x1555555555555555;
    else
      v12 = v11;
    result = sub_20C211DE0(v7, v12);
    v14 = (char *)v7[1];
    v13 = (void **)(v7 + 1);
    v9 = v14;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v13 = (void **)(result + 8);
  v15 = (_BYTE *)*((_QWORD *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 2) >= a4)
    goto LABEL_16;
  v16 = &__src[4 * ((v15 - v9) >> 2)];
  if (v15 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v15 - v9);
    v9 = (char *)*v13;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v13 = &v9[v17];
  return result;
}

uint64_t sub_20C2BC654(uint64_t a1, unint64_t a2, float a3, float a4)
{
  __int16 *v7;
  unint64_t v8;
  float v9;
  std::logic_error *exception;
  unint64_t v12;

  v12 = a2;
  sub_20BED1408((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0x1555555555555556)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  sub_20C2BC7E8((_QWORD *)(a1 + 8), v12);
  v7 = *(__int16 **)(a1 + 8);
  if (v7 == *(__int16 **)(a1 + 16))
    v7 = sub_20C2BC774();
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 10) = 1;
  v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_20C2BC760(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__int16 *sub_20C2BC774()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25473C980);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473C980))
  {
    word_25473C970 = -1;
    byte_25473C972 = 1;
    __cxa_atexit((void (*)(void *))sub_20C2BC910, &word_25473C970, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473C980);
  }
  return &word_25473C970;
}

_QWORD *sub_20C2BC7E8(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20C211DE0(a1, a2);
    v4 = a1[1];
    v5 = v4 + 12 * a2;
    do
    {
      *(_WORD *)v4 = -1;
      *(_BYTE *)(v4 + 2) = 0;
      v4 += 12;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C2BC858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C2BC86C(&a9);
  _Unwind_Resume(a1);
}

void sub_20C2BC86C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C2BC8AC((__int16 **)v2);
    operator delete(**a1);
  }
}

__int16 **sub_20C2BC8AC(__int16 **result)
{
  __int16 **v1;
  __int16 *v2;
  __int16 *v3;
  __int16 *v4;
  BOOL v5;

  v1 = result;
  v3 = *result;
  v2 = result[1];
  if (v2 != *result)
  {
    v4 = v2 - 6;
    do
    {
      if (*v4 != -1)
      {
        result = (__int16 **)sub_20C2BC94C((uint64_t)v4);
        *v4 = -1;
      }
      v5 = v4 == v3;
      v4 -= 6;
    }
    while (!v5);
  }
  v1[1] = v3;
  return result;
}

__int16 *sub_20C2BC910(__int16 *a1)
{
  if (*a1 != -1)
  {
    sub_20C2BC94C((uint64_t)a1);
    *a1 = -1;
  }
  return a1;
}

_DWORD *sub_20C2BC94C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 8));
  return sub_20BFD265C((_DWORD *)(a1 + 4));
}

__int16 *sub_20C2BC978(uint64_t *a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 *result;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v6 = *a1;
  v7 = a1[4];
  v8 = v5 & *a1;
  result = (__int16 *)(v7 + 12 * v8);
  if (*result < 0)
  {
    LOWORD(v10) = 0;
  }
  else
  {
    if (*(_QWORD *)(v7 + 12 * v8 + 4) == *(_QWORD *)a2)
      return result;
    LOWORD(v10) = 0;
    while (1)
    {
      v10 = (__int16)(v10 + 1);
      v8 = (v8 + 1) & v6;
      result = (__int16 *)(v7 + 12 * v8);
      if (v10 > *result)
        break;
      if (*(_QWORD *)(v7 + 12 * v8 + 4) == *(_QWORD *)a2)
        return result;
    }
  }
  v11 = sub_20C2BCB20((uint64_t)a1);
  v12 = a1[4];
  if ((v11 & 1) != 0)
  {
    v8 = v5 & *a1;
    if (*(__int16 *)(v12 + 12 * v8) < 0)
    {
      LOWORD(v10) = 0;
      v13 = *(unsigned __int16 *)(v12 + 12 * v8);
    }
    else
    {
      LOWORD(v10) = 0;
      do
      {
        v10 = (__int16)(v10 + 1);
        v8 = (v8 + 1) & *a1;
      }
      while (v10 <= *(__int16 *)(v12 + 12 * v8));
      v13 = *(unsigned __int16 *)(v12 + 12 * v8);
    }
  }
  else
  {
    v13 = *(unsigned __int16 *)(v12 + 12 * v8);
  }
  if (v13 == 0xFFFF)
  {
    v14 = v12 + 12 * v8;
    sub_20BFD6E54((_DWORD *)(v14 + 4), a3);
    sub_20BFD6EA4((_DWORD *)(v14 + 8), a3 + 1);
    *(_WORD *)v14 = v10;
  }
  else
  {
    sub_20C2BCBE4(a1, v8, v10, v5, a3);
  }
  ++a1[6];
  return (__int16 *)(a1[4] + 12 * v8);
}

uint64_t sub_20C2BCB20(uint64_t a1)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 48), v2 >= *(_QWORD *)(a1 + 56)))
  {
    v6 = sub_20BED1164((_QWORD *)a1);
    sub_20C2BCC88(a1, v6);
    *(_BYTE *)(a1 + 72) = 0;
    return 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    *(_BYTE *)(a1 + 73) = 0;
    v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        v8 = *(float *)(a1 + 68);
        v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        sub_20C2BCC88(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

_DWORD *sub_20C2BCBE4(uint64_t *a1, uint64_t a2, __int16 a3, uint64_t a4, _DWORD *a5)
{
  int v11;
  int v12;

  sub_20BFD6E54(&v11, a5);
  sub_20BFD6EA4(&v12, a5 + 1);
  sub_20C2BCE48(a1, a2, a3, a4, &v11);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v12);
  return sub_20BFD265C(&v11);
}

void sub_20C2BCC74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C2BCC88(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unsigned int *v4;
  int *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  _QWORD v9[9];
  void **v10;

  sub_20C2BC654((uint64_t)&v8, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(unsigned int **)(a1 + 16);
  if ((unsigned int *)v3 != v4)
  {
    v5 = (int *)(v3 + 4);
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        v6 = bswap64(0x9E3779B97F4A7C55* (v5[1]+ ((v5[1]+ (unint64_t)*v5+ (v5[1] + (unint64_t)*v5)* (v5[1] + (unint64_t)*v5)) >> 1)));
        sub_20C2BCD88(&v8, v6 & v8, 0, v6, v5);
      }
      v7 = (unsigned int *)(v5 + 2);
      v5 += 3;
    }
    while (v7 != v4);
  }
  v9[5] = *(_QWORD *)(a1 + 48);
  sub_20BED1250(&v8, (uint64_t *)a1);
  v10 = (void **)v9;
  sub_20C2BC86C(&v10);
}

void sub_20C2BCD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 56) = &a11;
  sub_20C2BC86C((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

_DWORD *sub_20C2BCD88(_QWORD *a1, uint64_t a2, __int16 a3, uint64_t a4, int *a5)
{
  int *v9;
  uint64_t v10;
  __int16 *v11;
  int v12;
  uint64_t v13;
  int *v14;
  __int16 v15;
  _DWORD *result;

  v9 = a5 + 1;
  while (1)
  {
    v10 = a1[4];
    v11 = (__int16 *)(v10 + 12 * a2);
    v12 = *v11;
    if (v12 >= a3)
      goto LABEL_5;
    v13 = v10 + 12 * a2;
    v14 = (int *)(v13 + 8);
    if (v12 == -1)
      break;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a5, (int *)(v13 + 4));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9, v14);
    v15 = *v11;
    *v11 = a3;
    a3 = v15;
LABEL_5:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  sub_20BFD38A4((_DWORD *)(v13 + 4), a5);
  result = sub_20BFD38DC(v14, v9);
  *v11 = a3;
  return result;
}

_DWORD *sub_20C2BCE48(uint64_t *a1, uint64_t a2, __int16 a3, uint64_t a4, int *a5)
{
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  unsigned __int16 *v15;
  int i;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  _DWORD *result;

  v9 = a1[4] + 12 * a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a5, (int *)(v9 + 4));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a5 + 1, (int *)(v9 + 8));
  v10 = *(_WORD *)v9;
  *(_WORD *)v9 = a3;
  v11 = *a1;
  v12 = *a1 & (a2 + 1);
  v13 = v10 + 1;
  v14 = a1[4];
  v15 = (unsigned __int16 *)(v14 + 12 * v12);
  for (i = *v15; i != 0xFFFF; i = *v15)
  {
    if (v13 > (__int16)i)
    {
      if (v13 >= 4096)
        *((_BYTE *)a1 + 72) = 1;
      v17 = v14 + 12 * v12;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a5, (int *)(v17 + 4));
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a5 + 1, (int *)(v17 + 8));
      v18 = *v15;
      *v15 = v13;
      v11 = *a1;
      v14 = a1[4];
      v13 = v18;
    }
    v12 = v11 & (v12 + 1);
    ++v13;
    v15 = (unsigned __int16 *)(v14 + 12 * v12);
  }
  v19 = v14 + 12 * v12;
  sub_20BFD38A4((_DWORD *)(v19 + 4), a5);
  result = sub_20BFD38DC((_DWORD *)(v19 + 8), a5 + 1);
  *v15 = v13;
  return result;
}

void sub_20C2BCF78(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  unint64_t v29;
  char v30;
  BOOL v31;
  char *v32;
  uint64_t v33;
  char *v34;
  int v35;
  char *v36;
  int v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  BOOL v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

void sub_20C2BD3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t i;
  uint64_t v18;
  void **v19;
  char *v20;
  char *v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  if (a1 == a2)
    return;
  v5 = (char *)(a1 + 24);
  if (a1 + 24 == a2)
    return;
  v7 = 0;
  v8 = a1;
  do
  {
    v9 = v8;
    v8 = (uint64_t)v5;
    if (*(char *)(v9 + 47) < 0)
      v5 = *(char **)(v9 + 24);
    v10 = *v5;
    if (*(char *)(v9 + 23) >= 0)
      v11 = (char *)v9;
    else
      v11 = *(char **)v9;
    if (v10 < 0
      || (v12 = *v11, v12 < 0)
      || ((v13 = v10,
           v14 = v12,
           v15 = (v12 ^ v13) & 0xFFFFFFDF,
           v13 >= 0x40)
        ? (v16 = v15 == 0)
        : (v16 = 1),
          v16 || v14 < 0x40))
    {
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v8, v9))
        goto LABEL_41;
    }
    else if ((((_BYTE)v13 + 5) & 0x1Fu) >= (((_BYTE)v14 + 5) & 0x1Fu))
    {
      goto LABEL_41;
    }
    v29 = *(_OWORD *)v8;
    v30 = *(_QWORD *)(v8 + 16);
    *(_QWORD *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = 0;
    *(_QWORD *)v8 = 0;
    for (i = v7; ; i -= 24)
    {
      v18 = a1 + i;
      v19 = (void **)(a1 + i + 24);
      if (*(char *)(a1 + i + 47) < 0)
        operator delete(*v19);
      *(_OWORD *)v19 = *(_OWORD *)v18;
      *(_QWORD *)(a1 + i + 40) = *(_QWORD *)(v18 + 16);
      *(_BYTE *)(v18 + 23) = 0;
      *(_BYTE *)v18 = 0;
      if (!i)
      {
        v28 = a1;
        goto LABEL_40;
      }
      v20 = *(char **)(a1 + i - 24);
      if (v30 >= 0)
        v21 = (char *)&v29;
      else
        v21 = (char *)v29;
      v22 = *v21;
      if (*(char *)(a1 + i - 1) >= 0)
        v20 = (char *)(a1 + i - 24);
      if (v22 < 0)
        break;
      v23 = *v20;
      if (v23 < 0)
        break;
      v24 = v22;
      v25 = v23;
      v26 = (v23 ^ v24) & 0xFFFFFFDF;
      v27 = v24 < 0x40 || v26 == 0;
      if (v27 || v25 < 0x40)
        break;
      if ((((_BYTE)v24 + 5) & 0x1Fu) >= (((_BYTE)v25 + 5) & 0x1Fu))
      {
        v28 = a1 + i;
        goto LABEL_40;
      }
LABEL_34:
      ;
    }
    if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v29, a1 + i - 24))
      goto LABEL_34;
    v28 = a1 + i;
    if (*(char *)(v28 + 23) < 0)
      operator delete(*(void **)v28);
LABEL_40:
    *(_OWORD *)v28 = v29;
    *(_QWORD *)(v28 + 16) = v30;
LABEL_41:
    v5 = (char *)(v8 + 24);
    v7 += 24;
  }
  while (v8 + 24 != a2);
}

void sub_20C2BD60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C2BD628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t i;
  void **v17;
  char *v18;
  int v19;
  char *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  __int128 v26;
  uint64_t v27;

  if (a1 == a2)
    return;
  v4 = a1;
  v5 = (char *)(a1 + 24);
  if (a1 + 24 == a2)
    return;
  v7 = a1 - 24;
  do
  {
    v8 = v4;
    v4 = (uint64_t)v5;
    if (*(char *)(v8 + 47) < 0)
      v5 = *(char **)(v8 + 24);
    v9 = *v5;
    if (*(char *)(v8 + 23) >= 0)
      v10 = (char *)v8;
    else
      v10 = *(char **)v8;
    if (v9 < 0
      || (v11 = *v10, v11 < 0)
      || ((v12 = v9,
           v13 = v11,
           v14 = (v11 ^ v12) & 0xFFFFFFDF,
           v12 >= 0x40)
        ? (v15 = v14 == 0)
        : (v15 = 1),
          v15 || v13 < 0x40))
    {
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v4, v8))
        goto LABEL_39;
    }
    else if ((((_BYTE)v12 + 5) & 0x1Fu) >= (((_BYTE)v13 + 5) & 0x1Fu))
    {
      goto LABEL_39;
    }
    v26 = *(_OWORD *)v4;
    v27 = *(_QWORD *)(v4 + 16);
    *(_QWORD *)(v4 + 8) = 0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)v4 = 0;
    for (i = v7; ; i -= 24)
    {
      v17 = (void **)(i + 48);
      if (*(char *)(i + 71) < 0)
        operator delete(*v17);
      *(_OWORD *)v17 = *(_OWORD *)(i + 24);
      *(_QWORD *)(i + 64) = *(_QWORD *)(i + 40);
      *(_BYTE *)(i + 47) = 0;
      *(_BYTE *)(i + 24) = 0;
      v18 = v27 >= 0 ? (char *)&v26 : (char *)v26;
      v19 = *v18;
      v20 = *(char *)(i + 23) >= 0 ? (char *)i : *(char **)i;
      if (v19 < 0)
        break;
      v21 = *v20;
      if (v21 < 0)
        break;
      v22 = v19;
      v23 = v21;
      v24 = (v21 ^ v22) & 0xFFFFFFDF;
      v25 = v22 < 0x40 || v24 == 0;
      if (v25 || v23 < 0x40)
        break;
      if ((((_BYTE)v22 + 5) & 0x1Fu) >= (((_BYTE)v23 + 5) & 0x1Fu))
        goto LABEL_38;
LABEL_34:
      ;
    }
    if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v26, i))
      goto LABEL_34;
    if (*(char *)(i + 47) < 0)
      operator delete(*(void **)(i + 24));
LABEL_38:
    *(_OWORD *)(i + 24) = v26;
    *(_QWORD *)(i + 40) = v27;
LABEL_39:
    v5 = (char *)(v4 + 24);
    v7 += 24;
  }
  while (v4 + 24 != a2);
}

void sub_20C2BD818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2BD834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  char *v9;
  char *v10;
  int v11;
  char *v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  char *v18;
  int v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  char *v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  BOOL v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char *v37;
  int v38;
  char *v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  int v49;
  char *v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;

  v8 = *(char *)(a2 + 23);
  v9 = *(char **)a2;
  if (v8 >= 0)
    v10 = (char *)a2;
  else
    v10 = *(char **)a2;
  v11 = *v10;
  if (*(char *)(a1 + 23) >= 0)
    v12 = (char *)a1;
  else
    v12 = *(char **)a1;
  if (v11 < 0
    || (v13 = *v12, v13 < 0)
    || ((v14 = v11,
         v15 = v13,
         v16 = (v13 ^ v14) & 0xFFFFFFDF,
         v14 >= 0x40)
      ? (v17 = v16 == 0)
      : (v17 = 1),
        v17 || v15 < 0x40))
  {
    v27 = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, a2, a1);
    LOBYTE(v8) = *(_BYTE *)(a2 + 23);
    v9 = *(char **)a2;
    if ((v27 & 1) != 0)
      goto LABEL_15;
  }
  else if ((((_BYTE)v14 + 5) & 0x1Fu) < (((_BYTE)v15 + 5) & 0x1Fu))
  {
LABEL_15:
    if (*(char *)(a3 + 23) >= 0)
      v18 = (char *)a3;
    else
      v18 = *(char **)a3;
    v19 = *v18;
    if ((v8 & 0x80u) == 0)
      v9 = (char *)a2;
    if (v19 < 0
      || (v20 = *v9, v20 < 0)
      || ((v21 = v19, v22 = (v20 ^ v19) & 0xFFFFFFDF, v21 >= 0x40)
        ? (v23 = v22 == 0)
        : (v23 = 1),
          v23 || v20 < 0x40u))
    {
      if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, a3, a2))
        goto LABEL_28;
    }
    else if ((((_BYTE)v21 + 5) & 0x1Fu) < (((_BYTE)v20 + 5) & 0x1Fu))
    {
LABEL_28:
      v24 = *(_QWORD *)(a1 + 16);
      v25 = *(_OWORD *)a1;
      v26 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a3;
      *(_QWORD *)(a1 + 16) = v26;
      *(_OWORD *)a3 = v25;
      *(_QWORD *)(a3 + 16) = v24;
      return 1;
    }
    v45 = *(_QWORD *)(a1 + 16);
    v46 = *(_OWORD *)a1;
    v47 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v47;
    *(_OWORD *)a2 = v46;
    *(_QWORD *)(a2 + 16) = v45;
    if (*(char *)(a3 + 23) >= 0)
      v48 = (char *)a3;
    else
      v48 = *(char **)a3;
    v49 = *v48;
    if (*(char *)(a2 + 23) >= 0)
      v50 = (char *)a2;
    else
      v50 = *(char **)a2;
    if (v49 < 0
      || (v51 = *v50, v51 < 0)
      || v49 < 0x40u
      || ((v51 ^ v49) & 0xFFFFFFDF) == 0
      || v51 < 0x40u)
    {
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, a3, a2))
        return 1;
    }
    else if ((((_BYTE)v49 + 5) & 0x1Fu) >= (((_BYTE)v51 + 5) & 0x1Fu))
    {
      return 1;
    }
    v52 = *(_QWORD *)(a2 + 16);
    v53 = *(_OWORD *)a2;
    v54 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = v54;
    *(_OWORD *)a3 = v53;
    *(_QWORD *)(a3 + 16) = v52;
    return 2;
  }
  if (*(char *)(a3 + 23) >= 0)
    v28 = (char *)a3;
  else
    v28 = *(char **)a3;
  v29 = *v28;
  if ((v8 & 0x80u) == 0)
    v9 = (char *)a2;
  if ((v29 & 0x80000000) == 0)
  {
    v30 = *v9;
    if ((v30 & 0x80000000) == 0)
    {
      v31 = v29;
      v32 = (v30 ^ v29) & 0xFFFFFFDF;
      v33 = v31 < 0x40 || v32 == 0;
      if (!v33 && v30 >= 0x40u)
      {
        if ((((_BYTE)v31 + 5) & 0x1Fu) >= (((_BYTE)v30 + 5) & 0x1Fu))
          return 0;
        goto LABEL_43;
      }
    }
  }
  result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, a3, a2);
  if ((_DWORD)result)
  {
LABEL_43:
    v34 = *(_QWORD *)(a2 + 16);
    v35 = *(_OWORD *)a2;
    v36 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = v36;
    *(_OWORD *)a3 = v35;
    *(_QWORD *)(a3 + 16) = v34;
    if (*(char *)(a2 + 23) >= 0)
      v37 = (char *)a2;
    else
      v37 = *(char **)a2;
    v38 = *v37;
    if (*(char *)(a1 + 23) >= 0)
      v39 = (char *)a1;
    else
      v39 = *(char **)a1;
    if (v38 < 0
      || (v40 = *v39, v40 < 0)
      || v38 < 0x40u
      || ((v40 ^ v38) & 0xFFFFFFDF) == 0
      || v40 < 0x40u)
    {
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, a2, a1))
        return 1;
    }
    else if ((((_BYTE)v38 + 5) & 0x1Fu) >= (((_BYTE)v40 + 5) & 0x1Fu))
    {
      return 1;
    }
    v41 = *(_QWORD *)(a1 + 16);
    v42 = *(_OWORD *)a1;
    v43 = *(_QWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = v43;
    *(_OWORD *)a2 = v42;
    *(_QWORD *)(a2 + 16) = v41;
    return 2;
  }
  return result;
}

unint64_t sub_20C2BDBB0(__int128 *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4;
  char *v6;
  char *v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  unint64_t v14;
  unint64_t i;
  char *v16;
  int v17;
  char *v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;
  char *v24;
  int v25;
  char *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  unint64_t v32;
  char *v33;
  int v34;
  char *v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  unint64_t v44;
  char *v45;
  int v46;
  char *v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  BOOL v52;
  unint64_t v53;
  char *v54;
  int v55;
  char *v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  BOOL v61;
  void **v62;
  __int128 v63;
  __int128 v64;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;

  v4 = a2;
  v67 = *((_QWORD *)a1 + 2);
  v66 = *a1;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  v6 = *(char **)(a2 - 24);
  v7 = (char *)&v66;
  if (v67 < 0)
    v7 = (char *)v66;
  v8 = *v7;
  if (*(char *)(a2 - 1) >= 0)
    v6 = (char *)(a2 - 24);
  if (v8 < 0
    || (v9 = *v6, v9 < 0)
    || ((v10 = v8,
         v11 = v9,
         v12 = (v9 ^ v10) & 0xFFFFFFDF,
         v10 >= 0x40)
      ? (v13 = v12 == 0)
      : (v13 = 1),
        v13 || v11 < 0x40))
  {
    if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v66, a2 - 24))
    {
LABEL_13:
      v14 = (unint64_t)a1 + 24;
      do
      {
        while (1)
        {
          i = v14;
          v16 = v67 >= 0 ? (char *)&v66 : (char *)v66;
          v17 = *v16;
          v18 = *(char *)(v14 + 23) >= 0 ? (char *)v14 : *(char **)v14;
          v14 += 24;
          if (v17 < 0)
            break;
          v19 = *v18;
          if (v19 < 0)
            break;
          v20 = v17;
          v21 = v19;
          v22 = (v19 ^ v20) & 0xFFFFFFDF;
          v23 = v20 < 0x40 || v22 == 0;
          if (v23 || v21 < 0x40)
            break;
          if ((((_BYTE)v20 + 5) & 0x1Fu) < (((_BYTE)v21 + 5) & 0x1Fu))
            goto LABEL_50;
        }
      }
      while ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v66, i) & 1) == 0);
      goto LABEL_50;
    }
  }
  else if ((((_BYTE)v10 + 5) & 0x1Fu) < (((_BYTE)v11 + 5) & 0x1Fu))
  {
    goto LABEL_13;
  }
  for (i = (unint64_t)a1 + 24; i < v4; i += 24)
  {
    if (v67 >= 0)
      v24 = (char *)&v66;
    else
      v24 = (char *)v66;
    v25 = *v24;
    if (*(char *)(i + 23) >= 0)
      v26 = (char *)i;
    else
      v26 = *(char **)i;
    if (v25 < 0
      || (v27 = *v26, v27 < 0)
      || ((v28 = v25,
           v29 = v27,
           v30 = (v27 ^ v28) & 0xFFFFFFDF,
           v28 >= 0x40)
        ? (v31 = v30 == 0)
        : (v31 = 1),
          v31 || v29 < 0x40))
    {
      if ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v66, i) & 1) != 0)
        break;
    }
    else if ((((_BYTE)v28 + 5) & 0x1Fu) < (((_BYTE)v29 + 5) & 0x1Fu))
    {
      break;
    }
  }
LABEL_50:
  if (i < v4)
  {
    v32 = v4 - 24;
    do
    {
      while (1)
      {
        v4 = v32;
        v33 = v67 >= 0 ? (char *)&v66 : (char *)v66;
        v34 = *v33;
        v35 = *(char *)(v32 + 23) >= 0 ? (char *)v32 : *(char **)v32;
        v32 -= 24;
        if (v34 < 0)
          break;
        v36 = *v35;
        if (v36 < 0)
          break;
        v37 = v34;
        v38 = v36;
        v39 = (v36 ^ v37) & 0xFFFFFFDF;
        v40 = v37 < 0x40 || v39 == 0;
        if (v40 || v38 < 0x40)
          break;
        if ((((_BYTE)v37 + 5) & 0x1Fu) >= (((_BYTE)v38 + 5) & 0x1Fu))
          goto LABEL_68;
      }
    }
    while ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v66, v4) & 1) != 0);
  }
LABEL_68:
  while (i < v4)
  {
    v41 = *(_OWORD *)i;
    v69 = *(_QWORD *)(i + 16);
    v68 = v41;
    v42 = *(_OWORD *)v4;
    *(_QWORD *)(i + 16) = *(_QWORD *)(v4 + 16);
    *(_OWORD *)i = v42;
    v43 = v68;
    *(_QWORD *)(v4 + 16) = v69;
    *(_OWORD *)v4 = v43;
    v44 = i + 24;
    do
    {
      while (1)
      {
        i = v44;
        v45 = v67 >= 0 ? (char *)&v66 : (char *)v66;
        v46 = *v45;
        v47 = *(char *)(v44 + 23) >= 0 ? (char *)v44 : *(char **)v44;
        v44 += 24;
        if (v46 < 0)
          break;
        v48 = *v47;
        if (v48 < 0)
          break;
        v49 = v46;
        v50 = v48;
        v51 = (v48 ^ v49) & 0xFFFFFFDF;
        v52 = v49 < 0x40 || v51 == 0;
        if (v52 || v50 < 0x40)
          break;
        if ((((_BYTE)v49 + 5) & 0x1Fu) < (((_BYTE)v50 + 5) & 0x1Fu))
          goto LABEL_86;
      }
    }
    while (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v66, i));
LABEL_86:
    v53 = v4 - 24;
    do
    {
      while (1)
      {
        v4 = v53;
        v54 = v67 >= 0 ? (char *)&v66 : (char *)v66;
        v55 = *v54;
        v56 = *(char *)(v53 + 23) >= 0 ? (char *)v53 : *(char **)v53;
        v53 -= 24;
        if (v55 < 0)
          break;
        v57 = *v56;
        if (v57 < 0)
          break;
        v58 = v55;
        v59 = v57;
        v60 = (v57 ^ v58) & 0xFFFFFFDF;
        v61 = v58 < 0x40 || v60 == 0;
        if (v61 || v59 < 0x40)
          break;
        if ((((_BYTE)v58 + 5) & 0x1Fu) >= (((_BYTE)v59 + 5) & 0x1Fu))
          goto LABEL_103;
      }
    }
    while ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v66, v4) & 1) != 0);
LABEL_103:
    ;
  }
  v62 = (void **)(i - 24);
  if ((__int128 *)(i - 24) == a1)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*v62);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v63 = *(_OWORD *)v62;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(i - 8);
    *a1 = v63;
    *(_BYTE *)(i - 1) = 0;
    *(_BYTE *)(i - 24) = 0;
  }
  v64 = v66;
  *(_QWORD *)(i - 8) = v67;
  *(_OWORD *)v62 = v64;
  return i;
}

void sub_20C2BE01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_20C2BE04C(__int128 *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  int v8;
  char *v9;
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  int v18;
  char *v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  BOOL v24;
  char *v25;
  int v26;
  char *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  BOOL v32;
  char v34;
  char v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  char *v42;
  int v43;
  char *v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;
  BOOL v49;
  unint64_t v50;
  char *v51;
  int v52;
  char *v53;
  int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  void **v59;
  __int128 v60;
  __int128 v61;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;

  v6 = 0;
  v63 = *a1;
  v64 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  while (1)
  {
    v7 = *(char **)((char *)a1 + v6 + 24);
    if (*((char *)a1 + v6 + 47) >= 0)
      v7 = (char *)a1 + v6 + 24;
    v8 = *v7;
    v9 = v64 >= 0 ? (char *)&v63 : (char *)v63;
    if (v8 < 0)
      break;
    v10 = *v9;
    if (v10 < 0)
      break;
    v11 = v8;
    v12 = v10;
    v13 = (v10 ^ v11) & 0xFFFFFFDF;
    v14 = v11 < 0x40 || v13 == 0;
    if (v14 || v12 < 0x40)
      break;
    if ((((_BYTE)v11 + 5) & 0x1Fu) >= (((_BYTE)v12 + 5) & 0x1Fu))
      goto LABEL_17;
LABEL_15:
    v6 += 24;
  }
  if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)a1 + v6 + 24, (uint64_t)&v63))goto LABEL_15;
LABEL_17:
  v15 = (unint64_t)a1 + v6 + 24;
  if (v6)
  {
    v16 = a2 - 24;
    do
    {
      while (1)
      {
        a2 = v16;
        v17 = *(char *)(v16 + 23) >= 0 ? (char *)v16 : *(char **)v16;
        v18 = *v17;
        v19 = v64 >= 0 ? (char *)&v63 : (char *)v63;
        v16 -= 24;
        if (v18 < 0)
          break;
        v20 = *v19;
        if (v20 < 0)
          break;
        v21 = v18;
        v22 = v20;
        v23 = (v20 ^ v21) & 0xFFFFFFDF;
        v24 = v21 < 0x40 || v23 == 0;
        if (v24 || v22 < 0x40)
          break;
        if ((((_BYTE)v21 + 5) & 0x1Fu) < (((_BYTE)v22 + 5) & 0x1Fu))
          goto LABEL_60;
      }
    }
    while (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, a2, (uint64_t)&v63));
  }
  else if (v15 < a2)
  {
    for (a2 -= 24; ; a2 -= 24)
    {
      if (*(char *)(a2 + 23) >= 0)
        v25 = (char *)a2;
      else
        v25 = *(char **)a2;
      v26 = *v25;
      if (v64 >= 0)
        v27 = (char *)&v63;
      else
        v27 = (char *)v63;
      if (v26 < 0
        || (v28 = *v27, v28 < 0)
        || ((v29 = v26,
             v30 = v28,
             v31 = (v28 ^ v29) & 0xFFFFFFDF,
             v29 >= 0x40)
          ? (v32 = v31 == 0)
          : (v32 = 1),
            v32 || v30 < 0x40))
      {
        v34 = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, a2, (uint64_t)&v63);
        if (v15 >= a2)
          v35 = 1;
        else
          v35 = v34;
        if ((v35 & 1) != 0)
          break;
      }
      else if ((((_BYTE)v29 + 5) & 0x1Fu) < (((_BYTE)v30 + 5) & 0x1Fu) || v15 >= a2)
      {
        break;
      }
    }
  }
LABEL_60:
  if (v15 >= a2)
  {
    v36 = (unint64_t)a1 + v6 + 24;
  }
  else
  {
    v36 = (unint64_t)a1 + v6 + 24;
    v37 = a2;
    do
    {
      v38 = *(_OWORD *)v36;
      v66 = *(_QWORD *)(v36 + 16);
      v65 = v38;
      v39 = *(_OWORD *)v37;
      *(_QWORD *)(v36 + 16) = *(_QWORD *)(v37 + 16);
      *(_OWORD *)v36 = v39;
      v40 = v65;
      *(_QWORD *)(v37 + 16) = v66;
      *(_OWORD *)v37 = v40;
      v41 = v36 + 24;
      do
      {
        while (1)
        {
          v36 = v41;
          v42 = *(char *)(v41 + 23) >= 0 ? (char *)v41 : *(char **)v41;
          v43 = *v42;
          v44 = v64 >= 0 ? (char *)&v63 : (char *)v63;
          v41 += 24;
          if (v43 < 0)
            break;
          v45 = *v44;
          if (v45 < 0)
            break;
          v46 = v43;
          v47 = v45;
          v48 = (v45 ^ v46) & 0xFFFFFFDF;
          v49 = v46 < 0x40 || v48 == 0;
          if (v49 || v47 < 0x40)
            break;
          if ((((_BYTE)v46 + 5) & 0x1Fu) >= (((_BYTE)v47 + 5) & 0x1Fu))
            goto LABEL_79;
        }
      }
      while ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v36, (uint64_t)&v63) & 1) != 0);
LABEL_79:
      v50 = v37 - 24;
      do
      {
        while (1)
        {
          v37 = v50;
          v51 = *(char *)(v50 + 23) >= 0 ? (char *)v50 : *(char **)v50;
          v52 = *v51;
          v53 = v64 >= 0 ? (char *)&v63 : (char *)v63;
          v50 -= 24;
          if (v52 < 0)
            break;
          v54 = *v53;
          if (v54 < 0)
            break;
          v55 = v52;
          v56 = v54;
          v57 = (v54 ^ v55) & 0xFFFFFFDF;
          v58 = v55 < 0x40 || v57 == 0;
          if (v58 || v56 < 0x40)
            break;
          if ((((_BYTE)v55 + 5) & 0x1Fu) < (((_BYTE)v56 + 5) & 0x1Fu))
            goto LABEL_96;
        }
      }
      while (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v37, (uint64_t)&v63));
LABEL_96:
      ;
    }
    while (v36 < v37);
  }
  v59 = (void **)(v36 - 24);
  if ((__int128 *)(v36 - 24) == a1)
  {
    if (*(char *)(v36 - 1) < 0)
      operator delete(*v59);
  }
  else
  {
    if (*((char *)a1 + 23) < 0)
      operator delete(*(void **)a1);
    v60 = *(_OWORD *)v59;
    *((_QWORD *)a1 + 2) = *(_QWORD *)(v36 - 8);
    *a1 = v60;
    *(_BYTE *)(v36 - 1) = 0;
    *(_BYTE *)(v36 - 24) = 0;
  }
  v61 = v63;
  *(_QWORD *)(v36 - 8) = v64;
  *(_OWORD *)v59 = v61;
  return v36 - 24;
}

void sub_20C2BE458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C2BE484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL8 result;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char *v24;
  int v25;
  char *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  BOOL v43;
  int v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v9 = a2 - 24;
      v8 = *(char **)(a2 - 24);
      if (*(char *)(a2 - 1) >= 0)
        v8 = (char *)(a2 - 24);
      v10 = *v8;
      if (*(char *)(a1 + 23) >= 0)
        v11 = (char *)a1;
      else
        v11 = *(char **)a1;
      if (v10 < 0
        || (v12 = *v11, v12 < 0)
        || ((v13 = v10,
             v14 = v12,
             v15 = (v12 ^ v13) & 0xFFFFFFDF,
             v13 >= 0x40)
          ? (v16 = v15 == 0)
          : (v16 = 1),
            v16 || v14 < 0x40))
      {
        if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, a2 - 24, a1))
          goto LABEL_15;
        return 1;
      }
      else if ((((_BYTE)v13 + 5) & 0x1Fu) < (((_BYTE)v14 + 5) & 0x1Fu))
      {
LABEL_15:
        v17 = *(_QWORD *)(a1 + 16);
        v18 = *(_OWORD *)a1;
        v19 = *(_QWORD *)(v9 + 16);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_QWORD *)(a1 + 16) = v19;
        *(_OWORD *)v9 = v18;
        *(_QWORD *)(v9 + 16) = v17;
        return 1;
      }
      return result;
    case 3uLL:
      sub_20C2BD834(a1, a1 + 24, a2 - 24, a3);
      return 1;
    case 4uLL:
      sub_20C2BE82C(a1, a1 + 24, a1 + 48, a2 - 24, a3);
      return 1;
    case 5uLL:
      sub_20C2BEA60(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24, a3);
      return 1;
    default:
      v20 = a1 + 48;
      sub_20C2BD834(a1, a1 + 24, a1 + 48, a3);
      v21 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v22 = 0;
      v23 = 0;
      while (2)
      {
        if (*(char *)(v21 + 23) >= 0)
          v24 = (char *)v21;
        else
          v24 = *(char **)v21;
        v25 = *v24;
        if (*(char *)(v20 + 23) >= 0)
          v26 = (char *)v20;
        else
          v26 = *(char **)v20;
        if (v25 < 0
          || (v27 = *v26, v27 < 0)
          || ((v28 = v25,
               v29 = v27,
               v30 = (v27 ^ v28) & 0xFFFFFFDF,
               v28 >= 0x40)
            ? (v31 = v30 == 0)
            : (v31 = 1),
              v31 || v29 < 0x40))
        {
          if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v21, v20))
            goto LABEL_57;
        }
        else if ((((_BYTE)v28 + 5) & 0x1Fu) >= (((_BYTE)v29 + 5) & 0x1Fu))
        {
          goto LABEL_57;
        }
        LOBYTE(v32) = 0;
        v46 = *(_OWORD *)v21;
        v47 = *(_QWORD *)(v21 + 16);
        *(_QWORD *)(v21 + 8) = 0;
        *(_QWORD *)(v21 + 16) = 0;
        *(_QWORD *)v21 = 0;
        v33 = v22;
        while (2)
        {
          v34 = a1 + v33;
          v35 = (void **)(a1 + v33 + 72);
          if ((v32 & 0x80) != 0)
            operator delete(*v35);
          *(_OWORD *)v35 = *(_OWORD *)(v34 + 48);
          *(_QWORD *)(a1 + v33 + 88) = *(_QWORD *)(v34 + 64);
          *(_BYTE *)(v34 + 71) = 0;
          *(_BYTE *)(v34 + 48) = 0;
          if (v33 == -48)
          {
            v45 = a1;
            goto LABEL_56;
          }
          v36 = *(char **)(a1 + v33 + 24);
          if (v47 >= 0)
            v37 = (char *)&v46;
          else
            v37 = (char *)v46;
          v38 = *v37;
          if (*(char *)(a1 + v33 + 47) >= 0)
            v36 = (char *)(a1 + v33 + 24);
          if ((v38 & 0x80000000) == 0)
          {
            v39 = *v36;
            if ((v39 & 0x80000000) == 0)
            {
              v40 = v38;
              v41 = v39;
              v42 = (v39 ^ v40) & 0xFFFFFFDF;
              v43 = v40 < 0x40 || v42 == 0;
              if (!v43 && v41 >= 0x40)
              {
                if ((((_BYTE)v40 + 5) & 0x1Fu) >= (((_BYTE)v41 + 5) & 0x1Fu))
                {
                  v45 = a1 + v33 + 48;
                  goto LABEL_56;
                }
                LOBYTE(v32) = 0;
                goto LABEL_50;
              }
            }
          }
          v44 = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, (uint64_t)&v46, a1 + v33 + 24);
          v32 = *(char *)(v34 + 71);
          if (v44)
          {
LABEL_50:
            v33 -= 24;
            continue;
          }
          break;
        }
        v45 = a1 + v33 + 48;
        if (v32 < 0)
          operator delete(*(void **)v45);
LABEL_56:
        *(_OWORD *)v45 = v46;
        *(_QWORD *)(v45 + 16) = v47;
        if (++v23 != 8)
        {
LABEL_57:
          v20 = v21;
          v22 += 24;
          v21 += 24;
          if (v21 == a2)
            return 1;
          continue;
        }
        return v21 + 24 == a2;
      }
  }
}

void sub_20C2BE810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2BE82C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  unsigned __int8 *v11;
  unsigned int v12;
  char *v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char *v19;
  int v20;
  char *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  int v31;
  char *v32;
  int v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  result = sub_20C2BD834(a1, a2, a3, a5);
  if (*(char *)(a4 + 23) >= 0)
    v11 = (unsigned __int8 *)a4;
  else
    v11 = *(unsigned __int8 **)a4;
  v12 = *v11;
  if (*(char *)(a3 + 23) >= 0)
    v13 = (char *)a3;
  else
    v13 = *(char **)a3;
  if ((v12 & 0x80) != 0
    || (v14 = *v13, v14 < 0)
    || (v12 >= 0x40 ? (v15 = ((v14 ^ v12) & 0xFFFFFFDF) == 0) : (v15 = 1),
        v15 || v14 < 0x40u))
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a5, a4, a3);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v12 + 5) & 0x1Fu) >= (((_BYTE)v14 + 5) & 0x1Fu))
  {
    return result;
  }
  v16 = *(_QWORD *)(a3 + 16);
  v17 = *(_OWORD *)a3;
  v18 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v18;
  *(_OWORD *)a4 = v17;
  *(_QWORD *)(a4 + 16) = v16;
  if (*(char *)(a3 + 23) >= 0)
    v19 = (char *)a3;
  else
    v19 = *(char **)a3;
  v20 = *v19;
  if (*(char *)(a2 + 23) >= 0)
    v21 = (char *)a2;
  else
    v21 = *(char **)a2;
  if (v20 < 0
    || (v22 = *v21, v22 < 0)
    || ((v23 = v20,
         v24 = v22,
         v25 = (v22 ^ v23) & 0xFFFFFFDF,
         v23 >= 0x40)
      ? (v26 = v25 == 0)
      : (v26 = 1),
        v26 || v24 < 0x40))
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a5, a3, a2);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v23 + 5) & 0x1Fu) >= (((_BYTE)v24 + 5) & 0x1Fu))
  {
    return result;
  }
  v27 = *(_QWORD *)(a2 + 16);
  v28 = *(_OWORD *)a2;
  v29 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v29;
  *(_OWORD *)a3 = v28;
  *(_QWORD *)(a3 + 16) = v27;
  if (*(char *)(a2 + 23) >= 0)
    v30 = (char *)a2;
  else
    v30 = *(char **)a2;
  v31 = *v30;
  if (*(char *)(a1 + 23) >= 0)
    v32 = (char *)a1;
  else
    v32 = *(char **)a1;
  if (v31 < 0
    || (v33 = *v32, v33 < 0)
    || v31 < 0x40u
    || ((v33 ^ v31) & 0xFFFFFFDF) == 0
    || v33 < 0x40u)
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a5, a2, a1);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v31 + 5) & 0x1Fu) >= (((_BYTE)v33 + 5) & 0x1Fu))
  {
    return result;
  }
  v34 = *(_QWORD *)(a1 + 16);
  v35 = *(_OWORD *)a1;
  v36 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v36;
  *(_OWORD *)a2 = v35;
  *(_QWORD *)(a2 + 16) = v34;
  return result;
}

uint64_t sub_20C2BEA60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char *v13;
  int v14;
  char *v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char *v24;
  int v25;
  char *v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  BOOL v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  int v36;
  char *v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  char *v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;

  result = sub_20C2BE82C(a1, a2, a3, a4, a6);
  if (*(char *)(a5 + 23) >= 0)
    v13 = (char *)a5;
  else
    v13 = *(char **)a5;
  v14 = *v13;
  if (*(char *)(a4 + 23) >= 0)
    v15 = (char *)a4;
  else
    v15 = *(char **)a4;
  if (v14 < 0
    || (v16 = *v15, v16 < 0)
    || ((v17 = v14,
         v18 = v16,
         v19 = (v16 ^ v17) & 0xFFFFFFDF,
         v17 >= 0x40)
      ? (v20 = v19 == 0)
      : (v20 = 1),
        v20 || v18 < 0x40))
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, a5, a4);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v17 + 5) & 0x1Fu) >= (((_BYTE)v18 + 5) & 0x1Fu))
  {
    return result;
  }
  v21 = *(_QWORD *)(a4 + 16);
  v22 = *(_OWORD *)a4;
  v23 = *(_QWORD *)(a5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)a5;
  *(_QWORD *)(a4 + 16) = v23;
  *(_OWORD *)a5 = v22;
  *(_QWORD *)(a5 + 16) = v21;
  if (*(char *)(a4 + 23) >= 0)
    v24 = (char *)a4;
  else
    v24 = *(char **)a4;
  v25 = *v24;
  if (*(char *)(a3 + 23) >= 0)
    v26 = (char *)a3;
  else
    v26 = *(char **)a3;
  if (v25 < 0
    || (v27 = *v26, v27 < 0)
    || ((v28 = v25,
         v29 = v27,
         v30 = (v27 ^ v28) & 0xFFFFFFDF,
         v28 >= 0x40)
      ? (v31 = v30 == 0)
      : (v31 = 1),
        v31 || v29 < 0x40))
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, a4, a3);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v28 + 5) & 0x1Fu) >= (((_BYTE)v29 + 5) & 0x1Fu))
  {
    return result;
  }
  v32 = *(_QWORD *)(a3 + 16);
  v33 = *(_OWORD *)a3;
  v34 = *(_QWORD *)(a4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a4;
  *(_QWORD *)(a3 + 16) = v34;
  *(_OWORD *)a4 = v33;
  *(_QWORD *)(a4 + 16) = v32;
  if (*(char *)(a3 + 23) >= 0)
    v35 = (char *)a3;
  else
    v35 = *(char **)a3;
  v36 = *v35;
  if (*(char *)(a2 + 23) >= 0)
    v37 = (char *)a2;
  else
    v37 = *(char **)a2;
  if (v36 < 0
    || (v38 = *v37, v38 < 0)
    || v36 < 0x40u
    || ((v38 ^ v36) & 0xFFFFFFDF) == 0
    || v38 < 0x40u)
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, a3, a2);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v36 + 5) & 0x1Fu) >= (((_BYTE)v38 + 5) & 0x1Fu))
  {
    return result;
  }
  v39 = *(_QWORD *)(a2 + 16);
  v40 = *(_OWORD *)a2;
  v41 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v41;
  *(_OWORD *)a3 = v40;
  *(_QWORD *)(a3 + 16) = v39;
  if (*(char *)(a2 + 23) >= 0)
    v42 = (char *)a2;
  else
    v42 = *(char **)a2;
  v43 = *v42;
  if (*(char *)(a1 + 23) >= 0)
    v44 = (char *)a1;
  else
    v44 = *(char **)a1;
  if (v43 < 0
    || (v45 = *v44, v45 < 0)
    || v43 < 0x40u
    || ((v45 ^ v43) & 0xFFFFFFDF) == 0
    || v45 < 0x40u)
  {
    result = pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a6, a2, a1);
    if (!(_DWORD)result)
      return result;
  }
  else if ((((_BYTE)v43 + 5) & 0x1Fu) >= (((_BYTE)v45 + 5) & 0x1Fu))
  {
    return result;
  }
  v46 = *(_QWORD *)(a1 + 16);
  v47 = *(_OWORD *)a1;
  v48 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v48;
  *(_OWORD *)a2 = v47;
  *(_QWORD *)(a2 + 16) = v46;
  return result;
}

uint64_t sub_20C2BED40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  _BYTE v36[15];

  if (a1 != a2)
  {
    v8 = a2 - a1;
    v9 = (a2 - a1) / 24;
    if (a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 24 * v10;
      do
      {
        sub_20C2BEFFC(a1, a4, v9, v12);
        v12 -= 24;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      while (1)
      {
        v15 = *(char *)(v14 + 23) >= 0 ? (char *)v14 : *(char **)v14;
        v16 = *v15;
        v17 = *(char *)(a1 + 23) >= 0 ? (char *)a1 : *(char **)a1;
        if (v16 < 0)
          break;
        v18 = *v17;
        if (v18 < 0)
          break;
        v19 = v16;
        v20 = v18;
        v21 = (v18 ^ v19) & 0xFFFFFFDF;
        v22 = v19 < 0x40 || v21 == 0;
        if (v22 || v20 < 0x40)
          break;
        if ((((_BYTE)v19 + 5) & 0x1Fu) < (((_BYTE)v20 + 5) & 0x1Fu))
          goto LABEL_21;
LABEL_22:
        v14 += 24;
        if (v14 == a3)
        {
          v13 = a3;
          goto LABEL_26;
        }
      }
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a4, v14, a1))
        goto LABEL_22;
LABEL_21:
      v23 = *(_QWORD *)(v14 + 16);
      v24 = *(_OWORD *)v14;
      v25 = *(_QWORD *)(a1 + 16);
      *(_OWORD *)v14 = *(_OWORD *)a1;
      *(_QWORD *)(v14 + 16) = v25;
      *(_OWORD *)a1 = v24;
      *(_QWORD *)(a1 + 16) = v23;
      sub_20C2BEFFC(a1, a4, v9, a1);
      goto LABEL_22;
    }
LABEL_26:
    if (v8 >= 25)
    {
      v26 = v8 / 0x18uLL;
      v27 = a2 - 24;
      do
      {
        v28 = *(_QWORD *)a1;
        *(_QWORD *)v36 = *(_QWORD *)(a1 + 8);
        *(_QWORD *)&v36[7] = *(_QWORD *)(a1 + 15);
        v29 = *(_BYTE *)(a1 + 23);
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        v30 = sub_20C2BF380(a1, a4, v26);
        v31 = v30;
        v32 = *(char *)(v30 + 23);
        if (v27 == v30)
        {
          if (v32 < 0)
            operator delete(*(void **)v30);
          *(_QWORD *)v31 = v28;
          *(_QWORD *)(v31 + 8) = *(_QWORD *)v36;
          *(_QWORD *)(v31 + 15) = *(_QWORD *)&v36[7];
          *(_BYTE *)(v31 + 23) = v29;
        }
        else
        {
          if (v32 < 0)
            operator delete(*(void **)v30);
          v33 = *(_OWORD *)v27;
          *(_QWORD *)(v31 + 16) = *(_QWORD *)(v27 + 16);
          *(_OWORD *)v31 = v33;
          *(_QWORD *)v27 = v28;
          *(_QWORD *)(v27 + 8) = *(_QWORD *)v36;
          *(_QWORD *)(v27 + 15) = *(_QWORD *)&v36[7];
          *(_BYTE *)(v27 + 23) = v29;
          sub_20C2BF4CC(a1, v31 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v31 + 24 - a1) >> 3));
        }
        v27 -= 24;
      }
      while (v26-- > 2);
    }
    return v13;
  }
  return a3;
}

void sub_20C2BEFE4(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20C2BEFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  char *v21;
  int v22;
  char *v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  BOOL v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  int v35;
  int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  char *v41;
  int v42;
  char *v43;
  int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  BOOL v48;
  char v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v4 = a3 - 2;
  if (a3 < 2)
    return;
  v5 = a4;
  v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 3)))
    return;
  v10 = (0x5555555555555556 * ((a4 - a1) >> 3)) | 1;
  v11 = a1 + 24 * v10;
  v12 = 0x5555555555555556 * ((a4 - a1) >> 3) + 2;
  if (v12 < a3)
  {
    v13 = *(char **)(v11 + 24);
    if (*(char *)(v11 + 23) >= 0)
      v14 = (char *)(a1 + 24 * v10);
    else
      v14 = *(char **)v11;
    v15 = *v14;
    if (*(char *)(v11 + 47) >= 0)
      v13 = (char *)(v11 + 24);
    if (v15 < 0
      || (v16 = *v13, v16 < 0)
      || ((v17 = v15,
           v18 = v16,
           v19 = (v16 ^ v17) & 0xFFFFFFDF,
           v17 >= 0x40)
        ? (v20 = v19 == 0)
        : (v20 = 1),
          v20 || v18 < 0x40))
    {
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, a1 + 24 * v10, v11 + 24))
        goto LABEL_18;
      goto LABEL_17;
    }
    if ((((_BYTE)v17 + 5) & 0x1Fu) < (((_BYTE)v18 + 5) & 0x1Fu))
    {
LABEL_17:
      v11 += 24;
      v10 = v12;
    }
  }
LABEL_18:
  if (*(char *)(v11 + 23) >= 0)
    v21 = (char *)v11;
  else
    v21 = *(char **)v11;
  v22 = *v21;
  if (*(char *)(v5 + 23) >= 0)
    v23 = (char *)v5;
  else
    v23 = *(char **)v5;
  if ((v22 & 0x80000000) == 0)
  {
    v24 = *v23;
    if ((v24 & 0x80000000) == 0)
    {
      v25 = v22;
      v26 = v24;
      v27 = (v24 ^ v25) & 0xFFFFFFDF;
      v28 = v25 < 0x40 || v27 == 0;
      if (!v28 && v26 >= 0x40)
      {
        if ((((_BYTE)v25 + 5) & 0x1Fu) < (((_BYTE)v26 + 5) & 0x1Fu))
          return;
        goto LABEL_32;
      }
    }
  }
  if ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, v11, v5) & 1) == 0)
  {
LABEL_32:
    v51 = *(_OWORD *)v5;
    v52 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)v5 = 0;
    while (1)
    {
      v29 = *(_OWORD *)v11;
      *(_QWORD *)(v5 + 16) = *(_QWORD *)(v11 + 16);
      *(_OWORD *)v5 = v29;
      *(_BYTE *)(v11 + 23) = 0;
      *(_BYTE *)v11 = 0;
      if (v7 < v10)
      {
LABEL_71:
        v50 = v51;
        *(_QWORD *)(v11 + 16) = v52;
        *(_OWORD *)v11 = v50;
        return;
      }
      v30 = 2 * v10;
      v10 = (2 * v10) | 1;
      v31 = a1 + 24 * v10;
      v32 = v30 + 2;
      if (v30 + 2 < a3)
      {
        v33 = *(char **)(v31 + 24);
        if (*(char *)(v31 + 23) >= 0)
          v34 = (char *)(a1 + 24 * v10);
        else
          v34 = *(char **)v31;
        v35 = *v34;
        if (*(char *)(v31 + 47) >= 0)
          v33 = (char *)(v31 + 24);
        if ((v35 & 0x80000000) == 0)
        {
          v36 = *v33;
          if ((v36 & 0x80000000) == 0)
          {
            v37 = v35;
            v38 = v36;
            v39 = (v36 ^ v37) & 0xFFFFFFDF;
            v40 = v37 < 0x40 || v39 == 0;
            if (!v40 && v38 >= 0x40)
            {
              if ((((_BYTE)v37 + 5) & 0x1Fu) >= (((_BYTE)v38 + 5) & 0x1Fu))
                goto LABEL_49;
LABEL_48:
              v31 += 24;
              v10 = v32;
              goto LABEL_49;
            }
          }
        }
        if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, a1 + 24 * v10, v31 + 24))goto LABEL_48;
      }
LABEL_49:
      if (*(char *)(v31 + 23) >= 0)
        v41 = (char *)v31;
      else
        v41 = *(char **)v31;
      v42 = *v41;
      if (v52 >= 0)
        v43 = (char *)&v51;
      else
        v43 = (char *)v51;
      if (v42 < 0
        || (v44 = *v43, v44 < 0)
        || ((v45 = v42,
             v46 = v44,
             v47 = (v44 ^ v45) & 0xFFFFFFDF,
             v45 >= 0x40)
          ? (v48 = v47 == 0)
          : (v48 = 1),
            v48 || v46 < 0x40))
      {
        if ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, v31, (uint64_t)&v51) & 1) != 0)
        {
LABEL_69:
          if (*(char *)(v11 + 23) < 0)
            operator delete(*(void **)v11);
          goto LABEL_71;
        }
      }
      else if ((((_BYTE)v45 + 5) & 0x1Fu) < (((_BYTE)v46 + 5) & 0x1Fu))
      {
        goto LABEL_69;
      }
      v49 = *(_BYTE *)(v11 + 23);
      v5 = v11;
      v11 = v31;
      if (v49 < 0)
        operator delete(*(void **)v5);
    }
  }
}

void sub_20C2BF364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2BF380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  __int128 v20;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = a1 + 24 * v6 + 24;
    v10 = 2 * v6;
    v6 = (2 * v6) | 1;
    v11 = v10 + 2;
    if (v10 + 2 >= a3)
      goto LABEL_19;
    v12 = *(char **)(v9 + 24);
    if (*(char *)(v9 + 23) >= 0)
      v13 = (char *)v9;
    else
      v13 = *(char **)v9;
    v14 = *v13;
    if (*(char *)(v9 + 47) >= 0)
      v12 = (char *)(v9 + 24);
    if ((v14 & 0x80000000) == 0)
    {
      v15 = *v12;
      if ((v15 & 0x80000000) == 0)
      {
        v16 = v14;
        v17 = v15;
        v18 = (v15 ^ v16) & 0xFFFFFFDF;
        v19 = v16 < 0x40 || v18 == 0;
        if (!v19 && v17 >= 0x40)
        {
          if ((((_BYTE)v16 + 5) & 0x1Fu) >= (((_BYTE)v17 + 5) & 0x1Fu))
            goto LABEL_19;
LABEL_18:
          v9 += 24;
          v6 = v11;
          goto LABEL_19;
        }
      }
    }
    if (pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a2, v9, v9 + 24))
      goto LABEL_18;
LABEL_19:
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    v20 = *(_OWORD *)v9;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
    *(_OWORD *)a1 = v20;
    *(_BYTE *)(v9 + 23) = 0;
    *(_BYTE *)v9 = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

void sub_20C2BF4CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  int v21;
  char *v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  BOOL v27;
  __int128 v28;
  uint64_t v29;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v7 = v4 >> 1;
    v8 = a1 + 24 * (v4 >> 1);
    v10 = a2 - 24;
    v9 = *(char **)(a2 - 24);
    if (*(char *)(v8 + 23) >= 0)
      v11 = (char *)(a1 + 24 * (v4 >> 1));
    else
      v11 = *(char **)v8;
    v12 = *v11;
    if (*(char *)(a2 - 1) >= 0)
      v9 = (char *)(a2 - 24);
    if (v12 < 0
      || (v13 = *v9, v13 < 0)
      || ((v14 = v12,
           v15 = v13,
           v16 = (v13 ^ v14) & 0xFFFFFFDF,
           v14 >= 0x40)
        ? (v17 = v16 == 0)
        : (v17 = 1),
          v17 || v15 < 0x40))
    {
      if (!pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, v8, v10))
        return;
    }
    else if ((((_BYTE)v14 + 5) & 0x1Fu) >= (((_BYTE)v15 + 5) & 0x1Fu))
    {
      return;
    }
    v28 = *(_OWORD *)v10;
    v29 = *(_QWORD *)(v10 + 16);
    *(_QWORD *)(v10 + 8) = 0;
    *(_QWORD *)(v10 + 16) = 0;
    *(_QWORD *)v10 = 0;
    while (1)
    {
      v18 = v8;
      if (*(char *)(v10 + 23) < 0)
        operator delete(*(void **)v10);
      v19 = *(_OWORD *)v8;
      *(_QWORD *)(v10 + 16) = *(_QWORD *)(v8 + 16);
      *(_OWORD *)v10 = v19;
      *(_BYTE *)(v8 + 23) = 0;
      *(_BYTE *)v8 = 0;
      if (!v7)
        break;
      v7 = (v7 - 1) >> 1;
      v8 = a1 + 24 * v7;
      if (*(char *)(v8 + 23) >= 0)
        v20 = (char *)(a1 + 24 * v7);
      else
        v20 = *(char **)v8;
      v21 = *v20;
      if (v29 >= 0)
        v22 = (char *)&v28;
      else
        v22 = (char *)v28;
      if (v21 < 0
        || (v23 = *v22, v23 < 0)
        || ((v24 = v21,
             v25 = v23,
             v26 = (v23 ^ v24) & 0xFFFFFFDF,
             v24 >= 0x40)
          ? (v27 = v26 == 0)
          : (v27 = 1),
            v27 || v25 < 0x40))
      {
        v10 = v18;
        if ((pxrInternal__aapl__pxrReserved__::TfDictionaryLessThan::_LessImpl(a3, a1 + 24 * v7, (uint64_t)&v28) & 1) == 0)
        {
          if (*(char *)(v18 + 23) < 0)
            operator delete(*(void **)v18);
          break;
        }
      }
      else
      {
        v10 = v18;
        if ((((_BYTE)v24 + 5) & 0x1Fu) >= (((_BYTE)v25 + 5) & 0x1Fu))
          break;
      }
    }
    *(_OWORD *)v18 = v28;
    *(_QWORD *)(v18 + 16) = v29;
  }
}

void sub_20C2BF6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C2BF6CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  ssize_t v6;
  const char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  const char *v13;
  const char *p_p;
  void *__p;
  char v16;
  void *v17;
  char v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  char v23;

  *(_OWORD *)(a3 + 8) = 0u;
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_QWORD *)a3 = 0x434453552D525850;
  *(_BYTE *)(a3 + 9) = 10;
  if (a2 > 87)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v6 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 24), (__sFILE *)a3, (char *)0x58, *(_QWORD *)a1);
    if (v6 != -1)
      *(_QWORD *)(a1 + 8) += v6;
    if (*(_QWORD *)a3 == 0x434453552D525850)
    {
      v9 = *(unsigned __int8 *)(a3 + 8);
      v10 = *(unsigned __int8 *)(a3 + 9);
      if (*(_BYTE *)(a3 + 8) || v10 >= 0xB)
      {
        v19 = "usd/crateFile.cpp";
        v20 = "_ReadBootStrap";
        v21 = 3617;
        v22 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(By"
              "teStream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream]";
        v23 = 0;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v7, v8, v9, v10, *(unsigned __int8 *)(a3 + 10));
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%hhd.%hhd.%hhd", v11, v12, 0, 10, 0);
        if (v18 >= 0)
          v13 = (const char *)&v17;
        else
          v13 = (const char *)v17;
        if (v16 >= 0)
          p_p = (const char *)&__p;
        else
          p_p = (const char *)__p;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file version mismatch -- file is %s, software supports %s", v13, p_p);
        if (v16 < 0)
          operator delete(__p);
        if (v18 < 0)
          operator delete(v17);
      }
      else if (*(_QWORD *)(a3 + 16) >= a2)
      {
        v19 = "usd/crateFile.cpp";
        v20 = "_ReadBootStrap";
        v21 = 3625;
        v22 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(By"
              "teStream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream]";
        v23 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, possibly truncated: table of contents at offset %lld but file size is %lld");
      }
    }
    else
    {
      v19 = "usd/crateFile.cpp";
      v20 = "_ReadBootStrap";
      v21 = 3610;
      v22 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(Byte"
            "Stream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream]";
      v23 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate bootstrap section corrupt");
    }
  }
  else
  {
    v19 = "usd/crateFile.cpp";
    v20 = "_ReadBootStrap";
    v21 = 3603;
    v22 = "static CrateFile::_BootStrap pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadBootStrap(ByteSt"
          "ream, int64_t) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream]";
    v23 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"File too small to contain bootstrap structure");
  }
}

void sub_20C2BF908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void sub_20C2BF93C(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;

  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  if (sub_20C2C1A6C(a1, __p))
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_20C2BF9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2BF9C8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v2 = *(_QWORD *)(result + 6336);
  v3 = *(_QWORD *)(result + 6344);
  if (v2 != v3)
  {
    v4 = -1;
    v5 = -1;
    do
    {
      v6 = *(_QWORD *)(v2 + 16);
      if (v6 < v4 || v4 == -1)
        v4 = *(_QWORD *)(v2 + 16);
      v8 = *(_QWORD *)(v2 + 24) + v6;
      if (v8 > v5 || v5 == -1)
        v5 = v8;
      v2 += 32;
    }
    while (v2 != v3);
    if (v4 != -1 && v5 != -1)
      return pxrInternal__aapl__pxrReserved__::ArchFileAdvise(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 8) + v4, v5 - v4, 1);
  }
  return result;
}

void sub_20C2BFA38(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  unsigned __int8 *v6;
  int size;
  const char *Section;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *CompressedBufferSize;
  unsigned __int8 *p;
  size_t v34;
  __sFILE *v35;
  unsigned __int8 *base;
  int v37;
  size_t __sz;
  const char *v39;
  uint64_t v40;
  const char *v41;
  char v42;
  __sFILE v43;
  const char *v44;
  _QWORD v45[10];

  v45[9] = *MEMORY[0x24BDAC8D0];
  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadTokens", 0, a3);
    size = v6 != 0;
  }
  else
  {
    v6 = 0;
    size = 0;
  }
  v43._bf._base = v6;
  v43._bf._size = size;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "TOKENS");
  if (Section)
  {
    v9 = *(_QWORD *)(a2 + 24);
    v10 = *((_QWORD *)Section + 2);
    if (v9 > v10 && (v10 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)(a2 + 16) = v10;
      *(_QWORD *)&v43._flags = 0;
      if (!sub_20C2C1BD8(a2 + 8, 0, (__sFILE *)&v43._flags))
        goto LABEL_48;
      *(_QWORD *)&v43._r = 0;
      if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x3FFu)
      {
        __sz = 0;
        if (!sub_20C2C1BD8(a2 + 8, 0, (__sFILE *)&__sz))
          goto LABEL_47;
        v43._p = 0;
        if (!sub_20C2C1BD8(a2 + 8, 0, &v43))
          goto LABEL_47;
        if (!__sz || !v43._p)
        {
          *(_QWORD *)&v43._lbfsize = "usd/crateFile.cpp";
          v43._cookie = "_ReadTokens";
          v43._close = (int (__cdecl *)(void *))4008;
          v43._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateF"
                                                            "ile::_ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrRes"
                                                            "erved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl"
                                                            "__pxrReserved__::Usd_CrateFile::_PreadStream>]";
          LOBYTE(v43._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, tokens section is empty");
          goto LABEL_47;
        }
        v30 = *(_QWORD *)(a2 + 16);
        v29 = *(_QWORD *)(a2 + 24);
        v31 = (unsigned __int8 *)(v29 - v30);
        if (v30 < 0 || ((unint64_t)v31 & 0x8000000000000000) != 0 || v43._p > v31)
        {
          *(_QWORD *)&v43._lbfsize = "usd/crateFile.cpp";
          v43._cookie = "_ReadTokens";
          v43._close = (int (__cdecl *)(void *))4014;
          v43._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateF"
                                                            "ile::_ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrRes"
                                                            "erved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl"
                                                            "__pxrReserved__::Usd_CrateFile::_PreadStream>]";
          LOBYTE(v43._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens size %llu with remaining file size is %lld of %lld", v43._p, v31, v29);
          goto LABEL_47;
        }
        CompressedBufferSize = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)__sz);
        p = v43._p;
        if (!CompressedBufferSize || CompressedBufferSize < v43._p)
        {
          *(_QWORD *)&v43._lbfsize = "usd/crateFile.cpp";
          v43._cookie = "_ReadTokens";
          v43._close = (int (__cdecl *)(void *))4021;
          v43._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateF"
                                                            "ile::_ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrRes"
                                                            "erved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl"
                                                            "__pxrReserved__::Usd_CrateFile::_PreadStream>]";
          LOBYTE(v43._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens. Corrupt compression data. Compressed size %llu, uncompressed size %llu", v43._p, __sz);
          goto LABEL_47;
        }
        v34 = __sz;
        v15 = (char *)operator new[](__sz);
        *(_QWORD *)&v43._r = v15;
        v35 = (__sFILE *)operator new[]((size_t)p);
        sub_20C2AA6E4(a2, v35, (char *)p);
        pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::TfFastCompression *)v35, v15, (char *)v43._p, __sz);
        v16 = &v15[v34];
        v17 = __sz;
        operator delete[](v35);
      }
      else
      {
        __sz = 0;
        if (!sub_20C2C1BD8(a2 + 8, 0, (__sFILE *)&__sz))
          goto LABEL_47;
        v12 = *(_QWORD *)(a2 + 16);
        v11 = *(_QWORD *)(a2 + 24);
        v13 = v11 - v12;
        v14 = (char *)__sz;
        if (v12 < 0 || (v13 & 0x8000000000000000) != 0 || __sz > v13)
        {
          *(_QWORD *)&v43._lbfsize = "usd/crateFile.cpp";
          v43._cookie = "_ReadTokens";
          v43._close = (int (__cdecl *)(void *))3992;
          v43._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateF"
                                                            "ile::_ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrRes"
                                                            "erved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl"
                                                            "__pxrReserved__::Usd_CrateFile::_PreadStream>]";
          LOBYTE(v43._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens size %llu with remaining file size being %lld of %lld", __sz, v13, v11);
          goto LABEL_47;
        }
        v15 = (char *)operator new[](__sz);
        *(_QWORD *)&v43._r = v15;
        sub_20C2AA6E4(a2, (__sFILE *)v15, v14);
        v16 = &v14[(_QWORD)v15];
        v17 = __sz;
      }
      if (v15 != v16 && *(v16 - 1))
      {
        *(_QWORD *)&v43._lbfsize = "usd/crateFile.cpp";
        v43._cookie = "_ReadTokens";
        v43._close = (int (__cdecl *)(void *))4036;
        v43._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                                                          "e::_ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrReserve"
                                                          "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                                                          "eserved__::Usd_CrateFile::_PreadStream>]";
        LOBYTE(v43._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Tokens section not null-terminated in crate file");
        *(v16 - 1) = 0;
      }
      v18 = *(_QWORD *)&v43._flags;
      if (*(_QWORD *)&v43._flags - 1 >= v17)
      {
        *(_QWORD *)&v43._lbfsize = "usd/crateFile.cpp";
        v43._cookie = "_ReadTokens";
        v43._close = (int (__cdecl *)(void *))4046;
        v43._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                                                          "e::_ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrReserve"
                                                          "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrR"
                                                          "eserved__::Usd_CrateFile::_PreadStream>]";
        LOBYTE(v43._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens. Corrupt data. Data size %llu, num tokens %llu", v17, *(_QWORD *)&v43._flags);
        *(_QWORD *)&v43._r = 0;
      }
      else
      {
        v19 = *(_QWORD *)(a1 + 120);
        v20 = *(_QWORD *)(a1 + 128);
        v21 = a1 + 120;
        if (v20 != v19)
        {
          do
          {
            v23 = *(_QWORD *)(v20 - 8);
            v20 -= 8;
            v22 = v23;
            if ((v23 & 7) != 0)
            {
              v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
              do
                v25 = __ldxr(v24);
              while (__stlxr(v25 - 2, v24));
            }
          }
          while (v20 != v19);
          v18 = *(_QWORD *)&v43._flags;
        }
        *(_QWORD *)(a1 + 128) = v19;
        sub_20C0E5D00(a1 + 120, v18);
        v15[v17 - 1] = 0;
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v43._lbfsize);
        v26 = 0;
        if (v15 < v16 && *(_QWORD *)&v43._flags)
        {
          v26 = 0;
          v27 = *(_QWORD *)&v43._r;
          while ((unint64_t)&v15[-v27] < v17)
          {
            __sz = 0;
            v39 = v44;
            v28 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&__sz, 0x28uLL);
            *((_BYTE *)v28 - 11) = 1;
            *v28 = &unk_24C52F168;
            v28[1] = v21;
            v28[2] = v26;
            v28[3] = v15;
            v28[4] = v45;
            (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v28 - 5))(*(v28 - 5), v28, (uint64_t)(v28 - 1));
            v15 += strlen(v15) + 1;
            ++v26;
            if (v15 >= v16 || v26 == *(_QWORD *)&v43._flags)
              goto LABEL_30;
          }
          __sz = (size_t)"usd/crateFile.cpp";
          v39 = "_ReadTokens";
          v40 = 4079;
          v41 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_PreadStream>]";
          v42 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed read tokens, buffer overflow.");
        }
        else
        {
LABEL_30:
          pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v43._lbfsize);
          if (v26 != *(_QWORD *)&v43._flags)
          {
            __sz = (size_t)"usd/crateFile.cpp";
            v39 = "_ReadTokens";
            v40 = 4089;
            v41 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInte"
                  "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Cra"
                  "teFile::_PreadStream>]";
            v42 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz, 3, (pxrInternal__aapl__pxrReserved__ *)"Crate file claims %zu tokens, found %zu", *(size_t *)&v43._flags, v26);
          }
          sub_20C2B9F90((pxrInternal__aapl__pxrReserved__ *)&v43._r);
        }
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v43._lbfsize);
        v15 = *(char **)&v43._r;
        *(_QWORD *)&v43._r = 0;
        if (!v15)
          goto LABEL_47;
      }
      operator delete[](v15);
LABEL_47:
      size = v43._bf._size;
      goto LABEL_48;
    }
    *(_QWORD *)&v43._lbfsize = "usd/crateFile.cpp";
    v43._cookie = "_ReadTokens";
    v43._close = (int (__cdecl *)(void *))3966;
    v43._read = (int (__cdecl *)(void *, char *, int))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_"
                                                      "ReadTokens(Reader) [Reader = pxrInternal__aapl__pxrReserved__::Usd"
                                                      "_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::U"
                                                      "sd_CrateFile::_PreadStream>]";
    LOBYTE(v43._seek) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v43._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, tokens section is possibly truncatedat offset %lld but file size is %lld", v10, v9);
  }
LABEL_48:
  v43._bf._size = size - 1;
  if (size)
  {
    base = v43._bf._base;
    v37 = size - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)base);
      v43._bf._size = v37--;
    }
    while (v37 != -2);
  }
}

void sub_20C2C0064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (__p)
    operator delete[](__p);
  sub_20BEB24F4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

const char *sub_20C2C010C(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  _QWORD *v6;
  _BOOL4 v7;
  const char *result;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadStrings", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  result = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "STRINGS");
  if (result)
  {
    *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 2);
    result = (const char *)sub_20C2C1CD0(a2, (void **)(a1 + 144));
  }
  if (v7)
    return (const char *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
  return result;
}

void sub_20C2C01BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C2C01D0(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  int (__cdecl *v6)(void *, const char *, int);
  _BOOL4 v7;
  const char *Section;
  uint64_t CompressedBufferSize;
  unint64_t DecompressionWorkingSpaceSize;
  _QWORD *v11;
  _BOOL4 v12;
  void *cookie;
  void *v14;
  fpos_t (__cdecl *seek)(void *, fpos_t, int);
  int *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unsigned __int8 *p;
  pxrInternal__aapl__pxrReserved__::TfFastCompression *v23;
  _QWORD *v24;
  fpos_t (__cdecl *v25)(void *, fpos_t, int);
  _QWORD *v26;
  __sFILE __sz;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = (int (__cdecl *)(void *, const char *, int))pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadFields", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  __sz._write = v6;
  LODWORD(__sz._ub._base) = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "FIELDS");
  if (!Section)
    goto LABEL_32;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)Section + 2);
  if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) <= 0x3FFu)
  {
    sub_20C2C1EAC(a2, (void **)(a1 + 48));
    goto LABEL_32;
  }
  __sz._seek = 0;
  if (sub_20C2C1BD8(a2 + 8, 0, (__sFILE *)&__sz._seek))
  {
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__sz._seek);
    DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__sz._seek);
    if (CompressedBufferSize && DecompressionWorkingSpaceSize)
    {
      v11 = (_QWORD *)(a1 + 48);
      sub_20C2BA560((uint64_t)v11, (unint64_t)__sz._seek);
      sub_20BDE36C4(&__sz._r, (unint64_t)__sz._seek);
      memset(&__sz._bf._size, 0, 32);
      v12 = sub_20C2C2018((uint64_t)&__sz._bf._size, a2, *(unint64_t *)&__sz._r, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*(_QWORD *)&__sz._flags- *(_QWORD *)&__sz._r) >> 2));
      cookie = __sz._cookie;
      __sz._cookie = 0;
      if (cookie)
        operator delete[](cookie);
      v14 = *(void **)&__sz._bf._size;
      *(_QWORD *)&__sz._bf._size = 0;
      if (v14)
        operator delete[](v14);
      if (!v12)
        goto LABEL_30;
      seek = __sz._seek;
      if (__sz._seek)
      {
        v16 = *(int **)&__sz._r;
        v17 = (_DWORD *)(*v11 + 4);
        do
        {
          v18 = *v16++;
          *v17 = v18;
          v17 += 4;
          seek = (fpos_t (__cdecl *)(void *, fpos_t, int))((char *)seek - 1);
        }
        while (seek);
      }
      __sz._p = 0;
      if (!sub_20C2C1BD8(a2 + 8, 0, &__sz))
        goto LABEL_30;
      v20 = *(_QWORD *)(a2 + 16);
      v19 = *(_QWORD *)(a2 + 24);
      v21 = (unsigned __int8 *)(v19 - v20);
      p = __sz._p;
      if (v20 < 0 || ((unint64_t)v21 & 0x8000000000000000) != 0 || __sz._p > v21)
      {
        *(_QWORD *)&__sz._bf._size = "usd/crateFile.cpp";
        *(_QWORD *)&__sz._lbfsize = "_ReadFields";
        __sz._cookie = (void *)3739;
        __sz._close = (int (__cdecl *)(void *))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFie"
                                               "lds(Reader) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cr"
                                               "ateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
        LOBYTE(__sz._read) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz._bf._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", __sz._p, v21, v19);
LABEL_30:
        if (*(_QWORD *)&__sz._r)
        {
          *(_QWORD *)&__sz._flags = *(_QWORD *)&__sz._r;
          operator delete(*(void **)&__sz._r);
        }
        goto LABEL_32;
      }
      v23 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[]((size_t)__sz._p);
      if (sub_20C2AA6E4(a2, (__sFILE *)v23, (char *)p))
      {
        memset(&__sz._bf._size, 0, 24);
        sub_20BDFC880((uint64_t)&__sz._bf._size, (unint64_t)__sz._seek);
        pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(v23, *(char **)&__sz._bf._size, (char *)__sz._p, *(_QWORD *)&__sz._lbfsize - *(_QWORD *)&__sz._bf._size);
        v24 = *(_QWORD **)&__sz._bf._size;
        if (__sz._seek)
        {
          v25 = 0;
          v26 = (_QWORD *)(*v11 + 8);
          do
          {
            *v26 = v24[(_QWORD)v25];
            v26 += 2;
            v25 = (fpos_t (__cdecl *)(void *, fpos_t, int))((char *)v25 + 1);
          }
          while (v25 != __sz._seek);
          goto LABEL_28;
        }
        if (*(_QWORD *)&__sz._bf._size)
        {
LABEL_28:
          *(_QWORD *)&__sz._lbfsize = v24;
          operator delete(v24);
        }
      }
      operator delete[](v23);
      goto LABEL_30;
    }
    if (__sz._seek)
    {
      *(_QWORD *)&__sz._bf._size = "usd/crateFile.cpp";
      *(_QWORD *)&__sz._lbfsize = "_ReadFields";
      __sz._cookie = (void *)3720;
      __sz._close = (int (__cdecl *)(void *))"void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadField"
                                             "s(Reader) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateF"
                                             "ile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
      LOBYTE(__sz._read) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz._bf._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed read compressed fields of size %llu.", __sz._seek);
    }
  }
LABEL_32:
  LODWORD(__sz._ub._base) = v7 - 1;
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
    LODWORD(__sz._ub._base) = v7 | 0xFFFFFFFE;
  }
}

void sub_20C2C04E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  uint64_t v18;

  sub_20BEB24F4(v18 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2C0564(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v6;
  _BOOL4 v7;
  const char *Section;
  uint64_t v9;
  uint64_t CompressedBufferSize;
  unint64_t DecompressionWorkingSpaceSize;
  BOOL v12;
  void *v13;
  void *v14;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v15;
  _DWORD *v16;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v17;
  uint64_t v18;
  void *v19[3];
  void *v20[2];
  void *__p[2];
  char v22;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v23[2];
  int v24;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadFieldSets", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v23[1] = v6;
  v24 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "FIELDSETS");
  if (!Section)
    goto LABEL_27;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)Section + 2);
  if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x3FFu)
  {
    v23[0] = 0;
    if (!sub_20C2C1BD8(a2 + 8, 0, (__sFILE *)v23))
      goto LABEL_27;
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v23[0]);
    DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(v23[0]);
    if (!CompressedBufferSize || !DecompressionWorkingSpaceSize)
    {
      v20[0] = "usd/crateFile.cpp";
      v20[1] = "_ReadFieldSets";
      __p[0] = (void *)3679;
      __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFieldSets(Reader) [Reader = pxrInte"
               "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
               "ile::_PreadStream>]";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed fieldSets of size %llu", v23[0]);
      goto LABEL_27;
    }
    sub_20C2BAAF8(a1 + 72, (unint64_t)v23[0]);
    sub_20BDE36C4(v19, (unint64_t)v23[0]);
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)__p = 0u;
    v12 = sub_20C2C2018((uint64_t)v20, a2, (unint64_t)v19[0], v23[0]);
    v13 = __p[0];
    __p[0] = 0;
    if (v13)
      operator delete[](v13);
    v14 = v20[0];
    v20[0] = 0;
    if (v14)
      operator delete[](v14);
    if (v12)
    {
      v15 = v23[0];
      v16 = v19[0];
      if (v23[0])
      {
        v17 = 0;
        v18 = *(_QWORD *)(a1 + 72);
        do
        {
          *(_DWORD *)(v18 + 4 * (_QWORD)v17) = v16[(_QWORD)v17];
          v17 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v17 + 1);
        }
        while (v15 != v17);
LABEL_25:
        v19[1] = v16;
        operator delete(v16);
LABEL_26:
        if (!v12)
          goto LABEL_27;
        goto LABEL_7;
      }
    }
    else
    {
      v16 = v19[0];
    }
    if (!v16)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (!sub_20C2C2154(a2, (void **)(a1 + 72)))
    goto LABEL_27;
LABEL_7:
  v9 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 72) != v9 && *(_DWORD *)(v9 - 4) != -1)
  {
    v20[0] = "usd/crateFile.cpp";
    v20[1] = "_ReadFieldSets";
    __p[0] = (void *)3693;
    __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFieldSets(Reader) [Reader = pxrIntern"
             "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt field sets in crate file");
    *(_DWORD *)(*(_QWORD *)(a1 + 80) - 4) = -1;
  }
LABEL_27:
  v24 = v7 - 1;
  if (v7)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
}

void sub_20C2C07CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_20C2BAA20((uint64_t)&a13);
  if (__p)
    operator delete(__p);
  sub_20BEB24F4(v13 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2C081C(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  _QWORD *v6;
  int v7;
  const char *Section;
  unsigned int v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t *v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  __int128 v25[2];
  uint64_t v26;
  _QWORD v27[4];
  char v28;
  uint64_t v29;
  __int128 v30[2];
  uint64_t v31;
  __sFILE v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadPaths", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  *(_QWORD *)&v32._r = v6;
  *(_DWORD *)&v32._flags = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "PATHS");
  if (Section)
  {
    *(_QWORD *)(a2 + 16) = *((_QWORD *)Section + 2);
    v32._p = 0;
    if (sub_20C2C1BD8(a2 + 8, 0, &v32))
    {
      pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v32._bf);
      v9 = (*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8) | *(unsigned __int8 *)(a1 + 6370);
      if (v9 == 1)
      {
        sub_20C13A924((uint64_t *)(a1 + 96), (unint64_t)v32._p);
        v10 = *(int **)(a1 + 96);
        v11 = *(_QWORD *)(a1 + 104);
        v27[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v27);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v27 + 1);
        if (v11 - (uint64_t)v10 >= 1)
        {
          v12 = ((unint64_t)(v11 - (_QWORD)v10) >> 3) + 1;
          do
          {
            sub_20C01A074(v10, v27);
            sub_20C01A0C8(v10 + 1, (_DWORD *)v27 + 1);
            --v12;
            v10 += 2;
          }
          while (v12 > 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
        sub_20BFD265C(v27);
        v13 = *(_OWORD *)(a2 + 16);
        v30[0] = *(_OWORD *)a2;
        v30[1] = v13;
        v31 = *(_QWORD *)(a2 + 32);
        v29 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v29);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v29 + 1);
        sub_20C2C2274((char *)a1, v30, (uint64_t)&v32._bf, (int *)&v29);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v29 + 1);
        v14 = &v29;
      }
      else
      {
        if (v9 > 0x3FF)
        {
          v19 = *(_OWORD *)(a2 + 16);
          v22[0] = *(_OWORD *)a2;
          v22[1] = v19;
          v23 = *(_QWORD *)(a2 + 32);
          sub_20C2C2804((_QWORD *)a1, (uint64_t)v22, (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v32._bf, (unint64_t)v32._p);
          goto LABEL_19;
        }
        if (v32._p > (unsigned __int8 *)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)))
        {
          v27[0] = "usd/crateFile.cpp";
          v27[1] = "_ReadPaths";
          v27[2] = 4126;
          v27[3] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPaths(Reader) [Reader = pxrInte"
                   "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Cr"
                   "ateFile::_PreadStream>]";
          v28 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid number of paths in file.");
          goto LABEL_19;
        }
        sub_20C13A924((uint64_t *)(a1 + 96), (unint64_t)v32._p);
        v15 = *(int **)(a1 + 96);
        v16 = *(_QWORD *)(a1 + 104);
        v27[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v27);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v27 + 1);
        if (v16 - (uint64_t)v15 >= 1)
        {
          v17 = ((unint64_t)(v16 - (_QWORD)v15) >> 3) + 1;
          do
          {
            sub_20C01A074(v15, v27);
            sub_20C01A0C8(v15 + 1, (_DWORD *)v27 + 1);
            --v17;
            v15 += 2;
          }
          while (v17 > 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v27 + 1);
        sub_20BFD265C(v27);
        v18 = *(_OWORD *)(a2 + 16);
        v25[0] = *(_OWORD *)a2;
        v25[1] = v18;
        v26 = *(_QWORD *)(a2 + 32);
        v24 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v24);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v24 + 1);
        sub_20C2C253C((char *)a1, v25, (uint64_t)&v32._bf, (int *)&v24);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
        v14 = &v24;
      }
      sub_20BFD265C(v14);
LABEL_19:
      pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v32._bf);
      v7 = *(_DWORD *)&v32._flags;
    }
  }
  *(_DWORD *)&v32._flags = v7 - 1;
  if (v7)
  {
    v20 = *(_QWORD *)&v32._r;
    v21 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v20);
      *(_DWORD *)&v32._flags = v21--;
    }
    while (v21 != -2);
  }
}

void sub_20C2C0B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36)
{
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&a36);
  sub_20BEB24F4((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_20C2C0C04(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  _QWORD *v6;
  _BOOL4 v7;
  const char *Section;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  __sFILEX *extra;
  _DWORD *v13;
  int v14;
  pxrInternal__aapl__pxrReserved__::SdfPath *v15;
  unsigned int *v16;
  char *v17;
  unsigned int *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  const char *v23;
  char *v24;
  unsigned int *v25;
  char v26;
  const char *v27;
  char *v28;
  void *p_bf;
  int (__cdecl *v30)(void *, const char *, int);
  __int128 v31;
  int (__cdecl *write)(void *, const char *, int);
  __int128 v33;
  const char *v34;
  char *v35;
  void *base;
  unsigned int v37;
  const char *p;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void **v42;
  int (__cdecl *v43)(void *, const char *, int);
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void **v48;
  void **v49;
  __int128 v50;
  int (__cdecl *v51)(void *, const char *, int);
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void **v55;
  void **v56;
  __int128 v57;
  int (__cdecl *v58)(void *, const char *, int);
  void *v59;
  void **v60;
  __int128 v61;
  int (__cdecl *v62)(void *, const char *, int);
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  size_t CompressedBufferSize;
  unint64_t DecompressionWorkingSpaceSize;
  size_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *cookie;
  __sFILE *v74;
  char *v75;
  char *v76;
  fpos_t (__cdecl *seek)(void *, fpos_t, int);
  __sFILEX **v78;
  _DWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int8 *v83;
  char *v84;
  fpos_t (__cdecl *v85)(void *, fpos_t, int);
  __sFILEX **v86;
  _DWORD *v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  char *v92;
  fpos_t (__cdecl *v93)(void *, fpos_t, int);
  fpos_t (__cdecl *v94)(void *, fpos_t, int);
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  void **v101;
  const char *v102;
  const char *p_cookie;
  uint64_t v104;
  int v105;
  int v106;
  uint64_t v107;
  _BOOL4 v108;
  __sFILE v109;
  _QWORD *v110;
  int v111;
  __sFILEX **p_seek;
  const char *v113;
  uint64_t v114;
  const char *v115;
  __sbuf *p_ub;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadSpecs", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v110 = v6;
  v111 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "SPECS");
  v9 = a1 + 6368;
  if (Section)
  {
    *(_QWORD *)(a2 + 16) = *((_QWORD *)Section + 2);
    v10 = (*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8) | *(unsigned __int8 *)(a1 + 6370);
    if (v10 == 1)
    {
      memset(&v109._ub._size, 0, 24);
      if (!sub_20C2C3438(a2, (void **)&v109._ub._size))
      {
        if (*(_QWORD *)&v109._ub._size)
        {
          v109._extra = *(__sFILEX **)&v109._ub._size;
          operator delete(*(void **)&v109._ub._size);
        }
        goto LABEL_146;
      }
      sub_20C2BC024(a1, ((uint64_t)v109._extra - *(_QWORD *)&v109._ub._size) >> 4);
      v11 = *(_QWORD *)&v109._ub._size;
      extra = v109._extra;
      if (*(__sFILEX **)&v109._ub._size != v109._extra)
      {
        v13 = *(_DWORD **)a1;
        do
        {
          v14 = *(_DWORD *)(v11 + 12);
          *(_QWORD *)v13 = *(_QWORD *)(v11 + 4);
          v13[2] = v14;
          v11 += 16;
          v13 += 3;
        }
        while ((__sFILEX *)v11 != extra);
        v11 = *(_QWORD *)&v109._ub._size;
      }
      if (v11)
      {
        v109._extra = (__sFILEX *)v11;
        operator delete((void *)v11);
      }
      goto LABEL_15;
    }
    if (v10 <= 0x3FF)
    {
      if (!sub_20C2C3558(a2, (void **)a1))
        goto LABEL_146;
      goto LABEL_15;
    }
    v109._seek = 0;
    if (!sub_20C2C1BD8(a2 + 8, 0, (__sFILE *)&v109._seek))
      goto LABEL_146;
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v109._seek);
    DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v109._seek);
    if (!CompressedBufferSize || (v69 = DecompressionWorkingSpaceSize) == 0)
    {
      *(_QWORD *)&v109._ub._size = "usd/crateFile.cpp";
      v109._extra = (__sFILEX *)"_ReadSpecs";
      *(_QWORD *)&v109._ur = 3784;
      v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxr"
                       "Internal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__"
                       "::Usd_CrateFile::_PreadStream>]";
      LOBYTE(v109._lb._size) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read specs of size %llu", v109._seek);
      goto LABEL_146;
    }
    v109._cookie = 0;
    if (!sub_20C2C1BD8(a2 + 8, 0, (__sFILE *)&v109._cookie))
      goto LABEL_146;
    v71 = *(_QWORD *)(a2 + 16);
    v70 = *(_QWORD *)(a2 + 24);
    v72 = v70 - v71;
    cookie = (char *)v109._cookie;
    if (v71 < 0 || (v72 & 0x8000000000000000) != 0 || v109._cookie > (void *)v72)
    {
      *(_QWORD *)&v109._ub._size = "usd/crateFile.cpp";
      v109._extra = (__sFILEX *)"_ReadSpecs";
      *(_QWORD *)&v109._ur = 3795;
      v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxr"
                       "Internal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__"
                       "::Usd_CrateFile::_PreadStream>]";
      LOBYTE(v109._lb._size) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", v109._cookie, v72, v70);
      goto LABEL_146;
    }
    v74 = (__sFILE *)operator new[](CompressedBufferSize);
    v75 = (char *)operator new[](v69);
    p_seek = 0;
    v113 = 0;
    v114 = 0;
    if ((unint64_t)(cookie - 1) >= CompressedBufferSize)
    {
      *(_QWORD *)&v109._ub._size = "usd/crateFile.cpp";
      v109._extra = (__sFILEX *)"_ReadSpecs";
      *(_QWORD *)&v109._ur = 3817;
      v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxr"
                       "Internal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__"
                       "::Usd_CrateFile::_PreadStream>]";
      LOBYTE(v109._lb._size) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read pathIndexes, size > compressedBufferSize.");
    }
    else
    {
      sub_20C2AA6E4(a2, v74, cookie);
      sub_20BE81ACC((uint64_t)&p_seek, (unint64_t)v109._seek);
      pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v74, (char *)v109._cookie, (unint64_t)p_seek, (int64_t)v109._seek, v75, v76);
      sub_20C2BC024(a1, (unint64_t)v109._seek);
      seek = v109._seek;
      if (v109._seek)
      {
        v78 = p_seek;
        v79 = *(_DWORD **)a1;
        do
        {
          v80 = *(_DWORD *)v78;
          v78 = (__sFILEX **)((char *)v78 + 4);
          *v79 = v80;
          v79 += 3;
          seek = (fpos_t (__cdecl *)(void *, fpos_t, int))((char *)seek - 1);
        }
        while (seek);
      }
      v109._bf._base = 0;
      if (sub_20C2C1BD8(a2 + 8, 0, (__sFILE *)&v109._bf))
      {
        v82 = *(_QWORD *)(a2 + 16);
        v81 = *(_QWORD *)(a2 + 24);
        v83 = (unsigned __int8 *)(v81 - v82);
        if (v82 < 0 || ((unint64_t)v83 & 0x8000000000000000) != 0 || v109._bf._base > v83)
        {
          *(_QWORD *)&v109._ub._size = "usd/crateFile.cpp";
          v109._extra = (__sFILEX *)"_ReadSpecs";
          *(_QWORD *)&v109._ur = 3827;
          v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader ="
                           " pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRe"
                           "served__::Usd_CrateFile::_PreadStream>]";
          LOBYTE(v109._lb._size) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", v109._bf._base, v83, v81);
        }
        else if (v109._bf._base - 1 >= (unsigned __int8 *)CompressedBufferSize)
        {
          *(_QWORD *)&v109._ub._size = "usd/crateFile.cpp";
          v109._extra = (__sFILEX *)"_ReadSpecs";
          *(_QWORD *)&v109._ur = 3841;
          v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader ="
                           " pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRe"
                           "served__::Usd_CrateFile::_PreadStream>]";
          LOBYTE(v109._lb._size) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fsetIndexes, size > compressedBufferSize.");
        }
        else
        {
          sub_20C2AA6E4(a2, v74, (char *)v109._bf._base);
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v74, (char *)v109._bf._base, (unint64_t)p_seek, (int64_t)v109._seek, v75, v84);
          v85 = v109._seek;
          if (v109._seek)
          {
            v86 = p_seek;
            v87 = (_DWORD *)(*(_QWORD *)a1 + 4);
            do
            {
              v88 = *(_DWORD *)v86;
              v86 = (__sFILEX **)((char *)v86 + 4);
              *v87 = v88;
              v87 += 3;
              v85 = (fpos_t (__cdecl *)(void *, fpos_t, int))((char *)v85 - 1);
            }
            while (v85);
          }
          v109._p = 0;
          if (sub_20C2C1BD8(a2 + 8, 0, &v109))
          {
            v90 = *(_QWORD *)(a2 + 16);
            v89 = *(_QWORD *)(a2 + 24);
            v91 = (unsigned __int8 *)(v89 - v90);
            if (v90 < 0 || ((unint64_t)v91 & 0x8000000000000000) != 0 || v109._p > v91)
            {
              *(_QWORD *)&v109._ub._size = "usd/crateFile.cpp";
              v109._extra = (__sFILEX *)"_ReadSpecs";
              *(_QWORD *)&v109._ur = 3852;
              v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Read"
                               "er = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
                               "l__pxrReserved__::Usd_CrateFile::_PreadStream>]";
              LOBYTE(v109._lb._size) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read spec types of size %llu with remaining file size is %lld of %lld", v109._p, v91, v89);
            }
            else
            {
              if (v109._p - 1 < (unsigned __int8 *)CompressedBufferSize)
              {
                sub_20C2AA6E4(a2, v74, (char *)v109._p);
                pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v74, (char *)v109._p, (unint64_t)p_seek, (int64_t)v109._seek, v75, v92);
                v93 = v109._seek;
                if (v109._seek)
                {
                  v94 = 0;
                  v95 = 8;
                  do
                  {
                    v96 = *((unsigned int *)p_seek + (_QWORD)v94);
                    if (v96 >= 0xC)
                    {
                      *(_QWORD *)&v109._ub._size = "usd/crateFile.cpp";
                      v109._extra = (__sFILEX *)"_ReadSpecs";
                      *(_QWORD *)&v109._ur = 3864;
                      v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reade"
                                       "r) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<"
                                       "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
                      LOBYTE(v109._lb._size) = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid spec type %zu", v96);
                      *(_DWORD *)(*(_QWORD *)a1 + v95) = 0;
                      v93 = v109._seek;
                    }
                    else
                    {
                      *(_DWORD *)(*(_QWORD *)a1 + v95) = v96;
                    }
                    v94 = (fpos_t (__cdecl *)(void *, fpos_t, int))((char *)v94 + 1);
                    v95 += 12;
                  }
                  while (v94 != v93);
                  v106 = 0;
                  v9 = a1 + 6368;
                }
                else
                {
                  v106 = 0;
                }
LABEL_153:
                if (p_seek)
                {
                  v113 = (const char *)p_seek;
                  operator delete(p_seek);
                }
                operator delete[](v75);
                operator delete[](v74);
                if (v106)
                  goto LABEL_146;
                goto LABEL_15;
              }
              *(_QWORD *)&v109._ub._size = "usd/crateFile.cpp";
              v109._extra = (__sFILEX *)"_ReadSpecs";
              *(_QWORD *)&v109._ur = 3871;
              v109._lb._base = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Read"
                               "er = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
                               "l__pxrReserved__::Usd_CrateFile::_PreadStream>]";
              LOBYTE(v109._lb._size) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109._ub._size, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read spectypes, size > compressedBufferSize.");
            }
          }
        }
      }
    }
    v106 = 1;
    goto LABEL_153;
  }
LABEL_15:
  v108 = v7;
  v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2BC654((uint64_t)&v109._ub._size, 0, 0.0, 0.5);
  memset(&v109._seek, 0, 24);
  v17 = *(char **)a1;
  v16 = *(unsigned int **)(a1 + 8);
  if (*(unsigned int **)a1 == v16)
    goto LABEL_145;
  v107 = v9;
  v18 = (unsigned int *)(v17 + 8);
  v19 = *(char **)a1;
  do
  {
    v20 = *(v18 - 2);
    v21 = *(_QWORD *)(a1 + 96);
    if (v20 >= (*(_QWORD *)(a1 + 104) - v21) >> 3)
      v22 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v15);
    else
      v22 = (uint64_t *)(v21 + 8 * v20);
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v22))
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec at index %zu has empty path", v23, v24, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v17[-*(_QWORD *)a1] >> 2));
      write = v109._write;
      if ((char *)v109._write >= (char *)v109._ub._base)
      {
        v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v109._write - (char *)v109._seek) >> 3);
        v40 = v39 + 1;
        if (v39 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        if (0x5555555555555556 * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3) > v40)
          v40 = 0x5555555555555556 * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3) >= 0x555555555555555)
          v41 = 0xAAAAAAAAAAAAAAALL;
        else
          v41 = v40;
        p_ub = &v109._ub;
        if (v41)
          v42 = (void **)sub_20BDE4FF4((uint64_t)&v109._ub, v41);
        else
          v42 = 0;
        v49 = &v42[3 * v39];
        p_seek = (__sFILEX **)v42;
        v113 = (const char *)v49;
        v115 = (const char *)&v42[3 * v41];
        v50 = *(_OWORD *)&v109._cookie;
        v49[2] = v109._read;
        *(_OWORD *)v49 = v50;
        memset(&v109._cookie, 0, 24);
        v114 = (uint64_t)(v49 + 3);
        sub_20BDF34C0((uint64_t *)&v109._seek, &p_seek);
        v51 = v109._write;
        v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDF3648((uint64_t)&p_seek);
        v109._write = v51;
        if (SHIBYTE(v109._read) < 0)
          operator delete(v109._cookie);
      }
      else
      {
        v33 = *(_OWORD *)&v109._cookie;
        *((_QWORD *)v109._write + 2) = v109._read;
        *(_OWORD *)write = v33;
        v109._write = (int (__cdecl *)(void *, const char *, int))((char *)write + 24);
      }
      v25 = v18;
      goto LABEL_81;
    }
    v25 = (unsigned int *)(v19 + 8);
    if (*v18 && (int)*v18 < 12)
    {
      v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2BC978((uint64_t *)&v109._ub._size, (unsigned int *)v22, v22);
      if ((v26 & 1) != 0)
        goto LABEL_82;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v22, (uint64_t)&v109._bf);
      p_bf = &v109._bf;
      if (*((char *)&v109._lbfsize + 7) < 0)
        p_bf = v109._bf._base;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec <%s> repeated", v27, v28, p_bf);
      v30 = v109._write;
      if ((char *)v109._write < (char *)v109._ub._base)
      {
        v31 = *(_OWORD *)&v109._cookie;
        *((_QWORD *)v109._write + 2) = v109._read;
        *(_OWORD *)v30 = v31;
        memset(&v109._cookie, 0, 24);
        v109._write = (int (__cdecl *)(void *, const char *, int))((char *)v30 + 24);
        goto LABEL_79;
      }
      v52 = 0xAAAAAAAAAAAAAAABLL * (((char *)v109._write - (char *)v109._seek) >> 3);
      v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      if (0x5555555555555556 * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3) > v53)
        v53 = 0x5555555555555556 * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3) >= 0x555555555555555)
        v54 = 0xAAAAAAAAAAAAAAALL;
      else
        v54 = v53;
      p_ub = &v109._ub;
      if (v54)
        v55 = (void **)sub_20BDE4FF4((uint64_t)&v109._ub, v54);
      else
        v55 = 0;
      v60 = &v55[3 * v52];
      p_seek = (__sFILEX **)v55;
      v113 = (const char *)v60;
      v115 = (const char *)&v55[3 * v54];
      v61 = *(_OWORD *)&v109._cookie;
      v60[2] = v109._read;
      *(_OWORD *)v60 = v61;
      memset(&v109._cookie, 0, 24);
      v114 = (uint64_t)(v60 + 3);
      sub_20BDF34C0((uint64_t *)&v109._seek, &p_seek);
      v62 = v109._write;
      v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDF3648((uint64_t)&p_seek);
      v109._write = v62;
      if ((SHIBYTE(v109._read) & 0x80000000) == 0)
        goto LABEL_79;
      v59 = v109._cookie;
      goto LABEL_78;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v22, (uint64_t)&v109._bf);
    if (*((char *)&v109._lbfsize + 7) >= 0)
      base = &v109._bf;
    else
      base = v109._bf._base;
    v37 = *v18;
    if (*v18)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"invalid spec type value %d", v34, v35, *v18);
      p = (const char *)&v109;
      if (*((char *)&v109._file + 5) < 0)
        p = (const char *)v109._p;
    }
    else
    {
      p = "unknown spec type";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec <%s> has %s", v34, v35, base, p);
    v43 = v109._write;
    if ((char *)v109._write >= (char *)v109._ub._base)
    {
      v45 = 0xAAAAAAAAAAAAAAABLL * (((char *)v109._write - (char *)v109._seek) >> 3);
      v46 = v45 + 1;
      if (v45 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      if (0x5555555555555556 * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3) > v46)
        v46 = 0x5555555555555556 * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((v109._ub._base - (unsigned __int8 *)v109._seek) >> 3) >= 0x555555555555555)
        v47 = 0xAAAAAAAAAAAAAAALL;
      else
        v47 = v46;
      p_ub = &v109._ub;
      if (v47)
        v48 = (void **)sub_20BDE4FF4((uint64_t)&v109._ub, v47);
      else
        v48 = 0;
      v56 = &v48[3 * v45];
      p_seek = (__sFILEX **)v48;
      v113 = (const char *)v56;
      v115 = (const char *)&v48[3 * v47];
      v57 = *(_OWORD *)&v109._cookie;
      v56[2] = v109._read;
      *(_OWORD *)v56 = v57;
      memset(&v109._cookie, 0, 24);
      v114 = (uint64_t)(v56 + 3);
      sub_20BDF34C0((uint64_t *)&v109._seek, &p_seek);
      v58 = v109._write;
      v15 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDF3648((uint64_t)&p_seek);
      v109._write = v58;
      if ((SHIBYTE(v109._read) & 0x80000000) == 0)
      {
        if (!v37)
          goto LABEL_79;
LABEL_71:
        if ((*((char *)&v109._file + 5) & 0x80000000) == 0)
          goto LABEL_79;
        v59 = v109._p;
LABEL_78:
        operator delete(v59);
        goto LABEL_79;
      }
      operator delete(v109._cookie);
      if (v37)
        goto LABEL_71;
    }
    else
    {
      v44 = *(_OWORD *)&v109._cookie;
      *((_QWORD *)v109._write + 2) = v109._read;
      *(_OWORD *)v43 = v44;
      memset(&v109._cookie, 0, 24);
      v109._write = (int (__cdecl *)(void *, const char *, int))((char *)v43 + 24);
      if (v37)
        goto LABEL_71;
    }
LABEL_79:
    if (*((char *)&v109._lbfsize + 7) < 0)
      operator delete(v109._bf._base);
LABEL_81:
    *v25 = 0;
LABEL_82:
    v19 += 12;
    v63 = v18 + 1;
    v18 += 3;
    v17 += 12;
  }
  while (v63 != v16);
  v7 = v108;
  if (v109._seek != (fpos_t (__cdecl *)(void *, fpos_t, int))v109._write)
  {
    v64 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 != v64)
    {
      v65 = *(_QWORD *)a1 + 12;
      while (*(_DWORD *)(v65 - 4))
      {
        v66 = v65 == v64;
        v65 += 12;
        if (v66)
          goto LABEL_134;
      }
      v97 = v65 - 12;
      if (v65 - 12 != v64 && v65 != v64)
      {
        do
        {
          if (*(_DWORD *)(v65 + 8))
          {
            v98 = *(_QWORD *)v65;
            *(_DWORD *)(v97 + 8) = *(_DWORD *)(v65 + 8);
            *(_QWORD *)v97 = v98;
            v97 += 12;
          }
          v65 += 12;
        }
        while (v65 != v64);
        v64 = *(_QWORD *)(a1 + 8);
      }
      if (v97 != v64)
        *(_QWORD *)(a1 + 8) = v97;
    }
LABEL_134:
    v99 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v109._write - (char *)v109._seek) >> 3));
    if (v109._write == (int (__cdecl *)(void *, const char *, int))v109._seek)
      v100 = 0;
    else
      v100 = v99;
    sub_20C2BCF78((uint64_t)v109._seek, (unint64_t)v109._write, (uint64_t)&p_seek, v100, 1);
    v101 = sub_20C104400((unsigned __int8 *)v109._seek, (unsigned __int8 *)v109._write, (uint64_t)&p_seek);
    sub_20C0F9EEC((uint64_t)&v109._seek, (uint64_t)v101, (__int128 *)v109._write);
    p_seek = (__sFILEX **)"usd/crateFile.cpp";
    v113 = "_ReadSpecs";
    v114 = 3935;
    v115 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__aa"
           "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
    LOBYTE(p_ub) = 0;
    v102 = (const char *)(a1 + 6512);
    if (*(char *)(v107 + 167) < 0)
      v102 = *(const char **)v102;
    pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (std::string **)&v109._seek, (std::string *)&v109._cookie);
    if (SHIBYTE(v109._read) >= 0)
      p_cookie = (const char *)&v109._cookie;
    else
      p_cookie = (const char *)v109._cookie;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&p_seek, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset @%s@ - ignoring invalid specs: %s.", v102, p_cookie);
    if (SHIBYTE(v109._read) < 0)
      operator delete(v109._cookie);
    v7 = v111;
  }
LABEL_145:
  p_seek = (__sFILEX **)&v109._seek;
  sub_20BDE5038((void ***)&p_seek);
  p_seek = &v109._extra;
  sub_20C2BC86C((void ***)&p_seek);
LABEL_146:
  v111 = v7 - 1;
  if (v7)
  {
    v104 = (uint64_t)v110;
    v105 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v104);
      v111 = v105--;
    }
    while (v105 != -2);
  }
}

void sub_20C2C18C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;
  void *v38;
  uint64_t v39;
  void *v41;

  v41 = *(void **)(v39 - 128);
  if (v41)
  {
    *(_QWORD *)(v39 - 120) = v41;
    operator delete(v41);
  }
  operator delete[](v38);
  operator delete[](v37);
  sub_20BEB24F4(v39 - 144);
  _Unwind_Resume(a1);
}

BOOL sub_20C2C1A6C(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  void *__p;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __p = "usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20C2B9F1C(&__p, v16);
  v7 = sub_20C2C1B8C(a1, (__sFILE *)__p, v16);
  v8 = v7;
  if (&__p != a2 && v7)
    sub_20C2B2718((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 5);
  if (__p)
  {
    v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_20C2C1B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C2C1B8C(uint64_t a1, __sFILE *a2, uint64_t a3)
{
  ssize_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 32), a2, (char *)(32 * a3), *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8));
  if (v4 != -1)
    *(_QWORD *)(a1 + 16) += v4;
  return v4 != -1;
}

BOOL sub_20C2C1BD8(uint64_t a1, int a2, __sFILE *a3)
{
  ssize_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 24), a3, (char *)8, *(_QWORD *)(a1 + 8) + *(_QWORD *)a1);
  if (v4 != -1)
    *(_QWORD *)(a1 + 8) += v4;
  return v4 != -1;
}

uint64_t sub_20C2C1C30(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2BA0A4(a1 + 8);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2C1CBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C2C1CD0(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  void *__p;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __p = "usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::TokenIndex]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20C2BA4E8(&__p, v16);
  v7 = sub_20C2C1DF0(a1, (__sFILE *)__p, v16);
  v8 = v7;
  if (&__p != a2 && v7)
    sub_20BE8B37C((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_20C2C1DD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C2C1DF0(uint64_t a1, __sFILE *a2, uint64_t a3)
{
  ssize_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 32), a2, (char *)(4 * a3), *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8));
  if (v4 != -1)
    *(_QWORD *)(a1 + 16) += v4;
  return v4 != -1;
}

void sub_20C2C1E3C(uint64_t a1, unint64_t a2, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a3)
{
  void *v3;
  void *v4;
  void *v5[2];
  void *__p[2];

  *(_OWORD *)v5 = 0u;
  *(_OWORD *)__p = 0u;
  sub_20C2C2018((uint64_t)v5, a1, a2, a3);
  v3 = __p[0];
  __p[0] = 0;
  if (v3)
    operator delete[](v3);
  v4 = v5[0];
  v5[0] = 0;
  if (v4)
    operator delete[](v4);
}

void sub_20C2C1E98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C2BAA20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20C2C1EAC(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  void *__p;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __p = "usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Field]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20C2BA734(&__p, v16);
  v7 = sub_20C2C1FCC(a1, (__sFILE *)__p, v16);
  v8 = v7;
  if (&__p != a2 && v7)
    sub_20BEF5530((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 4);
  if (__p)
  {
    v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_20C2C1FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C2C1FCC(uint64_t a1, __sFILE *a2, uint64_t a3)
{
  ssize_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 32), a2, (char *)(16 * a3), *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8));
  if (v4 != -1)
    *(_QWORD *)(a1 + 16) += v4;
  return v4 != -1;
}

BOOL sub_20C2C2018(uint64_t a1, uint64_t a2, unint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a4)
{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;
  char *v20;

  sub_20C2BAA60(a1, a4);
  v20 = 0;
  result = sub_20C2C1BD8(a2 + 8, 0, (__sFILE *)&v20);
  if (result)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = v20;
    if (v11 < (unint64_t)v20)
      v12 = *(char **)(a1 + 8);
    if (v9 - v10 >= (unint64_t)v12)
      v13 = v12;
    else
      v13 = (char *)(v9 - v10);
    v20 = v13;
    if (v11 && *(_QWORD *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        result = sub_20C2AA6E4(a2, *(__sFILE **)a1, v13);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a1, v20, a3, (int64_t)a4, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2158;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = unsigned int]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2153;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = unsigned int]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

BOOL sub_20C2C2154(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  void *__p;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __p = "usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::FieldIndex]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20C2BAC5C(&__p, v16);
  v7 = sub_20C2C1DF0(a1, (__sFILE *)__p, v16);
  v8 = v7;
  if (&__p != a2 && v7)
    sub_20BE8B37C((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_20C2C2258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C2C2274(char *a1, __int128 *a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  int *v8;
  _BOOL8 v9;
  uint64_t v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  char v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  _DWORD v32[3];
  char v33;

  v7 = (uint64_t)a2 + 8;
  v8 = a4 + 1;
  do
  {
    *(_QWORD *)&v32[1] = -1;
    if (!sub_20C2C2CC0(v7, 0, (__sFILE *)v32))
      break;
    v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (v9)
    {
      v10 = *((_QWORD *)a1 + 15);
      if (v32[2] >= (unint64_t)((*((_QWORD *)a1 + 16) - v10) >> 3)
        || v32[1] >= (unint64_t)((uint64_t)(*((_QWORD *)a1 + 13) - *((_QWORD *)a1 + 12)) >> 3))
      {
        v23 = "usd/crateFile.cpp";
        *(_QWORD *)&v24 = "_ReadPathsImpl";
        v21 = 4159;
LABEL_23:
        *((_QWORD *)&v24 + 1) = v21;
        *(_QWORD *)&v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPathsImpl(Reader, WorkDi"
                          "spatcher &, SdfPath) [Header = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PathItemHeade"
                          "r_0_0_1, Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInter"
                          "nal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
        BYTE8(v25) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid paths header causing OOB access.", a3);
        return;
      }
      v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 8 * v32[2]);
      if ((v33 & 4) != 0)
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      else
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      v15 = (int *)(*((_QWORD *)a1 + 12) + 8 * v32[1]);
      sub_20BFD3EBC(v15, (int *)&v23);
      sub_20BFD3F10(v15 + 1, (int *)&v23 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_20BFD265C(&v23);
    }
    else
    {
      v12 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
      sub_20C01A074(a4, v12);
      sub_20C01A0C8(v8, v12 + 1);
      v13 = *((_QWORD *)a1 + 12);
      if (v32[1] >= (unint64_t)((*((_QWORD *)a1 + 13) - v13) >> 3))
      {
        v23 = "usd/crateFile.cpp";
        *(_QWORD *)&v24 = "_ReadPathsImpl";
        v21 = 4152;
        goto LABEL_23;
      }
      v14 = (int *)(v13 + 8 * v32[1]);
      sub_20C01A074(v14, a4);
      sub_20C01A0C8(v14 + 1, v8);
    }
    v16 = v33;
    if ((v33 & 1) != 0)
    {
      if ((v33 & 2) != 0)
      {
        v31 = 0;
        if (!sub_20C2C1BD8(v7, 0, (__sFILE *)&v31))
          return;
        v17 = a2[1];
        v24 = *a2;
        v25 = v17;
        v26 = *((_QWORD *)a2 + 4);
        v23 = a1;
        v27 = v31;
        v28 = a3;
        sub_20BFD6E54(&v29, a4);
        sub_20BFD6EA4(&v30, v8);
        v18 = sub_20C2C2D10(a3, (uint64_t)&v23);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v18 - 40))(*(_QWORD *)(v18 - 40), v18, v18 - 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
        sub_20BFD265C(&v29);
      }
      v19 = *((_QWORD *)a1 + 12);
      if (v32[1] >= (unint64_t)((*((_QWORD *)a1 + 13) - v19) >> 3))
      {
        v23 = "usd/crateFile.cpp";
        *(_QWORD *)&v24 = "_ReadPathsImpl";
        v21 = 4195;
        goto LABEL_23;
      }
      v20 = (_DWORD *)(v19 + 8 * v32[1]);
      sub_20C01A074(a4, v20);
      sub_20C01A0C8(v8, v20 + 1);
    }
  }
  while ((v16 & 3) != 0);
}

void sub_20C2C2520(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C2C2C8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2C253C(char *a1, __int128 *a2, uint64_t a3, int *a4)
{
  uint64_t v7;
  int *v8;
  _BOOL8 v9;
  uint64_t v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  int *v15;
  char v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  char *v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v7 = (uint64_t)a2 + 8;
  v8 = a4 + 1;
  do
  {
    v32 = -1;
    if (!sub_20C2C2FF8(v7, 0, (__sFILE *)&v32))
      break;
    v9 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (v9)
    {
      v10 = *((_QWORD *)a1 + 15);
      if (HIDWORD(v32) >= (unint64_t)((*((_QWORD *)a1 + 16) - v10) >> 3)
        || v32 >= (unint64_t)((uint64_t)(*((_QWORD *)a1 + 13) - *((_QWORD *)a1 + 12)) >> 3))
      {
        v23 = "usd/crateFile.cpp";
        *(_QWORD *)&v24 = "_ReadPathsImpl";
        v21 = 4159;
LABEL_23:
        *((_QWORD *)&v24 + 1) = v21;
        *(_QWORD *)&v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPathsImpl(Reader, WorkDi"
                          "spatcher &, SdfPath) [Header = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PathItemHeade"
                          "r, Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__a"
                          "apl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
        BYTE8(v25) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v23, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid paths header causing OOB access.", a3);
        return;
      }
      v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v10 + 8 * HIDWORD(v32));
      if ((v33 & 4) != 0)
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      else
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v11, (int *)&v23);
      v15 = (int *)(*((_QWORD *)a1 + 12) + 8 * v32);
      sub_20BFD3EBC(v15, (int *)&v23);
      sub_20BFD3F10(v15 + 1, (int *)&v23 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v23 + 1);
      sub_20BFD265C(&v23);
    }
    else
    {
      v12 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v9);
      sub_20C01A074(a4, v12);
      sub_20C01A0C8(v8, v12 + 1);
      v13 = *((_QWORD *)a1 + 12);
      if (v32 >= (unint64_t)((*((_QWORD *)a1 + 13) - v13) >> 3))
      {
        v23 = "usd/crateFile.cpp";
        *(_QWORD *)&v24 = "_ReadPathsImpl";
        v21 = 4152;
        goto LABEL_23;
      }
      v14 = (int *)(v13 + 8 * v32);
      sub_20C01A074(v14, a4);
      sub_20C01A0C8(v14 + 1, v8);
    }
    v16 = v33;
    if ((v33 & 1) != 0)
    {
      if ((v33 & 2) != 0)
      {
        v31 = 0;
        if (!sub_20C2C1BD8(v7, 0, (__sFILE *)&v31))
          return;
        v17 = a2[1];
        v24 = *a2;
        v25 = v17;
        v26 = *((_QWORD *)a2 + 4);
        v23 = a1;
        v27 = v31;
        v28 = a3;
        sub_20BFD6E54(&v29, a4);
        sub_20BFD6EA4(&v30, v8);
        v18 = sub_20C2C3048(a3, (uint64_t)&v23);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v18 - 40))(*(_QWORD *)(v18 - 40), v18, v18 - 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v30);
        sub_20BFD265C(&v29);
      }
      v19 = *((_QWORD *)a1 + 12);
      if (v32 >= (unint64_t)((*((_QWORD *)a1 + 13) - v19) >> 3))
      {
        v23 = "usd/crateFile.cpp";
        *(_QWORD *)&v24 = "_ReadPathsImpl";
        v21 = 4195;
        goto LABEL_23;
      }
      v20 = (_DWORD *)(v19 + 8 * v32);
      sub_20C01A074(a4, v20);
      sub_20C01A0C8(v8, v20 + 1);
    }
  }
  while ((v16 & 3) != 0);
}

void sub_20C2C27E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20C2C2FC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2C2804(_QWORD *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::WorkDispatcher *a3, unint64_t a4)
{
  uint64_t CompressedBufferSize;
  unint64_t DecompressionWorkingSpaceSize;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;
  void *v27[2];
  void *__p[2];
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v29 = 0;
  if (sub_20C2C1BD8(a2 + 8, 0, (__sFILE *)&v29))
  {
    *(_OWORD *)v27 = 0u;
    *(_OWORD *)__p = 0u;
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v29);
    DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(v29);
    if (CompressedBufferSize && DecompressionWorkingSpaceSize)
    {
      sub_20BE81ACC((uint64_t)&v36, (unint64_t)v29);
      if (sub_20C2C2018((uint64_t)v27, a2, (unint64_t)v36, v29))
      {
        v10 = v36;
        if (v36 == v37)
        {
          v11 = 0;
LABEL_13:
          if (v11 + 1 < a4)
          {
            v22 = "usd/crateFile.cpp";
            v23 = "_ReadCompressedPaths";
            v24 = 4253;
            v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDisp"
                  "atcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrI"
                  "nternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
            v26 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths. numPaths = %llu too large for max index = %llu", a4, v11);
          }
          else if ((unint64_t)v29 > a4)
          {
            v22 = "usd/crateFile.cpp";
            v23 = "_ReadCompressedPaths";
            v24 = 4259;
            v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDisp"
                  "atcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrI"
                  "nternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
            v26 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths. numEncodedPaths %llu > numPaths = %llu", v29, a4);
          }
          else
          {
            sub_20C13A924(a1 + 12, a4);
            v13 = (int *)a1[12];
            v14 = a1[13];
            v22 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v22);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v22 + 1);
            if (v14 - (uint64_t)v13 >= 1)
            {
              v15 = ((unint64_t)(v14 - (_QWORD)v13) >> 3) + 1;
              do
              {
                sub_20C01A074(v13, &v22);
                sub_20C01A0C8(v13 + 1, (_DWORD *)&v22 + 1);
                --v15;
                v13 += 2;
              }
              while (v15 > 1);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
            sub_20BFD265C(&v22);
            sub_20BE81ACC((uint64_t)&v33, (unint64_t)v29);
            if (sub_20C2C32FC((uint64_t)v27, a2, (unint64_t)v33, v29))
            {
              v16 = v33;
              if (v33 == v34)
              {
LABEL_26:
                sub_20BE81ACC((uint64_t)&v30, (unint64_t)v29);
                if (sub_20C2C32FC((uint64_t)v27, a2, (unint64_t)v30, v29))
                {
                  v21 = 0;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v21);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v21 + 1);
                  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl(a1, &v36, &v33, &v30, 0, (int *)&v21, (uint64_t)a3);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
                  sub_20BFD265C(&v21);
                  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(a3);
                }
              }
              else
              {
                v17 = (uint64_t)(a1[16] - a1[15]) >> 3;
                while (1)
                {
                  LODWORD(v18) = *v16;
                  v18 = (int)*v16 >= 0 ? v18 : -(int)v18;
                  if (v17 <= v18)
                    break;
                  if (++v16 == v34)
                    goto LABEL_26;
                }
                v22 = "usd/crateFile.cpp";
                v23 = "_ReadCompressedPaths";
                v24 = 4280;
                v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, Work"
                      "Dispatcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Rea"
                      "der<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
                v26 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt path element token index in crate file (%d >= %zu)", v18, v17);
              }
            }
          }
        }
        else
        {
          v11 = 0;
          while (1)
          {
            v12 = *v10;
            if (v12 >= a4)
              break;
            if (v11 <= v12)
              v11 = *v10;
            if (++v10 == v37)
              goto LABEL_13;
          }
          v22 = "usd/crateFile.cpp";
          v23 = "_ReadCompressedPaths";
          v24 = 4243;
          v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDispat"
                "cher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInter"
                "nal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>]";
          v26 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt path index in crate file (%u >= %zu)", v12, a4);
        }
      }
    }
    else
    {
      v22 = "usd/crateFile.cpp";
      v23 = "_ReadCompressedPaths";
      v24 = 4230;
      v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDispatcher"
            " &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
            "l__pxrReserved__::Usd_CrateFile::_PreadStream>]";
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths of size %llu", v29);
    }
    v19 = __p[0];
    __p[0] = 0;
    if (v19)
      operator delete[](v19);
    v20 = v27[0];
    v27[0] = 0;
    if (v20)
      operator delete[](v20);
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_20C2C2C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void *v25;
  void *v26;

  sub_20C2BAA20((uint64_t)&a17);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  v25 = *(void **)(v23 - 96);
  if (v25)
  {
    *(_QWORD *)(v23 - 88) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(v23 - 72);
  if (v26)
  {
    *(_QWORD *)(v23 - 64) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C2C8C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_20BFD265C((_DWORD *)(a1 + 64));
  return a1;
}

BOOL sub_20C2C2CC0(uint64_t a1, int a2, __sFILE *a3)
{
  ssize_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 24), a3, (char *)0x10, *(_QWORD *)(a1 + 8) + *(_QWORD *)a1);
  if (v4 != -1)
    *(_QWORD *)(a1 + 8) += v4;
  return v4 != -1;
}

unint64_t sub_20C2C2D10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD v10[2];

  v4 = *(_QWORD *)(a1 + 256);
  v10[0] = 0;
  v10[1] = v4;
  v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x58uLL);
  *(_BYTE *)(v5 - 11) = 1;
  *(_QWORD *)v5 = &unk_24C52F1B0;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 56) = v7;
  *(_OWORD *)(v5 + 40) = v6;
  *(_OWORD *)(v5 + 24) = v8;
  sub_20BFD38A4((_DWORD *)(v5 + 72), (_DWORD *)(a2 + 64));
  sub_20BFD38DC((_DWORD *)(v5 + 76), (_DWORD *)(a2 + 68));
  *(_QWORD *)(v5 + 80) = a1 + 264;
  return v5;
}

uint64_t sub_20C2C2DAC(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C52F1B0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 76));
  sub_20BFD265C((_DWORD *)(a1 + 72));
  return a1;
}

void sub_20C2C2DEC(_DWORD *a1)
{
  *(_QWORD *)a1 = &unk_24C52F1B0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 19);
  sub_20BFD265C(a1 + 18);
  operator delete(a1);
}

uint64_t sub_20C2C2E2C(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2C2ECC(a1 + 8);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 80));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2C2EB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C2ECC(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t result;
  int v9;
  int v10;
  __int128 v11[2];
  uint64_t v12;
  uint64_t v13;
  int v14;

  v2 = *(char **)a1;
  sub_20C2BBAF8((uint64_t)&v13, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 48);
  v4 = *(_OWORD *)(a1 + 8);
  v12 = v3;
  v5 = *(_OWORD *)(a1 + 24);
  v11[0] = v4;
  v11[1] = v5;
  v6 = *(_QWORD *)(a1 + 56);
  sub_20BFD6E54(&v9, (_DWORD *)(a1 + 64));
  sub_20BFD6EA4(&v10, (_DWORD *)(a1 + 68));
  sub_20C2C2274(v2, v11, v6, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  for (result = (uint64_t)sub_20BFD265C(&v9); v14--; result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13))
    ;
  return result;
}

void sub_20C2C2FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  sub_20BEB24F4(v2 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C2FC4(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_20BFD265C((_DWORD *)(a1 + 64));
  return a1;
}

BOOL sub_20C2C2FF8(uint64_t a1, int a2, __sFILE *a3)
{
  ssize_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 24), a3, (char *)0xC, *(_QWORD *)(a1 + 8) + *(_QWORD *)a1);
  if (v4 != -1)
    *(_QWORD *)(a1 + 8) += v4;
  return v4 != -1;
}

unint64_t sub_20C2C3048(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD v10[2];

  v4 = *(_QWORD *)(a1 + 256);
  v10[0] = 0;
  v10[1] = v4;
  v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x58uLL);
  *(_BYTE *)(v5 - 11) = 1;
  *(_QWORD *)v5 = &unk_24C52F1F8;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 56) = v7;
  *(_OWORD *)(v5 + 40) = v6;
  *(_OWORD *)(v5 + 24) = v8;
  sub_20BFD38A4((_DWORD *)(v5 + 72), (_DWORD *)(a2 + 64));
  sub_20BFD38DC((_DWORD *)(v5 + 76), (_DWORD *)(a2 + 68));
  *(_QWORD *)(v5 + 80) = a1 + 264;
  return v5;
}

uint64_t sub_20C2C30E4(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C52F1F8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 76));
  sub_20BFD265C((_DWORD *)(a1 + 72));
  return a1;
}

void sub_20C2C3124(_DWORD *a1)
{
  *(_QWORD *)a1 = &unk_24C52F1F8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 19);
  sub_20BFD265C(a1 + 18);
  operator delete(a1);
}

uint64_t sub_20C2C3164(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2C3204(a1 + 8);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 80));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2C31F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C3204(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t result;
  int v9;
  int v10;
  __int128 v11[2];
  uint64_t v12;
  uint64_t v13;
  int v14;

  v2 = *(char **)a1;
  sub_20C2BBAF8((uint64_t)&v13, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a1 + 48);
  v4 = *(_OWORD *)(a1 + 8);
  v12 = v3;
  v5 = *(_OWORD *)(a1 + 24);
  v11[0] = v4;
  v11[1] = v5;
  v6 = *(_QWORD *)(a1 + 56);
  sub_20BFD6E54(&v9, (_DWORD *)(a1 + 64));
  sub_20BFD6EA4(&v10, (_DWORD *)(a1 + 68));
  sub_20C2C253C(v2, v11, v6, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  for (result = (uint64_t)sub_20BFD265C(&v9); v14--; result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v13))
    ;
  return result;
}

void sub_20C2C32DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  sub_20BEB24F4(v2 - 48);
  _Unwind_Resume(a1);
}

BOOL sub_20C2C32FC(uint64_t a1, uint64_t a2, unint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a4)
{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;
  char *v20;

  sub_20C2BAA60(a1, a4);
  v20 = 0;
  result = sub_20C2C1BD8(a2 + 8, 0, (__sFILE *)&v20);
  if (result)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = v20;
    if (v11 < (unint64_t)v20)
      v12 = *(char **)(a1 + 8);
    if (v9 - v10 >= (unint64_t)v12)
      v13 = v12;
    else
      v13 = (char *)(v9 - v10);
    v20 = v13;
    if (v11 && *(_QWORD *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        result = sub_20C2AA6E4(a2, *(__sFILE **)a1, v13);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a1, v20, a3, (int64_t)a4, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2158;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = int]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2153;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = int]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

BOOL sub_20C2C3438(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  void *__p;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __p = "usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec_0_0_1]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20C2BC194(&__p, v16);
  v7 = sub_20C2C1FCC(a1, (__sFILE *)__p, v16);
  v8 = v7;
  if (&__p != a2 && v7)
    sub_20BEF5530((char *)a2, (char *)__p, (uint64_t)v12, (v12 - (_BYTE *)__p) >> 4);
  if (__p)
  {
    v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_20C2C353C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C2C3558(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _BOOL8 v7;
  _BOOL8 v8;
  void *__p;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  unint64_t v16;

  v16 = 0;
  if (!sub_20C2C1BD8(a1 + 8, 0, (__sFILE *)&v16))
    return 0;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = v4 - v5;
  if (v5 < 0 || (v6 & 0x8000000000000000) != 0 || v16 > v6)
  {
    __p = "usd/crateFile.cpp";
    v12 = "_Read";
    v13 = 1189;
    v14 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_PreadStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "PreadStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec]";
    v15 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v16, v6, v4);
    return 0;
  }
  sub_20C2BC4A4(&__p, v16);
  v7 = sub_20C2C3684(a1, (__sFILE *)__p, v16);
  v8 = v7;
  if (&__p != a2 && v7)
    sub_20C2BC51C((char *)a2, (char *)__p, (uint64_t)v12, 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)__p) >> 2));
  if (__p)
  {
    v12 = (const char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_20C2C3668(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20C2C3684(uint64_t a1, __sFILE *a2, uint64_t a3)
{
  ssize_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 32), a2, (char *)(12 * a3), *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8));
  if (v4 != -1)
    *(_QWORD *)(a1 + 16) += v4;
  return v4 != -1;
}

void sub_20C2C36D4(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;

  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 16);
  __p[0] = 0;
  __p[1] = 0;
  v5 = 0;
  if ((sub_20C2C5990(a1, __p) & 1) != 0)
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v5;
  }
  else
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_20C2C3744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C2C3760(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  _QWORD *v6;
  _BOOL4 v7;
  const char *Section;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  char *v16;
  char *v17;
  size_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  _BYTE *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t CompressedBufferSize;
  char *v35;
  size_t v36;
  pxrInternal__aapl__pxrReserved__::TfFastCompression *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t __sz;
  const char *v44;
  uint64_t v45;
  const char *v46;
  char v47;
  char *v48;
  void *__p;
  size_t v50;
  _QWORD *v51;
  int v52;
  char *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  char v57;
  const char *v58;
  _QWORD v59[10];

  v59[9] = *MEMORY[0x24BDAC8D0];
  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadTokens", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v51 = v6;
  v52 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "TOKENS");
  if (Section)
  {
    v9 = (_QWORD *)(a2 + 8);
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
    v11 = *((_QWORD *)Section + 2);
    if (v10 > v11 && (v11 & 0x8000000000000000) == 0)
    {
      *(_QWORD *)(a2 + 24) = v11;
      v50 = 0;
      if ((sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)&v50, 8uLL) & 1) == 0)
        goto LABEL_48;
      __p = 0;
      if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x3FFu)
      {
        __sz = 0;
        if ((sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)&__sz, 8uLL) & 1) == 0)
          goto LABEL_47;
        v48 = 0;
        if ((sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)&v48, 8uLL) & 1) == 0)
          goto LABEL_47;
        if (!__sz || !v48)
        {
          v53 = "usd/crateFile.cpp";
          v54 = "_ReadTokens";
          v55 = 4008;
          v56 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_AssetStream>]";
          v57 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, tokens section is empty");
          goto LABEL_47;
        }
        v30 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
        v31 = *(_QWORD *)(a2 + 24);
        v32 = v30 - v31;
        v33 = v48;
        if (v31 < 0 || (v32 & 0x8000000000000000) != 0 || (unint64_t)v48 > v32)
        {
          v53 = "usd/crateFile.cpp";
          v54 = "_ReadTokens";
          v55 = 4014;
          v56 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_AssetStream>]";
          v57 = 0;
          v42 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens size %llu with remaining file size is %lld of %lld", v33, v32, v42);
          goto LABEL_47;
        }
        CompressedBufferSize = pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)__sz);
        v35 = v48;
        if (!CompressedBufferSize || CompressedBufferSize < (unint64_t)v48)
        {
          v53 = "usd/crateFile.cpp";
          v54 = "_ReadTokens";
          v55 = 4021;
          v56 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_AssetStream>]";
          v57 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens. Corrupt compression data. Compressed size %llu, uncompressed size %llu", v48, __sz);
          goto LABEL_47;
        }
        v36 = __sz;
        v16 = (char *)operator new[](__sz);
        __p = v16;
        v37 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[]((size_t)v35);
        sub_20C2B72E8(v9, (uint64_t)v37, (unint64_t)v35);
        pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(v37, v16, v48, __sz);
        v17 = &v16[v36];
        v18 = __sz;
        operator delete[](v37);
      }
      else
      {
        __sz = 0;
        if ((sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)&__sz, 8uLL) & 1) == 0)
          goto LABEL_47;
        v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
        v13 = *(_QWORD *)(a2 + 24);
        v14 = v12 - v13;
        v15 = __sz;
        if (v13 < 0 || (v14 & 0x8000000000000000) != 0 || __sz > v14)
        {
          v53 = "usd/crateFile.cpp";
          v54 = "_ReadTokens";
          v55 = 3992;
          v56 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_AssetStream>]";
          v57 = 0;
          v41 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens size %llu with remaining file size being %lld of %lld", v15, v14, v41);
          goto LABEL_47;
        }
        v16 = (char *)operator new[](__sz);
        __p = v16;
        sub_20C2B72E8(v9, (uint64_t)v16, v15);
        v17 = &v16[v15];
        v18 = __sz;
      }
      if (v16 != v17 && *(v17 - 1))
      {
        v53 = "usd/crateFile.cpp";
        v54 = "_ReadTokens";
        v55 = 4036;
        v56 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInternal"
              "__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
        v57 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 3, (pxrInternal__aapl__pxrReserved__ *)"Tokens section not null-terminated in crate file");
        *(v17 - 1) = 0;
      }
      v19 = v50;
      if (v50 - 1 >= v18)
      {
        v53 = "usd/crateFile.cpp";
        v54 = "_ReadTokens";
        v55 = 4046;
        v56 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInternal"
              "__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
        v57 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read tokens. Corrupt data. Data size %llu, num tokens %llu", v18, v50);
        __p = 0;
      }
      else
      {
        v20 = *(_QWORD *)(a1 + 120);
        v21 = *(_QWORD *)(a1 + 128);
        v22 = a1 + 120;
        if (v21 != v20)
        {
          do
          {
            v24 = *(_QWORD *)(v21 - 8);
            v21 -= 8;
            v23 = v24;
            if ((v24 & 7) != 0)
            {
              v25 = (unsigned int *)(v23 & 0xFFFFFFFFFFFFFFF8);
              do
                v26 = __ldxr(v25);
              while (__stlxr(v26 - 2, v25));
            }
          }
          while (v21 != v20);
          v19 = v50;
        }
        *(_QWORD *)(a1 + 128) = v20;
        sub_20C0E5D00(a1 + 120, v19);
        v16[v18 - 1] = 0;
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v53);
        v27 = 0;
        if (v16 < v17 && v50)
        {
          v27 = 0;
          v28 = __p;
          while (v16 - v28 < v18)
          {
            __sz = 0;
            v44 = v58;
            v29 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)&__sz, 0x28uLL);
            *((_BYTE *)v29 - 11) = 1;
            *v29 = &unk_24C52F240;
            v29[1] = v22;
            v29[2] = v27;
            v29[3] = v16;
            v29[4] = v59;
            (**(void (***)(_QWORD, _QWORD *, uint64_t))*(v29 - 5))(*(v29 - 5), v29, (uint64_t)(v29 - 1));
            v16 += strlen(v16) + 1;
            ++v27;
            if (v16 >= v17 || v27 == v50)
              goto LABEL_30;
          }
          __sz = (size_t)"usd/crateFile.cpp";
          v44 = "_ReadTokens";
          v45 = 4079;
          v46 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrIntern"
                "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                "le::_AssetStream>]";
          v47 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed read tokens, buffer overflow.");
        }
        else
        {
LABEL_30:
          pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v53);
          if (v27 != v50)
          {
            __sz = (size_t)"usd/crateFile.cpp";
            v44 = "_ReadTokens";
            v45 = 4089;
            v46 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInte"
                  "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Cra"
                  "teFile::_AssetStream>]";
            v47 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__sz, 3, (pxrInternal__aapl__pxrReserved__ *)"Crate file claims %zu tokens, found %zu", v50, v27);
          }
          sub_20C2B9F90((pxrInternal__aapl__pxrReserved__ *)&__p);
        }
        pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&v53);
        v16 = (char *)__p;
        __p = 0;
        if (!v16)
          goto LABEL_47;
      }
      operator delete[](v16);
LABEL_47:
      v7 = v52;
      goto LABEL_48;
    }
    v53 = "usd/crateFile.cpp";
    v54 = "_ReadTokens";
    v55 = 3966;
    v56 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadTokens(Reader) [Reader = pxrInternal__aa"
          "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
    v57 = 0;
    v40 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v53, 3, (pxrInternal__aapl__pxrReserved__ *)"Usd crate file corrupt, tokens section is possibly truncatedat offset %lld but file size is %lld", v11, v40);
  }
LABEL_48:
  v52 = v7 - 1;
  if (v7)
  {
    v38 = (uint64_t)v51;
    v39 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v38);
      v52 = v39--;
    }
    while (v39 != -2);
  }
}

void sub_20C2C3DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, char a20,uint64_t a21,char a22)
{
  if (__p)
    operator delete[](__p);
  sub_20BEB24F4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C3EA0(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  _QWORD *v6;
  _BOOL4 v7;
  uint64_t result;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadStrings", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  result = (uint64_t)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "STRINGS");
  if (result)
  {
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(result + 16);
    result = sub_20C2C5B84(a2, (void **)(a1 + 144));
  }
  if (v7)
    return pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
  return result;
}

void sub_20C2C3F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C2C3F64(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v6;
  _BOOL4 v7;
  const char *Section;
  _QWORD *v9;
  uint64_t CompressedBufferSize;
  unint64_t DecompressionWorkingSpaceSize;
  _QWORD *v12;
  int v13;
  void *v14;
  void *v15;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v16;
  int *v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  size_t v22;
  size_t v23;
  pxrInternal__aapl__pxrReserved__::TfFastCompression *v24;
  _QWORD *v25;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v26;
  _QWORD *v27;
  uint64_t v28;
  size_t __sz;
  void *v30;
  _BYTE *v31;
  void *v32[2];
  void *__p[2];
  char v34;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v35[2];
  unsigned int v36;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadFields", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v35[1] = v6;
  v36 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "FIELDS");
  if (!Section)
    goto LABEL_32;
  *(_QWORD *)(a2 + 24) = *((_QWORD *)Section + 2);
  if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) <= 0x3FFu)
  {
    sub_20C2C5D40(a2, (void **)(a1 + 48));
    goto LABEL_32;
  }
  v35[0] = 0;
  v9 = (_QWORD *)(a2 + 8);
  if ((sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)v35, 8uLL) & 1) != 0)
  {
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v35[0]);
    DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(v35[0]);
    if (CompressedBufferSize && DecompressionWorkingSpaceSize)
    {
      v12 = (_QWORD *)(a1 + 48);
      sub_20C2BA560((uint64_t)v12, (unint64_t)v35[0]);
      sub_20BDE36C4(&v30, (unint64_t)v35[0]);
      *(_OWORD *)v32 = 0u;
      *(_OWORD *)__p = 0u;
      v13 = sub_20C2C5E8C((uint64_t)v32, a2, (unint64_t)v30, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((v31 - (_BYTE *)v30) >> 2));
      v14 = __p[0];
      __p[0] = 0;
      if (v14)
        operator delete[](v14);
      v15 = v32[0];
      v32[0] = 0;
      if (v15)
        operator delete[](v15);
      if (!v13)
        goto LABEL_30;
      v16 = v35[0];
      if (v35[0])
      {
        v17 = (int *)v30;
        v18 = (_DWORD *)(*v12 + 4);
        do
        {
          v19 = *v17++;
          *v18 = v19;
          v18 += 4;
          v16 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v16 - 1);
        }
        while (v16);
      }
      __sz = 0;
      if ((sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)&__sz, 8uLL) & 1) == 0)
        goto LABEL_30;
      v20 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
      v21 = *(_QWORD *)(a2 + 24);
      v22 = v20 - v21;
      v23 = __sz;
      if (v21 < 0 || (v22 & 0x8000000000000000) != 0 || __sz > v22)
      {
        v32[0] = "usd/crateFile.cpp";
        v32[1] = "_ReadFields";
        __p[0] = (void *)3739;
        __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFields(Reader) [Reader = pxrInter"
                 "nal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Crate"
                 "File::_AssetStream>]";
        v34 = 0;
        v28 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v9 + 16))(*v9);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v32, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", v23, v22, v28);
LABEL_30:
        if (v30)
        {
          v31 = v30;
          operator delete(v30);
        }
        goto LABEL_32;
      }
      v24 = (pxrInternal__aapl__pxrReserved__::TfFastCompression *)operator new[](__sz);
      if ((sub_20C2B72E8(v9, (uint64_t)v24, v23) & 1) != 0)
      {
        v32[0] = 0;
        v32[1] = 0;
        __p[0] = 0;
        sub_20BDFC880((uint64_t)v32, (unint64_t)v35[0]);
        pxrInternal__aapl__pxrReserved__::TfFastCompression::DecompressFromBuffer(v24, (char *)v32[0], (char *)__sz, (char *)v32[1] - (char *)v32[0]);
        v25 = v32[0];
        if (v35[0])
        {
          v26 = 0;
          v27 = (_QWORD *)(*v12 + 8);
          do
          {
            *v27 = v25[(_QWORD)v26];
            v27 += 2;
            v26 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v26 + 1);
          }
          while (v26 != v35[0]);
          goto LABEL_28;
        }
        if (v32[0])
        {
LABEL_28:
          v32[1] = v25;
          operator delete(v25);
        }
      }
      operator delete[](v24);
      goto LABEL_30;
    }
    if (v35[0])
    {
      v32[0] = "usd/crateFile.cpp";
      v32[1] = "_ReadFields";
      __p[0] = (void *)3720;
      __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFields(Reader) [Reader = pxrInterna"
               "l__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
               "::_AssetStream>]";
      v34 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v32, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed read compressed fields of size %llu.", v35[0]);
    }
  }
LABEL_32:
  v36 = v7 - 1;
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
    v36 = v7 | 0xFFFFFFFE;
  }
}

void sub_20C2C4294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  uint64_t v18;

  sub_20BEB24F4(v18 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2C431C(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v6;
  _BOOL4 v7;
  const char *Section;
  uint64_t v9;
  uint64_t CompressedBufferSize;
  unint64_t DecompressionWorkingSpaceSize;
  char v12;
  void *v13;
  void *v14;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v15;
  _DWORD *v16;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v17;
  uint64_t v18;
  void *v19[3];
  void *v20[2];
  void *__p[2];
  char v22;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v23[2];
  int v24;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadFieldSets", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v23[1] = v6;
  v24 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "FIELDSETS");
  if (!Section)
    goto LABEL_27;
  *(_QWORD *)(a2 + 24) = *((_QWORD *)Section + 2);
  if (((*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8)) > 0x3FFu)
  {
    v23[0] = 0;
    if ((sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)v23, 8uLL) & 1) == 0)
      goto LABEL_27;
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v23[0]);
    DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(v23[0]);
    if (!CompressedBufferSize || !DecompressionWorkingSpaceSize)
    {
      v20[0] = "usd/crateFile.cpp";
      v20[1] = "_ReadFieldSets";
      __p[0] = (void *)3679;
      __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFieldSets(Reader) [Reader = pxrInte"
               "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
               "ile::_AssetStream>]";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed fieldSets of size %llu", v23[0]);
      goto LABEL_27;
    }
    sub_20C2BAAF8(a1 + 72, (unint64_t)v23[0]);
    sub_20BDE36C4(v19, (unint64_t)v23[0]);
    *(_OWORD *)v20 = 0u;
    *(_OWORD *)__p = 0u;
    v12 = sub_20C2C5E8C((uint64_t)v20, a2, (unint64_t)v19[0], v23[0]);
    v13 = __p[0];
    __p[0] = 0;
    if (v13)
      operator delete[](v13);
    v14 = v20[0];
    v20[0] = 0;
    if (v14)
      operator delete[](v14);
    if ((v12 & 1) != 0)
    {
      v15 = v23[0];
      v16 = v19[0];
      if (v23[0])
      {
        v17 = 0;
        v18 = *(_QWORD *)(a1 + 72);
        do
        {
          *(_DWORD *)(v18 + 4 * (_QWORD)v17) = v16[(_QWORD)v17];
          v17 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v17 + 1);
        }
        while (v15 != v17);
LABEL_25:
        v19[1] = v16;
        operator delete(v16);
LABEL_26:
        if ((v12 & 1) == 0)
          goto LABEL_27;
        goto LABEL_7;
      }
    }
    else
    {
      v16 = v19[0];
    }
    if (!v16)
      goto LABEL_26;
    goto LABEL_25;
  }
  if ((sub_20C2C5FF8(a2, (void **)(a1 + 72)) & 1) == 0)
    goto LABEL_27;
LABEL_7:
  v9 = *(_QWORD *)(a1 + 80);
  if (*(_QWORD *)(a1 + 72) != v9 && *(_DWORD *)(v9 - 4) != -1)
  {
    v20[0] = "usd/crateFile.cpp";
    v20[1] = "_ReadFieldSets";
    __p[0] = (void *)3693;
    __p[1] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadFieldSets(Reader) [Reader = pxrIntern"
             "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
    v22 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v20, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt field sets in crate file");
    *(_DWORD *)(*(_QWORD *)(a1 + 80) - 4) = -1;
  }
LABEL_27:
  v24 = v7 - 1;
  if (v7)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v6);
}

void sub_20C2C4584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_20C2BAA20((uint64_t)&a13);
  if (__p)
    operator delete(__p);
  sub_20BEB24F4(v13 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2C45D4(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  _QWORD *v6;
  _BOOL4 v7;
  const char *Section;
  unsigned int v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  _QWORD v40[4];
  char v41;
  uint64_t v42;
  __int128 v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  int v48;
  _BYTE v49[336];
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadPaths", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v47 = v6;
  v48 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "PATHS");
  if (Section)
  {
    *(_QWORD *)(a2 + 24) = *((_QWORD *)Section + 2);
    v46 = 0;
    if ((sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)&v46, 8uLL) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v49);
      v9 = (*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8) | *(unsigned __int8 *)(a1 + 6370);
      if (v9 == 1)
      {
        sub_20C13A924((uint64_t *)(a1 + 96), v46);
        v10 = *(int **)(a1 + 96);
        v11 = *(_QWORD *)(a1 + 104);
        v40[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v40);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v40 + 1);
        if (v11 - (uint64_t)v10 >= 1)
        {
          v12 = ((unint64_t)(v11 - (_QWORD)v10) >> 3) + 1;
          do
          {
            sub_20C01A074(v10, v40);
            sub_20C01A0C8(v10 + 1, (_DWORD *)v40 + 1);
            --v12;
            v10 += 2;
          }
          while (v12 > 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v40 + 1);
        sub_20BFD265C(v40);
        v43 = *(_OWORD *)a2;
        v13 = *(std::__shared_weak_count **)(a2 + 16);
        v44 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(p_shared_owners);
          while (__stxr(v15 + 1, p_shared_owners));
        }
        v45 = *(_QWORD *)(a2 + 24);
        v42 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v42);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v42 + 1);
        sub_20C2C6144((char *)a1, &v43, (uint64_t)v49, (int *)&v42);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
        sub_20BFD265C(&v42);
        v16 = v44;
        if (!v44)
          goto LABEL_37;
        v17 = (unint64_t *)&v44->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
      }
      else if (v9 > 0x3FF)
      {
        v33 = *(_OWORD *)a2;
        v27 = *(std::__shared_weak_count **)(a2 + 16);
        v34 = v27;
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldxr(v28);
          while (__stxr(v29 + 1, v28));
        }
        v35 = *(_QWORD *)(a2 + 24);
        sub_20C2C67BC((_QWORD *)a1, (uint64_t)&v33, (pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v49, v46);
        v16 = v34;
        if (!v34)
          goto LABEL_37;
        v30 = (unint64_t *)&v34->__shared_owners_;
        do
          v18 = __ldaxr(v30);
        while (__stlxr(v18 - 1, v30));
      }
      else
      {
        v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
        if (v46 > v19 - *(_QWORD *)(a2 + 24))
        {
          v40[0] = "usd/crateFile.cpp";
          v40[1] = "_ReadPaths";
          v40[2] = 4126;
          v40[3] = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPaths(Reader) [Reader = pxrInte"
                   "rnal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Cr"
                   "ateFile::_AssetStream>]";
          v41 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid number of paths in file.");
LABEL_37:
          pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)v49);
          v7 = v48;
          goto LABEL_38;
        }
        sub_20C13A924((uint64_t *)(a1 + 96), v46);
        v20 = *(int **)(a1 + 96);
        v21 = *(_QWORD *)(a1 + 104);
        v40[0] = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(v40);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)v40 + 1);
        if (v21 - (uint64_t)v20 >= 1)
        {
          v22 = ((unint64_t)(v21 - (_QWORD)v20) >> 3) + 1;
          do
          {
            sub_20C01A074(v20, v40);
            sub_20C01A0C8(v20 + 1, (_DWORD *)v40 + 1);
            --v22;
            v20 += 2;
          }
          while (v22 > 1);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v40 + 1);
        sub_20BFD265C(v40);
        v37 = *(_OWORD *)a2;
        v23 = *(std::__shared_weak_count **)(a2 + 16);
        v38 = v23;
        if (v23)
        {
          v24 = (unint64_t *)&v23->__shared_owners_;
          do
            v25 = __ldxr(v24);
          while (__stxr(v25 + 1, v24));
        }
        v39 = *(_QWORD *)(a2 + 24);
        v36 = 0;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v36);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v36 + 1);
        sub_20C2C6480((char *)a1, &v37, (uint64_t)v49, (int *)&v36);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v36 + 1);
        sub_20BFD265C(&v36);
        v16 = v38;
        if (!v38)
          goto LABEL_37;
        v26 = (unint64_t *)&v38->__shared_owners_;
        do
          v18 = __ldaxr(v26);
        while (__stlxr(v18 - 1, v26));
      }
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
      goto LABEL_37;
    }
  }
LABEL_38:
  v48 = v7 - 1;
  if (v7)
  {
    v31 = (uint64_t)v47;
    v32 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v31);
      v48 = v32--;
    }
    while (v32 != -2);
  }
}

void sub_20C2C4A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,char a32)
{
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)&a32);
  sub_20BEB24F4((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_20C2C4ACC(uint64_t a1, uint64_t a2, char *a3)
{
  unsigned __int8 v5;
  _QWORD *v6;
  _BOOL4 v7;
  const char *Section;
  unsigned int v9;
  char *v10;
  const char *v11;
  _DWORD *v12;
  int v13;
  pxrInternal__aapl__pxrReserved__::SdfPath *v14;
  unsigned int *v15;
  char *v16;
  unsigned int *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  const char *v22;
  char *v23;
  unsigned int *v24;
  char v25;
  const char *v26;
  char *v27;
  char **v28;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v29;
  __int128 v30;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v31;
  __int128 v32;
  const char *v33;
  char *v34;
  char **v35;
  unsigned int v36;
  const char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void **v41;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  void **v47;
  void **v48;
  __int128 v49;
  __int128 *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void **v54;
  void **v55;
  __int128 v56;
  __int128 *v57;
  char *v58;
  void **v59;
  __int128 v60;
  __int128 *v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  _QWORD *v66;
  size_t CompressedBufferSize;
  unint64_t DecompressionWorkingSpaceSize;
  size_t v69;
  uint64_t v70;
  uint64_t v71;
  std::string::size_type v72;
  unint64_t v73;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v74;
  char *v75;
  char *v76;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v77;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **v78;
  _DWORD *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v86;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **v87;
  _DWORD *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  char *v94;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v95;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  void **v103;
  const char *v104;
  std::string *v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BOOL4 v113;
  char *v114[2];
  char v115;
  char *v116[2];
  char v117;
  std::string v118;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v119;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v120;
  unint64_t v121;
  void *__p;
  const char *v123;
  uint64_t v124;
  const char *v125;
  char v126;
  _QWORD *v127;
  int v128;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **v129;
  const char *v130;
  uint64_t v131;
  const char *v132;
  unint64_t *v133;

  v5 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v5 & 1) != 0)
  {
    v6 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("_ReadSpecs", 0, a3);
    v7 = v6 != 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
  }
  v127 = v6;
  v128 = v7;
  Section = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_TableOfContents::GetSection((const char **)(a1 + 6336), "SPECS");
  if (Section)
  {
    *(_QWORD *)(a2 + 24) = *((_QWORD *)Section + 2);
    v9 = (*(unsigned __int8 *)(a1 + 6368) << 16) | (*(unsigned __int8 *)(a1 + 6369) << 8) | *(unsigned __int8 *)(a1 + 6370);
    if (v9 == 1)
    {
      __p = 0;
      v123 = 0;
      v124 = 0;
      if ((sub_20C2C7458(a2, &__p) & 1) == 0)
      {
        if (__p)
        {
          v123 = (const char *)__p;
          operator delete(__p);
        }
        goto LABEL_146;
      }
      sub_20C2BC024(a1, (v123 - (_BYTE *)__p) >> 4);
      v10 = (char *)__p;
      v11 = v123;
      if (__p != v123)
      {
        v12 = *(_DWORD **)a1;
        do
        {
          v13 = *((_DWORD *)v10 + 3);
          *(_QWORD *)v12 = *(_QWORD *)(v10 + 4);
          v12[2] = v13;
          v10 += 16;
          v12 += 3;
        }
        while (v10 != v11);
        v10 = (char *)__p;
      }
      if (v10)
      {
        v123 = v10;
        operator delete(v10);
      }
      goto LABEL_15;
    }
    if (v9 <= 0x3FF)
    {
      if ((sub_20C2C75A4(a2, (void **)a1) & 1) == 0)
        goto LABEL_146;
      goto LABEL_15;
    }
    v119 = 0;
    v66 = (_QWORD *)(a2 + 8);
    if ((sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)&v119, 8uLL) & 1) == 0)
      goto LABEL_146;
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v119);
    DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(v119);
    if (!CompressedBufferSize || (v69 = DecompressionWorkingSpaceSize) == 0)
    {
      __p = "usd/crateFile.cpp";
      v123 = "_ReadSpecs";
      v124 = 3784;
      v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__"
             "aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
      v126 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read specs of size %llu", v119);
      goto LABEL_146;
    }
    v118.__r_.__value_.__r.__words[0] = 0;
    if ((sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)&v118, 8uLL) & 1) == 0)
      goto LABEL_146;
    v70 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v66 + 16))(*v66);
    v71 = *(_QWORD *)(a2 + 24);
    v72 = v70 - v71;
    v73 = v118.__r_.__value_.__r.__words[0];
    if (v71 < 0 || (v72 & 0x8000000000000000) != 0 || v118.__r_.__value_.__r.__words[0] > v72)
    {
      __p = "usd/crateFile.cpp";
      v123 = "_ReadSpecs";
      v124 = 3795;
      v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__"
             "aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
      v126 = 0;
      v109 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v66 + 16))(*v66);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", v73, v72, v109);
      goto LABEL_146;
    }
    v74 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)operator new[](CompressedBufferSize);
    v75 = (char *)operator new[](v69);
    v129 = 0;
    v130 = 0;
    v131 = 0;
    if (v73 - 1 >= CompressedBufferSize)
    {
      __p = "usd/crateFile.cpp";
      v123 = "_ReadSpecs";
      v124 = 3817;
      v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__"
             "aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
      v126 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read pathIndexes, size > compressedBufferSize.");
    }
    else
    {
      sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)v74, v73);
      sub_20BE81ACC((uint64_t)&v129, (unint64_t)v119);
      pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(v74, v118.__r_.__value_.__l.__data_, (unint64_t)v129, (int64_t)v119, v75, v76);
      sub_20C2BC024(a1, (unint64_t)v119);
      v77 = v119;
      if (v119)
      {
        v78 = v129;
        v79 = *(_DWORD **)a1;
        do
        {
          v80 = *(_DWORD *)v78;
          v78 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)((char *)v78 + 4);
          *v79 = v80;
          v79 += 3;
          v77 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v77 - 1);
        }
        while (v77);
      }
      v116[0] = 0;
      if ((sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)v116, 8uLL) & 1) != 0)
      {
        v81 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v66 + 16))(*v66);
        v82 = *(_QWORD *)(a2 + 24);
        v83 = (char *)(v81 - v82);
        v84 = v116[0];
        if (v82 < 0 || ((unint64_t)v83 & 0x8000000000000000) != 0 || v116[0] > v83)
        {
          __p = "usd/crateFile.cpp";
          v123 = "_ReadSpecs";
          v124 = 3827;
          v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIntern"
                 "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
                 "ile::_AssetStream>]";
          v126 = 0;
          v110 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v66 + 16))(*v66);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fields of size %llu with remaining file size is %lld of %lld", v84, v83, v110);
        }
        else if (v116[0] - 1 >= (char *)CompressedBufferSize)
        {
          __p = "usd/crateFile.cpp";
          v123 = "_ReadSpecs";
          v124 = 3841;
          v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIntern"
                 "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
                 "ile::_AssetStream>]";
          v126 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read fsetIndexes, size > compressedBufferSize.");
        }
        else
        {
          sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)v74, (unint64_t)v116[0]);
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(v74, v116[0], (unint64_t)v129, (int64_t)v119, v75, v85);
          v86 = v119;
          if (v119)
          {
            v87 = v129;
            v88 = (_DWORD *)(*(_QWORD *)a1 + 4);
            do
            {
              v89 = *(_DWORD *)v87;
              v87 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)((char *)v87 + 4);
              *v88 = v89;
              v88 += 3;
              v86 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v86 - 1);
            }
            while (v86);
          }
          v114[0] = 0;
          if ((sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)v114, 8uLL) & 1) != 0)
          {
            v90 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v66 + 16))(*v66);
            v91 = *(_QWORD *)(a2 + 24);
            v92 = (char *)(v90 - v91);
            v93 = v114[0];
            if (v91 < 0 || ((unint64_t)v92 & 0x8000000000000000) != 0 || v114[0] > v92)
            {
              __p = "usd/crateFile.cpp";
              v123 = "_ReadSpecs";
              v124 = 3852;
              v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIn"
                     "ternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Us"
                     "d_CrateFile::_AssetStream>]";
              v126 = 0;
              v111 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v66 + 16))(*v66);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read spec types of size %llu with remaining file size is %lld of %lld", v93, v92, v111);
            }
            else
            {
              if (v114[0] - 1 < (char *)CompressedBufferSize)
              {
                sub_20C2B72E8(v66, (uint64_t)v74, (unint64_t)v114[0]);
                pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(v74, v114[0], (unint64_t)v129, (int64_t)v119, v75, v94);
                v95 = v119;
                if (v119)
                {
                  v96 = 0;
                  v97 = 8;
                  do
                  {
                    v98 = *((unsigned int *)v129 + (_QWORD)v96);
                    if (v98 >= 0xC)
                    {
                      __p = "usd/crateFile.cpp";
                      v123 = "_ReadSpecs";
                      v124 = 3864;
                      v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader"
                             " = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__p"
                             "xrReserved__::Usd_CrateFile::_AssetStream>]";
                      v126 = 0;
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid spec type %zu", v98);
                      *(_DWORD *)(*(_QWORD *)a1 + v97) = 0;
                      v95 = v119;
                    }
                    else
                    {
                      *(_DWORD *)(*(_QWORD *)a1 + v97) = v98;
                    }
                    v96 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v96 + 1);
                    v97 += 12;
                  }
                  while (v96 != v95);
                }
                v108 = 0;
LABEL_153:
                if (v129)
                {
                  v130 = (const char *)v129;
                  operator delete(v129);
                }
                operator delete[](v75);
                operator delete[](v74);
                if (v108)
                  goto LABEL_146;
                goto LABEL_15;
              }
              __p = "usd/crateFile.cpp";
              v123 = "_ReadSpecs";
              v124 = 3871;
              v125 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrIn"
                     "ternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Us"
                     "d_CrateFile::_AssetStream>]";
              v126 = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read spectypes, size > compressedBufferSize.");
            }
          }
        }
      }
    }
    v108 = 1;
    goto LABEL_153;
  }
LABEL_15:
  v113 = v7;
  v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2BC654((uint64_t)&__p, 0, 0.0, 0.5);
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v16 = *(char **)a1;
  v15 = *(unsigned int **)(a1 + 8);
  if (*(unsigned int **)a1 == v15)
    goto LABEL_145;
  v112 = a1 + 6368;
  v17 = (unsigned int *)(v16 + 8);
  v18 = *(char **)a1;
  do
  {
    v19 = *(v17 - 2);
    v20 = *(_QWORD *)(a1 + 96);
    if (v19 >= (*(_QWORD *)(a1 + 104) - v20) >> 3)
      v21 = pxrInternal__aapl__pxrReserved__::SdfPath::EmptyPath(v14);
    else
      v21 = (uint64_t *)(v20 + 8 * v19);
    if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v21))
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec at index %zu has empty path", v22, v23, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v16[-*(_QWORD *)a1] >> 2));
      v31 = v120;
      if ((unint64_t)v120 >= v121)
      {
        v38 = 0xAAAAAAAAAAAAAAABLL * ((v120 - v119) >> 3);
        v39 = v38 + 1;
        if (v38 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_20BDDF694();
        if (0x5555555555555556 * ((uint64_t)(v121 - (_QWORD)v119) >> 3) > v39)
          v39 = 0x5555555555555556 * ((uint64_t)(v121 - (_QWORD)v119) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v121 - (_QWORD)v119) >> 3) >= 0x555555555555555)
          v40 = 0xAAAAAAAAAAAAAAALL;
        else
          v40 = v39;
        v133 = &v121;
        if (v40)
          v41 = (void **)sub_20BDE4FF4((uint64_t)&v121, v40);
        else
          v41 = 0;
        v48 = &v41[3 * v38];
        v129 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)v41;
        v130 = (const char *)v48;
        v132 = (const char *)&v41[3 * v40];
        v49 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
        v48[2] = (void *)v118.__r_.__value_.__r.__words[2];
        *(_OWORD *)v48 = v49;
        memset(&v118, 0, sizeof(v118));
        v131 = (uint64_t)(v48 + 3);
        sub_20BDF34C0((uint64_t *)&v119, &v129);
        v50 = (__int128 *)v120;
        v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDF3648((uint64_t)&v129);
        v120 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v50;
        if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v118.__r_.__value_.__l.__data_);
      }
      else
      {
        v32 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
        *((_QWORD *)v120 + 2) = *((_QWORD *)&v118.__r_.__value_.__l + 2);
        *(_OWORD *)v31 = v32;
        v120 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v31 + 24);
      }
      v24 = v17;
      goto LABEL_81;
    }
    v24 = (unsigned int *)(v18 + 8);
    if (*v17 && (int)*v17 < 12)
    {
      v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2BC978((uint64_t *)&__p, (unsigned int *)v21, v21);
      if ((v25 & 1) != 0)
        goto LABEL_82;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v21, (uint64_t)v116);
      v28 = v116;
      if (v117 < 0)
        v28 = (char **)v116[0];
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec <%s> repeated", v26, v27, v28);
      v29 = v120;
      if ((unint64_t)v120 < v121)
      {
        v30 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
        *((_QWORD *)v120 + 2) = *((_QWORD *)&v118.__r_.__value_.__l + 2);
        *(_OWORD *)v29 = v30;
        memset(&v118, 0, sizeof(v118));
        v120 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v29 + 24);
        goto LABEL_79;
      }
      v51 = 0xAAAAAAAAAAAAAAABLL * ((v120 - v119) >> 3);
      v52 = v51 + 1;
      if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      if (0x5555555555555556 * ((uint64_t)(v121 - (_QWORD)v119) >> 3) > v52)
        v52 = 0x5555555555555556 * ((uint64_t)(v121 - (_QWORD)v119) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v121 - (_QWORD)v119) >> 3) >= 0x555555555555555)
        v53 = 0xAAAAAAAAAAAAAAALL;
      else
        v53 = v52;
      v133 = &v121;
      if (v53)
        v54 = (void **)sub_20BDE4FF4((uint64_t)&v121, v53);
      else
        v54 = 0;
      v59 = &v54[3 * v51];
      v129 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)v54;
      v130 = (const char *)v59;
      v132 = (const char *)&v54[3 * v53];
      v60 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
      v59[2] = (void *)v118.__r_.__value_.__r.__words[2];
      *(_OWORD *)v59 = v60;
      memset(&v118, 0, sizeof(v118));
      v131 = (uint64_t)(v59 + 3);
      sub_20BDF34C0((uint64_t *)&v119, &v129);
      v61 = (__int128 *)v120;
      v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDF3648((uint64_t)&v129);
      v120 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v61;
      if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_79;
      v58 = (char *)v118.__r_.__value_.__r.__words[0];
      goto LABEL_78;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)v21, (uint64_t)v116);
    if (v117 >= 0)
      v35 = v116;
    else
      v35 = (char **)v116[0];
    v36 = *v17;
    if (*v17)
    {
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"invalid spec type value %d", v33, v34, *v17);
      v37 = (const char *)v114;
      if (v115 < 0)
        v37 = v114[0];
    }
    else
    {
      v37 = "unknown spec type";
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"spec <%s> has %s", v33, v34, v35, v37);
    v42 = v120;
    if ((unint64_t)v120 >= v121)
    {
      v44 = 0xAAAAAAAAAAAAAAABLL * ((v120 - v119) >> 3);
      v45 = v44 + 1;
      if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_20BDDF694();
      if (0x5555555555555556 * ((uint64_t)(v121 - (_QWORD)v119) >> 3) > v45)
        v45 = 0x5555555555555556 * ((uint64_t)(v121 - (_QWORD)v119) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v121 - (_QWORD)v119) >> 3) >= 0x555555555555555)
        v46 = 0xAAAAAAAAAAAAAAALL;
      else
        v46 = v45;
      v133 = &v121;
      if (v46)
        v47 = (void **)sub_20BDE4FF4((uint64_t)&v121, v46);
      else
        v47 = 0;
      v55 = &v47[3 * v44];
      v129 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)v47;
      v130 = (const char *)v55;
      v132 = (const char *)&v47[3 * v46];
      v56 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
      v55[2] = (void *)v118.__r_.__value_.__r.__words[2];
      *(_OWORD *)v55 = v56;
      memset(&v118, 0, sizeof(v118));
      v131 = (uint64_t)(v55 + 3);
      sub_20BDF34C0((uint64_t *)&v119, &v129);
      v57 = (__int128 *)v120;
      v14 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDF3648((uint64_t)&v129);
      v120 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v57;
      if ((SHIBYTE(v118.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        if (!v36)
          goto LABEL_79;
LABEL_71:
        if ((v115 & 0x80000000) == 0)
          goto LABEL_79;
        v58 = v114[0];
LABEL_78:
        operator delete(v58);
        goto LABEL_79;
      }
      operator delete(v118.__r_.__value_.__l.__data_);
      if (v36)
        goto LABEL_71;
    }
    else
    {
      v43 = *(_OWORD *)&v118.__r_.__value_.__l.__data_;
      *((_QWORD *)v120 + 2) = *((_QWORD *)&v118.__r_.__value_.__l + 2);
      *(_OWORD *)v42 = v43;
      memset(&v118, 0, sizeof(v118));
      v120 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((char *)v42 + 24);
      if (v36)
        goto LABEL_71;
    }
LABEL_79:
    if (v117 < 0)
      operator delete(v116[0]);
LABEL_81:
    *v24 = 0;
LABEL_82:
    v18 += 12;
    v62 = v17 + 1;
    v17 += 3;
    v16 += 12;
  }
  while (v62 != v15);
  v7 = v113;
  if (v119 != v120)
  {
    v63 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)a1 != v63)
    {
      v64 = *(_QWORD *)a1 + 12;
      while (*(_DWORD *)(v64 - 4))
      {
        v65 = v64 == v63;
        v64 += 12;
        if (v65)
          goto LABEL_134;
      }
      v99 = v64 - 12;
      if (v64 - 12 != v63 && v64 != v63)
      {
        do
        {
          if (*(_DWORD *)(v64 + 8))
          {
            v100 = *(_QWORD *)v64;
            *(_DWORD *)(v99 + 8) = *(_DWORD *)(v64 + 8);
            *(_QWORD *)v99 = v100;
            v99 += 12;
          }
          v64 += 12;
        }
        while (v64 != v63);
        v63 = *(_QWORD *)(a1 + 8);
      }
      if (v99 != v63)
        *(_QWORD *)(a1 + 8) = v99;
    }
LABEL_134:
    v101 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v120 - v119) >> 3));
    if (v120 == v119)
      v102 = 0;
    else
      v102 = v101;
    sub_20C2BCF78((uint64_t)v119, (unint64_t)v120, (uint64_t)&v129, v102, 1);
    v103 = sub_20C104400((unsigned __int8 *)v119, (unsigned __int8 *)v120, (uint64_t)&v129);
    sub_20C0F9EEC((uint64_t)&v119, (uint64_t)v103, (__int128 *)v120);
    v129 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)"usd/crateFile.cpp";
    v130 = "_ReadSpecs";
    v131 = 3935;
    v132 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadSpecs(Reader) [Reader = pxrInternal__aa"
           "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
    LOBYTE(v133) = 0;
    v104 = (const char *)(a1 + 6512);
    if (*(char *)(v112 + 167) < 0)
      v104 = *(const char **)v104;
    pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (std::string **)&v119, &v118);
    if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v105 = &v118;
    else
      v105 = (std::string *)v118.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v129, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt asset @%s@ - ignoring invalid specs: %s.", v104, (const char *)v105);
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v118.__r_.__value_.__l.__data_);
    v7 = v128;
  }
LABEL_145:
  v129 = &v119;
  sub_20BDE5038((void ***)&v129);
  v129 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&v123;
  sub_20C2BC86C((void ***)&v129);
LABEL_146:
  v128 = v7 - 1;
  if (v7)
  {
    v106 = (uint64_t)v127;
    v107 = v7 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v106);
      v128 = v107--;
    }
    while (v107 != -2);
  }
}

void sub_20C2C57E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;
  void *v38;
  uint64_t v39;
  void *v41;

  v41 = *(void **)(v39 - 128);
  if (v41)
  {
    *(_QWORD *)(v39 - 120) = v41;
    operator delete(v41);
  }
  operator delete[](v38);
  operator delete[](v37);
  sub_20BEB24F4(v39 - 144);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C5990(uint64_t a1, void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;

  v19 = 0;
  v4 = (_QWORD *)(a1 + 8);
  if (!sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __p = "usd/crateFile.cpp";
    v15 = "_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Section]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20C2B9F1C(&__p, v19);
  v9 = sub_20C2B72E8(v4, (uint64_t)__p, 32 * v19);
  v10 = v9;
  if (&__p == a2)
    v11 = 0;
  else
    v11 = v9;
  if ((v11 & 1) != 0)
    sub_20C2B2718((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 5);
  if (__p)
  {
    v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_20C2C5AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2C5AE4(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2BA0A4(a1 + 8);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2C5B70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C5B84(uint64_t a1, void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;

  v19 = 0;
  v4 = (_QWORD *)(a1 + 8);
  if (!sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __p = "usd/crateFile.cpp";
    v15 = "_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::TokenIndex]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20C2BA4E8(&__p, v19);
  v9 = sub_20C2B72E8(v4, (uint64_t)__p, 4 * v19);
  v10 = v9;
  if (&__p == a2)
    v11 = 0;
  else
    v11 = v9;
  if ((v11 & 1) != 0)
    sub_20BE8B37C((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_20C2C5CB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C2C5CD0(uint64_t a1, unint64_t a2, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a3)
{
  void *v3;
  void *v4;
  void *v5[2];
  void *__p[2];

  *(_OWORD *)v5 = 0u;
  *(_OWORD *)__p = 0u;
  sub_20C2C5E8C((uint64_t)v5, a1, a2, a3);
  v3 = __p[0];
  __p[0] = 0;
  if (v3)
    operator delete[](v3);
  v4 = v5[0];
  v5[0] = 0;
  if (v4)
    operator delete[](v4);
}

void sub_20C2C5D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C2BAA20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C5D40(uint64_t a1, void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;

  v19 = 0;
  v4 = (_QWORD *)(a1 + 8);
  if (!sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __p = "usd/crateFile.cpp";
    v15 = "_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Field]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20C2BA734(&__p, v19);
  v9 = sub_20C2B72E8(v4, (uint64_t)__p, 16 * v19);
  v10 = v9;
  if (&__p == a2)
    v11 = 0;
  else
    v11 = v9;
  if ((v11 & 1) != 0)
    sub_20BEF5530((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 4);
  if (__p)
  {
    v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_20C2C5E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2C5E8C(uint64_t a1, uint64_t a2, unint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  char *v21;

  sub_20C2BAA60(a1, this);
  v21 = 0;
  v8 = (_QWORD *)(a2 + 8);
  result = sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)&v21, 8uLL);
  if ((_DWORD)result)
  {
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a1 + 8);
    v13 = v21;
    if (v12 < (unint64_t)v21)
      v13 = *(char **)(a1 + 8);
    if (v10 - v11 >= (unint64_t)v13)
      v14 = v13;
    else
      v14 = (char *)(v10 - v11);
    v21 = v14;
    if (v12 && *(_QWORD *)(a1 + 24))
    {
      if ((v11 & 0x8000000000000000) == 0)
      {
        result = sub_20C2B72E8(v8, *(_QWORD *)a1, (unint64_t)v14);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a1, v21, a3, (int64_t)this, *(char **)(a1 + 16), v15);
          return 1;
        }
        return result;
      }
      v16 = "usd/crateFile.cpp";
      v17 = "Read";
      v18 = 2158;
      v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = unsigned int]";
      v20 = 0;
      (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      v16 = "usd/crateFile.cpp";
      v17 = "Read";
      v18 = 2153;
      v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = unsigned int]";
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

uint64_t sub_20C2C5FF8(uint64_t a1, void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;

  v19 = 0;
  v4 = (_QWORD *)(a1 + 8);
  if (!sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __p = "usd/crateFile.cpp";
    v15 = "_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::FieldIndex]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20C2BAC5C(&__p, v19);
  v9 = sub_20C2B72E8(v4, (uint64_t)__p, 4 * v19);
  v10 = v9;
  if (&__p == a2)
    v11 = 0;
  else
    v11 = v9;
  if ((v11 & 1) != 0)
    sub_20BE8B37C((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_20C2C6128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C2C6144(char *a1, __int128 *a2, uint64_t a3, int *a4)
{
  _QWORD *v8;
  int *v9;
  _BOOL8 v10;
  uint64_t v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;
  _DWORD *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  char v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  _BYTE v40[4];
  uint64_t v41;
  char v42;
  _QWORD v43[2];

  v8 = (_QWORD *)a2 + 1;
  v9 = a4 + 1;
  v30 = a3 + 264;
  do
  {
    v41 = -1;
    if (!sub_20C2B72E8(v8, (uint64_t)v40, 0x10uLL))
      break;
    v10 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (v10)
    {
      v11 = *((_QWORD *)a1 + 15);
      if (HIDWORD(v41) >= (unint64_t)((*((_QWORD *)a1 + 16) - v11) >> 3)
        || v41 >= (unint64_t)((uint64_t)(*((_QWORD *)a1 + 13) - *((_QWORD *)a1 + 12)) >> 3))
      {
        v31 = "usd/crateFile.cpp";
        *(_QWORD *)&v32 = "_ReadPathsImpl";
        v29 = 4159;
LABEL_30:
        *((_QWORD *)&v32 + 1) = v29;
        v33 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPathsImpl(Reader, WorkDispatcher &, "
              "SdfPath) [Header = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PathItemHeader_0_0_1, Reader = pxrInt"
              "ernal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateF"
              "ile::_AssetStream>]";
        LOBYTE(v34) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid paths header causing OOB access.");
        return;
      }
      v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 8 * HIDWORD(v41));
      if ((v42 & 4) != 0)
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v12, (int *)&v31);
      else
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v12, (int *)&v31);
      v16 = (int *)(*((_QWORD *)a1 + 12) + 8 * v41);
      sub_20BFD3EBC(v16, (int *)&v31);
      sub_20BFD3F10(v16 + 1, (int *)&v31 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
      sub_20BFD265C(&v31);
    }
    else
    {
      v13 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v10);
      sub_20C01A074(a4, v13);
      sub_20C01A0C8(v9, v13 + 1);
      v14 = *((_QWORD *)a1 + 12);
      if (v41 >= (unint64_t)((*((_QWORD *)a1 + 13) - v14) >> 3))
      {
        v31 = "usd/crateFile.cpp";
        *(_QWORD *)&v32 = "_ReadPathsImpl";
        v29 = 4152;
        goto LABEL_30;
      }
      v15 = (int *)(v14 + 8 * v41);
      sub_20C01A074(v15, a4);
      sub_20C01A0C8(v15 + 1, v9);
    }
    v17 = v42;
    if ((v42 & 1) != 0)
    {
      if ((v42 & 2) != 0)
      {
        v39 = 0;
        if (!sub_20C2B72E8(v8, (uint64_t)&v39, 8uLL))
          return;
        v31 = a1;
        v32 = *a2;
        v18 = *((_QWORD *)a2 + 2);
        v33 = (const char *)v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v34 = *((_QWORD *)a2 + 3);
        v35 = v39;
        v36 = a3;
        sub_20BFD6E54(&v37, a4);
        sub_20BFD6EA4(&v38, v9);
        v21 = *(_QWORD *)(a3 + 256);
        v43[0] = 0;
        v43[1] = v21;
        v22 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v43, 0x50uLL);
        v23 = sub_20C2C6C80(v22, (uint64_t)&v31, v30);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v23 - 40))(*(_QWORD *)(v23 - 40), v22, v22 - 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
        sub_20BFD265C(&v37);
        v24 = (std::__shared_weak_count *)v33;
        if (v33)
        {
          v25 = (unint64_t *)(v33 + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      v27 = *((_QWORD *)a1 + 12);
      if (v41 >= (unint64_t)((*((_QWORD *)a1 + 13) - v27) >> 3))
      {
        v31 = "usd/crateFile.cpp";
        *(_QWORD *)&v32 = "_ReadPathsImpl";
        v29 = 4195;
        goto LABEL_30;
      }
      v28 = (_DWORD *)(v27 + 8 * v41);
      sub_20C01A074(a4, v28);
      sub_20C01A0C8(v9, v28 + 1);
    }
  }
  while ((v17 & 3) != 0);
}

void sub_20C2C6464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C2C6C44((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C2C6480(char *a1, __int128 *a2, uint64_t a3, int *a4)
{
  _QWORD *v8;
  int *v9;
  _BOOL8 v10;
  uint64_t v11;
  const pxrInternal__aapl__pxrReserved__::TfToken *v12;
  _DWORD *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  char v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  _QWORD v42[2];

  v8 = (_QWORD *)a2 + 1;
  v9 = a4 + 1;
  v30 = a3 + 264;
  do
  {
    v40 = -1;
    if (!sub_20C2B72E8(v8, (uint64_t)&v40, 0xCuLL))
      break;
    v10 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4);
    if (v10)
    {
      v11 = *((_QWORD *)a1 + 15);
      if (HIDWORD(v40) >= (unint64_t)((*((_QWORD *)a1 + 16) - v11) >> 3)
        || v40 >= (unint64_t)((uint64_t)(*((_QWORD *)a1 + 13) - *((_QWORD *)a1 + 12)) >> 3))
      {
        v31 = "usd/crateFile.cpp";
        *(_QWORD *)&v32 = "_ReadPathsImpl";
        v29 = 4159;
LABEL_30:
        *((_QWORD *)&v32 + 1) = v29;
        v33 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadPathsImpl(Reader, WorkDispatcher &, "
              "SdfPath) [Header = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PathItemHeader, Reader = pxrInternal_"
              "_aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
        LOBYTE(v34) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v31, 3, (pxrInternal__aapl__pxrReserved__ *)"Invalid paths header causing OOB access.");
        return;
      }
      v12 = (const pxrInternal__aapl__pxrReserved__::TfToken *)(v11 + 8 * HIDWORD(v40));
      if ((v41 & 4) != 0)
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v12, (int *)&v31);
      else
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendElementToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, v12, (int *)&v31);
      v16 = (int *)(*((_QWORD *)a1 + 12) + 8 * v40);
      sub_20BFD3EBC(v16, (int *)&v31);
      sub_20BFD3F10(v16 + 1, (int *)&v31 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
      sub_20BFD265C(&v31);
    }
    else
    {
      v13 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v10);
      sub_20C01A074(a4, v13);
      sub_20C01A0C8(v9, v13 + 1);
      v14 = *((_QWORD *)a1 + 12);
      if (v40 >= (unint64_t)((*((_QWORD *)a1 + 13) - v14) >> 3))
      {
        v31 = "usd/crateFile.cpp";
        *(_QWORD *)&v32 = "_ReadPathsImpl";
        v29 = 4152;
        goto LABEL_30;
      }
      v15 = (int *)(v14 + 8 * v40);
      sub_20C01A074(v15, a4);
      sub_20C01A0C8(v15 + 1, v9);
    }
    v17 = v41;
    if ((v41 & 1) != 0)
    {
      if ((v41 & 2) != 0)
      {
        v39 = 0;
        if (!sub_20C2B72E8(v8, (uint64_t)&v39, 8uLL))
          return;
        v31 = a1;
        v32 = *a2;
        v18 = *((_QWORD *)a2 + 2);
        v33 = (const char *)v18;
        if (v18)
        {
          v19 = (unint64_t *)(v18 + 8);
          do
            v20 = __ldxr(v19);
          while (__stxr(v20 + 1, v19));
        }
        v34 = *((_QWORD *)a2 + 3);
        v35 = v39;
        v36 = a3;
        sub_20BFD6E54(&v37, a4);
        sub_20BFD6EA4(&v38, v9);
        v21 = *(_QWORD *)(a3 + 256);
        v42[0] = 0;
        v42[1] = v21;
        v22 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v42, 0x50uLL);
        v23 = sub_20C2C6FD4(v22, (uint64_t)&v31, v30);
        (***(void (****)(_QWORD, unint64_t, uint64_t))(v23 - 40))(*(_QWORD *)(v23 - 40), v22, v22 - 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v38);
        sub_20BFD265C(&v37);
        v24 = (std::__shared_weak_count *)v33;
        if (v33)
        {
          v25 = (unint64_t *)(v33 + 8);
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
      }
      v27 = *((_QWORD *)a1 + 12);
      if (v40 >= (unint64_t)((*((_QWORD *)a1 + 13) - v27) >> 3))
      {
        v31 = "usd/crateFile.cpp";
        *(_QWORD *)&v32 = "_ReadPathsImpl";
        v29 = 4195;
        goto LABEL_30;
      }
      v28 = (_DWORD *)(v27 + 8 * v40);
      sub_20C01A074(a4, v28);
      sub_20C01A0C8(v9, v28 + 1);
    }
  }
  while ((v17 & 3) != 0);
}

void sub_20C2C67A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20C2C6F98((int *)va);
  _Unwind_Resume(a1);
}

void sub_20C2C67BC(_QWORD *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::WorkDispatcher *a3, unint64_t a4)
{
  uint64_t CompressedBufferSize;
  unint64_t DecompressionWorkingSpaceSize;
  unsigned int *v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;
  void *v27[2];
  void *__p[2];
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v29 = 0;
  if ((sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)&v29, 8uLL) & 1) != 0)
  {
    *(_OWORD *)v27 = 0u;
    *(_OWORD *)__p = 0u;
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v29);
    DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(v29);
    if (CompressedBufferSize && DecompressionWorkingSpaceSize)
    {
      sub_20BE81ACC((uint64_t)&v36, (unint64_t)v29);
      if (sub_20C2C5E8C((uint64_t)v27, a2, (unint64_t)v36, v29))
      {
        v10 = v36;
        if (v36 == v37)
        {
          v11 = 0;
LABEL_13:
          if (v11 + 1 < a4)
          {
            v22 = "usd/crateFile.cpp";
            v23 = "_ReadCompressedPaths";
            v24 = 4253;
            v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDisp"
                  "atcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrI"
                  "nternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
            v26 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths. numPaths = %llu too large for max index = %llu", a4, v11);
          }
          else if ((unint64_t)v29 > a4)
          {
            v22 = "usd/crateFile.cpp";
            v23 = "_ReadCompressedPaths";
            v24 = 4259;
            v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDisp"
                  "atcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrI"
                  "nternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
            v26 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths. numEncodedPaths %llu > numPaths = %llu", v29, a4);
          }
          else
          {
            sub_20C13A924(a1 + 12, a4);
            v13 = (int *)a1[12];
            v14 = a1[13];
            v22 = 0;
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v22);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v22 + 1);
            if (v14 - (uint64_t)v13 >= 1)
            {
              v15 = ((unint64_t)(v14 - (_QWORD)v13) >> 3) + 1;
              do
              {
                sub_20C01A074(v13, &v22);
                sub_20C01A0C8(v13 + 1, (_DWORD *)&v22 + 1);
                --v15;
                v13 += 2;
              }
              while (v15 > 1);
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v22 + 1);
            sub_20BFD265C(&v22);
            sub_20BE81ACC((uint64_t)&v33, (unint64_t)v29);
            if ((sub_20C2C72EC((uint64_t)v27, a2, (unint64_t)v33, v29) & 1) != 0)
            {
              v16 = v33;
              if (v33 == v34)
              {
LABEL_26:
                sub_20BE81ACC((uint64_t)&v30, (unint64_t)v29);
                if (sub_20C2C72EC((uint64_t)v27, a2, (unint64_t)v30, v29))
                {
                  v21 = 0;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v21);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v21 + 1);
                  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl(a1, &v36, &v33, &v30, 0, (int *)&v21, (uint64_t)a3);
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
                  sub_20BFD265C(&v21);
                  pxrInternal__aapl__pxrReserved__::WorkDispatcher::Wait(a3);
                }
              }
              else
              {
                v17 = (uint64_t)(a1[16] - a1[15]) >> 3;
                while (1)
                {
                  LODWORD(v18) = *v16;
                  v18 = (int)*v16 >= 0 ? v18 : -(int)v18;
                  if (v17 <= v18)
                    break;
                  if (++v16 == v34)
                    goto LABEL_26;
                }
                v22 = "usd/crateFile.cpp";
                v23 = "_ReadCompressedPaths";
                v24 = 4280;
                v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, Work"
                      "Dispatcher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Rea"
                      "der<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
                v26 = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt path element token index in crate file (%d >= %zu)", v18, v17);
              }
            }
          }
        }
        else
        {
          v11 = 0;
          while (1)
          {
            v12 = *v10;
            if (v12 >= a4)
              break;
            if (v11 <= v12)
              v11 = *v10;
            if (++v10 == v37)
              goto LABEL_13;
          }
          v22 = "usd/crateFile.cpp";
          v23 = "_ReadCompressedPaths";
          v24 = 4243;
          v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDispat"
                "cher &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInter"
                "nal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>]";
          v26 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt path index in crate file (%u >= %zu)", v12, a4);
        }
      }
    }
    else
    {
      v22 = "usd/crateFile.cpp";
      v23 = "_ReadCompressedPaths";
      v24 = 4230;
      v25 = "void pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_ReadCompressedPaths(Reader, WorkDispatcher"
            " &, uint64_t) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aap"
            "l__pxrReserved__::Usd_CrateFile::_AssetStream>]";
      v26 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed paths of size %llu", v29);
    }
    v19 = __p[0];
    __p[0] = 0;
    if (v19)
      operator delete[](v19);
    v20 = v27[0];
    v27[0] = 0;
    if (v20)
      operator delete[](v20);
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
}

void sub_20C2C6BC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void *v25;
  void *v26;

  sub_20C2BAA20((uint64_t)&a17);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  v25 = *(void **)(v23 - 96);
  if (v25)
  {
    *(_QWORD *)(v23 - 88) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(v23 - 72);
  if (v26)
  {
    *(_QWORD *)(v23 - 64) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_20C2C6C44(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 15);
  sub_20BFD265C(a1 + 14);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 4));
  return a1;
}

uint64_t sub_20C2C6C80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a1 - 11) = 1;
  *(_QWORD *)a1 = &unk_24C52F288;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 40);
  sub_20BFD38A4((_DWORD *)(a1 + 64), (_DWORD *)(a2 + 56));
  sub_20BFD38DC((_DWORD *)(a1 + 68), (_DWORD *)(a2 + 60));
  *(_QWORD *)(a1 + 72) = a3;
  return a1;
}

uint64_t sub_20C2C6D08(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C52F288;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_20BFD265C((_DWORD *)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 24));
  return a1;
}

void sub_20C2C6D50(_DWORD *a1)
{
  *(_QWORD *)a1 = &unk_24C52F288;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 17);
  sub_20BFD265C(a1 + 16);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 6));
  operator delete(a1);
}

uint64_t sub_20C2C6D98(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2C6E38(a1 + 8);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 72));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2C6E24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C2C6E38(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  int v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v2 = *(char **)a1;
  sub_20C2BBAF8((uint64_t)&v17, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v3;
  v14 = *(_OWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 24);
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v3 = *(_QWORD *)(a1 + 32);
  }
  v16 = v3;
  v7 = *(_QWORD *)(a1 + 48);
  sub_20BFD6E54(&v12, (_DWORD *)(a1 + 56));
  sub_20BFD6EA4(&v13, (_DWORD *)(a1 + 60));
  sub_20C2C6144(v2, &v14, v7, &v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  while (v18--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v17);
}

void sub_20C2C6F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 | 8));
  sub_20BEB24F4((uint64_t)va1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C2C6F98(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 15);
  sub_20BFD265C(a1 + 14);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 4));
  return a1;
}

uint64_t sub_20C2C6FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)(a1 - 11) = 1;
  *(_QWORD *)a1 = &unk_24C52F2D0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 40);
  sub_20BFD38A4((_DWORD *)(a1 + 64), (_DWORD *)(a2 + 56));
  sub_20BFD38DC((_DWORD *)(a1 + 68), (_DWORD *)(a2 + 60));
  *(_QWORD *)(a1 + 72) = a3;
  return a1;
}

uint64_t sub_20C2C705C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C52F2D0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 68));
  sub_20BFD265C((_DWORD *)(a1 + 64));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 24));
  return a1;
}

void sub_20C2C70A4(_DWORD *a1)
{
  *(_QWORD *)a1 = &unk_24C52F2D0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 17);
  sub_20BFD265C(a1 + 16);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 6));
  operator delete(a1);
}

uint64_t sub_20C2C70EC(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2C718C(a1 + 8);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 72));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2C7178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C2C718C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  int v12;
  int v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;

  v2 = *(char **)a1;
  sub_20C2BBAF8((uint64_t)&v17, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  v3 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v3;
  v14 = *(_OWORD *)(a1 + 8);
  v4 = *(std::__shared_weak_count **)(a1 + 24);
  v15 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v3 = *(_QWORD *)(a1 + 32);
  }
  v16 = v3;
  v7 = *(_QWORD *)(a1 + 48);
  sub_20BFD6E54(&v12, (_DWORD *)(a1 + 56));
  sub_20BFD6EA4(&v13, (_DWORD *)(a1 + 60));
  sub_20C2C6480(v2, &v14, v7, &v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  sub_20BFD265C(&v12);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  while (v18--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v17);
}

void sub_20C2C72C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(v2 | 8));
  sub_20BEB24F4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C72EC(uint64_t a1, uint64_t a2, unint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  char *v21;

  sub_20C2BAA60(a1, this);
  v21 = 0;
  v8 = (_QWORD *)(a2 + 8);
  result = sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)&v21, 8uLL);
  if ((_DWORD)result)
  {
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a1 + 8);
    v13 = v21;
    if (v12 < (unint64_t)v21)
      v13 = *(char **)(a1 + 8);
    if (v10 - v11 >= (unint64_t)v13)
      v14 = v13;
    else
      v14 = (char *)(v10 - v11);
    v21 = v14;
    if (v12 && *(_QWORD *)(a1 + 24))
    {
      if ((v11 & 0x8000000000000000) == 0)
      {
        result = sub_20C2B72E8(v8, *(_QWORD *)a1, (unint64_t)v14);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a1, v21, a3, (int64_t)this, *(char **)(a1 + 16), v15);
          return 1;
        }
        return result;
      }
      v16 = "usd/crateFile.cpp";
      v17 = "Read";
      v18 = 2158;
      v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = int]";
      v20 = 0;
      (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      v16 = "usd/crateFile.cpp";
      v17 = "Read";
      v18 = 2153;
      v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = int]";
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

uint64_t sub_20C2C7458(uint64_t a1, void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;

  v19 = 0;
  v4 = (_QWORD *)(a1 + 8);
  if (!sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __p = "usd/crateFile.cpp";
    v15 = "_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec_0_0_1]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20C2BC194(&__p, v19);
  v9 = sub_20C2B72E8(v4, (uint64_t)__p, 16 * v19);
  v10 = v9;
  if (&__p == a2)
    v11 = 0;
  else
    v11 = v9;
  if ((v11 & 1) != 0)
    sub_20BEF5530((char *)a2, (char *)__p, (uint64_t)v15, (v15 - (_BYTE *)__p) >> 4);
  if (__p)
  {
    v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_20C2C7588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2C75A4(uint64_t a1, void **a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *__p;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  unint64_t v19;

  v19 = 0;
  v4 = (_QWORD *)(a1 + 8);
  if (!sub_20C2B72E8((_QWORD *)(a1 + 8), (uint64_t)&v19, 8uLL))
    return 0;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v6 = *(_QWORD *)(a1 + 24);
  v7 = v5 - v6;
  v8 = v19;
  if (v6 < 0 || (v7 & 0x8000000000000000) != 0 || v19 > v7)
  {
    __p = "usd/crateFile.cpp";
    v15 = "_Read";
    v16 = 1189;
    v17 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
          "_CrateFile::_AssetStream>::_Read(vector<T> &) [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
          "AssetStream, T = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::Spec]";
    v18 = 0;
    v12 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v4 + 16))(*v4);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read vector of size %llu, remaining file size is %lld of %lld", v8, v7, v12);
    return 0;
  }
  sub_20C2BC4A4(&__p, v19);
  v9 = sub_20C2B72E8(v4, (uint64_t)__p, 12 * v19);
  v10 = v9;
  if (&__p == a2)
    v11 = 0;
  else
    v11 = v9;
  if ((v11 & 1) != 0)
    sub_20C2BC51C((char *)a2, (char *)__p, (uint64_t)v15, 0xAAAAAAAAAAAAAAABLL * ((v15 - (_BYTE *)__p) >> 2));
  if (__p)
  {
    v15 = (const char *)__p;
    operator delete(__p);
  }
  return v10;
}

void sub_20C2C76E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C2C7700(pxrInternal__aapl__pxrReserved__ *a1)
{
  _BOOL8 HasConcurrency;
  uint64_t DetachedDispatcher;
  void **v3;
  unint64_t v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  __int128 v7;
  uint64_t v8;
  void **v9[2];

  v7 = *(_OWORD *)a1;
  v8 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1);
  if (HasConcurrency)
  {
    DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    v3 = *(void ***)(DetachedDispatcher + 256);
    v9[0] = 0;
    v9[1] = v3;
    v4 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v9, 0x28uLL);
    *(_BYTE *)(v4 - 11) = 1;
    *(_QWORD *)v4 = &unk_24C52F318;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_OWORD *)(v4 + 8) = v7;
    v5 = v8;
    v7 = 0uLL;
    v8 = 0;
    *(_QWORD *)(v4 + 24) = v5;
    *(_QWORD *)(v4 + 32) = DetachedDispatcher + 264;
    v6 = (pxrInternal__aapl__pxrReserved__ *)(***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v4 - 40))(*(_QWORD *)(v4 - 40), v4, v4 - 8);
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v6);
  }
  else
  {
    sub_20C2C77E8();
  }
  v9[0] = (void **)&v7;
  sub_20BFD6F90(v9);
}

void sub_20C2C77CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BFD6F90(&a12);
  _Unwind_Resume(a1);
}

void sub_20C2C77E8()
{
  unint64_t *Instance;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v1 = sub_20BEC5244(&v3, 0);
  v4 = 0;
  v2 = (_QWORD *)sub_20BEB5B80(Instance + 19, &v4);
  if (v2 != v1)
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v1, v2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_20C2C7870(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C7884(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C52F318;
  v3 = (void **)(a1 + 8);
  sub_20BFD6F90(&v3);
  return a1;
}

void sub_20C2C78CC(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C52F318;
  v2 = (void **)(a1 + 8);
  sub_20BFD6F90(&v2);
  operator delete(a1);
}

uint64_t sub_20C2C7918(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2C77E8();
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2C79A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C2C79B8(pxrInternal__aapl__pxrReserved__ *a1)
{
  _BOOL8 HasConcurrency;
  uint64_t DetachedDispatcher;
  void **v3;
  unint64_t v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__ *v6;
  __int128 v7;
  uint64_t v8;
  void **v9[2];

  v7 = *(_OWORD *)a1;
  v8 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  *(_QWORD *)a1 = 0;
  HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1);
  if (HasConcurrency)
  {
    DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    v3 = *(void ***)(DetachedDispatcher + 256);
    v9[0] = 0;
    v9[1] = v3;
    v4 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v9, 0x28uLL);
    *(_BYTE *)(v4 - 11) = 1;
    *(_QWORD *)v4 = &unk_24C52F360;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_OWORD *)(v4 + 8) = v7;
    v5 = v8;
    v7 = 0uLL;
    v8 = 0;
    *(_QWORD *)(v4 + 24) = v5;
    *(_QWORD *)(v4 + 32) = DetachedDispatcher + 264;
    v6 = (pxrInternal__aapl__pxrReserved__ *)(***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v4 - 40))(*(_QWORD *)(v4 - 40), v4, v4 - 8);
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v6);
  }
  else
  {
    sub_20C2C7AA0();
  }
  v9[0] = (void **)&v7;
  sub_20BEEB2B8(v9);
}

void sub_20C2C7A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BEEB2B8(&a12);
  _Unwind_Resume(a1);
}

void sub_20C2C7AA0()
{
  unint64_t *Instance;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v1 = sub_20BEC5244(&v3, 0);
  v4 = 0;
  v2 = (_QWORD *)sub_20BEB5B80(Instance + 19, &v4);
  if (v2 != v1)
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v1, v2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_20C2C7B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C7B3C(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C52F360;
  v3 = (void **)(a1 + 8);
  sub_20BEEB2B8(&v3);
  return a1;
}

void sub_20C2C7B84(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C52F360;
  v2 = (void **)(a1 + 8);
  sub_20BEEB2B8(&v2);
  operator delete(a1);
}

uint64_t sub_20C2C7BD0(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2C7AA0();
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2C7C5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C2C7C70(pxrInternal__aapl__pxrReserved__ *a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL8 HasConcurrency;
  uint64_t DetachedDispatcher;
  uint64_t v6;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__ *v8;
  void *__p;
  _QWORD v10[2];

  v1 = *(void **)a1;
  v2 = *((_QWORD *)a1 + 1);
  __p = *(void **)a1;
  v3 = *((_QWORD *)a1 + 2);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(a1);
  if (HasConcurrency)
  {
    DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    v6 = *(_QWORD *)(DetachedDispatcher + 256);
    v10[0] = 0;
    v10[1] = v6;
    v7 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v10, 0x28uLL);
    *((_BYTE *)v7 - 11) = 1;
    *v7 = &unk_24C52F3A8;
    v7[1] = v1;
    v7[2] = v2;
    v7[3] = v3;
    v7[4] = DetachedDispatcher + 264;
    v8 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(_QWORD, _QWORD *, uint64_t))*(v7 - 5))(*(v7 - 5), v7, (uint64_t)(v7 - 1));
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v8);
  }
  else
  {
    sub_20C2C7D54();
    if (__p)
      operator delete(__p);
  }
}

void sub_20C2C7D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C2C7D54()
{
  unint64_t *Instance;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v1 = sub_20BEC5244(&v3, 0);
  v4 = 0;
  v2 = (_QWORD *)sub_20BEB5B80(Instance + 19, &v4);
  if (v2 != v1)
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v1, v2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_20C2C7DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2C7DF0(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_24C52F3A8;
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20C2C7E30(_QWORD *__p)
{
  void *v2;

  *__p = &unk_24C52F3A8;
  v2 = (void *)__p[1];
  if (v2)
  {
    __p[2] = v2;
    operator delete(v2);
  }
  operator delete(__p);
}

uint64_t sub_20C2C7E70(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2C7D54();
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 32));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2C7EFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C7F10(uint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__ *v1;
  _BOOL8 HasConcurrency;
  uint64_t DetachedDispatcher;
  _QWORD *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  uint64_t v7[5];

  v1 = (pxrInternal__aapl__pxrReserved__ *)sub_20BF20A20((uint64_t)v7, a1);
  HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v1);
  if (HasConcurrency)
  {
    DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    v4 = sub_20C2C8030(DetachedDispatcher, v7);
    v5 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(_QWORD, _QWORD *, uint64_t))*(v4 - 5))(*(v4 - 5), v4, (uint64_t)(v4 - 1));
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v5);
  }
  else
  {
    sub_20C2C7F94();
  }
  return sub_20C2B7720((uint64_t)v7);
}

void sub_20C2C7F80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2B7720((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2C7F94()
{
  unint64_t *Instance;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v1 = sub_20BEC5244(&v3, 0);
  v4 = 0;
  v2 = (_QWORD *)sub_20BEB5B80(Instance + 19, &v4);
  if (v2 != v1)
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v1, v2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_20C2C801C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2C8030(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  v5 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x38uLL);
  *((_BYTE *)v5 - 11) = 1;
  *v5 = &unk_24C52F3F0;
  sub_20BF20A20((uint64_t)(v5 + 1), a2);
  v5[6] = a1 + 264;
  return v5;
}

_QWORD *sub_20C2C80A4(_QWORD *a1)
{
  *a1 = &unk_24C52F3F0;
  sub_20C2B7720((uint64_t)(a1 + 1));
  return a1;
}

void sub_20C2C80D8(_QWORD *a1)
{
  *a1 = &unk_24C52F3F0;
  sub_20C2B7720((uint64_t)(a1 + 1));
  operator delete(a1);
}

uint64_t sub_20C2C810C(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2C7F94();
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2C8198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C2C81AC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__ *v1;
  _BOOL8 HasConcurrency;
  uint64_t DetachedDispatcher;
  _QWORD *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  _BYTE v6[8];
  uint64_t v7;
  void **v8;

  v1 = (pxrInternal__aapl__pxrReserved__ *)sub_20C2C8248((uint64_t)v6, a1);
  HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v1);
  if (HasConcurrency)
  {
    DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    v4 = sub_20C2C8394(DetachedDispatcher, (uint64_t)v6);
    v5 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(_QWORD, _QWORD *, uint64_t))*(v4 - 5))(*(v4 - 5), v4, (uint64_t)(v4 - 1));
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v5);
  }
  else
  {
    sub_20C2C82F8();
  }
  v8 = (void **)&v7;
  sub_20C2AECF4(&v8);
}

void sub_20C2C8228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 24) = &a11;
  sub_20C2AECF4((void ***)(v11 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C8248(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  int *v5;
  int *v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = (uint64_t *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(int **)(a1 + 8);
  if (v5 == *(int **)(a1 + 16))
    v5 = sub_20C2B754C();
  *(_QWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(_QWORD *)a2 = 0;
  sub_20C2AED34(v4);
  v6 = sub_20C2B754C();
  *(_WORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 32) = v6;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  return a1;
}

void sub_20C2C82F8()
{
  unint64_t *Instance;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v1 = sub_20BEC5244(&v3, 0);
  v4 = 0;
  v2 = (_QWORD *)sub_20BEB5B80(Instance + 19, &v4);
  if (v2 != v1)
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v1, v2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_20C2C8380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2C8394(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  v5 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x60uLL);
  *((_BYTE *)v5 - 11) = 1;
  *v5 = &unk_24C52F438;
  sub_20C2C8248((uint64_t)(v5 + 1), a2);
  v5[11] = a1 + 264;
  return v5;
}

uint64_t sub_20C2C8408(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &unk_24C52F438;
  v3 = (void **)(a1 + 16);
  sub_20C2AECF4(&v3);
  return a1;
}

void sub_20C2C8450(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = &unk_24C52F438;
  v2 = (void **)(a1 + 16);
  sub_20C2AECF4(&v2);
  operator delete(a1);
}

uint64_t sub_20C2C849C(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2C82F8();
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 88));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2C8528(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C853C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void **v6;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)(a1 + 720));
  v2 = *(_QWORD **)(a1 + 704);
  if (v2 == (_QWORD *)(a1 + 680))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 680);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 344));
  sub_20C2B00EC((_QWORD *)(a1 + 320));
  sub_20C2B0254((_QWORD *)(a1 + 296));
  v4 = *(void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v4)
    operator delete[](v4);
  if (*(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  v6 = (void **)(a1 + 200);
  sub_20C2B2388(&v6);
  sub_20C2B240C(a1 + 160);
  sub_20BEB3FA4(a1 + 120);
  sub_20C2B2488(a1 + 80);
  sub_20BEB3F28(a1 + 40);
  return sub_20BF20BCC(a1);
}

uint64_t sub_20C2C8608(uint64_t *a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t *v22;

  v5 = *a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    sub_20BDDF694();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x333333333333333)
    v13 = 0x666666666666666;
  else
    v13 = v7;
  v22 = a1 + 2;
  if (v13)
    v14 = (char *)sub_20BED4724(v11, v13);
  else
    v14 = 0;
  v18 = v14;
  v19 = &v14[40 * v6];
  v20 = v19;
  v21 = &v14[40 * v13];
  v15 = sub_20BDDC0E4(v19, a2);
  v15[3] = *a3;
  v15[4] = *a4;
  v20 += 40;
  sub_20C2C872C(a1, &v18);
  v16 = a1[1];
  sub_20BEE8178((uint64_t)&v18);
  return v16;
}

void sub_20C2C8718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEE8178((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C872C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C2C87A0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C2C87A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v8 - 24) = *(_QWORD *)(a3 - 24);
      *(_OWORD *)(v8 - 40) = v9;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      v8 -= 40;
      v7 -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  sub_20C2C8854((uint64_t)v12);
  return v10;
}

uint64_t sub_20C2C8854(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BEE8134(a1);
  return a1;
}

uint64_t sub_20C2C8888(uint64_t a1, unint64_t a2, float a3, float a4)
{
  __int16 *v7;
  unint64_t v8;
  float v9;
  std::logic_error *exception;
  unint64_t v12;

  v12 = a2;
  sub_20BED1408((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0x666666666666667)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  sub_20C2C8A1C((_QWORD *)(a1 + 8), v12);
  v7 = *(__int16 **)(a1 + 8);
  if (v7 == *(__int16 **)(a1 + 16))
    v7 = sub_20C2C89A8();
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 38) = 1;
  v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_20C2C8994(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

__int16 *sub_20C2C89A8()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25473C9B0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473C9B0))
  {
    word_25473C988 = -1;
    byte_25473C98A = 1;
    __cxa_atexit((void (*)(void *))sub_20C2B25DC, &word_25473C988, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473C9B0);
  }
  return &word_25473C988;
}

_QWORD *sub_20C2C8A1C(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BED4B34(a1, a2);
    v4 = a1[1];
    v5 = v4 + 40 * a2;
    do
    {
      *(_WORD *)v4 = -1;
      *(_BYTE *)(v4 + 2) = 0;
      v4 += 40;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C2C8A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C2B2528(&a9);
  _Unwind_Resume(a1);
}

__int16 *sub_20C2C8AA0(uint64_t *a1, double *a2, uint64_t a3, uint64_t **a4)
{
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 *result;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;

  v7 = *a2;
  if (*a2 == 0.0)
    v8 = 0.0;
  else
    v8 = *a2;
  v9 = *a1;
  v10 = a1[4];
  v11 = *(_QWORD *)&v8 & *a1;
  result = (__int16 *)(v10 + 40 * v11);
  if (*result < 0)
  {
    LOWORD(v13) = 0;
  }
  else
  {
    if (*(double *)(v10 + 40 * v11 + 8) == v7)
      return result;
    LOWORD(v13) = 0;
    while (1)
    {
      v13 = (__int16)(v13 + 1);
      v11 = (v11 + 1) & v9;
      result = (__int16 *)(v10 + 40 * v11);
      if (v13 > *result)
        break;
      if (*(double *)(v10 + 40 * v11 + 8) == v7)
        return result;
    }
  }
  v14 = sub_20C2C8C40((uint64_t)a1);
  v15 = a1[4];
  if ((v14 & 1) != 0)
  {
    v11 = *(_QWORD *)&v8 & *a1;
    if (*(__int16 *)(v15 + 40 * v11) < 0)
    {
      LOWORD(v13) = 0;
      v16 = *(unsigned __int16 *)(v15 + 40 * v11);
    }
    else
    {
      LOWORD(v13) = 0;
      do
      {
        v13 = (__int16)(v13 + 1);
        v11 = (v11 + 1) & *a1;
      }
      while (v13 <= *(__int16 *)(v15 + 40 * v11));
      v16 = *(unsigned __int16 *)(v15 + 40 * v11);
    }
  }
  else
  {
    v16 = *(unsigned __int16 *)(v15 + 40 * v11);
  }
  if (v16 == 0xFFFF)
  {
    v17 = v15 + 40 * v11;
    *(_QWORD *)(v17 + 8) = **a4;
    *(_QWORD *)(v17 + 24) = 0;
    *(_QWORD *)(v17 + 32) = 0;
    *(_QWORD *)(v17 + 16) = 0;
    *(_WORD *)v17 = v13;
  }
  else
  {
    sub_20C2C8D04(a1, v11, v13, *(uint64_t *)&v8, a3, a4);
  }
  ++a1[6];
  return (__int16 *)(a1[4] + 40 * v11);
}

uint64_t sub_20C2C8C40(uint64_t a1)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 48), v2 >= *(_QWORD *)(a1 + 56)))
  {
    v6 = sub_20BED1164((_QWORD *)a1);
    sub_20C2C8D48(a1, v6);
    *(_BYTE *)(a1 + 72) = 0;
    return 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    *(_BYTE *)(a1 + 73) = 0;
    v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        v8 = *(float *)(a1 + 68);
        v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        sub_20C2C8D48(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_20C2C8D04(uint64_t *a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, uint64_t **a6)
{
  uint64_t v6;
  void *__p;
  void *v8;
  uint64_t v9;

  v6 = **a6;
  v8 = 0;
  v9 = 0;
  __p = 0;
  sub_20C2C8EE8(a1, a2, a3, a4, &v6);
  if (__p)
  {
    v8 = __p;
    operator delete(__p);
  }
}

void sub_20C2C8D48(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v9[9];
  void **v10;

  sub_20C2C8888((uint64_t)&v8, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  v3 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 16);
  if (v3 != v4)
  {
    v5 = v3 + 1;
    do
    {
      if (*((__int16 *)v5 - 4) != -1)
      {
        if (*(double *)v5 == 0.0)
          v6 = 0;
        else
          v6 = *v5;
        sub_20C2C8E28(&v8, v6 & v8, 0, v6, v5);
      }
      v7 = v5 + 4;
      v5 += 5;
    }
    while (v7 != v4);
  }
  v9[5] = *(_QWORD *)(a1 + 48);
  sub_20BED1250(&v8, (uint64_t *)a1);
  v10 = (void **)v9;
  sub_20C2B2528(&v10);
}

void sub_20C2C8E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 40) = &a11;
  sub_20C2B2528((void ***)(v11 - 40));
  _Unwind_Resume(a1);
}

__n128 sub_20C2C8E28(_QWORD *a1, uint64_t a2, __int16 a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  __int16 *v6;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 *v14;
  __n128 result;

  while (1)
  {
    v5 = a1[4];
    v6 = (__int16 *)(v5 + 40 * a2);
    v7 = *v6;
    if (v7 >= a3)
      goto LABEL_4;
    v8 = (_QWORD *)(v5 + 40 * a2 + 8);
    v9 = *a5;
    if (v7 == -1)
      break;
    *a5 = *v8;
    *v8 = v9;
    v10 = (_QWORD *)(v5 + 40 * a2);
    v11 = a5[1];
    a5[1] = v10[2];
    v10[2] = v11;
    v12 = a5[2];
    a5[2] = v10[3];
    v10[3] = v12;
    v13 = a5[3];
    a5[3] = v10[4];
    v10[4] = v13;
    *v6 = a3;
    a3 = v7;
LABEL_4:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  *v8 = v9;
  v14 = (__n128 *)(v5 + 40 * a2);
  v14[1].n128_u64[1] = 0;
  v14[2].n128_u64[0] = 0;
  v14[1].n128_u64[0] = 0;
  result = *(__n128 *)(a5 + 1);
  v14[1] = result;
  v14[2].n128_u64[0] = a5[3];
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = 0;
  *v6 = a3;
  return result;
}

__n128 sub_20C2C8EE8(uint64_t *a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, _QWORD *a5)
{
  unsigned __int16 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _WORD *v15;
  int i;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 *v22;
  __n128 result;

  v5 = (unsigned __int16 *)(a1[4] + 40 * a2);
  v6 = *a5;
  *a5 = *((_QWORD *)v5 + 1);
  *((_QWORD *)v5 + 1) = v6;
  v7 = a5[1];
  a5[1] = *((_QWORD *)v5 + 2);
  *((_QWORD *)v5 + 2) = v7;
  v8 = a5[2];
  a5[2] = *((_QWORD *)v5 + 3);
  *((_QWORD *)v5 + 3) = v8;
  v9 = a5[3];
  a5[3] = *((_QWORD *)v5 + 4);
  *((_QWORD *)v5 + 4) = v9;
  v10 = *v5;
  *v5 = a3;
  v11 = *a1;
  v12 = (a2 + 1) & *a1;
  v13 = v10 + 1;
  v14 = a1[4];
  v15 = (_WORD *)(v14 + 40 * v12);
  for (i = (unsigned __int16)*v15; i != 0xFFFF; i = (unsigned __int16)*v15)
  {
    if ((__int16)v13 <= (__int16)i)
    {
      i = v13;
    }
    else
    {
      if ((__int16)v13 >= 4096)
        *((_BYTE *)a1 + 72) = 1;
      v17 = (_QWORD *)(v14 + 40 * v12);
      v18 = *a5;
      *a5 = v17[1];
      v17[1] = v18;
      v19 = a5[1];
      a5[1] = v17[2];
      v17[2] = v19;
      v20 = a5[2];
      a5[2] = v17[3];
      v17[3] = v20;
      v21 = a5[3];
      a5[3] = v17[4];
      v17[4] = v21;
      *v15 = v13;
      v14 = a1[4];
    }
    v12 = (v12 + 1) & v11;
    v13 = i + 1;
    v15 = (_WORD *)(v14 + 40 * v12);
  }
  v22 = (__n128 *)(v14 + 40 * v12);
  v22->n128_u64[1] = *a5;
  v22[1].n128_u64[1] = 0;
  v22[2].n128_u64[0] = 0;
  v22[1].n128_u64[0] = 0;
  result = *(__n128 *)(a5 + 1);
  v22[1] = result;
  v22[2].n128_u64[0] = a5[3];
  a5[1] = 0;
  a5[2] = 0;
  a5[3] = 0;
  *v15 = v13;
  return result;
}

void sub_20C2C9030(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *EmptyString;
  uint64_t v12;
  uint64_t *v13;
  int64_t v14;
  pxrInternal__aapl__pxrReserved__::TfToken *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  size_t CompressedBufferSize;
  char *v22;
  int64_t v23;
  void *__p;
  void *__dst;
  uint64_t v26;
  int64_t __src;

  __p = (void *)((uint64_t)(a1[16] - a1[15]) >> 3);
  v4 = sub_20C2B7248(a2, (char *)&__p);
  if (((*(unsigned __int8 *)(a1[791] + 248) << 16) | (*(unsigned __int8 *)(a1[791] + 249) << 8)) > 0x3FFu)
  {
    __p = 0;
    __dst = 0;
    v26 = 0;
    v10 = (_QWORD *)a1[15];
    v9 = (_QWORD *)a1[16];
    if (v10 == v9)
    {
      v14 = 0;
    }
    else
    {
      do
      {
        if ((*v10 & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((*v10 & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v4);
        if (*((char *)EmptyString + 23) < 0)
        {
          v13 = EmptyString;
          EmptyString = (uint64_t *)*EmptyString;
          v12 = v13[1];
        }
        else
        {
          v12 = *((unsigned __int8 *)EmptyString + 23);
        }
        v4 = (unint64_t)sub_20C2C9278((uint64_t)&__p, (char *)__dst, (char *)EmptyString, (char *)EmptyString + v12 + 1, v12 + 1);
        ++v10;
      }
      while (v10 != v9);
      v14 = (_BYTE *)__dst - (_BYTE *)__p;
    }
    __src = v14;
    sub_20C2B7248(a2, (char *)&__src);
    CompressedBufferSize = pxrInternal__aapl__pxrReserved__::TfFastCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::TfFastCompression *)((_BYTE *)__dst - (_BYTE *)__p));
    v22 = (char *)operator new[](CompressedBufferSize);
    v23 = pxrInternal__aapl__pxrReserved__::TfFastCompression::CompressToBuffer((pxrInternal__aapl__pxrReserved__::TfFastCompression *)__p, v22, (_BYTE *)__dst - (_BYTE *)__p);
    __src = v23;
    sub_20C2B7248(a2, (char *)&__src);
    sub_20C2A7944(a2, v22, v23);
    operator delete[](v22);
    if (__p)
    {
      __dst = __p;
      operator delete(__p);
    }
  }
  else
  {
    v5 = (_QWORD *)a1[15];
    v6 = (_QWORD *)a1[16];
    if (v5 == v6)
    {
      v7 = 0;
    }
    else
    {
      v7 = 0;
      do
      {
        if ((*v5 & 0xFFFFFFFFFFFFFFF8) != 0)
          v4 = (*v5 & 0xFFFFFFFFFFFFFFF8) + 16;
        else
          v4 = (unint64_t)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v4);
        if (*(char *)(v4 + 23) < 0)
          v8 = *(_QWORD *)(v4 + 8);
        else
          v8 = *(unsigned __int8 *)(v4 + 23);
        v7 += v8 + 1;
        ++v5;
      }
      while (v5 != v6);
    }
    __p = v7;
    v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C2B7248(a2, (char *)&__p);
    v17 = (_QWORD *)a1[15];
    v16 = (_QWORD *)a1[16];
    while (v17 != v16)
    {
      if ((*v17 & 0xFFFFFFFFFFFFFFF8) != 0)
        v18 = (uint64_t *)((*v17 & 0xFFFFFFFFFFFFFFF8) + 16);
      else
        v18 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v15);
      if (*((char *)v18 + 23) < 0)
      {
        v20 = v18;
        v18 = (uint64_t *)*v18;
        v19 = v20[1];
      }
      else
      {
        v19 = *((unsigned __int8 *)v18 + 23);
      }
      v15 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C2A7944(a2, (char *)v18, v19 + 1);
      ++v17;
    }
  }
}

void sub_20C2C9240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_20C2C9278(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  char *v5;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int64_t v25;
  char v26;
  char *v27;
  char *v28;
  size_t v29;
  char *v30;
  char *v31;
  char *v32;

  v5 = __dst;
  if (a5 < 1)
    return v5;
  v10 = *(char **)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    v11 = *(char **)a1;
    v12 = (uint64_t)&v10[a5 - *(_QWORD *)a1];
    if (v12 < 0)
      sub_20BDDF694();
    v13 = (char *)(__dst - v11);
    v14 = v9 - (_QWORD)v11;
    if (2 * v14 > v12)
      v12 = 2 * v14;
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
      v15 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      v16 = v15;
      v17 = (char *)operator new(v15);
    }
    else
    {
      v16 = 0;
      v17 = 0;
    }
    v27 = &v13[(_QWORD)v17];
    memcpy(&v13[(_QWORD)v17], __src, a5);
    v28 = &v13[(_QWORD)v17];
    v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(_QWORD)v17 - 1] = v13[(_QWORD)(v11 - 1)];
        --v13;
      }
      while (v13);
      v10 = *(char **)(a1 + 8);
      v28 = v17;
    }
    v30 = &v27[a5];
    v31 = &v17[v29];
    if (v10 != v5)
      memmove(v30, v5, v10 - v5);
    v32 = *(char **)a1;
    *(_QWORD *)a1 = v28;
    *(_QWORD *)(a1 + 8) = &v30[v10 - v5];
    *(_QWORD *)(a1 + 16) = v31;
    if (v32)
      operator delete(v32);
    return v27;
  }
  v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    v19 = &__src[a5];
    v21 = *(char **)(a1 + 8);
LABEL_17:
    v22 = &v5[a5];
    v23 = &v21[-a5];
    v24 = v21;
    if (&v21[-a5] < v10)
    {
      v25 = &v10[a5] - v21;
      v24 = v21;
      do
      {
        v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(_QWORD *)(a1 + 8) = v24;
    if (v21 != v22)
      memmove(&v5[a5], v5, v21 - v22);
    if (v19 != __src)
      memmove(v5, __src, v19 - __src);
    return v5;
  }
  v19 = &__src[v18];
  v20 = a4 - &__src[v18];
  if (a4 != &__src[v18])
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  v21 = &v10[v20];
  *(_QWORD *)(a1 + 8) = &v10[v20];
  if (v18 >= 1)
    goto LABEL_17;
  return v5;
}

uint64_t sub_20C2C9460(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  v3 = 4 * a3;
  if (4 * a3)
  {
    v5 = *(_QWORD **)(result + 8);
    do
    {
      v6 = v5[2];
      v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7)
        v8 = v6 - *v5 + 0x80000;
      else
        v8 = v3;
      v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4])
        v5[4] = v8 + v9;
      result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3)
        result = sub_20C2B209C((_BOOL8)v5);
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_20C2C9504(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  void *v15;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) > 0x492492492492492)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0x249249249249249)
    v11 = 0x492492492492492;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_20BE16B34(v9, v11);
  else
    v12 = 0;
  v15 = v12;
  v16 = (uint64_t *)&v12[56 * v5];
  v18 = &v12[56 * v11];
  sub_20C2C9628(v16, a2, a3);
  v17 = v16 + 7;
  sub_20C2C9708(a1, &v15);
  v13 = a1[1];
  sub_20C2C98C0(&v15);
  return v13;
}

void sub_20C2C9614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2C98C0((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C2C9628(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;

  v5 = *a2;
  *a1 = *a2;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  v9 = *a3;
  v8 = a3[1];
  a1[2] = v8;
  a1[1] = v9;
  if (v8)
  {
    v10 = (unsigned int *)(v8 + 24);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  sub_20BFC31F4(a1 + 3, a3[2], a3[3], (a3[3] - a3[2]) >> 4);
  a1[6] = a3[5];
  return a1;
}

void sub_20C2C96D4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  unsigned int *v4;
  unsigned int v5;

  sub_20C020410(v2);
  if ((*v1 & 7) != 0)
  {
    v4 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C9708(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C2C977C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C2C977C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 56);
      a3 -= 56;
      *(_OWORD *)(v7 - 56) = v8;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 48);
      v7 = *((_QWORD *)&v14 + 1) - 56;
      *((_QWORD *)&v14 + 1) -= 56;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_20C2C983C((uint64_t)v11);
  return v9;
}

uint64_t sub_20C2C983C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C2C9870((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C2C9870(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C2B6A68(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C2C98C0(void **a1)
{
  sub_20C2C98F0(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void **sub_20C2C98F0(void **result)
{
  char *v1;
  char *v2;
  void **v3;
  uint64_t v4;

  v2 = (char *)result[1];
  v1 = (char *)result[2];
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = (uint64_t)v3[4];
      v3[2] = v1 - 56;
      result = sub_20C2B6A68(v4, (uint64_t)(v1 - 56));
      v1 = (char *)v3[2];
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C2C9934(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[24 * v4];
  v16 = &v10[24 * v9];
  sub_20C0E6CA4(v14, a2);
  v15 = v14 + 3;
  sub_20C0DE978(a1, &v13);
  v11 = a1[1];
  sub_20C0DEB28((uint64_t)&v13);
  return v11;
}

void sub_20C2C9A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0DEB28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2C9A38(uint64_t *a1, _DWORD *a2, int *a3, uint64_t a4, uint64_t a5, __n128 *a6)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  void *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t *v22;

  v7 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v8 = v7 + 1;
  if (v7 + 1 > 0x333333333333333)
    sub_20BDDF694();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v8)
    v8 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v14 = 0x333333333333333;
  else
    v14 = v8;
  v22 = a1 + 2;
  if (v14)
    v15 = (char *)sub_20BE7AB58((uint64_t)(a1 + 2), v14);
  else
    v15 = 0;
  v18 = v15;
  v19 = &v15[80 * v7];
  v21 = &v15[80 * v14];
  sub_20C2C9B74((uint64_t)(a1 + 2), (uint64_t)v19, a2, a3, a4, a5, a6);
  v20 = v19 + 80;
  sub_20C2C9BE4(a1, &v18);
  v16 = a1[1];
  sub_20C2C9DF8(&v18);
  return v16;
}

void sub_20C2C9B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2C9DF8((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C2C9B74(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4, uint64_t a5, uint64_t a6, __n128 *a7)
{
  int v7;
  __n128 result;

  v7 = *a4;
  *(_DWORD *)a2 = *a3;
  *(_DWORD *)(a2 + 4) = v7;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)a5;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a5 + 16);
  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)a6;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a6 + 16);
  *(_QWORD *)a6 = 0;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  result = *a7;
  *(__n128 *)(a2 + 56) = *a7;
  *(_QWORD *)(a2 + 72) = a7[1].n128_u64[0];
  a7->n128_u64[0] = 0;
  a7->n128_u64[1] = 0;
  a7[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_20C2C9BE4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C2C9C58((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C2C9C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 80;
      sub_20C2C9D0C(a1, (_QWORD *)(v7 - 80), v9);
      v7 = *((_QWORD *)&v16 + 1) - 80;
      *((_QWORD *)&v16 + 1) -= 80;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C2C9D74((uint64_t)v13);
  return v11;
}

__n128 sub_20C2C9D0C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  __n128 result;

  *a2 = *(_QWORD *)a3;
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 8);
  a2[3] = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  a2[4] = 0;
  a2[5] = 0;
  a2[6] = 0;
  *((_OWORD *)a2 + 2) = *(_OWORD *)(a3 + 32);
  a2[6] = *(_QWORD *)(a3 + 48);
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  a2[7] = 0;
  a2[8] = 0;
  a2[9] = 0;
  result = *(__n128 *)(a3 + 56);
  *(__n128 *)(a2 + 7) = result;
  a2[9] = *(_QWORD *)(a3 + 72);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  return result;
}

uint64_t sub_20C2C9D74(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C2C9DA8((uint64_t *)a1);
  return a1;
}

void sub_20C2C9DA8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_20C2B76CC(v3, v1);
      v1 += 80;
    }
    while (v1 != v2);
  }
}

void **sub_20C2C9DF8(void **a1)
{
  sub_20C2C9E28(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20C2C9E28(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 80;
    sub_20C2B76CC(v4, i - 80);
  }
}

uint64_t sub_20C2C9E6C(uint64_t a1, void *__dst, size_t __n)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  char v26;

  v5 = *(const void **)a1;
  v6 = **(_QWORD **)(a1 + 8);
  v8 = *(_QWORD *)(v6 + 24);
  v7 = *(_QWORD *)(v6 + 32);
  if (v8 > *(_QWORD *)a1 || *(_QWORD *)a1 + __n > v8 + v7)
  {
    v22 = "usd/crateFile.cpp";
    v23 = "Read";
    v24 = 613;
    v25 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<const pxrInternal__aapl__pxrReserved__::Usd_"
          "CrateFile::CrateFile::_FileMapping *>::Read(void *, size_t) [FileMappingPtr = const pxrInternal__aapl__pxrRese"
          "rved__::Usd_CrateFile::CrateFile::_FileMapping *]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", __n, (ptrdiff_t)v5 - v8, v7);
    memset(__dst, 153, __n);
    return 0;
  }
  if (*(_QWORD *)(a1 + 16))
  {
    v18 = sub_20C2A4C20(v8);
    v19 = sub_20C2A4C20(*(_QWORD *)a1);
    v20 = sub_20C2A4C20(*(_QWORD *)a1 + __n - 1);
    memset((void *)(*(_QWORD *)(a1 + 16) + v19 - v18), 1, v20 - v19 + 1);
    v5 = *(const void **)a1;
    v21 = **(_QWORD **)(a1 + 8);
    v8 = *(_QWORD *)(v21 + 24);
    v7 = *(_QWORD *)(v21 + 32);
  }
  v11 = v7 - ((unint64_t)v5 - v8);
  if (v11 < __n || ((v11 | ((size_t)v5 - v8)) & 0x8000000000000000) != 0)
  {
    v22 = "usd/crateFile.cpp";
    v23 = "Read";
    v24 = 631;
    v25 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<const pxrInternal__aapl__pxrReserved__::Usd_"
          "CrateFile::CrateFile::_FileMapping *>::Read(void *, size_t) [FileMappingPtr = const pxrInternal__aapl__pxrRese"
          "rved__::Usd_CrateFile::CrateFile::_FileMapping *]";
    v26 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v22, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", __n, v7 - ((unint64_t)v5 - v8), v7);
    return 0;
  }
  if (*(_DWORD *)(a1 + 24))
  {
    v12 = sub_20C2AEECC() & v8;
    v13 = *(int *)(a1 + 24);
    v14 = *(_QWORD *)a1 - v12;
    v15 = v12 + v14 / (v13 << 10) * (v13 << 10);
    v16 = (v13 << 10) * ((v14 + __n) / (v13 << 10)) + (v13 << 10);
    if (v16 >= v8 - v12 + *(_QWORD *)(**(_QWORD **)(a1 + 8) + 32))
      v16 = v8 - v12 + *(_QWORD *)(**(_QWORD **)(a1 + 8) + 32);
    pxrInternal__aapl__pxrReserved__::ArchMemAdvise(v15, v12 + v16 - v15, 1);
    v5 = *(const void **)a1;
  }
  memcpy(__dst, v5, __n);
  *(_QWORD *)a1 += __n;
  return 1;
}

uint64_t sub_20C2CA068(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  v3 = 16 * a3;
  if (16 * a3)
  {
    v5 = *(_QWORD **)(result + 8);
    do
    {
      v6 = v5[2];
      v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7)
        v8 = v6 - *v5 + 0x80000;
      else
        v8 = v3;
      v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4])
        v5[4] = v8 + v9;
      result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3)
        result = sub_20C2B209C((_BOOL8)v5);
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

uint64_t *sub_20C2CA10C(uint64_t *a1)
{
  void *v2;

  sub_20C2CA140(a1);
  v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

void sub_20C2CA140(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;

  v2 = a1[1] - *a1;
  if (v2)
  {
    v3 = 0;
    v4 = v2 >> 3;
    do
    {
      v5 = *a1;
      v6 = *(_QWORD *)(*a1 + 8 * v3);
      if (v6)
      {
        do
        {
          v7 = *(_QWORD *)(v6 + 16);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v6 + 4));
          v8 = sub_20BFD265C((_DWORD *)v6);
          operator delete(v8);
          v6 = v7;
        }
        while (v7);
        v5 = *a1;
      }
      *(_QWORD *)(v5 + 8 * v3++) = 0;
    }
    while (v3 != v4);
  }
  a1[3] = 0;
}

_DWORD *sub_20C2CA1C8(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_20C2CA1F4(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *result;
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5[2];
  _DWORD *v6;

  v6 = a2;
  result = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2CA328(a1, a2, &v6);
  v5[0] = result;
  v5[1] = v4;
  if ((_BYTE)v4)
  {
    sub_20C2CA240(a1, v5);
    return v5[0];
  }
  return result;
}

_DWORD *sub_20C2CA240(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  _DWORD v9[2];
  int v10;
  int v11;

  v3 = *a2;
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(*a2, &v10);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v10))
  {
    sub_20BFD6E54(&v8, &v10);
    sub_20BFD6EA4(v9, &v11);
    v9[1] = -1;
    v4 = sub_20C2CA1F4(a1, &v8);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v9);
    sub_20BFD265C(&v8);
    v5 = *(_QWORD *)(v4 + 24);
    if (v5)
      v6 = v5 | 1;
    else
      v6 = v4;
    *((_QWORD *)v3 + 4) = v6;
    *(_QWORD *)(v4 + 24) = v3;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v11);
  return sub_20BFD265C(&v10);
}

void sub_20C2CA304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, uint64_t a12, int a13)
{
  sub_20C2CA1C8(&a11);
  sub_20BFD1A18(&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2CA328(uint64_t a1, unsigned int *a2, _DWORD **a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _DWORD *v10;
  _DWORD *v11;

  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
  {
    sub_20C2CA46C((void **)a1);
    v6 = *(_QWORD *)(a1 + 32);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1
                + 8
                * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2)* (a2[1] + (unint64_t)*a2)) >> 1))) & v6));
  v8 = (_QWORD *)*v7;
  if (*v7)
  {
    v9 = (_QWORD *)*v7;
    while (*v9 != *(_QWORD *)a2)
    {
      v9 = (_QWORD *)v9[2];
      if (!v9)
        goto LABEL_7;
    }
  }
  else
  {
LABEL_7:
    if (*(_QWORD *)(a1 + 24) > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3))
    {
      sub_20C2CA46C((void **)a1);
      v7 = (_QWORD *)(*(_QWORD *)a1
                    + 8
                    * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & *(_QWORD *)(a1 + 32)));
      v8 = (_QWORD *)*v7;
    }
    v9 = operator new(0x28uLL);
    v10 = *a3;
    v11 = sub_20BFD6E54(v9, v10);
    sub_20BFD6EA4(v11 + 1, v10 + 1);
    *((_DWORD *)v9 + 2) = v10[2];
    v9[3] = 0;
    v9[4] = 0;
    v9[2] = v8;
    *v7 = v9;
    ++*(_QWORD *)(a1 + 24);
  }
  return v9;
}

void sub_20C2CA46C(void **a1)
{
  char *v2;
  unsigned __int8 v3;
  _QWORD *v4;
  _BOOL4 v5;
  unint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  unint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v17;
  void *v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;

  sub_20BEB59B0((uint64_t)&v21, (uint64_t)"Sdf", (uint64_t)"SdfPathTable::_Grow");
  v3 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v3 & 1) != 0)
  {
    v4 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("void pxrInternal__aapl__pxrReserved__::SdfPathTable<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::PathIndex>::_Grow() [MappedType = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::PathIndex]", 0, v2);
    v5 = v4 != 0;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  v19 = v4;
  v20 = v5;
  v6 = (2 * (_QWORD)a1[4]) | 1;
  if (v6 <= 7)
    v6 = 7;
  a1[4] = (void *)v6;
  sub_20C2CA620(&v17, v6 + 1);
  v7 = a1[1];
  if (v7 != *a1)
  {
    v8 = 0;
    v9 = (v7 - (_BYTE *)*a1) >> 3;
    do
    {
      v10 = (unsigned int *)*((_QWORD *)*a1 + v8);
      if (v10)
      {
        v11 = (unint64_t)a1[4];
        do
        {
          v12 = (unsigned int *)*((_QWORD *)v10 + 2);
          v13 = bswap64(0x9E3779B97F4A7C55* (v10[1]+ ((v10[1]+ (unint64_t)*v10+ (v10[1] + (unint64_t)*v10) * (v10[1] + (unint64_t)*v10)) >> 1))) & v11;
          v14 = v17;
          *((_QWORD *)v10 + 2) = *(_QWORD *)(v17 + 8 * v13);
          *(_QWORD *)(v14 + 8 * v13) = v10;
          v10 = v12;
        }
        while (v12);
      }
      ++v8;
    }
    while (v8 != v9);
    v7 = *a1;
  }
  *(_OWORD *)a1 = v17;
  v15 = a1[2];
  a1[2] = v18;
  *(_QWORD *)&v17 = v7;
  v18 = v15;
  if (v7)
  {
    *((_QWORD *)&v17 + 1) = v7;
    operator delete(v7);
  }
  v20 = v5 - 1;
  if (v5)
  {
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End((uint64_t)v4);
    v20 = v5 | 0xFFFFFFFE;
  }
  while (v22--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v21);
}

void sub_20C2CA5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BEB24F4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2CA620(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDDF654(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20C2CA678(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2CA694(_QWORD *a1, unsigned int *a2)
{
  _QWORD *result;

  if (!a1[3])
    return 0;
  for (result = *(_QWORD **)(*a1
                            + 8
                            * (bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1]+ (unint64_t)*a2+ (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))) & a1[4]));
        result;
        result = (_QWORD *)result[2])
  {
    if (*result == *(_QWORD *)a2)
      break;
  }
  return result;
}

unint64_t sub_20C2CA6FC(uint64_t a1)
{
  uint64_t i;
  unint64_t result;
  BOOL v4;

  if (!*(_QWORD *)a1)
    return 0;
  for (i = *(_QWORD *)(*(_QWORD *)a1 + 32); ; i = *(_QWORD *)(result + 32))
  {
    result = i & 0xFFFFFFFFFFFFFFF8;
    if ((i & 7) != 0 && result != 0)
      break;
    if (result)
      v4 = (i & 7) == 0;
    else
      v4 = 0;
    if (!v4)
      return 0;
  }
  return result;
}

uint64_t sub_20C2CA738(uint64_t a1, char *__src)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = 16;
  do
  {
    v5 = v3[2];
    v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6)
      v7 = v5 - *v3 + 0x80000;
    else
      v7 = v4;
    v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4])
      v3[4] = v7 + v8;
    result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4)
      result = sub_20C2B209C((_BOOL8)v3);
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

uint64_t sub_20C2CA7D8(uint64_t a1, char *__src)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = 12;
  do
  {
    v5 = v3[2];
    v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6)
      v7 = v5 - *v3 + 0x80000;
    else
      v7 = v4;
    v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4])
      v3[4] = v7 + v8;
    result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4)
      result = sub_20C2B209C((_BOOL8)v3);
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

uint64_t *sub_20C2CA878(__int128 *a1)
{
  pxrInternal__aapl__pxrReserved__ *v1;
  _BOOL8 HasConcurrency;
  uint64_t DetachedDispatcher;
  _QWORD *v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  __int128 v7[2];

  v1 = (pxrInternal__aapl__pxrReserved__ *)sub_20C2CAA0C((uint64_t)v7, a1);
  HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v1);
  if (HasConcurrency)
  {
    DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    v4 = sub_20C2CAA84(DetachedDispatcher, v7);
    v5 = (pxrInternal__aapl__pxrReserved__ *)(**(uint64_t (***)(_QWORD, _QWORD *, uint64_t))*(v4 - 5))(*(v4 - 5), v4, (uint64_t)(v4 - 1));
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v5);
  }
  else
  {
    sub_20C2CA970();
  }
  return sub_20C2CA10C((uint64_t *)v7);
}

void sub_20C2CA8E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2CA10C((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20C2CA8FC(__int128 *a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v7;
  uint64_t v8;
  __int128 v9;

  if (a1 != a2)
  {
    v3 = *((_QWORD *)a2 + 2);
    v4 = *a2;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *((_QWORD *)a2 + 4) = 0;
    v7 = *a1;
    *a1 = v4;
    v8 = *((_QWORD *)a1 + 2);
    *((_QWORD *)a1 + 2) = v3;
    v9 = *(__int128 *)((char *)a1 + 24);
    *(__int128 *)((char *)a1 + 24) = v5;
    sub_20C2CA10C((uint64_t *)&v7);
  }
  return a1;
}

void sub_20C2CA970()
{
  unint64_t *Instance;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v1 = sub_20BEC5244(&v3, 0);
  v4 = 0;
  v2 = (_QWORD *)sub_20BEB5B80(Instance + 19, &v4);
  if (v2 != v1)
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v1, v2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_20C2CA9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2CAA0C(uint64_t a1, __int128 *a2)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0uLL;
  v6 = 0;
  v7 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_20C2CA8FC((__int128 *)a1, a2);
  sub_20C2CA8FC(a2, &v5);
  sub_20C2CA10C((uint64_t *)&v5);
  return a1;
}

void sub_20C2CAA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  sub_20C2CA10C((uint64_t *)va);
  sub_20C2CA10C(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2CAA84(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  v5 = (_QWORD *)tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x38uLL);
  *((_BYTE *)v5 - 11) = 1;
  *v5 = &unk_24C52F480;
  sub_20C2CAA0C((uint64_t)(v5 + 1), a2);
  v5[6] = a1 + 264;
  return v5;
}

void sub_20C2CAAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  tbb::task *v9;

  tbb::internal::allocate_additional_child_of_proxy::free((tbb::internal::allocate_additional_child_of_proxy *)&a9, v9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2CAB14(_QWORD *a1)
{
  *a1 = &unk_24C52F480;
  sub_20C2CA10C(a1 + 1);
  return a1;
}

void sub_20C2CAB48(uint64_t *a1)
{
  *a1 = (uint64_t)&unk_24C52F480;
  sub_20C2CA10C(a1 + 1);
  operator delete(a1);
}

uint64_t sub_20C2CAB7C(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C2CA970();
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C2CAC08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

void sub_20C2CAC1C(void ***a1)
{
  void **v1;
  _DWORD *v2;
  _DWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        sub_20C2CACA0((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_20C2CACA0(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);
  return sub_20BFD265C(a2);
}

uint64_t sub_20C2CACCC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C2CAD40((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C2CAD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      sub_20BFD38A4((_DWORD *)(v7 - 12), (_DWORD *)(v9 - 12));
      sub_20BFD38DC((_DWORD *)(v7 - 8), (_DWORD *)(v9 - 8));
      *(_DWORD *)(v7 - 4) = *(_DWORD *)(v9 - 4);
      v7 = *((_QWORD *)&v15 + 1) - 12;
      *((_QWORD *)&v15 + 1) -= 12;
      v9 -= 12;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  sub_20C2CADFC((uint64_t)v12);
  return v10;
}

uint64_t sub_20C2CADFC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C2CAE30((uint64_t *)a1);
  return a1;
}

uint64_t *sub_20C2CAE30(uint64_t *result)
{
  _DWORD *v1;
  _DWORD *v2;
  uint64_t v3;

  v1 = *(_DWORD **)(result[2] + 8);
  v2 = *(_DWORD **)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)sub_20C2CACA0(v3, v1);
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

void **sub_20C2CAE80(void **a1)
{
  sub_20C2CAEB0(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

_DWORD *sub_20C2CAEB0(_DWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;
  uint64_t v4;

  v2 = *((_QWORD *)result + 1);
  v1 = *((_QWORD *)result + 2);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *((_QWORD *)v3 + 4);
      *((_QWORD *)v3 + 2) = v1 - 12;
      result = sub_20C2CACA0(v4, (_DWORD *)(v1 - 12));
      v1 = *((_QWORD *)v3 + 2);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_20C2CAEF4(uint64_t *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v16[5];

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
  v6 = v5 + 1;
  if (v5 + 1 > 0x1555555555555555)
    sub_20BDDF694();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 2);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0xAAAAAAAAAAAAAAALL)
    v11 = 0x1555555555555555;
  else
    v11 = v6;
  v16[4] = a1 + 2;
  if (v11)
    v12 = (char *)sub_20C152228(v9, v11);
  else
    v12 = 0;
  v13 = &v12[12 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v16[3] = &v12[12 * v11];
  sub_20BFD6E54(v13, a2);
  sub_20BFD6EA4((_DWORD *)v13 + 1, a2 + 1);
  *((_DWORD *)v13 + 2) = *a3;
  v16[2] = v13 + 12;
  sub_20C2CACCC(a1, v16);
  v14 = a1[1];
  sub_20C2CAE80(v16);
  return v14;
}

void sub_20C2CAFF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2CAE80((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2CB00C(uint64_t result, int *a2, uint64_t a3, char a4)
{
  int *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  int *v9;
  uint64_t v10;
  unint64_t v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  char v17;
  int *v18;
  pxrInternal__aapl__pxrReserved__::SdfPath *v19;
  int *v20;
  int v21;
  BOOL v22;
  BOOL v23;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  pxrInternal__aapl__pxrReserved__::SdfPath *v29;
  uint64_t v30;
  int *v31;
  pxrInternal__aapl__pxrReserved__::SdfPath *v32;
  uint64_t v33;
  int *v34;
  int *v35;
  int *v36;
  int64_t v37;
  int64_t v38;
  uint64_t v39;
  int *v40;
  int *v41;
  int *v42;
  int *v43;
  uint64_t v44;
  int64_t v45;
  int *v46;
  uint64_t v47;
  int *v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  int *v54;
  int *v55;
  int *v56;
  pxrInternal__aapl__pxrReserved__::SdfPath *v58;
  int *v59;
  int *v60;
  int *v61;
  char v62;
  int *v63;
  int *v64;
  int *v65;
  int64_t v66;
  int *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;

  v7 = (int *)result;
LABEL_2:
  v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 3);
  v63 = a2 - 9;
  v65 = a2 - 6;
  v9 = v7;
  v67 = a2;
  while (2)
  {
    v7 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * (v10 >> 2);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = sub_20BFD758C(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v7);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v7, (int *)v8);
          result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v7 + 1, a2 - 2);
          v28 = v7[2];
          v7[2] = *(a2 - 1);
          *(a2 - 1) = v28;
        }
        return result;
      case 3uLL:
        return sub_20C2CBD50(v7, v7 + 3, (int *)v8);
      case 4uLL:
        return sub_20C2CC0F0(v7, v7 + 3, v7 + 6, (int *)v8);
      case 5uLL:
        return sub_20C2CBC24(v7, v7 + 3, v7 + 6, v7 + 9, (int *)v8);
      default:
        if (v10 <= 287)
        {
          if ((a4 & 1) != 0)
          {
            if (v7 != a2)
            {
              v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 3);
              if (v7 + 3 != a2)
              {
                v30 = 0;
                v31 = v7;
                do
                {
                  v32 = v29;
                  result = sub_20BFD758C(v29, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v31);
                  if ((_DWORD)result)
                  {
                    v71 = *(_DWORD *)v32;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v32);
                    v72 = v31[4];
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v31 + 4);
                    v73 = v31[5];
                    v33 = v30;
                    while (1)
                    {
                      v34 = (int *)((char *)v7 + v33);
                      sub_20BFD3EBC((int *)((char *)v7 + v33 + 12), (int *)((char *)v7 + v33));
                      v35 = (int *)((char *)v7 + v33 + 4);
                      sub_20BFD3F10(v34 + 4, v34 + 1);
                      v34[5] = v34[2];
                      if (!v33)
                        break;
                      v33 -= 12;
                      if ((sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v34 - 3)) & 1) == 0)
                      {
                        v36 = (int *)((char *)v7 + v33 + 12);
                        goto LABEL_68;
                      }
                    }
                    v36 = v7;
LABEL_68:
                    sub_20BFD3EBC(v36, &v71);
                    sub_20BFD3F10(v35, &v72);
                    v36[2] = v73;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
                    a2 = v67;
                    result = (uint64_t)sub_20BFD265C(&v71);
                  }
                  v29 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v32 + 12);
                  v30 += 12;
                  v31 = (int *)v32;
                }
                while ((int *)((char *)v32 + 12) != a2);
              }
            }
          }
          else if (v7 != a2)
          {
            v58 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 3);
            if (v7 + 3 != a2)
            {
              v59 = v7 + 5;
              do
              {
                v60 = (int *)v58;
                result = sub_20BFD758C(v58, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v7);
                if ((_DWORD)result)
                {
                  v71 = *v60;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v60);
                  v72 = v7[4];
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v7 + 4);
                  v73 = v7[5];
                  v61 = v59;
                  do
                  {
                    sub_20BFD3EBC(v61 - 2, v61 - 5);
                    sub_20BFD3F10(v61 - 1, v61 - 4);
                    *v61 = *(v61 - 3);
                    v62 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v61 - 8));
                    v61 -= 3;
                  }
                  while ((v62 & 1) != 0);
                  sub_20BFD3EBC(v61 - 2, &v71);
                  sub_20BFD3F10(v61 - 1, &v72);
                  *v61 = v73;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
                  result = (uint64_t)sub_20BFD265C(&v71);
                }
                v58 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v60 + 3);
                v59 += 3;
                v7 = v60;
              }
              while (v60 + 3 != a2);
            }
          }
          return result;
        }
        if (!a3)
        {
          if (v7 != a2)
          {
            v66 = (v11 - 2) >> 1;
            v37 = v66;
            do
            {
              v38 = v37;
              if (v66 >= v37)
              {
                v39 = (2 * v37) | 1;
                v40 = &v7[3 * v39];
                if (2 * v37 + 2 < (uint64_t)v11
                  && sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7[3 * v39], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v40 + 3)))
                {
                  v40 += 3;
                  v39 = 2 * v38 + 2;
                }
                v41 = &v7[3 * v38];
                if ((sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v41) & 1) == 0)
                {
                  v71 = *v41;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(&v7[3 * v38]);
                  v72 = v41[1];
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v41 + 1);
                  v73 = v7[3 * v38 + 2];
                  do
                  {
                    v42 = v40;
                    sub_20BFD3EBC(v41, v40);
                    v43 = v40 + 1;
                    sub_20BFD3F10(v41 + 1, v40 + 1);
                    v41[2] = v40[2];
                    if (v66 < v39)
                      break;
                    v44 = (2 * v39) | 1;
                    v40 = &v7[3 * v44];
                    v39 = 2 * v39 + 2;
                    if (v39 >= (uint64_t)v11)
                    {
                      v39 = v44;
                    }
                    else if (sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7[3 * v44], (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v40 + 3)))
                    {
                      v40 += 3;
                    }
                    else
                    {
                      v39 = v44;
                    }
                    v41 = v42;
                  }
                  while (!sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71));
                  sub_20BFD3EBC(v42, &v71);
                  sub_20BFD3F10(v43, &v72);
                  v42[2] = v73;
                  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
                  sub_20BFD265C(&v71);
                }
              }
              v37 = v38 - 1;
            }
            while (v38);
            v45 = v10 / 0xCuLL;
            v64 = v7 + 1;
            v46 = v67;
            do
            {
              v68 = *v7;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v7);
              v69 = *v64;
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v64);
              v47 = 0;
              v70 = v7[2];
              v48 = v7;
              do
              {
                v49 = &v48[3 * v47 + 3];
                v50 = (2 * v47) | 1;
                v51 = 2 * v47 + 2;
                if (v51 < v45
                  && sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48[3 * v47 + 3], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48[3 * v47 + 6]))
                {
                  v49 += 3;
                  v50 = v51;
                }
                sub_20BFD3EBC(v48, v49);
                sub_20BFD3F10(v48 + 1, v49 + 1);
                v48[2] = v49[2];
                v48 = v49;
                v47 = v50;
              }
              while (v50 <= (uint64_t)((unint64_t)(v45 - 2) >> 1));
              if (v49 == v46 - 3)
              {
                sub_20BFD3EBC(v49, &v68);
                sub_20BFD3F10(v49 + 1, &v69);
                v49[2] = v70;
              }
              else
              {
                sub_20BFD3EBC(v49, v46 - 3);
                sub_20BFD3F10(v49 + 1, v46 - 2);
                v49[2] = *(v46 - 1);
                sub_20BFD3EBC(v46 - 3, &v68);
                sub_20BFD3F10(v46 - 2, &v69);
                *(v46 - 1) = v70;
                v52 = (char *)v49 - (char *)v7 + 12;
                if (v52 >= 13)
                {
                  v53 = (v52 / 0xCuLL - 2) >> 1;
                  v54 = &v7[3 * v53];
                  if (sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)v54, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v49))
                  {
                    v71 = *v49;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v49);
                    v72 = v49[1];
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v49 + 1);
                    v73 = v49[2];
                    do
                    {
                      v55 = v54;
                      sub_20BFD3EBC(v49, v54);
                      v56 = v54 + 1;
                      sub_20BFD3F10(v49 + 1, v54 + 1);
                      v49[2] = v54[2];
                      if (!v53)
                        break;
                      v53 = (v53 - 1) >> 1;
                      v54 = &v7[3 * v53];
                      v49 = v55;
                    }
                    while ((sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)v54, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71) & 1) != 0);
                    sub_20BFD3EBC(v55, &v71);
                    sub_20BFD3F10(v56, &v72);
                    v55[2] = v73;
                    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
                    sub_20BFD265C(&v71);
                  }
                }
              }
              pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v69);
              result = (uint64_t)sub_20BFD265C(&v68);
              v46 -= 3;
            }
            while (v45-- > 2);
          }
          return result;
        }
        v12 = &v7[3 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x601)
        {
          sub_20C2CBD50(&v7[3 * (v11 >> 1)], v7, (int *)v8);
        }
        else
        {
          sub_20C2CBD50(v7, &v7[3 * (v11 >> 1)], (int *)v8);
          v13 = 3 * (v11 >> 1);
          v14 = &v7[3 * (v11 >> 1)];
          sub_20C2CBD50(v7 + 3, v14 - 3, v65);
          sub_20C2CBD50(v7 + 6, &v7[v13 + 3], v63);
          sub_20C2CBD50(v14 - 3, v12, &v7[v13 + 3]);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v7, v12);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v7 + 1, v12 + 1);
          v15 = v7[2];
          v7[2] = v14[2];
          v14[2] = v15;
        }
        --a3;
        a2 = v67;
        if ((a4 & 1) == 0
          && (sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 - 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)v7) & 1) == 0)
        {
          v71 = *v7;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v7);
          v72 = v7[1];
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v7 + 1);
          v73 = v7[2];
          if ((sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, v8) & 1) != 0)
          {
            v9 = v7;
            do
              v9 += 3;
            while ((sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9) & 1) == 0);
          }
          else
          {
            v24 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v7 + 3);
            do
            {
              v9 = (int *)v24;
              if (v24 >= (const pxrInternal__aapl__pxrReserved__::SdfPath *)v67)
                break;
              v25 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, v24);
              v24 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 3);
            }
            while (!v25);
          }
          v26 = v67;
          if (v9 < v67)
          {
            v26 = v67;
            do
              v26 -= 3;
            while ((sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v26) & 1) != 0);
          }
          while (v9 < v26)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v9, v26);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9 + 1, v26 + 1);
            v27 = v9[2];
            v9[2] = v26[2];
            v26[2] = v27;
            do
              v9 += 3;
            while (!sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v9));
            do
              v26 -= 3;
            while ((sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v71, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v26) & 1) != 0);
          }
          if (v9 - 3 != v7)
          {
            sub_20BFD3EBC(v7, v9 - 3);
            sub_20BFD3F10(v7 + 1, v9 - 2);
            v7[2] = *(v9 - 1);
          }
          sub_20BFD3EBC(v9 - 3, &v71);
          sub_20BFD3F10(v9 - 2, &v72);
          *(v9 - 1) = v73;
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
          result = (uint64_t)sub_20BFD265C(&v71);
          a4 = 0;
          continue;
        }
        v71 = *v7;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v7);
        v72 = v7[1];
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=(v7 + 1);
        v16 = 0;
        v73 = v7[2];
        do
        {
          v17 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7[v16 + 3], (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71);
          v16 += 3;
        }
        while ((v17 & 1) != 0);
        v18 = &v7[v16];
        v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v67;
        if (v16 == 3)
        {
          v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)v67;
          do
          {
            if (v18 >= (int *)v19)
              break;
            v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v19 - 12);
          }
          while ((sub_20BFD758C(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71) & 1) == 0);
        }
        else
        {
          do
            v19 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v19 - 12);
          while (!sub_20BFD758C(v19, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71));
        }
        v9 = &v7[v16];
        if (v18 < (int *)v19)
        {
          v20 = (int *)v19;
          do
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(v9, v20);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v9 + 1, v20 + 1);
            v21 = v9[2];
            v9[2] = v20[2];
            v20[2] = v21;
            do
              v9 += 3;
            while ((sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)v9, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71) & 1) != 0);
            do
              v20 -= 3;
            while (!sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v71));
          }
          while (v9 < v20);
        }
        if (v9 - 3 != v7)
        {
          sub_20BFD3EBC(v7, v9 - 3);
          sub_20BFD3F10(v7 + 1, v9 - 2);
          v7[2] = *(v9 - 1);
        }
        sub_20BFD3EBC(v9 - 3, &v71);
        sub_20BFD3F10(v9 - 2, &v72);
        *(v9 - 1) = v73;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v72);
        sub_20BFD265C(&v71);
        v22 = v18 >= (int *)v19;
        a2 = v67;
        if (!v22)
        {
LABEL_31:
          result = sub_20C2CB00C(v7, v9 - 3, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v23 = sub_20C2CBE98(v7, v9 - 3);
        result = sub_20C2CBE98(v9, v67);
        if (!(_DWORD)result)
        {
          if (v23)
            continue;
          goto LABEL_31;
        }
        a2 = v9 - 3;
        if (!v23)
          goto LABEL_2;
        return result;
    }
  }
}

void sub_20C2CBB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16)
{
  _DWORD *v16;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v16);
  sub_20BFD265C(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2CBC24(int *a1, int *a2, int *a3, int *a4, int *a5)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  int v14;

  sub_20C2CC0F0(a1, a2, a3, a4);
  result = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a5, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a4);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a4, a5);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a4 + 1, a5 + 1);
    v11 = a4[2];
    a4[2] = a5[2];
    a5[2] = v11;
    result = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
    if ((_DWORD)result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
      v12 = a3[2];
      a3[2] = a4[2];
      a4[2] = v12;
      result = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      if ((_DWORD)result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
        v13 = a2[2];
        a2[2] = a3[2];
        a3[2] = v13;
        result = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
          result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
          v14 = a1[2];
          a1[2] = a2[2];
          a2[2] = v14;
        }
      }
    }
  }
  return result;
}

uint64_t sub_20C2CBD50(int *a1, int *a2, int *a3)
{
  char v6;
  uint64_t result;
  int *v8;
  int *v9;
  int *v10;
  int v11;
  int *v12;
  int v13;
  int v14;

  v6 = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  result = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if ((v6 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v8 = a1 + 2;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a3);
      v9 = a3 + 1;
      v10 = a1 + 1;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
      v8 = a2 + 2;
      v13 = a1[2];
      a1[2] = a2[2];
      a2[2] = v13;
      result = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      if (!(_DWORD)result)
        return result;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      v9 = a3 + 1;
      v10 = a2 + 1;
    }
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v10, v9);
    v12 = a3 + 2;
    goto LABEL_10;
  }
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
    v12 = a2 + 2;
    v11 = a2[2];
    a2[2] = a3[2];
    a3[2] = v11;
    result = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
    if ((_DWORD)result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
      result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
      v8 = a1 + 2;
LABEL_10:
      v14 = *v8;
      *v8 = *v12;
      *v12 = v14;
    }
  }
  return result;
}

BOOL sub_20C2CBE98(int *a1, int *a2)
{
  unint64_t v4;
  _BOOL8 result;
  int v6;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v7;
  pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  int v16;

  v4 = 0xAAAAAAAAAAAAAAABLL * (a2 - a1);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 - 3), (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1))
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2 - 3);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 - 2);
        v6 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v6;
      }
      return 1;
    case 3uLL:
      sub_20C2CBD50(a1, a1 + 3, a2 - 3);
      return 1;
    case 4uLL:
      sub_20C2CC0F0(a1, a1 + 3, a1 + 6, a2 - 3);
      return 1;
    case 5uLL:
      sub_20C2CBC24(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return 1;
    default:
      v7 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 6);
      sub_20C2CBD50(a1, a1 + 3, a1 + 6);
      v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 9);
      if (a1 + 9 == a2)
        return 1;
      v9 = 0;
      v10 = 0;
      break;
  }
  while (1)
  {
    if (sub_20BFD758C(v8, v7))
    {
      v14 = *(_DWORD *)v8;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator=(v8);
      v15 = *((_DWORD *)v8 + 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator=((_DWORD *)v8 + 1);
      v16 = *((_DWORD *)v8 + 2);
      v11 = v9;
      while (1)
      {
        v12 = (int *)((char *)a1 + v11);
        sub_20BFD3EBC((int *)((char *)a1 + v11 + 36), (int *)((char *)a1 + v11 + 24));
        sub_20BFD3F10(v12 + 10, v12 + 7);
        v12[11] = v12[8];
        if (v11 == -24)
          break;
        v11 -= 12;
        if ((sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v12 + 3)) & 1) == 0)
        {
          v13 = (int *)((char *)a1 + v11 + 36);
          goto LABEL_12;
        }
      }
      v13 = a1;
LABEL_12:
      sub_20BFD3EBC(v13, &v14);
      sub_20BFD3F10(v12 + 7, &v15);
      v13[2] = v16;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
      ++v10;
      sub_20BFD265C(&v14);
      if (v10 == 8)
        return (int *)((char *)v8 + 12) == a2;
    }
    v7 = v8;
    v9 += 12;
    v8 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v8 + 12);
    if (v8 == (pxrInternal__aapl__pxrReserved__::SdfPath *)a2)
      return 1;
  }
}

void sub_20C2CC0DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10)
{
  sub_20C2CA1C8(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2CC0F0(int *a1, int *a2, int *a3, int *a4)
{
  uint64_t result;
  int v9;
  int v10;
  int v11;

  sub_20C2CBD50(a1, a2, a3);
  result = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a3);
  if ((_DWORD)result)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a3, a4);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a3 + 1, a4 + 1);
    v9 = a3[2];
    a3[2] = a4[2];
    a4[2] = v9;
    result = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
    if ((_DWORD)result)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a2, a3);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a2 + 1, a3 + 1);
      v10 = a2[2];
      a2[2] = a3[2];
      a3[2] = v10;
      result = sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
      if ((_DWORD)result)
      {
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap(a1, a2);
        result = (uint64_t)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(a1 + 1, a2 + 1);
        v11 = a1[2];
        a1[2] = a2[2];
        a2[2] = v11;
      }
    }
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfPath *sub_20C2CC1DC(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a1, _QWORD *a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  unint64_t v13;
  uint64_t v14;
  BOOL v15;
  _BOOL4 v16;
  int IsPrimPropertyPath;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  int IndexForToken;
  int v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int *v30;
  unint64_t v31;

  while (a3 != a4)
  {
    v12 = a3;
    while (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(v12, a3))
    {
      v12 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v12 + 12);
      if (v12 == a4)
      {
        v12 = a4;
        break;
      }
    }
    if ((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a3 + 12) == v12)
    {
      v15 = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a3 + 12), &v31);
      v13 = v31;
      v14 = *(_QWORD *)a3;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
      v15 = v13 == v14;
      sub_20BFD265C(&v31);
    }
    if (v12 == a4)
    {
      v16 = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(v12, &v31);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a3, &v30);
      v16 = v31 == (_QWORD)v30;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v30 + 1);
      sub_20BFD265C(&v30);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
      sub_20BFD265C(&v31);
    }
    IsPrimPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(a3);
    if (IsPrimPropertyPath)
    {
      v18 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a3);
      v31 = v18;
      if ((v18 & 7) != 0)
      {
        v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 2, v19));
        if ((v20 & 1) == 0)
          v31 &= 0xFFFFFFFFFFFFFFF8;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetElementToken(a3, (unsigned int **)&v31);
    }
    v21 = (*a2)++;
    *(_DWORD *)(*a5 + 4 * v21) = *((_DWORD *)a3 + 2);
    IndexForToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetIndexForToken(a1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v31);
    if (IsPrimPropertyPath)
      v23 = -IndexForToken;
    else
      v23 = IndexForToken;
    *(_DWORD *)(*a6 + 4 * v21) = v23;
    if (v15)
    {
      a3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C2CC1DC(a1, a2, (char *)a3 + 12, a4, a5);
      if (v16)
        *(_DWORD *)(*a7 + 4 * v21) = *(_DWORD *)a2 - v21;
      else
        *(_DWORD *)(*a7 + 4 * v21) = -1;
    }
    else
    {
      v24 = *a7;
      if (v16)
        *(_DWORD *)(v24 + 4 * v21) = 0;
      else
        *(_DWORD *)(v24 + 4 * v21) = -2;
      a3 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a3 + 12);
    }
    if ((v31 & 7) != 0)
    {
      v25 = (unsigned int *)(v31 & 0xFFFFFFFFFFFFFFF8);
      do
        v26 = __ldxr(v25);
      while (__stlxr(v26 - 2, v25));
    }
    if (!v16)
      return a3;
  }
  return a4;
}

void sub_20C2CC440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unsigned int *v14;
  unsigned int v15;

  if ((a14 & 7) != 0)
  {
    v14 = (unsigned int *)(a14 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  _Unwind_Resume(exception_object);
}

char *sub_20C2CC48C(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if (a4)
  {
    v6 = result;
    result = sub_20BE90F0C(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *((_DWORD *)a2 + 2);
      v9 = *a2;
      a2 = (uint64_t *)((char *)a2 + 12);
      *(_QWORD *)(v7 + 4) = v9;
      *(_DWORD *)(v7 + 12) = v8;
      v7 += 16;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_20C2CC4EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2CC508(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  v3 = 12 * a3;
  if (12 * a3)
  {
    v5 = *(_QWORD **)(result + 8);
    do
    {
      v6 = v5[2];
      v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7)
        v8 = v6 - *v5 + 0x80000;
      else
        v8 = v3;
      v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4])
        v5[4] = v8 + v9;
      result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3)
        result = sub_20C2B209C((_BOOL8)v5);
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_20C2CC5B0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C52F4C8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 60));
  sub_20BFD265C((_DWORD *)(a1 + 56));
  return a1;
}

void sub_20C2CC5EC(_DWORD *a1)
{
  *(_QWORD *)a1 = off_24C52F4C8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 15);
  sub_20BFD265C(a1 + 14);
  operator delete(a1);
}

uint64_t sub_20C2CC628(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t *Instance;
  unint64_t v9;
  unint64_t v10;
  unint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
  v2 = *(_QWORD **)(a1 + 8);
  sub_20C2BBAF8((uint64_t)&v15, "Usd", "Usd_CrateDataImpl::Open", "Usd_CrateFile::CrateFile::Open", "_ReadPaths");
  v3 = *(_QWORD **)(a1 + 16);
  v4 = *(_QWORD **)(a1 + 24);
  v5 = *(_QWORD **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 40);
  sub_20BFD6E54(&v13, (_DWORD *)(a1 + 56));
  sub_20BFD6EA4(&v14, (_DWORD *)(a1 + 60));
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_BuildDecompressedPathsImpl(v2, v3, v4, v5, v6, &v13, *(_QWORD *)(a1 + 48));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
  sub_20BFD265C(&v13);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v9 = v12;
  v10 = atomic_load(Instance + 18);
  if (v9 < v10
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v12, *(_QWORD *)(a1 + 64));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v12);
  return 0;
}

void sub_20C2CC768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, char a12)
{
  sub_20BFD1A18(&a10);
  sub_20BEB24F4((uint64_t)&a12);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2CC798(uint64_t a1, unsigned int *a2, _DWORD *a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C2CCA04(a1, v6, a3, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C2B7204((uint64_t)v21, 0);
  return v10;
}

void sub_20C2CC9EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C2B7204((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C2CCA04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _DWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x20uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *v10 = 0;
  v10[1] = a2;
  sub_20BFD6E54((_DWORD *)v10 + 4, a3);
  result = sub_20BFD6EA4((_DWORD *)v10 + 5, a3 + 1);
  *((_DWORD *)v10 + 6) = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

uint64_t sub_20C2CCA78(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDDF6A8(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[8 * v4];
  v16 = &v10[8 * v9];
  sub_20BFD6E54(v14, a2);
  sub_20BFD6EA4((_DWORD *)v14 + 1, a2 + 1);
  v15 = v14 + 8;
  sub_20BFD797C(a1, &v13);
  v11 = a1[1];
  sub_20BFD7B28(&v13);
  return v11;
}

void sub_20C2CCB50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD7B28((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2CCB64(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  _QWORD *v13;
  _QWORD *result;
  unint64_t v15;
  char *v16;
  char *v17;
  unsigned int *i;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD v27[3];

  v9 = sub_20C2B16A8((uint64_t)v27, (unsigned int **)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v13 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      result = (_QWORD *)*v13;
      if (*v13)
      {
        do
        {
          v15 = result[1];
          if (v15 == v10)
          {
            v17 = (char *)result[2];
            v16 = (char *)result[3];
            if (v16 - v17 == *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
            {
              if (v17 == v16)
                return result;
              for (i = *(unsigned int **)a2; *(_DWORD *)v17 == *i; ++i)
              {
                v17 += 4;
                if (v17 == v16)
                  return result;
              }
            }
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          result = (_QWORD *)*result;
        }
        while (result);
      }
    }
  }
  sub_20C2CCDFC(a1, v10, a3, a4, (uint64_t)v27);
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v11 || (float)(v20 * (float)v11) < v19)
  {
    v21 = 1;
    if (v11 >= 3)
      v21 = (v11 & (v11 - 1)) != 0;
    v22 = v21 | (2 * v11);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_20BDEC6E0(a1, v24);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v27[0] = *v25;
    *v25 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v26 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v26 >= v11)
          v26 %= v11;
      }
      else
      {
        v26 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v26) = v27[0];
    }
  }
  result = (_QWORD *)v27[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_20C2CCDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    sub_20C2B1784((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2CCDFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x30uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *v10 = 0;
  v10[1] = a2;
  v10[3] = 0;
  v10[4] = 0;
  v10[2] = 0;
  result = sub_20C2B170C(v10 + 2, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *((_DWORD *)v10 + 10) = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C2CCE88(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  sub_20C2B1784(v3, v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2CCEA4(uint64_t a1, uint64_t a2, _OWORD *a3, _DWORD *a4)
{
  unint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  _QWORD *v15;
  unint64_t v16;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v8 = *(unsigned int *)(a2 + 4);
  v9 = bswap64(0x9E3779B97F4A7C55 * v8);
  v10 = *(_QWORD *)(a2 + 8);
  v11 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * (v10 + ((v9 + v10 + (v9 + v10) * (v9 + v10)) >> 1))));
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        do
        {
          v16 = v15[1];
          if (v16 == v11)
          {
            if (*((_DWORD *)v15 + 5) == (_DWORD)v8 && v15[3] == v10)
              return v15;
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12)
                v16 %= v12;
            }
            else
            {
              v16 &= v12 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
    }
  }
  v15 = operator new(0x28uLL);
  *v15 = 0;
  v15[1] = v11;
  *((_OWORD *)v15 + 1) = *a3;
  *((_DWORD *)v15 + 8) = *a4;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_20BDEC6E0(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *v15 = *v25;
LABEL_42:
    *v25 = v15;
    goto LABEL_43;
  }
  *v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v24 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    v26 = *(_QWORD *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v26 >= v12)
        v26 %= v12;
    }
    else
    {
      v26 &= v12 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20C2CD0FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_20C2CD110(uint64_t a1, unsigned __int8 *a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4;
  unsigned __int8 *v7;
  char *v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  unsigned __int8 **v24;
  unint64_t v25;
  unsigned __int8 *v27;
  char v28;

  v7 = a2;
  v27 = 0;
  v28 = 0;
  v9 = (char *)*((_QWORD *)a2 + 1);
  if ((a2[23] & 0x80u) == 0)
  {
    v10 = (char *)a2[23];
  }
  else
  {
    a2 = *(unsigned __int8 **)a2;
    v10 = v9;
  }
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v27, (pxrInternal__aapl__pxrReserved__ *)a2, v10);
  v11 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v27);
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((sub_20BEB4EF8(a1 + 32, i + 16, v7) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  sub_20C2CD3C8(a1, v11, a3, a4, (uint64_t)&v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_20BDEC6E0(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27 = *v24;
    *v24 = v27;
  }
  else
  {
    *(_QWORD *)v27 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27)
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27 + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27;
    }
  }
  i = v27;
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2CD3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    sub_20BEB52E4((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20C2CD3C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  _BYTE *result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x30uLL);
  *(_QWORD *)(a5 + 8) = v9;
  *(_QWORD *)a5 = v10;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  result = v10 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a3;
    *((_QWORD *)v10 + 4) = *(_QWORD *)(a3 + 16);
  }
  *((_DWORD *)v10 + 10) = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_20C2CD460(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_20BEB52E4(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2CD47C(_QWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v7;

  v4 = *a1 & a3;
  v5 = a1[4];
  if (*(__int16 *)(v5 + (v4 << 6) + 4) < 0)
    return v5 + (a1[5] << 6);
  LOWORD(v7) = 0;
  while (!sub_20BEB4EF8((uint64_t)a1, (unsigned __int8 *)(v5 + (v4 << 6) + 8), a2))
  {
    v4 = *a1 & (v4 + 1);
    v7 = (__int16)(v7 + 1);
    v5 = a1[4];
    if (v7 > *(__int16 *)(v5 + (v4 << 6) + 4))
      return v5 + (a1[5] << 6);
  }
  return a1[4] + (v4 << 6);
}

_QWORD *sub_20C2CD514(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52F510;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2CD5C0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52F5A0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2CD66C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52F630;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2CD718(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52F6B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

uint64_t sub_20C2CD7C4(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  int v14;
  int v15;
  __int128 *v16;
  uint64_t v17;
  __int128 v18;
  char v20;

  v8 = sub_20BEF33B4((uint64_t)&v20, (uint64_t)a2);
  v9 = *a1 & v8;
  v10 = a1[4];
  if (*(__int16 *)(v10 + (v9 << 6) + 4) < 0)
  {
    LOWORD(v11) = 0;
LABEL_7:
    v12 = sub_20C2CD95C((uint64_t)a1);
    v13 = a1[4];
    if ((v12 & 1) != 0)
    {
      v9 = v8 & *a1;
      v14 = *(__int16 *)(v13 + (v9 << 6) + 4);
      if (v14 < 0)
      {
        LOWORD(v11) = 0;
      }
      else
      {
        LOWORD(v11) = 0;
        do
        {
          v11 = (__int16)(v11 + 1);
          v9 = (v9 + 1) & *a1;
          v14 = *(__int16 *)(v13 + (v9 << 6) + 4);
        }
        while (v11 <= v14);
      }
      v15 = (unsigned __int16)v14;
    }
    else
    {
      v15 = *(unsigned __int16 *)(v13 + (v9 << 6) + 4);
    }
    if (v15 == 0xFFFF)
    {
      v16 = *a4;
      v17 = v13 + (v9 << 6);
      v18 = **a4;
      *(_QWORD *)(v17 + 24) = *((_QWORD *)*a4 + 2);
      *(_OWORD *)(v17 + 8) = v18;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      *(_QWORD *)v16 = 0;
      *(_QWORD *)(v17 + 56) = 0;
      *(_DWORD *)v17 = v8;
      *(_WORD *)(v17 + 4) = v11;
    }
    else
    {
      sub_20C2CDA20(a1, v9, v11, v8, a3, a4);
    }
    ++a1[6];
  }
  else
  {
    LOWORD(v11) = 0;
    while ((sub_20BEB4EF8((uint64_t)a1, (unsigned __int8 *)(v10 + (v9 << 6) + 8), a2) & 1) == 0)
    {
      v9 = *a1 & (v9 + 1);
      v11 = (__int16)(v11 + 1);
      v10 = a1[4];
      if (v11 > *(__int16 *)(v10 + (v9 << 6) + 4))
        goto LABEL_7;
    }
  }
  return a1[4] + (v9 << 6);
}

uint64_t sub_20C2CD95C(uint64_t a1)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 48), v2 >= *(_QWORD *)(a1 + 56)))
  {
    v6 = sub_20BED1164((_QWORD *)a1);
    sub_20C2CDAD8(a1, v6);
    *(_BYTE *)(a1 + 72) = 0;
    return 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    *(_BYTE *)(a1 + 73) = 0;
    v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        v8 = *(float *)(a1 + 68);
        v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        sub_20C2CDAD8(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

void sub_20C2CDA20(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5, _OWORD **a6)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v6 = *a6;
  v7 = *((_QWORD *)*a6 + 2);
  *(_OWORD *)__p = **a6;
  v11 = v7;
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  v13 = 0;
  sub_20C2CDF08(a1, a2, a3, a4, (uint64_t *)__p);
  v8 = v13;
  if (v13 == v12)
  {
    v9 = 4;
    v8 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

void sub_20C2CDAD8(uint64_t a1, unint64_t a2)
{
  uint64_t *v3;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD v8[9];
  void **v9;

  sub_20C2B7438((uint64_t)&v7, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  v3 = *(uint64_t **)(a1 + 8);
  v4 = *(unsigned int **)(a1 + 16);
  if (v3 != (uint64_t *)v4)
  {
    v5 = (unint64_t)(v8[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v3 + 2) != -1)
      {
        if (v5)
          v6 = sub_20BEF33B4((uint64_t)&v9, (uint64_t)(v3 + 1));
        else
          v6 = *(unsigned int *)v3;
        sub_20C2CDBD0(&v7, v7 & v6, 0, v6, v3 + 1);
      }
      v3 += 8;
    }
    while (v3 != (uint64_t *)v4);
  }
  v8[5] = *(_QWORD *)(a1 + 48);
  sub_20BED1250(&v7, (uint64_t *)a1);
  v9 = (void **)v8;
  sub_20C2AECF4(&v9);
}

void sub_20C2CDBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 56) = &a11;
  sub_20C2AECF4((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_20C2CDBD0(_QWORD *a1, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  int *v13;
  int v14;
  __int16 *v15;
  _OWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  int v22;
  __int128 v23;
  uint64_t result;
  __int128 v25;

  v10 = a5 + 1;
  v11 = a5 + 3;
  while (1)
  {
    v12 = a1[4];
    v13 = (int *)(v12 + (a2 << 6));
    v15 = (__int16 *)(v13 + 1);
    v14 = *((__int16 *)v13 + 2);
    if (v14 >= a3)
      goto LABEL_5;
    v16 = v13 + 2;
    if (v14 == -1)
      break;
    v17 = *a5;
    *(_QWORD *)&v25 = *v10;
    *(_QWORD *)((char *)&v25 + 7) = *(_QWORD *)((char *)v10 + 7);
    v18 = *((_BYTE *)a5 + 23);
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    v19 = v12 + (a2 << 6);
    v20 = *((_QWORD *)v13 + 3);
    *(_OWORD *)a5 = *v16;
    a5[2] = v20;
    *(_QWORD *)v16 = v17;
    *(_QWORD *)(v19 + 23) = *(_QWORD *)((char *)&v25 + 7);
    *(_QWORD *)(v19 + 16) = v25;
    *(_BYTE *)(v19 + 31) = v18;
    sub_20C2CDD94(v11, (_QWORD *)(v19 + 32));
    v21 = *v15;
    *v15 = a3;
    v22 = *v13;
    *v13 = a4;
    a3 = v21;
    a4 = v22;
LABEL_5:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  v23 = *(_OWORD *)a5;
  *((_QWORD *)v13 + 3) = a5[2];
  *v16 = v23;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  result = sub_20C2CDD30(v12 + (a2 << 6) + 32, (uint64_t)v11);
  *v13 = a4;
  *v15 = a3;
  return result;
}

uint64_t sub_20C2CDD30(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *sub_20C2CDD94(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20C2CDEFC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

uint64_t sub_20C2CDF08(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t *a5)
{
  int *v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  int *v22;
  int i;
  __int16 *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  __int16 v29;
  int v30;
  __int128 v31;
  uint64_t v32;
  uint64_t result;
  __int128 v34;
  __int128 v35;

  v10 = (int *)(a1[4] + (a2 << 6));
  v11 = *a5;
  v12 = a5 + 1;
  *(_QWORD *)&v34 = a5[1];
  *(_QWORD *)((char *)&v34 + 7) = *(uint64_t *)((char *)a5 + 15);
  v13 = *((_BYTE *)a5 + 23);
  a5[2] = 0;
  a5[1] = 0;
  *a5 = 0;
  v14 = *((_QWORD *)v10 + 3);
  *(_OWORD *)a5 = *(_OWORD *)(v10 + 2);
  a5[2] = v14;
  *(_QWORD *)((char *)v10 + 23) = *(_QWORD *)((char *)&v34 + 7);
  *((_QWORD *)v10 + 1) = v11;
  *((_QWORD *)v10 + 2) = v34;
  *((_BYTE *)v10 + 31) = v13;
  v15 = a5 + 3;
  sub_20C2CDD94(a5 + 3, (_QWORD *)v10 + 4);
  v16 = *((_WORD *)v10 + 2);
  *((_WORD *)v10 + 2) = a3;
  v17 = *v10;
  *v10 = a4;
  v18 = *a1;
  v19 = *a1 & (a2 + 1);
  v20 = v16 + 1;
  v21 = a1[4];
  v22 = (int *)(v21 + (v19 << 6));
  v24 = (__int16 *)(v22 + 1);
  for (i = *((unsigned __int16 *)v22 + 2); i != 0xFFFF; i = *((unsigned __int16 *)v22 + 2))
  {
    if (v20 > (__int16)i)
    {
      if (v20 >= 4096)
        *((_BYTE *)a1 + 72) = 1;
      v25 = v21 + (v19 << 6);
      v26 = *a5;
      *(_QWORD *)&v35 = *v12;
      *(_QWORD *)((char *)&v35 + 7) = *(_QWORD *)((char *)v12 + 7);
      v27 = *((_BYTE *)a5 + 23);
      a5[1] = 0;
      a5[2] = 0;
      *a5 = 0;
      v28 = *(_OWORD *)(v25 + 8);
      a5[2] = *(_QWORD *)(v25 + 24);
      *(_OWORD *)a5 = v28;
      *(_QWORD *)(v25 + 8) = v26;
      *(_QWORD *)(v25 + 23) = *(_QWORD *)((char *)&v35 + 7);
      *(_QWORD *)(v25 + 16) = v35;
      *(_BYTE *)(v25 + 31) = v27;
      sub_20C2CDD94(v15, (_QWORD *)(v25 + 32));
      v29 = *v24;
      *v24 = v20;
      v30 = *v22;
      *v22 = v17;
      v18 = *a1;
      v21 = a1[4];
      v20 = v29;
      v17 = v30;
    }
    v19 = v18 & (v19 + 1);
    ++v20;
    v22 = (int *)(v21 + (v19 << 6));
    v24 = (__int16 *)(v22 + 1);
  }
  v31 = *(_OWORD *)a5;
  v32 = v21 + (v19 << 6);
  *(_QWORD *)(v32 + 24) = a5[2];
  *(_OWORD *)(v32 + 8) = v31;
  a5[1] = 0;
  a5[2] = 0;
  *a5 = 0;
  result = sub_20C2CDD30(v32 + 32, (uint64_t)v15);
  *v22 = v17;
  *v24 = v20;
  return result;
}

__n128 sub_20C2CE110(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52F510;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2CE14C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52F510;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2CE170(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2CE1CC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256, a2);
}

uint64_t sub_20C2CE184(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52F580))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2CE1C0()
{
  return &unk_24C52F580;
}

unint64_t sub_20C2CE1CC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;

  v4 = (uint64_t *)this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *v4;
    return sub_20C2CE270(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    return *(unsigned __int8 *)v4 | 0x4001000000000000;
  }
}

unint64_t sub_20C2CE270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x8001000000000000;
  v18 = 0x8001000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B2820(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2CE468(v9, a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2A7944((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8001000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2A7944((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t sub_20C2CE3F0(uint64_t a1, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;

  v2 = *(uint64_t **)(a1 + 8);
  v3 = (*v2 + a2 - 1) & -a2;
  v4 = v2[2];
  if (v4 > v3 || (v5 = v2[4] + v4, v6 = *(uint64_t **)(a1 + 8), v5 < v3))
  {
    sub_20C2B209C(*(_QWORD *)(a1 + 8));
    *v2 = v3;
    v6 = v2 + 2;
  }
  *v6 = v3;
  return *v2;
}

_QWORD *sub_20C2CE468(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char *v33;
  uint64_t v34;
  char v35;

  v9 = *(char **)a2;
  LOBYTE(v34) = 1;
  v33 = v9;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v33, *(pxrInternal__aapl__pxrReserved__ **)(a2 + 32), v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v33);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if ((sub_20BF65D90((uint64_t)(i + 2), a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2CE710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2CE72C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2CE72C(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C2CE770(uint64_t a1, char *__src)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = 4;
  do
  {
    v5 = v3[2];
    v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6)
      v7 = v5 - *v3 + 0x80000;
    else
      v7 = v4;
    v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4])
      v3[4] = v7 + v8;
    result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4)
      result = sub_20C2B209C((_BOOL8)v3);
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

__n128 sub_20C2CE818(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52F5A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2CE854(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52F5A0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2CE878(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2CE908(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2CE8C0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52F610))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2CE8FC()
{
  return &unk_24C52F610;
}

void sub_20C2CE908(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2CE9A0(a1, v6, a3, (uint64_t)v8);
    sub_20C1CFD2C(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u8[0] = a3 & 1;
    sub_20C1CFCB4(a4, v8);
  }
}

void sub_20C2CE988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2CE9A0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v21 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v21, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v21;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v18) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v18))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v18) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v18, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v18;
    v21 = v18;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || v13 > v15)
    {
      *(_QWORD *)&v18 = "usd/crateFile.cpp";
      *((_QWORD *)&v18 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v19 = 2053;
      *((_QWORD *)&v19 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>, T = BOOL]";
      LOBYTE(v20) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, v13, v10 - v14, v10);
    }
    else
    {
      v22 = 0;
      *(_QWORD *)&v18 = &v22;
      sub_20C001780((unint64_t *)a4, v13, (_BYTE **)&v18);
      sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), *(char **)a4, v14 + v8);
    }
    return;
  }
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  if (&v18 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v19;
    *(_OWORD *)a4 = v18;
    *(_OWORD *)(a4 + 16) = v11;
    v18 = 0u;
    v19 = 0u;
    *(_QWORD *)(a4 + 32) = v20;
    v20 = 0;
  }
  sub_20BF5618C((uint64_t)&v18);
}

void sub_20C2CEB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C2CEB84(uint64_t a1, int a2, __sFILE *a3)
{
  ssize_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 24), a3, (char *)4, *(_QWORD *)(a1 + 8) + *(_QWORD *)a1);
  if (v4 != -1)
    *(_QWORD *)(a1 + 8) += v4;
  return v4 != -1;
}

_QWORD *sub_20C2CEBD4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20C2CED3C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20BDC12F4(a1);
}

__n128 sub_20C2CED50(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52F630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2CED8C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52F630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2CEDB0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2CEE00((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2CEDB8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52F690))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2CEDF4()
{
  return &unk_24C52F690;
}

void sub_20C2CEE00(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2CEE7C(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2CEE7C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2CEF14(a1, v6, a3, (uint64_t)v8);
    sub_20C1CFD2C(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u8[0] = a3 & 1;
    sub_20C1CFCB4(a4, v8);
  }
}

void sub_20C2CEEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2CEF14(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 __dst;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v20 = *a2;
      v21 = v7;
      v22 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_254988410);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988410))
      {
        v19 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v19)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v19 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_254988408 = *v19;
        __cxa_guard_release(&qword_254988410);
      }
      v26 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v20 + 8, &v26, 8uLL))
          return;
        v9 = v26;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v20 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v26 = __dst;
      }
      if (byte_254988408 && v9 >= 0x800)
      {
        v11 = *((_QWORD *)&v20 + 1);
        v12 = sub_20C2CF260((uint64_t)&v20 + 8, *((char **)&v20 + 1), v9, v9);
        if (v12)
        {
          *(_QWORD *)&v24 = 0;
          *((_QWORD *)&v24 + 1) = v12;
          v25 = v11;
          __dst = v26;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v13 = v24;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            __dst = 0u;
            v24 = 0u;
            *(_QWORD *)(a4 + 32) = v25;
            v25 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v24 = 2109;
          *((_QWORD *)&v24 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = BOOL]";
          LOBYTE(v25) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v9);
          sub_20BF56210((_QWORD *)a4);
        }
      }
      else
      {
        v14 = *(_QWORD *)(*(_QWORD *)v21 + 32);
        v15 = *((_QWORD *)&v20 + 1) - *(_QWORD *)(*(_QWORD *)v21 + 24);
        v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || v9 > v16)
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v24 = 2117;
          *((_QWORD *)&v24 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = BOOL]";
          LOBYTE(v25) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, v9, v16, v14);
        }
        else
        {
          v27 = 0;
          *(_QWORD *)&__dst = &v27;
          sub_20C001780((unint64_t *)a4, v9, (_BYTE **)&__dst);
          sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
          sub_20C2B9BEC((uint64_t)&v20 + 8, *(void **)(a4 + 32), *(_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v25 = 0;
    __dst = 0u;
    v24 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v24;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v24 = 0u;
      *(_QWORD *)(a4 + 32) = v25;
      v25 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C2CF218(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988410);
  _Unwind_Resume(a1);
}

unint64_t *sub_20C2CF260(uint64_t a1, char *a2, unint64_t a3, unint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl *v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  BOOL v15;
  _QWORD v17[4];
  char v18;

  v4 = **(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl ***)(a1 + 8);
  v6 = *((_QWORD *)v4 + 3);
  v5 = *((_QWORD *)v4 + 4);
  v7 = &a2[a3];
  v8 = (char *)(v6 + v5);
  v9 = &a2[a4];
  if (v6 <= (unint64_t)a2 && v5 >= a4 && v5 >= a3)
  {
    v12 = v7 >= v8;
    v13 = v7 == v8;
  }
  else
  {
    v12 = 1;
    v13 = 0;
  }
  if (!v13 && v12)
  {
    v14 = 1;
    v15 = 0;
  }
  else
  {
    v14 = v9 >= v8;
    v15 = v9 == v8;
  }
  if (v15 || !v14)
    return pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping::_Impl::_AddRangeReference(v4, a2, a3);
  v17[0] = "usd/crateFile.cpp";
  v17[1] = "CreateZeroCopyDataSource";
  v17[2] = 687;
  v17[3] = "Vt_ArrayForeignDataSource *pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__px"
           "rReserved__::Usd_CrateFile::CrateFile::_FileMapping *>::CreateZeroCopyDataSource(const void *, size_t, uint64"
           "_t) [FileMappingPtr = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *]";
  v18 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Zero-copy data range out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", a3, (ptrdiff_t)&a2[-v6], v5);
  return 0;
}

__n128 sub_20C2CF308(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52F6B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2CF344(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52F6B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2CF368(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2CF3C0((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2CF378(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52F710))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2CF3B4()
{
  return &unk_24C52F710;
}

void sub_20C2CF3C0(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2CF4DC(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2CF4C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2CF4DC(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  __n128 v18[2];
  uint64_t v19;

  if (a3 < 0)
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    v15 = *a2;
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v16 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v17 = *((_QWORD *)a2 + 3);
    sub_20C2CF638(a1, &v15, a3, (uint64_t)v18);
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    sub_20C1CFD2C(a4, v18);
    sub_20BF5618C((uint64_t)v18);
  }
  else
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v18[0].n128_u8[0] = a3 & 1;
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 - 1, v6));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v18[0].n128_u8[0] = a3 & 1;
    }
    sub_20C1CFCB4(a4, v18);
  }
}

void sub_20C2CF610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2CF638(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v39) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v39, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v38 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v39 = "usd/crateFile.cpp";
        *((_QWORD *)&v39 + 1) = "Read";
        *(_QWORD *)&v40 = 770;
        *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v41) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v39 = "usd/crateFile.cpp";
          *((_QWORD *)&v39 + 1) = "Read";
          *(_QWORD *)&v40 = 779;
          *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v41) = 0;
          v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v34);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v38, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      v37 = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v39 = "usd/crateFile.cpp";
        *((_QWORD *)&v39 + 1) = "Read";
        *(_QWORD *)&v40 = 770;
        *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v41) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v39 = "usd/crateFile.cpp";
          *((_QWORD *)&v39 + 1) = "Read";
          *(_QWORD *)&v40 = 779;
          *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v41) = 0;
          v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v33);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v37, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v38 = v37;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v38;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v38 > v21)
            {
              *(_QWORD *)&v39 = "usd/crateFile.cpp";
              *((_QWORD *)&v39 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v40 = 2053;
              *((_QWORD *)&v40 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = BOOL]";
              LOBYTE(v41) = 0;
              v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v22, v21, v35);
            }
            else
            {
              LOBYTE(v37) = 0;
              *(_QWORD *)&v39 = &v37;
              sub_20C001780((unint64_t *)a4, v38, (_BYTE **)&v39);
              sub_20C001998((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v23, v24);
              v25 = *(_QWORD *)(a4 + 32);
              v26 = *(_QWORD *)a4;
              v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              if (v17 + v26 > v27)
              {
                *(_QWORD *)&v39 = "usd/crateFile.cpp";
                *((_QWORD *)&v39 + 1) = "Read";
                *(_QWORD *)&v40 = 770;
                *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v41) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v26, v17, v27);
              }
              else
              {
                v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v28 < v26 || ((v28 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v39 = "usd/crateFile.cpp";
                  *((_QWORD *)&v39 + 1) = "Read";
                  *(_QWORD *)&v40 = 779;
                  *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v41) = 0;
                  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v26, v28, v36);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v25, v26, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v29 = (unint64_t *)&v7->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  if (&v39 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v40;
    *(_OWORD *)a4 = v39;
    *(_OWORD *)(a4 + 16) = v13;
    v39 = 0u;
    v40 = 0u;
    *(_QWORD *)(a4 + 32) = v41;
    v41 = 0;
  }
  sub_20BF5618C((uint64_t)&v39);
}

void sub_20C2CFBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2CFC2C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52F730;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2CFCD8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52F7B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2CFD84(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52F830;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2CFE30(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52F8B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2CFEE4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52F730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2CFF20(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52F730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2CFF44(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2CFFA0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256, a2);
}

uint64_t sub_20C2CFF58(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52F790))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2CFF94()
{
  return &unk_24C52F790;
}

unint64_t sub_20C2CFFA0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;

  v4 = (uint64_t *)this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *v4;
    return sub_20C2D0044(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    return *(unsigned __int8 *)v4 | 0x4002000000000000;
  }
}

unint64_t sub_20C2D0044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  int64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x8002000000000000;
  v18 = 0x8002000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B28C4(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2D01C4(v9, a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2A7944((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8002000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2A7944((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C2D01C4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  char *v33;
  uint64_t v34;
  char v35;

  v9 = *(char **)a2;
  LOBYTE(v34) = 1;
  v33 = v9;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v33, *(pxrInternal__aapl__pxrReserved__ **)(a2 + 32), v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * (_QWORD)v33);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if ((sub_20BF65D90((uint64_t)(i + 2), a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2D046C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2D0488(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2D0488(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

__n128 sub_20C2D04D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52F7B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D0510(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52F7B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D0534(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2D05C4(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2D057C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52F810))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D05B8()
{
  return &unk_24C52F810;
}

void sub_20C2D05C4(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2D0658(a1, v6, a3, (uint64_t)v8);
    sub_20BF659C8(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u8[0] = a3;
    sub_20C1CFEB0(a4, v8);
  }
}

void sub_20C2D0640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2D0658(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t v21;
  char v22;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v21 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v21, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v21;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v18) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v18))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v18) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v18, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v18;
    v21 = v18;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || v13 > v15)
    {
      *(_QWORD *)&v18 = "usd/crateFile.cpp";
      *((_QWORD *)&v18 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v19 = 2053;
      *((_QWORD *)&v19 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = unsigned char]";
      LOBYTE(v20) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, v13, v10 - v14, v10);
    }
    else
    {
      v22 = 0;
      *(_QWORD *)&v18 = &v22;
      sub_20BF65720((unint64_t *)a4, v13, (_BYTE **)&v18);
      sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), *(char **)a4, v14 + v8);
    }
    return;
  }
  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  if (&v18 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v19;
    *(_OWORD *)a4 = v18;
    *(_OWORD *)(a4 + 16) = v11;
    v18 = 0u;
    v19 = 0u;
    *(_QWORD *)(a4 + 32) = v20;
    v20 = 0;
  }
  sub_20BF5618C((uint64_t)&v18);
}

void sub_20C2D0820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C2D0844(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52F830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D0880(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52F830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D08A4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2D08F4((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2D08AC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52F890))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D08E8()
{
  return &unk_24C52F890;
}

void sub_20C2D08F4(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2D0970(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2D0970(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2D0A04(a1, v6, a3, (uint64_t)v8);
    sub_20BF659C8(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u8[0] = a3;
    sub_20C1CFEB0(a4, v8);
  }
}

void sub_20C2D09EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2D0A04(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 __dst;
  __int128 v24;
  uint64_t v25;
  unint64_t v26;
  char v27;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v20 = *a2;
      v21 = v7;
      v22 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_254988420);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988420))
      {
        v19 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v19)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v19 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_254988418 = *v19;
        __cxa_guard_release(&qword_254988420);
      }
      v26 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v20 + 8, &v26, 8uLL))
          return;
        v9 = v26;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v20 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v26 = __dst;
      }
      if (byte_254988418 && v9 >= 0x800)
      {
        v11 = *((_QWORD *)&v20 + 1);
        v12 = sub_20C2CF260((uint64_t)&v20 + 8, *((char **)&v20 + 1), v9, v9);
        if (v12)
        {
          *(_QWORD *)&v24 = 0;
          *((_QWORD *)&v24 + 1) = v12;
          v25 = v11;
          __dst = v26;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v13 = v24;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v13;
            __dst = 0u;
            v24 = 0u;
            *(_QWORD *)(a4 + 32) = v25;
            v25 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v24 = 2109;
          *((_QWORD *)&v24 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = unsigned char]";
          LOBYTE(v25) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v9);
          sub_20BF56210((_QWORD *)a4);
        }
      }
      else
      {
        v14 = *(_QWORD *)(*(_QWORD *)v21 + 32);
        v15 = *((_QWORD *)&v20 + 1) - *(_QWORD *)(*(_QWORD *)v21 + 24);
        v16 = v14 - v15;
        if (v15 < 0 || (v16 & 0x8000000000000000) != 0 || v9 > v16)
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v24 = 2117;
          *((_QWORD *)&v24 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = unsigned char]";
          LOBYTE(v25) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, v9, v16, v14);
        }
        else
        {
          v27 = 0;
          *(_QWORD *)&__dst = &v27;
          sub_20BF65720((unint64_t *)a4, v9, (_BYTE **)&__dst);
          sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
          sub_20C2B9BEC((uint64_t)&v20 + 8, *(void **)(a4 + 32), *(_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v25 = 0;
    __dst = 0u;
    v24 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v24;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v24 = 0u;
      *(_QWORD *)(a4 + 32) = v25;
      v25 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C2D0D08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988420);
  _Unwind_Resume(a1);
}

__n128 sub_20C2D0D58(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52F8B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D0D94(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52F8B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D0DB8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2D0E10((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2D0DC8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52F910))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D0E04()
{
  return &unk_24C52F910;
}

void sub_20C2D0E10(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2D0F2C(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2D0F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2D0F2C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  __n128 v18[2];
  uint64_t v19;

  if (a3 < 0)
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    v15 = *a2;
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v16 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v17 = *((_QWORD *)a2 + 3);
    sub_20C2D1080(a1, &v15, a3, (uint64_t)v18);
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    sub_20BF659C8(a4, v18);
    sub_20BF5618C((uint64_t)v18);
  }
  else
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v18[0].n128_u8[0] = a3;
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 - 1, v6));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v18[0].n128_u8[0] = a3;
    }
    sub_20C1CFEB0(a4, v18);
  }
}

void sub_20C2D1058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2D1080(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v39) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v39, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v38 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v39 = "usd/crateFile.cpp";
        *((_QWORD *)&v39 + 1) = "Read";
        *(_QWORD *)&v40 = 770;
        *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v41) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v39 = "usd/crateFile.cpp";
          *((_QWORD *)&v39 + 1) = "Read";
          *(_QWORD *)&v40 = 779;
          *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v41) = 0;
          v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v34);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v38, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      v37 = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v39 = "usd/crateFile.cpp";
        *((_QWORD *)&v39 + 1) = "Read";
        *(_QWORD *)&v40 = 770;
        *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v41) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v39 = "usd/crateFile.cpp";
          *((_QWORD *)&v39 + 1) = "Read";
          *(_QWORD *)&v40 = 779;
          *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v41) = 0;
          v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v33);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v37, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v38 = v37;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v38;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v38 > v21)
            {
              *(_QWORD *)&v39 = "usd/crateFile.cpp";
              *((_QWORD *)&v39 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v40 = 2053;
              *((_QWORD *)&v40 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = unsigned char]";
              LOBYTE(v41) = 0;
              v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v22, v21, v35);
            }
            else
            {
              LOBYTE(v37) = 0;
              *(_QWORD *)&v39 = &v37;
              sub_20BF65720((unint64_t *)a4, v38, (_BYTE **)&v39);
              sub_20BF65938((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v23, v24);
              v25 = *(_QWORD *)(a4 + 32);
              v26 = *(_QWORD *)a4;
              v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              if (v17 + v26 > v27)
              {
                *(_QWORD *)&v39 = "usd/crateFile.cpp";
                *((_QWORD *)&v39 + 1) = "Read";
                *(_QWORD *)&v40 = 770;
                *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v41) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v26, v17, v27);
              }
              else
              {
                v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v28 < v26 || ((v28 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v39 = "usd/crateFile.cpp";
                  *((_QWORD *)&v39 + 1) = "Read";
                  *(_QWORD *)&v40 = 779;
                  *((_QWORD *)&v40 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v41) = 0;
                  v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v39, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v26, v28, v36);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v25, v26, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v29 = (unint64_t *)&v7->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  if (&v39 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v40;
    *(_OWORD *)a4 = v39;
    *(_OWORD *)(a4 + 16) = v13;
    v39 = 0u;
    v40 = 0u;
    *(_QWORD *)(a4 + 32) = v41;
    v41 = 0;
  }
  sub_20BF5618C((uint64_t)&v39);
}

void sub_20C2D1640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2D1674(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52F930;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2D1720(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52F9B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2D17CC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52FA30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2D1878(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52FAB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2D192C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52F930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D1968(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52F930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2D198C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2D19E8(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2D19A0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52F990))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D19DC()
{
  return &unk_24C52F990;
}

unint64_t sub_20C2D19E8(uint64_t a1, uint64_t a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;

  v4 = (uint64_t *)this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *v4;
    return sub_20C2D1A8C(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    return *(unsigned int *)v4 | 0x4003000000000000;
  }
}

unint64_t sub_20C2D1A8C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v18;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v19;
  unint64_t v20;
  size_t CompressedBufferSize;
  char *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  char __src[24];
  int64_t v29;

  v26[0] = a2;
  v26[1] = a3;
  result = 0x8003000000000000;
  v25 = 0x8003000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B2968(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2D1C88(v9, a4, a4, &v25);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        *(_QWORD *)&v27 = a2;
        *((_QWORD *)&v27 + 1) = a3;
        v17 = *a3;
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          *(_QWORD *)__src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)&v27, __src);
        }
        else
        {
          *(_DWORD *)__src = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)&v27, __src);
        }
        v18 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
        v19 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)(a4 + 32);
        if (*(_QWORD *)a4 > 0xFuLL)
        {
          *(_OWORD *)__src = v27;
          CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v18);
          v22 = (char *)operator new[](CompressedBufferSize);
          v24 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v19, (const int *)v18, v22, v23);
          v29 = v24;
          sub_20C2B7248((uint64_t)__src, (char *)&v29);
          sub_20C2A7944((uint64_t)__src, v22, v24);
          operator delete[](v22);
          v20 = v17 & 0xFFFFFFFFFFFFLL | 0xA003000000000000;
        }
        else
        {
          v20 = v17 & 0xFFFFFFFFFFFFLL | 0x8003000000000000;
          sub_20C2C9460((uint64_t)&v27, (char *)v19, (uint64_t)v18);
        }
        v13[7] = v20;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v26, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        *(_DWORD *)__src = 1;
        sub_20C2CE770((uint64_t)v26, __src);
        *(_DWORD *)__src = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v26, __src);
        sub_20C2C9460((uint64_t)v26, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_20C2D1C74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2D1C88(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v9 = *(_QWORD *)a2;
  LOBYTE(v34) = 1;
  v33 = v9;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v33, *(pxrInternal__aapl__pxrReserved__ **)(a2 + 32), (char *)(4 * v9));
  v10 = bswap64(0x9E3779B97F4A7C55 * v33);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if ((pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(i + 2), a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2D1F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2D1F50(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2D1F50(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

__n128 sub_20C2D1F9C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52F9B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D1FD8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52F9B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D1FFC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2D208C(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2D2044(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52FA10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D2080()
{
  return &unk_24C52FA10;
}

void sub_20C2D208C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2D2120(a1, v6, a3, (uint64_t)v8);
    sub_20BF65058(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_20C1D0080(a4, v8);
  }
}

void sub_20C2D2108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2D2120(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  FILE *v13;
  uint64_t v14;
  ssize_t v15;
  ssize_t v16;
  unint64_t v17;
  __int128 v18;
  ssize_t v19;
  unint64_t v20;
  ssize_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  __sFILE *v25;
  char *v26;
  off_t v27;
  ssize_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v35;
  void *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  pxrInternal__aapl__pxrReserved__ *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD _8C[21];

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = a3 & 0xFFFFFFFFFFFFLL;
    v7 = *(unsigned __int8 *)(*a2 + 6369);
    v8 = *(unsigned __int8 *)(*a2 + 6370);
    v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(v41) = 0, sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v41)))
    {
      v11 = *((_OWORD *)a2 + 1);
      v38 = *(_OWORD *)a2;
      v39 = v11;
      v40 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
      if ((a3 & 0x2000000000000000) == 0 || (v12 = v9 | v8 | (v7 << 8), v12 <= 0x4FF))
      {
        v13 = (FILE *)v40;
        v44 = 0;
        if (v10 > 0x6FF)
        {
          v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((_QWORD *)&v38 + 1));
          if (v19 == -1)
            return;
          v20 = v44;
        }
        else
        {
          LODWORD(v41) = 0;
          v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((_QWORD *)&v38 + 1));
          if (v19 == -1)
            return;
          v20 = v41;
          v44 = v41;
        }
        v28 = v19 + v39;
        v29 = *((_QWORD *)&v39 + 1) - (v19 + v39);
        if (v19 + (_QWORD)v39 < 0 || (v29 & 0x8000000000000000) != 0 || v20 > v29 || 4 * v20 > v29)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v42 = 2053;
          *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_PreadStream>, T = int]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _8C[0] = 0;
        *(_QWORD *)&v41 = _8C;
        sub_20BF64D74((unint64_t *)a4, v20, (_DWORD **)&v41);
        sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
        v25 = *(__sFILE **)(a4 + 32);
        v26 = (char *)(4 * *(_QWORD *)a4);
        v27 = v28 + *((_QWORD *)&v38 + 1);
        goto LABEL_30;
      }
      v44 = 0;
      if (v12 > 0x6FF)
      {
        v13 = (FILE *)v40;
        v14 = *((_QWORD *)&v38 + 1);
        v21 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((_QWORD *)&v38 + 1));
        if (v21 == -1)
          return;
        v16 = v39 + v21;
        *(_QWORD *)&v39 = v39 + v21;
        v17 = v44;
      }
      else
      {
        LODWORD(v41) = 0;
        v13 = (FILE *)v40;
        v14 = *((_QWORD *)&v38 + 1);
        v15 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((_QWORD *)&v38 + 1));
        if (v15 == -1)
          return;
        v16 = v39 + v15;
        *(_QWORD *)&v39 = v39 + v15;
        v17 = v41;
        v44 = v41;
      }
      if (v17 <= 0xF)
      {
        v22 = *((_QWORD *)&v39 + 1) - v16;
        if (v16 < 0 || (v22 & 0x8000000000000000) != 0 || v17 > v22 || 4 * v17 > v22)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "_ReadPossiblyCompressedArray";
          *(_QWORD *)&v42 = 2241;
          *((_QWORD *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::"
                                  "value || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type px"
                                  "rInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, Va"
                                  "lueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_PreadStream>, T = int]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _8C[0] = 0;
        *(_QWORD *)&v41 = _8C;
        sub_20BF64D74((unint64_t *)a4, v17, (_DWORD **)&v41);
        sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v23, v24);
        v25 = *(__sFILE **)(a4 + 32);
        v26 = (char *)(4 * *(_QWORD *)a4);
        v27 = v16 + v14;
LABEL_30:
        pxrInternal__aapl__pxrReserved__::ArchPRead(v13, v25, v26, v27);
        return;
      }
      if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v17)
        && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v17))
      {
        _8C[0] = 0;
        *(_QWORD *)&v41 = _8C;
        sub_20BF64D74((unint64_t *)a4, v44, (_DWORD **)&v41);
        sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
        v34 = *(_QWORD *)(a4 + 32);
        v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
        v41 = 0u;
        v42 = 0u;
        sub_20C2C32FC((uint64_t)&v41, (uint64_t)&v38, v34, v35);
        v36 = (void *)v42;
        *(_QWORD *)&v42 = 0;
        if (v36)
          operator delete[](v36);
        v37 = (void *)v41;
        *(_QWORD *)&v41 = 0;
        if (v37)
          operator delete[](v37);
      }
      else
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "_ReadPossiblyCompressedArray";
        *(_QWORD *)&v42 = 2249;
        *((_QWORD *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::va"
                                "lue || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInt"
                                "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep"
                                ", VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd"
                                "_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>, T = int]";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
      }
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    if (&v41 != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v18 = v42;
      *(_OWORD *)a4 = v41;
      *(_OWORD *)(a4 + 16) = v18;
      v41 = 0u;
      v42 = 0u;
      *(_QWORD *)(a4 + 32) = v43;
      v43 = 0;
    }
    sub_20BF5618C((uint64_t)&v41);
  }
}

void sub_20C2D24F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20C2BAA20((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2D2524(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a1)
{
  uint64_t result;

  result = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(a1);
  if (result)
    return pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize(a1) != 0;
  return result;
}

void sub_20C2D2558(uint64_t a1, unint64_t a2, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *a3)
{
  void *v3;
  void *v4;
  void *v5[2];
  void *__p[2];

  *(_OWORD *)v5 = 0u;
  *(_OWORD *)__p = 0u;
  sub_20C2C32FC((uint64_t)v5, a1, a2, a3);
  v3 = __p[0];
  __p[0] = 0;
  if (v3)
    operator delete[](v3);
  v4 = v5[0];
  v5[0] = 0;
  if (v4)
    operator delete[](v4);
}

void sub_20C2D25B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C2BAA20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20C2D25D0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52FA30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D260C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52FA30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D2630(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2D2680((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2D2638(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52FA90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D2674()
{
  return &unk_24C52FA90;
}

void sub_20C2D2680(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2D26FC(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2D26FC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2D2790(a1, v6, a3, (uint64_t)v8);
    sub_20BF65058(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_20C1D0080(a4, v8);
  }
}

void sub_20C2D2778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2D2790(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v36;
  void *v37;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *__dst[2];
  void *__p[2];
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v49;
  int v50;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6369);
    v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6370);
    v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16;
    v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(__dst[0]) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, __dst, 4uLL)))
    {
      v11 = a2[1];
      v40 = *a2;
      v41 = v11;
      v42 = *((_QWORD *)a2 + 4);
      if ((a3 & 0x2000000000000000) != 0 && (v12 = v9 | v8 | (v7 << 8), v12 > 0x4FF))
      {
        *(_QWORD *)&v43 = 0;
        if (v12 > 0x6FF)
        {
          if (!sub_20C2B9BEC((uint64_t)&v40 + 8, &v43, 8uLL))
            return;
          v13 = v43;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if (!sub_20C2B9BEC((uint64_t)&v40 + 8, __dst, 4uLL))
            return;
          v13 = LODWORD(__dst[0]);
          *(_QWORD *)&v43 = LODWORD(__dst[0]);
        }
        if (v13 > 0xF)
        {
          if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v13)
            && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v13))
          {
            LODWORD(v49) = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v49;
            sub_20BF64D74((unint64_t *)a4, v43, (_DWORD **)__dst);
            sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v33, v34);
            v35 = *(_QWORD *)(a4 + 32);
            v36 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
            *(_OWORD *)__dst = 0u;
            *(_OWORD *)__p = 0u;
            sub_20C2BBED0((uint64_t)__dst, (uint64_t)&v40, v35, v36);
            v37 = __p[0];
            __p[0] = 0;
            if (v37)
              operator delete[](v37);
            v38 = __dst[0];
            __dst[0] = 0;
            if (v38)
              operator delete[](v38);
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadPossiblyCompressedArray";
            __p[0] = (void *)2249;
            __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std:"
                     ":is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserv"
                     "ed__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versio"
                     "n, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__"
                     "aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cr"
                     "ateFile::_FileMapping *>>, T = int]";
            LOBYTE(v48) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
          }
        }
        else
        {
          v23 = *((_QWORD *)&v40 + 1) - *(_QWORD *)(*(_QWORD *)v41 + 24);
          v24 = *(_QWORD *)(*(_QWORD *)v41 + 32) - v23;
          if ((v23 & 0x8000000000000000) == 0 && (v24 & 0x8000000000000000) == 0 && v13 <= v24 && 4 * v13 <= v24)
          {
            v19 = (char *)&v40 + 8;
            LODWORD(v49) = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v49;
            v26 = (unint64_t *)a4;
            v27 = v13;
LABEL_42:
            sub_20BF64D74(v26, v27, (_DWORD **)__dst);
            sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v31, v32);
            sub_20C2B9BEC((uint64_t)v19, *(void **)(a4 + 32), 4 * *(_QWORD *)a4);
            return;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadPossiblyCompressedArray";
          __p[0] = (void *)2241;
          __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std::i"
                   "s_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserved__"
                   "::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int"
                   ") [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__px"
                   "rReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_"
                   "FileMapping *>>, T = int]";
          LOBYTE(v48) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        }
      }
      else
      {
        v15 = a2[1];
        v43 = *a2;
        v44 = v15;
        v45 = *((_QWORD *)a2 + 4);
        v16 = atomic_load((unsigned __int8 *)&qword_254988430);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254988430))
        {
          v39 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          if (!v39)
          {
            pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
            v39 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          }
          byte_254988428 = *v39;
          __cxa_guard_release(&qword_254988430);
        }
        v49 = 0;
        if (v10 > 0x6FF)
        {
          if (!sub_20C2B9BEC((uint64_t)&v43 + 8, &v49, 8uLL))
            return;
          v17 = (unint64_t)v49;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if ((sub_20C2B9BEC((uint64_t)&v43 + 8, __dst, 4uLL) & 1) == 0)
            return;
          v17 = LODWORD(__dst[0]);
          v49 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)LODWORD(__dst[0]);
        }
        v18 = 4 * v17;
        v19 = (char *)&v43 + 8;
        v20 = *((_QWORD *)&v43 + 1);
        if (!byte_254988428 || v18 < 0x800 || (BYTE8(v43) & 3) != 0)
        {
          v28 = *((_QWORD *)&v43 + 1) - *(_QWORD *)(*(_QWORD *)v44 + 24);
          v29 = *(_QWORD *)(*(_QWORD *)v44 + 32) - v28;
          if ((v28 & 0x8000000000000000) == 0 && (v29 & 0x8000000000000000) == 0 && v17 <= v29 && v18 <= v29)
          {
            v50 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v50;
            v26 = (unint64_t *)a4;
            v27 = v17;
            goto LABEL_42;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadUncompressedArray";
          __p[0] = (void *)2117;
          __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *, Cra"
                   "teFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFil"
                   "e::CrateFile::_FileMapping *>>, T = int]";
          LOBYTE(v48) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
        }
        else
        {
          v21 = sub_20C2CF260((uint64_t)&v43 + 8, *((char **)&v43 + 1), 4 * v17, v17);
          if (v21)
          {
            __p[0] = 0;
            __p[1] = v21;
            v48 = v20;
            __dst[0] = v49;
            __dst[1] = 0;
            if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4)
            {
              sub_20BF5618C(a4);
              v22 = *(_OWORD *)__p;
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(_OWORD *)(a4 + 16) = v22;
              *(_OWORD *)__dst = 0u;
              *(_OWORD *)__p = 0u;
              *(_QWORD *)(a4 + 32) = v48;
              v48 = 0;
            }
            sub_20BF5618C((uint64_t)__dst);
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadUncompressedArray";
            __p[0] = (void *)2109;
            __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrI"
                     "nternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *,"
                     " CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<"
                     "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_"
                     "CrateFile::CrateFile::_FileMapping *>>, T = int]";
            LOBYTE(v48) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v18);
            sub_20BF56210((_QWORD *)a4);
          }
        }
      }
    }
  }
  else
  {
    v48 = 0;
    *(_OWORD *)__dst = 0u;
    *(_OWORD *)__p = 0u;
    if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4)
    {
      sub_20BF5618C(a4);
      v14 = *(_OWORD *)__p;
      *(_OWORD *)a4 = *(_OWORD *)__dst;
      *(_OWORD *)(a4 + 16) = v14;
      *(_OWORD *)__dst = 0u;
      *(_OWORD *)__p = 0u;
      *(_QWORD *)(a4 + 32) = v48;
      v48 = 0;
    }
    sub_20BF5618C((uint64_t)__dst);
  }
}

void sub_20C2D2C84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988430);
  _Unwind_Resume(a1);
}

void sub_20C2D2CDC(uint64_t a1, unint64_t a2, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  void *v3;
  void *v4;
  void *v5[2];
  void *__p[2];

  *(_OWORD *)v5 = 0u;
  *(_OWORD *)__p = 0u;
  sub_20C2BBED0((uint64_t)v5, a1, a2, this);
  v3 = __p[0];
  __p[0] = 0;
  if (v3)
    operator delete[](v3);
  v4 = v5[0];
  v5[0] = 0;
  if (v4)
    operator delete[](v4);
}

void sub_20C2D2D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C2BAA20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_20C2D2D54(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52FAB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D2D90(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52FAB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D2DB4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2D2E0C((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2D2DC4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52FB10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D2E00()
{
  return &unk_24C52FB10;
}

void sub_20C2D2E0C(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2D2F28(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2D2F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2D2F28(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  __n128 v18[2];
  uint64_t v19;

  if (a3 < 0)
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    v15 = *a2;
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v16 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v17 = *((_QWORD *)a2 + 3);
    sub_20C2D307C(a1, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&v15, a3, (uint64_t)v18);
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    sub_20BF65058(a4, v18);
    sub_20BF5618C((uint64_t)v18);
  }
  else
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v18[0].n128_u32[0] = a3;
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 - 1, v6));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v18[0].n128_u32[0] = a3;
    }
    sub_20C1D0080(a4, v18);
  }
}

void sub_20C2D3054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2D307C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **a2, uint64_t a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  ptrdiff_t v16;
  unsigned int v17;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  ptrdiff_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  ptrdiff_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  unint64_t v56;
  BOOL v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v63;
  void *v64;
  void *v65;
  std::__shared_weak_count *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  ptrdiff_t v78;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v79[2];
  std::__shared_weak_count *v80;
  ptrdiff_t v81;
  unint64_t v82;
  unsigned int v83;
  void *v84[2];
  void *__p[2];
  uint64_t v86;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(a3 & 0xFFFFFFFFFFFFLL);
    v7 = *a2;
    v8 = *((unsigned __int8 *)*a2 + 6369);
    v9 = *((unsigned __int8 *)*a2 + 6370);
    v10 = *((unsigned __int8 *)*a2 + 6368) << 16;
    v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v84[0]) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)v84, 4uLL))
        return;
      v7 = *a2;
    }
    v13 = a2[1];
    v12 = (std::__shared_weak_count *)a2[2];
    *(_QWORD *)&v76 = v7;
    *((_QWORD *)&v76 + 1) = v13;
    v77 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = (ptrdiff_t)a2[3];
    v78 = v16;
    v17 = v10 | v9 | (v8 << 8);
    if (v17 >= 0x500 && (a3 & 0x2000000000000000) != 0)
    {
      v82 = 0;
      if (v17 > 0x6FF)
      {
        v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
        if (v78 < 0 || v78 + 8 > v47)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)770;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v78, v47);
        }
        else
        {
          v48 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v78;
          if (v48 < 8 || ((v48 | v78) & 0x8000000000000000) != 0)
          {
            v84[0] = "usd/crateFile.cpp";
            v84[1] = "Read";
            __p[0] = (void *)779;
            __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
            LOBYTE(v86) = 0;
            v72 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v48, v72);
          }
          else
          {
            v49 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t))(**((_QWORD **)&v76 + 1) + 32))(*((_QWORD *)&v76 + 1), &v82, 8);
            if ((unint64_t)(v49 + 1) >= 2)
            {
              v29 = v78 + v49;
              v78 += v49;
              v30 = v82;
LABEL_62:
              if (v30 > 0xF)
              {
                *(_OWORD *)v79 = v76;
                v80 = v77;
                if (v77)
                {
                  v55 = &v77->__shared_owners_;
                  do
                    v56 = __ldxr((unint64_t *)v55);
                  while (__stxr(v56 + 1, (unint64_t *)v55));
                  v29 = v78;
                }
                v81 = v29;
                if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v30))
                  v57 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v30) != 0;
                else
                  v57 = 0;
                if (v77)
                {
                  v58 = &v77->__shared_owners_;
                  do
                    v59 = __ldaxr((unint64_t *)v58);
                  while (__stlxr(v59 - 1, (unint64_t *)v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                    std::__shared_weak_count::__release_weak(v77);
                  }
                }
                if (v57)
                {
                  v83 = 0;
                  v84[0] = &v83;
                  sub_20BF64D74((unint64_t *)a4, v82, (_DWORD **)v84);
                  sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v60, v61);
                  v62 = *(_QWORD *)(a4 + 32);
                  v63 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
                  *(_OWORD *)v84 = 0u;
                  *(_OWORD *)__p = 0u;
                  sub_20C2C72EC((uint64_t)v84, (uint64_t)&v76, v62, v63);
                  v64 = __p[0];
                  __p[0] = 0;
                  if (v64)
                    operator delete[](v64);
                  v65 = v84[0];
                  v84[0] = 0;
                  if (v65)
                    operator delete[](v65);
                }
                else
                {
                  v84[0] = "usd/crateFile.cpp";
                  v84[1] = "_ReadPossiblyCompressedArray";
                  __p[0] = (void *)2249;
                  __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value |"
                           "| std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aap"
                           "l__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *,"
                           " CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                           "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = int]";
                  LOBYTE(v86) = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values", v82);
                }
              }
              else
              {
                v50 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v78;
                v51 = v82;
                v52 = 4 * v82;
                if (v78 < 0 || (v50 & 0x8000000000000000) != 0 || v82 > v50 || v52 > v50)
                {
                  v84[0] = "usd/crateFile.cpp";
                  v84[1] = "_ReadPossiblyCompressedArray";
                  __p[0] = (void *)2241;
                  __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value |"
                           "| std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aap"
                           "l__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *,"
                           " CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                           "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = int]";
                  LOBYTE(v86) = 0;
                  v75 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v51, v52, v50, v75);
                }
                else
                {
                  LODWORD(v79[0]) = 0;
                  v84[0] = v79;
                  sub_20BF64D74((unint64_t *)a4, v82, (_DWORD **)v84);
                  sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v53, v54);
                  sub_20C2B72E8((_QWORD *)&v76 + 1, *(_QWORD *)(a4 + 32), 4 * *(_QWORD *)a4);
                }
              }
            }
          }
        }
      }
      else
      {
        LODWORD(v79[0]) = 0;
        v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
        if (v78 < 0 || v78 + 4 > v26)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)770;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v78, v26);
        }
        else
        {
          v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v78;
          if (v27 < 4 || ((v27 | v78) & 0x8000000000000000) != 0)
          {
            v84[0] = "usd/crateFile.cpp";
            v84[1] = "Read";
            __p[0] = (void *)779;
            __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
            LOBYTE(v86) = 0;
            v70 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v27, v70);
          }
          else
          {
            v28 = (*(uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **, uint64_t))(**((_QWORD **)&v76 + 1) + 32))(*((_QWORD *)&v76 + 1), v79, 4);
            if ((unint64_t)(v28 + 1) >= 2)
            {
              v29 = v78 + v28;
              v78 += v28;
              v30 = LODWORD(v79[0]);
              v82 = LODWORD(v79[0]);
              goto LABEL_62;
            }
          }
        }
      }
LABEL_86:
      v66 = v77;
      if (v77)
      {
        v67 = &v77->__shared_owners_;
        do
          v68 = __ldaxr((unint64_t *)v67);
        while (__stlxr(v68 - 1, (unint64_t *)v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      return;
    }
    v79[0] = v7;
    v79[1] = *((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&v76 + 1);
    v80 = v77;
    if (v77)
    {
      v19 = &v77->__shared_owners_;
      do
        v20 = __ldxr((unint64_t *)v19);
      while (__stxr(v20 + 1, (unint64_t *)v19));
      v16 = v78;
    }
    v81 = v16;
    v82 = 0;
    if (v11 > 0x6FF)
    {
      v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
      if (v16 < 0 || v16 + 8 > v31)
      {
        v84[0] = "usd/crateFile.cpp";
        v84[1] = "Read";
        __p[0] = (void *)770;
        __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v86) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v16, v31);
      }
      else
      {
        v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v16;
        if (v32 < 8 || ((v32 | v16) & 0x8000000000000000) != 0)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)779;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          v71 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v32, v71);
        }
        else
        {
          v33 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t, ptrdiff_t))(**((_QWORD **)&v76 + 1)
                                                                                          + 32))(*((_QWORD *)&v76 + 1), &v82, 8, v16);
          if ((unint64_t)(v33 + 1) >= 2)
          {
            v24 = v16 + v33;
            v81 = v24;
            goto LABEL_40;
          }
        }
      }
    }
    else
    {
      v83 = 0;
      v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
      if (v16 < 0 || v16 + 4 > v21)
      {
        v84[0] = "usd/crateFile.cpp";
        v84[1] = "Read";
        __p[0] = (void *)770;
        __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v86) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v16, v21);
      }
      else
      {
        v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v16;
        if (v22 < 4 || ((v22 | v16) & 0x8000000000000000) != 0)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)779;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          v69 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v22, v69);
        }
        else
        {
          v23 = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t, ptrdiff_t))(**((_QWORD **)&v76 + 1) + 32))(*((_QWORD *)&v76 + 1), &v83, 4, v16);
          if ((unint64_t)(v23 + 1) >= 2)
          {
            v24 = v16 + v23;
            v81 = v24;
            v82 = v83;
LABEL_40:
            v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v24;
            v35 = v82;
            v36 = 4 * v82;
            if (v24 < 0 || (v34 & 0x8000000000000000) != 0 || v82 > v34 || v36 > v34)
            {
              v84[0] = "usd/crateFile.cpp";
              v84[1] = "_ReadUncompressedArray";
              __p[0] = (void *)2053;
              __p[1] = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>::type "
                       "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray"
                       "<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::"
                       "_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = int]";
              LOBYTE(v86) = 0;
              v73 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v35, v36, v34, v73);
            }
            else
            {
              v83 = 0;
              v84[0] = &v83;
              sub_20BF64D74((unint64_t *)a4, v82, (_DWORD **)v84);
              sub_20BF64FC4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v37, v38);
              v39 = *(_QWORD *)(a4 + 32);
              v40 = *(_QWORD *)a4;
              v41 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
              v42 = 4 * v40;
              if (v24 + v42 > v41)
              {
                v84[0] = "usd/crateFile.cpp";
                v84[1] = "Read";
                __p[0] = (void *)770;
                __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v86) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v42, v24, v41);
              }
              else
              {
                v43 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v24;
                if (v43 < v42 || ((v43 | v24) & 0x8000000000000000) != 0)
                {
                  v84[0] = "usd/crateFile.cpp";
                  v84[1] = "Read";
                  __p[0] = (void *)779;
                  __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v86) = 0;
                  v74 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v42, v43, v74);
                }
                else
                {
                  v44 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, ptrdiff_t))(**((_QWORD **)&v76 + 1)
                                                                                                + 32))(*((_QWORD *)&v76 + 1), v39, v42, v24);
                  if (v44 != -1 && (!v42 || v44))
                    v81 = v24 + v44;
                }
              }
            }
          }
        }
      }
    }
    if (v77)
    {
      v45 = &v77->__shared_owners_;
      do
        v46 = __ldaxr((unint64_t *)v45);
      while (__stlxr(v46 - 1, (unint64_t *)v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    goto LABEL_86;
  }
  v86 = 0;
  *(_OWORD *)v84 = 0u;
  *(_OWORD *)__p = 0u;
  if (v84 != (void **)a4)
  {
    sub_20BF5618C(a4);
    v25 = *(_OWORD *)__p;
    *(_OWORD *)a4 = *(_OWORD *)v84;
    *(_OWORD *)(a4 + 16) = v25;
    *(_OWORD *)v84 = 0u;
    *(_OWORD *)__p = 0u;
    *(_QWORD *)(a4 + 32) = v86;
    v86 = 0;
  }
  sub_20BF5618C((uint64_t)v84);
}

void sub_20C2D3AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v15;
  va_list va;

  va_start(va, a15);
  sub_20C2BAA20((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v15);
  _Unwind_Resume(a1);
}

void sub_20C2D3B44(uint64_t a1, unint64_t a2, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *this)
{
  void *v3;
  void *v4;
  void *v5[2];
  void *__p[2];

  *(_OWORD *)v5 = 0u;
  *(_OWORD *)__p = 0u;
  sub_20C2C72EC((uint64_t)v5, a1, a2, this);
  v3 = __p[0];
  __p[0] = 0;
  if (v3)
    operator delete[](v3);
  v4 = v5[0];
  v5[0] = 0;
  if (v4)
    operator delete[](v4);
}

void sub_20C2D3BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C2BAA20((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2D3BB4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52FB30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2D3C60(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52FBB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2D3D0C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52FC30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2D3DB8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52FCB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2D3E6C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52FB30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D3EA8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52FB30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2D3ECC(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2D3F28(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2D3EE0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52FB90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D3F1C()
{
  return &unk_24C52FB90;
}

unint64_t sub_20C2D3F28(uint64_t a1, uint64_t a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;

  v4 = (uint64_t *)this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *v4;
    return sub_20C2D3FCC(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    return *(unsigned int *)v4 | 0x4004000000000000;
  }
}

unint64_t sub_20C2D3FCC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v18;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v19;
  unint64_t v20;
  size_t CompressedBufferSize;
  char *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  char __src[24];
  int64_t v29;

  v26[0] = a2;
  v26[1] = a3;
  result = 0x8004000000000000;
  v25 = 0x8004000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B2A0C(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2D41C8(v9, a4, a4, &v25);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        *(_QWORD *)&v27 = a2;
        *((_QWORD *)&v27 + 1) = a3;
        v17 = *a3;
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          *(_QWORD *)__src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)&v27, __src);
        }
        else
        {
          *(_DWORD *)__src = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)&v27, __src);
        }
        v18 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
        v19 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)(a4 + 32);
        if (*(_QWORD *)a4 > 0xFuLL)
        {
          *(_OWORD *)__src = v27;
          CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize(v18);
          v22 = (char *)operator new[](CompressedBufferSize);
          v24 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v19, (const unsigned int *)v18, v22, v23);
          v29 = v24;
          sub_20C2B7248((uint64_t)__src, (char *)&v29);
          sub_20C2A7944((uint64_t)__src, v22, v24);
          operator delete[](v22);
          v20 = v17 & 0xFFFFFFFFFFFFLL | 0xA004000000000000;
        }
        else
        {
          v20 = v17 & 0xFFFFFFFFFFFFLL | 0x8004000000000000;
          sub_20C2C9460((uint64_t)&v27, (char *)v19, (uint64_t)v18);
        }
        v13[7] = v20;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v26, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        *(_DWORD *)__src = 1;
        sub_20C2CE770((uint64_t)v26, __src);
        *(_DWORD *)__src = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v26, __src);
        sub_20C2C9460((uint64_t)v26, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_20C2D41B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2D41C8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v9 = *(_QWORD *)a2;
  LOBYTE(v34) = 1;
  v33 = v9;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v33, *(pxrInternal__aapl__pxrReserved__ **)(a2 + 32), (char *)(4 * v9));
  v10 = bswap64(0x9E3779B97F4A7C55 * v33);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if ((pxrInternal__aapl__pxrReserved__::UsdSkelTopology::operator==((uint64_t)(i + 2), a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2D4474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2D4490(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2D4490(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

__n128 sub_20C2D44DC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52FBB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D4518(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52FBB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D453C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2D45CC(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2D4584(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52FC10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D45C0()
{
  return &unk_24C52FC10;
}

void sub_20C2D45CC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2D4660(a1, v6, a3, (uint64_t)v8);
    sub_20BF64504(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_20C1D01C8(a4, v8);
  }
}

void sub_20C2D4648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2D4660(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  FILE *v13;
  uint64_t v14;
  ssize_t v15;
  ssize_t v16;
  unint64_t v17;
  __int128 v18;
  ssize_t v19;
  unint64_t v20;
  ssize_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  __sFILE *v25;
  char *v26;
  off_t v27;
  ssize_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v35;
  void *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  pxrInternal__aapl__pxrReserved__ *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD _8C[21];

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = a3 & 0xFFFFFFFFFFFFLL;
    v7 = *(unsigned __int8 *)(*a2 + 6369);
    v8 = *(unsigned __int8 *)(*a2 + 6370);
    v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(v41) = 0, sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v41)))
    {
      v11 = *((_OWORD *)a2 + 1);
      v38 = *(_OWORD *)a2;
      v39 = v11;
      v40 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
      if ((a3 & 0x2000000000000000) == 0 || (v12 = v9 | v8 | (v7 << 8), v12 <= 0x4FF))
      {
        v13 = (FILE *)v40;
        v44 = 0;
        if (v10 > 0x6FF)
        {
          v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((_QWORD *)&v38 + 1));
          if (v19 == -1)
            return;
          v20 = v44;
        }
        else
        {
          LODWORD(v41) = 0;
          v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((_QWORD *)&v38 + 1));
          if (v19 == -1)
            return;
          v20 = v41;
          v44 = v41;
        }
        v28 = v19 + v39;
        v29 = *((_QWORD *)&v39 + 1) - (v19 + v39);
        if (v19 + (_QWORD)v39 < 0 || (v29 & 0x8000000000000000) != 0 || v20 > v29 || 4 * v20 > v29)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v42 = 2053;
          *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_PreadStream>, T = unsigned int]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _8C[0] = 0;
        *(_QWORD *)&v41 = _8C;
        sub_20BF64220((unint64_t *)a4, v20, (_DWORD **)&v41);
        sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
        v25 = *(__sFILE **)(a4 + 32);
        v26 = (char *)(4 * *(_QWORD *)a4);
        v27 = v28 + *((_QWORD *)&v38 + 1);
        goto LABEL_30;
      }
      v44 = 0;
      if (v12 > 0x6FF)
      {
        v13 = (FILE *)v40;
        v14 = *((_QWORD *)&v38 + 1);
        v21 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((_QWORD *)&v38 + 1));
        if (v21 == -1)
          return;
        v16 = v39 + v21;
        *(_QWORD *)&v39 = v39 + v21;
        v17 = v44;
      }
      else
      {
        LODWORD(v41) = 0;
        v13 = (FILE *)v40;
        v14 = *((_QWORD *)&v38 + 1);
        v15 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((_QWORD *)&v38 + 1));
        if (v15 == -1)
          return;
        v16 = v39 + v15;
        *(_QWORD *)&v39 = v39 + v15;
        v17 = v41;
        v44 = v41;
      }
      if (v17 <= 0xF)
      {
        v22 = *((_QWORD *)&v39 + 1) - v16;
        if (v16 < 0 || (v22 & 0x8000000000000000) != 0 || v17 > v22 || 4 * v17 > v22)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "_ReadPossiblyCompressedArray";
          *(_QWORD *)&v42 = 2241;
          *((_QWORD *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::"
                                  "value || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type px"
                                  "rInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, Va"
                                  "lueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_PreadStream>, T = unsigned int]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _8C[0] = 0;
        *(_QWORD *)&v41 = _8C;
        sub_20BF64220((unint64_t *)a4, v17, (_DWORD **)&v41);
        sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v23, v24);
        v25 = *(__sFILE **)(a4 + 32);
        v26 = (char *)(4 * *(_QWORD *)a4);
        v27 = v16 + v14;
LABEL_30:
        pxrInternal__aapl__pxrReserved__::ArchPRead(v13, v25, v26, v27);
        return;
      }
      if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v17)
        && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v17))
      {
        _8C[0] = 0;
        *(_QWORD *)&v41 = _8C;
        sub_20BF64220((unint64_t *)a4, v44, (_DWORD **)&v41);
        sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
        v34 = *(_QWORD *)(a4 + 32);
        v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
        v41 = 0u;
        v42 = 0u;
        sub_20C2C2018((uint64_t)&v41, (uint64_t)&v38, v34, v35);
        v36 = (void *)v42;
        *(_QWORD *)&v42 = 0;
        if (v36)
          operator delete[](v36);
        v37 = (void *)v41;
        *(_QWORD *)&v41 = 0;
        if (v37)
          operator delete[](v37);
      }
      else
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "_ReadPossiblyCompressedArray";
        *(_QWORD *)&v42 = 2249;
        *((_QWORD *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::va"
                                "lue || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInt"
                                "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep"
                                ", VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd"
                                "_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadSt"
                                "ream>, T = unsigned int]";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
      }
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    if (&v41 != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v18 = v42;
      *(_OWORD *)a4 = v41;
      *(_OWORD *)(a4 + 16) = v18;
      v41 = 0u;
      v42 = 0u;
      *(_QWORD *)(a4 + 32) = v43;
      v43 = 0;
    }
    sub_20BF5618C((uint64_t)&v41);
  }
}

void sub_20C2D4A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20C2BAA20((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C2D4A6C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52FC30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D4AA8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52FC30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D4ACC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2D4B1C((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2D4AD4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52FC90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D4B10()
{
  return &unk_24C52FC90;
}

void sub_20C2D4B1C(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2D4B98(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2D4B98(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2D4C2C(a1, v6, a3, (uint64_t)v8);
    sub_20BF64504(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_20C1D01C8(a4, v8);
  }
}

void sub_20C2D4C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2D4C2C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v36;
  void *v37;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *__dst[2];
  void *__p[2];
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v49;
  int v50;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6369);
    v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6370);
    v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16;
    v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(__dst[0]) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, __dst, 4uLL)))
    {
      v11 = a2[1];
      v40 = *a2;
      v41 = v11;
      v42 = *((_QWORD *)a2 + 4);
      if ((a3 & 0x2000000000000000) != 0 && (v12 = v9 | v8 | (v7 << 8), v12 > 0x4FF))
      {
        *(_QWORD *)&v43 = 0;
        if (v12 > 0x6FF)
        {
          if (!sub_20C2B9BEC((uint64_t)&v40 + 8, &v43, 8uLL))
            return;
          v13 = v43;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if (!sub_20C2B9BEC((uint64_t)&v40 + 8, __dst, 4uLL))
            return;
          v13 = LODWORD(__dst[0]);
          *(_QWORD *)&v43 = LODWORD(__dst[0]);
        }
        if (v13 > 0xF)
        {
          if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v13)
            && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v13))
          {
            LODWORD(v49) = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v49;
            sub_20BF64220((unint64_t *)a4, v43, (_DWORD **)__dst);
            sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v33, v34);
            v35 = *(_QWORD *)(a4 + 32);
            v36 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
            *(_OWORD *)__dst = 0u;
            *(_OWORD *)__p = 0u;
            sub_20C2BA8CC((uint64_t)__dst, (uint64_t)&v40, v35, v36);
            v37 = __p[0];
            __p[0] = 0;
            if (v37)
              operator delete[](v37);
            v38 = __dst[0];
            __dst[0] = 0;
            if (v38)
              operator delete[](v38);
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadPossiblyCompressedArray";
            __p[0] = (void *)2249;
            __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std:"
                     ":is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserv"
                     "ed__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versio"
                     "n, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__"
                     "aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cr"
                     "ateFile::_FileMapping *>>, T = unsigned int]";
            LOBYTE(v48) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
          }
        }
        else
        {
          v23 = *((_QWORD *)&v40 + 1) - *(_QWORD *)(*(_QWORD *)v41 + 24);
          v24 = *(_QWORD *)(*(_QWORD *)v41 + 32) - v23;
          if ((v23 & 0x8000000000000000) == 0 && (v24 & 0x8000000000000000) == 0 && v13 <= v24 && 4 * v13 <= v24)
          {
            v19 = (char *)&v40 + 8;
            LODWORD(v49) = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v49;
            v26 = (unint64_t *)a4;
            v27 = v13;
LABEL_42:
            sub_20BF64220(v26, v27, (_DWORD **)__dst);
            sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v31, v32);
            sub_20C2B9BEC((uint64_t)v19, *(void **)(a4 + 32), 4 * *(_QWORD *)a4);
            return;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadPossiblyCompressedArray";
          __p[0] = (void *)2241;
          __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std::i"
                   "s_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserved__"
                   "::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int"
                   ") [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__px"
                   "rReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_"
                   "FileMapping *>>, T = unsigned int]";
          LOBYTE(v48) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        }
      }
      else
      {
        v15 = a2[1];
        v43 = *a2;
        v44 = v15;
        v45 = *((_QWORD *)a2 + 4);
        v16 = atomic_load((unsigned __int8 *)&qword_254988440);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254988440))
        {
          v39 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          if (!v39)
          {
            pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
            v39 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          }
          byte_254988438 = *v39;
          __cxa_guard_release(&qword_254988440);
        }
        v49 = 0;
        if (v10 > 0x6FF)
        {
          if (!sub_20C2B9BEC((uint64_t)&v43 + 8, &v49, 8uLL))
            return;
          v17 = (unint64_t)v49;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if ((sub_20C2B9BEC((uint64_t)&v43 + 8, __dst, 4uLL) & 1) == 0)
            return;
          v17 = LODWORD(__dst[0]);
          v49 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)LODWORD(__dst[0]);
        }
        v18 = 4 * v17;
        v19 = (char *)&v43 + 8;
        v20 = *((_QWORD *)&v43 + 1);
        if (!byte_254988438 || v18 < 0x800 || (BYTE8(v43) & 3) != 0)
        {
          v28 = *((_QWORD *)&v43 + 1) - *(_QWORD *)(*(_QWORD *)v44 + 24);
          v29 = *(_QWORD *)(*(_QWORD *)v44 + 32) - v28;
          if ((v28 & 0x8000000000000000) == 0 && (v29 & 0x8000000000000000) == 0 && v17 <= v29 && v18 <= v29)
          {
            v50 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)&v50;
            v26 = (unint64_t *)a4;
            v27 = v17;
            goto LABEL_42;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadUncompressedArray";
          __p[0] = (void *)2117;
          __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *, Cra"
                   "teFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFil"
                   "e::CrateFile::_FileMapping *>>, T = unsigned int]";
          LOBYTE(v48) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
        }
        else
        {
          v21 = sub_20C2CF260((uint64_t)&v43 + 8, *((char **)&v43 + 1), 4 * v17, v17);
          if (v21)
          {
            __p[0] = 0;
            __p[1] = v21;
            v48 = v20;
            __dst[0] = v49;
            __dst[1] = 0;
            if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4)
            {
              sub_20BF5618C(a4);
              v22 = *(_OWORD *)__p;
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(_OWORD *)(a4 + 16) = v22;
              *(_OWORD *)__dst = 0u;
              *(_OWORD *)__p = 0u;
              *(_QWORD *)(a4 + 32) = v48;
              v48 = 0;
            }
            sub_20BF5618C((uint64_t)__dst);
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)"_ReadUncompressedArray";
            __p[0] = (void *)2109;
            __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrI"
                     "nternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *,"
                     " CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<"
                     "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_"
                     "CrateFile::CrateFile::_FileMapping *>>, T = unsigned int]";
            LOBYTE(v48) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v18);
            sub_20BF56210((_QWORD *)a4);
          }
        }
      }
    }
  }
  else
  {
    v48 = 0;
    *(_OWORD *)__dst = 0u;
    *(_OWORD *)__p = 0u;
    if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4)
    {
      sub_20BF5618C(a4);
      v14 = *(_OWORD *)__p;
      *(_OWORD *)a4 = *(_OWORD *)__dst;
      *(_OWORD *)(a4 + 16) = v14;
      *(_OWORD *)__dst = 0u;
      *(_OWORD *)__p = 0u;
      *(_QWORD *)(a4 + 32) = v48;
      v48 = 0;
    }
    sub_20BF5618C((uint64_t)__dst);
  }
}

void sub_20C2D5120(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988440);
  _Unwind_Resume(a1);
}

__n128 sub_20C2D5180(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52FCB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D51BC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52FCB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D51E0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2D5238((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2D51F0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52FD10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D522C()
{
  return &unk_24C52FD10;
}

void sub_20C2D5238(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2D5354(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2D5338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2D5354(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  __n128 v18[2];
  uint64_t v19;

  if (a3 < 0)
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    v15 = *a2;
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v16 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v17 = *((_QWORD *)a2 + 3);
    sub_20C2D54A8(a1, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&v15, a3, (uint64_t)v18);
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    sub_20BF64504(a4, v18);
    sub_20BF5618C((uint64_t)v18);
  }
  else
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v18[0].n128_u32[0] = a3;
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 - 1, v6));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v18[0].n128_u32[0] = a3;
    }
    sub_20C1D01C8(a4, v18);
  }
}

void sub_20C2D5480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2D54A8(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **a2, uint64_t a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  ptrdiff_t v16;
  unsigned int v17;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  ptrdiff_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  ptrdiff_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  unint64_t v56;
  BOOL v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v63;
  void *v64;
  void *v65;
  std::__shared_weak_count *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  ptrdiff_t v78;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v79[2];
  std::__shared_weak_count *v80;
  ptrdiff_t v81;
  unint64_t v82;
  unsigned int v83;
  void *v84[2];
  void *__p[2];
  uint64_t v86;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(a3 & 0xFFFFFFFFFFFFLL);
    v7 = *a2;
    v8 = *((unsigned __int8 *)*a2 + 6369);
    v9 = *((unsigned __int8 *)*a2 + 6370);
    v10 = *((unsigned __int8 *)*a2 + 6368) << 16;
    v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v84[0]) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)v84, 4uLL))
        return;
      v7 = *a2;
    }
    v13 = a2[1];
    v12 = (std::__shared_weak_count *)a2[2];
    *(_QWORD *)&v76 = v7;
    *((_QWORD *)&v76 + 1) = v13;
    v77 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = (ptrdiff_t)a2[3];
    v78 = v16;
    v17 = v10 | v9 | (v8 << 8);
    if (v17 >= 0x500 && (a3 & 0x2000000000000000) != 0)
    {
      v82 = 0;
      if (v17 > 0x6FF)
      {
        v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
        if (v78 < 0 || v78 + 8 > v47)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)770;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v78, v47);
        }
        else
        {
          v48 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v78;
          if (v48 < 8 || ((v48 | v78) & 0x8000000000000000) != 0)
          {
            v84[0] = "usd/crateFile.cpp";
            v84[1] = "Read";
            __p[0] = (void *)779;
            __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
            LOBYTE(v86) = 0;
            v72 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v48, v72);
          }
          else
          {
            v49 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t))(**((_QWORD **)&v76 + 1) + 32))(*((_QWORD *)&v76 + 1), &v82, 8);
            if ((unint64_t)(v49 + 1) >= 2)
            {
              v29 = v78 + v49;
              v78 += v49;
              v30 = v82;
LABEL_62:
              if (v30 > 0xF)
              {
                *(_OWORD *)v79 = v76;
                v80 = v77;
                if (v77)
                {
                  v55 = &v77->__shared_owners_;
                  do
                    v56 = __ldxr((unint64_t *)v55);
                  while (__stxr(v56 + 1, (unint64_t *)v55));
                  v29 = v78;
                }
                v81 = v29;
                if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v30))
                  v57 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v30) != 0;
                else
                  v57 = 0;
                if (v77)
                {
                  v58 = &v77->__shared_owners_;
                  do
                    v59 = __ldaxr((unint64_t *)v58);
                  while (__stlxr(v59 - 1, (unint64_t *)v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                    std::__shared_weak_count::__release_weak(v77);
                  }
                }
                if (v57)
                {
                  v83 = 0;
                  v84[0] = &v83;
                  sub_20BF64220((unint64_t *)a4, v82, (_DWORD **)v84);
                  sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v60, v61);
                  v62 = *(_QWORD *)(a4 + 32);
                  v63 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)a4;
                  *(_OWORD *)v84 = 0u;
                  *(_OWORD *)__p = 0u;
                  sub_20C2C5E8C((uint64_t)v84, (uint64_t)&v76, v62, v63);
                  v64 = __p[0];
                  __p[0] = 0;
                  if (v64)
                    operator delete[](v64);
                  v65 = v84[0];
                  v84[0] = 0;
                  if (v65)
                    operator delete[](v65);
                }
                else
                {
                  v84[0] = "usd/crateFile.cpp";
                  v84[1] = "_ReadPossiblyCompressedArray";
                  __p[0] = (void *)2249;
                  __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value |"
                           "| std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aap"
                           "l__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *,"
                           " CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                           "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = unsigned int]";
                  LOBYTE(v86) = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values", v82);
                }
              }
              else
              {
                v50 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v78;
                v51 = v82;
                v52 = 4 * v82;
                if (v78 < 0 || (v50 & 0x8000000000000000) != 0 || v82 > v50 || v52 > v50)
                {
                  v84[0] = "usd/crateFile.cpp";
                  v84[1] = "_ReadPossiblyCompressedArray";
                  __p[0] = (void *)2241;
                  __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value |"
                           "| std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aap"
                           "l__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *,"
                           " CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                           "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = unsigned int]";
                  LOBYTE(v86) = 0;
                  v75 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v51, v52, v50, v75);
                }
                else
                {
                  LODWORD(v79[0]) = 0;
                  v84[0] = v79;
                  sub_20BF64220((unint64_t *)a4, v82, (_DWORD **)v84);
                  sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v53, v54);
                  sub_20C2B72E8((_QWORD *)&v76 + 1, *(_QWORD *)(a4 + 32), 4 * *(_QWORD *)a4);
                }
              }
            }
          }
        }
      }
      else
      {
        LODWORD(v79[0]) = 0;
        v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
        if (v78 < 0 || v78 + 4 > v26)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)770;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v78, v26);
        }
        else
        {
          v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v78;
          if (v27 < 4 || ((v27 | v78) & 0x8000000000000000) != 0)
          {
            v84[0] = "usd/crateFile.cpp";
            v84[1] = "Read";
            __p[0] = (void *)779;
            __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
            LOBYTE(v86) = 0;
            v70 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v27, v70);
          }
          else
          {
            v28 = (*(uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **, uint64_t))(**((_QWORD **)&v76 + 1) + 32))(*((_QWORD *)&v76 + 1), v79, 4);
            if ((unint64_t)(v28 + 1) >= 2)
            {
              v29 = v78 + v28;
              v78 += v28;
              v30 = LODWORD(v79[0]);
              v82 = LODWORD(v79[0]);
              goto LABEL_62;
            }
          }
        }
      }
LABEL_86:
      v66 = v77;
      if (v77)
      {
        v67 = &v77->__shared_owners_;
        do
          v68 = __ldaxr((unint64_t *)v67);
        while (__stlxr(v68 - 1, (unint64_t *)v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      return;
    }
    v79[0] = v7;
    v79[1] = *((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&v76 + 1);
    v80 = v77;
    if (v77)
    {
      v19 = &v77->__shared_owners_;
      do
        v20 = __ldxr((unint64_t *)v19);
      while (__stxr(v20 + 1, (unint64_t *)v19));
      v16 = v78;
    }
    v81 = v16;
    v82 = 0;
    if (v11 > 0x6FF)
    {
      v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
      if (v16 < 0 || v16 + 8 > v31)
      {
        v84[0] = "usd/crateFile.cpp";
        v84[1] = "Read";
        __p[0] = (void *)770;
        __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v86) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v16, v31);
      }
      else
      {
        v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v16;
        if (v32 < 8 || ((v32 | v16) & 0x8000000000000000) != 0)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)779;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          v71 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v32, v71);
        }
        else
        {
          v33 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t, ptrdiff_t))(**((_QWORD **)&v76 + 1)
                                                                                          + 32))(*((_QWORD *)&v76 + 1), &v82, 8, v16);
          if ((unint64_t)(v33 + 1) >= 2)
          {
            v24 = v16 + v33;
            v81 = v24;
            goto LABEL_40;
          }
        }
      }
    }
    else
    {
      v83 = 0;
      v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
      if (v16 < 0 || v16 + 4 > v21)
      {
        v84[0] = "usd/crateFile.cpp";
        v84[1] = "Read";
        __p[0] = (void *)770;
        __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v86) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v16, v21);
      }
      else
      {
        v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v16;
        if (v22 < 4 || ((v22 | v16) & 0x8000000000000000) != 0)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)779;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          v69 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v22, v69);
        }
        else
        {
          v23 = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t, ptrdiff_t))(**((_QWORD **)&v76 + 1) + 32))(*((_QWORD *)&v76 + 1), &v83, 4, v16);
          if ((unint64_t)(v23 + 1) >= 2)
          {
            v24 = v16 + v23;
            v81 = v24;
            v82 = v83;
LABEL_40:
            v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v24;
            v35 = v82;
            v36 = 4 * v82;
            if (v24 < 0 || (v34 & 0x8000000000000000) != 0 || v82 > v34 || v36 > v34)
            {
              v84[0] = "usd/crateFile.cpp";
              v84[1] = "_ReadUncompressedArray";
              __p[0] = (void *)2053;
              __p[1] = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>::type "
                       "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray"
                       "<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::"
                       "_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = unsigned int]";
              LOBYTE(v86) = 0;
              v73 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v35, v36, v34, v73);
            }
            else
            {
              v83 = 0;
              v84[0] = &v83;
              sub_20BF64220((unint64_t *)a4, v82, (_DWORD **)v84);
              sub_20BF64470((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v37, v38);
              v39 = *(_QWORD *)(a4 + 32);
              v40 = *(_QWORD *)a4;
              v41 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
              v42 = 4 * v40;
              if (v24 + v42 > v41)
              {
                v84[0] = "usd/crateFile.cpp";
                v84[1] = "Read";
                __p[0] = (void *)770;
                __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v86) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v42, v24, v41);
              }
              else
              {
                v43 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v24;
                if (v43 < v42 || ((v43 | v24) & 0x8000000000000000) != 0)
                {
                  v84[0] = "usd/crateFile.cpp";
                  v84[1] = "Read";
                  __p[0] = (void *)779;
                  __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v86) = 0;
                  v74 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v42, v43, v74);
                }
                else
                {
                  v44 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, ptrdiff_t))(**((_QWORD **)&v76 + 1)
                                                                                                + 32))(*((_QWORD *)&v76 + 1), v39, v42, v24);
                  if (v44 != -1 && (!v42 || v44))
                    v81 = v24 + v44;
                }
              }
            }
          }
        }
      }
    }
    if (v77)
    {
      v45 = &v77->__shared_owners_;
      do
        v46 = __ldaxr((unint64_t *)v45);
      while (__stlxr(v46 - 1, (unint64_t *)v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    goto LABEL_86;
  }
  v86 = 0;
  *(_OWORD *)v84 = 0u;
  *(_OWORD *)__p = 0u;
  if (v84 != (void **)a4)
  {
    sub_20BF5618C(a4);
    v25 = *(_OWORD *)__p;
    *(_OWORD *)a4 = *(_OWORD *)v84;
    *(_OWORD *)(a4 + 16) = v25;
    *(_OWORD *)v84 = 0u;
    *(_OWORD *)__p = 0u;
    *(_QWORD *)(a4 + 32) = v86;
    v86 = 0;
  }
  sub_20BF5618C((uint64_t)v84);
}

void sub_20C2D5F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v15;
  va_list va;

  va_start(va, a15);
  sub_20C2BAA20((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v15);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2D5F70(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52FD30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2D601C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52FDB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2D60C8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52FE30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2D6174(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52FEB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2D6228(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52FD30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D6264(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52FD30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2D6288(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2D62E4(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2D629C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52FD90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D62D8()
{
  return &unk_24C52FD90;
}

unint64_t sub_20C2D62E4(uint64_t *a1, uint64_t a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  _QWORD v18[2];

  v4 = this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *(_QWORD *)v4;
    return sub_20C2D6414((uint64_t)a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    v18[0] = a2;
    v18[1] = a3;
    if (*(_QWORD *)v4 == (int)*(_QWORD *)v4)
    {
      return *(_QWORD *)v4 | 0x4005000000000000;
    }
    else
    {
      v12 = *a1;
      if (!*a1)
      {
        v13 = operator new(0x28uLL);
        *v13 = 0u;
        v13[1] = 0u;
        *((_DWORD *)v13 + 8) = 1065353216;
        sub_20BF2B090(a1, (uint64_t)v13);
        v12 = *a1;
      }
      v17 = 0;
      v14 = sub_20C2D69C0(v12, v4, v4, &v17);
      v15 = v14;
      if (v16)
      {
        v14[3] = *a3 & 0xFFFFFFFFFFFFLL | 0x5000000000000;
        sub_20C2B7248((uint64_t)v18, (char *)v4);
      }
      return v15[3];
    }
  }
}

unint64_t sub_20C2D6414(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v18;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v19;
  unint64_t v20;
  size_t CompressedBufferSize;
  char *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  char __src[24];
  int64_t v29;

  v26[0] = a2;
  v26[1] = a3;
  result = 0x8005000000000000;
  v25 = 0x8005000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B2AB0(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2D66B4(v9, a4, a4, &v25);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        *(_QWORD *)&v27 = a2;
        *((_QWORD *)&v27 + 1) = a3;
        v17 = *a3;
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          *(_QWORD *)__src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)&v27, __src);
        }
        else
        {
          *(_DWORD *)__src = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)&v27, __src);
        }
        v18 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
        v19 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)(a4 + 32);
        if (*(_QWORD *)a4 > 0xFuLL)
        {
          *(_OWORD *)__src = v27;
          CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize(v18);
          v22 = (char *)operator new[](CompressedBufferSize);
          v24 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::CompressToBuffer(v19, (const uint64_t *)v18, v22, v23);
          v29 = v24;
          sub_20C2B7248((uint64_t)__src, (char *)&v29);
          sub_20C2A7944((uint64_t)__src, v22, v24);
          operator delete[](v22);
          v20 = v17 & 0xFFFFFFFFFFFFLL | 0xA005000000000000;
        }
        else
        {
          v20 = v17 & 0xFFFFFFFFFFFFLL | 0x8005000000000000;
          sub_20C2D6610((uint64_t)&v27, (char *)v19, (uint64_t)v18);
        }
        v13[7] = v20;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v26, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        *(_DWORD *)__src = 1;
        sub_20C2CE770((uint64_t)v26, __src);
        *(_DWORD *)__src = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v26, __src);
        sub_20C2D6610((uint64_t)v26, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_20C2D65FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2D6610(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  v3 = 8 * a3;
  if (8 * a3)
  {
    v5 = *(_QWORD **)(result + 8);
    do
    {
      v6 = v5[2];
      v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7)
        v8 = v6 - *v5 + 0x80000;
      else
        v8 = v3;
      v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4])
        v5[4] = v8 + v9;
      result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3)
        result = sub_20C2B209C((_BOOL8)v5);
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

_QWORD *sub_20C2D66B4(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v9 = *(_QWORD *)a2;
  LOBYTE(v34) = 1;
  v33 = v9;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v33, *(pxrInternal__aapl__pxrReserved__ **)(a2 + 32), (char *)(8 * v9));
  v10 = bswap64(0x9E3779B97F4A7C55 * v33);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if ((sub_20C004340((uint64_t)(i + 2), a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2D6960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2D697C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2D697C(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

_QWORD *sub_20C2D69C0(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  _QWORD **v11;
  _QWORD *i;
  unint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v8 = bswap64(0x9E3779B97F4A7C55 * *a2);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      v4 = v8;
      if (v8 >= v9)
        v4 = v8 % v9;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
    v11 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v11)
    {
      for (i = *v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2)
            return i;
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9)
              v13 %= v9;
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v8;
  v14 = *a4;
  i[2] = *a3;
  i[3] = v14;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v4 = v8 % v9;
      else
        v4 = v8;
    }
    else
    {
      v4 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *i = *v22;
LABEL_38:
    *v22 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v23 = *(_QWORD *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v23 >= v9)
        v23 %= v9;
    }
    else
    {
      v23 &= v9 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2D6BEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C2D6C08(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52FDB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D6C44(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52FDB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D6C68(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2D6CF8(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2D6CB0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52FE10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D6CEC()
{
  return &unk_24C52FE10;
}

void sub_20C2D6CF8(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2D6DB8(a1, v6, a3, (uint64_t)v8);
    sub_20C1D0444(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u64[0] = 0;
    if ((a3 & 0x4000000000000000) != 0)
      v8[0].n128_u64[0] = (int)a3;
    else
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)8, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    sub_20C1D03D0(a4, (uint64_t *)v8);
  }
}

void sub_20C2D6DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2D6DB8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  FILE *v13;
  uint64_t v14;
  ssize_t v15;
  ssize_t v16;
  unint64_t v17;
  __int128 v18;
  ssize_t v19;
  unint64_t v20;
  ssize_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  __sFILE *v25;
  char *v26;
  off_t v27;
  ssize_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v35;
  void *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  pxrInternal__aapl__pxrReserved__ *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD _88[11];

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = a3 & 0xFFFFFFFFFFFFLL;
    v7 = *(unsigned __int8 *)(*a2 + 6369);
    v8 = *(unsigned __int8 *)(*a2 + 6370);
    v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(v41) = 0, sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v41)))
    {
      v11 = *((_OWORD *)a2 + 1);
      v38 = *(_OWORD *)a2;
      v39 = v11;
      v40 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
      if ((a3 & 0x2000000000000000) == 0 || (v12 = v9 | v8 | (v7 << 8), v12 <= 0x4FF))
      {
        v13 = (FILE *)v40;
        v44 = 0;
        if (v10 > 0x6FF)
        {
          v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((_QWORD *)&v38 + 1));
          if (v19 == -1)
            return;
          v20 = v44;
        }
        else
        {
          LODWORD(v41) = 0;
          v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((_QWORD *)&v38 + 1));
          if (v19 == -1)
            return;
          v20 = v41;
          v44 = v41;
        }
        v28 = v19 + v39;
        v29 = *((_QWORD *)&v39 + 1) - (v19 + v39);
        if (v19 + (_QWORD)v39 < 0 || (v29 & 0x8000000000000000) != 0 || v20 > v29 || 8 * v20 > v29)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v42 = 2053;
          *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_PreadStream>, T = long long]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _88[0] = 0;
        *(_QWORD *)&v41 = _88;
        sub_20C004484((unint64_t *)a4, v20, (uint64_t **)&v41);
        sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
        v25 = *(__sFILE **)(a4 + 32);
        v26 = (char *)(8 * *(_QWORD *)a4);
        v27 = v28 + *((_QWORD *)&v38 + 1);
        goto LABEL_30;
      }
      v44 = 0;
      if (v12 > 0x6FF)
      {
        v13 = (FILE *)v40;
        v14 = *((_QWORD *)&v38 + 1);
        v21 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((_QWORD *)&v38 + 1));
        if (v21 == -1)
          return;
        v16 = v39 + v21;
        *(_QWORD *)&v39 = v39 + v21;
        v17 = v44;
      }
      else
      {
        LODWORD(v41) = 0;
        v13 = (FILE *)v40;
        v14 = *((_QWORD *)&v38 + 1);
        v15 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((_QWORD *)&v38 + 1));
        if (v15 == -1)
          return;
        v16 = v39 + v15;
        *(_QWORD *)&v39 = v39 + v15;
        v17 = v41;
        v44 = v41;
      }
      if (v17 <= 0xF)
      {
        v22 = *((_QWORD *)&v39 + 1) - v16;
        if (v16 < 0 || (v22 & 0x8000000000000000) != 0 || v17 > v22 || 8 * v17 > v22)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "_ReadPossiblyCompressedArray";
          *(_QWORD *)&v42 = 2241;
          *((_QWORD *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::"
                                  "value || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type px"
                                  "rInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, Va"
                                  "lueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_PreadStream>, T = long long]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _88[0] = 0;
        *(_QWORD *)&v41 = _88;
        sub_20C004484((unint64_t *)a4, v17, (uint64_t **)&v41);
        sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v23, v24);
        v25 = *(__sFILE **)(a4 + 32);
        v26 = (char *)(8 * *(_QWORD *)a4);
        v27 = v16 + v14;
LABEL_30:
        pxrInternal__aapl__pxrReserved__::ArchPRead(v13, v25, v26, v27);
        return;
      }
      if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v17)
        && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v17))
      {
        _88[0] = 0;
        *(_QWORD *)&v41 = _88;
        sub_20C004484((unint64_t *)a4, v44, (uint64_t **)&v41);
        sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
        v34 = *(_QWORD *)(a4 + 32);
        v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
        v41 = 0u;
        v42 = 0u;
        sub_20C2D7208((uint64_t)&v41, (uint64_t)&v38, v34, v35);
        v36 = (void *)v42;
        *(_QWORD *)&v42 = 0;
        if (v36)
          operator delete[](v36);
        v37 = (void *)v41;
        *(_QWORD *)&v41 = 0;
        if (v37)
          operator delete[](v37);
      }
      else
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "_ReadPossiblyCompressedArray";
        *(_QWORD *)&v42 = 2249;
        *((_QWORD *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::va"
                                "lue || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInt"
                                "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep"
                                ", VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd"
                                "_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadSt"
                                "ream>, T = long long]";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
      }
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    if (&v41 != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v18 = v42;
      *(_OWORD *)a4 = v41;
      *(_OWORD *)(a4 + 16) = v18;
      v41 = 0u;
      v42 = 0u;
      *(_QWORD *)(a4 + 32) = v43;
      v43 = 0;
    }
    sub_20BF5618C((uint64_t)&v41);
  }
}

void sub_20C2D7190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20C2BAA20((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C2D71BC(uint64_t a1, __sFILE *a2, uint64_t a3)
{
  ssize_t v4;

  v4 = pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a1 + 32), a2, (char *)(8 * a3), *(_QWORD *)(a1 + 16) + *(_QWORD *)(a1 + 8));
  if (v4 != -1)
    *(_QWORD *)(a1 + 16) += v4;
  return v4 != -1;
}

BOOL sub_20C2D7208(uint64_t a1, uint64_t a2, unint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *a4)
{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;
  char *v20;

  sub_20C2D7344(a1, a4);
  v20 = 0;
  result = sub_20C2C1BD8(a2 + 8, 0, (__sFILE *)&v20);
  if (result)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = v20;
    if (v11 < (unint64_t)v20)
      v12 = *(char **)(a1 + 8);
    if (v9 - v10 >= (unint64_t)v12)
      v13 = v12;
    else
      v13 = (char *)(v9 - v10);
    v20 = v13;
    if (v11 && *(_QWORD *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        result = sub_20C2AA6E4(a2, *(__sFILE **)a1, v13);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a1, v20, a3, (int64_t)a4, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2158;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = long long]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2153;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = long long]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

void sub_20C2D7344(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  size_t CompressedBufferSize;
  size_t DecompressionWorkingSpaceSize;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize(this);
  DecompressionWorkingSpaceSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize(this);
  if (CompressedBufferSize > *(_QWORD *)(a1 + 8))
  {
    v6 = operator new[](CompressedBufferSize);
    v7 = *(void **)a1;
    *(_QWORD *)a1 = v6;
    if (v7)
      operator delete[](v7);
    *(_QWORD *)(a1 + 8) = CompressedBufferSize;
  }
  if (DecompressionWorkingSpaceSize > *(_QWORD *)(a1 + 24))
  {
    v8 = operator new[](DecompressionWorkingSpaceSize);
    v9 = *(void **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v8;
    if (v9)
      operator delete[](v9);
    *(_QWORD *)(a1 + 24) = DecompressionWorkingSpaceSize;
  }
}

__n128 sub_20C2D73E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52FE30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D7420(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52FE30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D7444(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2D7494((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2D744C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52FE90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D7488()
{
  return &unk_24C52FE90;
}

void sub_20C2D7494(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2D7510(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2D7510(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];
  uint64_t v11;
  __n128 __dst[2];
  uint64_t v13;

  if (a3 < 0)
  {
    v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    v11 = *(_QWORD *)(a2 + 32);
    sub_20C2D75F0(a1, v10, a3, (uint64_t)__dst);
    sub_20C1D0444(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    __dst[0].n128_u64[0] = 0;
    v5 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)a2;
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      __dst[0].n128_u64[0] = (int)a3;
    }
    else
    {
      *((_QWORD *)&v7 + 1) = *(_QWORD *)(*(_QWORD *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v7 + 8, __dst, 8uLL);
    }
    sub_20C1D03D0(a4, (uint64_t *)__dst);
  }
}

void sub_20C2D75D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2D75F0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v36;
  void *v37;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *__dst[2];
  void *__p[2];
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v49;
  unint64_t v50;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6369);
    v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6370);
    v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16;
    v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(__dst[0]) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, __dst, 4uLL)))
    {
      v11 = a2[1];
      v40 = *a2;
      v41 = v11;
      v42 = *((_QWORD *)a2 + 4);
      if ((a3 & 0x2000000000000000) != 0 && (v12 = v9 | v8 | (v7 << 8), v12 > 0x4FF))
      {
        v50 = 0;
        if (v12 > 0x6FF)
        {
          if (!sub_20C2B9BEC((uint64_t)&v40 + 8, &v50, 8uLL))
            return;
          v13 = v50;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if (!sub_20C2B9BEC((uint64_t)&v40 + 8, __dst, 4uLL))
            return;
          v13 = LODWORD(__dst[0]);
          v50 = LODWORD(__dst[0]);
        }
        if (v13 > 0xF)
        {
          if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v13)
            && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v13))
          {
            *(_QWORD *)&v43 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v43;
            sub_20C004484((unint64_t *)a4, v50, (uint64_t **)__dst);
            sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v33, v34);
            v35 = *(_QWORD *)(a4 + 32);
            v36 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
            *(_OWORD *)__dst = 0u;
            *(_OWORD *)__p = 0u;
            sub_20C2D7B3C((uint64_t)__dst, (uint64_t)&v40, v35, v36);
            v37 = __p[0];
            __p[0] = 0;
            if (v37)
              operator delete[](v37);
            v38 = __dst[0];
            __dst[0] = 0;
            if (v38)
              operator delete[](v38);
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadPossiblyCompressedArray";
            __p[0] = (void *)2249;
            __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std:"
                     ":is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserv"
                     "ed__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versio"
                     "n, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__"
                     "aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cr"
                     "ateFile::_FileMapping *>>, T = long long]";
            LOBYTE(v48) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
          }
        }
        else
        {
          v23 = *((_QWORD *)&v40 + 1) - *(_QWORD *)(*(_QWORD *)v41 + 24);
          v24 = *(_QWORD *)(*(_QWORD *)v41 + 32) - v23;
          if ((v23 & 0x8000000000000000) == 0 && (v24 & 0x8000000000000000) == 0 && v13 <= v24 && 8 * v13 <= v24)
          {
            v19 = (char *)&v40 + 8;
            *(_QWORD *)&v43 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v43;
            v26 = (unint64_t *)a4;
            v27 = v13;
LABEL_42:
            sub_20C004484(v26, v27, (uint64_t **)__dst);
            sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v31, v32);
            sub_20C2B9BEC((uint64_t)v19, *(void **)(a4 + 32), 8 * *(_QWORD *)a4);
            return;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadPossiblyCompressedArray";
          __p[0] = (void *)2241;
          __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std::i"
                   "s_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserved__"
                   "::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int"
                   ") [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__px"
                   "rReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_"
                   "FileMapping *>>, T = long long]";
          LOBYTE(v48) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        }
      }
      else
      {
        v15 = a2[1];
        v43 = *a2;
        v44 = v15;
        v45 = *((_QWORD *)a2 + 4);
        v16 = atomic_load((unsigned __int8 *)&qword_254988450);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254988450))
        {
          v39 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          if (!v39)
          {
            pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
            v39 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          }
          byte_254988448 = *v39;
          __cxa_guard_release(&qword_254988450);
        }
        v49 = 0;
        if (v10 > 0x6FF)
        {
          if (!sub_20C2B9BEC((uint64_t)&v43 + 8, &v49, 8uLL))
            return;
          v17 = (unint64_t)v49;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if ((sub_20C2B9BEC((uint64_t)&v43 + 8, __dst, 4uLL) & 1) == 0)
            return;
          v17 = LODWORD(__dst[0]);
          v49 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)LODWORD(__dst[0]);
        }
        v18 = 8 * v17;
        v19 = (char *)&v43 + 8;
        v20 = *((_QWORD *)&v43 + 1);
        if (!byte_254988448 || v18 < 0x800 || (BYTE8(v43) & 7) != 0)
        {
          v28 = *((_QWORD *)&v43 + 1) - *(_QWORD *)(*(_QWORD *)v44 + 24);
          v29 = *(_QWORD *)(*(_QWORD *)v44 + 32) - v28;
          if ((v28 & 0x8000000000000000) == 0 && (v29 & 0x8000000000000000) == 0 && v17 <= v29 && v18 <= v29)
          {
            v50 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v50;
            v26 = (unint64_t *)a4;
            v27 = v17;
            goto LABEL_42;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadUncompressedArray";
          __p[0] = (void *)2117;
          __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *, Cra"
                   "teFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFil"
                   "e::CrateFile::_FileMapping *>>, T = long long]";
          LOBYTE(v48) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
        }
        else
        {
          v21 = sub_20C2CF260((uint64_t)&v43 + 8, *((char **)&v43 + 1), 8 * v17, v17);
          if (v21)
          {
            __p[0] = 0;
            __p[1] = v21;
            v48 = v20;
            __dst[0] = v49;
            __dst[1] = 0;
            if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4)
            {
              sub_20BF5618C(a4);
              v22 = *(_OWORD *)__p;
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(_OWORD *)(a4 + 16) = v22;
              *(_OWORD *)__dst = 0u;
              *(_OWORD *)__p = 0u;
              *(_QWORD *)(a4 + 32) = v48;
              v48 = 0;
            }
            sub_20BF5618C((uint64_t)__dst);
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadUncompressedArray";
            __p[0] = (void *)2109;
            __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrI"
                     "nternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *,"
                     " CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<"
                     "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_"
                     "CrateFile::CrateFile::_FileMapping *>>, T = long long]";
            LOBYTE(v48) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v18);
            sub_20BF56210((_QWORD *)a4);
          }
        }
      }
    }
  }
  else
  {
    v48 = 0;
    *(_OWORD *)__dst = 0u;
    *(_OWORD *)__p = 0u;
    if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4)
    {
      sub_20BF5618C(a4);
      v14 = *(_OWORD *)__p;
      *(_OWORD *)a4 = *(_OWORD *)__dst;
      *(_OWORD *)(a4 + 16) = v14;
      *(_OWORD *)__dst = 0u;
      *(_OWORD *)__p = 0u;
      *(_QWORD *)(a4 + 32) = v48;
      v48 = 0;
    }
    sub_20BF5618C((uint64_t)__dst);
  }
}

void sub_20C2D7AE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988450);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2D7B3C(uint64_t a1, uint64_t a2, unint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;
  char *__dst;

  sub_20C2D7344(a1, this);
  __dst = 0;
  result = sub_20C2B9BEC(a2 + 8, &__dst, 8uLL);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 32);
    v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = __dst;
    if (v11 < (unint64_t)__dst)
      v12 = *(char **)(a1 + 8);
    if (v9 - v10 >= (unint64_t)v12)
      v13 = v12;
    else
      v13 = (char *)(v9 - v10);
    __dst = v13;
    if (v11 && *(_QWORD *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        result = sub_20C2B9BEC(a2 + 8, *(void **)a1, (size_t)v13);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a1, __dst, a3, (int64_t)this, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2158;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, "
            "Int = long long]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2153;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, "
            "Int = long long]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

__n128 sub_20C2D7C98(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52FEB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D7CD4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52FEB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D7CF8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2D7D50((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2D7D08(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52FF10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D7D44()
{
  return &unk_24C52FF10;
}

void sub_20C2D7D50(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2D7E6C(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2D7E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2D7E6C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  uint64_t v27;

  if (a3 < 0)
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    v22 = *a2;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v23 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v24 = *((_QWORD *)a2 + 3);
    sub_20C2D8124(a1, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)&v22, a3, (uint64_t)&v25);
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_20C1D0444(a4, &v25);
    sub_20BF5618C((uint64_t)&v25);
  }
  else
  {
    v21 = 0;
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      v21 = (int)a3;
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 8 > v10)
      {
        v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v25.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v26 = 770;
        *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v27) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 7)
        {
          v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v25.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v26 = 779;
          *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v27) = 0;
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v11, v20);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, &v21, 8, v9);
        }
      }
    }
    if (v6)
    {
      v18 = (unint64_t *)&v6->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_20C1D03D0(a4, &v21);
  }
}

void sub_20C2D80EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2D8124(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **a2, uint64_t a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  ptrdiff_t v16;
  unsigned int v17;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  ptrdiff_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  ptrdiff_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  unint64_t v56;
  BOOL v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v63;
  void *v64;
  void *v65;
  std::__shared_weak_count *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  ptrdiff_t v78;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v79[2];
  std::__shared_weak_count *v80;
  ptrdiff_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84[2];
  void *__p[2];
  uint64_t v86;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)(a3 & 0xFFFFFFFFFFFFLL);
    v7 = *a2;
    v8 = *((unsigned __int8 *)*a2 + 6369);
    v9 = *((unsigned __int8 *)*a2 + 6370);
    v10 = *((unsigned __int8 *)*a2 + 6368) << 16;
    v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v84[0]) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)v84, 4uLL))
        return;
      v7 = *a2;
    }
    v13 = a2[1];
    v12 = (std::__shared_weak_count *)a2[2];
    *(_QWORD *)&v76 = v7;
    *((_QWORD *)&v76 + 1) = v13;
    v77 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = (ptrdiff_t)a2[3];
    v78 = v16;
    v17 = v10 | v9 | (v8 << 8);
    if (v17 >= 0x500 && (a3 & 0x2000000000000000) != 0)
    {
      v82 = 0;
      if (v17 > 0x6FF)
      {
        v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
        if (v78 < 0 || v78 + 8 > v47)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)770;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v78, v47);
        }
        else
        {
          v48 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v78;
          if (v48 < 8 || ((v48 | v78) & 0x8000000000000000) != 0)
          {
            v84[0] = "usd/crateFile.cpp";
            v84[1] = "Read";
            __p[0] = (void *)779;
            __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
            LOBYTE(v86) = 0;
            v72 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v48, v72);
          }
          else
          {
            v49 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t))(**((_QWORD **)&v76 + 1) + 32))(*((_QWORD *)&v76 + 1), &v82, 8);
            if ((unint64_t)(v49 + 1) >= 2)
            {
              v29 = v78 + v49;
              v78 += v49;
              v30 = v82;
LABEL_62:
              if (v30 > 0xF)
              {
                *(_OWORD *)v79 = v76;
                v80 = v77;
                if (v77)
                {
                  v55 = &v77->__shared_owners_;
                  do
                    v56 = __ldxr((unint64_t *)v55);
                  while (__stxr(v56 + 1, (unint64_t *)v55));
                  v29 = v78;
                }
                v81 = v29;
                if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v30))
                  v57 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v30) != 0;
                else
                  v57 = 0;
                if (v77)
                {
                  v58 = &v77->__shared_owners_;
                  do
                    v59 = __ldaxr((unint64_t *)v58);
                  while (__stlxr(v59 - 1, (unint64_t *)v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                    std::__shared_weak_count::__release_weak(v77);
                  }
                }
                if (v57)
                {
                  v83 = 0;
                  v84[0] = &v83;
                  sub_20C004484((unint64_t *)a4, v82, (uint64_t **)v84);
                  sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v60, v61);
                  v62 = *(_QWORD *)(a4 + 32);
                  v63 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
                  *(_OWORD *)v84 = 0u;
                  *(_OWORD *)__p = 0u;
                  sub_20C2D8BE4((uint64_t)v84, (uint64_t)&v76, v62, v63);
                  v64 = __p[0];
                  __p[0] = 0;
                  if (v64)
                    operator delete[](v64);
                  v65 = v84[0];
                  v84[0] = 0;
                  if (v65)
                    operator delete[](v65);
                }
                else
                {
                  v84[0] = "usd/crateFile.cpp";
                  v84[1] = "_ReadPossiblyCompressedArray";
                  __p[0] = (void *)2249;
                  __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value |"
                           "| std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aap"
                           "l__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *,"
                           " CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                           "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = long long]";
                  LOBYTE(v86) = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values", v82);
                }
              }
              else
              {
                v50 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v78;
                v51 = v82;
                v52 = 8 * v82;
                if (v78 < 0 || (v50 & 0x8000000000000000) != 0 || v82 > v50 || v52 > v50)
                {
                  v84[0] = "usd/crateFile.cpp";
                  v84[1] = "_ReadPossiblyCompressedArray";
                  __p[0] = (void *)2241;
                  __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value |"
                           "| std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aap"
                           "l__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *,"
                           " CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                           "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = long long]";
                  LOBYTE(v86) = 0;
                  v75 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v51, v52, v50, v75);
                }
                else
                {
                  v79[0] = 0;
                  v84[0] = v79;
                  sub_20C004484((unint64_t *)a4, v82, (uint64_t **)v84);
                  sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v53, v54);
                  sub_20C2B72E8((_QWORD *)&v76 + 1, *(_QWORD *)(a4 + 32), 8 * *(_QWORD *)a4);
                }
              }
            }
          }
        }
      }
      else
      {
        LODWORD(v79[0]) = 0;
        v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
        if (v78 < 0 || v78 + 4 > v26)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)770;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v78, v26);
        }
        else
        {
          v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v78;
          if (v27 < 4 || ((v27 | v78) & 0x8000000000000000) != 0)
          {
            v84[0] = "usd/crateFile.cpp";
            v84[1] = "Read";
            __p[0] = (void *)779;
            __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
            LOBYTE(v86) = 0;
            v70 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v27, v70);
          }
          else
          {
            v28 = (*(uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **, uint64_t))(**((_QWORD **)&v76 + 1) + 32))(*((_QWORD *)&v76 + 1), v79, 4);
            if ((unint64_t)(v28 + 1) >= 2)
            {
              v29 = v78 + v28;
              v78 += v28;
              v30 = LODWORD(v79[0]);
              v82 = LODWORD(v79[0]);
              goto LABEL_62;
            }
          }
        }
      }
LABEL_86:
      v66 = v77;
      if (v77)
      {
        v67 = &v77->__shared_owners_;
        do
          v68 = __ldaxr((unint64_t *)v67);
        while (__stlxr(v68 - 1, (unint64_t *)v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      return;
    }
    v79[0] = v7;
    v79[1] = *((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)&v76 + 1);
    v80 = v77;
    if (v77)
    {
      v19 = &v77->__shared_owners_;
      do
        v20 = __ldxr((unint64_t *)v19);
      while (__stxr(v20 + 1, (unint64_t *)v19));
      v16 = v78;
    }
    v81 = v16;
    v82 = 0;
    if (v11 > 0x6FF)
    {
      v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
      if (v16 < 0 || v16 + 8 > v31)
      {
        v84[0] = "usd/crateFile.cpp";
        v84[1] = "Read";
        __p[0] = (void *)770;
        __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v86) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v16, v31);
      }
      else
      {
        v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v16;
        if (v32 < 8 || ((v32 | v16) & 0x8000000000000000) != 0)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)779;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          v71 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v32, v71);
        }
        else
        {
          v33 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t, ptrdiff_t))(**((_QWORD **)&v76 + 1)
                                                                                          + 32))(*((_QWORD *)&v76 + 1), &v82, 8, v16);
          if ((unint64_t)(v33 + 1) >= 2)
          {
            v24 = v16 + v33;
            v81 = v24;
            goto LABEL_40;
          }
        }
      }
    }
    else
    {
      LODWORD(v83) = 0;
      v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
      if (v16 < 0 || v16 + 4 > v21)
      {
        v84[0] = "usd/crateFile.cpp";
        v84[1] = "Read";
        __p[0] = (void *)770;
        __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v86) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v16, v21);
      }
      else
      {
        v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v16;
        if (v22 < 4 || ((v22 | v16) & 0x8000000000000000) != 0)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)779;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          v69 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v22, v69);
        }
        else
        {
          v23 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, ptrdiff_t))(**((_QWORD **)&v76 + 1) + 32))(*((_QWORD *)&v76 + 1), &v83, 4, v16);
          if ((unint64_t)(v23 + 1) >= 2)
          {
            v24 = v16 + v23;
            v81 = v24;
            v82 = v83;
LABEL_40:
            v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v24;
            v35 = v82;
            v36 = 8 * v82;
            if (v24 < 0 || (v34 & 0x8000000000000000) != 0 || v82 > v34 || v36 > v34)
            {
              v84[0] = "usd/crateFile.cpp";
              v84[1] = "_ReadUncompressedArray";
              __p[0] = (void *)2053;
              __p[1] = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>::type "
                       "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray"
                       "<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::"
                       "_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = long long]";
              LOBYTE(v86) = 0;
              v73 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v35, v36, v34, v73);
            }
            else
            {
              v83 = 0;
              v84[0] = &v83;
              sub_20C004484((unint64_t *)a4, v82, (uint64_t **)v84);
              sub_20C0046D4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v37, v38);
              v39 = *(_QWORD *)(a4 + 32);
              v40 = *(_QWORD *)a4;
              v41 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
              v42 = 8 * v40;
              if (v24 + v42 > v41)
              {
                v84[0] = "usd/crateFile.cpp";
                v84[1] = "Read";
                __p[0] = (void *)770;
                __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v86) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v42, v24, v41);
              }
              else
              {
                v43 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v24;
                if (v43 < v42 || ((v43 | v24) & 0x8000000000000000) != 0)
                {
                  v84[0] = "usd/crateFile.cpp";
                  v84[1] = "Read";
                  __p[0] = (void *)779;
                  __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v86) = 0;
                  v74 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v42, v43, v74);
                }
                else
                {
                  v44 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, ptrdiff_t))(**((_QWORD **)&v76 + 1)
                                                                                                + 32))(*((_QWORD *)&v76 + 1), v39, v42, v24);
                  if (v44 != -1 && (!v42 || v44))
                    v81 = v24 + v44;
                }
              }
            }
          }
        }
      }
    }
    if (v77)
    {
      v45 = &v77->__shared_owners_;
      do
        v46 = __ldaxr((unint64_t *)v45);
      while (__stlxr(v46 - 1, (unint64_t *)v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    goto LABEL_86;
  }
  v86 = 0;
  *(_OWORD *)v84 = 0u;
  *(_OWORD *)__p = 0u;
  if (v84 != (void **)a4)
  {
    sub_20BF5618C(a4);
    v25 = *(_OWORD *)__p;
    *(_OWORD *)a4 = *(_OWORD *)v84;
    *(_OWORD *)(a4 + 16) = v25;
    *(_OWORD *)v84 = 0u;
    *(_OWORD *)__p = 0u;
    *(_QWORD *)(a4 + 32) = v86;
    v86 = 0;
  }
  sub_20BF5618C((uint64_t)v84);
}

void sub_20C2D8B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v15;
  va_list va;

  va_start(va, a15);
  sub_20C2BAA20((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2D8BE4(uint64_t a1, uint64_t a2, unint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  char *v21;

  sub_20C2D7344(a1, this);
  v21 = 0;
  v8 = (_QWORD *)(a2 + 8);
  result = sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)&v21, 8uLL);
  if ((_DWORD)result)
  {
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a1 + 8);
    v13 = v21;
    if (v12 < (unint64_t)v21)
      v13 = *(char **)(a1 + 8);
    if (v10 - v11 >= (unint64_t)v13)
      v14 = v13;
    else
      v14 = (char *)(v10 - v11);
    v21 = v14;
    if (v12 && *(_QWORD *)(a1 + 24))
    {
      if ((v11 & 0x8000000000000000) == 0)
      {
        result = sub_20C2B72E8(v8, *(_QWORD *)a1, (unint64_t)v14);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a1, v21, a3, (int64_t)this, *(char **)(a1 + 16), v15);
          return 1;
        }
        return result;
      }
      v16 = "usd/crateFile.cpp";
      v17 = "Read";
      v18 = 2158;
      v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = long long]";
      v20 = 0;
      (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      v16 = "usd/crateFile.cpp";
      v17 = "Read";
      v18 = 2153;
      v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = long long]";
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

_QWORD *sub_20C2D8D50(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52FF30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2D8DFC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C52FFB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2D8EA8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530030;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2D8F54(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5300B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2D9008(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52FF30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D9044(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52FF30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2D9068(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2D90C4(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2D907C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C52FF90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D90B8()
{
  return &unk_24C52FF90;
}

unint64_t sub_20C2D90C4(uint64_t *a1, uint64_t a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  uint64_t v17;
  _QWORD v18[2];

  v4 = this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *(_QWORD *)v4;
    return sub_20C2D91F4((uint64_t)a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    v18[0] = a2;
    v18[1] = a3;
    if (HIDWORD(*(_QWORD *)v4))
    {
      v12 = *a1;
      if (!*a1)
      {
        v13 = operator new(0x28uLL);
        *v13 = 0u;
        v13[1] = 0u;
        *((_DWORD *)v13 + 8) = 1065353216;
        sub_20BF2B090(a1, (uint64_t)v13);
        v12 = *a1;
      }
      v17 = 0;
      v14 = sub_20C2D69C0(v12, v4, v4, &v17);
      v15 = v14;
      if (v16)
      {
        v14[3] = *a3 & 0xFFFFFFFFFFFFLL | 0x6000000000000;
        sub_20C2B7248((uint64_t)v18, (char *)v4);
      }
      return v15[3];
    }
    else
    {
      return *(_QWORD *)v4 | 0x4006000000000000;
    }
  }
}

unint64_t sub_20C2D91F4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v18;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v19;
  unint64_t v20;
  size_t CompressedBufferSize;
  char *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  _QWORD v26[2];
  __int128 v27;
  char __src[24];
  int64_t v29;

  v26[0] = a2;
  v26[1] = a3;
  result = 0x8006000000000000;
  v25 = 0x8006000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B2B54(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2D93F0(v9, a4, a4, &v25);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        *(_QWORD *)&v27 = a2;
        *((_QWORD *)&v27 + 1) = a3;
        v17 = *a3;
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          *(_QWORD *)__src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)&v27, __src);
        }
        else
        {
          *(_DWORD *)__src = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)&v27, __src);
        }
        v18 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
        v19 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)(a4 + 32);
        if (*(_QWORD *)a4 > 0xFuLL)
        {
          *(_OWORD *)__src = v27;
          CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize(v18);
          v22 = (char *)operator new[](CompressedBufferSize);
          v24 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::CompressToBuffer(v19, (const unint64_t *)v18, v22, v23);
          v29 = v24;
          sub_20C2B7248((uint64_t)__src, (char *)&v29);
          sub_20C2A7944((uint64_t)__src, v22, v24);
          operator delete[](v22);
          v20 = v17 & 0xFFFFFFFFFFFFLL | 0xA006000000000000;
        }
        else
        {
          v20 = v17 & 0xFFFFFFFFFFFFLL | 0x8006000000000000;
          sub_20C2D6610((uint64_t)&v27, (char *)v19, (uint64_t)v18);
        }
        v13[7] = v20;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v26, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        *(_DWORD *)__src = 1;
        sub_20C2CE770((uint64_t)v26, __src);
        *(_DWORD *)__src = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v26, __src);
        sub_20C2D6610((uint64_t)v26, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_20C2D93DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete[](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2D93F0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v9 = *(_QWORD *)a2;
  LOBYTE(v34) = 1;
  v33 = v9;
  pxrInternal__aapl__pxrReserved__::Tf_HashState::_AppendBytes((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v33, *(pxrInternal__aapl__pxrReserved__ **)(a2 + 32), (char *)(8 * v9));
  v10 = bswap64(0x9E3779B97F4A7C55 * v33);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if ((sub_20C004340((uint64_t)(i + 2), a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2D969C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2D96B8(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2D96B8(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

__n128 sub_20C2D9704(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C52FFB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D9740(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C52FFB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D9764(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2D97F4(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2D97AC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530010))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D97E8()
{
  return &unk_24C530010;
}

void sub_20C2D97F4(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2D98B4(a1, v6, a3, (uint64_t)v8);
    sub_20C1D06C4(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u64[0] = 0;
    if ((a3 & 0x4000000000000000) != 0)
      v8[0].n128_u64[0] = a3;
    else
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)8, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    sub_20C1D0650(a4, (uint64_t *)v8);
  }
}

void sub_20C2D989C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2D98B4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  FILE *v13;
  uint64_t v14;
  ssize_t v15;
  ssize_t v16;
  unint64_t v17;
  __int128 v18;
  ssize_t v19;
  unint64_t v20;
  ssize_t v21;
  unint64_t v22;
  uint64_t v23;
  char *v24;
  __sFILE *v25;
  char *v26;
  off_t v27;
  ssize_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v35;
  void *v36;
  void *v37;
  __int128 v38;
  __int128 v39;
  pxrInternal__aapl__pxrReserved__ *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD _88[11];

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = a3 & 0xFFFFFFFFFFFFLL;
    v7 = *(unsigned __int8 *)(*a2 + 6369);
    v8 = *(unsigned __int8 *)(*a2 + 6370);
    v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(v41) = 0, sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v41)))
    {
      v11 = *((_OWORD *)a2 + 1);
      v38 = *(_OWORD *)a2;
      v39 = v11;
      v40 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
      if ((a3 & 0x2000000000000000) == 0 || (v12 = v9 | v8 | (v7 << 8), v12 <= 0x4FF))
      {
        v13 = (FILE *)v40;
        v44 = 0;
        if (v10 > 0x6FF)
        {
          v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((_QWORD *)&v38 + 1));
          if (v19 == -1)
            return;
          v20 = v44;
        }
        else
        {
          LODWORD(v41) = 0;
          v19 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((_QWORD *)&v38 + 1));
          if (v19 == -1)
            return;
          v20 = v41;
          v44 = v41;
        }
        v28 = v19 + v39;
        v29 = *((_QWORD *)&v39 + 1) - (v19 + v39);
        if (v19 + (_QWORD)v39 < 0 || (v29 & 0x8000000000000000) != 0 || v20 > v29 || 8 * v20 > v29)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v42 = 2053;
          *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::va"
                                  "lue>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Rea"
                                  "der, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReser"
                                  "ved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFi"
                                  "le::_PreadStream>, T = unsigned long long]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _88[0] = 0;
        *(_QWORD *)&v41 = _88;
        sub_20C0053DC((unint64_t *)a4, v20, (uint64_t **)&v41);
        sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
        v25 = *(__sFILE **)(a4 + 32);
        v26 = (char *)(8 * *(_QWORD *)a4);
        v27 = v28 + *((_QWORD *)&v38 + 1);
        goto LABEL_30;
      }
      v44 = 0;
      if (v12 > 0x6FF)
      {
        v13 = (FILE *)v40;
        v14 = *((_QWORD *)&v38 + 1);
        v21 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v44, (char *)8, v39 + *((_QWORD *)&v38 + 1));
        if (v21 == -1)
          return;
        v16 = v39 + v21;
        *(_QWORD *)&v39 = v39 + v21;
        v17 = v44;
      }
      else
      {
        LODWORD(v41) = 0;
        v13 = (FILE *)v40;
        v14 = *((_QWORD *)&v38 + 1);
        v15 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v40, (__sFILE *)&v41, (char *)4, v39 + *((_QWORD *)&v38 + 1));
        if (v15 == -1)
          return;
        v16 = v39 + v15;
        *(_QWORD *)&v39 = v39 + v15;
        v17 = v41;
        v44 = v41;
      }
      if (v17 <= 0xF)
      {
        v22 = *((_QWORD *)&v39 + 1) - v16;
        if (v16 < 0 || (v22 & 0x8000000000000000) != 0 || v17 > v22 || 8 * v17 > v22)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "_ReadPossiblyCompressedArray";
          *(_QWORD *)&v42 = 2241;
          *((_QWORD *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::"
                                  "value || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type px"
                                  "rInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, Va"
                                  "lueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_PreadStream>, T = unsigned long long]";
          LOBYTE(v43) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
          return;
        }
        _88[0] = 0;
        *(_QWORD *)&v41 = _88;
        sub_20C0053DC((unint64_t *)a4, v17, (uint64_t **)&v41);
        sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v23, v24);
        v25 = *(__sFILE **)(a4 + 32);
        v26 = (char *)(8 * *(_QWORD *)a4);
        v27 = v16 + v14;
LABEL_30:
        pxrInternal__aapl__pxrReserved__::ArchPRead(v13, v25, v26, v27);
        return;
      }
      if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v17)
        && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v17))
      {
        _88[0] = 0;
        *(_QWORD *)&v41 = _88;
        sub_20C0053DC((unint64_t *)a4, v44, (uint64_t **)&v41);
        sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v32, v33);
        v34 = *(_QWORD *)(a4 + 32);
        v35 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
        v41 = 0u;
        v42 = 0u;
        sub_20C2D9CB8((uint64_t)&v41, (uint64_t)&v38, v34, v35);
        v36 = (void *)v42;
        *(_QWORD *)&v42 = 0;
        if (v36)
          operator delete[](v36);
        v37 = (void *)v41;
        *(_QWORD *)&v41 = 0;
        if (v37)
          operator delete[](v37);
      }
      else
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "_ReadPossiblyCompressedArray";
        *(_QWORD *)&v42 = 2249;
        *((_QWORD *)&v42 + 1) = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::va"
                                "lue || std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInt"
                                "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep"
                                ", VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd"
                                "_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadSt"
                                "ream>, T = unsigned long long]";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
      }
    }
  }
  else
  {
    v43 = 0;
    v41 = 0u;
    v42 = 0u;
    if (&v41 != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v18 = v42;
      *(_OWORD *)a4 = v41;
      *(_OWORD *)(a4 + 16) = v18;
      v41 = 0u;
      v42 = 0u;
      *(_QWORD *)(a4 + 32) = v43;
      v43 = 0;
    }
    sub_20BF5618C((uint64_t)&v41);
  }
}

void sub_20C2D9C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20C2BAA20((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C2D9CB8(uint64_t a1, uint64_t a2, unint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *a4)
{
  _BOOL8 result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;
  char *v20;

  sub_20C2D7344(a1, a4);
  v20 = 0;
  result = sub_20C2C1BD8(a2 + 8, 0, (__sFILE *)&v20);
  if (result)
  {
    v10 = *(_QWORD *)(a2 + 16);
    v9 = *(_QWORD *)(a2 + 24);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = v20;
    if (v11 < (unint64_t)v20)
      v12 = *(char **)(a1 + 8);
    if (v9 - v10 >= (unint64_t)v12)
      v13 = v12;
    else
      v13 = (char *)(v9 - v10);
    v20 = v13;
    if (v11 && *(_QWORD *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        result = sub_20C2AA6E4(a2, *(__sFILE **)a1, v13);
        if (result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a1, v20, a3, (int64_t)a4, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2158;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = unsigned long long]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2153;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_PreadStream>, Int = unsigned long long]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

__n128 sub_20C2D9DFC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2D9E38(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2D9E5C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2D9EAC((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2D9E64(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530090))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2D9EA0()
{
  return &unk_24C530090;
}

void sub_20C2D9EAC(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2D9F28(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2D9F28(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];
  uint64_t v11;
  __n128 __dst[2];
  uint64_t v13;

  if (a3 < 0)
  {
    v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    v11 = *(_QWORD *)(a2 + 32);
    sub_20C2DA008(a1, v10, a3, (uint64_t)__dst);
    sub_20C1D06C4(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    __dst[0].n128_u64[0] = 0;
    v5 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)a2;
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      __dst[0].n128_u64[0] = a3;
    }
    else
    {
      *((_QWORD *)&v7 + 1) = *(_QWORD *)(*(_QWORD *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v7 + 8, __dst, 8uLL);
    }
    sub_20C1D0650(a4, (uint64_t *)__dst);
  }
}

void sub_20C2D9FF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2DA008(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  unsigned __int8 v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v36;
  void *v37;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *__dst[2];
  void *__p[2];
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v49;
  unint64_t v50;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6369);
    v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6370);
    v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16;
    v10 = v9 | (v7 << 8);
    if (v10 > 0x4FF || (LODWORD(__dst[0]) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, __dst, 4uLL)))
    {
      v11 = a2[1];
      v40 = *a2;
      v41 = v11;
      v42 = *((_QWORD *)a2 + 4);
      if ((a3 & 0x2000000000000000) != 0 && (v12 = v9 | v8 | (v7 << 8), v12 > 0x4FF))
      {
        v50 = 0;
        if (v12 > 0x6FF)
        {
          if (!sub_20C2B9BEC((uint64_t)&v40 + 8, &v50, 8uLL))
            return;
          v13 = v50;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if (!sub_20C2B9BEC((uint64_t)&v40 + 8, __dst, 4uLL))
            return;
          v13 = LODWORD(__dst[0]);
          v50 = LODWORD(__dst[0]);
        }
        if (v13 > 0xF)
        {
          if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v13)
            && pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v13))
          {
            *(_QWORD *)&v43 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v43;
            sub_20C0053DC((unint64_t *)a4, v50, (uint64_t **)__dst);
            sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v33, v34);
            v35 = *(_QWORD *)(a4 + 32);
            v36 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
            *(_OWORD *)__dst = 0u;
            *(_OWORD *)__p = 0u;
            sub_20C2DA554((uint64_t)__dst, (uint64_t)&v40, v35, v36);
            v37 = __p[0];
            __p[0] = 0;
            if (v37)
              operator delete[](v37);
            v38 = __dst[0];
            __dst[0] = 0;
            if (v38)
              operator delete[](v38);
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadPossiblyCompressedArray";
            __p[0] = (void *)2249;
            __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std:"
                     ":is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserv"
                     "ed__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versio"
                     "n, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__"
                     "aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::Cr"
                     "ateFile::_FileMapping *>>, T = unsigned long long]";
            LOBYTE(v48) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values");
          }
        }
        else
        {
          v23 = *((_QWORD *)&v40 + 1) - *(_QWORD *)(*(_QWORD *)v41 + 24);
          v24 = *(_QWORD *)(*(_QWORD *)v41 + 32) - v23;
          if ((v23 & 0x8000000000000000) == 0 && (v24 & 0x8000000000000000) == 0 && v13 <= v24 && 8 * v13 <= v24)
          {
            v19 = (char *)&v40 + 8;
            *(_QWORD *)&v43 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v43;
            v26 = (unint64_t *)a4;
            v27 = v13;
LABEL_42:
            sub_20C0053DC(v26, v27, (uint64_t **)__dst);
            sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v31, v32);
            sub_20C2B9BEC((uint64_t)v19, *(void **)(a4 + 32), 8 * *(_QWORD *)a4);
            return;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadPossiblyCompressedArray";
          __p[0] = (void *)2241;
          __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value || std::i"
                   "s_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aapl__pxrReserved__"
                   "::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int"
                   ") [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__px"
                   "rReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_"
                   "FileMapping *>>, T = unsigned long long]";
          LOBYTE(v48) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        }
      }
      else
      {
        v15 = a2[1];
        v43 = *a2;
        v44 = v15;
        v45 = *((_QWORD *)a2 + 4);
        v16 = atomic_load((unsigned __int8 *)&qword_254988460);
        if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_254988460))
        {
          v39 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          if (!v39)
          {
            pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
            v39 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          }
          byte_254988458 = *v39;
          __cxa_guard_release(&qword_254988460);
        }
        v49 = 0;
        if (v10 > 0x6FF)
        {
          if (!sub_20C2B9BEC((uint64_t)&v43 + 8, &v49, 8uLL))
            return;
          v17 = (unint64_t)v49;
        }
        else
        {
          LODWORD(__dst[0]) = 0;
          if ((sub_20C2B9BEC((uint64_t)&v43 + 8, __dst, 4uLL) & 1) == 0)
            return;
          v17 = LODWORD(__dst[0]);
          v49 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)LODWORD(__dst[0]);
        }
        v18 = 8 * v17;
        v19 = (char *)&v43 + 8;
        v20 = *((_QWORD *)&v43 + 1);
        if (!byte_254988458 || v18 < 0x800 || (BYTE8(v43) & 7) != 0)
        {
          v28 = *((_QWORD *)&v43 + 1) - *(_QWORD *)(*(_QWORD *)v44 + 24);
          v29 = *(_QWORD *)(*(_QWORD *)v44 + 32) - v28;
          if ((v28 & 0x8000000000000000) == 0 && (v29 & 0x8000000000000000) == 0 && v17 <= v29 && v18 <= v29)
          {
            v50 = 0;
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)&v50;
            v26 = (unint64_t *)a4;
            v27 = v17;
            goto LABEL_42;
          }
          __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
          __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadUncompressedArray";
          __p[0] = (void *)2117;
          __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *, Cra"
                   "teFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInt"
                   "ernal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFil"
                   "e::CrateFile::_FileMapping *>>, T = unsigned long long]";
          LOBYTE(v48) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
        }
        else
        {
          v21 = sub_20C2CF260((uint64_t)&v43 + 8, *((char **)&v43 + 1), 8 * v17, v17);
          if (v21)
          {
            __p[0] = 0;
            __p[1] = v21;
            v48 = v20;
            __dst[0] = v49;
            __dst[1] = 0;
            if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4)
            {
              sub_20BF5618C(a4);
              v22 = *(_OWORD *)__p;
              *(_OWORD *)a4 = *(_OWORD *)__dst;
              *(_OWORD *)(a4 + 16) = v22;
              *(_OWORD *)__dst = 0u;
              *(_OWORD *)__p = 0u;
              *(_QWORD *)(a4 + 32) = v48;
              v48 = 0;
            }
            sub_20BF5618C((uint64_t)__dst);
          }
          else
          {
            __dst[0] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"usd/crateFile.cpp";
            __dst[1] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)"_ReadUncompressedArray";
            __p[0] = (void *)2109;
            __p[1] = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::type pxrI"
                     "nternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray<T> *,"
                     " CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<"
                     "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_"
                     "CrateFile::CrateFile::_FileMapping *>>, T = unsigned long long]";
            LOBYTE(v48) = 0;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v18);
            sub_20BF56210((_QWORD *)a4);
          }
        }
      }
    }
  }
  else
  {
    v48 = 0;
    *(_OWORD *)__dst = 0u;
    *(_OWORD *)__p = 0u;
    if (__dst != (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4)
    {
      sub_20BF5618C(a4);
      v14 = *(_OWORD *)__p;
      *(_OWORD *)a4 = *(_OWORD *)__dst;
      *(_OWORD *)(a4 + 16) = v14;
      *(_OWORD *)__dst = 0u;
      *(_OWORD *)__p = 0u;
      *(_QWORD *)(a4 + 32) = v48;
      v48 = 0;
    }
    sub_20BF5618C((uint64_t)__dst);
  }
}

void sub_20C2DA4FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988460);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2DA554(uint64_t a1, uint64_t a2, unint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;
  char *__dst;

  sub_20C2D7344(a1, this);
  __dst = 0;
  result = sub_20C2B9BEC(a2 + 8, &__dst, 8uLL);
  if ((_DWORD)result)
  {
    v9 = *(_QWORD *)(**(_QWORD **)(a2 + 16) + 32);
    v10 = *(_QWORD *)(a2 + 8) - *(_QWORD *)(**(_QWORD **)(a2 + 16) + 24);
    v11 = *(_QWORD *)(a1 + 8);
    v12 = __dst;
    if (v11 < (unint64_t)__dst)
      v12 = *(char **)(a1 + 8);
    if (v9 - v10 >= (unint64_t)v12)
      v13 = v12;
    else
      v13 = (char *)(v9 - v10);
    __dst = v13;
    if (v11 && *(_QWORD *)(a1 + 24))
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        result = sub_20C2B9BEC(a2 + 8, *(void **)a1, (size_t)v13);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a1, __dst, a3, (int64_t)this, *(char **)(a1 + 16), v14);
          return 1;
        }
        return result;
      }
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2158;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, "
            "Int = unsigned long long]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      v15 = "usd/crateFile.cpp";
      v16 = "Read";
      v17 = 2153;
      v18 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, "
            "Int = unsigned long long]";
      v19 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

__n128 sub_20C2DA6B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5300B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2DA6EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5300B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2DA710(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2DA768((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2DA720(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530110))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2DA75C()
{
  return &unk_24C530110;
}

void sub_20C2DA768(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2DA884(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2DA868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2DA884(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  uint64_t v27;

  if (a3 < 0)
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    v22 = *a2;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v23 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v24 = *((_QWORD *)a2 + 3);
    sub_20C2DAB3C(a1, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)&v22, a3, (uint64_t)&v25);
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_20C1D06C4(a4, &v25);
    sub_20BF5618C((uint64_t)&v25);
  }
  else
  {
    v21 = 0;
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      v21 = a3;
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 8 > v10)
      {
        v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v25.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v26 = 770;
        *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v27) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 7)
        {
          v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v25.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v26 = 779;
          *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v27) = 0;
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v11, v20);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, &v21, 8, v9);
        }
      }
    }
    if (v6)
    {
      v18 = (unint64_t *)&v6->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_20C1D0650(a4, &v21);
  }
}

void sub_20C2DAB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2DAB3C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **a2, uint64_t a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  ptrdiff_t v16;
  unsigned int v17;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  ptrdiff_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  ptrdiff_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t *v55;
  unint64_t v56;
  BOOL v57;
  uint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v63;
  void *v64;
  void *v65;
  std::__shared_weak_count *v66;
  uint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  std::__shared_weak_count *v77;
  ptrdiff_t v78;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *v79[2];
  std::__shared_weak_count *v80;
  ptrdiff_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84[2];
  void *__p[2];
  uint64_t v86;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)(a3 & 0xFFFFFFFFFFFFLL);
    v7 = *a2;
    v8 = *((unsigned __int8 *)*a2 + 6369);
    v9 = *((unsigned __int8 *)*a2 + 6370);
    v10 = *((unsigned __int8 *)*a2 + 6368) << 16;
    v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v84[0]) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)v84, 4uLL))
        return;
      v7 = *a2;
    }
    v13 = a2[1];
    v12 = (std::__shared_weak_count *)a2[2];
    *(_QWORD *)&v76 = v7;
    *((_QWORD *)&v76 + 1) = v13;
    v77 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = (ptrdiff_t)a2[3];
    v78 = v16;
    v17 = v10 | v9 | (v8 << 8);
    if (v17 >= 0x500 && (a3 & 0x2000000000000000) != 0)
    {
      v82 = 0;
      if (v17 > 0x6FF)
      {
        v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
        if (v78 < 0 || v78 + 8 > v47)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)770;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v78, v47);
        }
        else
        {
          v48 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v78;
          if (v48 < 8 || ((v48 | v78) & 0x8000000000000000) != 0)
          {
            v84[0] = "usd/crateFile.cpp";
            v84[1] = "Read";
            __p[0] = (void *)779;
            __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
            LOBYTE(v86) = 0;
            v72 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v48, v72);
          }
          else
          {
            v49 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t))(**((_QWORD **)&v76 + 1) + 32))(*((_QWORD *)&v76 + 1), &v82, 8);
            if ((unint64_t)(v49 + 1) >= 2)
            {
              v29 = v78 + v49;
              v78 += v49;
              v30 = v82;
LABEL_62:
              if (v30 > 0xF)
              {
                *(_OWORD *)v79 = v76;
                v80 = v77;
                if (v77)
                {
                  v55 = &v77->__shared_owners_;
                  do
                    v56 = __ldxr((unint64_t *)v55);
                  while (__stxr(v56 + 1, (unint64_t *)v55));
                  v29 = v78;
                }
                v81 = v29;
                if (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v30))
                  v57 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::GetDecompressionWorkingSpaceSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *)v30) != 0;
                else
                  v57 = 0;
                if (v77)
                {
                  v58 = &v77->__shared_owners_;
                  do
                    v59 = __ldaxr((unint64_t *)v58);
                  while (__stlxr(v59 - 1, (unint64_t *)v58));
                  if (!v59)
                  {
                    ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
                    std::__shared_weak_count::__release_weak(v77);
                  }
                }
                if (v57)
                {
                  v83 = 0;
                  v84[0] = &v83;
                  sub_20C0053DC((unint64_t *)a4, v82, (uint64_t **)v84);
                  sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v60, v61);
                  v62 = *(_QWORD *)(a4 + 32);
                  v63 = *(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a4;
                  *(_OWORD *)v84 = 0u;
                  *(_OWORD *)__p = 0u;
                  sub_20C2DB5FC((uint64_t)v84, (uint64_t)&v76, v62, v63);
                  v64 = __p[0];
                  __p[0] = 0;
                  if (v64)
                    operator delete[](v64);
                  v65 = v84[0];
                  v84[0] = 0;
                  if (v65)
                    operator delete[](v65);
                }
                else
                {
                  v84[0] = "usd/crateFile.cpp";
                  v84[1] = "_ReadPossiblyCompressedArray";
                  __p[0] = (void *)2249;
                  __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value |"
                           "| std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aap"
                           "l__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *,"
                           " CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                           "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = unsigned long long]";
                  LOBYTE(v86) = 0;
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed values", v82);
                }
              }
              else
              {
                v50 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v78;
                v51 = v82;
                v52 = 8 * v82;
                if (v78 < 0 || (v50 & 0x8000000000000000) != 0 || v82 > v50 || v52 > v50)
                {
                  v84[0] = "usd/crateFile.cpp";
                  v84[1] = "_ReadPossiblyCompressedArray";
                  __p[0] = (void *)2241;
                  __p[1] = "typename std::enable_if<std::is_same<T, int>::value || std::is_same<T, unsigned int>::value |"
                           "| std::is_same<T, int64_t>::value || std::is_same<T, uint64_t>::value>::type pxrInternal__aap"
                           "l__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *,"
                           " CrateFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                           "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = unsigned long long]";
                  LOBYTE(v86) = 0;
                  v75 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v51, v52, v50, v75);
                }
                else
                {
                  v79[0] = 0;
                  v84[0] = v79;
                  sub_20C0053DC((unint64_t *)a4, v82, (uint64_t **)v84);
                  sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v53, v54);
                  sub_20C2B72E8((_QWORD *)&v76 + 1, *(_QWORD *)(a4 + 32), 8 * *(_QWORD *)a4);
                }
              }
            }
          }
        }
      }
      else
      {
        LODWORD(v79[0]) = 0;
        v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
        if (v78 < 0 || v78 + 4 > v26)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)770;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v78, v26);
        }
        else
        {
          v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v78;
          if (v27 < 4 || ((v27 | v78) & 0x8000000000000000) != 0)
          {
            v84[0] = "usd/crateFile.cpp";
            v84[1] = "Read";
            __p[0] = (void *)779;
            __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
            LOBYTE(v86) = 0;
            v70 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v27, v70);
          }
          else
          {
            v28 = (*(uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **, uint64_t))(**((_QWORD **)&v76 + 1) + 32))(*((_QWORD *)&v76 + 1), v79, 4);
            if ((unint64_t)(v28 + 1) >= 2)
            {
              v29 = v78 + v28;
              v78 += v28;
              v30 = LODWORD(v79[0]);
              v82 = LODWORD(v79[0]);
              goto LABEL_62;
            }
          }
        }
      }
LABEL_86:
      v66 = v77;
      if (v77)
      {
        v67 = &v77->__shared_owners_;
        do
          v68 = __ldaxr((unint64_t *)v67);
        while (__stlxr(v68 - 1, (unint64_t *)v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
          std::__shared_weak_count::__release_weak(v66);
        }
      }
      return;
    }
    v79[0] = v7;
    v79[1] = *((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)&v76 + 1);
    v80 = v77;
    if (v77)
    {
      v19 = &v77->__shared_owners_;
      do
        v20 = __ldxr((unint64_t *)v19);
      while (__stxr(v20 + 1, (unint64_t *)v19));
      v16 = v78;
    }
    v81 = v16;
    v82 = 0;
    if (v11 > 0x6FF)
    {
      v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
      if (v16 < 0 || v16 + 8 > v31)
      {
        v84[0] = "usd/crateFile.cpp";
        v84[1] = "Read";
        __p[0] = (void *)770;
        __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v86) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v16, v31);
      }
      else
      {
        v32 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v16;
        if (v32 < 8 || ((v32 | v16) & 0x8000000000000000) != 0)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)779;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          v71 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v32, v71);
        }
        else
        {
          v33 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t, ptrdiff_t))(**((_QWORD **)&v76 + 1)
                                                                                          + 32))(*((_QWORD *)&v76 + 1), &v82, 8, v16);
          if ((unint64_t)(v33 + 1) >= 2)
          {
            v24 = v16 + v33;
            v81 = v24;
            goto LABEL_40;
          }
        }
      }
    }
    else
    {
      LODWORD(v83) = 0;
      v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
      if (v16 < 0 || v16 + 4 > v21)
      {
        v84[0] = "usd/crateFile.cpp";
        v84[1] = "Read";
        __p[0] = (void *)770;
        __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v86) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v16, v21);
      }
      else
      {
        v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v16;
        if (v22 < 4 || ((v22 | v16) & 0x8000000000000000) != 0)
        {
          v84[0] = "usd/crateFile.cpp";
          v84[1] = "Read";
          __p[0] = (void *)779;
          __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v86) = 0;
          v69 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v22, v69);
        }
        else
        {
          v23 = (*(uint64_t (**)(_QWORD, uint64_t *, uint64_t, ptrdiff_t))(**((_QWORD **)&v76 + 1) + 32))(*((_QWORD *)&v76 + 1), &v83, 4, v16);
          if ((unint64_t)(v23 + 1) >= 2)
          {
            v24 = v16 + v23;
            v81 = v24;
            v82 = v83;
LABEL_40:
            v34 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v24;
            v35 = v82;
            v36 = 8 * v82;
            if (v24 < 0 || (v34 & 0x8000000000000000) != 0 || v82 > v34 || v36 > v34)
            {
              v84[0] = "usd/crateFile.cpp";
              v84[1] = "_ReadUncompressedArray";
              __p[0] = (void *)2053;
              __p[1] = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>::type "
                       "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArray"
                       "<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::"
                       "_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = unsigned long long]";
              LOBYTE(v86) = 0;
              v73 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v35, v36, v34, v73);
            }
            else
            {
              v83 = 0;
              v84[0] = &v83;
              sub_20C0053DC((unint64_t *)a4, v82, (uint64_t **)v84);
              sub_20C00562C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v37, v38);
              v39 = *(_QWORD *)(a4 + 32);
              v40 = *(_QWORD *)a4;
              v41 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
              v42 = 8 * v40;
              if (v24 + v42 > v41)
              {
                v84[0] = "usd/crateFile.cpp";
                v84[1] = "Read";
                __p[0] = (void *)770;
                __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v86) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v42, v24, v41);
              }
              else
              {
                v43 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1)) - v24;
                if (v43 < v42 || ((v43 | v24) & 0x8000000000000000) != 0)
                {
                  v84[0] = "usd/crateFile.cpp";
                  v84[1] = "Read";
                  __p[0] = (void *)779;
                  __p[1] = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v86) = 0;
                  v74 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v76 + 1) + 16))(*((_QWORD *)&v76 + 1));
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v84, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v42, v43, v74);
                }
                else
                {
                  v44 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, ptrdiff_t))(**((_QWORD **)&v76 + 1)
                                                                                                + 32))(*((_QWORD *)&v76 + 1), v39, v42, v24);
                  if (v44 != -1 && (!v42 || v44))
                    v81 = v24 + v44;
                }
              }
            }
          }
        }
      }
    }
    if (v77)
    {
      v45 = &v77->__shared_owners_;
      do
        v46 = __ldaxr((unint64_t *)v45);
      while (__stlxr(v46 - 1, (unint64_t *)v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    goto LABEL_86;
  }
  v86 = 0;
  *(_OWORD *)v84 = 0u;
  *(_OWORD *)__p = 0u;
  if (v84 != (void **)a4)
  {
    sub_20BF5618C(a4);
    v25 = *(_OWORD *)__p;
    *(_OWORD *)a4 = *(_OWORD *)v84;
    *(_OWORD *)(a4 + 16) = v25;
    *(_OWORD *)v84 = 0u;
    *(_OWORD *)__p = 0u;
    *(_QWORD *)(a4 + 32) = v86;
    v86 = 0;
  }
  sub_20BF5618C((uint64_t)v84);
}

void sub_20C2DB5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v15;
  va_list va;

  va_start(va, a15);
  sub_20C2BAA20((uint64_t)va);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2DB5FC(uint64_t a1, uint64_t a2, unint64_t a3, pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 *this)
{
  _QWORD *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  char *v21;

  sub_20C2D7344(a1, this);
  v21 = 0;
  v8 = (_QWORD *)(a2 + 8);
  result = sub_20C2B72E8((_QWORD *)(a2 + 8), (uint64_t)&v21, 8uLL);
  if ((_DWORD)result)
  {
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 16))(*(_QWORD *)(a2 + 8));
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a1 + 8);
    v13 = v21;
    if (v12 < (unint64_t)v21)
      v13 = *(char **)(a1 + 8);
    if (v10 - v11 >= (unint64_t)v13)
      v14 = v13;
    else
      v14 = (char *)(v10 - v11);
    v21 = v14;
    if (v12 && *(_QWORD *)(a1 + 24))
    {
      if ((v11 & 0x8000000000000000) == 0)
      {
        result = sub_20C2B72E8(v8, *(_QWORD *)a1, (unint64_t)v14);
        if ((_DWORD)result)
        {
          pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64::DecompressFromBuffer(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression64 **)a1, v21, a3, (int64_t)this, *(char **)(a1 + 16), v15);
          return 1;
        }
        return result;
      }
      v16 = "usd/crateFile.cpp";
      v17 = "Read";
      v18 = 2158;
      v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = unsigned long long]";
      v20 = 0;
      (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 16))(*v8);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu with remaining file size is %lld of %lld");
    }
    else
    {
      v16 = "usd/crateFile.cpp";
      v17 = "Read";
      v18 = 2153;
      v19 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_CompressedIntsReader::Read(Reader &, Int *, size_t) ["
            "Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved_"
            "_::Usd_CrateFile::_AssetStream>, Int = unsigned long long]";
      v20 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v16, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read compressed ints of size %llu");
    }
    return 0;
  }
  return result;
}

_QWORD *sub_20C2DB768(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530130;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2DB814(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5301B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2DB8C0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530230;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2DB96C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5302B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2DBA20(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2DBA5C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2DBA80(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2DBADC(*(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 8), (char *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2DBA94(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530190))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2DBAD0()
{
  return &unk_24C530190;
}

unint64_t sub_20C2DBADC(uint64_t a1, _QWORD *a2, char *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;

  v4 = (uint64_t *)this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *v4;
    return sub_20C2DBB80(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    return *(unsigned __int16 *)v4 | 0x4007000000000000;
  }
}

unint64_t sub_20C2DBB80(uint64_t a1, _QWORD *a2, char *a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  __int16 v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int16 *v33;
  unsigned __int16 *v34;
  unsigned __int16 *v35;
  uint64_t v36;
  unsigned __int16 *v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  void *v41;
  char *v42;
  int64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  unsigned __int16 *v57;
  unsigned __int16 v58;
  uint64_t v59;
  unsigned __int16 *v60;
  _DWORD *v61;
  uint64_t v62;
  int v63;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v64;
  uint64_t v65;
  size_t CompressedBufferSize;
  char *v67;
  char *v68;
  int64_t v69;
  uint64_t v70;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v71;
  int64_t v72;
  size_t v73;
  char *v74;
  char *v75;
  int64_t v76;
  int v77;
  unint64_t v78;
  unint64_t v79;
  _QWORD v80[2];
  void *__p[2];
  char *v82;
  void *__src;
  char *v84;
  char *v85;
  __int128 v86;
  __int128 v87;
  char v88[16];

  v80[0] = a2;
  v80[1] = a3;
  result = 0x8007000000000000;
  v79 = 0x8007000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B2BF8(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2DC37C(v9, (unint64_t *)a4, a4, &v79);
    if (v14)
    {
      v15 = a2[791];
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int8 *)(v15 + 250) << 16;
        v17 = *(_WORD *)(v15 + 248);
        *(_QWORD *)&v86 = a2;
        *((_QWORD *)&v86 + 1) = a3;
        v18 = v17 << 16;
        v19 = v17 & 0xFF00;
        v20 = v19 | HIWORD(v16) & 0xFF00FFFF | v18;
        if (v20 >= 0x600 && *(_QWORD *)a4 > 0xFuLL)
        {
          v23 = *(unsigned __int16 **)(a4 + 32);
          v24 = 2 * *(_QWORD *)a4;
          while (1)
          {
            v25 = *v23;
            v26 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v25];
            if (v26 < -2147500000.0 || v26 > 2147500000.0)
              break;
            v28 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)(int)v26);
            if ((int)v26)
            {
              if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v28 >> 23])
              {
                v29 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v28 >> 23]
                    + (((v28 & 0x7FFFFF) + ((v28 >> 13) & 1) + 4095) >> 13);
              }
              else
              {
                LOWORD(v29) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v28);
                v26 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v25];
              }
            }
            else
            {
              v29 = v28 >> 16;
            }
            if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v29] != v26)
              break;
            ++v23;
            v24 -= 2;
            if (!v24)
            {
              v30 = *(_QWORD *)a3;
              if (v20 > 0x6FF)
              {
                __src = *(void **)a4;
                sub_20C2B7248((uint64_t)&v86, (char *)&__src);
              }
              else
              {
                LODWORD(__src) = *(_QWORD *)a4;
                sub_20C2CE770((uint64_t)&v86, (char *)&__src);
              }
              sub_20BDE39A0(&__src, *(_QWORD *)a4);
              if (*(_QWORD *)a4)
              {
                v60 = *(unsigned __int16 **)(a4 + 32);
                v61 = __src;
                v62 = 2 * *(_QWORD *)a4;
                do
                {
                  v63 = *v60++;
                  *v61++ = (int)pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v63];
                  v62 -= 2;
                }
                while (v62);
              }
              LOBYTE(__p[0]) = 105;
              sub_20C2DC688((uint64_t)&v86, (char *)__p);
              v64 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__src;
              v65 = (v84 - (_BYTE *)__src) >> 2;
              *(_OWORD *)__p = v86;
              CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v65);
              v67 = (char *)operator new[](CompressedBufferSize);
              v69 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v64, (const int *)v65, v67, v68);
              *(_QWORD *)&v87 = v69;
              sub_20C2B7248((uint64_t)__p, (char *)&v87);
              sub_20C2A7944((uint64_t)__p, v67, v69);
              v22 = v30 & 0xFFFFFFFFFFFFLL | 0xA007000000000000;
              operator delete[](v67);
              goto LABEL_91;
            }
          }
          __src = 0;
          v84 = 0;
          v85 = 0;
          v31 = *(_QWORD *)a4;
          v32 = *(_QWORD *)a4 >> 2;
          if (v32 >= 0x400)
            v32 = 1024;
          v78 = v32;
          __p[0] = 0;
          __p[1] = 0;
          v82 = 0;
          if (v31)
          {
            v77 = v18;
            v33 = 0;
            v34 = *(unsigned __int16 **)(a4 + 32);
            v35 = &v34[v31];
            do
            {
              v36 = *v34;
              if (__src != v33)
              {
                v37 = (unsigned __int16 *)__src;
                while (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*v37] != pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v36])
                {
                  if (++v37 == v33)
                    goto LABEL_40;
                }
                v33 = v37;
              }
LABEL_40:
              v38 = (char *)v33 - (_BYTE *)__src;
              v39 = v38 >> 1;
              v40 = (char *)__p[1];
              if (__p[1] >= v82)
              {
                v42 = (char *)__p[0];
                v43 = ((char *)__p[1] - (char *)__p[0]) >> 2;
                v44 = v43 + 1;
                if ((unint64_t)(v43 + 1) >> 62)
                  sub_20BDDF694();
                v45 = v82 - (char *)__p[0];
                if ((v82 - (char *)__p[0]) >> 1 > v44)
                  v44 = v45 >> 1;
                if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
                  v46 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v46 = v44;
                if (v46)
                {
                  v47 = (char *)sub_20BDE1330((uint64_t)&v82, v46);
                  v42 = (char *)__p[0];
                  v40 = (char *)__p[1];
                }
                else
                {
                  v47 = 0;
                }
                v48 = &v47[4 * v43];
                *(_DWORD *)v48 = v39;
                v41 = v48 + 4;
                while (v40 != v42)
                {
                  v49 = *((_DWORD *)v40 - 1);
                  v40 -= 4;
                  *((_DWORD *)v48 - 1) = v49;
                  v48 -= 4;
                }
                __p[0] = v48;
                __p[1] = v41;
                v82 = &v47[4 * v46];
                if (v42)
                  operator delete(v42);
              }
              else
              {
                *(_DWORD *)__p[1] = v39;
                v41 = v40 + 4;
              }
              __p[1] = v41;
              v50 = (v38 >> 1);
              v33 = (unsigned __int16 *)v84;
              if (v50 == (v84 - (_BYTE *)__src) >> 1)
              {
                if (v50 == v78)
                {
                  v84 = (char *)__src;
                  __p[1] = __p[0];
                  v18 = v77;
                  goto LABEL_83;
                }
                if (v84 >= v85)
                {
                  if (v84 - (_BYTE *)__src <= -3)
                    sub_20BDDF694();
                  if (v85 - (_BYTE *)__src <= (unint64_t)(v50 + 1))
                    v51 = v50 + 1;
                  else
                    v51 = v85 - (_BYTE *)__src;
                  if ((unint64_t)(v85 - (_BYTE *)__src) >= 0x7FFFFFFFFFFFFFFELL)
                    v52 = 0x7FFFFFFFFFFFFFFFLL;
                  else
                    v52 = v51;
                  v54 = (char *)sub_20BDE31CC((uint64_t)&v85, v52);
                  v55 = (char *)__src;
                  v56 = v84;
                  v57 = (unsigned __int16 *)&v54[2 * v50];
                  *v57 = v36;
                  v33 = v57 + 1;
                  while (v56 != v55)
                  {
                    v58 = *((_WORD *)v56 - 1);
                    v56 -= 2;
                    *--v57 = v58;
                  }
                  __src = v57;
                  v84 = (char *)v33;
                  v85 = &v54[2 * v53];
                  if (v55)
                    operator delete(v55);
                }
                else
                {
                  *(_WORD *)v84 = v36;
                  ++v33;
                }
                v84 = (char *)v33;
              }
              ++v34;
            }
            while (v34 != v35);
            v18 = v77;
            if (__src == v33)
              goto LABEL_83;
            v59 = **((_QWORD **)&v86 + 1);
            if (v20 > 0x6FF)
            {
              *(_QWORD *)&v87 = *(_QWORD *)a4;
              sub_20C2B7248((uint64_t)&v86, (char *)&v87);
            }
            else
            {
              LODWORD(v87) = *(_QWORD *)a4;
              sub_20C2CE770((uint64_t)&v86, (char *)&v87);
            }
            LOBYTE(v87) = 116;
            sub_20C2DC688((uint64_t)&v86, (char *)&v87);
            LODWORD(v87) = (unint64_t)(v84 - (_BYTE *)__src) >> 1;
            sub_20C2CE770((uint64_t)&v86, (char *)&v87);
            sub_20C2DC2D8((uint64_t)&v86, (char *)__src, (v84 - (_BYTE *)__src) >> 1);
            v71 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p[0];
            v72 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            v87 = v86;
            v73 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v72);
            v74 = (char *)operator new[](v73);
            v76 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v71, (const unsigned int *)v72, v74, v75);
            *(_QWORD *)v88 = v76;
            sub_20C2B7248((uint64_t)&v87, v88);
            sub_20C2A7944((uint64_t)&v87, v74, v76);
            v22 = v59 & 0xFFFFFFFFFFFFLL | 0xA007000000000000;
            operator delete[](v74);
          }
          else
          {
LABEL_83:
            v87 = v86;
            v70 = sub_20C2CE3F0((uint64_t)&v87, 8);
            if ((v18 | v19) > 0x6FF)
            {
              *(_QWORD *)v88 = *(_QWORD *)a4;
              sub_20C2B7248((uint64_t)&v87, v88);
            }
            else
            {
              *(_DWORD *)v88 = *(_QWORD *)a4;
              sub_20C2CE770((uint64_t)&v87, v88);
            }
            sub_20C2DC2D8((uint64_t)&v87, *(char **)(a4 + 32), *(_QWORD *)a4);
            v22 = v70 & 0xFFFFFFFFFFFFLL | 0x8007000000000000;
          }
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
LABEL_91:
          if (__src)
          {
            v84 = (char *)__src;
            operator delete(__src);
          }
        }
        else
        {
          __src = a2;
          v84 = a3;
          v21 = sub_20C2CE3F0((uint64_t)&__src, 8);
          if ((v18 | v19) > 0x6FF)
          {
            __p[0] = *(void **)a4;
            sub_20C2B7248((uint64_t)&__src, (char *)__p);
          }
          else
          {
            LODWORD(__p[0]) = *(_QWORD *)a4;
            sub_20C2CE770((uint64_t)&__src, (char *)__p);
          }
          v22 = v21 & 0xFFFFFFFFFFFFLL | 0x8007000000000000;
          sub_20C2DC2D8((uint64_t)&__src, *(char **)(a4 + 32), *(_QWORD *)a4);
        }
        v13[7] = v22;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v80, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(__src) = 1;
        sub_20C2CE770((uint64_t)v80, (char *)&__src);
        LODWORD(__src) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v80, (char *)&__src);
        sub_20C2DC2D8((uint64_t)v80, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_20C2DC268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C2DC2D8(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  v3 = 2 * a3;
  if (2 * a3)
  {
    v5 = *(_QWORD **)(result + 8);
    do
    {
      v6 = v5[2];
      v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7)
        v8 = v6 - *v5 + 0x80000;
      else
        v8 = v3;
      v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4])
        v5[4] = v8 + v9;
      result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3)
        result = sub_20C2B209C((_BOOL8)v5);
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

_QWORD *sub_20C2DC37C(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unsigned __int16 *v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  _QWORD **v17;
  _QWORD *i;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;

  v9 = *a2;
  if (*a2)
  {
    v10 = (unsigned __int16 *)a2[4];
    v11 = *a2;
    do
    {
      v12 = *v10++;
      v9 = v12 + ((v9 + v12 + (v9 + v12) * (v9 + v12)) >> 1);
      --v11;
    }
    while (v11);
    v9 *= 0x9E3779B97F4A7C55;
  }
  v13 = bswap64(v9);
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      v4 = v13;
      if (v13 >= v14)
        v4 = v13 % v14;
    }
    else
    {
      v4 = (v14 - 1) & v13;
    }
    v17 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v17)
    {
      for (i = *v17; i; i = (_QWORD *)*i)
      {
        v19 = i[1];
        if (v19 == v13)
        {
          if (sub_20BF57448(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v16 > 1)
          {
            if (v19 >= v14)
              v19 %= v14;
          }
          else
          {
            v19 &= v14 - 1;
          }
          if (v19 != v4)
            break;
        }
      }
    }
  }
  v20 = (_QWORD *)(a1 + 16);
  v21 = operator new(0x40uLL);
  i = v21;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = v13;
  v22 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v21 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v21 + 2) = v22;
  v23 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v21 + 6) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 - 16);
    if (*((_QWORD *)v21 + 5))
      v24 = (unint64_t *)*((_QWORD *)v21 + 5);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *((_QWORD *)v21 + 7) = *a4;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v14 || (float)(v27 * (float)v14) < v26)
  {
    v28 = 1;
    if (v14 >= 3)
      v28 = (v14 & (v14 - 1)) != 0;
    v29 = v28 | (2 * v14);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      v31 = v30;
    else
      v31 = v29;
    sub_20BDEC6E0(a1, v31);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v4 = v13 % v14;
      else
        v4 = v13;
    }
    else
    {
      v4 = (v14 - 1) & v13;
    }
  }
  v32 = *(_QWORD *)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v33)
  {
    *i = *v33;
LABEL_46:
    *v33 = i;
    goto LABEL_47;
  }
  *i = *v20;
  *v20 = i;
  *(_QWORD *)(v32 + 8 * v4) = v20;
  if (*i)
  {
    v34 = *(_QWORD *)(*i + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v34 >= v14)
        v34 %= v14;
    }
    else
    {
      v34 &= v14 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_46;
  }
LABEL_47:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2DC628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2DC644(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2DC644(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C2DC688(uint64_t a1, char *__src)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = 1;
  do
  {
    v5 = v3[2];
    v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6)
      v7 = v5 - *v3 + 0x80000;
    else
      v7 = v4;
    v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4])
      v3[4] = v7 + v8;
    result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4)
      result = sub_20C2B209C((_BOOL8)v3);
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

__n128 sub_20C2DC730(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5301B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2DC76C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5301B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2DC790(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2DC820(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2DC7D8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530210))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2DC814()
{
  return &unk_24C530210;
}

void sub_20C2DC820(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2DC8B4(a1, v6, a3, (uint64_t)v8);
    sub_20BF570C4(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u16[0] = a3;
    sub_20C1D0A64(a4, v8);
  }
}

void sub_20C2DC89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2DC8B4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  ssize_t v14;
  unint64_t p;
  __int128 v16;
  ssize_t v17;
  ssize_t v18;
  unint64_t lbfsize;
  ssize_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  __sFILE *v24;
  char *v25;
  off_t v26;
  FILE *v27;
  ssize_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  ssize_t v32;
  ssize_t v33;
  uint64_t v34;
  char *v35;
  _WORD *v36;
  unsigned __int8 *v37;
  ssize_t v38;
  unint64_t v39;
  ssize_t v40;
  uint64_t v41;
  char *v42;
  unsigned int *v43;
  unsigned int *v44;
  _WORD *v45;
  unsigned int base;
  unsigned int *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  pxrInternal__aapl__pxrReserved__ *v52;
  unsigned int *v53;
  unsigned int *v54;
  __sFILE __p;

  if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    memset(&__p._lbfsize, 0, 40);
    if (&__p._lbfsize != (int *)a4)
    {
      sub_20BF5618C(a4);
      v16 = *(_OWORD *)&__p._close;
      *(_OWORD *)a4 = *(_OWORD *)&__p._lbfsize;
      *(_OWORD *)(a4 + 16) = v16;
      memset(&__p._lbfsize, 0, 32);
      *(_QWORD *)(a4 + 32) = __p._seek;
      __p._seek = 0;
    }
    sub_20BF5618C((uint64_t)&__p._lbfsize);
    return;
  }
  a2[2] = a3 & 0xFFFFFFFFFFFFLL;
  v7 = *(unsigned __int8 *)(*a2 + 6369);
  v8 = *(unsigned __int8 *)(*a2 + 6370);
  v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
  v10 = v9 | (v7 << 8);
  if (v10 > 0x4FF || (__p._lbfsize = 0, sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&__p._lbfsize)))
  {
    v11 = *((_OWORD *)a2 + 1);
    v50 = *(_OWORD *)a2;
    v51 = v11;
    v52 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
    v12 = v9 | v8 | (v7 << 8);
    if (v12 < 0x600 || (a3 & 0x2000000000000000) == 0)
    {
      __p._p = 0;
      if (v10 > 0x6FF)
      {
        v14 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, &__p, (char *)8, v51 + *((_QWORD *)&v50 + 1));
        if (v14 == -1)
          return;
        p = (unint64_t)__p._p;
      }
      else
      {
        __p._lbfsize = 0;
        v14 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, (__sFILE *)&__p._lbfsize, (char *)4, v51 + *((_QWORD *)&v50 + 1));
        if (v14 == -1)
          return;
        p = __p._lbfsize;
        __p._p = (unsigned __int8 *)__p._lbfsize;
      }
      v20 = v14 + v51;
      v21 = *((_QWORD *)&v51 + 1) - (v14 + v51);
      if (v14 + (_QWORD)v51 < 0 || (v21 & 0x8000000000000000) != 0 || p > v21 || 2 * p > v21)
      {
        *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
        __p._cookie = "_ReadUncompressedArray";
        __p._close = (int (__cdecl *)(void *))2053;
        __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_I"
                                                          "sBitwiseReadWrite<T>::value>::type pxrInternal__aapl__pxrReser"
                                                          "ved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep,"
                                                          " VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl"
                                                          "__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal"
                                                          "__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>, T = pxrIn"
                                                          "ternal__aapl__pxrReserved__::pxr_half::half]";
        LOBYTE(__p._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      LOWORD(v53) = 0;
      *(_QWORD *)&__p._lbfsize = &v53;
      sub_20BF56DE0((unint64_t *)a4, p, (_WORD **)&__p._lbfsize);
      sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v22, v23);
      v24 = *(__sFILE **)(a4 + 32);
      v25 = (char *)(2 * *(_QWORD *)a4);
      v26 = v20 + *((_QWORD *)&v50 + 1);
      v27 = (FILE *)v52;
      goto LABEL_33;
    }
    *(_QWORD *)&__p._bf._size = 0;
    if (v12 > 0x6FF)
    {
      v28 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, (__sFILE *)&__p._bf._size, (char *)8, v51 + *((_QWORD *)&v50 + 1));
      if (v28 == -1)
        return;
      v18 = v51 + v28;
      *(_QWORD *)&v51 = v51 + v28;
      lbfsize = *(_QWORD *)&__p._bf._size;
    }
    else
    {
      __p._lbfsize = 0;
      v17 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, (__sFILE *)&__p._lbfsize, (char *)4, v51 + *((_QWORD *)&v50 + 1));
      if (v17 == -1)
        return;
      v18 = v51 + v17;
      *(_QWORD *)&v51 = v51 + v17;
      lbfsize = __p._lbfsize;
      *(_QWORD *)&__p._bf._size = __p._lbfsize;
    }
    if (lbfsize <= 0xF)
    {
      v29 = *((_QWORD *)&v51 + 1) - v18;
      if (v18 < 0 || (v29 & 0x8000000000000000) != 0 || lbfsize > v29 || 2 * lbfsize > v29)
      {
        *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
        __p._cookie = "_ReadPossiblyCompressedArray";
        __p._close = (int (__cdecl *)(void *))2287;
        __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || std:"
                                                          ":is_same<T, float>::value || std::is_same<T, double>::value>::"
                                                          "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPos"
                                                          "siblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile"
                                                          "::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Us"
                                                          "d_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved"
                                                          "__::Usd_CrateFile::_PreadStream>, T = pxrInternal__aapl__pxrRe"
                                                          "served__::pxr_half::half]";
        LOBYTE(__p._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      LOWORD(__p._p) = 0;
      *(_QWORD *)&__p._lbfsize = &__p;
      sub_20BF56DE0((unint64_t *)a4, lbfsize, (_WORD **)&__p._lbfsize);
      sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
      v24 = *(__sFILE **)(a4 + 32);
      v25 = (char *)(2 * *(_QWORD *)&__p._bf._size);
      v27 = (FILE *)v52;
      v26 = v51 + *((_QWORD *)&v50 + 1);
LABEL_33:
      pxrInternal__aapl__pxrReserved__::ArchPRead(v27, v24, v25, v26);
      return;
    }
    HIBYTE(__p._bf._base) = 0;
    v32 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, (__sFILE *)((char *)&__p._bf._base + 7), (char *)1, v18 + *((_QWORD *)&v50 + 1));
    if (v32 != -1)
    {
      v33 = v51 + v32;
      *(_QWORD *)&v51 = v51 + v32;
      if (HIBYTE(__p._bf._base) != 116)
      {
        if (HIBYTE(__p._bf._base) != 105)
        {
          *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
          __p._cookie = "_ReadPossiblyCompressedArray";
          __p._close = (int (__cdecl *)(void *))2351;
          __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || st"
                                                            "d::is_same<T, float>::value || std::is_same<T, double>::valu"
                                                            "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                                                            "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, C"
                                                            "rateFile::Version, int) [Reader = pxrInternal__aapl__pxrRese"
                                                            "rved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                                                            "_pxrReserved__::Usd_CrateFile::_PreadStream>, T = pxrInterna"
                                                            "l__aapl__pxrReserved__::pxr_half::half]";
          LOBYTE(__p._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>");
          return;
        }
        if ((sub_20C2D2524(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&__p._bf._size) & 1) == 0)
        {
          *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
          __p._cookie = "_ReadPossiblyCompressedArray";
          __p._close = (int (__cdecl *)(void *))2307;
          __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || st"
                                                            "d::is_same<T, float>::value || std::is_same<T, double>::valu"
                                                            "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                                                            "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, C"
                                                            "rateFile::Version, int) [Reader = pxrInternal__aapl__pxrRese"
                                                            "rved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                                                            "_pxrReserved__::Usd_CrateFile::_PreadStream>, T = pxrInterna"
                                                            "l__aapl__pxrReserved__::pxr_half::half]";
          LOBYTE(__p._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints");
          return;
        }
        sub_20BDE39A0(&__p._lbfsize, *(unint64_t *)&__p._bf._size);
        LOWORD(v53) = 0;
        __p._p = (unsigned __int8 *)&v53;
        sub_20BF56DE0((unint64_t *)a4, *(unint64_t *)&__p._bf._size, &__p);
        sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v34, v35);
        v36 = *(_WORD **)(a4 + 32);
        sub_20C2D2558((uint64_t)&v50, *(unint64_t *)&__p._lbfsize, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(((uint64_t)__p._cookie - *(_QWORD *)&__p._lbfsize) >> 2));
        sub_20C2DCF9C((uint64_t)&__p, *(int **)&__p._lbfsize, (int *)__p._cookie, v36);
        v37 = *(unsigned __int8 **)&__p._lbfsize;
        if (*(_QWORD *)&__p._lbfsize)
        {
          __p._cookie = *(void **)&__p._lbfsize;
LABEL_60:
          operator delete(v37);
          return;
        }
        return;
      }
      LODWORD(__p._bf._base) = 0;
      v38 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, (__sFILE *)&__p._bf, (char *)4, v33 + *((_QWORD *)&v50 + 1));
      if (v38 == -1)
        return;
      *(_QWORD *)&v51 = v51 + v38;
      v39 = *((_QWORD *)&v51 + 1) - v51;
      if ((v51 & 0x8000000000000000) != 0
        || (v39 & 0x8000000000000000) != 0
        || (uint64_t)v39 < LODWORD(__p._bf._base)
        || 2 * (unint64_t)LODWORD(__p._bf._base) > v39)
      {
        *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
        __p._cookie = "_ReadPossiblyCompressedArray";
        __p._close = (int (__cdecl *)(void *))2325;
        __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || std:"
                                                          ":is_same<T, float>::value || std::is_same<T, double>::value>::"
                                                          "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPos"
                                                          "siblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile"
                                                          "::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Us"
                                                          "d_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved"
                                                          "__::Usd_CrateFile::_PreadStream>, T = pxrInternal__aapl__pxrRe"
                                                          "served__::pxr_half::half]";
        LOBYTE(__p._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      sub_20C2DD034(&__p, LODWORD(__p._bf._base));
      v40 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v52, (__sFILE *)__p._p, (char *)(*(_QWORD *)&__p._r - (unint64_t)__p._p), v51 + *((_QWORD *)&v50 + 1));
      if (v40 != -1)
        *(_QWORD *)&v51 = v51 + v40;
      if ((sub_20C2D2524(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&__p._bf._size) & 1) != 0)
      {
        sub_20BDE36C4(&v53, *(unint64_t *)&__p._bf._size);
        sub_20C2C1E3C((uint64_t)&v50, (unint64_t)v53, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(v54 - v53));
        HIWORD(__p._write) = 0;
        *(_QWORD *)&__p._lbfsize = (char *)&__p._write + 6;
        sub_20BF56DE0((unint64_t *)a4, *(unint64_t *)&__p._bf._size, (_WORD **)&__p._lbfsize);
        sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v41, v42);
        v43 = v53;
        v44 = v54;
        if (v53 == v54)
        {
LABEL_53:
          if (!v43)
            goto LABEL_58;
        }
        else
        {
          v45 = *(_WORD **)(a4 + 32);
          base = __p._bf._base;
          v47 = v53;
          v48 = __p._p;
          while (1)
          {
            v49 = *v47;
            if (v49 >= base)
              break;
            *v45++ = *(_WORD *)&v48[2 * v49];
            if (++v47 == v44)
              goto LABEL_53;
          }
          *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
          __p._cookie = "_ReadPossiblyCompressedArray";
          __p._close = (int (__cdecl *)(void *))2343;
          __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || st"
                                                            "d::is_same<T, float>::value || std::is_same<T, double>::valu"
                                                            "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                                                            "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, C"
                                                            "rateFile::Version, int) [Reader = pxrInternal__aapl__pxrRese"
                                                            "rved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                                                            "_pxrReserved__::Usd_CrateFile::_PreadStream>, T = pxrInterna"
                                                            "l__aapl__pxrReserved__::pxr_half::half]";
          LOBYTE(__p._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v49);
          v43 = v53;
          if (!v53)
          {
LABEL_58:
            v37 = __p._p;
            if (__p._p)
            {
              *(_QWORD *)&__p._r = __p._p;
              goto LABEL_60;
            }
            return;
          }
        }
        v54 = v43;
        operator delete(v43);
        goto LABEL_58;
      }
      *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
      __p._cookie = "_ReadPossiblyCompressedArray";
      __p._close = (int (__cdecl *)(void *))2333;
      __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || std::i"
                                                        "s_same<T, float>::value || std::is_same<T, double>::value>::type"
                                                        " pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyC"
                                                        "ompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versio"
                                                        "n, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFil"
                                                        "e::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Crat"
                                                        "eFile::_PreadStream>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(__p._seek) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", *(_QWORD *)&__p._bf._size);
      goto LABEL_58;
    }
  }
}

void sub_20C2DCF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

int *sub_20C2DCF9C(uint64_t a1, int *a2, int *a3, _WORD *a4)
{
  int *v5;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v7;
  unsigned int v8;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*v5);
      if (*v5)
      {
        if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v7 >> 23])
          v8 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v7 >> 23]
             + (((v7 & 0x7FFFFF) + ((v7 >> 13) & 1) + 4095) >> 13);
        else
          LOWORD(v8) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v7);
      }
      else
      {
        v8 = v7 >> 16;
      }
      *a4++ = v8;
      ++v5;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *sub_20C2DD034(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE3190(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_20C2DD08C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_20C2DD0B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2DD0EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2DD110(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2DD160((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2DD118(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530290))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2DD154()
{
  return &unk_24C530290;
}

void sub_20C2DD160(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2DD1DC(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2DD1DC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2DD270(a1, v6, a3, (uint64_t)v8);
    sub_20BF570C4(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u16[0] = a3;
    sub_20C1D0A64(a4, v8);
  }
}

void sub_20C2DD258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2DD270(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  __int128 v14;
  unsigned __int8 v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  char *v23;
  void *v24;
  size_t v25;
  void **v26;
  unint64_t v27;
  void *v28;
  unint64_t *v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  _WORD *v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  unsigned int *v44;
  unsigned int *v45;
  _WORD *v46;
  unsigned int v47;
  unsigned int *v48;
  _WORD *v49;
  uint64_t v50;
  char *v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  unsigned int *v56;
  unsigned int v57;
  char v58;
  unint64_t v59;
  void *__p[2];
  __int128 v61;
  uint64_t v62;
  __int128 __dst;
  __int128 v64;
  void *v65;
  __int16 v66;

  if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    v65 = 0;
    __dst = 0u;
    v64 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v17 = v64;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v17;
      __dst = 0u;
      v64 = 0u;
      *(_QWORD *)(a4 + 32) = v65;
      v65 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
    return;
  }
  *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
  v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6369);
  v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6370);
  v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16;
  v10 = v9 | (v7 << 8);
  if (v10 <= 0x4FF)
  {
    LODWORD(__dst) = 0;
    if (!sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL))
      return;
  }
  v11 = a2[1];
  v52 = *a2;
  v53 = v11;
  v54 = *((_QWORD *)a2 + 4);
  v12 = v9 | v8 | (v7 << 8);
  if (v12 < 0x600 || (a3 & 0x2000000000000000) == 0)
  {
    v14 = a2[1];
    *(_OWORD *)__p = *a2;
    v61 = v14;
    v62 = *((_QWORD *)a2 + 4);
    v15 = atomic_load((unsigned __int8 *)&qword_254988470);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254988470))
    {
      v51 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
      if (!v51)
      {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        v51 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
      }
      byte_254988468 = *v51;
      __cxa_guard_release(&qword_254988470);
    }
    v55 = 0;
    if (v10 > 0x6FF)
    {
      if (!sub_20C2B9BEC((uint64_t)&__p[1], &v55, 8uLL))
        return;
      v16 = v55;
    }
    else
    {
      LODWORD(__dst) = 0;
      if ((sub_20C2B9BEC((uint64_t)&__p[1], &__dst, 4uLL) & 1) == 0)
        return;
      v16 = __dst;
      v55 = __dst;
    }
    v27 = 2 * v16;
    v28 = __p[1];
    if (!byte_254988468 || v27 < 0x800 || ((uint64_t)__p[1] & 1) != 0)
    {
      v31 = (unint64_t)__p[1] - *(_QWORD *)(*(_QWORD *)v61 + 24);
      v32 = *(_QWORD *)(*(_QWORD *)v61 + 32) - v31;
      if ((v31 & 0x8000000000000000) == 0 && (v32 & 0x8000000000000000) == 0 && v16 <= v32 && v27 <= v32)
      {
        LOWORD(v59) = 0;
        *(_QWORD *)&__dst = &v59;
        sub_20BF56DE0((unint64_t *)a4, v16, (_WORD **)&__dst);
        sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v34, v35);
        v24 = *(void **)(a4 + 32);
        v25 = 2 * *(_QWORD *)a4;
        v26 = &__p[1];
        goto LABEL_45;
      }
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v64 = 2117;
      *((_QWORD *)&v64 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::"
                              "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Value"
                              "Rep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_Cra"
                              "teFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<px"
                              "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = pxrInterna"
                              "l__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(v65) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
    }
    else
    {
      v29 = sub_20C2CF260((uint64_t)&__p[1], (char *)__p[1], 2 * v16, v16);
      if (v29)
      {
        *(_QWORD *)&v64 = 0;
        *((_QWORD *)&v64 + 1) = v29;
        v65 = v28;
        __dst = v55;
        if (&__dst != (__int128 *)a4)
        {
          sub_20BF5618C(a4);
          v30 = v64;
          *(_OWORD *)a4 = __dst;
          *(_OWORD *)(a4 + 16) = v30;
          __dst = 0u;
          v64 = 0u;
          *(_QWORD *)(a4 + 32) = v65;
          v65 = 0;
        }
        sub_20BF5618C((uint64_t)&__dst);
      }
      else
      {
        *(_QWORD *)&__dst = "usd/crateFile.cpp";
        *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
        *(_QWORD *)&v64 = 2109;
        *((_QWORD *)&v64 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>"
                                "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, V"
                                "alueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::U"
                                "sd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapS"
                                "tream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = "
                                "pxrInternal__aapl__pxrReserved__::pxr_half::half]";
        LOBYTE(v65) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v27);
        sub_20BF56210((_QWORD *)a4);
      }
    }
    return;
  }
  v59 = 0;
  if (v12 > 0x6FF)
  {
    if (!sub_20C2B9BEC((uint64_t)&v52 + 8, &v59, 8uLL))
      return;
    v18 = v59;
  }
  else
  {
    LODWORD(__dst) = 0;
    if (!sub_20C2B9BEC((uint64_t)&v52 + 8, &__dst, 4uLL))
      return;
    v18 = __dst;
    v59 = __dst;
  }
  if (v18 <= 0xF)
  {
    v19 = *((_QWORD *)&v52 + 1) - *(_QWORD *)(*(_QWORD *)v53 + 24);
    v20 = *(_QWORD *)(*(_QWORD *)v53 + 32) - v19;
    if ((v19 & 0x8000000000000000) == 0 && (v20 & 0x8000000000000000) == 0 && v18 <= v20 && 2 * v18 <= v20)
    {
      LOWORD(__p[0]) = 0;
      *(_QWORD *)&__dst = __p;
      sub_20BF56DE0((unint64_t *)a4, v18, (_WORD **)&__dst);
      sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v22, v23);
      v24 = *(void **)(a4 + 32);
      v25 = 2 * v59;
      v26 = (void **)&v52 + 1;
LABEL_45:
      sub_20C2B9BEC((uint64_t)v26, v24, v25);
      return;
    }
    *(_QWORD *)&__dst = "usd/crateFile.cpp";
    *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(_QWORD *)&v64 = 2287;
    *((_QWORD *)&v64 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
    LOBYTE(v65) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
    return;
  }
  v58 = 0;
  if (!sub_20C2B9BEC((uint64_t)&v52 + 8, &v58, 1uLL))
    return;
  if (v58 == 116)
  {
    v57 = 0;
    if (!sub_20C2B9BEC((uint64_t)&v52 + 8, &v57, 4uLL))
      return;
    v40 = *((_QWORD *)&v52 + 1) - *(_QWORD *)(*(_QWORD *)v53 + 24);
    v41 = *(_QWORD *)(*(_QWORD *)v53 + 32) - v40;
    if (v40 < 0 || (v41 & 0x8000000000000000) != 0 || (uint64_t)v41 < v57 || 2 * (unint64_t)v57 > v41)
    {
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(_QWORD *)&v64 = 2325;
      *((_QWORD *)&v64 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(v65) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld");
      return;
    }
    sub_20C2DD034(__p, v57);
    sub_20C2B9BEC((uint64_t)&v52 + 8, __p[0], (char *)__p[1] - (char *)__p[0]);
    if ((sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v59) & 1) == 0)
    {
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(_QWORD *)&v64 = 2333;
      *((_QWORD *)&v64 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(v65) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v59);
      goto LABEL_68;
    }
    sub_20BDE36C4(&v55, v59);
    sub_20C2BA590((uint64_t)&v52, v55, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)((uint64_t)v56 - v55) >> 2));
    v66 = 0;
    *(_QWORD *)&__dst = &v66;
    sub_20BF56DE0((unint64_t *)a4, v59, (_WORD **)&__dst);
    sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v42, v43);
    v44 = (unsigned int *)v55;
    v45 = v56;
    if ((unsigned int *)v55 == v56)
    {
LABEL_63:
      if (!v44)
      {
LABEL_68:
        v39 = __p[0];
        if (!__p[0])
          return;
        __p[1] = __p[0];
        goto LABEL_70;
      }
    }
    else
    {
      v46 = *(_WORD **)(a4 + 32);
      v47 = v57;
      v48 = (unsigned int *)v55;
      v49 = __p[0];
      while (1)
      {
        v50 = *v48;
        if (v50 >= v47)
          break;
        *v46++ = v49[v50];
        if (++v48 == v45)
          goto LABEL_63;
      }
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(_QWORD *)&v64 = 2343;
      *((_QWORD *)&v64 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
      LOBYTE(v65) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v50);
      v44 = (unsigned int *)v55;
      if (!v55)
        goto LABEL_68;
    }
    v56 = v44;
    operator delete(v44);
    goto LABEL_68;
  }
  if (v58 != 105)
  {
    *(_QWORD *)&__dst = "usd/crateFile.cpp";
    *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(_QWORD *)&v64 = 2351;
    *((_QWORD *)&v64 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
    LOBYTE(v65) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>");
    return;
  }
  if ((sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v59) & 1) == 0)
  {
    *(_QWORD *)&__dst = "usd/crateFile.cpp";
    *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(_QWORD *)&v64 = 2307;
    *((_QWORD *)&v64 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
    LOBYTE(v65) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints");
    return;
  }
  sub_20BDE39A0(&__dst, v59);
  LOWORD(v55) = 0;
  __p[0] = &v55;
  sub_20BF56DE0((unint64_t *)a4, v59, (_WORD **)__p);
  sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v36, v37);
  v38 = *(_WORD **)(a4 + 32);
  sub_20C2D2CDC((uint64_t)&v52, __dst, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 2));
  sub_20C2DCF9C((uint64_t)__p, (int *)__dst, *((int **)&__dst + 1), v38);
  v39 = (void *)__dst;
  if ((_QWORD)__dst)
  {
    *((_QWORD *)&__dst + 1) = __dst;
LABEL_70:
    operator delete(v39);
  }
}

void sub_20C2DD9DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  __cxa_guard_abort(&qword_254988470);
  _Unwind_Resume(a1);
}

__n128 sub_20C2DDA84(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5302B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2DDAC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5302B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2DDAE4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2DDB3C((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2DDAF4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530310))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2DDB30()
{
  return &unk_24C530310;
}

void sub_20C2DDB3C(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2DDC58(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2DDC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2DDC58(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  __n128 v18[2];
  uint64_t v19;

  if (a3 < 0)
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    v15 = *a2;
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v16 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v17 = *((_QWORD *)a2 + 3);
    sub_20C2DDDAC(a1, &v15, a3, (uint64_t)v18);
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    sub_20BF570C4(a4, v18);
    sub_20BF5618C((uint64_t)v18);
  }
  else
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v18[0].n128_u16[0] = a3;
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 - 1, v6));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v18[0].n128_u16[0] = a3;
    }
    sub_20C1D0A64(a4, v18);
  }
}

void sub_20C2DDD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2DDDAC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  ptrdiff_t v16;
  unsigned int v17;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  ptrdiff_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  ptrdiff_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t *v59;
  unint64_t v60;
  ptrdiff_t v61;
  uint64_t *v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  char *v66;
  _WORD *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unint64_t v72;
  uint64_t *v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  char *v77;
  unsigned int *v78;
  unsigned int *v79;
  _WORD *v80;
  unsigned int v81;
  unsigned int *v82;
  _WORD *v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  std::__shared_weak_count *v96;
  ptrdiff_t v97;
  unsigned int *v98;
  unsigned int *v99;
  void *__p;
  _BYTE *v101;
  unsigned int v102;
  char v103;
  unint64_t v104;
  __int128 v105;
  std::__shared_weak_count *v106;
  ptrdiff_t v107;
  __int16 v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v7 = *a2;
    v8 = *(unsigned __int8 *)(*a2 + 6369);
    v9 = *(unsigned __int8 *)(*a2 + 6370);
    v10 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v109) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v109, 4uLL))
        return;
      v7 = *a2;
    }
    v13 = a2[1];
    v12 = (std::__shared_weak_count *)a2[2];
    *(_QWORD *)&v95 = v7;
    *((_QWORD *)&v95 + 1) = v13;
    v96 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = a2[3];
    v97 = v16;
    v17 = v10 | v9 | (v8 << 8);
    if (v17 >= 0x600 && (a3 & 0x2000000000000000) != 0)
    {
      v104 = 0;
      if (v17 > 0x6FF)
      {
        v46 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
        if (v97 < 0 || v97 + 8 > v46)
        {
          *(_QWORD *)&v109 = "usd/crateFile.cpp";
          *((_QWORD *)&v109 + 1) = "Read";
          *(_QWORD *)&v110 = 770;
          *((_QWORD *)&v110 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v111) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v97, v46);
          goto LABEL_73;
        }
        v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1)) - v97;
        if (v47 < 8 || ((v47 | v97) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v109 = "usd/crateFile.cpp";
          *((_QWORD *)&v109 + 1) = "Read";
          *(_QWORD *)&v110 = 779;
          *((_QWORD *)&v110 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v111) = 0;
          v89 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v47, v89);
          goto LABEL_73;
        }
        v48 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t))(**((_QWORD **)&v95 + 1) + 32))(*((_QWORD *)&v95 + 1), &v104, 8);
        if ((unint64_t)(v48 + 1) < 2)
          goto LABEL_73;
        v97 += v48;
        v29 = v104;
      }
      else
      {
        LODWORD(v105) = 0;
        v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
        if (v97 < 0 || v97 + 4 > v26)
        {
          *(_QWORD *)&v109 = "usd/crateFile.cpp";
          *((_QWORD *)&v109 + 1) = "Read";
          *(_QWORD *)&v110 = 770;
          *((_QWORD *)&v110 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v111) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v97, v26);
          goto LABEL_73;
        }
        v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1)) - v97;
        if (v27 < 4 || ((v27 | v97) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v109 = "usd/crateFile.cpp";
          *((_QWORD *)&v109 + 1) = "Read";
          *(_QWORD *)&v110 = 779;
          *((_QWORD *)&v110 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v111) = 0;
          v87 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v27, v87);
          goto LABEL_73;
        }
        v28 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t))(**((_QWORD **)&v95 + 1) + 32))(*((_QWORD *)&v95 + 1), &v105, 4);
        if ((unint64_t)(v28 + 1) < 2)
          goto LABEL_73;
        v97 += v28;
        v29 = v105;
        v104 = v105;
      }
      if (v29 <= 0xF)
      {
        v49 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1)) - v97;
        v50 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v104;
        v51 = 2 * v104;
        if (v97 < 0 || (v49 & 0x8000000000000000) != 0 || v104 > v49 || v51 > v49)
        {
          *(_QWORD *)&v109 = "usd/crateFile.cpp";
          *((_QWORD *)&v109 + 1) = "_ReadPossiblyCompressedArray";
          *(_QWORD *)&v110 = 2287;
          *((_QWORD *)&v110 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::val"
                                   "ue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_Cra"
                                   "teFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versi"
                                   "on, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reade"
                                   "r<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aa"
                                   "pl__pxrReserved__::pxr_half::half]";
          LOBYTE(v111) = 0;
          v92 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v50, v51, v49, v92);
        }
        else
        {
          LOWORD(v105) = 0;
          *(_QWORD *)&v109 = &v105;
          sub_20BF56DE0((unint64_t *)a4, v104, (_WORD **)&v109);
          sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v52, v53);
          sub_20C2B72E8((_QWORD *)&v95 + 1, *(_QWORD *)(a4 + 32), 2 * v104);
        }
        goto LABEL_73;
      }
      v103 = 0;
      v54 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
      if (v97 < 0 || v97 + 1 > v54)
      {
        *(_QWORD *)&v109 = "usd/crateFile.cpp";
        *((_QWORD *)&v109 + 1) = "Read";
        *(_QWORD *)&v110 = 770;
        *((_QWORD *)&v110 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v111) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 1uLL, v97, v54);
      }
      else
      {
        v55 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
        v56 = v55 - v97;
        if (v55 == v97 || (v56 | v97) < 0)
        {
          *(_QWORD *)&v109 = "usd/crateFile.cpp";
          *((_QWORD *)&v109 + 1) = "Read";
          *(_QWORD *)&v110 = 779;
          *((_QWORD *)&v110 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v111) = 0;
          v93 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 1uLL, v56, v93);
        }
        else
        {
          v57 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(**((_QWORD **)&v95 + 1) + 32))(*((_QWORD *)&v95 + 1), &v103, 1);
          if ((unint64_t)(v57 + 1) < 2)
            goto LABEL_73;
          v61 = v97 + v57;
          v97 += v57;
          if (v103 != 116)
          {
            if (v103 != 105)
            {
              *(_QWORD *)&v109 = "usd/crateFile.cpp";
              *((_QWORD *)&v109 + 1) = "_ReadPossiblyCompressedArray";
              *(_QWORD *)&v110 = 2351;
              *((_QWORD *)&v110 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>:"
                                       ":value || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__:"
                                       ":Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crat"
                                       "eFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                                       "rateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>,"
                                       " T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
              LOBYTE(v111) = 0;
              v85 = (const char *)(v95 + 6512);
              if (*(char *)(v95 + 6535) < 0)
                v85 = *(const char **)v85;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>", v85);
              goto LABEL_73;
            }
            v105 = v95;
            v106 = v96;
            if (v96)
            {
              v62 = &v96->__shared_owners_;
              do
                v63 = __ldxr((unint64_t *)v62);
              while (__stxr(v63 + 1, (unint64_t *)v62));
              v61 = v97;
            }
            v107 = v61;
            v64 = sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v104);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v105 + 8));
            if ((v64 & 1) == 0)
            {
              *(_QWORD *)&v109 = "usd/crateFile.cpp";
              *((_QWORD *)&v109 + 1) = "_ReadPossiblyCompressedArray";
              *(_QWORD *)&v110 = 2307;
              *((_QWORD *)&v110 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>:"
                                       ":value || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__:"
                                       ":Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crat"
                                       "eFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                                       "rateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>,"
                                       " T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
              LOBYTE(v111) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints", v104);
              goto LABEL_73;
            }
            sub_20BDE39A0(&v109, v104);
            LOWORD(v98) = 0;
            __p = &v98;
            sub_20BF56DE0((unint64_t *)a4, v104, (_WORD **)&__p);
            sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v65, v66);
            v67 = *(_WORD **)(a4 + 32);
            sub_20C2D3B44((uint64_t)&v95, v109, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*((_QWORD *)&v109 + 1) - v109) >> 2));
            sub_20C2DCF9C((uint64_t)&__p, (int *)v109, *((int **)&v109 + 1), v67);
            v68 = (void *)v109;
            if (!(_QWORD)v109)
              goto LABEL_73;
            *((_QWORD *)&v109 + 1) = v109;
LABEL_110:
            operator delete(v68);
            goto LABEL_73;
          }
          v102 = 0;
          if (!sub_20C2B72E8((_QWORD *)&v95 + 1, (uint64_t)&v102, 4uLL))
            goto LABEL_73;
          v69 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
          v70 = v69 - v97;
          v71 = v102;
          v72 = 2 * v102;
          if ((v97 & 0x8000000000000000) == 0 && (v70 & 0x8000000000000000) == 0 && v70 >= v102 && v72 <= v70)
          {
            sub_20C2DD034(&__p, v102);
            sub_20C2B72E8((_QWORD *)&v95 + 1, (uint64_t)__p, v101 - (_BYTE *)__p);
            v105 = v95;
            v106 = v96;
            if (v96)
            {
              v73 = &v96->__shared_owners_;
              do
                v74 = __ldxr((unint64_t *)v73);
              while (__stxr(v74 + 1, (unint64_t *)v73));
            }
            v107 = v97;
            v75 = sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v104);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v105 + 8));
            if ((v75 & 1) == 0)
            {
              *(_QWORD *)&v109 = "usd/crateFile.cpp";
              *((_QWORD *)&v109 + 1) = "_ReadPossiblyCompressedArray";
              *(_QWORD *)&v110 = 2333;
              *((_QWORD *)&v110 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>:"
                                       ":value || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__:"
                                       ":Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crat"
                                       "eFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                                       "rateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>,"
                                       " T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
              LOBYTE(v111) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v104);
              goto LABEL_108;
            }
            sub_20BDE36C4(&v98, v104);
            sub_20C2C5CD0((uint64_t)&v95, (unint64_t)v98, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(v99 - v98));
            v108 = 0;
            *(_QWORD *)&v109 = &v108;
            sub_20BF56DE0((unint64_t *)a4, v104, (_WORD **)&v109);
            sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v76, v77);
            v78 = v98;
            v79 = v99;
            if (v98 == v99)
            {
LABEL_101:
              if (!v78)
              {
LABEL_108:
                v68 = __p;
                if (!__p)
                  goto LABEL_73;
                v101 = __p;
                goto LABEL_110;
              }
            }
            else
            {
              v80 = *(_WORD **)(a4 + 32);
              v81 = v102;
              v82 = v98;
              v83 = __p;
              while (1)
              {
                v84 = *v82;
                if (v84 >= v81)
                  break;
                *v80++ = v83[v84];
                if (++v82 == v79)
                  goto LABEL_101;
              }
              *(_QWORD *)&v109 = "usd/crateFile.cpp";
              *((_QWORD *)&v109 + 1) = "_ReadPossiblyCompressedArray";
              *(_QWORD *)&v110 = 2343;
              *((_QWORD *)&v110 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>:"
                                       ":value || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__:"
                                       ":Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crat"
                                       "eFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                                       "rateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>,"
                                       " T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
              LOBYTE(v111) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v84);
              v78 = v98;
              if (!v98)
                goto LABEL_108;
            }
            v99 = v78;
            operator delete(v78);
            goto LABEL_108;
          }
          *(_QWORD *)&v109 = "usd/crateFile.cpp";
          *((_QWORD *)&v109 + 1) = "_ReadPossiblyCompressedArray";
          *(_QWORD *)&v110 = 2325;
          *((_QWORD *)&v110 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::val"
                                   "ue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_Cra"
                                   "teFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versi"
                                   "on, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reade"
                                   "r<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aa"
                                   "pl__pxrReserved__::pxr_half::half]";
          LOBYTE(v111) = 0;
          v94 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld", v71, v72, v70, v94);
        }
      }
LABEL_73:
      v58 = v96;
      if (v96)
      {
        v59 = &v96->__shared_owners_;
        do
          v60 = __ldaxr((unint64_t *)v59);
        while (__stlxr(v60 - 1, (unint64_t *)v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      return;
    }
    *(_QWORD *)&v105 = v7;
    *((_QWORD *)&v105 + 1) = *((_QWORD *)&v95 + 1);
    v106 = v96;
    if (v96)
    {
      v19 = &v96->__shared_owners_;
      do
        v20 = __ldxr((unint64_t *)v19);
      while (__stxr(v20 + 1, (unint64_t *)v19));
      v16 = v97;
    }
    v107 = v16;
    __p = 0;
    if (v11 > 0x6FF)
    {
      v30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
      if (v16 < 0 || v16 + 8 > v30)
      {
        *(_QWORD *)&v109 = "usd/crateFile.cpp";
        *((_QWORD *)&v109 + 1) = "Read";
        *(_QWORD *)&v110 = 770;
        *((_QWORD *)&v110 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v111) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v16, v30);
      }
      else
      {
        v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1)) - v16;
        if (v31 < 8 || ((v31 | v16) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v109 = "usd/crateFile.cpp";
          *((_QWORD *)&v109 + 1) = "Read";
          *(_QWORD *)&v110 = 779;
          *((_QWORD *)&v110 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v111) = 0;
          v88 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v31, v88);
        }
        else
        {
          v32 = (*(uint64_t (**)(_QWORD, void **, uint64_t, ptrdiff_t))(**((_QWORD **)&v95 + 1) + 32))(*((_QWORD *)&v95 + 1), &__p, 8, v16);
          if ((unint64_t)(v32 + 1) >= 2)
          {
            v24 = v16 + v32;
            v107 = v24;
            goto LABEL_40;
          }
        }
      }
    }
    else
    {
      LODWORD(v98) = 0;
      v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
      if (v16 < 0 || v16 + 4 > v21)
      {
        *(_QWORD *)&v109 = "usd/crateFile.cpp";
        *((_QWORD *)&v109 + 1) = "Read";
        *(_QWORD *)&v110 = 770;
        *((_QWORD *)&v110 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v111) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v16, v21);
      }
      else
      {
        v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1)) - v16;
        if (v22 < 4 || ((v22 | v16) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v109 = "usd/crateFile.cpp";
          *((_QWORD *)&v109 + 1) = "Read";
          *(_QWORD *)&v110 = 779;
          *((_QWORD *)&v110 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v111) = 0;
          v86 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v22, v86);
        }
        else
        {
          v23 = (*(uint64_t (**)(_QWORD, unsigned int **, uint64_t, ptrdiff_t))(**((_QWORD **)&v95 + 1) + 32))(*((_QWORD *)&v95 + 1), &v98, 4, v16);
          if ((unint64_t)(v23 + 1) >= 2)
          {
            v24 = v16 + v23;
            v107 = v24;
            __p = (void *)v98;
LABEL_40:
            v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1)) - v24;
            v34 = __p;
            v35 = 2 * (_QWORD)__p;
            if (v24 < 0 || (v33 & 0x8000000000000000) != 0 || (unint64_t)__p > v33 || v35 > v33)
            {
              *(_QWORD *)&v109 = "usd/crateFile.cpp";
              *((_QWORD *)&v109 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v110 = 2053;
              *((_QWORD *)&v110 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T"
                                       ">::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompresse"
                                       "dArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal_"
                                       "_aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRes"
                                       "erved__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::pxr_half::half]";
              LOBYTE(v111) = 0;
              v90 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v34, v35, v33, v90);
            }
            else
            {
              LOWORD(v98) = 0;
              *(_QWORD *)&v109 = &v98;
              sub_20BF56DE0((unint64_t *)a4, (unint64_t)__p, (_WORD **)&v109);
              sub_20BF57030((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v36, v37);
              v38 = *(_QWORD *)(a4 + 32);
              v39 = *(_QWORD *)a4;
              v40 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
              v41 = 2 * v39;
              if (v24 + v41 > v40)
              {
                *(_QWORD *)&v109 = "usd/crateFile.cpp";
                *((_QWORD *)&v109 + 1) = "Read";
                *(_QWORD *)&v110 = 770;
                *((_QWORD *)&v110 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v111) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v41, v24, v40);
              }
              else
              {
                v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1)) - v24;
                if (v42 < v41 || ((v42 | v24) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v109 = "usd/crateFile.cpp";
                  *((_QWORD *)&v109 + 1) = "Read";
                  *(_QWORD *)&v110 = 779;
                  *((_QWORD *)&v110 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v111) = 0;
                  v91 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v95 + 1) + 16))(*((_QWORD *)&v95 + 1));
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v109, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v41, v42, v91);
                }
                else
                {
                  v43 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, ptrdiff_t))(**((_QWORD **)&v95 + 1)
                                                                                                + 32))(*((_QWORD *)&v95 + 1), v38, v41, v24);
                  if (v43 != -1 && (!v41 || v43))
                    v107 = v24 + v43;
                }
              }
            }
          }
        }
      }
    }
    if (v96)
    {
      v44 = &v96->__shared_owners_;
      do
        v45 = __ldaxr((unint64_t *)v44);
      while (__stlxr(v45 - 1, (unint64_t *)v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    goto LABEL_73;
  }
  v111 = 0;
  v109 = 0u;
  v110 = 0u;
  if (&v109 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v25 = v110;
    *(_OWORD *)a4 = v109;
    *(_OWORD *)(a4 + 16) = v25;
    v109 = 0u;
    v110 = 0u;
    *(_QWORD *)(a4 + 32) = v111;
    v111 = 0;
  }
  sub_20BF5618C((uint64_t)&v109);
}

void sub_20C2DEBC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v21;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v21);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2DEC78(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530330;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2DED24(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5303B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2DEDD0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530430;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2DEE7C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5304B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2DEF30(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2DEF6C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2DEF90(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2DEFEC(*(_QWORD *)(a1 + 16), *(_QWORD **)(a1 + 8), (float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2DEFA4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530390))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2DEFE0()
{
  return &unk_24C530390;
}

unint64_t sub_20C2DEFEC(uint64_t a1, _QWORD *a2, float *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;

  v4 = (uint64_t *)this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *v4;
    return sub_20C2DF090(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    return *(unsigned int *)v4 | 0x4008000000000000;
  }
}

unint64_t sub_20C2DF090(uint64_t a1, _QWORD *a2, float *a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  __int16 v17;
  int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  float *v24;
  float *v25;
  uint64_t v26;
  float *v27;
  float v28;
  BOOL v29;
  uint64_t v31;
  float *v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  void *v40;
  char *v41;
  int64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  float *v54;
  float *v55;
  float *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  float *v60;
  _DWORD *v61;
  uint64_t v62;
  float v63;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v64;
  uint64_t v65;
  size_t CompressedBufferSize;
  char *v67;
  char *v68;
  int64_t v69;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v70;
  int64_t v71;
  size_t v72;
  char *v73;
  char *v74;
  int64_t v75;
  int v76;
  unint64_t v77;
  _QWORD v78[2];
  void *__p[2];
  char *v80;
  void *v81;
  float *v82;
  float *v83;
  __int128 v84;
  __int128 v85;
  char __src[16];

  v78[0] = a2;
  v78[1] = a3;
  result = 0x8008000000000000;
  v77 = 0x8008000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B2C9C(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2DF74C(v9, (unint64_t *)a4, a4, &v77);
    if (v14)
    {
      v15 = a2[791];
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int8 *)(v15 + 250) << 16;
        v17 = *(_WORD *)(v15 + 248);
        *(_QWORD *)&v84 = a2;
        *((_QWORD *)&v84 + 1) = a3;
        v18 = v17 << 16;
        v19 = v17 & 0xFF00;
        v20 = v19 | HIWORD(v16) & 0xFF00FFFF | v18;
        if (v20 >= 0x600 && (v21 = *(_QWORD *)a4, *(_QWORD *)a4 > 0xFuLL))
        {
          v24 = *(float **)(a4 + 32);
          v25 = &v24[v21];
          v26 = 4 * v21;
          v27 = v24;
          while (1)
          {
            v28 = *v27;
            v29 = *v27 < -2147500000.0 || v28 > 2147500000.0;
            if (v29 || v28 != (float)(int)v28)
              break;
            ++v27;
            v26 -= 4;
            if (!v26)
            {
              v31 = *(_QWORD *)a3;
              if (v20 > 0x6FF)
              {
                v81 = *(void **)a4;
                sub_20C2B7248((uint64_t)&v84, (char *)&v81);
              }
              else
              {
                LODWORD(v81) = *(_QWORD *)a4;
                sub_20C2CE770((uint64_t)&v84, (char *)&v81);
              }
              sub_20BDE39A0(&v81, *(_QWORD *)a4);
              if (*(_QWORD *)a4)
              {
                v60 = *(float **)(a4 + 32);
                v61 = v81;
                v62 = 4 * *(_QWORD *)a4;
                do
                {
                  v63 = *v60++;
                  *v61++ = (int)v63;
                  v62 -= 4;
                }
                while (v62);
              }
              LOBYTE(__p[0]) = 105;
              sub_20C2DC688((uint64_t)&v84, (char *)__p);
              v64 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v81;
              v65 = ((char *)v82 - (_BYTE *)v81) >> 2;
              *(_OWORD *)__p = v84;
              CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v65);
              v67 = (char *)operator new[](CompressedBufferSize);
              v69 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v64, (const int *)v65, v67, v68);
              *(_QWORD *)&v85 = v69;
              sub_20C2B7248((uint64_t)__p, (char *)&v85);
              sub_20C2A7944((uint64_t)__p, v67, v69);
              v23 = v31 & 0xFFFFFFFFFFFFLL | 0xA008000000000000;
              operator delete[](v67);
              goto LABEL_87;
            }
          }
          v76 = v18;
          v32 = 0;
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v33 = v21 >> 2;
          if (v33 >= 0x400)
            v34 = 1024;
          else
            v34 = v33;
          __p[0] = 0;
          __p[1] = 0;
          v80 = 0;
          do
          {
            v35 = *v24;
            if (v81 != v32)
            {
              v36 = (float *)v81;
              while (*v36 != v35)
              {
                if (++v36 == v32)
                  goto LABEL_38;
              }
              v32 = v36;
            }
LABEL_38:
            v37 = (char *)v32 - (_BYTE *)v81;
            v38 = v37 >> 2;
            v39 = (char *)__p[1];
            if (__p[1] >= v80)
            {
              v41 = (char *)__p[0];
              v42 = ((char *)__p[1] - (char *)__p[0]) >> 2;
              v43 = v42 + 1;
              if ((unint64_t)(v42 + 1) >> 62)
                sub_20BDDF694();
              v44 = v80 - (char *)__p[0];
              if ((v80 - (char *)__p[0]) >> 1 > v43)
                v43 = v44 >> 1;
              if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
                v45 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v45 = v43;
              if (v45)
              {
                v46 = (char *)sub_20BDE1330((uint64_t)&v80, v45);
                v41 = (char *)__p[0];
                v39 = (char *)__p[1];
              }
              else
              {
                v46 = 0;
              }
              v47 = &v46[4 * v42];
              *(_DWORD *)v47 = v38;
              v40 = v47 + 4;
              while (v39 != v41)
              {
                v48 = *((_DWORD *)v39 - 1);
                v39 -= 4;
                *((_DWORD *)v47 - 1) = v48;
                v47 -= 4;
              }
              __p[0] = v47;
              __p[1] = v40;
              v80 = &v46[4 * v45];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_DWORD *)__p[1] = v38;
              v40 = v39 + 4;
            }
            __p[1] = v40;
            v49 = (v37 >> 2);
            v32 = v82;
            if (v49 == ((char *)v82 - (_BYTE *)v81) >> 2)
            {
              if (v49 == v34)
              {
                v82 = (float *)v81;
                __p[1] = __p[0];
                goto LABEL_74;
              }
              if (v82 >= v83)
              {
                v50 = ((char *)v83 - (_BYTE *)v81) >> 1;
                if (v50 <= v49 + 1)
                  v50 = v49 + 1;
                if ((unint64_t)((char *)v83 - (_BYTE *)v81) >= 0x7FFFFFFFFFFFFFFCLL)
                  v51 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v51 = v50;
                v53 = (char *)sub_20BDE1330((uint64_t)&v83, v51);
                v54 = (float *)v81;
                v55 = v82;
                v56 = (float *)&v53[4 * v49];
                *v56 = v35;
                v32 = v56 + 1;
                while (v55 != v54)
                {
                  v57 = *((_DWORD *)v55-- - 1);
                  *((_DWORD *)v56-- - 1) = v57;
                }
                v81 = v56;
                v82 = v32;
                v83 = (float *)&v53[4 * v52];
                if (v54)
                  operator delete(v54);
              }
              else
              {
                *v82 = v35;
                ++v32;
              }
              v82 = v32;
            }
            ++v24;
          }
          while (v24 != v25);
          if (v81 != v32)
          {
            v58 = **((_QWORD **)&v84 + 1);
            if (v20 > 0x6FF)
            {
              *(_QWORD *)&v85 = *(_QWORD *)a4;
              sub_20C2B7248((uint64_t)&v84, (char *)&v85);
            }
            else
            {
              LODWORD(v85) = *(_QWORD *)a4;
              sub_20C2CE770((uint64_t)&v84, (char *)&v85);
            }
            LOBYTE(v85) = 116;
            sub_20C2DC688((uint64_t)&v84, (char *)&v85);
            LODWORD(v85) = (unint64_t)((char *)v82 - (_BYTE *)v81) >> 2;
            sub_20C2CE770((uint64_t)&v84, (char *)&v85);
            sub_20C2C9460((uint64_t)&v84, (char *)v81, ((char *)v82 - (_BYTE *)v81) >> 2);
            v70 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p[0];
            v71 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            v85 = v84;
            v72 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v71);
            v73 = (char *)operator new[](v72);
            v75 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v70, (const unsigned int *)v71, v73, v74);
            *(_QWORD *)__src = v75;
            sub_20C2B7248((uint64_t)&v85, __src);
            sub_20C2A7944((uint64_t)&v85, v73, v75);
            v23 = v58 & 0xFFFFFFFFFFFFLL | 0xA008000000000000;
            operator delete[](v73);
            goto LABEL_85;
          }
LABEL_74:
          v85 = v84;
          v59 = sub_20C2CE3F0((uint64_t)&v85, 8);
          if ((v76 | v19) > 0x6FF)
          {
            *(_QWORD *)__src = *(_QWORD *)a4;
            sub_20C2B7248((uint64_t)&v85, __src);
          }
          else
          {
            *(_DWORD *)__src = *(_QWORD *)a4;
            sub_20C2CE770((uint64_t)&v85, __src);
          }
          sub_20C2C9460((uint64_t)&v85, *(char **)(a4 + 32), *(_QWORD *)a4);
          v23 = v59 & 0xFFFFFFFFFFFFLL | 0x8008000000000000;
LABEL_85:
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
LABEL_87:
          if (v81)
          {
            v82 = (float *)v81;
            operator delete(v81);
          }
        }
        else
        {
          v81 = a2;
          v82 = a3;
          v22 = sub_20C2CE3F0((uint64_t)&v81, 8);
          if ((v18 | v19) > 0x6FF)
          {
            __p[0] = *(void **)a4;
            sub_20C2B7248((uint64_t)&v81, (char *)__p);
          }
          else
          {
            LODWORD(__p[0]) = *(_QWORD *)a4;
            sub_20C2CE770((uint64_t)&v81, (char *)__p);
          }
          v23 = v22 & 0xFFFFFFFFFFFFLL | 0x8008000000000000;
          sub_20C2C9460((uint64_t)&v81, *(char **)(a4 + 32), *(_QWORD *)a4);
        }
        v13[7] = v23;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v78, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v81) = 1;
        sub_20C2CE770((uint64_t)v78, (char *)&v81);
        LODWORD(v81) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v78, (char *)&v81);
        sub_20C2C9460((uint64_t)v78, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_20C2DF6DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2DF74C(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  float *v10;
  unint64_t v11;
  float v12;
  float v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD **v18;
  _QWORD *i;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;

  v9 = *a2;
  if (*a2)
  {
    v10 = (float *)a2[4];
    v11 = *a2;
    do
    {
      v12 = *v10++;
      v13 = v12;
      if (v12 == 0.0)
        v13 = 0.0;
      v9 = LODWORD(v13) + ((v9 + LODWORD(v13) + (v9 + LODWORD(v13)) * (v9 + LODWORD(v13))) >> 1);
      --v11;
    }
    while (v11);
    v9 *= 0x9E3779B97F4A7C55;
  }
  v14 = bswap64(v9);
  v15 = *(_QWORD *)(a1 + 8);
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    v17 = v16.u32[0];
    if (v16.u32[0] > 1uLL)
    {
      v4 = v14;
      if (v14 >= v15)
        v4 = v14 % v15;
    }
    else
    {
      v4 = (v15 - 1) & v14;
    }
    v18 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
      for (i = *v18; i; i = (_QWORD *)*i)
      {
        v20 = i[1];
        if (v20 == v14)
        {
          if (sub_20BF5690C(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v17 > 1)
          {
            if (v20 >= v15)
              v20 %= v15;
          }
          else
          {
            v20 &= v15 - 1;
          }
          if (v20 != v4)
            break;
        }
      }
    }
  }
  v21 = (_QWORD *)(a1 + 16);
  v22 = operator new(0x40uLL);
  i = v22;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = v14;
  v23 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v22 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v22 + 2) = v23;
  v24 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v22 + 6) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 - 16);
    if (*((_QWORD *)v22 + 5))
      v25 = (unint64_t *)*((_QWORD *)v22 + 5);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *((_QWORD *)v22 + 7) = *a4;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v15 || (float)(v28 * (float)v15) < v27)
  {
    v29 = 1;
    if (v15 >= 3)
      v29 = (v15 & (v15 - 1)) != 0;
    v30 = v29 | (2 * v15);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      v32 = v31;
    else
      v32 = v30;
    sub_20BDEC6E0(a1, v32);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v4 = v14 % v15;
      else
        v4 = v14;
    }
    else
    {
      v4 = (v15 - 1) & v14;
    }
  }
  v33 = *(_QWORD *)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v34)
  {
    *i = *v34;
LABEL_48:
    *v34 = i;
    goto LABEL_49;
  }
  *i = *v21;
  *v21 = i;
  *(_QWORD *)(v33 + 8 * v4) = v21;
  if (*i)
  {
    v35 = *(_QWORD *)(*i + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v35 >= v15)
        v35 %= v15;
    }
    else
    {
      v35 &= v15 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2DFA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2DFA24(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2DFA24(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

__n128 sub_20C2DFA70(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5303B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2DFAAC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5303B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2DFAD0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2DFB60(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2DFB18(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530410))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2DFB54()
{
  return &unk_24C530410;
}

void sub_20C2DFB60(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2DFBF4(a1, v6, a3, (uint64_t)v8);
    sub_20BF5653C(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_20C1D0C6C(a4, (float *)v8);
  }
}

void sub_20C2DFBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2DFBF4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  ssize_t v14;
  unint64_t p;
  __int128 v16;
  ssize_t v17;
  ssize_t v18;
  unint64_t lbfsize;
  ssize_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  __sFILE *v24;
  char *v25;
  off_t v26;
  FILE *v27;
  ssize_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  ssize_t v32;
  ssize_t v33;
  uint64_t v34;
  char *v35;
  float *v36;
  unsigned __int8 *v37;
  int *cookie;
  int *v39;
  int v40;
  ssize_t v41;
  unint64_t v42;
  ssize_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int base;
  unsigned __int8 *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  pxrInternal__aapl__pxrReserved__ *v55;
  char *v56;
  char *v57;
  __sFILE __p;

  if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    memset(&__p._lbfsize, 0, 40);
    if (&__p._lbfsize != (int *)a4)
    {
      sub_20BF5618C(a4);
      v16 = *(_OWORD *)&__p._close;
      *(_OWORD *)a4 = *(_OWORD *)&__p._lbfsize;
      *(_OWORD *)(a4 + 16) = v16;
      memset(&__p._lbfsize, 0, 32);
      *(_QWORD *)(a4 + 32) = __p._seek;
      __p._seek = 0;
    }
    sub_20BF5618C((uint64_t)&__p._lbfsize);
    return;
  }
  a2[2] = a3 & 0xFFFFFFFFFFFFLL;
  v7 = *(unsigned __int8 *)(*a2 + 6369);
  v8 = *(unsigned __int8 *)(*a2 + 6370);
  v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
  v10 = v9 | (v7 << 8);
  if (v10 > 0x4FF || (__p._lbfsize = 0, sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&__p._lbfsize)))
  {
    v11 = *((_OWORD *)a2 + 1);
    v53 = *(_OWORD *)a2;
    v54 = v11;
    v55 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
    v12 = v9 | v8 | (v7 << 8);
    if (v12 < 0x600 || (a3 & 0x2000000000000000) == 0)
    {
      __p._p = 0;
      if (v10 > 0x6FF)
      {
        v14 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, &__p, (char *)8, v54 + *((_QWORD *)&v53 + 1));
        if (v14 == -1)
          return;
        p = (unint64_t)__p._p;
      }
      else
      {
        __p._lbfsize = 0;
        v14 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&__p._lbfsize, (char *)4, v54 + *((_QWORD *)&v53 + 1));
        if (v14 == -1)
          return;
        p = __p._lbfsize;
        __p._p = (unsigned __int8 *)__p._lbfsize;
      }
      v20 = v14 + v54;
      v21 = *((_QWORD *)&v54 + 1) - (v14 + v54);
      if (v14 + (_QWORD)v54 < 0 || (v21 & 0x8000000000000000) != 0 || p > v21 || 4 * p > v21)
      {
        *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
        __p._cookie = "_ReadUncompressedArray";
        __p._close = (int (__cdecl *)(void *))2053;
        __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_I"
                                                          "sBitwiseReadWrite<T>::value>::type pxrInternal__aapl__pxrReser"
                                                          "ved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep,"
                                                          " VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl"
                                                          "__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal"
                                                          "__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>, T = float]";
        LOBYTE(__p._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      LODWORD(v56) = 0;
      *(_QWORD *)&__p._lbfsize = &v56;
      sub_20BF56258((unint64_t *)a4, p, (_DWORD **)&__p._lbfsize);
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v22, v23);
      v24 = *(__sFILE **)(a4 + 32);
      v25 = (char *)(4 * *(_QWORD *)a4);
      v26 = v20 + *((_QWORD *)&v53 + 1);
      v27 = (FILE *)v55;
      goto LABEL_33;
    }
    *(_QWORD *)&__p._bf._size = 0;
    if (v12 > 0x6FF)
    {
      v28 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&__p._bf._size, (char *)8, v54 + *((_QWORD *)&v53 + 1));
      if (v28 == -1)
        return;
      v18 = v54 + v28;
      *(_QWORD *)&v54 = v54 + v28;
      lbfsize = *(_QWORD *)&__p._bf._size;
    }
    else
    {
      __p._lbfsize = 0;
      v17 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&__p._lbfsize, (char *)4, v54 + *((_QWORD *)&v53 + 1));
      if (v17 == -1)
        return;
      v18 = v54 + v17;
      *(_QWORD *)&v54 = v54 + v17;
      lbfsize = __p._lbfsize;
      *(_QWORD *)&__p._bf._size = __p._lbfsize;
    }
    if (lbfsize <= 0xF)
    {
      v29 = *((_QWORD *)&v54 + 1) - v18;
      if (v18 < 0 || (v29 & 0x8000000000000000) != 0 || lbfsize > v29 || 4 * lbfsize > v29)
      {
        *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
        __p._cookie = "_ReadPossiblyCompressedArray";
        __p._close = (int (__cdecl *)(void *))2287;
        __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || std:"
                                                          ":is_same<T, float>::value || std::is_same<T, double>::value>::"
                                                          "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPos"
                                                          "siblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile"
                                                          "::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Us"
                                                          "d_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved"
                                                          "__::Usd_CrateFile::_PreadStream>, T = float]";
        LOBYTE(__p._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      LODWORD(__p._p) = 0;
      *(_QWORD *)&__p._lbfsize = &__p;
      sub_20BF56258((unint64_t *)a4, lbfsize, (_DWORD **)&__p._lbfsize);
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
      v24 = *(__sFILE **)(a4 + 32);
      v25 = (char *)(4 * *(_QWORD *)&__p._bf._size);
      v27 = (FILE *)v55;
      v26 = v54 + *((_QWORD *)&v53 + 1);
LABEL_33:
      pxrInternal__aapl__pxrReserved__::ArchPRead(v27, v24, v25, v26);
      return;
    }
    HIBYTE(__p._bf._base) = 0;
    v32 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)((char *)&__p._bf._base + 7), (char *)1, v18 + *((_QWORD *)&v53 + 1));
    if (v32 != -1)
    {
      v33 = v54 + v32;
      *(_QWORD *)&v54 = v54 + v32;
      if (HIBYTE(__p._bf._base) != 116)
      {
        if (HIBYTE(__p._bf._base) != 105)
        {
          *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
          __p._cookie = "_ReadPossiblyCompressedArray";
          __p._close = (int (__cdecl *)(void *))2351;
          __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || st"
                                                            "d::is_same<T, float>::value || std::is_same<T, double>::valu"
                                                            "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                                                            "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, C"
                                                            "rateFile::Version, int) [Reader = pxrInternal__aapl__pxrRese"
                                                            "rved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                                                            "_pxrReserved__::Usd_CrateFile::_PreadStream>, T = float]";
          LOBYTE(__p._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>");
          return;
        }
        if ((sub_20C2D2524(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&__p._bf._size) & 1) == 0)
        {
          *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
          __p._cookie = "_ReadPossiblyCompressedArray";
          __p._close = (int (__cdecl *)(void *))2307;
          __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || st"
                                                            "d::is_same<T, float>::value || std::is_same<T, double>::valu"
                                                            "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                                                            "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, C"
                                                            "rateFile::Version, int) [Reader = pxrInternal__aapl__pxrRese"
                                                            "rved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                                                            "_pxrReserved__::Usd_CrateFile::_PreadStream>, T = float]";
          LOBYTE(__p._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints");
          return;
        }
        sub_20BDE39A0(&__p._lbfsize, *(unint64_t *)&__p._bf._size);
        LODWORD(v56) = 0;
        __p._p = (unsigned __int8 *)&v56;
        sub_20BF56258((unint64_t *)a4, *(unint64_t *)&__p._bf._size, &__p);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v34, v35);
        v36 = *(float **)(a4 + 32);
        sub_20C2D2558((uint64_t)&v53, *(unint64_t *)&__p._lbfsize, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(((uint64_t)__p._cookie - *(_QWORD *)&__p._lbfsize) >> 2));
        v37 = *(unsigned __int8 **)&__p._lbfsize;
        cookie = (int *)__p._cookie;
        if (*(void **)&__p._lbfsize != __p._cookie)
        {
          v39 = *(int **)&__p._lbfsize;
          do
          {
            v40 = *v39++;
            *v36++ = (float)v40;
          }
          while (v39 != cookie);
        }
        if (v37)
        {
          __p._cookie = v37;
LABEL_63:
          operator delete(v37);
          return;
        }
        return;
      }
      LODWORD(__p._bf._base) = 0;
      v41 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&__p._bf, (char *)4, v33 + *((_QWORD *)&v53 + 1));
      if (v41 == -1)
        return;
      *(_QWORD *)&v54 = v54 + v41;
      v42 = *((_QWORD *)&v54 + 1) - v54;
      if ((v54 & 0x8000000000000000) != 0
        || (v42 & 0x8000000000000000) != 0
        || (uint64_t)v42 < LODWORD(__p._bf._base)
        || 4 * (unint64_t)LODWORD(__p._bf._base) > v42)
      {
        *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
        __p._cookie = "_ReadPossiblyCompressedArray";
        __p._close = (int (__cdecl *)(void *))2325;
        __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || std:"
                                                          ":is_same<T, float>::value || std::is_same<T, double>::value>::"
                                                          "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPos"
                                                          "siblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile"
                                                          "::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Us"
                                                          "d_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved"
                                                          "__::Usd_CrateFile::_PreadStream>, T = float]";
        LOBYTE(__p._seek) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      sub_20BDE4630(&__p, LODWORD(__p._bf._base));
      v43 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)__p._p, (char *)(*(_QWORD *)&__p._r - (unint64_t)__p._p), v54 + *((_QWORD *)&v53 + 1));
      if (v43 != -1)
        *(_QWORD *)&v54 = v54 + v43;
      if ((sub_20C2D2524(*(pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression **)&__p._bf._size) & 1) != 0)
      {
        sub_20BDE36C4(&v56, *(unint64_t *)&__p._bf._size);
        sub_20C2C1E3C((uint64_t)&v53, (unint64_t)v56, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((v57 - v56) >> 2));
        HIDWORD(__p._write) = 0;
        *(_QWORD *)&__p._lbfsize = (char *)&__p._write + 4;
        sub_20BF56258((unint64_t *)a4, *(unint64_t *)&__p._bf._size, (_DWORD **)&__p._lbfsize);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v44, v45);
        v46 = v56;
        v47 = v57;
        if (v56 == v57)
        {
LABEL_56:
          if (!v46)
            goto LABEL_61;
        }
        else
        {
          v48 = 0;
          v49 = *(_QWORD *)(a4 + 32);
          base = __p._bf._base;
          v51 = __p._p;
          while (1)
          {
            v52 = *(unsigned int *)&v46[v48];
            if (v52 >= base)
              break;
            *(_DWORD *)(v49 + v48) = *(_DWORD *)&v51[4 * v52];
            v48 += 4;
            if (&v46[v48] == v47)
              goto LABEL_56;
          }
          *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
          __p._cookie = "_ReadPossiblyCompressedArray";
          __p._close = (int (__cdecl *)(void *))2343;
          __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || st"
                                                            "d::is_same<T, float>::value || std::is_same<T, double>::valu"
                                                            "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                                                            "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, C"
                                                            "rateFile::Version, int) [Reader = pxrInternal__aapl__pxrRese"
                                                            "rved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                                                            "_pxrReserved__::Usd_CrateFile::_PreadStream>, T = float]";
          LOBYTE(__p._seek) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v52);
          v46 = v56;
          if (!v56)
          {
LABEL_61:
            v37 = __p._p;
            if (__p._p)
            {
              *(_QWORD *)&__p._r = __p._p;
              goto LABEL_63;
            }
            return;
          }
        }
        v57 = v46;
        operator delete(v46);
        goto LABEL_61;
      }
      *(_QWORD *)&__p._lbfsize = "usd/crateFile.cpp";
      __p._cookie = "_ReadPossiblyCompressedArray";
      __p._close = (int (__cdecl *)(void *))2333;
      __p._read = (int (__cdecl *)(void *, char *, int))"typename std::enable_if<std::is_same<T, GfHalf>::value || std::i"
                                                        "s_same<T, float>::value || std::is_same<T, double>::value>::type"
                                                        " pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyC"
                                                        "ompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versio"
                                                        "n, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFil"
                                                        "e::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Crat"
                                                        "eFile::_PreadStream>, T = float]";
      LOBYTE(__p._seek) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p._lbfsize, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", *(_QWORD *)&__p._bf._size);
      goto LABEL_61;
    }
  }
}

void sub_20C2E027C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C2E02F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E0334(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2E0358(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2E03A8((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2E0360(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530490))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E039C()
{
  return &unk_24C530490;
}

void sub_20C2E03A8(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2E0424(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2E0424(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2E04B8(a1, v6, a3, (uint64_t)v8);
    sub_20BF5653C(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_20C1D0C6C(a4, (float *)v8);
  }
}

void sub_20C2E04A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2E04B8(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  __int128 v14;
  unsigned __int8 v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  char *v23;
  void *v24;
  size_t v25;
  void **v26;
  unint64_t v27;
  void *v28;
  unint64_t *v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  float *v38;
  void *v39;
  int *v40;
  int *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  _DWORD *v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unsigned int v60;
  char v61;
  unint64_t v62;
  void *__p[2];
  __int128 v64;
  uint64_t v65;
  __int128 __dst;
  __int128 v67;
  void *v68;
  int v69;

  if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    v68 = 0;
    __dst = 0u;
    v67 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v17 = v67;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v17;
      __dst = 0u;
      v67 = 0u;
      *(_QWORD *)(a4 + 32) = v68;
      v68 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
    return;
  }
  *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
  v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6369);
  v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6370);
  v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16;
  v10 = v9 | (v7 << 8);
  if (v10 <= 0x4FF)
  {
    LODWORD(__dst) = 0;
    if (!sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL))
      return;
  }
  v11 = a2[1];
  v55 = *a2;
  v56 = v11;
  v57 = *((_QWORD *)a2 + 4);
  v12 = v9 | v8 | (v7 << 8);
  if (v12 < 0x600 || (a3 & 0x2000000000000000) == 0)
  {
    v14 = a2[1];
    *(_OWORD *)__p = *a2;
    v64 = v14;
    v65 = *((_QWORD *)a2 + 4);
    v15 = atomic_load((unsigned __int8 *)&qword_254988480);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254988480))
    {
      v54 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
      if (!v54)
      {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        v54 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
      }
      byte_254988478 = *v54;
      __cxa_guard_release(&qword_254988480);
    }
    v58 = 0;
    if (v10 > 0x6FF)
    {
      if (!sub_20C2B9BEC((uint64_t)&__p[1], &v58, 8uLL))
        return;
      v16 = (unint64_t)v58;
    }
    else
    {
      LODWORD(__dst) = 0;
      if ((sub_20C2B9BEC((uint64_t)&__p[1], &__dst, 4uLL) & 1) == 0)
        return;
      v16 = __dst;
      v58 = (char *)__dst;
    }
    v27 = 4 * v16;
    v28 = __p[1];
    if (!byte_254988478 || v27 < 0x800 || ((uint64_t)__p[1] & 3) != 0)
    {
      v31 = (unint64_t)__p[1] - *(_QWORD *)(*(_QWORD *)v64 + 24);
      v32 = *(_QWORD *)(*(_QWORD *)v64 + 32) - v31;
      if ((v31 & 0x8000000000000000) == 0 && (v32 & 0x8000000000000000) == 0 && v16 <= v32 && v27 <= v32)
      {
        LODWORD(v62) = 0;
        *(_QWORD *)&__dst = &v62;
        sub_20BF56258((unint64_t *)a4, v16, (_DWORD **)&__dst);
        sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v34, v35);
        v24 = *(void **)(a4 + 32);
        v25 = 4 * *(_QWORD *)a4;
        v26 = &__p[1];
        goto LABEL_45;
      }
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v67 = 2117;
      *((_QWORD *)&v67 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::"
                              "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Value"
                              "Rep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_Cra"
                              "teFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<px"
                              "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = float]";
      LOBYTE(v68) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
    }
    else
    {
      v29 = sub_20C2CF260((uint64_t)&__p[1], (char *)__p[1], 4 * v16, v16);
      if (v29)
      {
        *(_QWORD *)&v67 = 0;
        *((_QWORD *)&v67 + 1) = v29;
        v68 = v28;
        __dst = (unint64_t)v58;
        if (&__dst != (__int128 *)a4)
        {
          sub_20BF5618C(a4);
          v30 = v67;
          *(_OWORD *)a4 = __dst;
          *(_OWORD *)(a4 + 16) = v30;
          __dst = 0u;
          v67 = 0u;
          *(_QWORD *)(a4 + 32) = v68;
          v68 = 0;
        }
        sub_20BF5618C((uint64_t)&__dst);
      }
      else
      {
        *(_QWORD *)&__dst = "usd/crateFile.cpp";
        *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
        *(_QWORD *)&v67 = 2109;
        *((_QWORD *)&v67 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>"
                                "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, V"
                                "alueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::U"
                                "sd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapS"
                                "tream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = float]";
        LOBYTE(v68) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v27);
        sub_20BF56210((_QWORD *)a4);
      }
    }
    return;
  }
  v62 = 0;
  if (v12 > 0x6FF)
  {
    if (!sub_20C2B9BEC((uint64_t)&v55 + 8, &v62, 8uLL))
      return;
    v18 = v62;
  }
  else
  {
    LODWORD(__dst) = 0;
    if (!sub_20C2B9BEC((uint64_t)&v55 + 8, &__dst, 4uLL))
      return;
    v18 = __dst;
    v62 = __dst;
  }
  if (v18 <= 0xF)
  {
    v19 = *((_QWORD *)&v55 + 1) - *(_QWORD *)(*(_QWORD *)v56 + 24);
    v20 = *(_QWORD *)(*(_QWORD *)v56 + 32) - v19;
    if ((v19 & 0x8000000000000000) == 0 && (v20 & 0x8000000000000000) == 0 && v18 <= v20 && 4 * v18 <= v20)
    {
      LODWORD(__p[0]) = 0;
      *(_QWORD *)&__dst = __p;
      sub_20BF56258((unint64_t *)a4, v18, (_DWORD **)&__dst);
      sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v22, v23);
      v24 = *(void **)(a4 + 32);
      v25 = 4 * v62;
      v26 = (void **)&v55 + 1;
LABEL_45:
      sub_20C2B9BEC((uint64_t)v26, v24, v25);
      return;
    }
    *(_QWORD *)&__dst = "usd/crateFile.cpp";
    *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(_QWORD *)&v67 = 2287;
    *((_QWORD *)&v67 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = float]";
    LOBYTE(v68) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
    return;
  }
  v61 = 0;
  if (!sub_20C2B9BEC((uint64_t)&v55 + 8, &v61, 1uLL))
    return;
  if (v61 == 116)
  {
    v60 = 0;
    if (!sub_20C2B9BEC((uint64_t)&v55 + 8, &v60, 4uLL))
      return;
    v43 = *((_QWORD *)&v55 + 1) - *(_QWORD *)(*(_QWORD *)v56 + 24);
    v44 = *(_QWORD *)(*(_QWORD *)v56 + 32) - v43;
    if (v43 < 0 || (v44 & 0x8000000000000000) != 0 || (uint64_t)v44 < v60 || 4 * (unint64_t)v60 > v44)
    {
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(_QWORD *)&v67 = 2325;
      *((_QWORD *)&v67 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = float]";
      LOBYTE(v68) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld");
      return;
    }
    sub_20BDE4630(__p, v60);
    sub_20C2B9BEC((uint64_t)&v55 + 8, __p[0], (char *)__p[1] - (char *)__p[0]);
    if ((sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v62) & 1) == 0)
    {
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(_QWORD *)&v67 = 2333;
      *((_QWORD *)&v67 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = float]";
      LOBYTE(v68) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v62);
      goto LABEL_71;
    }
    sub_20BDE36C4(&v58, v62);
    sub_20C2BA590((uint64_t)&v55, (unint64_t)v58, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((v59 - v58) >> 2));
    v69 = 0;
    *(_QWORD *)&__dst = &v69;
    sub_20BF56258((unint64_t *)a4, v62, (_DWORD **)&__dst);
    sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v45, v46);
    v47 = v58;
    v48 = v59;
    if (v58 == v59)
    {
LABEL_66:
      if (!v47)
      {
LABEL_71:
        v39 = __p[0];
        if (!__p[0])
          return;
        __p[1] = __p[0];
        goto LABEL_73;
      }
    }
    else
    {
      v49 = 0;
      v50 = *(_QWORD *)(a4 + 32);
      v51 = v60;
      v52 = __p[0];
      while (1)
      {
        v53 = *(unsigned int *)&v47[v49];
        if (v53 >= v51)
          break;
        *(_DWORD *)(v50 + v49) = v52[v53];
        v49 += 4;
        if (&v47[v49] == v48)
          goto LABEL_66;
      }
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(_QWORD *)&v67 = 2343;
      *((_QWORD *)&v67 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = float]";
      LOBYTE(v68) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v53);
      v47 = v58;
      if (!v58)
        goto LABEL_71;
    }
    v59 = v47;
    operator delete(v47);
    goto LABEL_71;
  }
  if (v61 != 105)
  {
    *(_QWORD *)&__dst = "usd/crateFile.cpp";
    *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(_QWORD *)&v67 = 2351;
    *((_QWORD *)&v67 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = float]";
    LOBYTE(v68) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>");
    return;
  }
  if ((sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v62) & 1) == 0)
  {
    *(_QWORD *)&__dst = "usd/crateFile.cpp";
    *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(_QWORD *)&v67 = 2307;
    *((_QWORD *)&v67 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = float]";
    LOBYTE(v68) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints");
    return;
  }
  sub_20BDE39A0(&__dst, v62);
  LODWORD(v58) = 0;
  __p[0] = &v58;
  sub_20BF56258((unint64_t *)a4, v62, (_DWORD **)__p);
  sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v36, v37);
  v38 = *(float **)(a4 + 32);
  sub_20C2D2CDC((uint64_t)&v55, __dst, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 2));
  v40 = (int *)*((_QWORD *)&__dst + 1);
  v39 = (void *)__dst;
  if ((_QWORD)__dst != *((_QWORD *)&__dst + 1))
  {
    v41 = (int *)__dst;
    do
    {
      v42 = *v41++;
      *v38++ = (float)v42;
    }
    while (v41 != v40);
  }
  if (v39)
  {
    *((_QWORD *)&__dst + 1) = v39;
LABEL_73:
    operator delete(v39);
  }
}

void sub_20C2E0C3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  __cxa_guard_abort(&qword_254988480);
  _Unwind_Resume(a1);
}

__n128 sub_20C2E0CE4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5304B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E0D20(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5304B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2E0D44(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2E0D9C((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2E0D54(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530510))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E0D90()
{
  return &unk_24C530510;
}

void sub_20C2E0D9C(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = 0;
  }
  v19 = 0;
  v10.n128_f32[0] = sub_20C2E0EB8(v3, &v17, a2, a3);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v16)
  {
    v14 = (unint64_t *)&v16->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v10);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20C2E0E9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

float sub_20C2E0EB8(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  float result;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  __n128 v19[2];
  uint64_t v20;

  if (a3 < 0)
  {
    v20 = 0;
    memset(v19, 0, sizeof(v19));
    v16 = *a2;
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v17 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v18 = *((_QWORD *)a2 + 3);
    sub_20C2E100C(a1, &v16, a3, (uint64_t)v19);
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    sub_20BF5653C(a4, v19);
    sub_20BF5618C((uint64_t)v19);
  }
  else
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v19[0].n128_u32[0] = a3;
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 - 1, v6));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v19[0].n128_u32[0] = a3;
    }
    return sub_20C1D0C6C(a4, (float *)v19);
  }
  return result;
}

void sub_20C2E0FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2E100C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  ptrdiff_t v16;
  unsigned int v17;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  ptrdiff_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  ptrdiff_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t *v59;
  unint64_t v60;
  ptrdiff_t v61;
  uint64_t *v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  char *v66;
  float *v67;
  void *v68;
  int *v69;
  int *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  _DWORD *v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  ptrdiff_t v100;
  char *v101;
  char *v102;
  void *__p;
  _BYTE *v104;
  unsigned int v105;
  char v106;
  unint64_t v107;
  __int128 v108;
  std::__shared_weak_count *v109;
  ptrdiff_t v110;
  int v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v7 = *a2;
    v8 = *(unsigned __int8 *)(*a2 + 6369);
    v9 = *(unsigned __int8 *)(*a2 + 6370);
    v10 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v112) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v112, 4uLL))
        return;
      v7 = *a2;
    }
    v13 = a2[1];
    v12 = (std::__shared_weak_count *)a2[2];
    *(_QWORD *)&v98 = v7;
    *((_QWORD *)&v98 + 1) = v13;
    v99 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = a2[3];
    v100 = v16;
    v17 = v10 | v9 | (v8 << 8);
    if (v17 >= 0x600 && (a3 & 0x2000000000000000) != 0)
    {
      v107 = 0;
      if (v17 > 0x6FF)
      {
        v46 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
        if (v100 < 0 || v100 + 8 > v46)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 770;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v100, v46);
          goto LABEL_73;
        }
        v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v100;
        if (v47 < 8 || ((v47 | v100) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 779;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          v92 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v47, v92);
          goto LABEL_73;
        }
        v48 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t))(**((_QWORD **)&v98 + 1) + 32))(*((_QWORD *)&v98 + 1), &v107, 8);
        if ((unint64_t)(v48 + 1) < 2)
          goto LABEL_73;
        v100 += v48;
        v29 = v107;
      }
      else
      {
        LODWORD(v108) = 0;
        v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
        if (v100 < 0 || v100 + 4 > v26)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 770;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v100, v26);
          goto LABEL_73;
        }
        v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v100;
        if (v27 < 4 || ((v27 | v100) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 779;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          v90 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v27, v90);
          goto LABEL_73;
        }
        v28 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t))(**((_QWORD **)&v98 + 1) + 32))(*((_QWORD *)&v98 + 1), &v108, 4);
        if ((unint64_t)(v28 + 1) < 2)
          goto LABEL_73;
        v100 += v28;
        v29 = v108;
        v107 = v108;
      }
      if (v29 <= 0xF)
      {
        v49 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v100;
        v50 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v107;
        v51 = 4 * v107;
        if (v100 < 0 || (v49 & 0x8000000000000000) != 0 || v107 > v49 || v51 > v49)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "_ReadPossiblyCompressedArray";
          *(_QWORD *)&v113 = 2287;
          *((_QWORD *)&v113 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::val"
                                   "ue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_Cra"
                                   "teFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versi"
                                   "on, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reade"
                                   "r<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = float]";
          LOBYTE(v114) = 0;
          v95 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v50, v51, v49, v95);
        }
        else
        {
          LODWORD(v108) = 0;
          *(_QWORD *)&v112 = &v108;
          sub_20BF56258((unint64_t *)a4, v107, (_DWORD **)&v112);
          sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v52, v53);
          sub_20C2B72E8((_QWORD *)&v98 + 1, *(_QWORD *)(a4 + 32), 4 * v107);
        }
        goto LABEL_73;
      }
      v106 = 0;
      v54 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
      if (v100 < 0 || v100 + 1 > v54)
      {
        *(_QWORD *)&v112 = "usd/crateFile.cpp";
        *((_QWORD *)&v112 + 1) = "Read";
        *(_QWORD *)&v113 = 770;
        *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v114) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 1uLL, v100, v54);
      }
      else
      {
        v55 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
        v56 = v55 - v100;
        if (v55 == v100 || (v56 | v100) < 0)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 779;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          v96 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 1uLL, v56, v96);
        }
        else
        {
          v57 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(**((_QWORD **)&v98 + 1) + 32))(*((_QWORD *)&v98 + 1), &v106, 1);
          if ((unint64_t)(v57 + 1) < 2)
            goto LABEL_73;
          v61 = v100 + v57;
          v100 += v57;
          if (v106 != 116)
          {
            if (v106 != 105)
            {
              *(_QWORD *)&v112 = "usd/crateFile.cpp";
              *((_QWORD *)&v112 + 1) = "_ReadPossiblyCompressedArray";
              *(_QWORD *)&v113 = 2351;
              *((_QWORD *)&v113 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>:"
                                       ":value || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__:"
                                       ":Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crat"
                                       "eFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                                       "rateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = float]";
              LOBYTE(v114) = 0;
              v88 = (const char *)(v98 + 6512);
              if (*(char *)(v98 + 6535) < 0)
                v88 = *(const char **)v88;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>", v88);
              goto LABEL_73;
            }
            v108 = v98;
            v109 = v99;
            if (v99)
            {
              v62 = &v99->__shared_owners_;
              do
                v63 = __ldxr((unint64_t *)v62);
              while (__stxr(v63 + 1, (unint64_t *)v62));
              v61 = v100;
            }
            v110 = v61;
            v64 = sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v107);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v108 + 8));
            if ((v64 & 1) == 0)
            {
              *(_QWORD *)&v112 = "usd/crateFile.cpp";
              *((_QWORD *)&v112 + 1) = "_ReadPossiblyCompressedArray";
              *(_QWORD *)&v113 = 2307;
              *((_QWORD *)&v113 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>:"
                                       ":value || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__:"
                                       ":Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crat"
                                       "eFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                                       "rateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = float]";
              LOBYTE(v114) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints", v107);
              goto LABEL_73;
            }
            sub_20BDE39A0(&v112, v107);
            LODWORD(v101) = 0;
            __p = &v101;
            sub_20BF56258((unint64_t *)a4, v107, (_DWORD **)&__p);
            sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v65, v66);
            v67 = *(float **)(a4 + 32);
            sub_20C2D3B44((uint64_t)&v98, v112, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*((_QWORD *)&v112 + 1) - v112) >> 2));
            v69 = (int *)*((_QWORD *)&v112 + 1);
            v68 = (void *)v112;
            if ((_QWORD)v112 != *((_QWORD *)&v112 + 1))
            {
              v70 = (int *)v112;
              do
              {
                v71 = *v70++;
                *v67++ = (float)v71;
              }
              while (v70 != v69);
            }
            if (!v68)
              goto LABEL_73;
            *((_QWORD *)&v112 + 1) = v68;
LABEL_113:
            operator delete(v68);
            goto LABEL_73;
          }
          v105 = 0;
          if (!sub_20C2B72E8((_QWORD *)&v98 + 1, (uint64_t)&v105, 4uLL))
            goto LABEL_73;
          v72 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          v73 = v72 - v100;
          v74 = v105;
          v75 = 4 * v105;
          if ((v100 & 0x8000000000000000) == 0 && (v73 & 0x8000000000000000) == 0 && v73 >= v105 && v75 <= v73)
          {
            sub_20BDE4630(&__p, v105);
            sub_20C2B72E8((_QWORD *)&v98 + 1, (uint64_t)__p, v104 - (_BYTE *)__p);
            v108 = v98;
            v109 = v99;
            if (v99)
            {
              v76 = &v99->__shared_owners_;
              do
                v77 = __ldxr((unint64_t *)v76);
              while (__stxr(v77 + 1, (unint64_t *)v76));
            }
            v110 = v100;
            v78 = sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v107);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v108 + 8));
            if ((v78 & 1) == 0)
            {
              *(_QWORD *)&v112 = "usd/crateFile.cpp";
              *((_QWORD *)&v112 + 1) = "_ReadPossiblyCompressedArray";
              *(_QWORD *)&v113 = 2333;
              *((_QWORD *)&v113 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>:"
                                       ":value || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__:"
                                       ":Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crat"
                                       "eFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                                       "rateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = float]";
              LOBYTE(v114) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v107);
              goto LABEL_111;
            }
            sub_20BDE36C4(&v101, v107);
            sub_20C2C5CD0((uint64_t)&v98, (unint64_t)v101, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((v102 - v101) >> 2));
            v111 = 0;
            *(_QWORD *)&v112 = &v111;
            sub_20BF56258((unint64_t *)a4, v107, (_DWORD **)&v112);
            sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v79, v80);
            v81 = v101;
            v82 = v102;
            if (v101 == v102)
            {
LABEL_104:
              if (!v81)
              {
LABEL_111:
                v68 = __p;
                if (!__p)
                  goto LABEL_73;
                v104 = __p;
                goto LABEL_113;
              }
            }
            else
            {
              v83 = 0;
              v84 = *(_QWORD *)(a4 + 32);
              v85 = v105;
              v86 = __p;
              while (1)
              {
                v87 = *(unsigned int *)&v81[v83];
                if (v87 >= v85)
                  break;
                *(_DWORD *)(v84 + v83) = v86[v87];
                v83 += 4;
                if (&v81[v83] == v82)
                  goto LABEL_104;
              }
              *(_QWORD *)&v112 = "usd/crateFile.cpp";
              *((_QWORD *)&v112 + 1) = "_ReadPossiblyCompressedArray";
              *(_QWORD *)&v113 = 2343;
              *((_QWORD *)&v113 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>:"
                                       ":value || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__:"
                                       ":Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crat"
                                       "eFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                                       "rateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = float]";
              LOBYTE(v114) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v87);
              v81 = v101;
              if (!v101)
                goto LABEL_111;
            }
            v102 = v81;
            operator delete(v81);
            goto LABEL_111;
          }
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "_ReadPossiblyCompressedArray";
          *(_QWORD *)&v113 = 2325;
          *((_QWORD *)&v113 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::val"
                                   "ue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_Cra"
                                   "teFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versi"
                                   "on, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reade"
                                   "r<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = float]";
          LOBYTE(v114) = 0;
          v97 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld", v74, v75, v73, v97);
        }
      }
LABEL_73:
      v58 = v99;
      if (v99)
      {
        v59 = &v99->__shared_owners_;
        do
          v60 = __ldaxr((unint64_t *)v59);
        while (__stlxr(v60 - 1, (unint64_t *)v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      return;
    }
    *(_QWORD *)&v108 = v7;
    *((_QWORD *)&v108 + 1) = *((_QWORD *)&v98 + 1);
    v109 = v99;
    if (v99)
    {
      v19 = &v99->__shared_owners_;
      do
        v20 = __ldxr((unint64_t *)v19);
      while (__stxr(v20 + 1, (unint64_t *)v19));
      v16 = v100;
    }
    v110 = v16;
    __p = 0;
    if (v11 > 0x6FF)
    {
      v30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
      if (v16 < 0 || v16 + 8 > v30)
      {
        *(_QWORD *)&v112 = "usd/crateFile.cpp";
        *((_QWORD *)&v112 + 1) = "Read";
        *(_QWORD *)&v113 = 770;
        *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v114) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v16, v30);
      }
      else
      {
        v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v16;
        if (v31 < 8 || ((v31 | v16) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 779;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          v91 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v31, v91);
        }
        else
        {
          v32 = (*(uint64_t (**)(_QWORD, void **, uint64_t, ptrdiff_t))(**((_QWORD **)&v98 + 1) + 32))(*((_QWORD *)&v98 + 1), &__p, 8, v16);
          if ((unint64_t)(v32 + 1) >= 2)
          {
            v24 = v16 + v32;
            v110 = v24;
            goto LABEL_40;
          }
        }
      }
    }
    else
    {
      LODWORD(v101) = 0;
      v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
      if (v16 < 0 || v16 + 4 > v21)
      {
        *(_QWORD *)&v112 = "usd/crateFile.cpp";
        *((_QWORD *)&v112 + 1) = "Read";
        *(_QWORD *)&v113 = 770;
        *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v114) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v16, v21);
      }
      else
      {
        v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v16;
        if (v22 < 4 || ((v22 | v16) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 779;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          v89 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v22, v89);
        }
        else
        {
          v23 = (*(uint64_t (**)(_QWORD, char **, uint64_t, ptrdiff_t))(**((_QWORD **)&v98 + 1) + 32))(*((_QWORD *)&v98 + 1), &v101, 4, v16);
          if ((unint64_t)(v23 + 1) >= 2)
          {
            v24 = v16 + v23;
            v110 = v24;
            __p = (void *)v101;
LABEL_40:
            v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v24;
            v34 = __p;
            v35 = 4 * (_QWORD)__p;
            if (v24 < 0 || (v33 & 0x8000000000000000) != 0 || (unint64_t)__p > v33 || v35 > v33)
            {
              *(_QWORD *)&v112 = "usd/crateFile.cpp";
              *((_QWORD *)&v112 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v113 = 2053;
              *((_QWORD *)&v113 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T"
                                       ">::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompresse"
                                       "dArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal_"
                                       "_aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRes"
                                       "erved__::Usd_CrateFile::_AssetStream>, T = float]";
              LOBYTE(v114) = 0;
              v93 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v34, v35, v33, v93);
            }
            else
            {
              LODWORD(v101) = 0;
              *(_QWORD *)&v112 = &v101;
              sub_20BF56258((unint64_t *)a4, (unint64_t)__p, (_DWORD **)&v112);
              sub_20BF564A8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v36, v37);
              v38 = *(_QWORD *)(a4 + 32);
              v39 = *(_QWORD *)a4;
              v40 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
              v41 = 4 * v39;
              if (v24 + v41 > v40)
              {
                *(_QWORD *)&v112 = "usd/crateFile.cpp";
                *((_QWORD *)&v112 + 1) = "Read";
                *(_QWORD *)&v113 = 770;
                *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v114) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v41, v24, v40);
              }
              else
              {
                v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v24;
                if (v42 < v41 || ((v42 | v24) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v112 = "usd/crateFile.cpp";
                  *((_QWORD *)&v112 + 1) = "Read";
                  *(_QWORD *)&v113 = 779;
                  *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v114) = 0;
                  v94 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v41, v42, v94);
                }
                else
                {
                  v43 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, ptrdiff_t))(**((_QWORD **)&v98 + 1)
                                                                                                + 32))(*((_QWORD *)&v98 + 1), v38, v41, v24);
                  if (v43 != -1 && (!v41 || v43))
                    v110 = v24 + v43;
                }
              }
            }
          }
        }
      }
    }
    if (v99)
    {
      v44 = &v99->__shared_owners_;
      do
        v45 = __ldaxr((unint64_t *)v44);
      while (__stlxr(v45 - 1, (unint64_t *)v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    goto LABEL_73;
  }
  v114 = 0;
  v112 = 0u;
  v113 = 0u;
  if (&v112 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v25 = v113;
    *(_OWORD *)a4 = v112;
    *(_OWORD *)(a4 + 16) = v25;
    v112 = 0u;
    v113 = 0u;
    *(_QWORD *)(a4 + 32) = v114;
    v114 = 0;
  }
  sub_20BF5618C((uint64_t)&v112);
}

void sub_20C2E1E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v21;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v21);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2E1EEC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530530;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2E1F98(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5305B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2E2044(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530630;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2E20F0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5306B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2E21A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530530;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E21E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530530;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2E2204(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2E2260(*(uint64_t **)(a1 + 16), *(_QWORD **)(a1 + 8), (double *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2E2218(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530590))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E2254()
{
  return &unk_24C530590;
}

unint64_t sub_20C2E2260(uint64_t *a1, _QWORD *a2, double *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int IsArrayValued;
  uint64_t v9;
  double v10;
  double v12;
  float v13;
  BOOL v14;
  uint64_t v15;
  _OWORD *v16;
  double *v17;
  double *v18;
  char v19;
  uint64_t v20;
  _QWORD v21[2];

  v4 = this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = COERCE_DOUBLE((*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                                 + 168))(v4));
    else
      v10 = *(double *)v4;
    return sub_20C2E23B8((uint64_t)a1, a2, a3, *(uint64_t *)&v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    v21[0] = a2;
    v21[1] = a3;
    v12 = *(double *)v4;
    if (*(double *)v4 >= -3.40282347e38 && ((v13 = v12, v12 <= 3.40282347e38) ? (v14 = v12 == v13) : (v14 = 0), v14))
    {
      return LODWORD(v13) | 0x4009000000000000;
    }
    else
    {
      v15 = *a1;
      if (!*a1)
      {
        v16 = operator new(0x28uLL);
        *v16 = 0u;
        v16[1] = 0u;
        *((_DWORD *)v16 + 8) = 1065353216;
        sub_20BF2B090(a1, (uint64_t)v16);
        v15 = *a1;
      }
      v20 = 0;
      v17 = sub_20C2E2DA0(v15, (double *)v4, (double *)v4, (double *)&v20);
      v18 = v17;
      if (v19)
      {
        *((_QWORD *)v17 + 3) = *(_QWORD *)a3 & 0xFFFFFFFFFFFFLL | 0x9000000000000;
        sub_20C2B7248((uint64_t)v21, (char *)v4);
      }
      return *((_QWORD *)v18 + 3);
    }
  }
}

unint64_t sub_20C2E23B8(uint64_t a1, _QWORD *a2, double *a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  __int16 v17;
  int v18;
  int v19;
  unsigned int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  double *v24;
  double *v25;
  uint64_t v26;
  double *v27;
  double v28;
  double v29;
  double *v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  double *v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  void *v38;
  char *v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  double *v52;
  double *v53;
  double *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double *v58;
  _DWORD *v59;
  uint64_t v60;
  double v61;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v62;
  uint64_t v63;
  size_t CompressedBufferSize;
  char *v65;
  char *v66;
  int64_t v67;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v68;
  int64_t v69;
  size_t v70;
  char *v71;
  char *v72;
  int64_t v73;
  int v74;
  unint64_t v75;
  _QWORD v76[2];
  void *__p[2];
  char *v78;
  void *v79;
  double *v80;
  double *v81;
  __int128 v82;
  __int128 v83;
  char __src[16];

  v76[0] = a2;
  v76[1] = a3;
  result = 0x8009000000000000;
  v75 = 0x8009000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B2D40(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2E2A84(v9, (unint64_t *)a4, a4, &v75);
    if (v14)
    {
      v15 = a2[791];
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int8 *)(v15 + 250) << 16;
        v17 = *(_WORD *)(v15 + 248);
        *(_QWORD *)&v82 = a2;
        *((_QWORD *)&v82 + 1) = a3;
        v18 = v17 << 16;
        v19 = v17 & 0xFF00;
        v20 = v19 | HIWORD(v16) & 0xFF00FFFF | v18;
        if (v20 >= 0x600 && (v21 = *(_QWORD *)a4, *(_QWORD *)a4 > 0xFuLL))
        {
          v24 = *(double **)(a4 + 32);
          v25 = &v24[v21];
          v26 = 8 * v21;
          v27 = v24;
          while (1)
          {
            v28 = *v27;
            if (*v27 < -2147483650.0 || v28 > 2147483650.0 || v28 != (double)(int)v28)
              break;
            ++v27;
            v26 -= 8;
            if (!v26)
            {
              v29 = *a3;
              if (v20 > 0x6FF)
              {
                v79 = *(void **)a4;
                sub_20C2B7248((uint64_t)&v82, (char *)&v79);
              }
              else
              {
                LODWORD(v79) = *(_QWORD *)a4;
                sub_20C2CE770((uint64_t)&v82, (char *)&v79);
              }
              sub_20BDE39A0(&v79, *(_QWORD *)a4);
              if (*(_QWORD *)a4)
              {
                v58 = *(double **)(a4 + 32);
                v59 = v79;
                v60 = 8 * *(_QWORD *)a4;
                do
                {
                  v61 = *v58++;
                  *v59++ = (int)v61;
                  v60 -= 8;
                }
                while (v60);
              }
              LOBYTE(__p[0]) = 105;
              sub_20C2DC688((uint64_t)&v82, (char *)__p);
              v62 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v79;
              v63 = ((char *)v80 - (_BYTE *)v79) >> 2;
              *(_OWORD *)__p = v82;
              CompressedBufferSize = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v63);
              v65 = (char *)operator new[](CompressedBufferSize);
              v67 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v62, (const int *)v63, v65, v66);
              *(_QWORD *)&v83 = v67;
              sub_20C2B7248((uint64_t)__p, (char *)&v83);
              sub_20C2A7944((uint64_t)__p, v65, v67);
              v23 = *(_QWORD *)&v29 & 0xFFFFFFFFFFFFLL | 0xA009000000000000;
              operator delete[](v65);
              goto LABEL_82;
            }
          }
          v74 = v18;
          v30 = 0;
          v79 = 0;
          v80 = 0;
          v31 = v21 >> 2;
          v81 = 0;
          if (v31 >= 0x400)
            v32 = 1024;
          else
            v32 = v31;
          __p[0] = 0;
          __p[1] = 0;
          v78 = 0;
          do
          {
            v33 = *v24;
            if (v79 != v30)
            {
              v34 = (double *)v79;
              while (*v34 != v33)
              {
                if (++v34 == v30)
                  goto LABEL_33;
              }
              v30 = v34;
            }
LABEL_33:
            v35 = (char *)v30 - (_BYTE *)v79;
            v36 = v35 >> 3;
            v37 = (char *)__p[1];
            if (__p[1] >= v78)
            {
              v39 = (char *)__p[0];
              v40 = ((char *)__p[1] - (char *)__p[0]) >> 2;
              v41 = v40 + 1;
              if ((unint64_t)(v40 + 1) >> 62)
                sub_20BDDF694();
              v42 = v78 - (char *)__p[0];
              if ((v78 - (char *)__p[0]) >> 1 > v41)
                v41 = v42 >> 1;
              if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                v43 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v43 = v41;
              if (v43)
              {
                v44 = (char *)sub_20BDE1330((uint64_t)&v78, v43);
                v39 = (char *)__p[0];
                v37 = (char *)__p[1];
              }
              else
              {
                v44 = 0;
              }
              v45 = &v44[4 * v40];
              *(_DWORD *)v45 = v36;
              v38 = v45 + 4;
              while (v37 != v39)
              {
                v46 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v45 - 1) = v46;
                v45 -= 4;
              }
              __p[0] = v45;
              __p[1] = v38;
              v78 = &v44[4 * v43];
              if (v39)
                operator delete(v39);
            }
            else
            {
              *(_DWORD *)__p[1] = v36;
              v38 = v37 + 4;
            }
            __p[1] = v38;
            v47 = (v35 >> 3);
            v30 = v80;
            if (v47 == ((char *)v80 - (_BYTE *)v79) >> 3)
            {
              if (v47 == v32)
              {
                v80 = (double *)v79;
                __p[1] = __p[0];
                goto LABEL_69;
              }
              if (v80 >= v81)
              {
                v48 = ((char *)v81 - (_BYTE *)v79) >> 2;
                if (v48 <= v47 + 1)
                  v48 = v47 + 1;
                if ((unint64_t)((char *)v81 - (_BYTE *)v79) >= 0x7FFFFFFFFFFFFFF8)
                  v49 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v49 = v48;
                v51 = (char *)sub_20BDDF6A8((uint64_t)&v81, v49);
                v52 = (double *)v79;
                v53 = v80;
                v54 = (double *)&v51[8 * v47];
                *v54 = v33;
                v30 = v54 + 1;
                while (v53 != v52)
                {
                  v55 = *((_QWORD *)v53-- - 1);
                  *((_QWORD *)v54-- - 1) = v55;
                }
                v79 = v54;
                v80 = v30;
                v81 = (double *)&v51[8 * v50];
                if (v52)
                  operator delete(v52);
              }
              else
              {
                *v80 = v33;
                ++v30;
              }
              v80 = v30;
            }
            ++v24;
          }
          while (v24 != v25);
          if (v79 != v30)
          {
            v56 = **((_QWORD **)&v82 + 1);
            if (v20 > 0x6FF)
            {
              *(_QWORD *)&v83 = *(_QWORD *)a4;
              sub_20C2B7248((uint64_t)&v82, (char *)&v83);
            }
            else
            {
              LODWORD(v83) = *(_QWORD *)a4;
              sub_20C2CE770((uint64_t)&v82, (char *)&v83);
            }
            LOBYTE(v83) = 116;
            sub_20C2DC688((uint64_t)&v82, (char *)&v83);
            LODWORD(v83) = (unint64_t)((char *)v80 - (_BYTE *)v79) >> 3;
            sub_20C2CE770((uint64_t)&v82, (char *)&v83);
            sub_20C2D6610((uint64_t)&v82, (char *)v79, ((char *)v80 - (_BYTE *)v79) >> 3);
            v68 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)__p[0];
            v69 = ((char *)__p[1] - (char *)__p[0]) >> 2;
            v83 = v82;
            v70 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::GetCompressedBufferSize((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v69);
            v71 = (char *)operator new[](v70);
            v73 = pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression::CompressToBuffer(v68, (const unsigned int *)v69, v71, v72);
            *(_QWORD *)__src = v73;
            sub_20C2B7248((uint64_t)&v83, __src);
            sub_20C2A7944((uint64_t)&v83, v71, v73);
            v23 = v56 & 0xFFFFFFFFFFFFLL | 0xA009000000000000;
            operator delete[](v71);
            goto LABEL_80;
          }
LABEL_69:
          v83 = v82;
          v57 = sub_20C2CE3F0((uint64_t)&v83, 8);
          if ((v74 | v19) > 0x6FF)
          {
            *(_QWORD *)__src = *(_QWORD *)a4;
            sub_20C2B7248((uint64_t)&v83, __src);
          }
          else
          {
            *(_DWORD *)__src = *(_QWORD *)a4;
            sub_20C2CE770((uint64_t)&v83, __src);
          }
          sub_20C2D6610((uint64_t)&v83, *(char **)(a4 + 32), *(_QWORD *)a4);
          v23 = v57 & 0xFFFFFFFFFFFFLL | 0x8009000000000000;
LABEL_80:
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
LABEL_82:
          if (v79)
          {
            v80 = (double *)v79;
            operator delete(v79);
          }
        }
        else
        {
          v79 = a2;
          v80 = a3;
          v22 = sub_20C2CE3F0((uint64_t)&v79, 8);
          if ((v18 | v19) > 0x6FF)
          {
            __p[0] = *(void **)a4;
            sub_20C2B7248((uint64_t)&v79, (char *)__p);
          }
          else
          {
            LODWORD(__p[0]) = *(_QWORD *)a4;
            sub_20C2CE770((uint64_t)&v79, (char *)__p);
          }
          v23 = v22 & 0xFFFFFFFFFFFFLL | 0x8009000000000000;
          sub_20C2D6610((uint64_t)&v79, *(char **)(a4 + 32), *(_QWORD *)a4);
        }
        v13[7] = v23;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v76, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v79) = 1;
        sub_20C2CE770((uint64_t)v76, (char *)&v79);
        LODWORD(v79) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v76, (char *)&v79);
        sub_20C2D6610((uint64_t)v76, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

void sub_20C2E2A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C2E2A84(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  double *v10;
  unint64_t v11;
  double v12;
  double v13;
  unint64_t v14;
  unint64_t v15;
  uint8x8_t v16;
  unint64_t v17;
  _QWORD **v18;
  _QWORD *i;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  float v27;
  float v28;
  _BOOL8 v29;
  unint64_t v30;
  unint64_t v31;
  size_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;

  v9 = *a2;
  if (*a2)
  {
    v10 = (double *)a2[4];
    v11 = *a2;
    do
    {
      v12 = *v10++;
      v13 = v12;
      if (v12 == 0.0)
        v13 = 0.0;
      v9 = *(_QWORD *)&v13 + ((v9 + *(_QWORD *)&v13 + (v9 + *(_QWORD *)&v13) * (v9 + *(_QWORD *)&v13)) >> 1);
      --v11;
    }
    while (v11);
    v9 *= 0x9E3779B97F4A7C55;
  }
  v14 = bswap64(v9);
  v15 = *(_QWORD *)(a1 + 8);
  if (v15)
  {
    v16 = (uint8x8_t)vcnt_s8((int8x8_t)v15);
    v16.i16[0] = vaddlv_u8(v16);
    v17 = v16.u32[0];
    if (v16.u32[0] > 1uLL)
    {
      v4 = v14;
      if (v14 >= v15)
        v4 = v14 % v15;
    }
    else
    {
      v4 = (v15 - 1) & v14;
    }
    v18 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v18)
    {
      for (i = *v18; i; i = (_QWORD *)*i)
      {
        v20 = i[1];
        if (v20 == v14)
        {
          if (sub_20BF57F48(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v17 > 1)
          {
            if (v20 >= v15)
              v20 %= v15;
          }
          else
          {
            v20 &= v15 - 1;
          }
          if (v20 != v4)
            break;
        }
      }
    }
  }
  v21 = (_QWORD *)(a1 + 16);
  v22 = operator new(0x40uLL);
  i = v22;
  *(_QWORD *)v22 = 0;
  *((_QWORD *)v22 + 1) = v14;
  v23 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v22 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v22 + 2) = v23;
  v24 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v22 + 6) = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 - 16);
    if (*((_QWORD *)v22 + 5))
      v25 = (unint64_t *)*((_QWORD *)v22 + 5);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  *((_QWORD *)v22 + 7) = *a4;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v15 || (float)(v28 * (float)v15) < v27)
  {
    v29 = 1;
    if (v15 >= 3)
      v29 = (v15 & (v15 - 1)) != 0;
    v30 = v29 | (2 * v15);
    v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31)
      v32 = v31;
    else
      v32 = v30;
    sub_20BDEC6E0(a1, v32);
    v15 = *(_QWORD *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15)
        v4 = v14 % v15;
      else
        v4 = v14;
    }
    else
    {
      v4 = (v15 - 1) & v14;
    }
  }
  v33 = *(_QWORD *)a1;
  v34 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v34)
  {
    *i = *v34;
LABEL_48:
    *v34 = i;
    goto LABEL_49;
  }
  *i = *v21;
  *v21 = i;
  *(_QWORD *)(v33 + 8 * v4) = v21;
  if (*i)
  {
    v35 = *(_QWORD *)(*i + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v35 >= v15)
        v35 %= v15;
    }
    else
    {
      v35 &= v15 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)a1 + 8 * v35);
    goto LABEL_48;
  }
LABEL_49:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2E2D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2E2D5C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2E2D5C(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

double *sub_20C2E2DA0(uint64_t a1, double *a2, double *a3, double *a4)
{
  unint64_t v4;
  double v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  double *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  double **v22;
  unint64_t v23;

  v8 = 0.0;
  if (*a2 != 0.0)
    v8 = *a2;
  v9 = bswap64(0x9E3779B97F4A7C55 * *(_QWORD *)&v8);
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (double *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[2] == *a2)
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = *(double **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (double *)operator new(0x20uLL);
  *v13 = 0.0;
  *((_QWORD *)v13 + 1) = v9;
  v13[2] = *a3;
  v13[3] = *a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(double ***)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v13 = *v22;
LABEL_40:
    *v22 = v13;
    goto LABEL_41;
  }
  *v13 = *(double *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v23 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (double **)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20C2E2FE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C2E2FFC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5305B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E3038(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5305B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C2E305C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = 0;
  v11[3] = v8;
  v11[4] = v9;
  return sub_20C2E30EC(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_20C2E30A4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530610))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E30E0()
{
  return &unk_24C530610;
}

double sub_20C2E30EC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  double result;
  _OWORD v7[2];
  uint64_t v8;
  __n128 v9[2];
  uint64_t v10;

  if (a3 < 0)
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    v8 = *(_QWORD *)(a2 + 32);
    sub_20C2E31B0(a1, v7, a3, (uint64_t)v9);
    sub_20BF57B78(a4, v9);
    sub_20BF5618C((uint64_t)v9);
  }
  else
  {
    v9[0].n128_u64[0] = 0;
    if ((a3 & 0x4000000000000000) != 0)
      v9[0].n128_f64[0] = *(float *)&a3;
    else
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v9, (char *)8, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    return sub_20C1D0D28(a4, v9[0].n128_f64);
  }
  return result;
}

void sub_20C2E3198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2E31B0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  ssize_t v14;
  unint64_t p;
  __int128 v16;
  ssize_t v17;
  ssize_t v18;
  unint64_t close;
  ssize_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  __sFILE *v24;
  char *v25;
  off_t v26;
  FILE *v27;
  ssize_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  ssize_t v32;
  ssize_t v33;
  uint64_t v34;
  char *v35;
  double *v36;
  unsigned __int8 *read;
  fpos_t (__cdecl *seek)(void *, fpos_t, int);
  int (__cdecl *v39)(void *, char *, int);
  int v40;
  ssize_t v41;
  unint64_t v42;
  ssize_t v43;
  uint64_t v44;
  char *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  _QWORD *v48;
  unsigned int cookie;
  unsigned __int8 *v50;
  unsigned __int8 *base;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  pxrInternal__aapl__pxrReserved__ *v55;
  __sFILE v56;

  if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    memset(&v56._read, 0, 40);
    if (&v56._read != (int (__cdecl **)(void *, char *, int))a4)
    {
      sub_20BF5618C(a4);
      v16 = *(_OWORD *)&v56._write;
      *(_OWORD *)a4 = *(_OWORD *)&v56._read;
      *(_OWORD *)(a4 + 16) = v16;
      memset(&v56._read, 0, 32);
      *(_QWORD *)(a4 + 32) = *(_QWORD *)&v56._ub._size;
      *(_QWORD *)&v56._ub._size = 0;
    }
    sub_20BF5618C((uint64_t)&v56._read);
    return;
  }
  a2[2] = a3 & 0xFFFFFFFFFFFFLL;
  v7 = *(unsigned __int8 *)(*a2 + 6369);
  v8 = *(unsigned __int8 *)(*a2 + 6370);
  v9 = *(unsigned __int8 *)(*a2 + 6368) << 16;
  v10 = v9 | (v7 << 8);
  if (v10 > 0x4FF || (LODWORD(v56._read) = 0, sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v56._read)))
  {
    v11 = *((_OWORD *)a2 + 1);
    v53 = *(_OWORD *)a2;
    v54 = v11;
    v55 = (pxrInternal__aapl__pxrReserved__ *)a2[4];
    v12 = v9 | v8 | (v7 << 8);
    if (v12 < 0x600 || (a3 & 0x2000000000000000) == 0)
    {
      v56._p = 0;
      if (v10 > 0x6FF)
      {
        v14 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, &v56, (char *)8, v54 + *((_QWORD *)&v53 + 1));
        if (v14 == -1)
          return;
        p = (unint64_t)v56._p;
      }
      else
      {
        LODWORD(v56._read) = 0;
        v14 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&v56._read, (char *)4, v54 + *((_QWORD *)&v53 + 1));
        if (v14 == -1)
          return;
        p = LODWORD(v56._read);
        v56._p = (unsigned __int8 *)LODWORD(v56._read);
      }
      v20 = v14 + v54;
      v21 = *((_QWORD *)&v54 + 1) - (v14 + v54);
      if (v14 + (_QWORD)v54 < 0 || (v21 & 0x8000000000000000) != 0 || p > v21 || 8 * p > v21)
      {
        v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
        v56._seek = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadUncompressedArray";
        v56._write = (int (__cdecl *)(void *, const char *, int))2053;
        v56._ub._base = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>::type"
                        " pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, ValueRep, VtArr"
                        "ay<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                        "e::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream>, T = double]";
        LOBYTE(v56._ub._size) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      v56._bf._base = 0;
      v56._read = (int (__cdecl *)(void *, char *, int))&v56._bf;
      sub_20BF57894((unint64_t *)a4, p, (uint64_t **)&v56._read);
      sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v22, v23);
      v24 = *(__sFILE **)(a4 + 32);
      v25 = (char *)(8 * *(_QWORD *)a4);
      v26 = v20 + *((_QWORD *)&v53 + 1);
      v27 = (FILE *)v55;
      goto LABEL_33;
    }
    v56._close = 0;
    if (v12 > 0x6FF)
    {
      v28 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&v56._close, (char *)8, v54 + *((_QWORD *)&v53 + 1));
      if (v28 == -1)
        return;
      v18 = v54 + v28;
      *(_QWORD *)&v54 = v54 + v28;
      close = (unint64_t)v56._close;
    }
    else
    {
      LODWORD(v56._read) = 0;
      v17 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&v56._read, (char *)4, v54 + *((_QWORD *)&v53 + 1));
      if (v17 == -1)
        return;
      v18 = v54 + v17;
      *(_QWORD *)&v54 = v54 + v17;
      close = LODWORD(v56._read);
      v56._close = (int (__cdecl *)(void *))LODWORD(v56._read);
    }
    if (close <= 0xF)
    {
      v29 = *((_QWORD *)&v54 + 1) - v18;
      if (v18 < 0 || (v29 & 0x8000000000000000) != 0 || close > v29 || 8 * close > v29)
      {
        v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
        v56._seek = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadPossiblyCompressedArray";
        v56._write = (int (__cdecl *)(void *, const char *, int))2287;
        v56._ub._base = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || std::"
                        "is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyC"
                        "ompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__a"
                        "apl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Crat"
                        "eFile::_PreadStream>, T = double]";
        LOBYTE(v56._ub._size) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      v56._bf._base = 0;
      v56._read = (int (__cdecl *)(void *, char *, int))&v56._bf;
      sub_20BF57894((unint64_t *)a4, close, (uint64_t **)&v56._read);
      sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v30, v31);
      v24 = *(__sFILE **)(a4 + 32);
      v25 = (char *)(8 * (uint64_t)v56._close);
      v27 = (FILE *)v55;
      v26 = v54 + *((_QWORD *)&v53 + 1);
LABEL_33:
      pxrInternal__aapl__pxrReserved__::ArchPRead(v27, v24, v25, v26);
      return;
    }
    HIBYTE(v56._cookie) = 0;
    v32 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)((char *)&v56._cookie + 7), (char *)1, v18 + *((_QWORD *)&v53 + 1));
    if (v32 != -1)
    {
      v33 = v54 + v32;
      *(_QWORD *)&v54 = v54 + v32;
      if (HIBYTE(v56._cookie) != 116)
      {
        if (HIBYTE(v56._cookie) != 105)
        {
          v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
          v56._seek = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadPossiblyCompressedArray";
          v56._write = (int (__cdecl *)(void *, const char *, int))2351;
          v56._ub._base = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || std"
                          "::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossi"
                          "blyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInter"
                          "nal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::"
                          "Usd_CrateFile::_PreadStream>, T = double]";
          LOBYTE(v56._ub._size) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>");
          return;
        }
        if ((sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v56._close) & 1) == 0)
        {
          v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
          v56._seek = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadPossiblyCompressedArray";
          v56._write = (int (__cdecl *)(void *, const char *, int))2307;
          v56._ub._base = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || std"
                          "::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossi"
                          "blyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInter"
                          "nal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::"
                          "Usd_CrateFile::_PreadStream>, T = double]";
          LOBYTE(v56._ub._size) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints");
          return;
        }
        sub_20BDE39A0(&v56._read, (unint64_t)v56._close);
        v56._p = 0;
        v56._bf._base = (unsigned __int8 *)&v56;
        sub_20BF57894((unint64_t *)a4, (unint64_t)v56._close, (uint64_t **)&v56._bf);
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v34, v35);
        v36 = *(double **)(a4 + 32);
        sub_20C2D2558((uint64_t)&v53, (unint64_t)v56._read, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(((char *)v56._seek - (char *)v56._read) >> 2));
        read = (unsigned __int8 *)v56._read;
        seek = v56._seek;
        if (v56._read != (int (__cdecl *)(void *, char *, int))v56._seek)
        {
          v39 = v56._read;
          do
          {
            v40 = *(_DWORD *)v39;
            v39 = (int (__cdecl *)(void *, char *, int))((char *)v39 + 4);
            *v36++ = (double)v40;
          }
          while ((char *)v39 != (char *)seek);
        }
        if (read)
        {
          v56._seek = (fpos_t (__cdecl *)(void *, fpos_t, int))read;
LABEL_63:
          operator delete(read);
          return;
        }
        return;
      }
      LODWORD(v56._cookie) = 0;
      v41 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)&v56._cookie, (char *)4, v33 + *((_QWORD *)&v53 + 1));
      if (v41 == -1)
        return;
      *(_QWORD *)&v54 = v54 + v41;
      v42 = *((_QWORD *)&v54 + 1) - v54;
      if ((v54 & 0x8000000000000000) != 0
        || (v42 & 0x8000000000000000) != 0
        || (uint64_t)v42 < LODWORD(v56._cookie)
        || 8 * (unint64_t)LODWORD(v56._cookie) > v42)
      {
        v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
        v56._seek = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadPossiblyCompressedArray";
        v56._write = (int (__cdecl *)(void *, const char *, int))2325;
        v56._ub._base = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || std::"
                        "is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyC"
                        "ompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__a"
                        "apl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_Crat"
                        "eFile::_PreadStream>, T = double]";
        LOBYTE(v56._ub._size) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld");
        return;
      }
      sub_20BDE48D4(&v56._bf._base, LODWORD(v56._cookie));
      v43 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v55, (__sFILE *)v56._bf._base, (char *)(*(_QWORD *)&v56._bf._size - (unint64_t)v56._bf._base), v54 + *((_QWORD *)&v53 + 1));
      if (v43 != -1)
        *(_QWORD *)&v54 = v54 + v43;
      if ((sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v56._close) & 1) != 0)
      {
        sub_20BDE36C4(&v56, (unint64_t)v56._close);
        sub_20C2C1E3C((uint64_t)&v53, (unint64_t)v56._p, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*(_QWORD *)&v56._r- (unint64_t)v56._p) >> 2));
        v56._extra = 0;
        v56._read = (int (__cdecl *)(void *, char *, int))&v56._extra;
        sub_20BF57894((unint64_t *)a4, (unint64_t)v56._close, (uint64_t **)&v56._read);
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v44, v45);
        v46 = v56._p;
        v47 = *(unsigned __int8 **)&v56._r;
        if (v56._p == *(unsigned __int8 **)&v56._r)
        {
LABEL_56:
          if (!v46)
            goto LABEL_61;
        }
        else
        {
          v48 = *(_QWORD **)(a4 + 32);
          cookie = v56._cookie;
          v50 = v56._p;
          base = v56._bf._base;
          while (1)
          {
            v52 = *(unsigned int *)v50;
            if (v52 >= cookie)
              break;
            *v48++ = *(_QWORD *)&base[8 * v52];
            v50 += 4;
            if (v50 == v47)
              goto LABEL_56;
          }
          v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
          v56._seek = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadPossiblyCompressedArray";
          v56._write = (int (__cdecl *)(void *, const char *, int))2343;
          v56._ub._base = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || std"
                          "::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossi"
                          "blyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInter"
                          "nal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::"
                          "Usd_CrateFile::_PreadStream>, T = double]";
          LOBYTE(v56._ub._size) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v52);
          v46 = v56._p;
          if (!v56._p)
          {
LABEL_61:
            read = v56._bf._base;
            if (v56._bf._base)
            {
              *(_QWORD *)&v56._bf._size = v56._bf._base;
              goto LABEL_63;
            }
            return;
          }
        }
        *(_QWORD *)&v56._r = v46;
        operator delete(v46);
        goto LABEL_61;
      }
      v56._read = (int (__cdecl *)(void *, char *, int))"usd/crateFile.cpp";
      v56._seek = (fpos_t (__cdecl *)(void *, fpos_t, int))"_ReadPossiblyCompressedArray";
      v56._write = (int (__cdecl *)(void *, const char *, int))2333;
      v56._ub._base = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || std::is"
                      "_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadPossiblyCompr"
                      "essedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = pxrInternal__aapl__p"
                      "xrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_"
                      "PreadStream>, T = double]";
      LOBYTE(v56._ub._size) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v56._read, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v56._close);
      goto LABEL_61;
    }
  }
}

void sub_20C2E3834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C2E38B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E38EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C2E3910(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_20C2E3960((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2E3918(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530690))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E3954()
{
  return &unk_24C530690;
}

double sub_20C2E3960(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  int v11;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  v10[2] = v6;
  v10[3] = v7;
  v11 = sub_20C2A2B6C();
  return sub_20C2E39DC(v5, (uint64_t)v10, v3, v4);
}

double sub_20C2E39DC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11[2];
  uint64_t v12;
  __n128 __dst[2];
  uint64_t v14;

  if (a3 < 0)
  {
    v14 = 0;
    memset(__dst, 0, sizeof(__dst));
    v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    v12 = *(_QWORD *)(a2 + 32);
    sub_20C2E3AC0(a1, v11, a3, (uint64_t)__dst);
    sub_20BF57B78(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    __dst[0].n128_u64[0] = 0;
    v5 = *(_OWORD *)(a2 + 16);
    v8 = *(_OWORD *)a2;
    v9 = v5;
    v10 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      __dst[0].n128_f64[0] = *(float *)&a3;
    }
    else
    {
      *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v8 + 8, __dst, 8uLL);
    }
    return sub_20C1D0D28(a4, __dst[0].n128_f64);
  }
  return result;
}

void sub_20C2E3AA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2E3AC0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  __int128 v11;
  unsigned int v12;
  __int128 v14;
  unsigned __int8 v15;
  unint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  char *v23;
  void *v24;
  size_t v25;
  void **v26;
  unint64_t v27;
  void *v28;
  unint64_t *v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  double *v38;
  void *v39;
  int *v40;
  int *v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  unsigned int *v47;
  unsigned int *v48;
  _QWORD *v49;
  unsigned int v50;
  unsigned int *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  unsigned int *v58;
  unsigned int *v59;
  unsigned int v60;
  char v61;
  unint64_t v62;
  void *__p[2];
  __int128 v64;
  uint64_t v65;
  __int128 __dst;
  __int128 v67;
  void *v68;
  unint64_t v69;

  if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
  {
    v68 = 0;
    __dst = 0u;
    v67 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v17 = v67;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v17;
      __dst = 0u;
      v67 = 0u;
      *(_QWORD *)(a4 + 32) = v68;
      v68 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
    return;
  }
  *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
  v7 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6369);
  v8 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6370);
  v9 = *(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16;
  v10 = v9 | (v7 << 8);
  if (v10 <= 0x4FF)
  {
    LODWORD(__dst) = 0;
    if (!sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL))
      return;
  }
  v11 = a2[1];
  v55 = *a2;
  v56 = v11;
  v57 = *((_QWORD *)a2 + 4);
  v12 = v9 | v8 | (v7 << 8);
  if (v12 < 0x600 || (a3 & 0x2000000000000000) == 0)
  {
    v14 = a2[1];
    *(_OWORD *)__p = *a2;
    v64 = v14;
    v65 = *((_QWORD *)a2 + 4);
    v15 = atomic_load((unsigned __int8 *)&qword_254988490);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_254988490))
    {
      v54 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
      if (!v54)
      {
        pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        v54 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
      }
      byte_254988488 = *v54;
      __cxa_guard_release(&qword_254988490);
    }
    v69 = 0;
    if (v10 > 0x6FF)
    {
      if (!sub_20C2B9BEC((uint64_t)&__p[1], &v69, 8uLL))
        return;
      v16 = v69;
    }
    else
    {
      LODWORD(__dst) = 0;
      if ((sub_20C2B9BEC((uint64_t)&__p[1], &__dst, 4uLL) & 1) == 0)
        return;
      v16 = __dst;
      v69 = __dst;
    }
    v27 = 8 * v16;
    v28 = __p[1];
    if (!byte_254988488 || v27 < 0x800 || ((uint64_t)__p[1] & 7) != 0)
    {
      v31 = (unint64_t)__p[1] - *(_QWORD *)(*(_QWORD *)v64 + 24);
      v32 = *(_QWORD *)(*(_QWORD *)v64 + 32) - v31;
      if ((v31 & 0x8000000000000000) == 0 && (v32 & 0x8000000000000000) == 0 && v16 <= v32 && v27 <= v32)
      {
        v58 = 0;
        *(_QWORD *)&__dst = &v58;
        sub_20BF57894((unint64_t *)a4, v16, (uint64_t **)&__dst);
        sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v34, v35);
        v24 = *(void **)(a4 + 32);
        v25 = 8 * *(_QWORD *)a4;
        v26 = &__p[1];
        goto LABEL_45;
      }
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v67 = 2117;
      *((_QWORD *)&v67 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>::"
                              "type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Value"
                              "Rep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_Cra"
                              "teFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<px"
                              "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = double]";
      LOBYTE(v68) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld");
    }
    else
    {
      v29 = sub_20C2CF260((uint64_t)&__p[1], (char *)__p[1], 8 * v16, v16);
      if (v29)
      {
        *(_QWORD *)&v67 = 0;
        *((_QWORD *)&v67 + 1) = v29;
        v68 = v28;
        __dst = v69;
        if (&__dst != (__int128 *)a4)
        {
          sub_20BF5618C(a4);
          v30 = v67;
          *(_OWORD *)a4 = __dst;
          *(_OWORD *)(a4 + 16) = v30;
          __dst = 0u;
          v67 = 0u;
          *(_QWORD *)(a4 + 32) = v68;
          v68 = 0;
        }
        sub_20BF5618C((uint64_t)&__dst);
      }
      else
      {
        *(_QWORD *)&__dst = "usd/crateFile.cpp";
        *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
        *(_QWORD *)&v67 = 2109;
        *((_QWORD *)&v67 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::value>"
                                "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, V"
                                "alueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::U"
                                "sd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapS"
                                "tream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = double]";
        LOBYTE(v68) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v27);
        sub_20BF56210((_QWORD *)a4);
      }
    }
    return;
  }
  v62 = 0;
  if (v12 > 0x6FF)
  {
    if (!sub_20C2B9BEC((uint64_t)&v55 + 8, &v62, 8uLL))
      return;
    v18 = v62;
  }
  else
  {
    LODWORD(__dst) = 0;
    if (!sub_20C2B9BEC((uint64_t)&v55 + 8, &__dst, 4uLL))
      return;
    v18 = __dst;
    v62 = __dst;
  }
  if (v18 <= 0xF)
  {
    v19 = *((_QWORD *)&v55 + 1) - *(_QWORD *)(*(_QWORD *)v56 + 24);
    v20 = *(_QWORD *)(*(_QWORD *)v56 + 32) - v19;
    if ((v19 & 0x8000000000000000) == 0 && (v20 & 0x8000000000000000) == 0 && v18 <= v20 && 8 * v18 <= v20)
    {
      __p[0] = 0;
      *(_QWORD *)&__dst = __p;
      sub_20BF57894((unint64_t *)a4, v18, (uint64_t **)&__dst);
      sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v22, v23);
      v24 = *(void **)(a4 + 32);
      v25 = 8 * v62;
      v26 = (void **)&v55 + 1;
LABEL_45:
      sub_20C2B9BEC((uint64_t)v26, v24, v25);
      return;
    }
    *(_QWORD *)&__dst = "usd/crateFile.cpp";
    *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(_QWORD *)&v67 = 2287;
    *((_QWORD *)&v67 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = double]";
    LOBYTE(v68) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld");
    return;
  }
  v61 = 0;
  if (!sub_20C2B9BEC((uint64_t)&v55 + 8, &v61, 1uLL))
    return;
  if (v61 == 116)
  {
    v60 = 0;
    if (!sub_20C2B9BEC((uint64_t)&v55 + 8, &v60, 4uLL))
      return;
    v43 = *((_QWORD *)&v55 + 1) - *(_QWORD *)(*(_QWORD *)v56 + 24);
    v44 = *(_QWORD *)(*(_QWORD *)v56 + 32) - v43;
    if (v43 < 0 || (v44 & 0x8000000000000000) != 0 || (uint64_t)v44 < v60 || 8 * (unint64_t)v60 > v44)
    {
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(_QWORD *)&v67 = 2325;
      *((_QWORD *)&v67 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = double]";
      LOBYTE(v68) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld");
      return;
    }
    sub_20BDE48D4(__p, v60);
    sub_20C2B9BEC((uint64_t)&v55 + 8, __p[0], (char *)__p[1] - (char *)__p[0]);
    if ((sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v62) & 1) == 0)
    {
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(_QWORD *)&v67 = 2333;
      *((_QWORD *)&v67 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = double]";
      LOBYTE(v68) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v62);
      goto LABEL_71;
    }
    sub_20BDE36C4(&v58, v62);
    sub_20C2BA590((uint64_t)&v55, (unint64_t)v58, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)(v59 - v58));
    v69 = 0;
    *(_QWORD *)&__dst = &v69;
    sub_20BF57894((unint64_t *)a4, v62, (uint64_t **)&__dst);
    sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v45, v46);
    v47 = v58;
    v48 = v59;
    if (v58 == v59)
    {
LABEL_66:
      if (!v47)
      {
LABEL_71:
        v39 = __p[0];
        if (!__p[0])
          return;
        __p[1] = __p[0];
        goto LABEL_73;
      }
    }
    else
    {
      v49 = *(_QWORD **)(a4 + 32);
      v50 = v60;
      v51 = v58;
      v52 = __p[0];
      while (1)
      {
        v53 = *v51;
        if (v53 >= v50)
          break;
        *v49++ = v52[v53];
        if (++v51 == v48)
          goto LABEL_66;
      }
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
      *(_QWORD *)&v67 = 2343;
      *((_QWORD *)&v67 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value ||"
                              " std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_R"
                              "eadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reade"
                              "r = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl_"
                              "_pxrReserved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                              "::CrateFile::_FileMapping *>>, T = double]";
      LOBYTE(v68) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v53);
      v47 = v58;
      if (!v58)
        goto LABEL_71;
    }
    v59 = v47;
    operator delete(v47);
    goto LABEL_71;
  }
  if (v61 != 105)
  {
    *(_QWORD *)&__dst = "usd/crateFile.cpp";
    *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(_QWORD *)&v67 = 2351;
    *((_QWORD *)&v67 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = double]";
    LOBYTE(v68) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>");
    return;
  }
  if ((sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v62) & 1) == 0)
  {
    *(_QWORD *)&__dst = "usd/crateFile.cpp";
    *((_QWORD *)&__dst + 1) = "_ReadPossiblyCompressedArray";
    *(_QWORD *)&v67 = 2307;
    *((_QWORD *)&v67 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::value || s"
                            "td::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadP"
                            "ossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version, int) [Reader = px"
                            "rInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRese"
                            "rved__::Usd_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFil"
                            "e::_FileMapping *>>, T = double]";
    LOBYTE(v68) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints");
    return;
  }
  sub_20BDE39A0(&__dst, v62);
  v58 = 0;
  __p[0] = &v58;
  sub_20BF57894((unint64_t *)a4, v62, (uint64_t **)__p);
  sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v36, v37);
  v38 = *(double **)(a4 + 32);
  sub_20C2D2CDC((uint64_t)&v55, __dst, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*((_QWORD *)&__dst + 1) - __dst) >> 2));
  v40 = (int *)*((_QWORD *)&__dst + 1);
  v39 = (void *)__dst;
  if ((_QWORD)__dst != *((_QWORD *)&__dst + 1))
  {
    v41 = (int *)__dst;
    do
    {
      v42 = *v41++;
      *v38++ = (double)v42;
    }
    while (v41 != v40);
  }
  if (v39)
  {
    *((_QWORD *)&__dst + 1) = v39;
LABEL_73:
    operator delete(v39);
  }
}

void sub_20C2E4240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  __cxa_guard_abort(&qword_254988490);
  _Unwind_Resume(a1);
}

__n128 sub_20C2E42E8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5306B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E4324(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5306B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2E4348(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2E43A0((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2E4358(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530710))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E4394()
{
  return &unk_24C530710;
}

void sub_20C2E43A0(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = 0;
  }
  v19 = 0;
  v10.n128_f64[0] = sub_20C2E44BC(v3, &v17, a2, a3);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v16)
  {
    v14 = (unint64_t *)&v16->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v10);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20C2E44A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

double sub_20C2E44BC(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  double result;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  double v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  __n128 v26;
  __int128 v27;
  uint64_t v28;

  if (a3 < 0)
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    v23 = *a2;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v24 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v25 = *((_QWORD *)a2 + 3);
    sub_20C2E4778(a1, &v23, a3, (uint64_t)&v26);
    v15 = v24;
    if (v24)
    {
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_20BF57B78(a4, &v26);
    sub_20BF5618C((uint64_t)&v26);
  }
  else
  {
    v22 = 0.0;
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      v22 = *(float *)&a3;
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 8 > v10)
      {
        v26.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v26.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v27 = 770;
        *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v28) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 7)
        {
          v26.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v26.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v27 = 779;
          *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v28) = 0;
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v11, v21);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, double *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, &v22, 8, v9);
        }
      }
    }
    if (v6)
    {
      v19 = (unint64_t *)&v6->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    return sub_20C1D0D28(a4, &v22);
  }
  return result;
}

void sub_20C2E4740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2E4778(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  ptrdiff_t v16;
  unsigned int v17;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  ptrdiff_t v24;
  __int128 v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  ptrdiff_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t *v59;
  unint64_t v60;
  ptrdiff_t v61;
  uint64_t *v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  char *v66;
  double *v67;
  void *v68;
  int *v69;
  int *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  char v78;
  uint64_t v79;
  char *v80;
  unsigned int *v81;
  unsigned int *v82;
  _QWORD *v83;
  unsigned int v84;
  unsigned int *v85;
  _QWORD *v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  std::__shared_weak_count *v99;
  ptrdiff_t v100;
  unint64_t v101;
  unsigned int *v102;
  void *__p;
  _BYTE *v104;
  unsigned int v105;
  char v106;
  unint64_t v107;
  __int128 v108;
  std::__shared_weak_count *v109;
  ptrdiff_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v7 = *a2;
    v8 = *(unsigned __int8 *)(*a2 + 6369);
    v9 = *(unsigned __int8 *)(*a2 + 6370);
    v10 = *(unsigned __int8 *)(*a2 + 6368) << 16;
    v11 = v10 | (v8 << 8);
    if (v11 <= 0x4FF)
    {
      LODWORD(v112) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v112, 4uLL))
        return;
      v7 = *a2;
    }
    v13 = a2[1];
    v12 = (std::__shared_weak_count *)a2[2];
    *(_QWORD *)&v98 = v7;
    *((_QWORD *)&v98 + 1) = v13;
    v99 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v16 = a2[3];
    v100 = v16;
    v17 = v10 | v9 | (v8 << 8);
    if (v17 >= 0x600 && (a3 & 0x2000000000000000) != 0)
    {
      v107 = 0;
      if (v17 > 0x6FF)
      {
        v46 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
        if (v100 < 0 || v100 + 8 > v46)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 770;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v100, v46);
          goto LABEL_73;
        }
        v47 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v100;
        if (v47 < 8 || ((v47 | v100) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 779;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          v92 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v47, v92);
          goto LABEL_73;
        }
        v48 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t))(**((_QWORD **)&v98 + 1) + 32))(*((_QWORD *)&v98 + 1), &v107, 8);
        if ((unint64_t)(v48 + 1) < 2)
          goto LABEL_73;
        v100 += v48;
        v29 = v107;
      }
      else
      {
        LODWORD(v108) = 0;
        v26 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
        if (v100 < 0 || v100 + 4 > v26)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 770;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v100, v26);
          goto LABEL_73;
        }
        v27 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v100;
        if (v27 < 4 || ((v27 | v100) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 779;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          v90 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v27, v90);
          goto LABEL_73;
        }
        v28 = (*(uint64_t (**)(_QWORD, __int128 *, uint64_t))(**((_QWORD **)&v98 + 1) + 32))(*((_QWORD *)&v98 + 1), &v108, 4);
        if ((unint64_t)(v28 + 1) < 2)
          goto LABEL_73;
        v100 += v28;
        v29 = v108;
        v107 = v108;
      }
      if (v29 <= 0xF)
      {
        v49 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v100;
        v50 = (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v107;
        v51 = 8 * v107;
        if (v100 < 0 || (v49 & 0x8000000000000000) != 0 || v107 > v49 || v51 > v49)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "_ReadPossiblyCompressedArray";
          *(_QWORD *)&v113 = 2287;
          *((_QWORD *)&v113 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::val"
                                   "ue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_Cra"
                                   "teFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versi"
                                   "on, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reade"
                                   "r<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = double]";
          LOBYTE(v114) = 0;
          v95 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for possibly compressed (%llu bytes), remaining file size is %lld of %lld", v50, v51, v49, v95);
        }
        else
        {
          *(_QWORD *)&v108 = 0;
          *(_QWORD *)&v112 = &v108;
          sub_20BF57894((unint64_t *)a4, v107, (uint64_t **)&v112);
          sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v52, v53);
          sub_20C2B72E8((_QWORD *)&v98 + 1, *(_QWORD *)(a4 + 32), 8 * v107);
        }
        goto LABEL_73;
      }
      v106 = 0;
      v54 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
      if (v100 < 0 || v100 + 1 > v54)
      {
        *(_QWORD *)&v112 = "usd/crateFile.cpp";
        *((_QWORD *)&v112 + 1) = "Read";
        *(_QWORD *)&v113 = 770;
        *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v114) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 1uLL, v100, v54);
      }
      else
      {
        v55 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
        v56 = v55 - v100;
        if (v55 == v100 || (v56 | v100) < 0)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 779;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          v96 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 1uLL, v56, v96);
        }
        else
        {
          v57 = (*(uint64_t (**)(_QWORD, char *, uint64_t))(**((_QWORD **)&v98 + 1) + 32))(*((_QWORD *)&v98 + 1), &v106, 1);
          if ((unint64_t)(v57 + 1) < 2)
            goto LABEL_73;
          v61 = v100 + v57;
          v100 += v57;
          if (v106 != 116)
          {
            if (v106 != 105)
            {
              *(_QWORD *)&v112 = "usd/crateFile.cpp";
              *((_QWORD *)&v112 + 1) = "_ReadPossiblyCompressedArray";
              *(_QWORD *)&v113 = 2351;
              *((_QWORD *)&v113 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>:"
                                       ":value || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__:"
                                       ":Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crat"
                                       "eFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                                       "rateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = double]";
              LOBYTE(v114) = 0;
              v88 = (const char *)(v98 + 6512);
              if (*(char *)(v98 + 6535) < 0)
                v88 = *(const char **)v88;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Corrupt data stream detected reading compressed array in <%s>", v88);
              goto LABEL_73;
            }
            v108 = v98;
            v109 = v99;
            if (v99)
            {
              v62 = &v99->__shared_owners_;
              do
                v63 = __ldxr((unint64_t *)v62);
              while (__stxr(v63 + 1, (unint64_t *)v62));
              v61 = v100;
            }
            v110 = v61;
            v64 = sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v107);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v108 + 8));
            if ((v64 & 1) == 0)
            {
              *(_QWORD *)&v112 = "usd/crateFile.cpp";
              *((_QWORD *)&v112 + 1) = "_ReadPossiblyCompressedArray";
              *(_QWORD *)&v113 = 2307;
              *((_QWORD *)&v113 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>:"
                                       ":value || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__:"
                                       ":Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crat"
                                       "eFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                                       "rateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = double]";
              LOBYTE(v114) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed ints", v107);
              goto LABEL_73;
            }
            sub_20BDE39A0(&v112, v107);
            v101 = 0;
            __p = &v101;
            sub_20BF57894((unint64_t *)a4, v107, (uint64_t **)&__p);
            sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v65, v66);
            v67 = *(double **)(a4 + 32);
            sub_20C2D3B44((uint64_t)&v98, v112, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)(*((_QWORD *)&v112 + 1) - v112) >> 2));
            v69 = (int *)*((_QWORD *)&v112 + 1);
            v68 = (void *)v112;
            if ((_QWORD)v112 != *((_QWORD *)&v112 + 1))
            {
              v70 = (int *)v112;
              do
              {
                v71 = *v70++;
                *v67++ = (double)v71;
              }
              while (v70 != v69);
            }
            if (!v68)
              goto LABEL_73;
            *((_QWORD *)&v112 + 1) = v68;
LABEL_113:
            operator delete(v68);
            goto LABEL_73;
          }
          v105 = 0;
          if (!sub_20C2B72E8((_QWORD *)&v98 + 1, (uint64_t)&v105, 4uLL))
            goto LABEL_73;
          v72 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          v73 = v72 - v100;
          v74 = v105;
          v75 = 8 * v105;
          if ((v100 & 0x8000000000000000) == 0 && (v73 & 0x8000000000000000) == 0 && v73 >= v105 && v75 <= v73)
          {
            sub_20BDE48D4(&__p, v105);
            sub_20C2B72E8((_QWORD *)&v98 + 1, (uint64_t)__p, v104 - (_BYTE *)__p);
            v108 = v98;
            v109 = v99;
            if (v99)
            {
              v76 = &v99->__shared_owners_;
              do
                v77 = __ldxr((unint64_t *)v76);
              while (__stxr(v77 + 1, (unint64_t *)v76));
            }
            v110 = v100;
            v78 = sub_20C2D2524((pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)v107);
            pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)((char *)&v108 + 8));
            if ((v78 & 1) == 0)
            {
              *(_QWORD *)&v112 = "usd/crateFile.cpp";
              *((_QWORD *)&v112 + 1) = "_ReadPossiblyCompressedArray";
              *(_QWORD *)&v113 = 2333;
              *((_QWORD *)&v113 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>:"
                                       ":value || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__:"
                                       ":Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crat"
                                       "eFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                                       "rateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = double]";
              LOBYTE(v114) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu compressed uints", v107);
              goto LABEL_111;
            }
            sub_20BDE36C4(&v101, v107);
            sub_20C2C5CD0((uint64_t)&v98, v101, (pxrInternal__aapl__pxrReserved__::Usd_IntegerCompression *)((uint64_t)((uint64_t)v102 - v101) >> 2));
            v111 = 0;
            *(_QWORD *)&v112 = &v111;
            sub_20BF57894((unint64_t *)a4, v107, (uint64_t **)&v112);
            sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v79, v80);
            v81 = (unsigned int *)v101;
            v82 = v102;
            if ((unsigned int *)v101 == v102)
            {
LABEL_104:
              if (!v81)
              {
LABEL_111:
                v68 = __p;
                if (!__p)
                  goto LABEL_73;
                v104 = __p;
                goto LABEL_113;
              }
            }
            else
            {
              v83 = *(_QWORD **)(a4 + 32);
              v84 = v105;
              v85 = (unsigned int *)v101;
              v86 = __p;
              while (1)
              {
                v87 = *v85;
                if (v87 >= v84)
                  break;
                *v83++ = v86[v87];
                if (++v85 == v82)
                  goto LABEL_104;
              }
              *(_QWORD *)&v112 = "usd/crateFile.cpp";
              *((_QWORD *)&v112 + 1) = "_ReadPossiblyCompressedArray";
              *(_QWORD *)&v113 = 2343;
              *((_QWORD *)&v113 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>:"
                                       ":value || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__:"
                                       ":Usd_CrateFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, Crat"
                                       "eFile::Version, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::C"
                                       "rateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = double]";
              LOBYTE(v114) = 0;
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to index lut with index %u, out of bounds access", v87);
              v81 = (unsigned int *)v101;
              if (!v101)
                goto LABEL_111;
            }
            v102 = v81;
            operator delete(v81);
            goto LABEL_111;
          }
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "_ReadPossiblyCompressedArray";
          *(_QWORD *)&v113 = 2325;
          *((_QWORD *)&v113 + 1) = "typename std::enable_if<std::is_same<T, GfHalf>::value || std::is_same<T, float>::val"
                                   "ue || std::is_same<T, double>::value>::type pxrInternal__aapl__pxrReserved__::Usd_Cra"
                                   "teFile::_ReadPossiblyCompressedArray(Reader, ValueRep, VtArray<T> *, CrateFile::Versi"
                                   "on, int) [Reader = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reade"
                                   "r<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream>, T = double]";
          LOBYTE(v114) = 0;
          v97 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %u elements for lut (%llu bytes), remaining file size is %lld of %lld", v74, v75, v73, v97);
        }
      }
LABEL_73:
      v58 = v99;
      if (v99)
      {
        v59 = &v99->__shared_owners_;
        do
          v60 = __ldaxr((unint64_t *)v59);
        while (__stlxr(v60 - 1, (unint64_t *)v59));
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      return;
    }
    *(_QWORD *)&v108 = v7;
    *((_QWORD *)&v108 + 1) = *((_QWORD *)&v98 + 1);
    v109 = v99;
    if (v99)
    {
      v19 = &v99->__shared_owners_;
      do
        v20 = __ldxr((unint64_t *)v19);
      while (__stxr(v20 + 1, (unint64_t *)v19));
      v16 = v100;
    }
    v110 = v16;
    v101 = 0;
    if (v11 > 0x6FF)
    {
      v30 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
      if (v16 < 0 || v16 + 8 > v30)
      {
        *(_QWORD *)&v112 = "usd/crateFile.cpp";
        *((_QWORD *)&v112 + 1) = "Read";
        *(_QWORD *)&v113 = 770;
        *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v114) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v16, v30);
      }
      else
      {
        v31 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v16;
        if (v31 < 8 || ((v31 | v16) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 779;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          v91 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v31, v91);
        }
        else
        {
          v32 = (*(uint64_t (**)(_QWORD, unint64_t *, uint64_t, ptrdiff_t))(**((_QWORD **)&v98 + 1)
                                                                                          + 32))(*((_QWORD *)&v98 + 1), &v101, 8, v16);
          if ((unint64_t)(v32 + 1) >= 2)
          {
            v24 = v16 + v32;
            v110 = v24;
            goto LABEL_40;
          }
        }
      }
    }
    else
    {
      LODWORD(__p) = 0;
      v21 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
      if (v16 < 0 || v16 + 4 > v21)
      {
        *(_QWORD *)&v112 = "usd/crateFile.cpp";
        *((_QWORD *)&v112 + 1) = "Read";
        *(_QWORD *)&v113 = 770;
        *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v114) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v16, v21);
      }
      else
      {
        v22 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v16;
        if (v22 < 4 || ((v22 | v16) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v112 = "usd/crateFile.cpp";
          *((_QWORD *)&v112 + 1) = "Read";
          *(_QWORD *)&v113 = 779;
          *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v114) = 0;
          v89 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v22, v89);
        }
        else
        {
          v23 = (*(uint64_t (**)(_QWORD, void **, uint64_t, ptrdiff_t))(**((_QWORD **)&v98 + 1) + 32))(*((_QWORD *)&v98 + 1), &__p, 4, v16);
          if ((unint64_t)(v23 + 1) >= 2)
          {
            v24 = v16 + v23;
            v110 = v24;
            v101 = __p;
LABEL_40:
            v33 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v24;
            v34 = v101;
            v35 = 8 * v101;
            if (v24 < 0 || (v33 & 0x8000000000000000) != 0 || v101 > v33 || v35 > v33)
            {
              *(_QWORD *)&v112 = "usd/crateFile.cpp";
              *((_QWORD *)&v112 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v113 = 2053;
              *((_QWORD *)&v113 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T"
                                       ">::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompresse"
                                       "dArray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal_"
                                       "_aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrRes"
                                       "erved__::Usd_CrateFile::_AssetStream>, T = double]";
              LOBYTE(v114) = 0;
              v93 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v34, v35, v33, v93);
            }
            else
            {
              __p = 0;
              *(_QWORD *)&v112 = &__p;
              sub_20BF57894((unint64_t *)a4, v101, (uint64_t **)&v112);
              sub_20BF57AE4((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v36, v37);
              v38 = *(_QWORD *)(a4 + 32);
              v39 = *(_QWORD *)a4;
              v40 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
              v41 = 8 * v39;
              if (v24 + v41 > v40)
              {
                *(_QWORD *)&v112 = "usd/crateFile.cpp";
                *((_QWORD *)&v112 + 1) = "Read";
                *(_QWORD *)&v113 = 770;
                *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v114) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v41, v24, v40);
              }
              else
              {
                v42 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1)) - v24;
                if (v42 < v41 || ((v42 | v24) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v112 = "usd/crateFile.cpp";
                  *((_QWORD *)&v112 + 1) = "Read";
                  *(_QWORD *)&v113 = 779;
                  *((_QWORD *)&v113 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v114) = 0;
                  v94 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v98 + 1) + 16))(*((_QWORD *)&v98 + 1));
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v112, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v41, v42, v94);
                }
                else
                {
                  v43 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, ptrdiff_t))(**((_QWORD **)&v98 + 1)
                                                                                                + 32))(*((_QWORD *)&v98 + 1), v38, v41, v24);
                  if (v43 != -1 && (!v41 || v43))
                    v110 = v24 + v43;
                }
              }
            }
          }
        }
      }
    }
    if (v99)
    {
      v44 = &v99->__shared_owners_;
      do
        v45 = __ldaxr((unint64_t *)v44);
      while (__stlxr(v45 - 1, (unint64_t *)v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    goto LABEL_73;
  }
  v114 = 0;
  v112 = 0u;
  v113 = 0u;
  if (&v112 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v25 = v113;
    *(_OWORD *)a4 = v112;
    *(_OWORD *)(a4 + 16) = v25;
    v112 = 0u;
    v113 = 0u;
    *(_QWORD *)(a4 + 32) = v114;
    v114 = 0;
  }
  sub_20BF5618C((uint64_t)&v112);
}

void sub_20C2E55A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v21;

  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v21);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2E5650(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530730;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2E56FC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5307B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2E57A8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530830;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2E5854(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5308B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2E5908(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E5944(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2E5968(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2E59C4(*(_QWORD *)(a1 + 16), *(char ***)(a1 + 8), (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2E597C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530790))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E59B8()
{
  return &unk_24C530790;
}

unint64_t sub_20C2E59C4(uint64_t a1, char **a2, char **a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v12;

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C2E5A74(a1, (uint64_t)a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (unsigned __int8 *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v12 = *(unsigned __int8 **)this;
    return pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(a2, v12) | 0x400A000000000000;
  }
}

unint64_t sub_20C2E5A74(uint64_t a1, uint64_t a2, char **a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  char **v19[2];
  char **v20[2];
  uint64_t __src;

  v19[0] = (char **)a2;
  v19[1] = a3;
  result = 0x800A000000000000;
  v18 = 0x800A000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B2DE4(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2E5C04(v9, a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = (char **)a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2E5F0C(*(unsigned __int8 **)(a4 + 32), (unsigned __int8 *)(*(_QWORD *)(a4 + 32) + 24 * *(_QWORD *)a4), v20);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x800A000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2E5F0C(*(unsigned __int8 **)(a4 + 32), (unsigned __int8 *)(*(_QWORD *)(a4 + 32) + 24 * *(_QWORD *)a4), v19);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t *sub_20C2E5C04(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  uint64_t *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char v35;

  v9 = *(_QWORD *)a2;
  LOBYTE(v34) = 1;
  v33 = v9;
  sub_20BFB7FC4((unint64_t)&v33, *(uint64_t **)(a2 + 32), v9);
  v10 = bswap64(0x9E3779B97F4A7C55 * v33);
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if ((sub_20C0080EC(i + 2, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (uint64_t *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = (uint64_t *)v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = (uint64_t)i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = (uint64_t)i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (uint64_t *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2E5EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20C2E5EC8(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2E5EC8(uint64_t a1, _QWORD *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20C008280(__p + 2);
  if (__p)
    operator delete(__p);
}

char ***sub_20C2E5F0C(unsigned __int8 *a1, unsigned __int8 *a2, char ***a3)
{
  unsigned __int8 *v5;
  int __src;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      __src = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a3, v5);
      sub_20C2CE770((uint64_t)a3, (char *)&__src);
      v5 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

__n128 sub_20C2E5F7C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5307B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E5FB8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5307B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2E5FDC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2E606C(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2E6024(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530810))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E6060()
{
  return &unk_24C530810;
}

void sub_20C2E606C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  __int128 v11[2];
  uint64_t v12;
  __n128 v13;
  __int128 v14;
  uint64_t v15;

  if (a3 < 0)
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    v12 = *(_QWORD *)(a2 + 32);
    sub_20C2E615C(a1, v11, a3, (uint64_t)&v13);
    sub_20C1D13C4(a4, &v13);
    sub_20C008280(&v13);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v10 = 0;
    v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    v8 = *(_QWORD *)(a2 + 32);
    sub_20C2E6800((uint64_t *)v7, a3, (uint64_t)&v13);
    *(__n128 *)__p = v13;
    v10 = v14;
    sub_20C1D132C(a4, (__n128 *)__p);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
  }
}

void sub_20C2E612C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  sub_20C008280((_QWORD *)(v20 - 64));
  _Unwind_Resume(a1);
}

void sub_20C2E615C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  ssize_t v10;
  ssize_t v11;
  unint64_t v12;
  ssize_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  pxrInternal__aapl__pxrReserved__ *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 2) = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      v9 = a2[1];
      v18 = *a2;
      v19 = v9;
      v20 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)a2 + 4);
      v24 = 0;
      if (v6 > 0x6FF)
      {
        v13 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v20, (__sFILE *)&v24, (char *)8, v19 + *((_QWORD *)&v18 + 1));
        if (v13 == -1)
          return;
        v11 = v13 + v19;
        *(_QWORD *)&v19 = v13 + v19;
        v12 = v24;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (!sub_20C2CEB84((uint64_t)a2 + 8, 0, (__sFILE *)&v21))
        return;
      v7 = a2[1];
      v18 = *a2;
      v19 = v7;
      v20 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)a2 + 4);
    }
    LODWORD(v21) = 0;
    v10 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v20, (__sFILE *)&v21, (char *)4, v19 + *((_QWORD *)&v18 + 1));
    if (v10 == -1)
      return;
    v11 = v10 + v19;
    *(_QWORD *)&v19 = v10 + v19;
    v12 = v21;
    v24 = v21;
LABEL_13:
    v14 = *((_QWORD *)&v19 + 1) - v11;
    if (v11 < 0 || (v14 & 0x8000000000000000) != 0 || (v12 <= v14 ? (v15 = 24 * v12 > v14) : (v15 = 1), v15))
    {
      *(_QWORD *)&v21 = "usd/crateFile.cpp";
      *((_QWORD *)&v21 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v22 = 2053;
      *((_QWORD *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = std::string]";
      LOBYTE(v23) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v12, 24 * v12, v14, *((_QWORD *)&v19 + 1));
    }
    else
    {
      sub_20C2E6350((unint64_t *)a4, v12);
      sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      sub_20C2E63B0((uint64_t *)&v18, *(std::string **)(a4 + 32), *(_QWORD *)a4);
    }
    return;
  }
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  if (&v21 != (__int128 *)a4)
  {
    sub_20C008280((_QWORD *)a4);
    v8 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v8;
    v21 = 0u;
    v22 = 0u;
    *(_QWORD *)(a4 + 32) = v23;
    v23 = 0;
  }
  sub_20C008280(&v21);
}

void sub_20C2E6334(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C008280((_QWORD *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_20C2E6350(unint64_t *a1, unint64_t a2)
{
  void *__p[2];
  uint64_t v3;
  void **v4;

  __p[0] = 0;
  __p[1] = 0;
  v3 = 0;
  v4 = __p;
  sub_20C2E64E8(a1, a2, (__int128 **)&v4);
  if (SHIBYTE(v3) < 0)
    operator delete(__p[0]);
}

void sub_20C2E6394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C2E63B0(uint64_t *a1, std::string *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t *result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  const std::string *v16;
  _DWORD _C[25];

  if (!a3)
    return (uint64_t *)1;
  v6 = (uint64_t)(a1 + 1);
  _C[0] = -1;
  result = (uint64_t *)sub_20C2CEB84((uint64_t)(a1 + 1), 0, (__sFILE *)_C);
  if ((_DWORD)result)
  {
    v8 = 0;
    while (1)
    {
      v9 = *a1;
      v10 = *(_QWORD *)(*a1 + 144);
      if (_C[0] >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v10) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)result);
        v16 = (const std::string *)&qword_254988388;
      }
      else
      {
        v11 = *(unsigned int *)(v10 + 4 * _C[0]);
        v13 = v9 + 120;
        v12 = *(_QWORD *)(v9 + 120);
        if (v11 >= (*(_QWORD *)(v13 + 8) - v12) >> 3)
        {
          result = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)result);
          v14 = &qword_2549883A8;
        }
        else
        {
          v14 = (uint64_t *)(v12 + 8 * v11);
        }
        v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
        v16 = v15
            ? (const std::string *)(v15 + 16)
            : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      }
      std::string::operator=(a2, v16);
      if (a3 - 1 == v8)
        break;
      ++a2;
      _C[0] = -1;
      result = (uint64_t *)sub_20C2CEB84(v6, 0, (__sFILE *)_C);
      ++v8;
      if (!(_DWORD)result)
        return (uint64_t *)(v8 >= a3);
    }
    return (uint64_t *)1;
  }
  return result;
}

void sub_20C2E64E8(unint64_t *a1, unint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __int128 *v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  __int128 *v18;
  _QWORD *v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 *v26;
  uint64_t v27;
  _QWORD *v28;
  __int128 v29;
  uint64_t v30;

  v3 = *a1;
  if (*a1 == a2)
    return;
  if (!a2)
    goto LABEL_22;
  v7 = (_QWORD *)a1[4];
  if (v7)
  {
    if (!a1[3])
    {
      v8 = atomic_load(v7 - 2);
      if (v8 == 1)
      {
        if (v3 >= a2)
        {
          v30 = 3 * a2;
          do
          {
            if (SHIBYTE(v7[v30 + 2]) < 0)
              operator delete((void *)v7[v30]);
            v30 += 3;
          }
          while (3 * v3 != v30);
        }
        else
        {
          v9 = a1[4];
          if (*(_QWORD *)(v9 - 8) < a2)
          {
            v7 = sub_20C008558((uint64_t)a1, a2);
            sub_20C0086AC(v9, v9 + 24 * v3, (uint64_t)v7);
          }
          v10 = 0;
          v11 = 3 * v3;
          v12 = &v7[3 * v3];
          v13 = *a3;
          v14 = 24 * a2 - 8 * v11;
          do
          {
            v15 = &v12[v10 / 8];
            if (*((char *)v13 + 23) < 0)
            {
              sub_20BDDBFAC(v15, *(void **)v13, *((_QWORD *)v13 + 1));
            }
            else
            {
              v16 = *v13;
              v15[2] = *((_QWORD *)v13 + 2);
              *(_OWORD *)v15 = v16;
            }
            v10 += 24;
          }
          while (v14 != v10);
        }
        goto LABEL_38;
      }
      v7 = (_QWORD *)a1[4];
    }
    v21 = (uint64_t)v7;
    if (v3 >= a2)
      v22 = a2;
    else
      v22 = *a1;
    v7 = sub_20C008558((uint64_t)a1, a2);
    sub_20C0086AC(v21, v21 + 24 * v22, (uint64_t)v7);
    if (v3 < a2)
    {
      v23 = 0;
      v24 = 3 * v3;
      v25 = &v7[3 * v3];
      v26 = *a3;
      v27 = 24 * a2 - 8 * v24;
      do
      {
        v28 = &v25[v23 / 8];
        if (*((char *)v26 + 23) < 0)
        {
          sub_20BDDBFAC(v28, *(void **)v26, *((_QWORD *)v26 + 1));
        }
        else
        {
          v29 = *v26;
          v28[2] = *((_QWORD *)v26 + 2);
          *(_OWORD *)v28 = v29;
        }
        v23 += 24;
      }
      while (v27 != v23);
    }
    goto LABEL_38;
  }
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
  {
LABEL_22:
    sub_20C008340(a1);
    return;
  }
  v7 = sub_20C008558((uint64_t)a1, a2);
  v17 = 0;
  v18 = *a3;
  do
  {
    v19 = &v7[v17];
    if (*((char *)v18 + 23) < 0)
    {
      sub_20BDDBFAC(v19, *(void **)v18, *((_QWORD *)v18 + 1));
    }
    else
    {
      v20 = *v18;
      v19[2] = *((_QWORD *)v18 + 2);
      *(_OWORD *)v19 = v20;
    }
    v17 += 3;
  }
  while (3 * a2 != v17);
LABEL_38:
  if (v7 != (_QWORD *)a1[4])
  {
    sub_20C008280(a1);
    a1[4] = (unint64_t)v7;
  }
  *a1 = a2;
}

void sub_20C2E6748(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v1; v1 -= 24)
  {
    if (*(char *)(v2 + 23) < 0)
      operator delete(*(void **)v2);
    v2 += 24;
  }
  __cxa_rethrow();
}

void sub_20C2E6770()
{
  __break(1u);
}

void sub_20C2E67EC()
{
  __cxa_end_catch();
  JUMPOUT(0x20C2E67F4);
}

void sub_20C2E6800(uint64_t *EmptyToken@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *EmptyString;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v15;
  _QWORD *v16;
  _QWORD v17[4];
  char v18;

  v4 = *EmptyToken;
  v5 = *(_QWORD *)(*EmptyToken + 144);
  if (a2 >= (unint64_t)((*(_QWORD *)(*EmptyToken + 152) - v5) >> 2))
  {
    v15 = atomic_load((unsigned __int8 *)&qword_25473C9C0);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25473C9C0))
    {
      v16 = operator new(0x18uLL);
      sub_20BDDC0E4(v16, "");
      off_25473C9B8 = v16;
      __cxa_guard_release(&qword_25473C9C0);
    }
    v17[0] = "usd/crateFile.cpp";
    v17[1] = "GetUninlinedValue";
    v17[2] = 1223;
    v17[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
             "_CrateFile::_PreadStream>::GetUninlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__"
             "::Usd_CrateFile::_PreadStream, T = std::string]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get string for index %u", a2);
    if (*((char *)off_25473C9B8 + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a3, *(void **)off_25473C9B8, *((_QWORD *)off_25473C9B8 + 1));
      return;
    }
    v12 = *(_OWORD *)off_25473C9B8;
    v13 = *((_QWORD *)off_25473C9B8 + 2);
  }
  else
  {
    v6 = *(unsigned int *)(v5 + 4 * a2);
    v8 = v4 + 120;
    v7 = *(_QWORD *)(v4 + 120);
    if (v6 >= (*(_QWORD *)(v8 + 8) - v7) >> 3)
    {
      EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
      v9 = &qword_2549883A8;
    }
    else
    {
      v9 = (uint64_t *)(v7 + 8 * v6);
    }
    v10 = *v9 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
      EmptyString = (uint64_t *)(v10 + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a3, (void *)*EmptyString, EmptyString[1]);
      return;
    }
    v12 = *(_OWORD *)EmptyString;
    v13 = EmptyString[2];
  }
  *(_QWORD *)(a3 + 16) = v13;
  *(_OWORD *)a3 = v12;
}

void sub_20C2E6974(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_guard_abort(&qword_25473C9C0);
  _Unwind_Resume(a1);
}

__n128 sub_20C2E69A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E69E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2E6A04(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2E6A54((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2E6A0C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530890))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E6A48()
{
  return &unk_24C530890;
}

void sub_20C2E6A54(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2E6AD0(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2E6AD0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  __int128 v11[2];
  uint64_t v12;
  __n128 v13;
  __int128 v14;
  uint64_t v15;

  if (a3 < 0)
  {
    v15 = 0;
    v13 = 0u;
    v14 = 0u;
    v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    v12 = *(_QWORD *)(a2 + 32);
    sub_20C2E6BC0(a1, v11, a3, (uint64_t)&v13);
    sub_20C1D13C4(a4, &v13);
    sub_20C008280(&v13);
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v10 = 0;
    v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    v8 = *(_QWORD *)(a2 + 32);
    sub_20C2E6EE8((uint64_t *)v7, a3, (uint64_t)&v13);
    *(__n128 *)__p = v13;
    v10 = v14;
    sub_20C1D132C(a4, (__n128 *)__p);
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
  }
}

void sub_20C2E6B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  sub_20C008280((_QWORD *)(v20 - 64));
  _Unwind_Resume(a1);
}

void sub_20C2E6BC0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 __dst;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      v9 = a2[1];
      v17 = *a2;
      v18 = v9;
      v19 = *((_QWORD *)a2 + 4);
      v23 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v17 + 8, &v23, 8uLL))
          return;
        v10 = v23;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(__dst) = 0;
      if (!sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL))
        return;
      v7 = a2[1];
      v17 = *a2;
      v18 = v7;
      v19 = *((_QWORD *)a2 + 4);
    }
    LODWORD(__dst) = 0;
    if (!sub_20C2B9BEC((uint64_t)&v17 + 8, &__dst, 4uLL))
      return;
    v10 = __dst;
    v23 = __dst;
LABEL_13:
    v11 = *(_QWORD *)(*(_QWORD *)v18 + 32);
    v12 = *((_QWORD *)&v17 + 1) - *(_QWORD *)(*(_QWORD *)v18 + 24);
    v13 = v11 - v12;
    if (v12 < 0 || (v13 & 0x8000000000000000) != 0 || (v10 <= v13 ? (v14 = 24 * v10 > v13) : (v14 = 1), v14))
    {
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v21 = 2053;
      *((_QWORD *)&v21 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<"
                              "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = std::string]";
      LOBYTE(v22) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v10, 24 * v10, v13, v11);
    }
    else
    {
      sub_20C2E6350((unint64_t *)a4, v10);
      sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
      sub_20C2E6DB0((uint64_t *)&v17, *(std::string **)(a4 + 32), *(_QWORD *)a4);
    }
    return;
  }
  v22 = 0;
  __dst = 0u;
  v21 = 0u;
  if (&__dst != (__int128 *)a4)
  {
    sub_20C008280((_QWORD *)a4);
    v8 = v21;
    *(_OWORD *)a4 = __dst;
    *(_OWORD *)(a4 + 16) = v8;
    __dst = 0u;
    v21 = 0u;
    *(_QWORD *)(a4 + 32) = v22;
    v22 = 0;
  }
  sub_20C008280(&__dst);
}

void sub_20C2E6D94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C008280((_QWORD *)(v1 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_20C2E6DB0(uint64_t *a1, std::string *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  const std::string *v16;
  unsigned int __dst;

  if (!a3)
    return 1;
  v6 = (uint64_t)(a1 + 1);
  __dst = -1;
  result = sub_20C2B9BEC((uint64_t)(a1 + 1), &__dst, 4uLL);
  if ((_DWORD)result)
  {
    v8 = 0;
    while (1)
    {
      v9 = *a1;
      v10 = *(_QWORD *)(*a1 + 144);
      if (__dst >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v10) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)result);
        v16 = (const std::string *)&qword_254988388;
      }
      else
      {
        v11 = *(unsigned int *)(v10 + 4 * __dst);
        v13 = v9 + 120;
        v12 = *(_QWORD *)(v9 + 120);
        if (v11 >= (*(_QWORD *)(v13 + 8) - v12) >> 3)
        {
          result = (uint64_t)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)result);
          v14 = &qword_2549883A8;
        }
        else
        {
          v14 = (uint64_t *)(v12 + 8 * v11);
        }
        v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
        v16 = v15
            ? (const std::string *)(v15 + 16)
            : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      }
      std::string::operator=(a2, v16);
      if (a3 - 1 == v8)
        break;
      ++a2;
      __dst = -1;
      result = sub_20C2B9BEC(v6, &__dst, 4uLL);
      ++v8;
      if (!(_DWORD)result)
        return v8 >= a3;
    }
    return 1;
  }
  return result;
}

void sub_20C2E6EE8(uint64_t *EmptyToken@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *EmptyString;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v15;
  _QWORD *v16;
  _QWORD v17[4];
  char v18;

  v4 = *EmptyToken;
  v5 = *(_QWORD *)(*EmptyToken + 144);
  if (a2 >= (unint64_t)((*(_QWORD *)(*EmptyToken + 152) - v5) >> 2))
  {
    v15 = atomic_load((unsigned __int8 *)&qword_25473C9D0);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25473C9D0))
    {
      v16 = operator new(0x18uLL);
      sub_20BDDC0E4(v16, "");
      off_25473C9C8 = v16;
      __cxa_guard_release(&qword_25473C9D0);
    }
    v17[0] = "usd/crateFile.cpp";
    v17[1] = "GetUninlinedValue";
    v17[2] = 1223;
    v17[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
             "_CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::GetUn"
             "inlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxr"
             "Internal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>, T = std::string]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get string for index %u", a2);
    if (*((char *)off_25473C9C8 + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a3, *(void **)off_25473C9C8, *((_QWORD *)off_25473C9C8 + 1));
      return;
    }
    v12 = *(_OWORD *)off_25473C9C8;
    v13 = *((_QWORD *)off_25473C9C8 + 2);
  }
  else
  {
    v6 = *(unsigned int *)(v5 + 4 * a2);
    v8 = v4 + 120;
    v7 = *(_QWORD *)(v4 + 120);
    if (v6 >= (*(_QWORD *)(v8 + 8) - v7) >> 3)
    {
      EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
      v9 = &qword_2549883A8;
    }
    else
    {
      v9 = (uint64_t *)(v7 + 8 * v6);
    }
    v10 = *v9 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
      EmptyString = (uint64_t *)(v10 + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a3, (void *)*EmptyString, EmptyString[1]);
      return;
    }
    v12 = *(_OWORD *)EmptyString;
    v13 = EmptyString[2];
  }
  *(_QWORD *)(a3 + 16) = v13;
  *(_OWORD *)a3 = v12;
}

void sub_20C2E705C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_guard_abort(&qword_25473C9D0);
  _Unwind_Resume(a1);
}

__n128 sub_20C2E708C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5308B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E70C8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5308B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2E70EC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2E7144((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2E70FC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530910))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E7138()
{
  return &unk_24C530910;
}

void sub_20C2E7144(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2E7260(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2E7244(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2E7260(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  void *__p[2];
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  uint64_t v27;

  if (a3 < 0)
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    v22 = *a2;
    v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v23 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    v24 = *((_QWORD *)a2 + 3);
    sub_20C2E7428(a1, &v22, a3, (uint64_t)&v25);
    v14 = v23;
    if (v23)
    {
      v15 = (unint64_t *)&v23->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    sub_20C1D13C4(a4, &v25);
    sub_20C008280(&v25);
  }
  else
  {
    v17 = *a2;
    v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v18 = v5;
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v19 = *((_QWORD *)a2 + 3);
    sub_20C2E7A4C((uint64_t *)&v17, a3, (uint64_t)&v25);
    v8 = v18;
    *(__n128 *)__p = v25;
    v21 = v26;
    if (v18)
    {
      v9 = (unint64_t *)&v18->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    sub_20C1D132C(a4, (__n128 *)__p);
    if (SHIBYTE(v21) < 0)
      operator delete(__p[0]);
  }
}

void sub_20C2E73D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  sub_20C008280((_QWORD *)(v18 - 64));
  _Unwind_Resume(a1);
}

void sub_20C2E7428(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  ptrdiff_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  ptrdiff_t v39;
  unsigned int v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = *a2;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 <= 0x4FF)
    {
      LODWORD(v42) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v42, 4uLL))
        return;
      v6 = *a2;
    }
    v8 = a2[1];
    v9 = (std::__shared_weak_count *)a2[2];
    v35 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = a2[3];
      v36 = v6;
      v37 = v8;
      v38 = v9;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    else
    {
      v12 = a2[3];
      v36 = v6;
      v37 = v8;
      v38 = 0;
    }
    v39 = v12;
    v41 = 0;
    if (v7 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v39 < 0 || v39 + 8 > v18)
      {
        *(_QWORD *)&v42 = "usd/crateFile.cpp";
        *((_QWORD *)&v42 + 1) = "Read";
        *(_QWORD *)&v43 = 770;
        *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v44) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v39, v18);
        goto LABEL_35;
      }
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37) - v39;
      if (v19 < 8 || ((v19 | v39) & 0x8000000000000000) != 0)
      {
        *(_QWORD *)&v42 = "usd/crateFile.cpp";
        *((_QWORD *)&v42 + 1) = "Read";
        *(_QWORD *)&v43 = 779;
        *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v44) = 0;
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v33);
        goto LABEL_35;
      }
      v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v37 + 32))(v37, &v41, 8);
      if ((unint64_t)(v20 + 1) < 2)
        goto LABEL_35;
      v39 += v20;
    }
    else
    {
      v40 = 0;
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v39 < 0 || v39 + 4 > v15)
      {
        *(_QWORD *)&v42 = "usd/crateFile.cpp";
        *((_QWORD *)&v42 + 1) = "Read";
        *(_QWORD *)&v43 = 770;
        *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v44) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v39, v15);
        goto LABEL_35;
      }
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37) - v39;
      if (v16 < 4 || ((v16 | v39) & 0x8000000000000000) != 0)
      {
        *(_QWORD *)&v42 = "usd/crateFile.cpp";
        *((_QWORD *)&v42 + 1) = "Read";
        *(_QWORD *)&v43 = 779;
        *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v44) = 0;
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v16, v32);
        goto LABEL_35;
      }
      v17 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v37 + 32))(v37, &v40, 4);
      if ((unint64_t)(v17 + 1) < 2)
        goto LABEL_35;
      v39 += v17;
      v41 = v40;
    }
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37) - v39;
    v22 = v41;
    v23 = 24 * v41;
    if (v39 < 0 || (v21 & 0x8000000000000000) != 0 || (v41 <= v21 ? (v24 = v23 > v21) : (v24 = 1), v24))
    {
      *(_QWORD *)&v42 = "usd/crateFile.cpp";
      *((_QWORD *)&v42 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v43 = 2053;
      *((_QWORD *)&v43 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream"
                              ">, T = std::string]";
      LOBYTE(v44) = 0;
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v34);
    }
    else
    {
      sub_20C2E6350((unint64_t *)a4, v41);
      sub_20C008768((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v25, v26);
      sub_20C2E7914(&v36, *(std::string **)(a4 + 32), *(_QWORD *)a4);
    }
LABEL_35:
    v27 = v38;
    if (v38)
    {
      v28 = (unint64_t *)&v38->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (v35)
    {
      v30 = (unint64_t *)&v35->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    return;
  }
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  if (&v42 != (__int128 *)a4)
  {
    sub_20C008280((_QWORD *)a4);
    v14 = v43;
    *(_OWORD *)a4 = v42;
    *(_OWORD *)(a4 + 16) = v14;
    v42 = 0u;
    v43 = 0u;
    *(_QWORD *)(a4 + 32) = v44;
    v44 = 0;
  }
  sub_20C008280(&v42);
}

void sub_20C2E78E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C008280((_QWORD *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_20C2E7914(_QWORD *a1, std::string *a2, unint64_t a3)
{
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  const std::string *v16;
  unsigned int v17;

  if (!a3)
    return 1;
  v6 = a1 + 1;
  v17 = -1;
  result = sub_20C2B72E8(a1 + 1, (uint64_t)&v17, 4uLL);
  if ((_DWORD)result)
  {
    v8 = 0;
    while (1)
    {
      v9 = *a1;
      v10 = *(_QWORD *)(*a1 + 144);
      if (v17 >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v10) >> 2))
      {
        pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)result);
        v16 = (const std::string *)&qword_254988388;
      }
      else
      {
        v11 = *(unsigned int *)(v10 + 4 * v17);
        v13 = v9 + 120;
        v12 = *(_QWORD *)(v9 + 120);
        if (v11 >= (*(_QWORD *)(v13 + 8) - v12) >> 3)
        {
          result = (uint64_t)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)result);
          v14 = &qword_2549883A8;
        }
        else
        {
          v14 = (uint64_t *)(v12 + 8 * v11);
        }
        v15 = *v14 & 0xFFFFFFFFFFFFFFF8;
        v16 = v15
            ? (const std::string *)(v15 + 16)
            : (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
      }
      std::string::operator=(a2, v16);
      if (a3 - 1 == v8)
        break;
      ++a2;
      v17 = -1;
      result = sub_20C2B72E8(v6, (uint64_t)&v17, 4uLL);
      ++v8;
      if (!(_DWORD)result)
        return v8 >= a3;
    }
    return 1;
  }
  return result;
}

void sub_20C2E7A4C(uint64_t *EmptyToken@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *EmptyString;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v15;
  _QWORD *v16;
  _QWORD v17[4];
  char v18;

  v4 = *EmptyToken;
  v5 = *(_QWORD *)(*EmptyToken + 144);
  if (a2 >= (unint64_t)((*(_QWORD *)(*EmptyToken + 152) - v5) >> 2))
  {
    v15 = atomic_load((unsigned __int8 *)&qword_25473C9E0);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25473C9E0))
    {
      v16 = operator new(0x18uLL);
      sub_20BDDC0E4(v16, "");
      off_25473C9D8 = v16;
      __cxa_guard_release(&qword_25473C9E0);
    }
    v17[0] = "usd/crateFile.cpp";
    v17[1] = "GetUninlinedValue";
    v17[2] = 1223;
    v17[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
             "_CrateFile::_AssetStream>::GetUninlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__"
             "::Usd_CrateFile::_AssetStream, T = std::string]";
    v18 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v17, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get string for index %u", a2);
    if (*((char *)off_25473C9D8 + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a3, *(void **)off_25473C9D8, *((_QWORD *)off_25473C9D8 + 1));
      return;
    }
    v12 = *(_OWORD *)off_25473C9D8;
    v13 = *((_QWORD *)off_25473C9D8 + 2);
  }
  else
  {
    v6 = *(unsigned int *)(v5 + 4 * a2);
    v8 = v4 + 120;
    v7 = *(_QWORD *)(v4 + 120);
    if (v6 >= (*(_QWORD *)(v8 + 8) - v7) >> 3)
    {
      EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
      v9 = &qword_2549883A8;
    }
    else
    {
      v9 = (uint64_t *)(v7 + 8 * v6);
    }
    v10 = *v9 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
      EmptyString = (uint64_t *)(v10 + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
    if (*((char *)EmptyString + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a3, (void *)*EmptyString, EmptyString[1]);
      return;
    }
    v12 = *(_OWORD *)EmptyString;
    v13 = EmptyString[2];
  }
  *(_QWORD *)(a3 + 16) = v13;
  *(_OWORD *)a3 = v12;
}

void sub_20C2E7BC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  __cxa_guard_abort(&qword_25473C9E0);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2E7BE8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530930;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2E7C94(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5309B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2E7D40(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530A30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2E7DEC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530AB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2E7EA0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E7EDC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2E7F00(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2E7F5C(*(_QWORD *)(a1 + 16), *(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8), (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328)+ 256), a2);
}

uint64_t sub_20C2E7F14(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530990))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E7F50()
{
  return &unk_24C530990;
}

unint64_t sub_20C2E7F5C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;

  v4 = this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *(_QWORD *)v4;
    return sub_20C2E800C(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    return pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken(a2, v4) | 0x400B000000000000;
  }
}

unint64_t sub_20C2E800C(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v19[2];
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v20[2];
  unint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x800B000000000000;
  v18 = 0x800B000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B2E88(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2E8194(v9, (unint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *((_QWORD *)a2 + 791);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2E84A4(*(pxrInternal__aapl__pxrReserved__::TfToken **)(a4 + 32), (pxrInternal__aapl__pxrReserved__::TfToken *)(*(_QWORD *)(a4 + 32) + 8 * *(_QWORD *)a4), v20);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x800B000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2E84A4(*(pxrInternal__aapl__pxrReserved__::TfToken **)(a4 + 32), (pxrInternal__aapl__pxrReserved__::TfToken *)(*(_QWORD *)(a4 + 32) + 8 * *(_QWORD *)a4), v19);
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C2E8194(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8x8_t v15;
  unint64_t v16;
  _QWORD **v17;
  _QWORD *i;
  unint64_t v19;
  _QWORD *v20;
  void *v21;
  __int128 v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  size_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v34;

  v9 = *a2;
  if (*a2)
  {
    v10 = (uint64_t *)a2[4];
    v11 = *a2;
    do
    {
      v12 = *v10++;
      v9 = (v12 & 0xFFFFFFFFFFFFFFF8)
         + (((v12 & 0xFFFFFFFFFFFFFFF8)
           + v9
           + ((v12 & 0xFFFFFFFFFFFFFFF8) + v9) * ((v12 & 0xFFFFFFFFFFFFFFF8) + v9)) >> 1);
      --v11;
    }
    while (v11);
    v9 *= 0x9E3779B97F4A7C55;
  }
  v13 = bswap64(v9);
  v14 = *(_QWORD *)(a1 + 8);
  if (v14)
  {
    v15 = (uint8x8_t)vcnt_s8((int8x8_t)v14);
    v15.i16[0] = vaddlv_u8(v15);
    v16 = v15.u32[0];
    if (v15.u32[0] > 1uLL)
    {
      v4 = v13;
      if (v13 >= v14)
        v4 = v13 % v14;
    }
    else
    {
      v4 = (v14 - 1) & v13;
    }
    v17 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v17)
    {
      for (i = *v17; i; i = (_QWORD *)*i)
      {
        v19 = i[1];
        if (v19 == v13)
        {
          if (sub_20C009028(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v16 > 1)
          {
            if (v19 >= v14)
              v19 %= v14;
          }
          else
          {
            v19 &= v14 - 1;
          }
          if (v19 != v4)
            break;
        }
      }
    }
  }
  v20 = (_QWORD *)(a1 + 16);
  v21 = operator new(0x40uLL);
  i = v21;
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = v13;
  v22 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v21 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v21 + 2) = v22;
  v23 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v21 + 6) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 - 16);
    if (*((_QWORD *)v21 + 5))
      v24 = (unint64_t *)*((_QWORD *)v21 + 5);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *((_QWORD *)v21 + 7) = *a4;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v14 || (float)(v27 * (float)v14) < v26)
  {
    v28 = 1;
    if (v14 >= 3)
      v28 = (v14 & (v14 - 1)) != 0;
    v29 = v28 | (2 * v14);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      v31 = v30;
    else
      v31 = v29;
    sub_20BDEC6E0(a1, v31);
    v14 = *(_QWORD *)(a1 + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v13 >= v14)
        v4 = v13 % v14;
      else
        v4 = v13;
    }
    else
    {
      v4 = (v14 - 1) & v13;
    }
  }
  v32 = *(_QWORD *)a1;
  v33 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v33)
  {
    *i = *v33;
LABEL_46:
    *v33 = i;
    goto LABEL_47;
  }
  *i = *v20;
  *v20 = i;
  *(_QWORD *)(v32 + 8 * v4) = v20;
  if (*i)
  {
    v34 = *(_QWORD *)(*i + 8);
    if ((v14 & (v14 - 1)) != 0)
    {
      if (v34 >= v14)
        v34 %= v14;
    }
    else
    {
      v34 &= v14 - 1;
    }
    v33 = (_QWORD *)(*(_QWORD *)a1 + 8 * v34);
    goto LABEL_46;
  }
LABEL_47:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2E8444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20C2E8460(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2E8460(uint64_t a1, _QWORD *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20C00918C(__p + 2);
  if (__p)
    operator delete(__p);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **sub_20C2E84A4(pxrInternal__aapl__pxrReserved__::TfToken *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a3)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  int __src;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      __src = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken(*a3, v5);
      sub_20C2CE770((uint64_t)a3, (char *)&__src);
      v5 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v5 + 8);
    }
    while (v5 != a2);
  }
  return a3;
}

__n128 sub_20C2E8514(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5309B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E8550(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5309B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2E8574(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2E8604(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2E85BC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530A10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E85F8()
{
  return &unk_24C530A10;
}

void sub_20C2E8604(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  unint64_t v11;
  __int128 v12[2];
  uint64_t v13;
  __n128 v14[2];
  uint64_t v15;

  if (a3 < 0)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v8 = *(_OWORD *)(a2 + 16);
    v12[0] = *(_OWORD *)a2;
    v12[1] = v8;
    v13 = *(_QWORD *)(a2 + 32);
    sub_20C2E8704(a1, v12, a3, (uint64_t)v14);
    sub_20C1D16B4(a4, v14);
    sub_20C00918C(v14);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v5;
    v10 = *(_QWORD *)(a2 + 32);
    v11 = 0;
    sub_20C2E8A30((uint64_t)v9, a3, (unsigned int **)v14);
    v11 = v14[0].n128_u64[0];
    sub_20C1D1618((uint64_t *)a4, (uint64_t *)&v11);
    if ((v11 & 7) != 0)
    {
      v6 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
}

void sub_20C2E86C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00918C((_QWORD *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_20C2E8704(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  ssize_t v10;
  ssize_t v11;
  unint64_t v12;
  ssize_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  pxrInternal__aapl__pxrReserved__ *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  unint64_t v24;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 2) = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      v9 = a2[1];
      v18 = *a2;
      v19 = v9;
      v20 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)a2 + 4);
      v24 = 0;
      if (v6 > 0x6FF)
      {
        v13 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v20, (__sFILE *)&v24, (char *)8, v19 + *((_QWORD *)&v18 + 1));
        if (v13 == -1)
          return;
        v11 = v13 + v19;
        *(_QWORD *)&v19 = v13 + v19;
        v12 = v24;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v21) = 0;
      if (!sub_20C2CEB84((uint64_t)a2 + 8, 0, (__sFILE *)&v21))
        return;
      v7 = a2[1];
      v18 = *a2;
      v19 = v7;
      v20 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)a2 + 4);
    }
    LODWORD(v21) = 0;
    v10 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v20, (__sFILE *)&v21, (char *)4, v19 + *((_QWORD *)&v18 + 1));
    if (v10 == -1)
      return;
    v11 = v10 + v19;
    *(_QWORD *)&v19 = v10 + v19;
    v12 = v21;
    v24 = v21;
LABEL_13:
    v14 = *((_QWORD *)&v19 + 1) - v11;
    if (v11 < 0 || (v14 & 0x8000000000000000) != 0 || (v12 <= v14 ? (v15 = 8 * v12 > v14) : (v15 = 1), v15))
    {
      *(_QWORD *)&v21 = "usd/crateFile.cpp";
      *((_QWORD *)&v21 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v22 = 2053;
      *((_QWORD *)&v22 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::TfToken]";
      LOBYTE(v23) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v12, 8 * v12, v14, *((_QWORD *)&v19 + 1));
    }
    else
    {
      sub_20C2E88F4((uint64_t *)a4, v12);
      sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      sub_20C2E8960((uint64_t)&v18, *(_QWORD **)(a4 + 32), *(_QWORD *)a4);
    }
    return;
  }
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  if (&v21 != (__int128 *)a4)
  {
    sub_20C00918C((_QWORD *)a4);
    v8 = v22;
    *(_OWORD *)a4 = v21;
    *(_OWORD *)(a4 + 16) = v8;
    v21 = 0u;
    v22 = 0u;
    *(_QWORD *)(a4 + 32) = v23;
    v23 = 0;
  }
  sub_20C00918C(&v21);
}

void sub_20C2E88D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00918C((_QWORD *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_20C2E88F4(uint64_t *a1, unint64_t a2)
{
  unsigned int *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t *v5;

  v4 = 0;
  v5 = &v4;
  sub_20C0092D4(a1, a2, &v5);
  if ((v4 & 7) != 0)
  {
    v2 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

BOOL sub_20C2E8960(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  _DWORD _C[21];

  if (a3)
  {
    v6 = a1 + 8;
    _C[0] = -1;
    v7 = 0;
    if (sub_20C2CEB84(a1 + 8, 0, (__sFILE *)_C))
    {
      v8 = 1;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)a1 + 120);
        if (_C[0] >= (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 128) - v9) >> 3))
          break;
        sub_20BF32220(a2, (_QWORD *)(v9 + 8 * _C[0]));
        if (a3 == v8)
          return 1;
        ++a2;
        v7 = v8 >= a3;
        _C[0] = -1;
        ++v8;
      }
      while (sub_20C2CEB84(v6, 0, (__sFILE *)_C));
    }
  }
  else
  {
    return 1;
  }
  return v7;
}

void sub_20C2E8A30(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int **a3@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int8 v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];
  char v13;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  if (a2 < (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 128) - v4) >> 3))
  {
    v5 = *(unsigned int **)(v4 + 8 * a2);
    *a3 = v5;
    if ((v5 & 7) == 0)
      return;
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    goto LABEL_5;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_25473C9F0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25473C9F0))
  {
    v11 = operator new(8uLL);
    *(_QWORD *)v11 = 0;
    off_25473C9E8 = v11;
    __cxa_guard_release(&qword_25473C9F0);
  }
  v12[0] = "usd/crateFile.cpp";
  v12[1] = "GetUninlinedValue";
  v12[2] = 1234;
  v12[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_C"
           "rateFile::_PreadStream>::GetUninlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::Us"
           "d_CrateFile::_PreadStream, T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v13 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get token for index %u", a2);
  v10 = *(_QWORD *)off_25473C9E8;
  *a3 = *(unsigned int **)off_25473C9E8;
  if ((v10 & 7) != 0)
  {
    v6 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
LABEL_5:
    if ((v7 & 1) == 0)
      *a3 = v6;
  }
}

void sub_20C2E8B54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473C9F0);
  _Unwind_Resume(a1);
}

__n128 sub_20C2E8B74(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E8BB0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2E8BD4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2E8C24((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2E8BDC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530A90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E8C18()
{
  return &unk_24C530A90;
}

void sub_20C2E8C24(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2E8CA0(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2E8CA0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  unsigned int *v6;
  unsigned int v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  unint64_t v11;
  __int128 v12[2];
  uint64_t v13;
  __n128 v14[2];
  uint64_t v15;

  if (a3 < 0)
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    v8 = *(_OWORD *)(a2 + 16);
    v12[0] = *(_OWORD *)a2;
    v12[1] = v8;
    v13 = *(_QWORD *)(a2 + 32);
    sub_20C2E8DA0(a1, v12, a3, (uint64_t)v14);
    sub_20C1D16B4(a4, v14);
    sub_20C00918C(v14);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v5;
    v10 = *(_QWORD *)(a2 + 32);
    v11 = 0;
    sub_20C2E905C((uint64_t)v9, a3, (unsigned int **)v14);
    v11 = v14[0].n128_u64[0];
    sub_20C1D1618((uint64_t *)a4, (uint64_t *)&v11);
    if ((v11 & 7) != 0)
    {
      v6 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
}

void sub_20C2E8D60(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00918C((_QWORD *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_20C2E8DA0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 __dst;
  __int128 v21;
  uint64_t v22;
  unint64_t v23;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      v9 = a2[1];
      v17 = *a2;
      v18 = v9;
      v19 = *((_QWORD *)a2 + 4);
      v23 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v17 + 8, &v23, 8uLL))
          return;
        v10 = v23;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(__dst) = 0;
      if (!sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL))
        return;
      v7 = a2[1];
      v17 = *a2;
      v18 = v7;
      v19 = *((_QWORD *)a2 + 4);
    }
    LODWORD(__dst) = 0;
    if (!sub_20C2B9BEC((uint64_t)&v17 + 8, &__dst, 4uLL))
      return;
    v10 = __dst;
    v23 = __dst;
LABEL_13:
    v11 = *(_QWORD *)(*(_QWORD *)v18 + 32);
    v12 = *((_QWORD *)&v17 + 1) - *(_QWORD *)(*(_QWORD *)v18 + 24);
    v13 = v11 - v12;
    if (v12 < 0 || (v13 & 0x8000000000000000) != 0 || (v10 <= v13 ? (v14 = 8 * v10 > v13) : (v14 = 1), v14))
    {
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v21 = 2053;
      *((_QWORD *)&v21 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<"
                              "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = pxrInter"
                              "nal__aapl__pxrReserved__::TfToken]";
      LOBYTE(v22) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v10, 8 * v10, v13, v11);
    }
    else
    {
      sub_20C2E88F4((uint64_t *)a4, v10);
      sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
      sub_20C2E8F8C((uint64_t)&v17, *(_QWORD **)(a4 + 32), *(_QWORD *)a4);
    }
    return;
  }
  v22 = 0;
  __dst = 0u;
  v21 = 0u;
  if (&__dst != (__int128 *)a4)
  {
    sub_20C00918C((_QWORD *)a4);
    v8 = v21;
    *(_OWORD *)a4 = __dst;
    *(_OWORD *)(a4 + 16) = v8;
    __dst = 0u;
    v21 = 0u;
    *(_QWORD *)(a4 + 32) = v22;
    v22 = 0;
  }
  sub_20C00918C(&__dst);
}

void sub_20C2E8F70(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00918C((_QWORD *)(v1 - 64));
  _Unwind_Resume(a1);
}

BOOL sub_20C2E8F8C(uint64_t a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int __dst;

  if (a3)
  {
    v6 = a1 + 8;
    __dst = -1;
    v7 = 0;
    if (sub_20C2B9BEC(a1 + 8, &__dst, 4uLL))
    {
      v8 = 1;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)a1 + 120);
        if (__dst >= (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 128) - v9) >> 3))
          break;
        sub_20BF32220(a2, (_QWORD *)(v9 + 8 * __dst));
        if (a3 == v8)
          return 1;
        ++a2;
        v7 = v8 >= a3;
        __dst = -1;
        ++v8;
      }
      while (sub_20C2B9BEC(v6, &__dst, 4uLL));
    }
  }
  else
  {
    return 1;
  }
  return v7;
}

void sub_20C2E905C(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int **a3@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int8 v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];
  char v13;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  if (a2 < (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 128) - v4) >> 3))
  {
    v5 = *(unsigned int **)(v4 + 8 * a2);
    *a3 = v5;
    if ((v5 & 7) == 0)
      return;
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    goto LABEL_5;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_25473CA00);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25473CA00))
  {
    v11 = operator new(8uLL);
    *(_QWORD *)v11 = 0;
    off_25473C9F8 = v11;
    __cxa_guard_release(&qword_25473CA00);
  }
  v12[0] = "usd/crateFile.cpp";
  v12[1] = "GetUninlinedValue";
  v12[2] = 1234;
  v12[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_C"
           "rateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::GetUninli"
           "nedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrIntern"
           "al__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v13 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get token for index %u", a2);
  v10 = *(_QWORD *)off_25473C9F8;
  *a3 = *(unsigned int **)off_25473C9F8;
  if ((v10 & 7) != 0)
  {
    v6 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
LABEL_5:
    if ((v7 & 1) == 0)
      *a3 = v6;
  }
}

void sub_20C2E9180(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473CA00);
  _Unwind_Resume(a1);
}

__n128 sub_20C2E91A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E91DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2E9200(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2E9258((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2E9210(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530B10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E924C()
{
  return &unk_24C530B10;
}

void sub_20C2E9258(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2E9374(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2E9358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2E9374(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  __n128 v26[2];
  uint64_t v27;

  if (a3 < 0)
  {
    v27 = 0;
    memset(v26, 0, sizeof(v26));
    v23 = *a2;
    v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v24 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v25 = *((_QWORD *)a2 + 3);
    sub_20C2E9554(a1, &v23, a3, (uint64_t)v26);
    v16 = v24;
    if (v24)
    {
      v17 = (unint64_t *)&v24->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    sub_20C1D16B4(a4, v26);
    sub_20C00918C(v26);
  }
  else
  {
    v19 = *a2;
    v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v20 = v5;
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    v21 = *((_QWORD *)a2 + 3);
    sub_20C2E9B0C((uint64_t)&v19, a3, (unsigned int **)v26);
    v8 = v20;
    v22 = v26[0].n128_u64[0];
    if (v20)
    {
      v9 = (unint64_t *)&v20->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    sub_20C1D1618((uint64_t *)a4, (uint64_t *)&v22);
    if ((v22 & 7) != 0)
    {
      v11 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      do
        v12 = __ldxr(v11);
      while (__stlxr(v12 - 2, v11));
    }
  }
}

void sub_20C2E94F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00918C((_QWORD *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_20C2E9554(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  ptrdiff_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  ptrdiff_t v39;
  unsigned int v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = *a2;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 <= 0x4FF)
    {
      LODWORD(v42) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v42, 4uLL))
        return;
      v6 = *a2;
    }
    v8 = a2[1];
    v9 = (std::__shared_weak_count *)a2[2];
    v35 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = a2[3];
      v36 = v6;
      v37 = v8;
      v38 = v9;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    else
    {
      v12 = a2[3];
      v36 = v6;
      v37 = v8;
      v38 = 0;
    }
    v39 = v12;
    v41 = 0;
    if (v7 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v39 < 0 || v39 + 8 > v18)
      {
        *(_QWORD *)&v42 = "usd/crateFile.cpp";
        *((_QWORD *)&v42 + 1) = "Read";
        *(_QWORD *)&v43 = 770;
        *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v44) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v39, v18);
        goto LABEL_35;
      }
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37) - v39;
      if (v19 < 8 || ((v19 | v39) & 0x8000000000000000) != 0)
      {
        *(_QWORD *)&v42 = "usd/crateFile.cpp";
        *((_QWORD *)&v42 + 1) = "Read";
        *(_QWORD *)&v43 = 779;
        *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v44) = 0;
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v33);
        goto LABEL_35;
      }
      v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v37 + 32))(v37, &v41, 8);
      if ((unint64_t)(v20 + 1) < 2)
        goto LABEL_35;
      v39 += v20;
    }
    else
    {
      v40 = 0;
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v39 < 0 || v39 + 4 > v15)
      {
        *(_QWORD *)&v42 = "usd/crateFile.cpp";
        *((_QWORD *)&v42 + 1) = "Read";
        *(_QWORD *)&v43 = 770;
        *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v44) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v39, v15);
        goto LABEL_35;
      }
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37) - v39;
      if (v16 < 4 || ((v16 | v39) & 0x8000000000000000) != 0)
      {
        *(_QWORD *)&v42 = "usd/crateFile.cpp";
        *((_QWORD *)&v42 + 1) = "Read";
        *(_QWORD *)&v43 = 779;
        *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v44) = 0;
        v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v16, v32);
        goto LABEL_35;
      }
      v17 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v37 + 32))(v37, &v40, 4);
      if ((unint64_t)(v17 + 1) < 2)
        goto LABEL_35;
      v39 += v17;
      v41 = v40;
    }
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37) - v39;
    v22 = v41;
    v23 = 8 * v41;
    if (v39 < 0 || (v21 & 0x8000000000000000) != 0 || (v41 <= v21 ? (v24 = v23 > v21) : (v24 = 1), v24))
    {
      *(_QWORD *)&v42 = "usd/crateFile.cpp";
      *((_QWORD *)&v42 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v43 = 2053;
      *((_QWORD *)&v43 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::TfToken]";
      LOBYTE(v44) = 0;
      v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v34);
    }
    else
    {
      sub_20C2E88F4((uint64_t *)a4, v41);
      sub_20C009618((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v25, v26);
      sub_20C2E9A3C(&v36, *(_QWORD **)(a4 + 32), *(_QWORD *)a4);
    }
LABEL_35:
    v27 = v38;
    if (v38)
    {
      v28 = (unint64_t *)&v38->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (v35)
    {
      v30 = (unint64_t *)&v35->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
    }
    return;
  }
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  if (&v42 != (__int128 *)a4)
  {
    sub_20C00918C((_QWORD *)a4);
    v14 = v43;
    *(_OWORD *)a4 = v42;
    *(_OWORD *)(a4 + 16) = v14;
    v42 = 0u;
    v43 = 0u;
    *(_QWORD *)(a4 + 32) = v44;
    v44 = 0;
  }
  sub_20C00918C(&v42);
}

void sub_20C2E9A08(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00918C((_QWORD *)(v1 - 96));
  _Unwind_Resume(a1);
}

BOOL sub_20C2E9A3C(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  _QWORD *v6;
  BOOL v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v11;

  if (a3)
  {
    v6 = a1 + 1;
    v11 = -1;
    v7 = 0;
    if (sub_20C2B72E8(a1 + 1, (uint64_t)&v11, 4uLL))
    {
      v8 = 1;
      do
      {
        v9 = *(_QWORD *)(*a1 + 120);
        if (v11 >= (unint64_t)((*(_QWORD *)(*a1 + 128) - v9) >> 3))
          break;
        sub_20BF32220(a2, (_QWORD *)(v9 + 8 * v11));
        if (a3 == v8)
          return 1;
        ++a2;
        v7 = v8 >= a3;
        v11 = -1;
        ++v8;
      }
      while (sub_20C2B72E8(v6, (uint64_t)&v11, 4uLL));
    }
  }
  else
  {
    return 1;
  }
  return v7;
}

void sub_20C2E9B0C(uint64_t a1@<X0>, unsigned int a2@<W1>, unsigned int **a3@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned __int8 v9;
  uint64_t v10;
  void *v11;
  _QWORD v12[4];
  char v13;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  if (a2 < (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 128) - v4) >> 3))
  {
    v5 = *(unsigned int **)(v4 + 8 * a2);
    *a3 = v5;
    if ((v5 & 7) == 0)
      return;
    v6 = (unsigned int *)((unint64_t)v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    goto LABEL_5;
  }
  v9 = atomic_load((unsigned __int8 *)&qword_25473CA10);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25473CA10))
  {
    v11 = operator new(8uLL);
    *(_QWORD *)v11 = 0;
    off_25473CA08 = v11;
    __cxa_guard_release(&qword_25473CA10);
  }
  v12[0] = "usd/crateFile.cpp";
  v12[1] = "GetUninlinedValue";
  v12[2] = 1234;
  v12[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_C"
           "rateFile::_AssetStream>::GetUninlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::Us"
           "d_CrateFile::_AssetStream, T = pxrInternal__aapl__pxrReserved__::TfToken]";
  v13 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v12, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get token for index %u", a2);
  v10 = *(_QWORD *)off_25473CA08;
  *a3 = *(unsigned int **)off_25473CA08;
  if ((v10 & 7) != 0)
  {
    v6 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
LABEL_5:
    if ((v7 & 1) == 0)
      *a3 = v6;
  }
}

void sub_20C2E9C30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25473CA10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2E9C48(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530B30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2E9CF4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530BB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2E9DA0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530C30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2E9E4C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530CB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2E9F00(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2E9F3C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2E9F60(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2E9FBC(*(_QWORD *)(a1 + 16), *(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **)(a1 + 8), (char **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2E9F74(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530B90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2E9FB0()
{
  return &unk_24C530B90;
}

unint64_t sub_20C2E9FBC(uint64_t a1, pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *a2, char **a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v12[2];

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C2EA07C(a1, (uint64_t)a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      (*(void (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    v12[0] = a2;
    v12[1] = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)a3;
    return sub_20C2EA550(v12) | 0x400C000000000000;
  }
}

unint64_t sub_20C2EA07C(uint64_t a1, uint64_t a2, char **a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  char **v19[2];
  char **v20[2];
  uint64_t __src;

  v19[0] = (char **)a2;
  v19[1] = a3;
  result = 0x800C000000000000;
  v18 = 0x800C000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B2F2C(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2EA20C(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = (char **)a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2EA4E8(*(unsigned __int8 **)(a4 + 32), (unsigned __int8 *)(*(_QWORD *)(a4 + 32) + 48 * *(_QWORD *)a4), v20);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x800C000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2EA4E8(*(unsigned __int8 **)(a4 + 32), (unsigned __int8 *)(*(_QWORD *)(a4 + 32) + 48 * *(_QWORD *)a4), v19);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t *sub_20C2EA20C(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  uint64_t *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  char v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20C00A4C4((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if ((sub_20C00A5B4(i + 2, (uint64_t)a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (uint64_t *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = (uint64_t *)v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = (uint64_t)i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = (uint64_t)i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (uint64_t *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2EA488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  _QWORD *v10;
  uint64_t v11;

  sub_20C2EA4A4(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2EA4A4(uint64_t a1, _QWORD *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20C00A724(__p + 2);
  if (__p)
    operator delete(__p);
}

char ***sub_20C2EA4E8(unsigned __int8 *a1, unsigned __int8 *a2, char ***a3)
{
  unsigned __int8 *v5;
  int __src;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      __src = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddString(*a3, v5);
      sub_20C2CE770((uint64_t)a3, (char *)&__src);
      v5 += 48;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_20C2EA550(pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile **a1)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v1;
  uint64_t result;
  unsigned int *v3;
  unsigned int v4;
  uint64_t v5;

  v1 = *a1;
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v5);
  result = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_AddToken(v1, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v5);
  if ((v5 & 7) != 0)
  {
    v3 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return result;
}

__n128 sub_20C2EA5D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530BB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2EA610(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530BB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2EA634(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2EA6C4(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2EA67C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530C10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2EA6B8()
{
  return &unk_24C530C10;
}

void sub_20C2EA6C4(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned int v5;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15[2];
  uint64_t v16;
  _BYTE v17[40];
  uint64_t v18;

  v5 = a3;
  if (a3 < 0)
  {
    memset(v17, 0, sizeof(v17));
    v8 = *(_OWORD *)(a2 + 16);
    v15[0] = *(_OWORD *)a2;
    v15[1] = v8;
    v16 = *(_QWORD *)(a2 + 32);
    sub_20C2EA840(a1, v15, a3, (uint64_t)v17);
    sub_20C1D1A90(a4, (__n128 *)v17);
    sub_20C00A724(v17);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)__p);
    v7 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v7;
    v10 = *(_QWORD *)(a2 + 32);
    sub_20C2EAC5C((pxrInternal__aapl__pxrReserved__::TfToken *)v9, v5, (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v17);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)v17;
    v12 = *(_QWORD *)&v17[16];
    v17[23] = 0;
    v17[0] = 0;
    if (SHIBYTE(v14) < 0)
    {
      operator delete((void *)v13);
      v13 = *(_OWORD *)&v17[24];
      v14 = v18;
      HIBYTE(v18) = 0;
      v17[24] = 0;
      if ((v17[23] & 0x80000000) != 0)
        operator delete(*(void **)v17);
    }
    else
    {
      v13 = *(_OWORD *)&v17[24];
      v14 = v18;
    }
    sub_20C1D19D0(a4, (uint64_t)__p);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)v13);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

void sub_20C2EA818(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00A724((_QWORD *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_20C2EA840(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  ssize_t v10;
  ssize_t v11;
  unint64_t v12;
  ssize_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  BOOL v23;
  __int128 v24;
  __int128 v25;
  pxrInternal__aapl__pxrReserved__ *v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 2) = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      v9 = a2[1];
      v24 = *a2;
      v25 = v9;
      v26 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)a2 + 4);
      v30 = 0;
      if (v6 > 0x6FF)
      {
        v13 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v26, (__sFILE *)&v30, (char *)8, v25 + *((_QWORD *)&v24 + 1));
        if (v13 == -1)
          return;
        v11 = v13 + v25;
        *(_QWORD *)&v25 = v13 + v25;
        v12 = v30;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v27) = 0;
      if (!sub_20C2CEB84((uint64_t)a2 + 8, 0, (__sFILE *)&v27))
        return;
      v7 = a2[1];
      v24 = *a2;
      v25 = v7;
      v26 = (pxrInternal__aapl__pxrReserved__ *)*((_QWORD *)a2 + 4);
    }
    LODWORD(v27) = 0;
    v10 = pxrInternal__aapl__pxrReserved__::ArchPRead((FILE *)v26, (__sFILE *)&v27, (char *)4, v25 + *((_QWORD *)&v24 + 1));
    if (v10 == -1)
      return;
    v11 = v10 + v25;
    *(_QWORD *)&v25 = v10 + v25;
    v12 = v27;
    v30 = v27;
LABEL_13:
    v14 = *((_QWORD *)&v25 + 1) - v11;
    if (v11 < 0 || (v14 & 0x8000000000000000) != 0 || (v12 <= v14 ? (v15 = 48 * v12 > v14) : (v15 = 1), v15))
    {
      *(_QWORD *)&v27 = "usd/crateFile.cpp";
      *((_QWORD *)&v27 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v28 = 2053;
      *((_QWORD *)&v28 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
      LOBYTE(v29) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v12, 48 * v12, v14, *((_QWORD *)&v25 + 1));
    }
    else
    {
      sub_20C2EAA54((unint64_t *)a4, v12);
      sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v16, v17);
      v18 = *(_QWORD *)a4;
      if (*(_QWORD *)a4)
      {
        v19 = *(_QWORD *)(a4 + 32);
        v20 = v18 - 1;
        do
        {
          v21 = sub_20C2EAAD8((uint64_t *)&v24, v19);
          v23 = v20-- != 0;
          if (!v21)
            break;
          v19 += 48;
        }
        while (v23);
      }
    }
    return;
  }
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  if (&v27 != (__int128 *)a4)
  {
    sub_20C00A724((_QWORD *)a4);
    v8 = v28;
    *(_OWORD *)a4 = v27;
    *(_OWORD *)(a4 + 16) = v8;
    v27 = 0u;
    v28 = 0u;
    *(_QWORD *)(a4 + 32) = v29;
    v29 = 0;
  }
  sub_20C00A724(&v27);
}

void sub_20C2EAA38(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00A724((_QWORD *)(v1 - 64));
  _Unwind_Resume(a1);
}

void sub_20C2EAA54(unint64_t *a1, unint64_t a2)
{
  void *v4[2];
  char v5;
  void *__p;
  char v7;
  void **v8;

  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v4);
  v8 = v4;
  sub_20C00A890(a1, a2, (__int128 **)&v8);
  if (v7 < 0)
    operator delete(__p);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_20C2EAAC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BE930F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C2EAAD8(uint64_t *a1, uint64_t a2)
{
  uint64_t *EmptyToken;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  const std::string *EmptyString;
  void **v14;
  int v15;
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  std::string v21;

  memset(&v21, 0, sizeof(v21));
  LODWORD(__p[0]) = -1;
  EmptyToken = (uint64_t *)sub_20C2CEB84((uint64_t)(a1 + 1), 0, (__sFILE *)__p);
  v5 = EmptyToken;
  if ((_DWORD)EmptyToken)
  {
    v6 = *a1;
    v7 = *(_QWORD *)(*a1 + 144);
    if (LODWORD(__p[0]) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v7) >> 2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
      EmptyString = (const std::string *)&qword_254988388;
    }
    else
    {
      v8 = *(unsigned int *)(v7 + 4 * LODWORD(__p[0]));
      v10 = v6 + 120;
      v9 = *(_QWORD *)(v6 + 120);
      if (v8 >= (*(_QWORD *)(v10 + 8) - v9) >> 3)
      {
        EmptyToken = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken((pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)EmptyToken);
        v11 = &qword_2549883A8;
      }
      else
      {
        v11 = (uint64_t *)(v9 + 8 * v8);
      }
      v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12)
        EmptyString = (const std::string *)(v12 + 16);
      else
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyToken);
    }
    std::string::operator=(&v21, EmptyString);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p, &v21);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v18;
    HIBYTE(v18) = 0;
    LOBYTE(__p[0]) = 0;
    v14 = (void **)(a2 + 24);
    if (*(char *)(a2 + 47) < 0)
    {
      operator delete(*v14);
      v15 = SHIBYTE(v18);
      *(_OWORD *)v14 = v19;
      *(_QWORD *)(a2 + 40) = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      if (v15 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v14 = v19;
      *(_QWORD *)(a2 + 40) = v20;
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_20C2EAC3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20C2EAC5C@<D0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, unsigned int a2@<W1>, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *EmptyString;
  double result;
  _QWORD v8[4];
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  if (a2 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 128) - v4) >> 3))
  {
    v8[0] = "usd/crateFile.cpp";
    v8[1] = "GetUninlinedValue";
    v8[2] = 1246;
    v8[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_"
            "CrateFile::_PreadStream>::GetUninlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::"
            "Usd_CrateFile::_PreadStream, T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get token for index %u", a2);
    return pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a3);
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 8 * a2) & 0xFFFFFFFFFFFFFFF8;
    if (v5)
      EmptyString = (uint64_t *)(v5 + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a3, EmptyString);
  }
  return result;
}

__n128 sub_20C2EAD18(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530C30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2EAD54(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530C30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2EAD78(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2EADC8((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2EAD80(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530C90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2EADBC()
{
  return &unk_24C530C90;
}

void sub_20C2EADC8(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2EAE44(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2EAE44(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned int v5;
  __int128 v7;
  __int128 v8;
  _OWORD v9[2];
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15[2];
  uint64_t v16;
  _BYTE v17[40];
  uint64_t v18;

  v5 = a3;
  if (a3 < 0)
  {
    memset(v17, 0, sizeof(v17));
    v8 = *(_OWORD *)(a2 + 16);
    v15[0] = *(_OWORD *)a2;
    v15[1] = v8;
    v16 = *(_QWORD *)(a2 + 32);
    sub_20C2EAFC0(a1, v15, a3, (uint64_t)v17);
    sub_20C1D1A90(a4, (__n128 *)v17);
    sub_20C00A724(v17);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)__p);
    v7 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v7;
    v10 = *(_QWORD *)(a2 + 32);
    sub_20C2EB354((pxrInternal__aapl__pxrReserved__::TfToken *)v9, v5, (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v17);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)v17;
    v12 = *(_QWORD *)&v17[16];
    v17[23] = 0;
    v17[0] = 0;
    if (SHIBYTE(v14) < 0)
    {
      operator delete((void *)v13);
      v13 = *(_OWORD *)&v17[24];
      v14 = v18;
      HIBYTE(v18) = 0;
      v17[24] = 0;
      if ((v17[23] & 0x80000000) != 0)
        operator delete(*(void **)v17);
    }
    else
    {
      v13 = *(_OWORD *)&v17[24];
      v14 = v18;
    }
    sub_20C1D19D0(a4, (uint64_t)__p);
    if (SHIBYTE(v14) < 0)
      operator delete((void *)v13);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
  }
}

void sub_20C2EAF98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00A724((_QWORD *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_20C2EAFC0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  BOOL v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 __dst;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF)
    {
      v9 = a2[1];
      v23 = *a2;
      v24 = v9;
      v25 = *((_QWORD *)a2 + 4);
      v29 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v23 + 8, &v29, 8uLL))
          return;
        v10 = v29;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(__dst) = 0;
      if (!sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL))
        return;
      v7 = a2[1];
      v23 = *a2;
      v24 = v7;
      v25 = *((_QWORD *)a2 + 4);
    }
    LODWORD(__dst) = 0;
    if (!sub_20C2B9BEC((uint64_t)&v23 + 8, &__dst, 4uLL))
      return;
    v10 = __dst;
    v29 = __dst;
LABEL_13:
    v11 = *(_QWORD *)(*(_QWORD *)v24 + 32);
    v12 = *((_QWORD *)&v23 + 1) - *(_QWORD *)(*(_QWORD *)v24 + 24);
    v13 = v11 - v12;
    if (v12 < 0 || (v13 & 0x8000000000000000) != 0 || (v10 <= v13 ? (v14 = 48 * v10 > v13) : (v14 = 1), v14))
    {
      *(_QWORD *)&__dst = "usd/crateFile.cpp";
      *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v27 = 2053;
      *((_QWORD *)&v27 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<"
                              "pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>, T = pxrInter"
                              "nal__aapl__pxrReserved__::SdfAssetPath]";
      LOBYTE(v28) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v10, 48 * v10, v13, v11);
    }
    else
    {
      sub_20C2EAA54((unint64_t *)a4, v10);
      sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v15, v16);
      v17 = *(_QWORD *)a4;
      if (*(_QWORD *)a4)
      {
        v18 = *(_QWORD *)(a4 + 32);
        v19 = v17 - 1;
        do
        {
          v20 = sub_20C2EB1D0((uint64_t *)&v23, v18);
          v22 = v19-- != 0;
          if (!v20)
            break;
          v18 += 48;
        }
        while (v22);
      }
    }
    return;
  }
  v28 = 0;
  __dst = 0u;
  v27 = 0u;
  if (&__dst != (__int128 *)a4)
  {
    sub_20C00A724((_QWORD *)a4);
    v8 = v27;
    *(_OWORD *)a4 = __dst;
    *(_OWORD *)(a4 + 16) = v8;
    __dst = 0u;
    v27 = 0u;
    *(_QWORD *)(a4 + 32) = v28;
    v28 = 0;
  }
  sub_20C00A724(&__dst);
}

void sub_20C2EB1B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00A724((_QWORD *)(v1 - 64));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *sub_20C2EB1D0(uint64_t *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *EmptyToken;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  const std::string *EmptyString;
  void **v14;
  int v15;
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  std::string v21;

  memset(&v21, 0, sizeof(v21));
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B9BEC((uint64_t)(a1 + 1), __p, 4uLL);
  v5 = EmptyToken;
  if ((_DWORD)EmptyToken)
  {
    v6 = *a1;
    v7 = *(_QWORD *)(*a1 + 144);
    if (LODWORD(__p[0]) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v7) >> 2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
      EmptyString = (const std::string *)&qword_254988388;
    }
    else
    {
      v8 = *(unsigned int *)(v7 + 4 * LODWORD(__p[0]));
      v10 = v6 + 120;
      v9 = *(_QWORD *)(v6 + 120);
      if (v8 >= (*(_QWORD *)(v10 + 8) - v9) >> 3)
      {
        EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
        v11 = &qword_2549883A8;
      }
      else
      {
        v11 = (uint64_t *)(v9 + 8 * v8);
      }
      v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12)
        EmptyString = (const std::string *)(v12 + 16);
      else
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
    }
    std::string::operator=(&v21, EmptyString);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p, &v21);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v18;
    HIBYTE(v18) = 0;
    LOBYTE(__p[0]) = 0;
    v14 = (void **)(a2 + 24);
    if (*(char *)(a2 + 47) < 0)
    {
      operator delete(*v14);
      v15 = SHIBYTE(v18);
      *(_OWORD *)v14 = v19;
      *(_QWORD *)(a2 + 40) = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      if (v15 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v14 = v19;
      *(_QWORD *)(a2 + 40) = v20;
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_20C2EB334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20C2EB354@<D0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, unsigned int a2@<W1>, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *EmptyString;
  double result;
  _QWORD v8[4];
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  if (a2 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 128) - v4) >> 3))
  {
    v8[0] = "usd/crateFile.cpp";
    v8[1] = "GetUninlinedValue";
    v8[2] = 1246;
    v8[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_"
            "CrateFile::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>>::GetUnin"
            "linedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_MmapStream<pxrInt"
            "ernal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping *>, T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get token for index %u", a2);
    return pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a3);
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 8 * a2) & 0xFFFFFFFFFFFFFFF8;
    if (v5)
      EmptyString = (uint64_t *)(v5 + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a3, EmptyString);
  }
  return result;
}

__n128 sub_20C2EB410(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2EB44C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2EB470(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2EB4C8((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2EB480(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530D10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2EB4BC()
{
  return &unk_24C530D10;
}

void sub_20C2EB4C8(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2EB5E4(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2EB5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2EB5E4(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  unsigned int v5;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  void *__p[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  _BYTE v29[40];
  uint64_t v30;

  v5 = a3;
  if (a3 < 0)
  {
    memset(v29, 0, sizeof(v29));
    v26 = *a2;
    v10 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v27 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v28 = *((_QWORD *)a2 + 3);
    sub_20C2EB840(a1, &v26, a3, (uint64_t)v29);
    v13 = v27;
    if (v27)
    {
      v14 = (unint64_t *)&v27->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    sub_20C1D1A90(a4, (__n128 *)v29);
    sub_20C00A724(v29);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((pxrInternal__aapl__pxrReserved__::SdfAssetPath *)__p);
    v19 = *a2;
    v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v20 = v7;
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v21 = *((_QWORD *)a2 + 3);
    sub_20C2EBED0((pxrInternal__aapl__pxrReserved__::TfToken *)&v19, v5, (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)v29);
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)v29;
    v23 = *(_QWORD *)&v29[16];
    v29[23] = 0;
    v29[0] = 0;
    if (SHIBYTE(v25) < 0)
    {
      operator delete((void *)v24);
      v24 = *(_OWORD *)&v29[24];
      v25 = v30;
      HIBYTE(v30) = 0;
      v29[24] = 0;
      if ((v29[23] & 0x80000000) != 0)
        operator delete(*(void **)v29);
    }
    else
    {
      v24 = *(_OWORD *)&v29[24];
      v25 = v30;
    }
    v16 = v20;
    if (v20)
    {
      v17 = (unint64_t *)&v20->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    sub_20C1D19D0(a4, (uint64_t)__p);
    if (SHIBYTE(v25) < 0)
      operator delete((void *)v24);
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
  }
}

void sub_20C2EB7F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00A724((_QWORD *)(v1 - 80));
  _Unwind_Resume(a1);
}

void sub_20C2EB840(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  ptrdiff_t v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned __int8 v30;
  unsigned __int8 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  ptrdiff_t v45;
  unsigned int v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = *a2;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 <= 0x4FF)
    {
      LODWORD(v48) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v48, 4uLL))
        return;
      v6 = *a2;
    }
    v8 = a2[1];
    v9 = (std::__shared_weak_count *)a2[2];
    v41 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = a2[3];
      v42 = v6;
      v43 = v8;
      v44 = v9;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    else
    {
      v12 = a2[3];
      v42 = v6;
      v43 = v8;
      v44 = 0;
    }
    v45 = v12;
    v47 = 0;
    if (v7 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v45 < 0 || v45 + 8 > v18)
      {
        *(_QWORD *)&v48 = "usd/crateFile.cpp";
        *((_QWORD *)&v48 + 1) = "Read";
        *(_QWORD *)&v49 = 770;
        *((_QWORD *)&v49 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v50) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v45, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43) - v45;
        if (v19 < 8 || ((v19 | v45) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v48 = "usd/crateFile.cpp";
          *((_QWORD *)&v48 + 1) = "Read";
          *(_QWORD *)&v49 = 779;
          *((_QWORD *)&v49 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v50) = 0;
          v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v39);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t))(*(_QWORD *)v43 + 32))(v43, &v47, 8);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v45 += v20;
LABEL_28:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43) - v45;
            v22 = v47;
            v23 = 48 * v47;
            if (v45 < 0 || (v21 & 0x8000000000000000) != 0 || (v47 <= v21 ? (v24 = v23 > v21) : (v24 = 1), v24))
            {
              *(_QWORD *)&v48 = "usd/crateFile.cpp";
              *((_QWORD *)&v48 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v49 = 2053;
              *((_QWORD *)&v49 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
              LOBYTE(v50) = 0;
              v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v40);
            }
            else
            {
              sub_20C2EAA54((unint64_t *)a4, v47);
              sub_20C00ACF8((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v25, v26);
              v27 = *(_QWORD *)a4;
              if (*(_QWORD *)a4)
              {
                v28 = *(_QWORD *)(a4 + 32);
                v29 = v27 - 1;
                do
                {
                  v30 = sub_20C2EBD4C(&v42, v28);
                  v28 += 48;
                  if (v29-- != 0)
                    v32 = v30;
                  else
                    v32 = 0;
                }
                while ((v32 & 1) != 0);
              }
            }
          }
        }
      }
    }
    else
    {
      v46 = 0;
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v45 < 0 || v45 + 4 > v15)
      {
        *(_QWORD *)&v48 = "usd/crateFile.cpp";
        *((_QWORD *)&v48 + 1) = "Read";
        *(_QWORD *)&v49 = 770;
        *((_QWORD *)&v49 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v50) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v45, v15);
      }
      else
      {
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43) - v45;
        if (v16 < 4 || ((v16 | v45) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v48 = "usd/crateFile.cpp";
          *((_QWORD *)&v48 + 1) = "Read";
          *(_QWORD *)&v49 = 779;
          *((_QWORD *)&v49 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v50) = 0;
          v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v48, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v16, v38);
        }
        else
        {
          v17 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v43 + 32))(v43, &v46, 4);
          if ((unint64_t)(v17 + 1) >= 2)
          {
            v45 += v17;
            v47 = v46;
            goto LABEL_28;
          }
        }
      }
    }
    v33 = v44;
    if (v44)
    {
      v34 = (unint64_t *)&v44->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    if (v41)
    {
      v36 = (unint64_t *)&v41->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    return;
  }
  v50 = 0;
  v48 = 0u;
  v49 = 0u;
  if (&v48 != (__int128 *)a4)
  {
    sub_20C00A724((_QWORD *)a4);
    v14 = v49;
    *(_OWORD *)a4 = v48;
    *(_OWORD *)(a4 + 16) = v14;
    v48 = 0u;
    v49 = 0u;
    *(_QWORD *)(a4 + 32) = v50;
    v50 = 0;
  }
  sub_20C00A724(&v48);
}

void sub_20C2EBD0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C00A724((_QWORD *)(v1 - 96));
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *sub_20C2EBD4C(_QWORD *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *EmptyToken;
  pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  const std::string *EmptyString;
  void **v14;
  int v15;
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  std::string v21;

  memset(&v21, 0, sizeof(v21));
  LODWORD(__p[0]) = -1;
  EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)sub_20C2B72E8(a1 + 1, (uint64_t)__p, 4uLL);
  v5 = EmptyToken;
  if ((_DWORD)EmptyToken)
  {
    v6 = *a1;
    v7 = *(_QWORD *)(*a1 + 144);
    if (LODWORD(__p[0]) >= (unint64_t)((*(_QWORD *)(*a1 + 152) - v7) >> 2))
    {
      pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyString(EmptyToken);
      EmptyString = (const std::string *)&qword_254988388;
    }
    else
    {
      v8 = *(unsigned int *)(v7 + 4 * LODWORD(__p[0]));
      v10 = v6 + 120;
      v9 = *(_QWORD *)(v6 + 120);
      if (v8 >= (*(_QWORD *)(v10 + 8) - v9) >> 3)
      {
        EmptyToken = (pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile *)pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_GetEmptyToken(EmptyToken);
        v11 = &qword_2549883A8;
      }
      else
      {
        v11 = (uint64_t *)(v9 + 8 * v8);
      }
      v12 = *v11 & 0xFFFFFFFFFFFFFFF8;
      if (v12)
        EmptyString = (const std::string *)(v12 + 16);
      else
        EmptyString = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(EmptyToken);
    }
    std::string::operator=(&v21, EmptyString);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(__p, &v21);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v18;
    HIBYTE(v18) = 0;
    LOBYTE(__p[0]) = 0;
    v14 = (void **)(a2 + 24);
    if (*(char *)(a2 + 47) < 0)
    {
      operator delete(*v14);
      v15 = SHIBYTE(v18);
      *(_OWORD *)v14 = v19;
      *(_QWORD *)(a2 + 40) = v20;
      HIBYTE(v20) = 0;
      LOBYTE(v19) = 0;
      if (v15 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v14 = v19;
      *(_QWORD *)(a2 + 40) = v20;
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_20C2EBEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20C2EBED0@<D0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, unsigned int a2@<W1>, pxrInternal__aapl__pxrReserved__::SdfAssetPath *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *EmptyString;
  double result;
  _QWORD v8[4];
  char v9;

  v4 = *(_QWORD *)(*(_QWORD *)a1 + 120);
  if (a2 >= (unint64_t)((*(_QWORD *)(*(_QWORD *)a1 + 128) - v4) >> 3))
  {
    v8[0] = "usd/crateFile.cpp";
    v8[1] = "GetUninlinedValue";
    v8[2] = 1246;
    v8[3] = "T pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_"
            "CrateFile::_AssetStream>::GetUninlinedValue(uint32_t) const [ByteStream = pxrInternal__aapl__pxrReserved__::"
            "Usd_CrateFile::_AssetStream, T = pxrInternal__aapl__pxrReserved__::SdfAssetPath]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to get token for index %u", a2);
    return pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a3);
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 8 * a2) & 0xFFFFFFFFFFFFFFF8;
    if (v5)
      EmptyString = (uint64_t *)(v5 + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
    pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(a3, EmptyString);
  }
  return result;
}

_QWORD *sub_20C2EBF84(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530D30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2EC030(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530DB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2EC0DC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530E30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2EC188(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530EB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2EC23C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530D30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2EC278(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530D30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2EC29C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2EC2F8(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2EC2B0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530D90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2EC2EC()
{
  return &unk_24C530D90;
}

unint64_t sub_20C2EC2F8(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  _OWORD *v14;
  double *v15;
  double *v16;
  char v17;
  uint64_t v18;
  _QWORD v19[2];

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C2EC414((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (char *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 168))(this);
    else
      v12 = *(char **)this;
    v19[0] = a2;
    v19[1] = a3;
    v13 = *a1;
    if (!*a1)
    {
      v14 = operator new(0x28uLL);
      *v14 = 0u;
      v14[1] = 0u;
      *((_DWORD *)v14 + 8) = 1065353216;
      sub_20BF2B090(a1, (uint64_t)v14);
      v13 = *a1;
    }
    v18 = 0;
    v15 = sub_20C2EC910(v13, (uint64_t)v12, v12, (double *)&v18);
    v16 = v15;
    if (v17)
    {
      *((_QWORD *)v15 + 6) = *a3 & 0xFFFFFFFFFFFFLL | 0x10000000000000;
      sub_20C2EC870((uint64_t)v19, v12);
    }
    return *((_QWORD *)v16 + 6);
  }
}

unint64_t sub_20C2EC414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x8010000000000000;
  v18 = 0x8010000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B3070(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2EC594(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2B2674((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8010000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2B2674((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C2EC594(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _BYTE v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF62F90((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20BF6308C(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2EC810(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2EC82C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2EC82C(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C2EC870(uint64_t a1, char *__src)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = 32;
  do
  {
    v5 = v3[2];
    v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6)
      v7 = v5 - *v3 + 0x80000;
    else
      v7 = v4;
    v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4])
      v3[4] = v7 + v8;
    result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4)
      result = sub_20C2B209C((_BOOL8)v3);
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

double *sub_20C2EC910(uint64_t a1, uint64_t a2, _OWORD *a3, double *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  double *v13;
  unint64_t v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  double **v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v26 = *(_QWORD *)(a2 + 24);
  v27 = 0;
  v28 = 0;
  sub_20BF55BF8((uint64_t)&v27, (double *)&v26, (double *)a2);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v27));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (double *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[5] == *(double *)(a2 + 24)
              && v13[2] == *(double *)a2
              && v13[3] == *(double *)(a2 + 8)
              && v13[4] == *(double *)(a2 + 16))
            {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = *(double **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (double *)operator new(0x38uLL);
  *v13 = 0.0;
  *((_QWORD *)v13 + 1) = v9;
  v15 = a3[1];
  *((_OWORD *)v13 + 1) = *a3;
  *((_OWORD *)v13 + 2) = v15;
  v13[6] = *a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(double ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v13 = *v23;
LABEL_41:
    *v23 = v13;
    goto LABEL_42;
  }
  *v13 = *(double *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (double **)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20C2ECBA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C2ECBBC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530DB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2ECBF8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530DB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2ECC1C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2ECCAC(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2ECC64(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530E10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2ECCA0()
{
  return &unk_24C530E10;
}

void sub_20C2ECCAC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2ECD5C(a1, v6, a3, (uint64_t)v8);
    sub_20BF62BF8(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) == 0)
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)0x20, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    sub_20C1D3760(a4, v8);
  }
}

void sub_20C2ECD44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2ECD5C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 32 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 32 * v13, v10 - v14, v10);
    }
    else
    {
      v23 = &v19;
      sub_20BF62904((unint64_t *)a4, v13, &v23);
      sub_20BF62B64((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(32 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C2ECF2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C2ECF50(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2ECF8C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2ECFB0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2ED000((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2ECFB8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530E90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2ECFF4()
{
  return &unk_24C530E90;
}

void sub_20C2ED000(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2ED07C(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2ED07C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];
  uint64_t v11;
  __n128 __dst[2];
  uint64_t v13;

  if (a3 < 0)
  {
    v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    v11 = *(_QWORD *)(a2 + 32);
    sub_20C2ED14C(a1, v10, a3, (uint64_t)__dst);
    sub_20BF62BF8(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)a2;
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) == 0)
    {
      *((_QWORD *)&v7 + 1) = *(_QWORD *)(*(_QWORD *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v7 + 8, __dst, 0x20uLL);
    }
    sub_20C1D3760(a4, __dst);
  }
}

void sub_20C2ED134(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2ED14C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *p_dst;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_2549884A0);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2549884A0))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_254988498 = *v21;
        __cxa_guard_release(&qword_2549884A0);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 32 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_254988498 || v11 < 0x800 || (BYTE8(v22) & 7) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 32 * v9, v17, v15);
        }
        else
        {
          p_dst = &__dst;
          sub_20BF62904((unint64_t *)a4, v9, &p_dst);
          sub_20BF62B64((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 32 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 32 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C2ED45C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549884A0);
  _Unwind_Resume(a1);
}

__n128 sub_20C2ED4AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530EB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2ED4E8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530EB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2ED50C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2ED564((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2ED51C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530F10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2ED558()
{
  return &unk_24C530F10;
}

void sub_20C2ED564(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2ED680(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2ED664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2ED680(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  __int128 v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  uint64_t v27;

  if (a3 < 0)
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    v22 = *a2;
    v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v23 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v24 = *((_QWORD *)a2 + 3);
    sub_20C2ED928(a1, &v22, a3, (uint64_t)&v25);
    v17 = v23;
    if (v23)
    {
      v18 = (unint64_t *)&v23->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    sub_20BF62BF8(a4, &v25);
    sub_20BF5618C((uint64_t)&v25);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) == 0)
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 32 > v10)
      {
        v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v25.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v26 = 770;
        *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v27) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 0x20uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 31)
        {
          v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v25.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v26 = 779;
          *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v27) = 0;
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 0x20uLL, v11, v20);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, v21, 32, v9);
        }
      }
    }
    if (v6)
    {
      v12 = (unint64_t *)&v6->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_20C1D3760(a4, v21);
  }
}

void sub_20C2ED8F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_20C2ED928(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v40) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 **, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 32 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfQuatd]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v40 = &v41;
              sub_20BF62904((unint64_t *)a4, v39, &v40);
              sub_20BF62B64((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 32 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C2EDEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2EDF28(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530F30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2EDFD4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C530FB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2EE080(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531030;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2EE12C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5310B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2EE1E0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530F30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2EE21C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530F30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2EE240(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2EE29C(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2EE254(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C530F90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2EE290()
{
  return &unk_24C530F90;
}

unint64_t sub_20C2EE29C(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  _OWORD *v14;
  float *v15;
  float *v16;
  char v17;
  uint64_t v18;
  _QWORD v19[2];

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C2EE3B8((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (char *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                           + 168))(this);
    else
      v12 = *(char **)this;
    v19[0] = a2;
    v19[1] = a3;
    v13 = *a1;
    if (!*a1)
    {
      v14 = operator new(0x28uLL);
      *v14 = 0u;
      v14[1] = 0u;
      *((_DWORD *)v14 + 8) = 1065353216;
      sub_20BF2B090(a1, (uint64_t)v14);
      v13 = *a1;
    }
    v18 = 0;
    v15 = sub_20C2EE814(v13, (uint64_t)v12, v12, &v18);
    v16 = v15;
    if (v17)
    {
      *((_QWORD *)v15 + 4) = *a3 & 0xFFFFFFFFFFFFLL | 0x11000000000000;
      sub_20C2CA738((uint64_t)v19, v12);
    }
    return *((_QWORD *)v16 + 4);
  }
}

unint64_t sub_20C2EE3B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x8011000000000000;
  v18 = 0x8011000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B3114(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2EE538(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2CA068((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8011000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2CA068((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C2EE538(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _BYTE v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF618E8((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20BF619E4(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2EE7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2EE7D0(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2EE7D0(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

float *sub_20C2EE814(uint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  float *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  float **v22;
  unint64_t v23;
  int v25;
  uint64_t v26;
  char v27;

  v25 = *(_DWORD *)(a2 + 12);
  v26 = 0;
  v27 = 0;
  sub_20BF55570((uint64_t)&v26, (float *)&v25, (float *)a2);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v26));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (float *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[7] == *(float *)(a2 + 12)
              && v13[4] == *(float *)a2
              && v13[5] == *(float *)(a2 + 4)
              && v13[6] == *(float *)(a2 + 8))
            {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = *(float **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (float *)operator new(0x28uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  *((_OWORD *)v13 + 1) = *a3;
  *((_QWORD *)v13 + 4) = *a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(float ***)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v13 = *v22;
LABEL_41:
    *v22 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v23 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (float **)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20C2EEAA4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C2EEAC0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C530FB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2EEAFC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C530FB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2EEB20(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2EEBB0(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2EEB68(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531010))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2EEBA4()
{
  return &unk_24C531010;
}

void sub_20C2EEBB0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2EEC60(a1, v6, a3, (uint64_t)v8);
    sub_20BF61550(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) == 0)
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)0x10, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    sub_20C1D354C((unsigned int **)a4, v8);
  }
}

void sub_20C2EEC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2EEC60(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 16 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 16 * v13, v10 - v14, v10);
    }
    else
    {
      v23 = &v19;
      sub_20BF61270((unint64_t *)a4, v13, &v23);
      sub_20BF614BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(16 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C2EEE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C2EEE54(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2EEE90(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2EEEB4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2EEF04((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2EEEBC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531090))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2EEEF8()
{
  return &unk_24C531090;
}

void sub_20C2EEF04(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2EEF80(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2EEF80(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];
  uint64_t v11;
  __n128 __dst[2];
  uint64_t v13;

  if (a3 < 0)
  {
    v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    v11 = *(_QWORD *)(a2 + 32);
    sub_20C2EF050(a1, v10, a3, (uint64_t)__dst);
    sub_20BF61550(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)a2;
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) == 0)
    {
      *((_QWORD *)&v7 + 1) = *(_QWORD *)(*(_QWORD *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v7 + 8, __dst, 0x10uLL);
    }
    sub_20C1D354C((unsigned int **)a4, __dst);
  }
}

void sub_20C2EF038(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2EF050(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *p_dst;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_2549884B0);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2549884B0))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_2549884A8 = *v21;
        __cxa_guard_release(&qword_2549884B0);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 16 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_2549884A8 || v11 < 0x800 || (BYTE8(v22) & 3) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 16 * v9, v17, v15);
        }
        else
        {
          p_dst = &__dst;
          sub_20BF61270((unint64_t *)a4, v9, &p_dst);
          sub_20BF614BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 16 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 16 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C2EF360(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549884B0);
  _Unwind_Resume(a1);
}

__n128 sub_20C2EF3B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5310B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2EF3EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5310B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2EF410(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2EF468((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2EF420(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531110))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2EF45C()
{
  return &unk_24C531110;
}

void sub_20C2EF468(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2EF584(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2EF568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2EF584(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  uint64_t v27;

  if (a3 < 0)
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    v22 = *a2;
    v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v23 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v24 = *((_QWORD *)a2 + 3);
    sub_20C2EF82C(a1, &v22, a3, (uint64_t)&v25);
    v17 = v23;
    if (v23)
    {
      v18 = (unint64_t *)&v23->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    sub_20BF61550(a4, &v25);
    sub_20BF5618C((uint64_t)&v25);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) == 0)
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 16 > v10)
      {
        v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v25.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v26 = 770;
        *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v27) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 0x10uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 15)
        {
          v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v25.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v26 = 779;
          *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v27) = 0;
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 0x10uLL, v11, v20);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, __n128 *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, &v21, 16, v9);
        }
      }
    }
    if (v6)
    {
      v12 = (unint64_t *)&v6->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_20C1D354C((unsigned int **)a4, &v21);
  }
}

void sub_20C2EF7F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_20C2EF82C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v40) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 **, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 16 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfQuatf]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v40 = &v41;
              sub_20BF61270((unint64_t *)a4, v39, &v40);
              sub_20BF614BC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 16 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C2EFDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2EFE2C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531130;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2EFED8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5311B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2EFF84(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531230;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F0030(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5312B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2F00E4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F0120(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2F0144(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2F01A0(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2F0158(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531190))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F0194()
{
  return &unk_24C531190;
}

unint64_t sub_20C2F01A0(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD *v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  char v16;
  uint64_t v17;
  _QWORD v18[2];

  v4 = this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *(_QWORD *)v4;
    return sub_20C2F02B8((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    v18[0] = a2;
    v18[1] = a3;
    v12 = *a1;
    if (!*a1)
    {
      v13 = operator new(0x28uLL);
      *v13 = 0u;
      v13[1] = 0u;
      *((_DWORD *)v13 + 8) = 1065353216;
      sub_20BF2B090(a1, (uint64_t)v13);
      v12 = *a1;
    }
    v17 = 0;
    v14 = sub_20C2F0714(v12, (unsigned __int16 *)v4, v4, &v17);
    v15 = v14;
    if (v16)
    {
      *((_QWORD *)v14 + 3) = *a3 & 0xFFFFFFFFFFFFLL | 0x12000000000000;
      sub_20C2B7248((uint64_t)v18, (char *)v4);
    }
    return *((_QWORD *)v15 + 3);
  }
}

unint64_t sub_20C2F02B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x8012000000000000;
  v18 = 0x8012000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B31B8(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2F0438(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2D6610((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8012000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2D6610((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t *sub_20C2F0438(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  uint64_t *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  char v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF623E4((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20BF624E0(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (uint64_t *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = (uint64_t *)v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = (uint64_t)i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = (uint64_t)i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (uint64_t *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2F06B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2F06D0(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2F06D0(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

unsigned __int16 *sub_20C2F0714(uint64_t a1, unsigned __int16 *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  unsigned __int16 *v14;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unsigned __int16 v27;
  uint64_t v28;
  char v29;

  v27 = a2[3];
  v28 = 0;
  v29 = 0;
  sub_20BF55840((uint64_t)&v28, &v27, a2);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v28));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = (unsigned __int16 *)*v13;
      if (*v13)
      {
        do
        {
          v15 = *((_QWORD *)v14 + 1);
          if (v15 == v9)
          {
            if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[v14[11]] == pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[a2[3]]
              && sub_20BF522D0(v14 + 8, a2))
            {
              return v14;
            }
          }
          else
          {
            if (v12 > 1)
            {
              if (v15 >= v10)
                v15 %= v10;
            }
            else
            {
              v15 &= v10 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = *(unsigned __int16 **)v14;
        }
        while (v14);
      }
    }
  }
  v14 = (unsigned __int16 *)operator new(0x20uLL);
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v9;
  v16 = *a4;
  *((_QWORD *)v14 + 2) = *a3;
  *((_QWORD *)v14 + 3) = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v14 = *v24;
LABEL_39:
    *v24 = v14;
    goto LABEL_40;
  }
  *(_QWORD *)v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v14)
  {
    v25 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_39;
  }
LABEL_40:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20C2F09A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F09C4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5311B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F0A00(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5311B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2F0A24(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2F0AB4(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2F0A6C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531210))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F0AA8()
{
  return &unk_24C531210;
}

void sub_20C2F0AB4(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2F0B64(a1, v6, a3, (uint64_t)v8);
    sub_20BF62084(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) == 0)
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)8, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    sub_20C1D32CC(a4, (uint64_t *)v8);
  }
}

void sub_20C2F0B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2F0B64(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 8 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfQuath]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 8 * v13, v10 - v14, v10);
    }
    else
    {
      *(_QWORD *)&v19 = &v23;
      sub_20BF61DA0((unint64_t *)a4, v13, (uint64_t **)&v19);
      sub_20BF61FF0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(8 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C2F0D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F0D58(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F0D94(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2F0DB8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2F0E08((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2F0DC0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531290))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F0DFC()
{
  return &unk_24C531290;
}

void sub_20C2F0E08(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2F0E84(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2F0E84(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];
  uint64_t v11;
  __n128 __dst[2];
  uint64_t v13;

  if (a3 < 0)
  {
    v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    v11 = *(_QWORD *)(a2 + 32);
    sub_20C2F0F54(a1, v10, a3, (uint64_t)__dst);
    sub_20BF62084(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)a2;
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) == 0)
    {
      *((_QWORD *)&v7 + 1) = *(_QWORD *)(*(_QWORD *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v7 + 8, __dst, 8uLL);
    }
    sub_20C1D32CC(a4, (uint64_t *)__dst);
  }
}

void sub_20C2F0F3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2F0F54(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  char v29;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_2549884C0);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2549884C0))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_2549884B8 = *v21;
        __cxa_guard_release(&qword_2549884C0);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 8 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_2549884B8 || v11 < 0x800 || (BYTE8(v22) & 1) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfQuath]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 8 * v9, v17, v15);
        }
        else
        {
          *(_QWORD *)&__dst = &v29;
          sub_20BF61DA0((unint64_t *)a4, v9, (uint64_t **)&__dst);
          sub_20BF61FF0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 8 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 8 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfQuath]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C2F1260(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549884C0);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F12B0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5312B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F12EC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5312B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2F1310(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2F1368((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2F1320(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531310))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F135C()
{
  return &unk_24C531310;
}

void sub_20C2F1368(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2F1484(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2F1468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2F1484(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  uint64_t v27;

  if (a3 < 0)
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    v22 = *a2;
    v14 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v23 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    v24 = *((_QWORD *)a2 + 3);
    sub_20C2F172C(a1, &v22, a3, (uint64_t)&v25);
    v17 = v23;
    if (v23)
    {
      v18 = (unint64_t *)&v23->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    sub_20BF62084(a4, &v25);
    sub_20BF5618C((uint64_t)&v25);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) == 0)
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 8 > v10)
      {
        v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v25.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v26 = 770;
        *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v27) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 7)
        {
          v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v25.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v26 = 779;
          *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v27) = 0;
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v11, v20);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, &v21, 8, v9);
        }
      }
    }
    if (v6)
    {
      v12 = (unint64_t *)&v6->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_20C1D32CC(a4, &v21);
  }
}

void sub_20C2F16F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2F172C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      v40 = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 8 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfQuath]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              *(_QWORD *)&v41 = &v40;
              sub_20BF61DA0((unint64_t *)a4, v39, (uint64_t **)&v41);
              sub_20BF61FF0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 8 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C2F1CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2F1D2C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531330;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F1DD8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5313B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F1E84(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531430;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F1F30(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5314B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2F1FE4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F2020(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2F2044(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2F20A0(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2F2058(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531390))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F2094()
{
  return &unk_24C531390;
}

unint64_t sub_20C2F20A0(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  double *v12;
  uint64_t v13;
  _OWORD *v14;
  double *v15;
  double *v16;
  char v17;
  double v18;
  unsigned int v19;
  _QWORD v20[2];

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C2F21E0((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(this);
    else
      v12 = *(double **)this;
    v20[0] = a2;
    v20[1] = a3;
    v19 = 0;
    if (sub_20C2F263C(&v19, *v12, v12[1]))
    {
      return v19 | 0x4013000000000000;
    }
    else
    {
      v13 = *a1;
      if (!*a1)
      {
        v14 = operator new(0x28uLL);
        *v14 = 0u;
        v14[1] = 0u;
        *((_DWORD *)v14 + 8) = 1065353216;
        sub_20BF2B090(a1, (uint64_t)v14);
        v13 = *a1;
      }
      v18 = 0.0;
      v15 = sub_20C2F26B8(v13, v12, v12, &v18);
      v16 = v15;
      if (v17)
      {
        *((_QWORD *)v15 + 4) = *a3 & 0xFFFFFFFFFFFFLL | 0x13000000000000;
        sub_20C2CA738((uint64_t)v20, (char *)v12);
      }
      return *((_QWORD *)v16 + 4);
    }
  }
}

unint64_t sub_20C2F21E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x8013000000000000;
  v18 = 0x8013000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B325C(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2F2360(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2CA068((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8013000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2CA068((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C2F2360(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _BYTE v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF5A3DC((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20BF5A4C0(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2F25DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2F25F8(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2F25F8(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C2F263C(_WORD *a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;
  double v5;
  __int16 v7;
  _QWORD v8[2];

  v3 = 0;
  *(double *)v8 = a2;
  *(double *)&v8[1] = a3;
  while (1)
  {
    v4 = 0;
    v5 = *(double *)&v8[v3];
    if (v5 < -128.0 || v5 > 127.0)
      break;
    if (v5 != (double)(int)v5)
      return 0;
    *((_BYTE *)&v7 + v3++) = (int)v5;
    if (v3 == 2)
    {
      *a1 = v7;
      return 1;
    }
  }
  return v4;
}

double *sub_20C2F26B8(uint64_t a1, double *a2, _OWORD *a3, double *a4)
{
  unint64_t v4;
  double v8;
  uint64_t v9;
  double v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  double *v15;
  unint64_t v16;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  double **v25;
  unint64_t v26;

  v8 = a2[1];
  v9 = 0;
  if (*a2 == 0.0)
    v10 = 0.0;
  else
    v10 = *a2;
  if (v8 != 0.0)
    v9 = *((_QWORD *)a2 + 1);
  v11 = bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (v9 + ((unint64_t)(v9 + *(_QWORD *)&v10 + (v9 + *(_QWORD *)&v10) * (v9 + *(_QWORD *)&v10)) >> 1))));
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (double *)*v14;
      if (*v14)
      {
        do
        {
          v16 = *((_QWORD *)v15 + 1);
          if (v16 == v11)
          {
            if (v15[2] == *a2 && v15[3] == v8)
              return v15;
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12)
                v16 %= v12;
            }
            else
            {
              v16 &= v12 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = *(double **)v15;
        }
        while (v15);
      }
    }
  }
  v15 = (double *)operator new(0x28uLL);
  *v15 = 0.0;
  *((_QWORD *)v15 + 1) = v11;
  *((_OWORD *)v15 + 1) = *a3;
  v15[4] = *a4;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_20BDEC6E0(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(double ***)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *(_QWORD *)v15 = *v25;
LABEL_47:
    *v25 = v15;
    goto LABEL_48;
  }
  *v15 = *(double *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v24 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v26 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v26 >= v12)
        v26 %= v12;
    }
    else
    {
      v26 &= v12 - 1;
    }
    v25 = (double **)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_47;
  }
LABEL_48:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20C2F291C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F2938(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5313B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F2974(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5313B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C2F2998(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = 0;
  v11[3] = v8;
  v11[4] = v9;
  return sub_20C2F2A28(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_20C2F29E0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531410))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F2A1C()
{
  return &unk_24C531410;
}

double sub_20C2F2A28(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  double result;
  _OWORD v7[2];
  uint64_t v8;
  __n128 v9[2];
  uint64_t v10;

  if (a3 < 0)
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    v8 = *(_QWORD *)(a2 + 32);
    sub_20C2F2AF0(a1, v7, a3, (uint64_t)v9);
    sub_20BF5A044(a4, v9);
    sub_20BF5618C((uint64_t)v9);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      v9[0].n128_f64[0] = (double)(char)a3;
      v9[0].n128_f64[1] = (double)((__int16)a3 >> 8);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v9, (char *)0x10, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    *(_QWORD *)&result = sub_20C1D4080((unsigned int **)a4, v9).n128_u64[0];
  }
  return result;
}

void sub_20C2F2AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2F2AF0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 16 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 16 * v13, v10 - v14, v10);
    }
    else
    {
      v19 = 0uLL;
      v23 = &v19;
      sub_20BF59D64((unint64_t *)a4, v13, &v23);
      sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(16 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C2F2CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F2CE8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F2D24(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C2F2D48(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_20C2F2D98((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2F2D50(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531490))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F2D8C()
{
  return &unk_24C531490;
}

double sub_20C2F2D98(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  int v11;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  v10[2] = v6;
  v10[3] = v7;
  v11 = sub_20C2A2B6C();
  return sub_20C2F2E14(v5, (uint64_t)v10, v3, v4);
}

double sub_20C2F2E14(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11[2];
  uint64_t v12;
  __n128 __dst;
  uint64_t v14;

  if (a3 < 0)
  {
    v14 = 0;
    memset(&__dst, 0, 32);
    v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    v12 = *(_QWORD *)(a2 + 32);
    sub_20C2F2EFC(a1, v11, a3, (uint64_t)&__dst);
    sub_20BF5A044(a4, &__dst);
    sub_20BF5618C((uint64_t)&__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v8 = *(_OWORD *)a2;
    v9 = v5;
    v10 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      __dst.n128_f64[0] = (double)(char)a3;
      __dst.n128_f64[1] = (double)((__int16)a3 >> 8);
    }
    else
    {
      *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v8 + 8, &__dst, 0x10uLL);
    }
    *(_QWORD *)&result = sub_20C1D4080((unsigned int **)a4, &__dst).n128_u64[0];
  }
  return result;
}

void sub_20C2F2EE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2F2EFC(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *p_dst;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_2549884D0);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2549884D0))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_2549884C8 = *v21;
        __cxa_guard_release(&qword_2549884D0);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 16 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_2549884C8 || v11 < 0x800 || (BYTE8(v22) & 7) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 16 * v9, v17, v15);
        }
        else
        {
          __dst = 0uLL;
          p_dst = &__dst;
          sub_20BF59D64((unint64_t *)a4, v9, &p_dst);
          sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 16 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 16 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C2F3210(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549884D0);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F3260(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5314B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F329C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5314B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2F32C0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2F3318((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2F32D0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531510))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F330C()
{
  return &unk_24C531510;
}

void sub_20C2F3318(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = 0;
  }
  v19 = 0;
  v10.n128_f64[0] = sub_20C2F3434(v3, &v17, a2, a3);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v16)
  {
    v14 = (unint64_t *)&v16->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v10);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20C2F3418(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

double sub_20C2F3434(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  double result;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  __n128 v26;
  __int128 v27;
  uint64_t v28;

  if (a3 < 0)
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    v23 = *a2;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v24 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v25 = *((_QWORD *)a2 + 3);
    sub_20C2F36F4(a1, &v23, a3, (uint64_t)&v26);
    v15 = v24;
    if (v24)
    {
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_20BF5A044(a4, &v26);
    sub_20BF5618C((uint64_t)&v26);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      v22.n128_f64[0] = (double)(char)a3;
      v22.n128_f64[1] = (double)((__int16)a3 >> 8);
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 16 > v10)
      {
        v26.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v26.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v27 = 770;
        *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v28) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 0x10uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 15)
        {
          v26.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v26.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v27 = 779;
          *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v28) = 0;
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 0x10uLL, v11, v21);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, __n128 *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, &v22, 16, v9);
        }
      }
    }
    if (v6)
    {
      v19 = (unint64_t *)&v6->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *(_QWORD *)&result = sub_20C1D4080((unsigned int **)a4, &v22).n128_u64[0];
  }
  return result;
}

void sub_20C2F36BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_20C2F36F4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v40) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 **, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 16 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec2d]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v41 = 0uLL;
              v40 = &v41;
              sub_20BF59D64((unint64_t *)a4, v39, &v40);
              sub_20BF59FB0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 16 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C2F3CC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2F3CF8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531530;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F3DA4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5315B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F3E50(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531630;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F3EFC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5316B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2F3FB0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531530;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F3FEC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531530;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2F4010(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2F406C(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2F4024(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531590))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F4060()
{
  return &unk_24C531590;
}

unint64_t sub_20C2F406C(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD *v13;
  float *v14;
  float *v15;
  char v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD v19[2];

  v4 = this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *(_QWORD *)v4;
    return sub_20C2F41A8((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    v19[0] = a2;
    v19[1] = a3;
    v18 = 0;
    if (sub_20C2F4604(&v18, *(float *)v4, *((float *)v4 + 1)))
    {
      return v18 | 0x4014000000000000;
    }
    else
    {
      v12 = *a1;
      if (!*a1)
      {
        v13 = operator new(0x28uLL);
        *v13 = 0u;
        v13[1] = 0u;
        *((_DWORD *)v13 + 8) = 1065353216;
        sub_20BF2B090(a1, (uint64_t)v13);
        v12 = *a1;
      }
      v17 = 0;
      v14 = sub_20C2F4670(v12, (float *)v4, v4, &v17);
      v15 = v14;
      if (v16)
      {
        *((_QWORD *)v14 + 3) = *a3 & 0xFFFFFFFFFFFFLL | 0x14000000000000;
        sub_20C2B7248((uint64_t)v19, (char *)v4);
      }
      return *((_QWORD *)v15 + 3);
    }
  }
}

unint64_t sub_20C2F41A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x8014000000000000;
  v18 = 0x8014000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B3300(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2F4328(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2D6610((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8014000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2D6610((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C2F4328(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _BYTE v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF58D90((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20BF58E74(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2F45A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2F45C0(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2F45C0(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C2F4604(_WORD *a1, float a2, float a3)
{
  uint64_t v3;
  float v4;
  BOOL v5;
  __int16 v7;
  _DWORD v8[2];

  v3 = 0;
  *(float *)v8 = a2;
  *(float *)&v8[1] = a3;
  while (1)
  {
    v4 = *(float *)&v8[v3];
    v5 = v4 < -128.0 || v4 > 127.0;
    if (v5 || v4 != (float)(int)v4)
      break;
    *((_BYTE *)&v7 + v3++) = (int)v4;
    if (v3 == 2)
    {
      *a1 = v7;
      return 1;
    }
  }
  return 0;
}

float *sub_20C2F4670(uint64_t a1, float *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  float v8;
  unsigned int v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  void **v14;
  float *v15;
  unint64_t v16;
  uint64_t v18;
  float v19;
  float v20;
  _BOOL8 v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  uint64_t v25;
  float **v26;
  unint64_t v27;

  v8 = a2[1];
  v9 = 0;
  if (*a2 == 0.0)
    v10 = 0.0;
  else
    v10 = *a2;
  if (v8 != 0.0)
    v9 = *((_DWORD *)a2 + 1);
  v11 = bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55* (v9+ ((v9+ (unint64_t)LODWORD(v10)+ (v9 + (unint64_t)LODWORD(v10)) * (v9 + (unint64_t)LODWORD(v10))) >> 1))));
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v11;
      if (v11 >= v12)
        v4 = v11 % v12;
    }
    else
    {
      v4 = v11 & (v12 - 1);
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = (float *)*v14;
      if (*v14)
      {
        do
        {
          v16 = *((_QWORD *)v15 + 1);
          if (v16 == v11)
          {
            if (v15[4] == *a2 && v15[5] == v8)
              return v15;
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v16 >= v12)
                v16 %= v12;
            }
            else
            {
              v16 &= v12 - 1;
            }
            if (v16 != v4)
              break;
          }
          v15 = *(float **)v15;
        }
        while (v15);
      }
    }
  }
  v15 = (float *)operator new(0x20uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v11;
  v18 = *a4;
  *((_QWORD *)v15 + 2) = *a3;
  *((_QWORD *)v15 + 3) = v18;
  v19 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v20 = *(float *)(a1 + 32);
  if (!v12 || (float)(v20 * (float)v12) < v19)
  {
    v21 = 1;
    if (v12 >= 3)
      v21 = (v12 & (v12 - 1)) != 0;
    v22 = v21 | (2 * v12);
    v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23)
      v24 = v23;
    else
      v24 = v22;
    sub_20BDEC6E0(a1, v24);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v25 = *(_QWORD *)a1;
  v26 = *(float ***)(*(_QWORD *)a1 + 8 * v4);
  if (v26)
  {
    *(_QWORD *)v15 = *v26;
LABEL_47:
    *v26 = v15;
    goto LABEL_48;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v25 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v27 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v27 >= v12)
        v27 %= v12;
    }
    else
    {
      v27 &= v12 - 1;
    }
    v26 = (float **)(*(_QWORD *)a1 + 8 * v27);
    goto LABEL_47;
  }
LABEL_48:
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_20C2F48D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F48EC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5315B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F4928(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5315B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2F494C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2F49DC(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2F4994(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531610))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F49D0()
{
  return &unk_24C531610;
}

void sub_20C2F49DC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2F4AA4(a1, v6, a3, (uint64_t)v8);
    sub_20BF589F8(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      v8[0].n128_f32[0] = (float)(char)a3;
      v8[0].n128_f32[1] = (float)((__int16)a3 >> 8);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)8, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_20C1D3FC8(a4, (uint64_t *)v8);
  }
}

void sub_20C2F4A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2F4AA4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 8 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 8 * v13, v10 - v14, v10);
    }
    else
    {
      v23 = 0;
      *(_QWORD *)&v19 = &v23;
      sub_20BF58714((unint64_t *)a4, v13, (uint64_t **)&v19);
      sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(8 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C2F4C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F4C9C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F4CD8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2F4CFC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2F4D4C((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2F4D04(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531690))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F4D40()
{
  return &unk_24C531690;
}

void sub_20C2F4D4C(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2F4DC8(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2F4DC8(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];
  uint64_t v11;
  __n128 __dst;
  uint64_t v13;

  if (a3 < 0)
  {
    v13 = 0;
    memset(&__dst, 0, 32);
    v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    v11 = *(_QWORD *)(a2 + 32);
    sub_20C2F4EB0(a1, v10, a3, (uint64_t)&__dst);
    sub_20BF589F8(a4, &__dst);
    sub_20BF5618C((uint64_t)&__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)a2;
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      __dst.n128_f32[0] = (float)(char)a3;
      __dst.n128_f32[1] = (float)((__int16)a3 >> 8);
    }
    else
    {
      *((_QWORD *)&v7 + 1) = *(_QWORD *)(*(_QWORD *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v7 + 8, &__dst, 8uLL);
    }
    sub_20C1D3FC8(a4, (uint64_t *)&__dst);
  }
}

void sub_20C2F4E98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2F4EB0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_2549884E0);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2549884E0))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_2549884D8 = *v21;
        __cxa_guard_release(&qword_2549884E0);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 8 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_2549884D8 || v11 < 0x800 || (BYTE8(v22) & 3) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 8 * v9, v17, v15);
        }
        else
        {
          v29 = 0;
          *(_QWORD *)&__dst = &v29;
          sub_20BF58714((unint64_t *)a4, v9, (uint64_t **)&__dst);
          sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 8 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 8 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C2F51C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549884E0);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F5214(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5316B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F5250(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5316B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2F5274(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2F52CC((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2F5284(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531710))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F52C0()
{
  return &unk_24C531710;
}

void sub_20C2F52CC(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2F53E8(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2F53CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2F53E8(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  uint64_t v27;

  if (a3 < 0)
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    v22 = *a2;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v23 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v24 = *((_QWORD *)a2 + 3);
    sub_20C2F56A8(a1, &v22, a3, (uint64_t)&v25);
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_20BF589F8(a4, &v25);
    sub_20BF5618C((uint64_t)&v25);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      *(float *)&v21 = (float)(char)a3;
      *((float *)&v21 + 1) = (float)((__int16)a3 >> 8);
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 8 > v10)
      {
        v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v25.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v26 = 770;
        *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v27) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 7)
        {
          v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v25.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v26 = 779;
          *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v27) = 0;
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v11, v20);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, &v21, 8, v9);
        }
      }
    }
    if (v6)
    {
      v18 = (unint64_t *)&v6->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_20C1D3FC8(a4, &v21);
  }
}

void sub_20C2F5670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2F56A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v40) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 8 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec2f]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v40 = 0;
              *(_QWORD *)&v41 = &v40;
              sub_20BF58714((unint64_t *)a4, v39, (uint64_t **)&v41);
              sub_20BF58964((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 8 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C2F5C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2F5CA8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531730;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F5D54(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5317B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F5E00(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531830;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F5EAC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5318B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2F5F60(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F5F9C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2F5FC0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2F601C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256, a2);
}

uint64_t sub_20C2F5FD4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531790))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F6010()
{
  return &unk_24C531790;
}

unint64_t sub_20C2F601C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  uint64_t *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;

  v4 = (uint64_t *)this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = v4[1];
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *v4;
    return sub_20C2F60C0(a1, a2, a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    return *(unsigned int *)v4 | 0x4015000000000000;
  }
}

unint64_t sub_20C2F60C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  unint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x8015000000000000;
  v18 = 0x8015000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B33A4(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2F6240(v9, (unint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2C9460((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8015000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2C9460((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C2F6240(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _BYTE v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF59840((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20BF598A0(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2F64BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2F64D8(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2F64D8(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

__n128 sub_20C2F6524(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5317B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F6560(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5317B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2F6584(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2F6614(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2F65CC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531810))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F6608()
{
  return &unk_24C531810;
}

void sub_20C2F6614(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2F66A8(a1, v6, a3, (uint64_t)v8);
    sub_20BF594E0(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_20C1D3DC0(a4, v8);
  }
}

void sub_20C2F6690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2F66A8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  int v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 4 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 4 * v13, v10 - v14, v10);
    }
    else
    {
      v23 = 0;
      *(_QWORD *)&v19 = &v23;
      sub_20BF591FC((unint64_t *)a4, v13, (_DWORD **)&v19);
      sub_20BF5944C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(4 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C2F687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F68A0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F68DC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2F6900(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2F6950((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2F6908(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531890))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F6944()
{
  return &unk_24C531890;
}

void sub_20C2F6950(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2F69CC(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2F69CC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2F6A60(a1, v6, a3, (uint64_t)v8);
    sub_20BF594E0(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    v8[0].n128_u32[0] = a3;
    sub_20C1D3DC0(a4, v8);
  }
}

void sub_20C2F6A48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2F6A60(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  int v29;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_2549884F0);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2549884F0))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_2549884E8 = *v21;
        __cxa_guard_release(&qword_2549884F0);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 4 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_2549884E8 || v11 < 0x800 || (BYTE8(v22) & 1) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 4 * v9, v17, v15);
        }
        else
        {
          v29 = 0;
          *(_QWORD *)&__dst = &v29;
          sub_20BF591FC((unint64_t *)a4, v9, (_DWORD **)&__dst);
          sub_20BF5944C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 4 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 4 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C2F6D70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549884F0);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F6DC0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5318B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F6DFC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5318B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2F6E20(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2F6E78((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2F6E30(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531910))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F6E6C()
{
  return &unk_24C531910;
}

void sub_20C2F6E78(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2F6F94(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2F6F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2F6F94(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  __n128 v18[2];
  uint64_t v19;

  if (a3 < 0)
  {
    v19 = 0;
    memset(v18, 0, sizeof(v18));
    v15 = *a2;
    v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v16 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v17 = *((_QWORD *)a2 + 3);
    sub_20C2F70E8(a1, &v15, a3, (uint64_t)v18);
    v12 = v16;
    if (v16)
    {
      v13 = (unint64_t *)&v16->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    sub_20BF594E0(a4, v18);
    sub_20BF5618C((uint64_t)v18);
  }
  else
  {
    v5 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
      v18[0].n128_u32[0] = a3;
      do
        v8 = __ldaxr(v6);
      while (__stlxr(v8 - 1, v6));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    else
    {
      v18[0].n128_u32[0] = a3;
    }
    sub_20C1D3DC0(a4, v18);
  }
}

void sub_20C2F70C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2F70E8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      v40 = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 4 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec2h]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v40 = 0;
              *(_QWORD *)&v41 = &v40;
              sub_20BF591FC((unint64_t *)a4, v39, (_DWORD **)&v41);
              sub_20BF5944C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 4 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C2F76B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2F76EC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531930;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F7798(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5319B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F7844(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531A30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F78F0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531AB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2F79A4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F79E0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2F7A04(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2F7A60(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2F7A18(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531990))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F7A54()
{
  return &unk_24C531990;
}

unint64_t sub_20C2F7A60(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _OWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  _QWORD v19[2];
  unsigned __int16 v20;
  uint64_t v21;

  v4 = this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *(_QWORD *)v4;
    return sub_20C2F7BB8((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    v12 = 0;
    v19[0] = a2;
    v19[1] = a3;
    v21 = *(_QWORD *)v4;
    while (1)
    {
      v13 = *((_DWORD *)&v21 + v12);
      if (v13 != (char)v13)
        break;
      *((_BYTE *)&v20 + v12++) = v13;
      if (v12 == 2)
        return v20 | 0x4016000000000000;
    }
    v14 = *a1;
    if (!*a1)
    {
      v15 = operator new(0x28uLL);
      *v15 = 0u;
      v15[1] = 0u;
      *((_DWORD *)v15 + 8) = 1065353216;
      sub_20BF2B090(a1, (uint64_t)v15);
      v14 = *a1;
    }
    v21 = 0;
    v16 = sub_20C2F8014(v14, (int *)v4, v4, &v21);
    v17 = v16;
    if (v18)
    {
      v16[3] = *a3 & 0xFFFFFFFFFFFFLL | 0x16000000000000;
      sub_20C2B7248((uint64_t)v19, (char *)v4);
    }
    return v17[3];
  }
}

unint64_t sub_20C2F7BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  unint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x8016000000000000;
  v18 = 0x8016000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B3448(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2F7D38(v9, (unint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2D6610((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8016000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2D6610((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C2F7D38(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _BYTE v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20C00F818((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20C00F870(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2F7FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2F7FD0(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2F7FD0(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

_QWORD *sub_20C2F8014(uint64_t a1, int *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;

  v8 = *a2;
  v9 = a2[1];
  v10 = bswap64(0x9E3779B97F4A7C55* bswap64(0x9E3779B97F4A7C55 * (v9 + ((unint64_t)(v9 + v8 + (v9 + v8) * (v9 + v8)) >> 1))));
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v11)
        v4 = v10 % v11;
    }
    else
    {
      v4 = v10 & (v11 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        do
        {
          v15 = v14[1];
          if (v15 == v10)
          {
            if (*((_DWORD *)v14 + 4) == (_DWORD)v8 && *((_DWORD *)v14 + 5) == (_DWORD)v9)
              return v14;
          }
          else
          {
            if (v12.u32[0] > 1uLL)
            {
              if (v15 >= v11)
                v15 %= v11;
            }
            else
            {
              v15 &= v11 - 1;
            }
            if (v15 != v4)
              break;
          }
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
    }
  }
  v14 = operator new(0x20uLL);
  *v14 = 0;
  v14[1] = v10;
  v17 = *a4;
  v14[2] = *a3;
  v14[3] = v17;
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v11 || (float)(v19 * (float)v11) < v18)
  {
    v20 = 1;
    if (v11 >= 3)
      v20 = (v11 & (v11 - 1)) != 0;
    v21 = v20 | (2 * v11);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_20BDEC6E0(a1, v23);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v24 = *(_QWORD *)a1;
  v25 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v25)
  {
    *v14 = *v25;
LABEL_42:
    *v25 = v14;
    goto LABEL_43;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v24 + 8 * v4) = a1 + 16;
  if (*v14)
  {
    v26 = *(_QWORD *)(*v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v26 >= v11)
        v26 %= v11;
    }
    else
    {
      v26 &= v11 - 1;
    }
    v25 = (_QWORD *)(*(_QWORD *)a1 + 8 * v26);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_20C2F8258(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F8274(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5319B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F82B0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5319B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2F82D4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2F8364(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2F831C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531A10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F8358()
{
  return &unk_24C531A10;
}

void sub_20C2F8364(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2F8430(a1, v6, a3, (uint64_t)v8);
    sub_20C1D39E8(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
      v8[0].n128_u64[0] = (unint64_t)vshr_n_s32((int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0x1000000018), 0x18uLL);
    else
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)8, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    sub_20C1D3974(a4, (uint64_t *)v8);
  }
}

void sub_20C2F8418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2F8430(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 8 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 8 * v13, v10 - v14, v10);
    }
    else
    {
      v23 = 0;
      *(_QWORD *)&v19 = &v23;
      sub_20C00F9CC((unint64_t *)a4, v13, (uint64_t **)&v19);
      sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(8 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C2F8604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F8628(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F8664(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2F8688(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2F86D8((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2F8690(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531A90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F86CC()
{
  return &unk_24C531A90;
}

void sub_20C2F86D8(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2F8754(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2F8754(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];
  uint64_t v11;
  __n128 __dst[2];
  uint64_t v13;

  if (a3 < 0)
  {
    v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    v11 = *(_QWORD *)(a2 + 32);
    sub_20C2F8840(a1, v10, a3, (uint64_t)__dst);
    sub_20C1D39E8(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)a2;
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      __dst[0].n128_u64[0] = (unint64_t)vshr_n_s32((int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0x1000000018), 0x18uLL);
    }
    else
    {
      *((_QWORD *)&v7 + 1) = *(_QWORD *)(*(_QWORD *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v7 + 8, __dst, 8uLL);
    }
    sub_20C1D3974(a4, (uint64_t *)__dst);
  }
}

void sub_20C2F8828(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2F8840(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_254988500);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988500))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_2549884F8 = *v21;
        __cxa_guard_release(&qword_254988500);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 8 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_2549884F8 || v11 < 0x800 || (BYTE8(v22) & 3) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 8 * v9, v17, v15);
        }
        else
        {
          v29 = 0;
          *(_QWORD *)&__dst = &v29;
          sub_20C00F9CC((unint64_t *)a4, v9, (uint64_t **)&__dst);
          sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 8 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 8 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C2F8B54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988500);
  _Unwind_Resume(a1);
}

__n128 sub_20C2F8BA4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F8BE0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2F8C04(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2F8C5C((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2F8C14(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531B10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F8C50()
{
  return &unk_24C531B10;
}

void sub_20C2F8C5C(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2F8D78(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2F8D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2F8D78(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  int32x2_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  uint64_t v27;

  if (a3 < 0)
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    v22 = *a2;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v23 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v24 = *((_QWORD *)a2 + 3);
    sub_20C2F903C(a1, &v22, a3, (uint64_t)&v25);
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_20C1D39E8(a4, &v25);
    sub_20BF5618C((uint64_t)&v25);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      v21 = vshr_n_s32((int32x2_t)vshl_u32((uint32x2_t)vdup_n_s32(a3), (uint32x2_t)0x1000000018), 0x18uLL);
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 8 > v10)
      {
        v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v25.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v26 = 770;
        *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v27) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 7)
        {
          v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v25.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v26 = 779;
          *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v27) = 0;
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v11, v20);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, int32x2_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, &v21, 8, v9);
        }
      }
    }
    if (v6)
    {
      v18 = (unint64_t *)&v6->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_20C1D3974(a4, (uint64_t *)&v21);
  }
}

void sub_20C2F9004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2F903C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v40) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 8 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec2i]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v40 = 0;
              *(_QWORD *)&v41 = &v40;
              sub_20C00F9CC((unint64_t *)a4, v39, (uint64_t **)&v41);
              sub_20C00FC1C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 8 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C2F9608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2F963C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531B30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F96E8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531BB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F9794(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531C30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2F9840(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531CB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2F98F4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2F9930(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2F9954(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2F99B0(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2F9968(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531B90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2F99A4()
{
  return &unk_24C531B90;
}

unint64_t sub_20C2F99B0(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  double *v12;
  uint64_t v13;
  _OWORD *v14;
  double *v15;
  double *v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD v20[2];

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C2F9AF4((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(this);
    else
      v12 = *(double **)this;
    v20[0] = a2;
    v20[1] = a3;
    v19 = 0;
    if (sub_20C2F9FF8((uint64_t)&v19, *v12, v12[1], v12[2]))
    {
      return v19 | 0x4017000000000000;
    }
    else
    {
      v13 = *a1;
      if (!*a1)
      {
        v14 = operator new(0x28uLL);
        *v14 = 0u;
        v14[1] = 0u;
        *((_DWORD *)v14 + 8) = 1065353216;
        sub_20BF2B090(a1, (uint64_t)v14);
        v13 = *a1;
      }
      v18 = 0;
      v15 = sub_20C2FA120(v13, v12, (uint64_t)v12, &v18);
      v16 = v15;
      if (v17)
      {
        *((_QWORD *)v15 + 5) = *a3 & 0xFFFFFFFFFFFFLL | 0x17000000000000;
        sub_20C2FA080((uint64_t)v20, (char *)v12);
      }
      return *((_QWORD *)v16 + 5);
    }
  }
}

unint64_t sub_20C2F9AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x8017000000000000;
  v18 = 0x8017000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B34EC(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2F9D1C(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2F9C74((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8017000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2F9C74((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t sub_20C2F9C74(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  v3 = 24 * a3;
  if (24 * a3)
  {
    v5 = *(_QWORD **)(result + 8);
    do
    {
      v6 = v5[2];
      v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7)
        v8 = v6 - *v5 + 0x80000;
      else
        v8 = v3;
      v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4])
        v5[4] = v8 + v9;
      result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3)
        result = sub_20C2B209C((_BOOL8)v5);
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

_QWORD *sub_20C2F9D1C(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _BYTE v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF5CB70((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20BF5CBE4(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2F9F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2F9FB4(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2F9FB4(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C2F9FF8(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  __int16 v8;
  char v9;
  _QWORD v10[3];

  v4 = 0;
  *(double *)v10 = a2;
  *(double *)&v10[1] = a3;
  *(double *)&v10[2] = a4;
  while (1)
  {
    v5 = 0;
    v6 = *(double *)&v10[v4];
    if (v6 < -128.0 || v6 > 127.0)
      break;
    if (v6 != (double)(int)v6)
      return 0;
    *((_BYTE *)&v8 + v4++) = (int)v6;
    if (v4 == 3)
    {
      *(_WORD *)a1 = v8;
      *(_BYTE *)(a1 + 2) = v9;
      return 1;
    }
  }
  return v5;
}

uint64_t sub_20C2FA080(uint64_t a1, char *__src)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = 24;
  do
  {
    v5 = v3[2];
    v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6)
      v7 = v5 - *v3 + 0x80000;
    else
      v7 = v4;
    v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4])
      v3[4] = v7 + v8;
    result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4)
      result = sub_20C2B209C((_BOOL8)v3);
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

double *sub_20C2FA120(uint64_t a1, double *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  double *v13;
  unint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  double **v23;
  unint64_t v24;
  uint64_t v26;
  char v27;

  v26 = 0;
  v27 = 0;
  sub_20BF529F4((uint64_t)&v26, a2, a2 + 1, a2 + 2);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v26));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (double *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[2] == *a2 && v13[3] == a2[1] && v13[4] == a2[2])
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = *(double **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (double *)operator new(0x30uLL);
  *v13 = 0.0;
  *((_QWORD *)v13 + 1) = v9;
  *((_OWORD *)v13 + 1) = *(_OWORD *)a3;
  v15 = *a4;
  v13[4] = *(double *)(a3 + 16);
  *((_QWORD *)v13 + 5) = v15;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(double ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v13 = *v23;
LABEL_40:
    *v23 = v13;
    goto LABEL_41;
  }
  *v13 = *(double *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (double **)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20C2FA3A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C2FA3BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531BB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2FA3F8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531BB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C2FA41C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = 0;
  v11[3] = v8;
  v11[4] = v9;
  return sub_20C2FA4AC(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_20C2FA464(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531C10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2FA4A0()
{
  return &unk_24C531C10;
}

double sub_20C2FA4AC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  double result;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  __n128 v10[2];
  uint64_t v11;
  __int16 v12;
  char v13;

  if (a3 < 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    v5 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v5;
    v9 = *(_QWORD *)(a2 + 32);
    sub_20C2FA590(a1, v8, a3, (uint64_t)v10);
    sub_20BF5C7D8(a4, v10);
    sub_20BF5618C((uint64_t)v10);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      v7 = 0;
      v12 = a3;
      v13 = BYTE2(a3);
      do
      {
        v10[0].n128_f64[v7] = (double)*((char *)&v12 + v7);
        ++v7;
      }
      while (v7 != 3);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v10, (char *)0x18, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    *(_QWORD *)&result = sub_20C1D4B9C(a4, v10).n128_u64[0];
  }
  return result;
}

void sub_20C2FA578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2FA590(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 24 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 24 * v13, v10 - v14, v10);
    }
    else
    {
      v19 = 0uLL;
      *(_QWORD *)&v20 = 0;
      v23 = &v19;
      sub_20BF5C478((unint64_t *)a4, v13, &v23);
      sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(24 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C2FA770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C2FA794(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531C30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2FA7D0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531C30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C2FA7F4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_20C2FA844((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2FA7FC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531C90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2FA838()
{
  return &unk_24C531C90;
}

double sub_20C2FA844(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  int v11;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  v10[2] = v6;
  v10[3] = v7;
  v11 = sub_20C2A2B6C();
  return sub_20C2FA8C0(v5, (uint64_t)v10, v3, v4);
}

double sub_20C2FA8C0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  double result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12[2];
  uint64_t v13;
  __n128 __dst;
  uint64_t v15;
  __int16 v16;
  char v17;

  if (a3 < 0)
  {
    v15 = 0;
    memset(&__dst, 0, 32);
    v6 = *(_OWORD *)(a2 + 16);
    v12[0] = *(_OWORD *)a2;
    v12[1] = v6;
    v13 = *(_QWORD *)(a2 + 32);
    sub_20C2FA9C4(a1, v12, a3, (uint64_t)&__dst);
    sub_20BF5C7D8(a4, &__dst);
    sub_20BF5618C((uint64_t)&__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v9 = *(_OWORD *)a2;
    v10 = v5;
    v11 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      v8 = 0;
      v16 = a3;
      v17 = BYTE2(a3);
      do
      {
        __dst.n128_f64[v8] = (double)*((char *)&v16 + v8);
        ++v8;
      }
      while (v8 != 3);
    }
    else
    {
      *((_QWORD *)&v9 + 1) = *(_QWORD *)(*(_QWORD *)v10 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v9 + 8, &__dst, 0x18uLL);
    }
    *(_QWORD *)&result = sub_20C1D4B9C(a4, &__dst).n128_u64[0];
  }
  return result;
}

void sub_20C2FA9AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2FA9C4(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *p_dst;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_254988510);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988510))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_254988508 = *v21;
        __cxa_guard_release(&qword_254988510);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 24 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_254988508 || v11 < 0x800 || (BYTE8(v22) & 7) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 24 * v9, v17, v15);
        }
        else
        {
          __dst = 0uLL;
          *(_QWORD *)&v26 = 0;
          p_dst = &__dst;
          sub_20BF5C478((unint64_t *)a4, v9, &p_dst);
          sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 24 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 24 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C2FACE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988510);
  _Unwind_Resume(a1);
}

__n128 sub_20C2FAD34(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2FAD70(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2FAD94(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2FADEC((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2FADA4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531D10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2FADE0()
{
  return &unk_24C531D10;
}

void sub_20C2FADEC(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = 0;
  }
  v19 = 0;
  v10.n128_f64[0] = sub_20C2FAF08(v3, &v17, a2, a3);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v16)
  {
    v14 = (unint64_t *)&v16->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v10);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20C2FAEEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

double sub_20C2FAF08(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  double result;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  __n128 v27;
  __int128 v28;
  uint64_t v29;

  if (a3 < 0)
  {
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v24 = *a2;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v25 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v26 = *((_QWORD *)a2 + 3);
    sub_20C2FB1E4(a1, &v24, a3, (uint64_t)&v27);
    v15 = v25;
    if (v25)
    {
      v16 = (unint64_t *)&v25->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_20BF5C7D8(a4, &v27);
    sub_20BF5618C((uint64_t)&v27);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      v19 = 0;
      v27.n128_u16[0] = a3;
      v27.n128_u8[2] = BYTE2(a3);
      do
      {
        v23.n128_f64[v19] = (double)v27.n128_i8[v19];
        ++v19;
      }
      while (v19 != 3);
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 24 > v10)
      {
        v27.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v27.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v28 = 770;
        *((_QWORD *)&v28 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v29) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 0x18uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 23)
        {
          v27.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v27.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v28 = 779;
          *((_QWORD *)&v28 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v29) = 0;
          v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 0x18uLL, v11, v22);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, __n128 *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, &v23, 24, v9);
        }
      }
    }
    if (v6)
    {
      v20 = (unint64_t *)&v6->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *(_QWORD *)&result = sub_20C1D4B9C(a4, &v23).n128_u64[0];
  }
  return result;
}

void sub_20C2FB1AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_20C2FB1E4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v40) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 **, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 24 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec3d]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v41 = 0uLL;
              *(_QWORD *)&v42 = 0;
              v40 = &v41;
              sub_20BF5C478((unint64_t *)a4, v39, &v40);
              sub_20BF5C734((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 24 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C2FB7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2FB7F4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531D30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2FB8A0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531DB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2FB94C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531E30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2FB9F8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531EB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2FBAAC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531D30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2FBAE8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531D30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2FBB0C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2FBB68(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2FBB20(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531D90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2FBB5C()
{
  return &unk_24C531D90;
}

unint64_t sub_20C2FBB68(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  float *v12;
  uint64_t v13;
  _OWORD *v14;
  float *v15;
  float *v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD v20[2];

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C2FBCAC((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (float *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(this);
    else
      v12 = *(float **)this;
    v20[0] = a2;
    v20[1] = a3;
    v19 = 0;
    if (sub_20C2FC108((uint64_t)&v19, *v12, v12[1], v12[2]))
    {
      return v19 | 0x4018000000000000;
    }
    else
    {
      v13 = *a1;
      if (!*a1)
      {
        v14 = operator new(0x28uLL);
        *v14 = 0u;
        v14[1] = 0u;
        *((_DWORD *)v14 + 8) = 1065353216;
        sub_20BF2B090(a1, (uint64_t)v14);
        v13 = *a1;
      }
      v18 = 0;
      v15 = sub_20C2FC180(v13, v12, (uint64_t)v12, &v18);
      v16 = v15;
      if (v17)
      {
        *((_QWORD *)v15 + 4) = *a3 & 0xFFFFFFFFFFFFLL | 0x18000000000000;
        sub_20C2CA7D8((uint64_t)v20, (char *)v12);
      }
      return *((_QWORD *)v16 + 4);
    }
  }
}

unint64_t sub_20C2FBCAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x8018000000000000;
  v18 = 0x8018000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B3590(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2FBE2C(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2CC508((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8018000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2CC508((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C2FBE2C(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _BYTE v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF5B3FC((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20BF5B470(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2FC0A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2FC0C4(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2FC0C4(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C2FC108(uint64_t a1, float a2, float a3, float a4)
{
  uint64_t v4;
  float v5;
  BOOL v6;
  __int16 v8;
  char v9;
  _DWORD v10[3];

  v4 = 0;
  *(float *)v10 = a2;
  *(float *)&v10[1] = a3;
  *(float *)&v10[2] = a4;
  while (1)
  {
    v5 = *(float *)&v10[v4];
    v6 = v5 < -128.0 || v5 > 127.0;
    if (v6 || v5 != (float)(int)v5)
      break;
    *((_BYTE *)&v8 + v4++) = (int)v5;
    if (v4 == 3)
    {
      *(_WORD *)a1 = v8;
      *(_BYTE *)(a1 + 2) = v9;
      return 1;
    }
  }
  return 0;
}

float *sub_20C2FC180(uint64_t a1, float *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  float *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  float **v22;
  unint64_t v23;
  uint64_t v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20BF5261C((uint64_t)&v25, a2, a2 + 1, a2 + 2);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (float *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[4] == *a2 && v13[5] == a2[1] && v13[6] == a2[2])
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = *(float **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (float *)operator new(0x28uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  *((_QWORD *)v13 + 2) = *(_QWORD *)a3;
  v13[6] = *(float *)(a3 + 8);
  *((_QWORD *)v13 + 4) = *a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(float ***)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v13 = *v22;
LABEL_40:
    *v22 = v13;
    goto LABEL_41;
  }
  *(_QWORD *)v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v23 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (float **)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20C2FC404(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C2FC420(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531DB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2FC45C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531DB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2FC480(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2FC510(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2FC4C8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531E10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2FC504()
{
  return &unk_24C531E10;
}

void sub_20C2FC510(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;
  __n128 v9[2];
  uint64_t v10;
  __int16 v11;
  char v12;

  if (a3 < 0)
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    v8 = *(_QWORD *)(a2 + 32);
    sub_20C2FC5F4(a1, v7, a3, (uint64_t)v9);
    sub_20BF5B064(a4, v9);
    sub_20BF5618C((uint64_t)v9);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      v6 = 0;
      v11 = a3;
      v12 = BYTE2(a3);
      do
      {
        v9[0].n128_f32[v6] = (float)*((char *)&v11 + v6);
        ++v6;
      }
      while (v6 != 3);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v9, (char *)0xC, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_20C1D49C8(a4, (uint64_t)v9);
  }
}

void sub_20C2FC5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2FC5F4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 12 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 12 * v13, v10 - v14, v10);
    }
    else
    {
      DWORD2(v19) = 0;
      *(_QWORD *)&v19 = 0;
      v23 = &v19;
      sub_20BF5AD04((unint64_t *)a4, v13, (uint64_t **)&v23);
      sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(12 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C2FC7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C2FC7F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2FC834(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2FC858(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2FC8A8((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2FC860(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531E90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2FC89C()
{
  return &unk_24C531E90;
}

void sub_20C2FC8A8(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2FC924(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2FC924(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11[2];
  uint64_t v12;
  __n128 __dst;
  uint64_t v14;
  __int16 v15;
  char v16;

  if (a3 < 0)
  {
    v14 = 0;
    memset(&__dst, 0, 32);
    v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    v12 = *(_QWORD *)(a2 + 32);
    sub_20C2FCA28(a1, v11, a3, (uint64_t)&__dst);
    sub_20BF5B064(a4, &__dst);
    sub_20BF5618C((uint64_t)&__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v8 = *(_OWORD *)a2;
    v9 = v5;
    v10 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      v7 = 0;
      v15 = a3;
      v16 = BYTE2(a3);
      do
      {
        __dst.n128_f32[v7] = (float)*((char *)&v15 + v7);
        ++v7;
      }
      while (v7 != 3);
    }
    else
    {
      *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v8 + 8, &__dst, 0xCuLL);
    }
    sub_20C1D49C8(a4, (uint64_t)&__dst);
  }
}

void sub_20C2FCA10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2FCA28(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *p_dst;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_254988520);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988520))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_254988518 = *v21;
        __cxa_guard_release(&qword_254988520);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 12 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_254988518 || v11 < 0x800 || (BYTE8(v22) & 3) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 12 * v9, v17, v15);
        }
        else
        {
          DWORD2(__dst) = 0;
          *(_QWORD *)&__dst = 0;
          p_dst = &__dst;
          sub_20BF5AD04((unint64_t *)a4, v9, (uint64_t **)&p_dst);
          sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 12 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 12 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C2FCD48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988520);
  _Unwind_Resume(a1);
}

__n128 sub_20C2FCD98(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531EB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2FCDD4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531EB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2FCDF8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2FCE50((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2FCE08(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531F10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2FCE44()
{
  return &unk_24C531F10;
}

void sub_20C2FCE50(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2FCF6C(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2FCF50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2FCF6C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  float v22[3];
  __int128 v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  __n128 v26;
  __int128 v27;
  uint64_t v28;

  if (a3 < 0)
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    v23 = *a2;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v24 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v25 = *((_QWORD *)a2 + 3);
    sub_20C2FD248(a1, &v23, a3, (uint64_t)&v26);
    v15 = v24;
    if (v24)
    {
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_20BF5B064(a4, &v26);
    sub_20BF5618C((uint64_t)&v26);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      v18 = 0;
      v26.n128_u16[0] = a3;
      v26.n128_u8[2] = BYTE2(a3);
      do
      {
        v22[v18] = (float)v26.n128_i8[v18];
        ++v18;
      }
      while (v18 != 3);
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 12 > v10)
      {
        v26.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v26.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v27 = 770;
        *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v28) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 0xCuLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 11)
        {
          v26.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v26.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v27 = 779;
          *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v28) = 0;
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 0xCuLL, v11, v21);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, float *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, v22, 12, v9);
        }
      }
    }
    if (v6)
    {
      v19 = (unint64_t *)&v6->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_20C1D49C8(a4, (uint64_t)v22);
  }
}

void sub_20C2FD210(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_20C2FD248(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v40) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 **, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 12 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec3f]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              DWORD2(v41) = 0;
              v40 = &v41;
              *(_QWORD *)&v41 = 0;
              sub_20BF5AD04((unint64_t *)a4, v39, (uint64_t **)&v40);
              sub_20BF5AFC0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 12 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C2FD820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2FD854(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531F30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2FD900(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C531FB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2FD9AC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532030;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2FDA58(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5320B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2FDB0C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531F30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2FDB48(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531F30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2FDB6C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2FDBC8(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2FDB80(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C531F90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2FDBBC()
{
  return &unk_24C531F90;
}

unint64_t sub_20C2FDBC8(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  unsigned __int16 *i;
  uint64_t v15;
  _OWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  _QWORD v21[2];
  unsigned __int16 v22;
  unsigned __int8 v23;

  v4 = this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *(_QWORD *)v4;
    return sub_20C2FDD40((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    v12 = 0;
    v21[0] = a2;
    v21[1] = a3;
    v13 = *(_DWORD *)v4;
    WORD2(v20) = *((_WORD *)v4 + 2);
    LODWORD(v20) = v13;
    for (i = (unsigned __int16 *)&v20; (sub_20C2FE2E4(i, (_BYTE *)&v22 + v12) & 1) != 0; ++i)
    {
      if (++v12 == 3)
        return v22 | ((unint64_t)v23 << 16) | 0x4019000000000000;
    }
    v15 = *a1;
    if (!*a1)
    {
      v16 = operator new(0x28uLL);
      *v16 = 0u;
      v16[1] = 0u;
      *((_DWORD *)v16 + 8) = 1065353216;
      sub_20BF2B090(a1, (uint64_t)v16);
      v15 = *a1;
    }
    v20 = 0;
    v17 = sub_20C2FE3DC(v15, (unsigned __int16 *)v4, (uint64_t)v4, &v20);
    v18 = v17;
    if (v19)
    {
      v17[3] = *a3 & 0xFFFFFFFFFFFFLL | 0x19000000000000;
      sub_20C2FE244((uint64_t)v21, (char *)v4);
    }
    return v18[3];
  }
}

unint64_t sub_20C2FDD40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x8019000000000000;
  v18 = 0x8019000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B3634(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C2FDF68(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2FDEC0((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x8019000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2FDEC0((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t sub_20C2FDEC0(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  v3 = 6 * a3;
  if (6 * a3)
  {
    v5 = *(_QWORD **)(result + 8);
    do
    {
      v6 = v5[2];
      v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7)
        v8 = v6 - *v5 + 0x80000;
      else
        v8 = v3;
      v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4])
        v5[4] = v8 + v9;
      result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3)
        result = sub_20C2B209C((_BOOL8)v5);
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

uint64_t *sub_20C2FDF68(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  uint64_t *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  char v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF5BEE0((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20BF5BF54(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (uint64_t *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = (uint64_t *)v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = (uint64_t)i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = (uint64_t)i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (uint64_t *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2FE1E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C2FE200(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C2FE200(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C2FE244(uint64_t a1, char *__src)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = 6;
  do
  {
    v5 = v3[2];
    v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6)
      v7 = v5 - *v3 + 0x80000;
    else
      v7 = v4;
    v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4])
      v3[4] = v7 + v8;
    result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4)
      result = sub_20C2B209C((_BOOL8)v3);
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

uint64_t sub_20C2FE2E4(unsigned __int16 *a1, _BYTE *a2)
{
  float v4;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v5;
  unsigned int v6;

  v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
  if (v4 < -128.0 || v4 > 127.0)
    return 0;
  v5 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)(int)v4);
  if ((int)v4)
  {
    if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23])
    {
      v6 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v5 >> 23]
         + (((v5 & 0x7FFFFF) + ((v5 >> 13) & 1) + 4095) >> 13);
    }
    else
    {
      LOWORD(v6) = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v5);
      v4 = pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[*a1];
    }
  }
  else
  {
    v6 = v5 >> 16;
  }
  if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_toFloat[(unsigned __int16)v6] != v4)
    return 0;
  *a2 = (int)v4;
  return 1;
}

void *sub_20C2FE3DC(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v26;
  char v27;

  v26 = 0;
  v27 = 0;
  sub_20BF52298((uint64_t)&v26, a2, a2 + 1, a2 + 2);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v26));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (sub_20BF522D0((unsigned __int16 *)i + 8, a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  *((_DWORD *)i + 4) = *(_DWORD *)a3;
  *((_WORD *)i + 10) = *(_WORD *)(a3 + 4);
  *((_QWORD *)i + 3) = *a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)i = *v23;
LABEL_38:
    *v23 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v24 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (_QWORD *)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C2FE64C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C2FE668(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C531FB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2FE6A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C531FB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2FE6C8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C2FE758(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C2FE710(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532010))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2FE74C()
{
  return &unk_24C532010;
}

void sub_20C2FE758(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C2FE818(a1, v6, a3, (uint64_t)v8);
    sub_20BF5BB80(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
      sub_20C2FEA14((uint64_t)v8, a3);
    else
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)6, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    sub_20C1D47A4((uint64_t)a4, (uint64_t)v8);
  }
}

void sub_20C2FE800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2FE818(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  __int16 v24;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 6 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 6 * v13, v10 - v14, v10);
    }
    else
    {
      v24 = 0;
      v23 = 0;
      *(_QWORD *)&v19 = &v23;
      sub_20BF5B820((unint64_t *)a4, v13, (int **)&v19);
      sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(6 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C2FE9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C2FEA14(uint64_t a1, int a2)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v4;
  uint64_t result;
  __int16 v6;
  char v7;

  v3 = 0;
  v6 = a2;
  v7 = BYTE2(a2);
  do
  {
    v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*((char *)&v6 + v3));
    if (*((_BYTE *)&v6 + v3))
    {
      if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23])
        result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]
               + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
      else
        result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
    }
    else
    {
      result = v4 >> 16;
    }
    *(_WORD *)(a1 + 2 * v3++) = result;
  }
  while (v3 != 3);
  return result;
}

__n128 sub_20C2FEAB8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2FEAF4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532030;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2FEB18(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2FEB68((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C2FEB20(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532090))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2FEB5C()
{
  return &unk_24C532090;
}

void sub_20C2FEB68(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C2FEBE4(v5, (uint64_t)v9, v3, v4);
}

void sub_20C2FEBE4(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];
  uint64_t v11;
  __n128 __dst[2];
  uint64_t v13;

  if (a3 < 0)
  {
    v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    v11 = *(_QWORD *)(a2 + 32);
    sub_20C2FECC4(a1, v10, a3, (uint64_t)__dst);
    sub_20BF5BB80(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)a2;
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_20C2FEA14((uint64_t)__dst, a3);
    }
    else
    {
      *((_QWORD *)&v7 + 1) = *(_QWORD *)(*(_QWORD *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v7 + 8, __dst, 6uLL);
    }
    sub_20C1D47A4((uint64_t)a4, (uint64_t)__dst);
  }
}

void sub_20C2FECAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C2FECC4(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  __int16 v30;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_254988530);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988530))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_254988528 = *v21;
        __cxa_guard_release(&qword_254988530);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 6 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_254988528 || v11 < 0x800 || (BYTE8(v22) & 1) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 6 * v9, v17, v15);
        }
        else
        {
          v30 = 0;
          v29 = 0;
          *(_QWORD *)&__dst = &v29;
          sub_20BF5B820((unint64_t *)a4, v9, (int **)&__dst);
          sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 6 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 6 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C2FEFE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988530);
  _Unwind_Resume(a1);
}

__n128 sub_20C2FF030(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5320B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2FF06C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5320B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C2FF090(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C2FF0E8((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C2FF0A0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532110))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2FF0DC()
{
  return &unk_24C532110;
}

void sub_20C2FF0E8(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C2FF204(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C2FF1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C2FF204(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE v21[6];
  __int128 v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  uint64_t v27;

  if (a3 < 0)
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    v22 = *a2;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v23 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v24 = *((_QWORD *)a2 + 3);
    sub_20C2FF4BC(a1, &v22, a3, (uint64_t)&v25);
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_20BF5BB80(a4, &v25);
    sub_20BF5618C((uint64_t)&v25);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_20C2FEA14((uint64_t)v21, a3);
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 6 > v10)
      {
        v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v25.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v26 = 770;
        *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v27) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 6uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 5)
        {
          v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v25.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v26 = 779;
          *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v27) = 0;
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 6uLL, v11, v20);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, v21, 6, v9);
        }
      }
    }
    if (v6)
    {
      v18 = (unint64_t *)&v6->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_20C1D47A4((uint64_t)a4, (uint64_t)v21);
  }
}

void sub_20C2FF484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C2FF4BC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unsigned int v40;
  __int16 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v42) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v42, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v42 = "usd/crateFile.cpp";
        *((_QWORD *)&v42 + 1) = "Read";
        *(_QWORD *)&v43 = 770;
        *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v44) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v42 = "usd/crateFile.cpp";
          *((_QWORD *)&v42 + 1) = "Read";
          *(_QWORD *)&v43 = 779;
          *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v44) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      v40 = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v42 = "usd/crateFile.cpp";
        *((_QWORD *)&v42 + 1) = "Read";
        *(_QWORD *)&v43 = 770;
        *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v44) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v42 = "usd/crateFile.cpp";
          *((_QWORD *)&v42 + 1) = "Read";
          *(_QWORD *)&v43 = 779;
          *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v44) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 6 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v42 = "usd/crateFile.cpp";
              *((_QWORD *)&v42 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v43 = 2053;
              *((_QWORD *)&v43 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec3h]";
              LOBYTE(v44) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v41 = 0;
              v40 = 0;
              *(_QWORD *)&v42 = &v40;
              sub_20BF5B820((unint64_t *)a4, v39, (int **)&v42);
              sub_20BF5BADC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 6 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v42 = "usd/crateFile.cpp";
                *((_QWORD *)&v42 + 1) = "Read";
                *(_QWORD *)&v43 = 770;
                *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v44) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v42 = "usd/crateFile.cpp";
                  *((_QWORD *)&v42 + 1) = "Read";
                  *(_QWORD *)&v43 = 779;
                  *((_QWORD *)&v43 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v44) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v42, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v44 = 0;
  v42 = 0u;
  v43 = 0u;
  if (&v42 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v43;
    *(_OWORD *)a4 = v42;
    *(_OWORD *)(a4 + 16) = v13;
    v42 = 0u;
    v43 = 0u;
    *(_QWORD *)(a4 + 32) = v44;
    v44 = 0;
  }
  sub_20BF5618C((uint64_t)&v42);
}

void sub_20C2FFA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C2FFACC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532130;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2FFB78(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5321B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2FFC24(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532230;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C2FFCD0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5322B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C2FFD84(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C2FFDC0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532130;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C2FFDE4(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C2FFE40(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C2FFDF8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532190))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C2FFE34()
{
  return &unk_24C532190;
}

unint64_t sub_20C2FFE40(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  int *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _OWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  _QWORD v21[2];
  unsigned __int16 v22;
  unsigned __int8 v23;
  uint64_t v24;
  int v25;

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C2FFFAC((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (int *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 168))(this);
    else
      v12 = *(int **)this;
    v13 = 0;
    v21[0] = a2;
    v21[1] = a3;
    v14 = v12[2];
    v24 = *(_QWORD *)v12;
    v25 = v14;
    while (1)
    {
      v15 = *((_DWORD *)&v24 + v13);
      if (v15 != (char)v15)
        break;
      *((_BYTE *)&v22 + v13++) = v15;
      if (v13 == 3)
        return v22 | ((unint64_t)v23 << 16) | 0x401A000000000000;
    }
    v16 = *a1;
    if (!*a1)
    {
      v17 = operator new(0x28uLL);
      *v17 = 0u;
      v17[1] = 0u;
      *((_DWORD *)v17 + 8) = 1065353216;
      sub_20BF2B090(a1, (uint64_t)v17);
      v16 = *a1;
    }
    v24 = 0;
    v18 = sub_20C300408(v16, v12, (uint64_t)v12, &v24);
    v19 = v18;
    if (v20)
    {
      v18[4] = *a3 & 0xFFFFFFFFFFFFLL | 0x1A000000000000;
      sub_20C2CA7D8((uint64_t)v21, (char *)v12);
    }
    return v19[4];
  }
}

unint64_t sub_20C2FFFAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x801A000000000000;
  v18 = 0x801A000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B36D8(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C30012C(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2CC508((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x801A000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2CC508((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C30012C(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _BYTE v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20C011638((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20C01172C(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C3003A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C3003C4(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C3003C4(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

_QWORD *sub_20C300408(uint64_t a1, int *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C0112B4((uint64_t)&v25, a2, a2 + 1, a2 + 2);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == *a2 && *((_DWORD *)v13 + 5) == a2[1] && *((_DWORD *)v13 + 6) == a2[2])
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x28uLL);
  *v13 = 0;
  v13[1] = v9;
  v13[2] = *(_QWORD *)a3;
  *((_DWORD *)v13 + 6) = *(_DWORD *)(a3 + 8);
  v13[4] = *a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_40:
    *v22 = v13;
    goto LABEL_41;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_40;
  }
LABEL_41:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20C30068C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C3006A8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5321B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3006E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5321B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C300708(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C300798(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C300750(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532210))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C30078C()
{
  return &unk_24C532210;
}

void sub_20C300798(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;
  __n128 v9[2];
  uint64_t v10;
  __int16 v11;
  char v12;

  if (a3 < 0)
  {
    v10 = 0;
    memset(v9, 0, sizeof(v9));
    v5 = *(_OWORD *)(a2 + 16);
    v7[0] = *(_OWORD *)a2;
    v7[1] = v5;
    v8 = *(_QWORD *)(a2 + 32);
    sub_20C300878(a1, v7, a3, (uint64_t)v9);
    sub_20C1D42D0(a4, v9);
    sub_20BF5618C((uint64_t)v9);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      v6 = 0;
      v11 = a3;
      v12 = BYTE2(a3);
      do
      {
        v9[0].n128_u32[v6] = *((char *)&v11 + v6);
        ++v6;
      }
      while (v6 != 3);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v9, (char *)0xC, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    sub_20C1D4238(a4, (uint64_t)v9);
  }
}

void sub_20C300860(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C300878(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 12 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 12 * v13, v10 - v14, v10);
    }
    else
    {
      DWORD2(v19) = 0;
      *(_QWORD *)&v19 = 0;
      v23 = &v19;
      sub_20C0118B0((unint64_t *)a4, v13, (uint64_t **)&v23);
      sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(12 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C300A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C300A7C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C300AB8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532230;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C300ADC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C300B2C((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C300AE4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532290))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C300B20()
{
  return &unk_24C532290;
}

void sub_20C300B2C(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C300BA8(v5, (uint64_t)v9, v3, v4);
}

void sub_20C300BA8(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11[2];
  uint64_t v12;
  __n128 __dst;
  uint64_t v14;
  __int16 v15;
  char v16;

  if (a3 < 0)
  {
    v14 = 0;
    memset(&__dst, 0, 32);
    v6 = *(_OWORD *)(a2 + 16);
    v11[0] = *(_OWORD *)a2;
    v11[1] = v6;
    v12 = *(_QWORD *)(a2 + 32);
    sub_20C300CA8(a1, v11, a3, (uint64_t)&__dst);
    sub_20C1D42D0(a4, &__dst);
    sub_20BF5618C((uint64_t)&__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v8 = *(_OWORD *)a2;
    v9 = v5;
    v10 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      v7 = 0;
      v15 = a3;
      v16 = BYTE2(a3);
      do
      {
        __dst.n128_u32[v7] = *((char *)&v15 + v7);
        ++v7;
      }
      while (v7 != 3);
    }
    else
    {
      *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v8 + 8, &__dst, 0xCuLL);
    }
    sub_20C1D4238(a4, (uint64_t)&__dst);
  }
}

void sub_20C300C90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C300CA8(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *p_dst;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_254988540);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988540))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_254988538 = *v21;
        __cxa_guard_release(&qword_254988540);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 12 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_254988538 || v11 < 0x800 || (BYTE8(v22) & 3) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 12 * v9, v17, v15);
        }
        else
        {
          DWORD2(__dst) = 0;
          *(_QWORD *)&__dst = 0;
          p_dst = &__dst;
          sub_20C0118B0((unint64_t *)a4, v9, (uint64_t **)&p_dst);
          sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 12 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 12 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C300FC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988540);
  _Unwind_Resume(a1);
}

__n128 sub_20C301018(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5322B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C301054(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5322B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C301078(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C3010D0((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C301088(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532310))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3010C4()
{
  return &unk_24C532310;
}

void sub_20C3010D0(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C3011EC(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C3011D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C3011EC(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  _DWORD v22[3];
  __int128 v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  __n128 v26;
  __int128 v27;
  uint64_t v28;

  if (a3 < 0)
  {
    v28 = 0;
    v26 = 0u;
    v27 = 0u;
    v23 = *a2;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v24 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v25 = *((_QWORD *)a2 + 3);
    sub_20C3014C4(a1, &v23, a3, (uint64_t)&v26);
    v15 = v24;
    if (v24)
    {
      v16 = (unint64_t *)&v24->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_20C1D42D0(a4, &v26);
    sub_20BF5618C((uint64_t)&v26);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      v18 = 0;
      v26.n128_u16[0] = a3;
      v26.n128_u8[2] = BYTE2(a3);
      do
      {
        v22[v18] = v26.n128_i8[v18];
        ++v18;
      }
      while (v18 != 3);
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 12 > v10)
      {
        v26.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v26.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v27 = 770;
        *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v28) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 0xCuLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 11)
        {
          v26.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v26.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v27 = 779;
          *((_QWORD *)&v27 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v28) = 0;
          v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v26, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 0xCuLL, v11, v21);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, v22, 12, v9);
        }
      }
    }
    if (v6)
    {
      v19 = (unint64_t *)&v6->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_20C1D4238(a4, (uint64_t)v22);
  }
}

void sub_20C30148C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_20C3014C4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v40) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 **, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 12 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec3i]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              DWORD2(v41) = 0;
              v40 = &v41;
              *(_QWORD *)&v41 = 0;
              sub_20C0118B0((unint64_t *)a4, v39, (uint64_t **)&v40);
              sub_20C011B6C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 12 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C301A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C301AD0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532330;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C301B7C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5323B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C301C28(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532430;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C301CD4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5324B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C301D88(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C301DC4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532330;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C301DE8(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C301E44(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C301DFC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532390))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C301E38()
{
  return &unk_24C532390;
}

unint64_t sub_20C301E44(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  double *v12;
  uint64_t v13;
  _OWORD *v14;
  double *v15;
  double *v16;
  char v17;
  double v18;
  unsigned int v19;
  _QWORD v20[2];

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C301F88((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(this);
    else
      v12 = *(double **)this;
    v20[0] = a2;
    v20[1] = a3;
    v19 = 0;
    if (sub_20C3023E4(&v19, *v12, v12[1], v12[2], v12[3]))
    {
      return v19 | 0x401B000000000000;
    }
    else
    {
      v13 = *a1;
      if (!*a1)
      {
        v14 = operator new(0x28uLL);
        *v14 = 0u;
        v14[1] = 0u;
        *((_DWORD *)v14 + 8) = 1065353216;
        sub_20BF2B090(a1, (uint64_t)v14);
        v13 = *a1;
      }
      v18 = 0.0;
      v15 = sub_20C302464(v13, v12, v12, &v18);
      v16 = v15;
      if (v17)
      {
        *((_QWORD *)v15 + 6) = *a3 & 0xFFFFFFFFFFFFLL | 0x1B000000000000;
        sub_20C2EC870((uint64_t)v20, (char *)v12);
      }
      return *((_QWORD *)v16 + 6);
    }
  }
}

unint64_t sub_20C301F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x801B000000000000;
  v18 = 0x801B000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B377C(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C302108(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2B2674((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x801B000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2B2674((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C302108(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _BYTE v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF5F0CC((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20BF5F1C4(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C302384(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C3023A0(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C3023A0(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C3023E4(_DWORD *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  int v9;
  _QWORD v10[4];

  v5 = 0;
  *(double *)v10 = a2;
  *(double *)&v10[1] = a3;
  *(double *)&v10[2] = a4;
  *(double *)&v10[3] = a5;
  while (1)
  {
    v6 = 0;
    v7 = *(double *)&v10[v5];
    if (v7 < -128.0 || v7 > 127.0)
      break;
    if (v7 != (double)(int)v7)
      return 0;
    *((_BYTE *)&v9 + v5++) = (int)v7;
    if (v5 == 4)
    {
      *a1 = v9;
      return 1;
    }
  }
  return v6;
}

double *sub_20C302464(uint64_t a1, double *a2, _OWORD *a3, double *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  double *v13;
  unint64_t v14;
  __int128 v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  uint64_t v22;
  double **v23;
  unint64_t v24;
  uint64_t v26;
  char v27;

  v26 = 0;
  v27 = 0;
  sub_20BF53A74((uint64_t)&v26, a2, a2 + 1, a2 + 2, a2 + 3);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v26));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (double *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[2] == *a2 && v13[3] == a2[1] && v13[4] == a2[2] && v13[5] == a2[3])
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = *(double **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (double *)operator new(0x38uLL);
  *v13 = 0.0;
  *((_QWORD *)v13 + 1) = v9;
  v15 = a3[1];
  *((_OWORD *)v13 + 1) = *a3;
  *((_OWORD *)v13 + 2) = v15;
  v13[6] = *a4;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_20BDEC6E0(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD *)a1;
  v23 = *(double ***)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v13 = *v23;
LABEL_41:
    *v23 = v13;
    goto LABEL_42;
  }
  *v13 = *(double *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v22 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v24 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10)
        v24 %= v10;
    }
    else
    {
      v24 &= v10 - 1;
    }
    v23 = (double **)(*(_QWORD *)a1 + 8 * v24);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20C3026F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C30270C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5323B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C302748(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5323B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C30276C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = 0;
  v11[3] = v8;
  v11[4] = v9;
  return sub_20C3027FC(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_20C3027B4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532410))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3027F0()
{
  return &unk_24C532410;
}

double sub_20C3027FC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  double result;
  uint64_t v7;
  _OWORD v8[2];
  uint64_t v9;
  __n128 v10[2];
  uint64_t v11;
  _DWORD _5C[9];

  if (a3 < 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    v5 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v5;
    v9 = *(_QWORD *)(a2 + 32);
    sub_20C3028D8(a1, v8, a3, (uint64_t)v10);
    sub_20BF5ED34(a4, v10);
    sub_20BF5618C((uint64_t)v10);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      v7 = 0;
      _5C[0] = a3;
      do
      {
        v10[0].n128_f64[v7] = (double)*((char *)_5C + v7);
        ++v7;
      }
      while (v7 != 4);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v10, (char *)0x20, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    *(_QWORD *)&result = sub_20C1D567C(a4, v10).n128_u64[0];
  }
  return result;
}

void sub_20C3028C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C3028D8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 32 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 32 * v13, v10 - v14, v10);
    }
    else
    {
      v19 = 0u;
      v20 = 0u;
      v23 = &v19;
      sub_20BF5EA40((unint64_t *)a4, v13, &v23);
      sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(32 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C302AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C302AD4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C302B10(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532430;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C302B34(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_20C302B84((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C302B3C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532490))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C302B78()
{
  return &unk_24C532490;
}

double sub_20C302B84(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  int v11;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  v10[2] = v6;
  v10[3] = v7;
  v11 = sub_20C2A2B6C();
  return sub_20C302C00(v5, (uint64_t)v10, v3, v4);
}

double sub_20C302C00(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  double result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12[2];
  uint64_t v13;
  __n128 __dst;
  uint64_t v15;
  int v16;

  if (a3 < 0)
  {
    v15 = 0;
    memset(&__dst, 0, 32);
    v6 = *(_OWORD *)(a2 + 16);
    v12[0] = *(_OWORD *)a2;
    v12[1] = v6;
    v13 = *(_QWORD *)(a2 + 32);
    sub_20C302CFC(a1, v12, a3, (uint64_t)&__dst);
    sub_20BF5ED34(a4, &__dst);
    sub_20BF5618C((uint64_t)&__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v9 = *(_OWORD *)a2;
    v10 = v5;
    v11 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      v8 = 0;
      v16 = a3;
      do
      {
        __dst.n128_f64[v8] = (double)*((char *)&v16 + v8);
        ++v8;
      }
      while (v8 != 4);
    }
    else
    {
      *((_QWORD *)&v9 + 1) = *(_QWORD *)(*(_QWORD *)v10 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v9 + 8, &__dst, 0x20uLL);
    }
    *(_QWORD *)&result = sub_20C1D567C(a4, &__dst).n128_u64[0];
  }
  return result;
}

void sub_20C302CE4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C302CFC(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *p_dst;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_254988550);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988550))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_254988548 = *v21;
        __cxa_guard_release(&qword_254988550);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 32 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_254988548 || v11 < 0x800 || (BYTE8(v22) & 7) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 32 * v9, v17, v15);
        }
        else
        {
          __dst = 0u;
          v26 = 0u;
          p_dst = &__dst;
          sub_20BF5EA40((unint64_t *)a4, v9, &p_dst);
          sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 32 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 32 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C303014(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988550);
  _Unwind_Resume(a1);
}

__n128 sub_20C303064(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5324B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3030A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5324B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C3030C4(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C30311C((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C3030D4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532510))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C303110()
{
  return &unk_24C532510;
}

void sub_20C30311C(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = 0;
  }
  v19 = 0;
  v10.n128_f64[0] = sub_20C303238(v3, &v17, a2, a3);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v16)
  {
    v14 = (unint64_t *)&v16->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v10);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20C30321C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

double sub_20C303238(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  double result;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  _OWORD v23[2];
  __int128 v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  __n128 v27;
  __int128 v28;
  uint64_t v29;

  if (a3 < 0)
  {
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v24 = *a2;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v25 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v26 = *((_QWORD *)a2 + 3);
    sub_20C30350C(a1, &v24, a3, (uint64_t)&v27);
    v15 = v25;
    if (v25)
    {
      v16 = (unint64_t *)&v25->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_20BF5ED34(a4, &v27);
    sub_20BF5618C((uint64_t)&v27);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      v19 = 0;
      v27.n128_u32[0] = a3;
      do
      {
        *((double *)v23 + v19) = (double)v27.n128_i8[v19];
        ++v19;
      }
      while (v19 != 4);
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 32 > v10)
      {
        v27.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v27.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v28 = 770;
        *((_QWORD *)&v28 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v29) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 0x20uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 31)
        {
          v27.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v27.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v28 = 779;
          *((_QWORD *)&v28 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v29) = 0;
          v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 0x20uLL, v11, v22);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, v23, 32, v9);
        }
      }
    }
    if (v6)
    {
      v20 = (unint64_t *)&v6->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    *(_QWORD *)&result = sub_20C1D567C(a4, v23).n128_u64[0];
  }
  return result;
}

void sub_20C3034D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_20C30350C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v40) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 **, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 32 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec4d]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v41 = 0u;
              v42 = 0u;
              v40 = &v41;
              sub_20BF5EA40((unint64_t *)a4, v39, &v40);
              sub_20BF5ECA0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 32 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C303AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C303B14(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532530;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C303BC0(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5325B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C303C6C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532630;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C303D18(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5326B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C303DCC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532530;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C303E08(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532530;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C303E2C(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C303E88(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C303E40(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532590))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C303E7C()
{
  return &unk_24C532590;
}

unint64_t sub_20C303E88(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  float *v12;
  uint64_t v13;
  _OWORD *v14;
  float *v15;
  float *v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD v20[2];

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C303FCC((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (float *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                            + 168))(this);
    else
      v12 = *(float **)this;
    v20[0] = a2;
    v20[1] = a3;
    v19 = 0;
    if (sub_20C304428(&v19, *v12, v12[1], v12[2], v12[3]))
    {
      return v19 | 0x401C000000000000;
    }
    else
    {
      v13 = *a1;
      if (!*a1)
      {
        v14 = operator new(0x28uLL);
        *v14 = 0u;
        v14[1] = 0u;
        *((_DWORD *)v14 + 8) = 1065353216;
        sub_20BF2B090(a1, (uint64_t)v14);
        v13 = *a1;
      }
      v18 = 0;
      v15 = sub_20C304498(v13, v12, v12, &v18);
      v16 = v15;
      if (v17)
      {
        *((_QWORD *)v15 + 4) = *a3 & 0xFFFFFFFFFFFFLL | 0x1C000000000000;
        sub_20C2CA738((uint64_t)v20, (char *)v12);
      }
      return *((_QWORD *)v16 + 4);
    }
  }
}

unint64_t sub_20C303FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x801C000000000000;
  v18 = 0x801C000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B3820(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C30414C(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2CA068((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x801C000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2CA068((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C30414C(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _BYTE v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF5DA1C((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20BF5DB14(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C3043C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C3043E4(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C3043E4(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C304428(_DWORD *a1, float a2, float a3, float a4, float a5)
{
  uint64_t v5;
  float v6;
  BOOL v7;
  int v9;
  _DWORD v10[4];

  v5 = 0;
  *(float *)v10 = a2;
  *(float *)&v10[1] = a3;
  *(float *)&v10[2] = a4;
  *(float *)&v10[3] = a5;
  while (1)
  {
    v6 = *(float *)&v10[v5];
    v7 = v6 < -128.0 || v6 > 127.0;
    if (v7 || v6 != (float)(int)v6)
      break;
    *((_BYTE *)&v10[-1] + v5++) = (int)v6;
    if (v5 == 4)
    {
      *a1 = v9;
      return 1;
    }
  }
  return 0;
}

float *sub_20C304498(uint64_t a1, float *a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  float *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  float **v22;
  unint64_t v23;
  uint64_t v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20BF53680((uint64_t)&v25, a2, a2 + 1, a2 + 2, a2 + 3);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = (float *)*v12;
      if (*v12)
      {
        do
        {
          v14 = *((_QWORD *)v13 + 1);
          if (v14 == v9)
          {
            if (v13[4] == *a2 && v13[5] == a2[1] && v13[6] == a2[2] && v13[7] == a2[3])
              return v13;
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = *(float **)v13;
        }
        while (v13);
      }
    }
  }
  v13 = (float *)operator new(0x28uLL);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = v9;
  *((_OWORD *)v13 + 1) = *a3;
  *((_QWORD *)v13 + 4) = *a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(float ***)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *(_QWORD *)v13 = *v22;
LABEL_41:
    *v22 = v13;
    goto LABEL_42;
  }
  *(_QWORD *)v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v13)
  {
    v23 = *(_QWORD *)(*(_QWORD *)v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (float **)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20C304724(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C304740(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5325B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C30477C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5325B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C3047A0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3, int8x8_t a4)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  v4 = *a2;
  v5 = *a3;
  v7 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = v7[808];
  v9 = v7[809];
  v10 = v7[807];
  v12[0] = v7;
  v12[1] = v8;
  v12[2] = 0;
  v12[3] = v9;
  v12[4] = v10;
  return sub_20C304830(v6, (uint64_t)v12, v4, v5, a4);
}

uint64_t sub_20C3047E8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532610))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C304824()
{
  return &unk_24C532610;
}

double sub_20C304830(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, int8x8_t a5)
{
  __int128 v6;
  double result;
  _OWORD v8[2];
  uint64_t v9;
  __n128 v10[2];
  uint64_t v11;

  if (a3 < 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    v6 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v6;
    v9 = *(_QWORD *)(a2 + 32);
    sub_20C304900(a1, v8, a3, (uint64_t)v10);
    sub_20BF5D684(a4, v10);
    sub_20BF5618C((uint64_t)v10);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      a5.i32[0] = a3;
      v10[0] = (__n128)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(a5, a5), 8uLL), 8uLL)));
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v10, (char *)0x10, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    *(_QWORD *)&result = sub_20C1D54C4((unsigned int **)a4, v10).n128_u64[0];
  }
  return result;
}

void sub_20C3048E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C304900(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 16 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 16 * v13, v10 - v14, v10);
    }
    else
    {
      v19 = 0uLL;
      v23 = &v19;
      sub_20BF5D3A4((unint64_t *)a4, v13, &v23);
      sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(16 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C304AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C304AF8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C304B34(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532630;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C304B58(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_20C304BA8((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C304B60(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532690))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C304B9C()
{
  return &unk_24C532690;
}

double sub_20C304BA8(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  int v11;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  v10[2] = v6;
  v10[3] = v7;
  v11 = sub_20C2A2B6C();
  return sub_20C304C24(v5, (uint64_t)v10, v3, v4);
}

double sub_20C304C24(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12[2];
  uint64_t v13;
  __n128 __dst[2];
  uint64_t v15;

  if (a3 < 0)
  {
    v15 = 0;
    memset(__dst, 0, sizeof(__dst));
    v7 = *(_OWORD *)(a2 + 16);
    v12[0] = *(_OWORD *)a2;
    v12[1] = v7;
    v13 = *(_QWORD *)(a2 + 32);
    sub_20C304D14(a1, v12, a3, (uint64_t)__dst);
    sub_20BF5D684(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    v5 = *(_OWORD *)a2;
    v6 = *(_OWORD *)(a2 + 16);
    v9 = *(_OWORD *)a2;
    v10 = v6;
    v11 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      LODWORD(v5) = a3;
      __dst[0] = (__n128)vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(*(int8x8_t *)&v5, *(int8x8_t *)&v5), 8uLL), 8uLL)));
    }
    else
    {
      *((_QWORD *)&v9 + 1) = *(_QWORD *)(*(_QWORD *)v10 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v9 + 8, __dst, 0x10uLL);
    }
    *(_QWORD *)&result = sub_20C1D54C4((unsigned int **)a4, __dst).n128_u64[0];
  }
  return result;
}

void sub_20C304CFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C304D14(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *p_dst;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_254988560);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988560))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_254988558 = *v21;
        __cxa_guard_release(&qword_254988560);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 16 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_254988558 || v11 < 0x800 || (BYTE8(v22) & 3) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 16 * v9, v17, v15);
        }
        else
        {
          __dst = 0uLL;
          p_dst = &__dst;
          sub_20BF5D3A4((unint64_t *)a4, v9, &p_dst);
          sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 16 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 16 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C305028(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988560);
  _Unwind_Resume(a1);
}

__n128 sub_20C305078(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5326B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3050B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5326B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C3050D8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3, int8x8_t a4)
{
  sub_20C305130((uint64_t *)(a1 + 8), *a2, *a3, a4);
}

uint64_t sub_20C3050E8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532710))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C305124()
{
  return &unk_24C532710;
}

void sub_20C305130(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, int8x8_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  __n128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v5 = *a1;
  v4 = a1[1];
  v6 = *(_QWORD *)(v5 + 6488);
  v7 = *(std::__shared_weak_count **)(v5 + 6496);
  v17 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)&v18 = v5;
    *((_QWORD *)&v18 + 1) = v6;
    v19 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v18 = v5;
    *((_QWORD *)&v18 + 1) = v6;
    v19 = 0;
  }
  v20 = 0;
  v11.n128_f64[0] = sub_20C30524C(v4, &v18, a2, a3, a4);
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v11);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v17)
  {
    v15 = (unint64_t *)&v17->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v11);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20C305230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

double sub_20C30524C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, int8x8_t a5)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  double result;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  __n128 v27;
  __int128 v28;
  uint64_t v29;

  if (a3 < 0)
  {
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v24 = *a2;
    v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v25 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v26 = *((_QWORD *)a2 + 3);
    sub_20C305514(a1, &v24, a3, (uint64_t)&v27);
    v16 = v25;
    if (v25)
    {
      v17 = (unint64_t *)&v25->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    sub_20BF5D684(a4, &v27);
    sub_20BF5618C((uint64_t)&v27);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      a5.i32[0] = a3;
      v23 = vcvtq_f32_s32(vmovl_s16(vshr_n_s16(vshl_n_s16((int16x4_t)vzip1_s8(a5, a5), 8uLL), 8uLL)));
    }
    else
    {
      v10 = a3 & 0xFFFFFFFFFFFFLL;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      if (v10 + 16 > v11)
      {
        v27.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v27.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v28 = 770;
        *((_QWORD *)&v28 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v29) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 0x10uLL, v10, v11);
      }
      else
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) - v10;
        if (v12 <= 15)
        {
          v27.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v27.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v28 = 779;
          *((_QWORD *)&v28 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v29) = 0;
          v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 0x10uLL, v12, v22);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, float32x4_t *, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, &v23, 16, v10);
        }
      }
    }
    if (v7)
    {
      v20 = (unint64_t *)&v7->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    *(_QWORD *)&result = sub_20C1D54C4((unsigned int **)a4, (__n128 *)&v23).n128_u64[0];
  }
  return result;
}

void sub_20C3054DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_20C305514(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v40) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 **, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 16 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec4f]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v41 = 0uLL;
              v40 = &v41;
              sub_20BF5D3A4((unint64_t *)a4, v39, &v40);
              sub_20BF5D5F0((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 16 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C305AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C305B18(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532730;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C305BC4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5327B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C305C70(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532830;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C305D1C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5328B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C305DD0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C305E0C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532730;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C305E30(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C305E8C(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C305E44(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532790))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C305E80()
{
  return &unk_24C532790;
}

unint64_t sub_20C305E8C(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unsigned __int16 *i;
  uint64_t v14;
  _OWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  _QWORD v19[2];
  unsigned int v20;
  uint64_t v21;

  v4 = this;
  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)v4 + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    else
      v10 = *(_QWORD *)v4;
    return sub_20C305FF4((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v4 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(v4);
    v12 = 0;
    v19[0] = a2;
    v19[1] = a3;
    v21 = *(_QWORD *)v4;
    for (i = (unsigned __int16 *)&v21; (sub_20C2FE2E4(i, (_BYTE *)&v20 + v12) & 1) != 0; ++i)
    {
      if (++v12 == 4)
        return v20 | 0x401D000000000000;
    }
    v14 = *a1;
    if (!*a1)
    {
      v15 = operator new(0x28uLL);
      *v15 = 0u;
      v15[1] = 0u;
      *((_DWORD *)v15 + 8) = 1065353216;
      sub_20BF2B090(a1, (uint64_t)v15);
      v14 = *a1;
    }
    v21 = 0;
    v16 = sub_20C306450(v14, (unsigned __int16 *)v4, v4, &v21);
    v17 = v16;
    if (v18)
    {
      v16[3] = *a3 & 0xFFFFFFFFFFFFLL | 0x1D000000000000;
      sub_20C2B7248((uint64_t)v19, (char *)v4);
    }
    return v17[3];
  }
}

unint64_t sub_20C305FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x801D000000000000;
  v18 = 0x801D000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B38C4(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C306174(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2D6610((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x801D000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2D6610((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t *sub_20C306174(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  uint64_t *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  char v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF5E510((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20BF5E608(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (uint64_t *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = (uint64_t *)v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = (uint64_t)i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = (uint64_t)i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (uint64_t *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C3063F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C30640C(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C30640C(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

void *sub_20C306450(uint64_t a1, unsigned __int16 *a2, _QWORD *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v27;
  char v28;

  v27 = 0;
  v28 = 0;
  sub_20BF532C8((uint64_t)&v27, a2, a2 + 1, a2 + 2, a2 + 3);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v27));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (sub_20BF53304((unsigned __int16 *)i + 8, a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  v16 = *a4;
  *((_QWORD *)i + 2) = *a3;
  *((_QWORD *)i + 3) = v16;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C3066B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C3066D4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5327B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C306710(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5327B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C306734(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v10[0] = v6;
  v10[1] = v7;
  v10[2] = 0;
  v10[3] = v8;
  v10[4] = v9;
  sub_20C3067C4(v5, (uint64_t)v10, v3, v4);
}

uint64_t sub_20C30677C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532810))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3067B8()
{
  return &unk_24C532810;
}

void sub_20C3067C4(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;
  __n128 v8[2];
  uint64_t v9;

  if (a3 < 0)
  {
    v9 = 0;
    memset(v8, 0, sizeof(v8));
    v5 = *(_OWORD *)(a2 + 16);
    v6[0] = *(_OWORD *)a2;
    v6[1] = v5;
    v7 = *(_QWORD *)(a2 + 32);
    sub_20C306884(a1, v6, a3, (uint64_t)v8);
    sub_20BF5E1B0(a4, v8);
    sub_20BF5618C((uint64_t)v8);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
      sub_20C306A74((uint64_t)v8, a3);
    else
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v8, (char *)8, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    sub_20C1D52C0(a4, (uint64_t *)v8);
  }
}

void sub_20C30686C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C306884(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 8 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 8 * v13, v10 - v14, v10);
    }
    else
    {
      v23 = 0;
      *(_QWORD *)&v19 = &v23;
      sub_20BF5DECC((unint64_t *)a4, v13, (uint64_t **)&v19);
      sub_20BF5E11C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(8 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C306A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C306A74(uint64_t a1, int a2)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::pxr_half::half *v4;
  uint64_t result;
  int v6;

  v3 = 0;
  v6 = a2;
  do
  {
    v4 = (pxrInternal__aapl__pxrReserved__::pxr_half::half *)COERCE_UNSIGNED_INT((float)*((char *)&v6 + v3));
    if (*((_BYTE *)&v6 + v3))
    {
      if (pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23])
        result = pxrInternal__aapl__pxrReserved__::pxr_half::half::_eLut[v4 >> 23]
               + (((v4 & 0x7FFFFF) + ((v4 >> 13) & 1) + 4095) >> 13);
      else
        result = pxrInternal__aapl__pxrReserved__::pxr_half::half::convert(v4);
    }
    else
    {
      result = v4 >> 16;
    }
    *(_WORD *)(a1 + 2 * v3++) = result;
  }
  while (v3 != 4);
  return result;
}

__n128 sub_20C306B10(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C306B4C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532830;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C306B70(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C306BC0((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C306B78(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532890))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C306BB4()
{
  return &unk_24C532890;
}

void sub_20C306BC0(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  int v10;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v9[0] = *a1;
  v9[1] = v8;
  v9[2] = v6;
  v9[3] = v7;
  v10 = sub_20C2A2B6C();
  sub_20C306C3C(v5, (uint64_t)v9, v3, v4);
}

void sub_20C306C3C(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10[2];
  uint64_t v11;
  __n128 __dst[2];
  uint64_t v13;

  if (a3 < 0)
  {
    v13 = 0;
    memset(__dst, 0, sizeof(__dst));
    v6 = *(_OWORD *)(a2 + 16);
    v10[0] = *(_OWORD *)a2;
    v10[1] = v6;
    v11 = *(_QWORD *)(a2 + 32);
    sub_20C306D1C(a1, v10, a3, (uint64_t)__dst);
    sub_20BF5E1B0(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v7 = *(_OWORD *)a2;
    v8 = v5;
    v9 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_20C306A74((uint64_t)__dst, a3);
    }
    else
    {
      *((_QWORD *)&v7 + 1) = *(_QWORD *)(*(_QWORD *)v8 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v7 + 8, __dst, 8uLL);
    }
    sub_20C1D52C0(a4, (uint64_t *)__dst);
  }
}

void sub_20C306D04(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C306D1C(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_254988570);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988570))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_254988568 = *v21;
        __cxa_guard_release(&qword_254988570);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 8 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_254988568 || v11 < 0x800 || (BYTE8(v22) & 1) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 8 * v9, v17, v15);
        }
        else
        {
          v29 = 0;
          *(_QWORD *)&__dst = &v29;
          sub_20BF5DECC((unint64_t *)a4, v9, (uint64_t **)&__dst);
          sub_20BF5E11C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 8 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 8 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C30702C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988570);
  _Unwind_Resume(a1);
}

__n128 sub_20C30707C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5328B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C3070B8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5328B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C3070DC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C307134((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C3070EC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532910))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C307128()
{
  return &unk_24C532910;
}

void sub_20C307134(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  uint64_t v18;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v15 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v16 = v4;
    *((_QWORD *)&v16 + 1) = v5;
    v17 = 0;
  }
  v18 = 0;
  sub_20C307250(v3, &v16, a2, a3);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20C307234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C307250(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  uint64_t v27;

  if (a3 < 0)
  {
    v27 = 0;
    v25 = 0u;
    v26 = 0u;
    v22 = *a2;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v23 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    v24 = *((_QWORD *)a2 + 3);
    sub_20C307508(a1, &v22, a3, (uint64_t)&v25);
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    sub_20BF5E1B0(a4, &v25);
    sub_20BF5618C((uint64_t)&v25);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_20C306A74((uint64_t)&v21, a3);
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 8 > v10)
      {
        v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v25.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v26 = 770;
        *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v27) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 7)
        {
          v25.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v25.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v26 = 779;
          *((_QWORD *)&v26 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v27) = 0;
          v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v11, v20);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, &v21, 8, v9);
        }
      }
    }
    if (v6)
    {
      v18 = (unint64_t *)&v6->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    sub_20C1D52C0(a4, &v21);
  }
}

void sub_20C3074D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C307508(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v40) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 8 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec4h]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v40 = 0;
              *(_QWORD *)&v41 = &v40;
              sub_20BF5DECC((unint64_t *)a4, v39, (uint64_t **)&v41);
              sub_20BF5E11C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 8 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C307AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C307B08(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532930;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C307BB4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5329B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C307C60(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532A30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C307D0C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532AB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C307DC0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C307DFC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532930;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C307E20(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C307E7C(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C307E34(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532990))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C307E70()
{
  return &unk_24C532990;
}

unint64_t sub_20C307E7C(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _OWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  _QWORD v20[2];
  unsigned int v21;
  __int128 v22;

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C307FD8((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (int *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 168))(this);
    else
      v12 = *(int **)this;
    v13 = 0;
    v20[0] = a2;
    v20[1] = a3;
    v22 = *(_OWORD *)v12;
    while (1)
    {
      v14 = *((_DWORD *)&v22 + v13);
      if (v14 != (char)v14)
        break;
      *((_BYTE *)&v21 + v13++) = v14;
      if (v13 == 4)
        return v21 | 0x401E000000000000;
    }
    v15 = *a1;
    if (!*a1)
    {
      v16 = operator new(0x28uLL);
      *v16 = 0u;
      v16[1] = 0u;
      *((_DWORD *)v16 + 8) = 1065353216;
      sub_20BF2B090(a1, (uint64_t)v16);
      v15 = *a1;
    }
    *(_QWORD *)&v22 = 0;
    v17 = sub_20C308434(v15, v12, v12, &v22);
    v18 = v17;
    if (v19)
    {
      v17[4] = *a3 & 0xFFFFFFFFFFFFLL | 0x1E000000000000;
      sub_20C2CA738((uint64_t)v20, (char *)v12);
    }
    return v18[4];
  }
}

unint64_t sub_20C307FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x801E000000000000;
  v18 = 0x801E000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B3968(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C308158(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2CA068((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x801E000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2CA068((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

_QWORD *sub_20C308158(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  _QWORD **v14;
  _QWORD *i;
  unint64_t v16;
  _QWORD *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _BYTE v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20C0136AC((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (_QWORD *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20C0137A4(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (_QWORD *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C3083D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C3083F0(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C3083F0(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

_QWORD *sub_20C308434(uint64_t a1, int *a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v25;
  char v26;

  v25 = 0;
  v26 = 0;
  sub_20C013328((uint64_t)&v25, a2, a2 + 1, a2 + 2, a2 + 3);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v25));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v12 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v12)
    {
      v13 = *v12;
      if (*v12)
      {
        do
        {
          v14 = v13[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)v13 + 4) == *a2
              && *((_DWORD *)v13 + 5) == a2[1]
              && *((_DWORD *)v13 + 6) == a2[2]
              && *((_DWORD *)v13 + 7) == a2[3])
            {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10)
                v14 %= v10;
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4)
              break;
          }
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
    }
  }
  v13 = operator new(0x28uLL);
  *v13 = 0;
  v13[1] = v9;
  *((_OWORD *)v13 + 1) = *a3;
  v13[4] = *a4;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    v17 = 1;
    if (v10 >= 3)
      v17 = (v10 & (v10 - 1)) != 0;
    v18 = v17 | (2 * v10);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_20BDEC6E0(a1, v20);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v22)
  {
    *v13 = *v22;
LABEL_41:
    *v22 = v13;
    goto LABEL_42;
  }
  *v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    v23 = *(_QWORD *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10)
        v23 %= v10;
    }
    else
    {
      v23 &= v10 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_41;
  }
LABEL_42:
  ++*(_QWORD *)(a1 + 24);
  return v13;
}

void sub_20C3086C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C3086DC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C5329B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C308718(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5329B0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C30873C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3, int8x8_t a4)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::VtValue *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];

  v4 = *a2;
  v5 = *a3;
  v7 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = v7[808];
  v9 = v7[809];
  v10 = v7[807];
  v12[0] = v7;
  v12[1] = v8;
  v12[2] = 0;
  v12[3] = v9;
  v12[4] = v10;
  return sub_20C3087CC(v6, (uint64_t)v12, v4, v5, a4);
}

uint64_t sub_20C308784(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532A10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3087C0()
{
  return &unk_24C532A10;
}

double sub_20C3087CC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, int8x8_t a5)
{
  __int128 v6;
  double result;
  _OWORD v8[2];
  uint64_t v9;
  __n128 v10[2];
  uint64_t v11;

  if (a3 < 0)
  {
    v11 = 0;
    memset(v10, 0, sizeof(v10));
    v6 = *(_OWORD *)(a2 + 16);
    v8[0] = *(_OWORD *)a2;
    v8[1] = v6;
    v9 = *(_QWORD *)(a2 + 32);
    sub_20C308898(a1, v8, a3, (uint64_t)v10);
    sub_20C1D4DF4(a4, v10);
    sub_20BF5618C((uint64_t)v10);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      a5.i32[0] = a3;
      v10[0] = (__n128)vshrq_n_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(a5, a5)), 0x18uLL), 0x18uLL);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v10, (char *)0x10, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    *(_QWORD *)&result = sub_20C1D4D70((unsigned int **)a4, v10).n128_u64[0];
  }
  return result;
}

void sub_20C308880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C308898(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 16 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 16 * v13, v10 - v14, v10);
    }
    else
    {
      v19 = 0uLL;
      v23 = &v19;
      sub_20C013934((unint64_t *)a4, v13, &v23);
      sub_20C013B80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(16 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C308A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C308A90(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C308ACC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532A30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C308AF0(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_20C308B40((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C308AF8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532A90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C308B34()
{
  return &unk_24C532A90;
}

double sub_20C308B40(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  int v11;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  v10[2] = v6;
  v10[3] = v7;
  v11 = sub_20C2A2B6C();
  return sub_20C308BBC(v5, (uint64_t)v10, v3, v4);
}

double sub_20C308BBC(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12[2];
  uint64_t v13;
  __n128 __dst[2];
  uint64_t v15;

  if (a3 < 0)
  {
    v15 = 0;
    memset(__dst, 0, sizeof(__dst));
    v7 = *(_OWORD *)(a2 + 16);
    v12[0] = *(_OWORD *)a2;
    v12[1] = v7;
    v13 = *(_QWORD *)(a2 + 32);
    sub_20C308CA8(a1, v12, a3, (uint64_t)__dst);
    sub_20C1D4DF4(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    v5 = *(_OWORD *)a2;
    v6 = *(_OWORD *)(a2 + 16);
    v9 = *(_OWORD *)a2;
    v10 = v6;
    v11 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      LODWORD(v5) = a3;
      __dst[0] = (__n128)vshrq_n_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)&v5, *(int8x8_t *)&v5)), 0x18uLL), 0x18uLL);
    }
    else
    {
      *((_QWORD *)&v9 + 1) = *(_QWORD *)(*(_QWORD *)v10 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v9 + 8, __dst, 0x10uLL);
    }
    *(_QWORD *)&result = sub_20C1D4D70((unsigned int **)a4, __dst).n128_u64[0];
  }
  return result;
}

void sub_20C308C90(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 64);
  _Unwind_Resume(a1);
}

void sub_20C308CA8(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *p_dst;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_254988580);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988580))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_254988578 = *v21;
        __cxa_guard_release(&qword_254988580);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 16 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_254988578 || v11 < 0x800 || (BYTE8(v22) & 3) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 16 * v9, v17, v15);
        }
        else
        {
          __dst = 0uLL;
          p_dst = &__dst;
          sub_20C013934((unint64_t *)a4, v9, &p_dst);
          sub_20C013B80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 16 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 16 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C308FBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988580);
  _Unwind_Resume(a1);
}

__n128 sub_20C30900C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C309048(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532AB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C30906C(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3, int8x8_t a4)
{
  sub_20C3090C4((uint64_t *)(a1 + 8), *a2, *a3, a4);
}

uint64_t sub_20C30907C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532B10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C3090B8()
{
  return &unk_24C532B10;
}

void sub_20C3090C4(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, int8x8_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  __n128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  uint64_t v20;

  v5 = *a1;
  v4 = a1[1];
  v6 = *(_QWORD *)(v5 + 6488);
  v7 = *(std::__shared_weak_count **)(v5 + 6496);
  v17 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)&v18 = v5;
    *((_QWORD *)&v18 + 1) = v6;
    v19 = v7;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v18 = v5;
    *((_QWORD *)&v18 + 1) = v6;
    v19 = 0;
  }
  v20 = 0;
  v11.n128_f64[0] = sub_20C3091E0(v4, &v18, a2, a3, a4);
  v12 = v19;
  if (v19)
  {
    v13 = (unint64_t *)&v19->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v12->__on_zero_shared)(v12, v11);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (v17)
  {
    v15 = (unint64_t *)&v17->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v17->__on_zero_shared)(v17, v11);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_20C3091C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

double sub_20C3091E0(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4, int8x8_t a5)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  double result;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int32x4_t v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  __n128 v27;
  __int128 v28;
  uint64_t v29;

  if (a3 < 0)
  {
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v24 = *a2;
    v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v25 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v26 = *((_QWORD *)a2 + 3);
    sub_20C3094A4(a1, &v24, a3, (uint64_t)&v27);
    v16 = v25;
    if (v25)
    {
      v17 = (unint64_t *)&v25->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    sub_20C1D4DF4(a4, &v27);
    sub_20BF5618C((uint64_t)&v27);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      a5.i32[0] = a3;
      v23 = vshrq_n_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(a5, a5)), 0x18uLL), 0x18uLL);
    }
    else
    {
      v10 = a3 & 0xFFFFFFFFFFFFLL;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      if (v10 + 16 > v11)
      {
        v27.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v27.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v28 = 770;
        *((_QWORD *)&v28 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v29) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 0x10uLL, v10, v11);
      }
      else
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) - v10;
        if (v12 <= 15)
        {
          v27.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v27.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v28 = 779;
          *((_QWORD *)&v28 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v29) = 0;
          v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 0x10uLL, v12, v22);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, int32x4_t *, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, &v23, 16, v10);
        }
      }
    }
    if (v7)
    {
      v20 = (unint64_t *)&v7->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    *(_QWORD *)&result = sub_20C1D4D70((unsigned int **)a4, (__n128 *)&v23).n128_u64[0];
  }
  return result;
}

void sub_20C30946C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_20C3094A4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v40) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 **, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 16 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfVec4i]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v41 = 0uLL;
              v40 = &v41;
              sub_20C013934((unint64_t *)a4, v39, &v40);
              sub_20C013B80((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 16 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C309A74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C309AA8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532B30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C309B54(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532BB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C309C00(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532C30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C309CAC(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532CB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C309D60(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C309D9C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532B30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C309DC0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C309E1C(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C309DD4(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532B90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C309E10()
{
  return &unk_24C532B90;
}

unint64_t sub_20C309E1C(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  double *v12;
  uint64_t v13;
  _OWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  _QWORD v20[2];

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C309F60((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (double *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(this);
    else
      v12 = *(double **)this;
    v20[0] = a2;
    v20[1] = a3;
    v19 = 0;
    if (sub_20C30A3BC(&v19, *v12, v12[1], v12[2], v12[3]))
    {
      return v19 | 0x400D000000000000;
    }
    else
    {
      v13 = *a1;
      if (!*a1)
      {
        v14 = operator new(0x28uLL);
        *v14 = 0u;
        v14[1] = 0u;
        *((_DWORD *)v14 + 8) = 1065353216;
        sub_20BF2B090(a1, (uint64_t)v14);
        v13 = *a1;
      }
      v18 = 0;
      v15 = sub_20C30A470(v13, v12, v12, &v18);
      v16 = v15;
      if (v17)
      {
        v15[6] = *a3 & 0xFFFFFFFFFFFFLL | 0xD000000000000;
        sub_20C2EC870((uint64_t)v20, (char *)v12);
      }
      return v16[6];
    }
  }
}

unint64_t sub_20C309F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x800D000000000000;
  v18 = 0x800D000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B3A0C(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C30A0E0(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C2B2674((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x800D000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C2B2674((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t *sub_20C30A0E0(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  uint64_t *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  char v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF5F0CC((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20C016410(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (uint64_t *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = (uint64_t *)v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = (uint64_t)i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = (uint64_t)i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (uint64_t *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C30A35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C30A378(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C30A378(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C30A3BC(_WORD *a1, double a2, double a3, double a4, double a5)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t i;
  uint64_t v8;
  double v9;
  __int16 v11;
  _QWORD v12[4];

  v5 = 0;
  *(double *)v12 = a2;
  *(double *)&v12[1] = a3;
  *(double *)&v12[2] = a4;
  *(double *)&v12[3] = a5;
  v6 = v12;
  while (2)
  {
    for (i = 0; i != 2; ++i)
    {
      if (v5 == i)
      {
        v8 = 0;
        v9 = *(double *)&v12[2 * v5 + v5];
        if (v9 < -128.0 || v9 > 127.0)
          return v8;
        if (v9 != (double)(int)v9)
          return 0;
        *((_BYTE *)&v11 + v5) = (int)v9;
      }
      else if (*(double *)&v6[i] != 0.0)
      {
        return 0;
      }
    }
    ++v5;
    v6 += 2;
    if (v5 != 2)
      continue;
    break;
  }
  *a1 = v11;
  return 1;
}

void *sub_20C30A470(uint64_t a1, double *a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  void **v13;
  void *i;
  unint64_t v15;
  __int128 v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v27;
  char v28;

  v27 = 0;
  v28 = 0;
  sub_20BF53A74((uint64_t)&v27, a2, a2 + 1, a2 + 2, a2 + 3);
  v9 = bswap64(0x9E3779B97F4A7C55 * bswap64(0x9E3779B97F4A7C55 * v27));
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v10)
        v4 = v9 % v10;
    }
    else
    {
      v4 = v9 & (v10 - 1);
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v13)
    {
      for (i = *v13; i; i = *(void **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if (pxrInternal__aapl__pxrReserved__::GfMatrix2d::operator==((double *)i + 2, a2))
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x38uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v9;
  v16 = a3[1];
  *((_OWORD *)i + 1) = *a3;
  *((_OWORD *)i + 2) = v16;
  *((_QWORD *)i + 6) = *a4;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    sub_20BDEC6E0(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v4 = v9 % v10;
      else
        v4 = v9;
    }
    else
    {
      v4 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_38:
    *v24 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v25 >= v10)
        v25 %= v10;
    }
    else
    {
      v25 &= v10 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C30A6DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C30A6F8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532BB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C30A734(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532BB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C30A758(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = 0;
  v11[3] = v8;
  v11[4] = v9;
  return sub_20C30A7E8(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_20C30A7A0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532C10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C30A7DC()
{
  return &unk_24C532C10;
}

double sub_20C30A7E8(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  double result;
  int v7;
  int v8;
  __sFILE v9;

  if (a3 < 0)
  {
    memset(&v9._write, 0, 40);
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&v9._bf._size = *(_OWORD *)a2;
    *(_OWORD *)&v9._cookie = v5;
    v9._read = *(int (__cdecl **)(void *, char *, int))(a2 + 32);
    sub_20C30A8D8(a1, &v9._bf._size, a3, (uint64_t)&v9._write);
    sub_20C1D2894(a4, (__n128 *)&v9._write);
    sub_20BF5618C((uint64_t)&v9._write);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
    {
      v7 = (char)a3;
      v8 = (__int16)a3 >> 8;
      pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal((uint64_t)&v9._write, 1.0);
      *(__sbuf *)&v9._r = v9._ub;
      *(double *)&v9._p = (double)v7;
      *(double *)&v9._bf._base = (double)v8;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), &v9, (char *)0x20, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    }
    *(_QWORD *)&result = sub_20C1D280C(a4, &v9).n128_u64[0];
  }
  return result;
}

void sub_20C30A8C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C30A8D8(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __int128 v11;
  ssize_t v12;
  unint64_t v13;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  unint64_t v22;
  __int128 *v23;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      v22 = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v22, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        v13 = v22;
        goto LABEL_13;
      }
    }
    else
    {
      LODWORD(v19) = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&v19))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    LODWORD(v19) = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&v19, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    v13 = v19;
    v22 = v19;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (v13 <= v15 ? (v16 = 32 * v13 > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&v19 = "usd/crateFile.cpp";
      *((_QWORD *)&v19 + 1) = "_ReadUncompressedArray";
      *(_QWORD *)&v20 = 2053;
      *((_QWORD *)&v20 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::value>"
                              "::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reader, Val"
                              "ueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserved__::Usd_C"
                              "rateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_PreadStream"
                              ">, T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
      LOBYTE(v21) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v13, 32 * v13, v10 - v14, v10);
    }
    else
    {
      v19 = 0u;
      v20 = 0u;
      v23 = &v19;
      sub_20C01657C((unint64_t *)a4, v13, &v23);
      sub_20C0167DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(32 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  v21 = 0;
  v19 = 0u;
  v20 = 0u;
  if (&v19 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v11 = v20;
    *(_OWORD *)a4 = v19;
    *(_OWORD *)(a4 + 16) = v11;
    v19 = 0u;
    v20 = 0u;
    *(_QWORD *)(a4 + 32) = v21;
    v21 = 0;
  }
  sub_20BF5618C((uint64_t)&v19);
}

void sub_20C30AAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_20C30AAD4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532C30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C30AB10(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532C30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C30AB34(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_20C30AB84((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C30AB3C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532C90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C30AB78()
{
  return &unk_24C532C90;
}

double sub_20C30AB84(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  int v11;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  v10[2] = v6;
  v10[3] = v7;
  v11 = sub_20C2A2B6C();
  return sub_20C30AC00(v5, (uint64_t)v10, v3, v4);
}

double sub_20C30AC00(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  double result;
  int v8;
  int v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 __dst;
  uint64_t v14;
  double v15;
  __int128 v16[2];
  uint64_t v17;
  __n128 v18;
  __int128 v19;
  uint64_t v20;

  if (a3 < 0)
  {
    v20 = 0;
    v18 = 0u;
    v19 = 0u;
    v6 = *(_OWORD *)(a2 + 16);
    v16[0] = *(_OWORD *)a2;
    v16[1] = v6;
    v17 = *(_QWORD *)(a2 + 32);
    sub_20C30AD10(a1, v16, a3, (uint64_t)&v18);
    sub_20C1D2894(a4, &v18);
    sub_20BF5618C((uint64_t)&v18);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v10 = *(_OWORD *)a2;
    v11 = v5;
    v12 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      v8 = (char)a3;
      v9 = (__int16)a3 >> 8;
      pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal((uint64_t)&v18, 1.0);
      *((_QWORD *)&__dst + 1) = v18.n128_u64[1];
      v14 = v19;
      *(double *)&__dst = (double)v8;
      v15 = (double)v9;
    }
    else
    {
      *((_QWORD *)&v10 + 1) = *(_QWORD *)(*(_QWORD *)v11 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v10 + 8, &__dst, 0x20uLL);
    }
    *(_QWORD *)&result = sub_20C1D280C(a4, &__dst).n128_u64[0];
  }
  return result;
}

void sub_20C30ACF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_20C30AD10(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 __dst;
  __int128 v26;
  uint64_t v27;
  unint64_t v28;
  __int128 *p_dst;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_254988590);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254988590))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_254988588 = *v21;
        __cxa_guard_release(&qword_254988590);
      }
      v28 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v28, 8uLL))
          return;
        v9 = v28;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v28 = __dst;
      }
      v11 = 32 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_254988588 || v11 < 0x800 || (BYTE8(v22) & 7) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2117;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 32 * v9, v17, v15);
        }
        else
        {
          __dst = 0u;
          v26 = 0u;
          p_dst = &__dst;
          sub_20C01657C((unint64_t *)a4, v9, &p_dst);
          sub_20C0167DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 32 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 32 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v26 = 0;
          *((_QWORD *)&v26 + 1) = v13;
          v27 = v12;
          __dst = v28;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v26;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v26 = 0u;
            *(_QWORD *)(a4 + 32) = v27;
            v27 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v26 = 2109;
          *((_QWORD *)&v26 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
          LOBYTE(v27) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    v27 = 0;
    __dst = 0u;
    v26 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v26;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v26 = 0u;
      *(_QWORD *)(a4 + 32) = v27;
      v27 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C30B028(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254988590);
  _Unwind_Resume(a1);
}

__n128 sub_20C30B078(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C30B0B4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532CB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C30B0D8(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C30B130((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C30B0E8(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532D10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C30B124()
{
  return &unk_24C532D10;
}

void sub_20C30B130(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = 0;
  }
  v19 = 0;
  v10.n128_f64[0] = sub_20C30B24C(v3, &v17, a2, a3);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v16)
  {
    v14 = (unint64_t *)&v16->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v10);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20C30B230(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

double sub_20C30B24C(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int16 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  double result;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  double v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  __n128 v29;
  __int128 v30;
  uint64_t v31;

  v5 = a3;
  if (a3 < 0)
  {
    v31 = 0;
    v29 = 0u;
    v30 = 0u;
    v26 = *a2;
    v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v27 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v28 = *((_QWORD *)a2 + 3);
    sub_20C30B534(a1, &v26, a3, (uint64_t)&v29);
    v16 = v27;
    if (v27)
    {
      v17 = (unint64_t *)&v27->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    sub_20C1D2894(a4, &v29);
    sub_20BF5618C((uint64_t)&v29);
  }
  else
  {
    v6 = *((_QWORD *)a2 + 1);
    v7 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v7)
    {
      v8 = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      pxrInternal__aapl__pxrReserved__::GfMatrix2d::SetDiagonal((uint64_t)&v29, 1.0);
      *((_QWORD *)&v23 + 1) = v29.n128_u64[1];
      v24 = v30;
      *(double *)&v23 = (double)(char)v5;
      v25 = (double)(v5 >> 8);
    }
    else
    {
      v10 = a3 & 0xFFFFFFFFFFFFLL;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
      if (v10 + 32 > v11)
      {
        v29.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
        v29.n128_u64[1] = (unint64_t)"Read";
        *(_QWORD *)&v30 = 770;
        *((_QWORD *)&v30 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v31) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 0x20uLL, v10, v11);
      }
      else
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6) - v10;
        if (v12 <= 31)
        {
          v29.n128_u64[0] = (unint64_t)"usd/crateFile.cpp";
          v29.n128_u64[1] = (unint64_t)"Read";
          *(_QWORD *)&v30 = 779;
          *((_QWORD *)&v30 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v31) = 0;
          v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v29, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 0x20uLL, v12, v22);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, __int128 *, uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, &v23, 32, v10);
        }
      }
    }
    if (v7)
    {
      v20 = (unint64_t *)&v7->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    *(_QWORD *)&result = sub_20C1D280C(a4, &v23).n128_u64[0];
  }
  return result;
}

void sub_20C30B4FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF5618C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_20C30B534(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 *v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v41) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v41, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v40) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v41 = "usd/crateFile.cpp";
        *((_QWORD *)&v41 + 1) = "Read";
        *(_QWORD *)&v42 = 770;
        *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v43) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v41 = "usd/crateFile.cpp";
          *((_QWORD *)&v41 + 1) = "Read";
          *(_QWORD *)&v42 = 779;
          *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v43) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 **, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v40, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v40;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 32 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v41 = "usd/crateFile.cpp";
              *((_QWORD *)&v41 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v42 = 2053;
              *((_QWORD *)&v42 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfMatrix2d]";
              LOBYTE(v43) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v41 = 0u;
              v42 = 0u;
              v40 = &v41;
              sub_20C01657C((unint64_t *)a4, v39, &v40);
              sub_20C0167DC((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 32 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v41 = "usd/crateFile.cpp";
                *((_QWORD *)&v41 + 1) = "Read";
                *(_QWORD *)&v42 = 770;
                *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v43) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v41 = "usd/crateFile.cpp";
                  *((_QWORD *)&v41 + 1) = "Read";
                  *(_QWORD *)&v42 = 779;
                  *((_QWORD *)&v42 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v43) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v41, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  if (&v41 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v42;
    *(_OWORD *)a4 = v41;
    *(_OWORD *)(a4 + 16) = v13;
    v41 = 0u;
    v42 = 0u;
    *(_QWORD *)(a4 + 32) = v43;
    v43 = 0;
  }
  sub_20BF5618C((uint64_t)&v41);
}

void sub_20C30BB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C30BB3C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532D30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C30BBE8(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532DB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C30BC94(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532E30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C30BD40(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532EB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C30BDF4(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532D30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C30BE30(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532D30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C30BE54(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C30BEB0(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C30BE68(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532D90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C30BEA4()
{
  return &unk_24C532D90;
}

unint64_t sub_20C30BEB0(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _OWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  _OWORD v22[4];
  uint64_t v23;
  unsigned int v24;
  _QWORD v25[2];

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C30C010((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v12 = *(_QWORD *)this;
    v25[0] = a2;
    v25[1] = a3;
    v24 = 0;
    v22[0] = *(_OWORD *)v12;
    v14 = *(_OWORD *)(v12 + 32);
    v13 = *(_OWORD *)(v12 + 48);
    v15 = *(_OWORD *)(v12 + 16);
    v23 = *(_QWORD *)(v12 + 64);
    v22[2] = v14;
    v22[3] = v13;
    v22[1] = v15;
    if (sub_20C30C514((uint64_t)v22, (uint64_t)&v24))
    {
      return v24 | 0x400E000000000000;
    }
    else
    {
      v16 = *a1;
      if (!*a1)
      {
        v17 = operator new(0x28uLL);
        *v17 = 0u;
        v17[1] = 0u;
        *((_DWORD *)v17 + 8) = 1065353216;
        sub_20BF2B090(a1, (uint64_t)v17);
        v16 = *a1;
      }
      v21 = 0;
      v18 = sub_20C30C668(v16, (double *)v12, v12, &v21);
      v19 = v18;
      if (v20)
      {
        v18[11] = *a3 & 0xFFFFFFFFFFFFLL | 0xE000000000000;
        sub_20C30C5C8((uint64_t)v25, (char *)v12);
      }
      return v19[11];
    }
  }
}

unint64_t sub_20C30C010(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x800E000000000000;
  v18 = 0x800E000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B3AB0(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C30C238(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C30C190((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x800E000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C30C190((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t sub_20C30C190(uint64_t result, char *__src, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  v3 = 72 * a3;
  if (72 * a3)
  {
    v5 = *(_QWORD **)(result + 8);
    do
    {
      v6 = v5[2];
      v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7)
        v8 = v6 - *v5 + 0x80000;
      else
        v8 = v3;
      v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4])
        v5[4] = v8 + v9;
      result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3)
        result = sub_20C2B209C((_BOOL8)v5);
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

uint64_t *sub_20C30C238(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  uint64_t *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  char v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20C0170B4((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20C0171C4(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (uint64_t *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = (uint64_t *)v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = (uint64_t)i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = (uint64_t)i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (uint64_t *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C30C4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C30C4D0(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C30C4D0(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C30C514(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  double v6;
  __int16 v8;
  char v9;

  v2 = 0;
  v3 = a1;
  while (2)
  {
    for (i = 0; i != 3; ++i)
    {
      if (v2 == i)
      {
        v5 = 0;
        v6 = *(double *)(a1 + 24 * v2 + 8 * v2);
        if (v6 < -128.0 || v6 > 127.0)
          return v5;
        if (v6 != (double)(int)v6)
          return 0;
        *((_BYTE *)&v8 + v2) = (int)v6;
      }
      else if (*(double *)(v3 + 8 * i) != 0.0)
      {
        return 0;
      }
    }
    ++v2;
    v3 += 24;
    if (v2 != 3)
      continue;
    break;
  }
  *(_WORD *)a2 = v8;
  *(_BYTE *)(a2 + 2) = v9;
  return 1;
}

uint64_t sub_20C30C5C8(uint64_t a1, char *__src)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = 72;
  do
  {
    v5 = v3[2];
    v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6)
      v7 = v5 - *v3 + 0x80000;
    else
      v7 = v4;
    v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4])
      v3[4] = v7 + v8;
    result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4)
      result = sub_20C2B209C((_BOOL8)v3);
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

void *sub_20C30C668(uint64_t a1, double *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  char v31;

  v9 = sub_20BFAB3A4((uint64_t)&v31, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if (pxrInternal__aapl__pxrReserved__::GfMatrix3d::operator==((double *)i + 2, a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x60uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v17 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)i + 3) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)i + 4) = v17;
  v18 = *(_QWORD *)(a3 + 64);
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)i + 1) = *(_OWORD *)a3;
  *((_OWORD *)i + 2) = v19;
  v20 = *a4;
  *((_QWORD *)i + 10) = v18;
  *((_QWORD *)i + 11) = v20;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    sub_20BDEC6E0(a1, v26);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *(_QWORD *)i = *v28;
LABEL_38:
    *v28 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v27 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v29 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11)
        v29 %= v11;
    }
    else
    {
      v29 &= v11 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C30C8AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C30C8C8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532DB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C30C904(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532DB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C30C928(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = 0;
  v11[3] = v8;
  v11[4] = v9;
  return sub_20C30C9B8(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_20C30C970(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532E10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C30C9AC()
{
  return &unk_24C532E10;
}

double sub_20C30C9B8(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  double result;
  __sFILE var90;

  if (a3 < 0)
  {
    memset(&var90, 0, 40);
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)&var90._write = *(_OWORD *)a2;
    *(_OWORD *)&var90._ub._size = v5;
    *(_QWORD *)&var90._ur = *(_QWORD *)(a2 + 32);
    sub_20C30CA78(a1, &var90._write, a3, (uint64_t)&var90);
    sub_20C1D2CF0(a4, (__n128 *)&var90);
    sub_20BF5618C((uint64_t)&var90);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
      sub_20C30CC7C((uint64_t)&var90, a3);
    else
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), &var90, (char *)0x48, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    return sub_20C1D2C10(a4, (uint64_t)&var90);
  }
  return result;
}

void sub_20C30CA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF5618C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C30CA78(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v7;
  uint64_t v8;
  FILE *v9;
  uint64_t v10;
  __sbuf bf;
  ssize_t v12;
  unint64_t p;
  ssize_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  __sFILE var88;

  v5 = a3 & 0xFFFFFFFFFFFFLL;
  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[2] = v5;
    v7 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v7 > 0x4FF)
    {
      v8 = a2[1];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
      var88._p = 0;
      if (v7 > 0x6FF)
      {
        v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, &var88, (char *)8, v5 + v8);
        if (v12 == -1)
          return;
        p = (unint64_t)var88._p;
        goto LABEL_13;
      }
    }
    else
    {
      var88._r = 0;
      if (!sub_20C2CEB84((uint64_t)(a2 + 1), 0, (__sFILE *)&var88._r))
        return;
      v8 = a2[1];
      v5 = a2[2];
      v10 = a2[3];
      v9 = (FILE *)a2[4];
    }
    var88._r = 0;
    v12 = pxrInternal__aapl__pxrReserved__::ArchPRead(v9, (__sFILE *)&var88._r, (char *)4, v5 + v8);
    if (v12 == -1)
      return;
    p = var88._r;
    var88._p = (unsigned __int8 *)var88._r;
LABEL_13:
    v14 = v12 + v5;
    v15 = v10 - v14;
    if (v14 < 0 || (v15 & 0x8000000000000000) != 0 || (p <= v15 ? (v16 = 72 * p > v15) : (v16 = 1), v16))
    {
      *(_QWORD *)&var88._r = "usd/crateFile.cpp";
      *(_QWORD *)&var88._flags = "_ReadUncompressedArray";
      var88._bf._base = (unsigned __int8 *)2053;
      *(_QWORD *)&var88._bf._size = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>::"
                                    "value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray"
                                    "(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__px"
                                    "rReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd"
                                    "_CrateFile::_PreadStream>, T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
      LOBYTE(var88._lbfsize) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&var88._r, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", p, 72 * p, v10 - v14, v10);
    }
    else
    {
      memset(&var88._r, 0, 72);
      var88._write = (int (__cdecl *)(void *, const char *, int))&var88._r;
      sub_20C017334((unint64_t *)a4, p, (uint64_t *)&var88._write);
      sub_20C01764C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v17, v18);
      pxrInternal__aapl__pxrReserved__::ArchPRead(v9, *(__sFILE **)(a4 + 32), (char *)(72 * *(_QWORD *)a4), v14 + v8);
    }
    return;
  }
  memset(&var88._r, 0, 40);
  if (&var88._r != (int *)a4)
  {
    sub_20BF5618C(a4);
    bf = var88._bf;
    *(_OWORD *)a4 = *(_OWORD *)&var88._r;
    *(__sbuf *)(a4 + 16) = bf;
    memset(&var88._r, 0, 32);
    *(_QWORD *)(a4 + 32) = *(_QWORD *)&var88._lbfsize;
    *(_QWORD *)&var88._lbfsize = 0;
  }
  sub_20BF5618C((uint64_t)&var88._r);
}

void sub_20C30CC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

double sub_20C30CC7C(uint64_t a1, int a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  double result;
  _OWORD v7[4];
  uint64_t v8;
  __int16 v9;
  char v10;

  v9 = a2;
  v10 = BYTE2(a2);
  pxrInternal__aapl__pxrReserved__::GfMatrix3d::SetDiagonal((uint64_t)v7, 1.0);
  v3 = 0;
  v4 = v7[3];
  *(_OWORD *)(a1 + 32) = v7[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = v8;
  v5 = v7[1];
  *(_OWORD *)a1 = v7[0];
  *(_OWORD *)(a1 + 16) = v5;
  do
  {
    result = (double)*((char *)&v9 + v3);
    *(double *)a1 = result;
    a1 += 32;
    ++v3;
  }
  while (v3 != 3);
  return result;
}

__n128 sub_20C30CCF8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C30CD34(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532E30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C30CD58(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  return sub_20C30CDA8((_QWORD *)(a1 + 8), a2, a3);
}

uint64_t sub_20C30CD60(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532E90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C30CD9C()
{
  return &unk_24C532E90;
}

double sub_20C30CDA8(_QWORD *a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  int v11;

  v3 = *a2;
  v4 = *a3;
  v5 = a1[1];
  v6 = *a1 + 6448;
  v7 = *(_QWORD *)(*a1 + 6560);
  v8 = *(_QWORD *)(*(_QWORD *)v6 + 24);
  v10[0] = *a1;
  v10[1] = v8;
  v10[2] = v6;
  v10[3] = v7;
  v11 = sub_20C2A2B6C();
  return sub_20C30CE24(v5, (uint64_t)v10, v3, v4);
}

double sub_20C30CE24(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __n128 __dst[2];
  uint64_t v12;
  __int128 v13[2];
  uint64_t v14;

  if (a3 < 0)
  {
    v12 = 0;
    memset(__dst, 0, sizeof(__dst));
    v6 = *(_OWORD *)(a2 + 16);
    v13[0] = *(_OWORD *)a2;
    v13[1] = v6;
    v14 = *(_QWORD *)(a2 + 32);
    sub_20C30CF04(a1, v13, a3, (uint64_t)__dst);
    sub_20C1D2CF0(a4, __dst);
    sub_20BF5618C((uint64_t)__dst);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v8 = *(_OWORD *)a2;
    v9 = v5;
    v10 = *(_QWORD *)(a2 + 32);
    if ((a3 & 0x4000000000000000) != 0)
    {
      sub_20C30CC7C((uint64_t)__dst, a3);
    }
    else
    {
      *((_QWORD *)&v8 + 1) = *(_QWORD *)(*(_QWORD *)v9 + 24) + (a3 & 0xFFFFFFFFFFFFLL);
      sub_20C2B9BEC((uint64_t)&v8 + 8, __dst, 0x48uLL);
    }
    return sub_20C1D2C10(a4, (uint64_t)__dst);
  }
  return result;
}

void sub_20C30CEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C30CF04(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  __int128 v7;
  unsigned __int8 v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  __int128 __dst;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 *p_dst;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    *((_QWORD *)a2 + 1) = *(_QWORD *)(**((_QWORD **)a2 + 2) + 24) + (a3 & 0xFFFFFFFFFFFFLL);
    v6 = (*(unsigned __int8 *)(*(_QWORD *)a2 + 6368) << 16) | (*(unsigned __int8 *)(*(_QWORD *)a2 + 6369) << 8);
    if (v6 > 0x4FF || (LODWORD(__dst) = 0, sub_20C2B9BEC((uint64_t)a2 + 8, &__dst, 4uLL)))
    {
      v7 = a2[1];
      v22 = *a2;
      v23 = v7;
      v24 = *((_QWORD *)a2 + 4);
      v8 = atomic_load((unsigned __int8 *)&qword_2549885A0);
      if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_2549885A0))
      {
        v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        if (!v21)
        {
          pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
          v21 = (char *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::USDC_ENABLE_ZERO_COPY_ARRAYS);
        }
        byte_254988598 = *v21;
        __cxa_guard_release(&qword_2549885A0);
      }
      v25 = 0;
      if (v6 > 0x6FF)
      {
        if (!sub_20C2B9BEC((uint64_t)&v22 + 8, &v25, 8uLL))
          return;
        v9 = v25;
      }
      else
      {
        LODWORD(__dst) = 0;
        if ((sub_20C2B9BEC((uint64_t)&v22 + 8, &__dst, 4uLL) & 1) == 0)
          return;
        v9 = __dst;
        v25 = __dst;
      }
      v11 = 72 * v9;
      v12 = *((_QWORD *)&v22 + 1);
      if (!byte_254988598 || v11 < 0x800 || (BYTE8(v22) & 7) != 0)
      {
        v15 = *(_QWORD *)(*(_QWORD *)v23 + 32);
        v16 = *((_QWORD *)&v22 + 1) - *(_QWORD *)(*(_QWORD *)v23 + 24);
        v17 = v15 - v16;
        if (v16 < 0 || (v17 & 0x8000000000000000) != 0 || (v9 <= v17 ? (v18 = v11 > v17) : (v18 = 1), v18))
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v27 = 2117;
          *((_QWORD *)&v27 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
          LOBYTE(v28) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%zu bytes), remaining file size is %lld of %lld", v9, 72 * v9, v17, v15);
        }
        else
        {
          v30 = 0;
          v28 = 0u;
          v29 = 0u;
          __dst = 0u;
          v27 = 0u;
          p_dst = &__dst;
          sub_20C017334((unint64_t *)a4, v9, (uint64_t *)&p_dst);
          sub_20C01764C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v19, v20);
          sub_20C2B9BEC((uint64_t)&v22 + 8, *(void **)(a4 + 32), 72 * *(_QWORD *)a4);
        }
      }
      else
      {
        v13 = sub_20C2CF260((uint64_t)&v22 + 8, *((char **)&v22 + 1), 72 * v9, v9);
        if (v13)
        {
          *(_QWORD *)&v27 = 0;
          *((_QWORD *)&v27 + 1) = v13;
          *(_QWORD *)&v28 = v12;
          __dst = v25;
          if (&__dst != (__int128 *)a4)
          {
            sub_20BF5618C(a4);
            v14 = v27;
            *(_OWORD *)a4 = __dst;
            *(_OWORD *)(a4 + 16) = v14;
            __dst = 0u;
            v27 = 0u;
            *(_QWORD *)(a4 + 32) = v28;
            *(_QWORD *)&v28 = 0;
          }
          sub_20BF5618C((uint64_t)&__dst);
        }
        else
        {
          *(_QWORD *)&__dst = "usd/crateFile.cpp";
          *((_QWORD *)&__dst + 1) = "_ReadUncompressedArray";
          *(_QWORD *)&v27 = 2109;
          *((_QWORD *)&v27 + 1) = "typename std::enable_if<Reader::StreamSupportsZeroCopy && _IsBitwiseReadWrite<T>::valu"
                                  "e>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedArray(Reade"
                                  "r, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aapl__pxrReserve"
                                  "d__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserved__::Usd_CrateFile"
                                  "::_MmapStream<pxrInternal__aapl__pxrReserved__::Usd_CrateFile::CrateFile::_FileMapping"
                                  " *>>, T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
          LOBYTE(v28) = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__dst, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu uncompressedArray bytes", v11);
          sub_20BF56210((_QWORD *)a4);
        }
      }
    }
  }
  else
  {
    *(_QWORD *)&v28 = 0;
    __dst = 0u;
    v27 = 0u;
    if (&__dst != (__int128 *)a4)
    {
      sub_20BF5618C(a4);
      v10 = v27;
      *(_OWORD *)a4 = __dst;
      *(_OWORD *)(a4 + 16) = v10;
      __dst = 0u;
      v27 = 0u;
      *(_QWORD *)(a4 + 32) = v28;
      *(_QWORD *)&v28 = 0;
    }
    sub_20BF5618C((uint64_t)&__dst);
  }
}

void sub_20C30D22C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2549885A0);
  _Unwind_Resume(a1);
}

__n128 sub_20C30D27C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532EB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C30D2B8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532EB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C30D2DC(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  sub_20C30D334((uint64_t *)(a1 + 8), *a2, *a3);
}

uint64_t sub_20C30D2EC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532F10))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C30D328()
{
  return &unk_24C532F10;
}

void sub_20C30D334(uint64_t *a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::VtValue *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  uint64_t v19;

  v4 = *a1;
  v3 = a1[1];
  v5 = *(_QWORD *)(v4 + 6488);
  v6 = *(std::__shared_weak_count **)(v4 + 6496);
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = v6;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)&v17 = v4;
    *((_QWORD *)&v17 + 1) = v5;
    v18 = 0;
  }
  v19 = 0;
  v10.n128_f64[0] = sub_20C30D450(v3, &v17, a2, a3);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v11->__on_zero_shared)(v11, v10);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v16)
  {
    v14 = (unint64_t *)&v16->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v10);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_20C30D434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *v10;

  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource(v10);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

double sub_20C30D450(uint64_t a1, __int128 *a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  __n128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  double result;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23[2];
  uint64_t v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  char v32;

  if (a3 < 0)
  {
    v24 = 0;
    memset(v23, 0, sizeof(v23));
    v25 = *a2;
    v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    v26 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    v27 = *((_QWORD *)a2 + 3);
    sub_20C30D710(a1, &v25, a3, (uint64_t)v23);
    v16 = v26;
    if (v26)
    {
      v17 = (unint64_t *)&v26->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    sub_20C1D2CF0(a4, v23);
    sub_20BF5618C((uint64_t)v23);
  }
  else
  {
    v5 = *((_QWORD *)a2 + 1);
    v6 = (std::__shared_weak_count *)*((_QWORD *)a2 + 2);
    if (v6)
    {
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    if ((a3 & 0x4000000000000000) != 0)
    {
      v12.n128_f64[0] = sub_20C30CC7C((uint64_t)v23, a3);
    }
    else
    {
      v9 = a3 & 0xFFFFFFFFFFFFLL;
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
      if (v9 + 72 > v10)
      {
        v28 = "usd/crateFile.cpp";
        v29 = "Read";
        v30 = 770;
        v31 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        v32 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 0x48uLL, v9, v10);
      }
      else
      {
        v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5) - v9;
        if (v11 <= 71)
        {
          v28 = "usd/crateFile.cpp";
          v29 = "Read";
          v30 = 779;
          v31 = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          v32 = 0;
          v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v28, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 0x48uLL, v11, v22);
        }
        else
        {
          (*(uint64_t (**)(uint64_t, __n128 *, uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, v23, 72, v9);
        }
      }
    }
    if (v6)
    {
      v20 = (unint64_t *)&v6->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v12);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    return sub_20C1D2C10(a4, (uint64_t)v23);
  }
  return result;
}

void sub_20C30D6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C30D710(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int128 *v45;

  if ((a3 & 0xFFFFFFFFFFFFLL) != 0)
  {
    a2[3] = a3 & 0xFFFFFFFFFFFFLL;
    v6 = (*(unsigned __int8 *)(*a2 + 6368) << 16) | (*(unsigned __int8 *)(*a2 + 6369) << 8);
    if (v6 <= 0x4FF)
    {
      LODWORD(v40) = 0;
      if (!sub_20C2B72E8(a2 + 1, (uint64_t)&v40, 4uLL))
        return;
    }
    v8 = a2[1];
    v7 = (std::__shared_weak_count *)a2[2];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      v11 = a2[3];
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    else
    {
      v11 = a2[3];
    }
    v39 = 0;
    if (v6 > 0x6FF)
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 8 > v18)
      {
        *(_QWORD *)&v40 = "usd/crateFile.cpp";
        *((_QWORD *)&v40 + 1) = "Read";
        *(_QWORD *)&v41 = 770;
        *((_QWORD *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v42) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 8uLL, v11, v18);
      }
      else
      {
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v19 < 8 || ((v19 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v40 = "usd/crateFile.cpp";
          *((_QWORD *)&v40 + 1) = "Read";
          *(_QWORD *)&v41 = 779;
          *((_QWORD *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v42) = 0;
          v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 8uLL, v19, v36);
        }
        else
        {
          v20 = (*(uint64_t (**)(uint64_t, unint64_t *, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v39, 8, v11);
          if ((unint64_t)(v20 + 1) >= 2)
          {
            v17 = v11 + v20;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      LODWORD(v45) = 0;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      if (v11 < 0 || v11 + 4 > v14)
      {
        *(_QWORD *)&v40 = "usd/crateFile.cpp";
        *((_QWORD *)&v40 + 1) = "Read";
        *(_QWORD *)&v41 = 770;
        *((_QWORD *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
        LOBYTE(v42) = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", 4uLL, v11, v14);
      }
      else
      {
        v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v11;
        if (v15 < 4 || ((v15 | v11) & 0x8000000000000000) != 0)
        {
          *(_QWORD *)&v40 = "usd/crateFile.cpp";
          *((_QWORD *)&v40 + 1) = "Read";
          *(_QWORD *)&v41 = 779;
          *((_QWORD *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
          LOBYTE(v42) = 0;
          v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", 4uLL, v15, v35);
        }
        else
        {
          v16 = (*(uint64_t (**)(uint64_t, __int128 **, uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, &v45, 4, v11);
          if ((unint64_t)(v16 + 1) >= 2)
          {
            v17 = v11 + v16;
            v39 = v45;
LABEL_27:
            v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
            v22 = v39;
            v23 = 72 * v39;
            if (v17 < 0 || (v21 & 0x8000000000000000) != 0 || v39 > v21 || v23 > v21)
            {
              *(_QWORD *)&v40 = "usd/crateFile.cpp";
              *((_QWORD *)&v40 + 1) = "_ReadUncompressedArray";
              *(_QWORD *)&v41 = 2053;
              *((_QWORD *)&v41 + 1) = "typename std::enable_if<!Reader::StreamSupportsZeroCopy || !_IsBitwiseReadWrite<T>"
                                      "::value>::type pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_ReadUncompressedA"
                                      "rray(Reader, ValueRep, VtArray<T> *, CrateFile::Version) [Reader = pxrInternal__aa"
                                      "pl__pxrReserved__::Usd_CrateFile::CrateFile::_Reader<pxrInternal__aapl__pxrReserve"
                                      "d__::Usd_CrateFile::_AssetStream>, T = pxrInternal__aapl__pxrReserved__::GfMatrix3d]";
              LOBYTE(v42) = 0;
              v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %llu elements for uncompressedArray (%llu bytes), remaining file size is %lld of %lld", v22, v23, v21, v37);
            }
            else
            {
              v44 = 0;
              v42 = 0u;
              v43 = 0u;
              v40 = 0u;
              v41 = 0u;
              v45 = &v40;
              sub_20C017334((unint64_t *)a4, v39, (uint64_t *)&v45);
              sub_20C01764C((pxrInternal__aapl__pxrReserved__::Vt_ArrayBase *)a4, v24, v25);
              v26 = *(_QWORD *)(a4 + 32);
              v27 = *(_QWORD *)a4;
              v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
              v29 = 72 * v27;
              if (v17 + v29 > v28)
              {
                *(_QWORD *)&v40 = "usd/crateFile.cpp";
                *((_QWORD *)&v40 + 1) = "Read";
                *(_QWORD *)&v41 = 770;
                *((_QWORD *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                LOBYTE(v42) = 0;
                pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Read out-of-bounds: %zd bytes at offset %td in a mapping of length %zd", v29, v17, v28);
              }
              else
              {
                v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8) - v17;
                if (v30 < v29 || ((v30 | v17) & 0x8000000000000000) != 0)
                {
                  *(_QWORD *)&v40 = "usd/crateFile.cpp";
                  *((_QWORD *)&v40 + 1) = "Read";
                  *(_QWORD *)&v41 = 779;
                  *((_QWORD *)&v41 + 1) = "BOOL pxrInternal__aapl__pxrReserved__::Usd_CrateFile::_AssetStream::Read(void *, size_t)";
                  LOBYTE(v42) = 0;
                  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
                  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v40, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to read %zu bytes, remaining file size is %lld of %lld", v29, v30, v38);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v26, v29, v17);
                }
              }
            }
          }
        }
      }
    }
    if (v7)
    {
      v31 = (unint64_t *)&v7->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v7)
    {
      v33 = (unint64_t *)&v7->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    return;
  }
  *(_QWORD *)&v42 = 0;
  v40 = 0u;
  v41 = 0u;
  if (&v40 != (__int128 *)a4)
  {
    sub_20BF5618C(a4);
    v13 = v41;
    *(_OWORD *)a4 = v40;
    *(_OWORD *)(a4 + 16) = v13;
    v40 = 0u;
    v41 = 0u;
    *(_QWORD *)(a4 + 32) = v42;
    *(_QWORD *)&v42 = 0;
  }
  sub_20BF5618C((uint64_t)&v40);
}

void sub_20C30DCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20BF5618C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C30DD28(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532F30;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CDD94(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C30DDD4(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C532FB0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C30DE80(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C533030;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

_QWORD *sub_20C30DF2C(_QWORD *a1, __int128 *a2)
{
  void **v3;
  uint64_t v4;
  void *v6;
  __int128 v7;
  void **v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C5330B0;
  v7 = *a2;
  v8 = &v6;
  sub_20C2CEBD4(&v6, a1);
  v3 = v8;
  if (v8 == &v6)
  {
    v4 = 4;
    v3 = &v6;
    goto LABEL_5;
  }
  if (v8)
  {
    v4 = 5;
LABEL_5:
    (*((void (**)(void))*v3 + v4))();
  }
  return a1;
}

__n128 sub_20C30DFE0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532F30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C30E01C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532F30;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

unint64_t sub_20C30E040(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  return sub_20C30E09C(*(uint64_t **)(a1 + 16), *(_QWORD *)(a1 + 8), (_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 6328) + 256), a2);
}

uint64_t sub_20C30E054(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C532F90))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C30E090()
{
  return &unk_24C532F90;
}

unint64_t sub_20C30E09C(uint64_t *a1, uint64_t a2, _QWORD *a3, pxrInternal__aapl__pxrReserved__::VtValue *this)
{
  int IsArrayValued;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _OWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  uint64_t v24;
  _OWORD v25[8];
  unsigned int v26;
  _QWORD v27[2];

  IsArrayValued = pxrInternal__aapl__pxrReserved__::VtValue::IsArrayValued(this);
  v9 = *((_QWORD *)this + 1);
  if (IsArrayValued)
  {
    if ((v9 & 4) != 0)
      v10 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v10 = *(_QWORD *)this;
    return sub_20C30E1FC((uint64_t)a1, a2, (uint64_t)a3, v10);
  }
  else
  {
    if ((v9 & 4) != 0)
      v12 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v9 & 0xFFFFFFFFFFFFFFF8) + 168))(this);
    else
      v12 = *(_QWORD *)this;
    v27[0] = a2;
    v27[1] = a3;
    v26 = 0;
    v13 = *(_OWORD *)(v12 + 48);
    v15 = *(_OWORD *)v12;
    v14 = *(_OWORD *)(v12 + 16);
    v25[2] = *(_OWORD *)(v12 + 32);
    v25[3] = v13;
    v25[0] = v15;
    v25[1] = v14;
    v16 = *(_OWORD *)(v12 + 112);
    v18 = *(_OWORD *)(v12 + 64);
    v17 = *(_OWORD *)(v12 + 80);
    v25[6] = *(_OWORD *)(v12 + 96);
    v25[7] = v16;
    v25[4] = v18;
    v25[5] = v17;
    if (sub_20C30E6FC((uint64_t)v25, &v26))
    {
      return v26 | 0x400F000000000000;
    }
    else
    {
      v19 = *a1;
      if (!*a1)
      {
        v20 = operator new(0x28uLL);
        *v20 = 0u;
        v20[1] = 0u;
        *((_DWORD *)v20 + 8) = 1065353216;
        sub_20BF2B090(a1, (uint64_t)v20);
        v19 = *a1;
      }
      v24 = 0;
      v21 = sub_20C30E844(v19, (double *)v12, (_OWORD *)v12, &v24);
      v22 = v21;
      if (v23)
      {
        v21[18] = *a3 & 0xFFFFFFFFFFFFLL | 0xF000000000000;
        sub_20C30E7A4((uint64_t)v27, (char *)v12);
      }
      return v22[18];
    }
  }
}

unint64_t sub_20C30E1FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[2];
  _QWORD v20[2];
  uint64_t __src;

  v19[0] = a2;
  v19[1] = a3;
  result = 0x800F000000000000;
  v18 = 0x800F000000000000;
  if (*(_QWORD *)a4)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v10 = (uint64_t *)(a1 + 8);
    v9 = v11;
    if (!v11)
    {
      v12 = operator new(0x28uLL);
      *v12 = 0u;
      v12[1] = 0u;
      *((_DWORD *)v12 + 8) = 1065353216;
      sub_20C2B3B54(v10, (uint64_t)v12);
      v9 = *v10;
    }
    v13 = sub_20C30E420(v9, (uint64_t *)a4, a4, &v18);
    if (v14)
    {
      v15 = *(_QWORD *)(a2 + 6328);
      if (((*(unsigned __int8 *)(v15 + 248) << 16) | (*(unsigned __int8 *)(v15 + 249) << 8)) > 0x4FFu)
      {
        v16 = *(unsigned __int16 *)(v15 + 248);
        v20[0] = a2;
        v20[1] = a3;
        v17 = sub_20C2CE3F0((uint64_t)v20, 8);
        if (((v16 | (v16 << 16)) & 0xFFFF00u) > 0x6FF)
        {
          __src = *(_QWORD *)a4;
          sub_20C2B7248((uint64_t)v20, (char *)&__src);
        }
        else
        {
          LODWORD(__src) = *(_QWORD *)a4;
          sub_20C2CE770((uint64_t)v20, (char *)&__src);
        }
        sub_20C30E37C((uint64_t)v20, *(char **)(a4 + 32), *(_QWORD *)a4);
        v13[7] = v17 & 0xFFFFFFFFFFFFLL | 0x800F000000000000;
      }
      else
      {
        v13[7] = sub_20C2CE3F0((uint64_t)v19, 8) & 0xFFFFFFFFFFFFLL | ((unint64_t)*((unsigned __int16 *)v13 + 31) << 48);
        LODWORD(v20[0]) = 1;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        LODWORD(v20[0]) = *(_QWORD *)a4;
        sub_20C2CE770((uint64_t)v19, (char *)v20);
        sub_20C30E37C((uint64_t)v19, *(char **)(a4 + 32), *(_QWORD *)a4);
      }
    }
    return v13[7];
  }
  return result;
}

uint64_t sub_20C30E37C(uint64_t result, char *__src, uint64_t a3)
{
  int64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;

  v3 = a3 << 7;
  if (a3 << 7)
  {
    v5 = *(_QWORD **)(result + 8);
    do
    {
      v6 = v5[2];
      v7 = v6 - *v5 + 0x80000;
      if (v3 >= v7)
        v8 = v6 - *v5 + 0x80000;
      else
        v8 = v3;
      v9 = *v5 - v6;
      if ((int64_t)(v8 + v9) > v5[4])
        v5[4] = v8 + v9;
      result = (uint64_t)memcpy((void *)(v5[3] + v9), __src, v8);
      *v5 += v8;
      if (v7 <= v3)
        result = sub_20C2B209C((_BOOL8)v5);
      __src += v8;
      v3 -= v8;
    }
    while (v3);
  }
  return result;
}

uint64_t *sub_20C30E420(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  uint64_t **v14;
  uint64_t *i;
  unint64_t v16;
  uint64_t *v17;
  void *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  float v23;
  float v24;
  _BOOL8 v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  uint64_t v29;
  uint64_t *v30;
  unint64_t v31;
  char v33[8];
  uint64_t v34;
  char v35;

  v9 = sub_20BF600AC((uint64_t)v33, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = (uint64_t *)*i)
      {
        v16 = i[1];
        if (v16 == v10)
        {
          if (sub_20BF601E8(i + 2, (uint64_t)a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (uint64_t *)(a1 + 16);
  v18 = operator new(0x40uLL);
  i = (uint64_t *)v18;
  v34 = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v10;
  v19 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v18 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v18 + 2) = v19;
  v20 = *(_QWORD *)(a3 + 32);
  *((_QWORD *)v18 + 6) = v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 - 16);
    if (*((_QWORD *)v18 + 5))
      v21 = (unint64_t *)*((_QWORD *)v18 + 5);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  *((_QWORD *)v18 + 7) = *a4;
  v35 = 1;
  v23 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    v25 = 1;
    if (v11 >= 3)
      v25 = (v11 & (v11 - 1)) != 0;
    v26 = v25 | (2 * v11);
    v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27)
      v28 = v27;
    else
      v28 = v26;
    sub_20BDEC6E0(a1, v28);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v29 = *(_QWORD *)a1;
  v30 = *(uint64_t **)(*(_QWORD *)a1 + 8 * v4);
  if (v30)
  {
    *i = *v30;
LABEL_42:
    *v30 = (uint64_t)i;
    goto LABEL_43;
  }
  *i = *v17;
  *v17 = (uint64_t)i;
  *(_QWORD *)(v29 + 8 * v4) = v17;
  if (*i)
  {
    v31 = *(_QWORD *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v31 >= v11)
        v31 %= v11;
    }
    else
    {
      v31 &= v11 - 1;
    }
    v30 = (uint64_t *)(*(_QWORD *)a1 + 8 * v31);
    goto LABEL_42;
  }
LABEL_43:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C30E69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;
  uint64_t v11;

  sub_20C30E6B8(v11, v10);
  _Unwind_Resume(a1);
}

void sub_20C30E6B8(uint64_t a1, void *__p)
{
  if (*(_BYTE *)(a1 + 8))
    sub_20BF5618C((uint64_t)__p + 16);
  if (__p)
    operator delete(__p);
}

uint64_t sub_20C30E6FC(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  double v6;
  int v8;

  v2 = 0;
  v3 = a1;
  while (2)
  {
    for (i = 0; i != 4; ++i)
    {
      if (v2 == i)
      {
        v5 = 0;
        v6 = *(double *)(a1 + 32 * v2 + 8 * v2);
        if (v6 < -128.0 || v6 > 127.0)
          return v5;
        if (v6 != (double)(int)v6)
          return 0;
        *((_BYTE *)&v8 + v2) = (int)v6;
      }
      else if (*(double *)(v3 + 8 * i) != 0.0)
      {
        return 0;
      }
    }
    ++v2;
    v3 += 32;
    if (v2 != 4)
      continue;
    break;
  }
  *a2 = v8;
  return 1;
}

uint64_t sub_20C30E7A4(uint64_t a1, char *__src)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD **)(a1 + 8);
  v4 = 128;
  do
  {
    v5 = v3[2];
    v6 = v5 - *v3 + 0x80000;
    if (v4 >= v6)
      v7 = v5 - *v3 + 0x80000;
    else
      v7 = v4;
    v8 = *v3 - v5;
    if ((int64_t)(v7 + v8) > v3[4])
      v3[4] = v7 + v8;
    result = (uint64_t)memcpy((void *)(v3[3] + v8), __src, v7);
    *v3 += v7;
    if (v6 <= v4)
      result = sub_20C2B209C((_BOOL8)v3);
    __src += v7;
    v4 -= v7;
  }
  while (v4);
  return result;
}

void *sub_20C30E844(uint64_t a1, double *a2, _OWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  char v31;

  v9 = sub_20BF543AC((uint64_t)&v31, a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if (pxrInternal__aapl__pxrReserved__::GfMatrix4d::operator==((double *)i + 2, a2))
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x98uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v17 = a3[5];
  *((_OWORD *)i + 5) = a3[4];
  *((_OWORD *)i + 6) = v17;
  v18 = a3[7];
  *((_OWORD *)i + 7) = a3[6];
  *((_OWORD *)i + 8) = v18;
  v19 = a3[1];
  *((_OWORD *)i + 1) = *a3;
  *((_OWORD *)i + 2) = v19;
  v20 = a3[3];
  *((_OWORD *)i + 3) = a3[2];
  *((_OWORD *)i + 4) = v20;
  *((_QWORD *)i + 18) = *a4;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v11 || (float)(v22 * (float)v11) < v21)
  {
    v23 = 1;
    if (v11 >= 3)
      v23 = (v11 & (v11 - 1)) != 0;
    v24 = v23 | (2 * v11);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    sub_20BDEC6E0(a1, v26);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v27 = *(_QWORD *)a1;
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v28)
  {
    *(_QWORD *)i = *v28;
LABEL_38:
    *v28 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v27 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v29 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v29 >= v11)
        v29 %= v11;
    }
    else
    {
      v29 &= v11 - 1;
    }
    v28 = (_QWORD *)(*(_QWORD *)a1 + 8 * v29);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_20C30EA94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C30EAB0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &unk_24C532FB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C30EAEC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C532FB0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double sub_20C30EB10(uint64_t a1, uint64_t *a2, pxrInternal__aapl__pxrReserved__::VtValue **a3)
{
  uint64_t v3;
  pxrInternal__aapl__pxrReserved__::VtValue *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[5];

  v3 = *a2;
  v4 = *a3;
  v6 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = v6[808];
  v8 = v6[809];
  v9 = v6[807];
  v11[0] = v6;
  v11[1] = v7;
  v11[2] = 0;
  v11[3] = v8;
  v11[4] = v9;
  return sub_20C30EBA0(v5, (uint64_t)v11, v3, v4);
}

uint64_t sub_20C30EB58(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C533010))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C30EB94()
{
  return &unk_24C533010;
}

double sub_20C30EBA0(uint64_t a1, uint64_t a2, uint64_t a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  __int128 v5;
  double result;
  __n128 v7[2];
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;

  if (a3 < 0)
  {
    v8 = 0;
    memset(v7, 0, sizeof(v7));
    v5 = *(_OWORD *)(a2 + 16);
    v9[0] = *(_OWORD *)a2;
    v9[1] = v5;
    v10 = *(_QWORD *)(a2 + 32);
    sub_20C30EC60(a1, v9, a3, (uint64_t)v7);
    sub_20BF5FD14(a4, v7);
    sub_20BF5618C((uint64_t)v7);
  }
  else
  {
    if ((a3 & 0x4000000000000000) != 0)
      sub_20C30EE60(v7, a3);
    else
      pxrInternal__aapl__pxrReserved__::ArchPRead(*(FILE **)(a2 + 32), (__sFILE *)v7, (char *)0x80, *(_QWORD *)(a2 + 8) + (a3 & 0xFFFFFFFFFFFFLL));
    *(_QWORD *)&result = sub_20C1D307C(a4, (__int128 *)v7).n128_u64[0];
  }
  return result;
}

