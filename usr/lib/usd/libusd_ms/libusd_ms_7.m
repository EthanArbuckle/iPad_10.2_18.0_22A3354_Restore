void sub_20C091094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0910DC(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJNS0_3seqIJNS0_5ascii3oneIJLc92EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123QuotedStringEscapedCharILc34EEEEEENS2_IJNS0_6not_atIJNS1_IJNS7_13VariableStartENS4_IJLc34EEEEEEEEEENS3_3anyEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJNS0_3seqIJNS0_5ascii3oneIJLc92EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123QuotedStringEscapedCharILc34EEEEEENS2_IJNS0_6not_atIJNS1_IJNS7_13VariableStartENS4_IJLc34EEEEEEEEEENS3_3anyEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C091150(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C091164(uint64_t a1)
{
  _OWORD *v2;
  __int128 *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *locale;
  uint64_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  void **v53;
  uint64_t v54;
  _QWORD *v55;
  const std::locale::facet *v56;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  const std::locale::facet *v69;
  __int128 v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  void **v79;
  uint64_t v80;
  _QWORD *v81;
  const std::locale::facet *v82;
  void *__p[2];
  __int128 v84;
  std::locale v85;
  uint64_t v86;
  unsigned __int8 v87;
  std::locale v88;
  std::locale v89;
  void *v90;
  uint64_t v91;
  unsigned __int8 v92;

  v2 = (_OWORD *)(a1 + 8);
  v3 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)&v89, a1 + 8, (__int128 *)(a1 + 48));
  if ((v92 & 0x80u) == 0)
    v4 = &v90;
  else
    v4 = v90;
  if ((v92 & 0x80u) == 0)
    v5 = v92;
  else
    v5 = v91;
  v6 = (_QWORD *)MEMORY[0x24BEDB310];
  v7 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v4, v5);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v9, (uint64_t)__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v11 = sub_20BDDC1C8(v10, (uint64_t)__p, 1);
  v12 = sub_20BDDC1C8(v11, (uint64_t)"  start  ", 9);
  sub_20C091B70(__p);
  if ((SBYTE7(v84) & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((SBYTE7(v84) & 0x80u) == 0)
    v14 = BYTE7(v84);
  else
    v14 = (uint64_t)__p[1];
  v15 = sub_20BDDC1C8(v12, (uint64_t)v13, v14);
  sub_20BDDC1C8(v15, (uint64_t)"; current ", 10);
  if (SBYTE7(v84) < 0)
    operator delete(__p[0]);
  if ((char)v92 < 0)
    operator delete(v90);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v16 = std::locale::use_facet(&v89, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v89);
  std::ostream::put();
  std::ostream::flush();
  v17 = v2[1];
  *(_OWORD *)__p = *v2;
  v84 = v17;
  if (sub_20C091BF8(a1))
  {
    sub_20C01AE64((uint64_t)&v89, (uint64_t)v2, v3);
    if ((v92 & 0x80u) == 0)
      v18 = &v90;
    else
      v18 = v90;
    if ((v92 & 0x80u) == 0)
      v19 = v92;
    else
      v19 = v91;
    v20 = (_QWORD *)MEMORY[0x24BEDB310];
    v21 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v18, v19);
    LOBYTE(v85.__locale_) = 58;
    sub_20BDDC1C8(v21, (uint64_t)&v85, 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v85.__locale_) = 58;
    sub_20BDDC1C8(v22, (uint64_t)&v85, 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v85.__locale_) = 40;
    sub_20BDDC1C8(v23, (uint64_t)&v85, 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v85.__locale_) = 41;
    v25 = sub_20BDDC1C8(v24, (uint64_t)&v85, 1);
    v26 = sub_20BDDC1C8(v25, (uint64_t)"  start  ", 9);
    sub_20C0921C8(&v85);
    if ((v87 & 0x80u) == 0)
      locale = &v85;
    else
      locale = v85.__locale_;
    if ((v87 & 0x80u) == 0)
      v28 = v87;
    else
      v28 = v86;
    v29 = sub_20BDDC1C8(v26, (uint64_t)locale, v28);
    sub_20BDDC1C8(v29, (uint64_t)"; current ", 10);
    if ((char)v87 < 0)
      operator delete(v85.__locale_);
    if ((char)v92 < 0)
      operator delete(v90);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
    v30 = std::locale::use_facet(&v89, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v89);
    std::ostream::put();
    std::ostream::flush();
    if (sub_20C092250((_QWORD *)a1))
    {
      sub_20C01AE64((uint64_t)&v89, (uint64_t)v2, v3);
      if ((v92 & 0x80u) == 0)
        v31 = &v90;
      else
        v31 = v90;
      if ((v92 & 0x80u) == 0)
        v32 = v92;
      else
        v32 = v91;
      v33 = (_QWORD *)MEMORY[0x24BEDB310];
      v34 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v31, v32);
      LOBYTE(v85.__locale_) = 58;
      sub_20BDDC1C8(v34, (uint64_t)&v85, 1);
      v35 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(v85.__locale_) = 58;
      sub_20BDDC1C8(v35, (uint64_t)&v85, 1);
      v36 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(v85.__locale_) = 40;
      sub_20BDDC1C8(v36, (uint64_t)&v85, 1);
      v37 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(v85.__locale_) = 41;
      v38 = sub_20BDDC1C8(v37, (uint64_t)&v85, 1);
      v39 = sub_20BDDC1C8(v38, (uint64_t)" success ", 9);
      sub_20C0921C8(&v85);
      if ((v87 & 0x80u) == 0)
        v40 = &v85;
      else
        v40 = v85.__locale_;
      if ((v87 & 0x80u) == 0)
        v41 = v87;
      else
        v41 = v86;
      v42 = sub_20BDDC1C8(v39, (uint64_t)v40, v41);
      sub_20BDDC1C8(v42, (uint64_t)"; next ", 7);
      if ((char)v87 < 0)
        operator delete(v85.__locale_);
      if ((char)v92 < 0)
        operator delete(v90);
      sub_20C088CD8(a1);
      std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
      v43 = std::locale::use_facet(&v89, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
      std::locale::~locale(&v89);
      std::ostream::put();
      std::ostream::flush();
      sub_20C01AE64((uint64_t)&v89, (uint64_t)v2, v3);
      if ((v92 & 0x80u) == 0)
        v44 = &v90;
      else
        v44 = v90;
      if ((v92 & 0x80u) == 0)
        v45 = v92;
      else
        v45 = v91;
      v46 = (_QWORD *)MEMORY[0x24BEDB310];
      v47 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v44, v45);
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v47, (uint64_t)__p, 1);
      v48 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v48, (uint64_t)__p, 1);
      v49 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 40;
      sub_20BDDC1C8(v49, (uint64_t)__p, 1);
      v50 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 41;
      v51 = sub_20BDDC1C8(v50, (uint64_t)__p, 1);
      v52 = sub_20BDDC1C8(v51, (uint64_t)" success ", 9);
      sub_20C091B70(__p);
      if ((SBYTE7(v84) & 0x80u) == 0)
        v53 = __p;
      else
        v53 = (void **)__p[0];
      if ((SBYTE7(v84) & 0x80u) == 0)
        v54 = BYTE7(v84);
      else
        v54 = (uint64_t)__p[1];
      v55 = sub_20BDDC1C8(v52, (uint64_t)v53, v54);
      sub_20BDDC1C8(v55, (uint64_t)"; next ", 7);
      if (SBYTE7(v84) < 0)
        operator delete(__p[0]);
      if ((char)v92 < 0)
        operator delete(v90);
      sub_20C088CD8(a1);
      std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
      v56 = std::locale::use_facet(&v89, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
      std::locale::~locale(&v89);
      std::ostream::put();
      std::ostream::flush();
      return 1;
    }
    sub_20C01AE64((uint64_t)&v89, (uint64_t)v2, v3);
    if ((v92 & 0x80u) == 0)
      v58 = &v90;
    else
      v58 = v90;
    if ((v92 & 0x80u) == 0)
      v59 = v92;
    else
      v59 = v91;
    v60 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v58, v59);
    LOBYTE(v85.__locale_) = 58;
    sub_20BDDC1C8(v60, (uint64_t)&v85, 1);
    v61 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v85.__locale_) = 58;
    sub_20BDDC1C8(v61, (uint64_t)&v85, 1);
    v62 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v85.__locale_) = 40;
    sub_20BDDC1C8(v62, (uint64_t)&v85, 1);
    v63 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v85.__locale_) = 41;
    v64 = sub_20BDDC1C8(v63, (uint64_t)&v85, 1);
    v65 = sub_20BDDC1C8(v64, (uint64_t)" failure ", 9);
    sub_20C0921C8(&v85);
    if ((v87 & 0x80u) == 0)
      v66 = &v85;
    else
      v66 = v85.__locale_;
    if ((v87 & 0x80u) == 0)
      v67 = v87;
    else
      v67 = v86;
    v68 = sub_20BDDC1C8(v65, (uint64_t)v66, v67);
    std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(_QWORD *)(*v68 - 24)));
    v69 = std::locale::use_facet(&v88, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
    std::locale::~locale(&v88);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v87 < 0)
      operator delete(v85.__locale_);
    if ((char)v92 < 0)
      operator delete(v90);
  }
  v70 = v84;
  *v2 = *(_OWORD *)__p;
  v2[1] = v70;
  sub_20C01AE64((uint64_t)&v89, (uint64_t)v2, v3);
  if ((v92 & 0x80u) == 0)
    v71 = &v90;
  else
    v71 = v90;
  if ((v92 & 0x80u) == 0)
    v72 = v92;
  else
    v72 = v91;
  v73 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v71, v72);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v73, (uint64_t)__p, 1);
  v74 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v74, (uint64_t)__p, 1);
  v75 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v75, (uint64_t)__p, 1);
  v76 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v77 = sub_20BDDC1C8(v76, (uint64_t)__p, 1);
  v78 = sub_20BDDC1C8(v77, (uint64_t)" failure ", 9);
  sub_20C091B70(__p);
  if ((SBYTE7(v84) & 0x80u) == 0)
    v79 = __p;
  else
    v79 = (void **)__p[0];
  if ((SBYTE7(v84) & 0x80u) == 0)
    v80 = BYTE7(v84);
  else
    v80 = (uint64_t)__p[1];
  v81 = sub_20BDDC1C8(v78, (uint64_t)v79, v80);
  std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(_QWORD *)(*v81 - 24)));
  v82 = std::locale::use_facet(&v85, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
  std::locale::~locale(&v85);
  std::ostream::put();
  std::ostream::flush();
  if (SBYTE7(v84) < 0)
    operator delete(__p[0]);
  if ((char)v92 < 0)
    operator delete(v90);
  return 0;
}

void sub_20C091A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17, std::locale a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _OWORD *v26;

  if (a26 < 0)
    operator delete(__p);
  *v26 = a9;
  v26[1] = a10;
  _Unwind_Resume(exception_object);
}

void sub_20C091B70(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJNS0_5ascii3oneIJLc92EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123QuotedStringEscapedCharILc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJNS0_5ascii3oneIJLc92EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123QuotedStringEscapedCharILc34EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C091BE4(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C091BF8(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *p_p;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  void *__p;
  uint64_t v46;
  unsigned __int8 v47;
  std::locale v48;
  void *v49;
  uint64_t v50;
  unsigned __int8 v51;
  std::locale v52;

  v2 = a1 + 8;
  v3 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)&v48, a1 + 8, (__int128 *)(a1 + 48));
  if ((v51 & 0x80u) == 0)
    v4 = &v49;
  else
    v4 = v49;
  if ((v51 & 0x80u) == 0)
    v5 = v51;
  else
    v5 = v50;
  v6 = (_QWORD *)MEMORY[0x24BEDB310];
  v7 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v4, v5);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v7, (uint64_t)&__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v8, (uint64_t)&__p, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v9, (uint64_t)&__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v11 = sub_20BDDC1C8(v10, (uint64_t)&__p, 1);
  v12 = sub_20BDDC1C8(v11, (uint64_t)"  start  ", 9);
  sub_20C092138(&__p);
  if ((v47 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v47 & 0x80u) == 0)
    v14 = v47;
  else
    v14 = v46;
  v15 = sub_20BDDC1C8(v12, (uint64_t)p_p, v14);
  sub_20BDDC1C8(v15, (uint64_t)"; current ", 10);
  if ((char)v47 < 0)
    operator delete(__p);
  if ((char)v51 < 0)
    operator delete(v49);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v16 = std::locale::use_facet(&v48, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v48);
  std::ostream::put();
  std::ostream::flush();
  v17 = *(_BYTE **)(a1 + 8);
  if (v17 == *(_BYTE **)(a1 + 40) || *v17 != 92)
  {
    sub_20C01AE64((uint64_t)&v48, v2, v3);
    if ((v51 & 0x80u) == 0)
      v33 = &v49;
    else
      v33 = v49;
    if ((v51 & 0x80u) == 0)
      v34 = v51;
    else
      v34 = v50;
    v35 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v33, v34);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v35, (uint64_t)&__p, 1);
    v36 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v36, (uint64_t)&__p, 1);
    v37 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v37, (uint64_t)&__p, 1);
    v38 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v39 = sub_20BDDC1C8(v38, (uint64_t)&__p, 1);
    v40 = sub_20BDDC1C8(v39, (uint64_t)" failure ", 9);
    sub_20C092138(&__p);
    if ((v47 & 0x80u) == 0)
      v41 = &__p;
    else
      v41 = __p;
    if ((v47 & 0x80u) == 0)
      v42 = v47;
    else
      v42 = v46;
    v43 = sub_20BDDC1C8(v40, (uint64_t)v41, v42);
    std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)));
    v44 = std::locale::use_facet(&v52, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
    std::locale::~locale(&v52);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v47 < 0)
      operator delete(__p);
    if ((char)v51 < 0)
      operator delete(v49);
    return 0;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 8) = v17 + 1;
    *(_QWORD *)(a1 + 16) = v18;
    ++*(_QWORD *)(a1 + 32);
    sub_20C01AE64((uint64_t)&v48, v2, v3);
    if ((v51 & 0x80u) == 0)
      v19 = &v49;
    else
      v19 = v49;
    if ((v51 & 0x80u) == 0)
      v20 = v51;
    else
      v20 = v50;
    v21 = (_QWORD *)MEMORY[0x24BEDB310];
    v22 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v19, v20);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v22, (uint64_t)&__p, 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v23, (uint64_t)&__p, 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v24, (uint64_t)&__p, 1);
    v25 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v26 = sub_20BDDC1C8(v25, (uint64_t)&__p, 1);
    v27 = sub_20BDDC1C8(v26, (uint64_t)" success ", 9);
    sub_20C092138(&__p);
    if ((v47 & 0x80u) == 0)
      v28 = &__p;
    else
      v28 = __p;
    if ((v47 & 0x80u) == 0)
      v29 = v47;
    else
      v29 = v46;
    v30 = sub_20BDDC1C8(v27, (uint64_t)v28, v29);
    sub_20BDDC1C8(v30, (uint64_t)"; next ", 7);
    if ((char)v47 < 0)
      operator delete(__p);
    if ((char)v51 < 0)
      operator delete(v49);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
    v31 = std::locale::use_facet(&v48, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
    std::locale::~locale(&v48);
    std::ostream::put();
    std::ostream::flush();
    return 1;
  }
}

void sub_20C0920C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C092138(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB2DDCLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB2DDCLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0921B4(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C0921C8(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123QuotedStringEscapedCharILc34EEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123QuotedStringEscapedCharILc34EEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09223C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C092250(_QWORD *a1)
{
  char *v1;
  int v3;
  uint64_t *v4;
  char *v5;
  uint64_t v7;
  int __s;
  uint64_t v9;

  v1 = (char *)a1[1];
  if (v1 == (char *)a1[5])
    return 0;
  v3 = *v1;
  __s = 576463968;
  v4 = (uint64_t *)memchr(&__s, v3, 4uLL);
  v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - (char *)&__s == 4)
    return 0;
  v7 = a1[2] + 1;
  a1[1] = v1 + 1;
  a1[2] = v7;
  ++a1[4];
  return 1;
}

uint64_t sub_20C0922EC(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)"  start  ", 9);
  sub_20C0926BC(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; current ", 10);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C09248C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0924D4(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)" success ", 9);
  sub_20C0926BC(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; next ", 7);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C092674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0926BC(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJNS0_6not_atIJNS0_3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113VariableStartENS0_5ascii3oneIJLc34EEEEEEEEEENS7_3anyEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJNS0_6not_atIJNS0_3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113VariableStartENS0_5ascii3oneIJLc34EEEEEEEEEENS7_3anyEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C092730(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C092744(uint64_t a1)
{
  _OWORD *v2;
  __int128 *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *locale;
  uint64_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  _BYTE *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  const std::locale::facet *v71;
  __int128 v72;
  void *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  void **v81;
  uint64_t v82;
  _QWORD *v83;
  const std::locale::facet *v84;
  void *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  const std::locale::facet *v97;
  void *v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  _QWORD *v108;
  const std::locale::facet *v109;
  __int128 v110;
  void *v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  void **v120;
  uint64_t v121;
  _QWORD *v122;
  const std::locale::facet *v123;
  void *__p[2];
  __int128 v125;
  std::locale v126;
  uint64_t v127;
  unsigned __int8 v128;
  std::locale v129;
  std::locale v130;
  void *v131;
  uint64_t v132;
  unsigned __int8 v133;

  v2 = (_OWORD *)(a1 + 8);
  v3 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)&v130, a1 + 8, (__int128 *)(a1 + 48));
  if ((v133 & 0x80u) == 0)
    v4 = &v131;
  else
    v4 = v131;
  if ((v133 & 0x80u) == 0)
    v5 = v133;
  else
    v5 = v132;
  v6 = (_QWORD *)MEMORY[0x24BEDB310];
  v7 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v4, v5);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v9, (uint64_t)__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v11 = sub_20BDDC1C8(v10, (uint64_t)__p, 1);
  v12 = sub_20BDDC1C8(v11, (uint64_t)"  start  ", 9);
  sub_20C093B18(__p);
  if ((SBYTE7(v125) & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((SBYTE7(v125) & 0x80u) == 0)
    v14 = BYTE7(v125);
  else
    v14 = (uint64_t)__p[1];
  v15 = sub_20BDDC1C8(v12, (uint64_t)v13, v14);
  sub_20BDDC1C8(v15, (uint64_t)"; current ", 10);
  if (SBYTE7(v125) < 0)
    operator delete(__p[0]);
  if ((char)v133 < 0)
    operator delete(v131);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v16 = std::locale::use_facet(&v130, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v130);
  std::ostream::put();
  std::ostream::flush();
  v17 = v2[1];
  *(_OWORD *)__p = *v2;
  v125 = v17;
  sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
  if ((v133 & 0x80u) == 0)
    v18 = &v131;
  else
    v18 = v131;
  if ((v133 & 0x80u) == 0)
    v19 = v133;
  else
    v19 = v132;
  v20 = (_QWORD *)MEMORY[0x24BEDB310];
  v21 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v18, v19);
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v21, (uint64_t)&v126, 1);
  v22 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v22, (uint64_t)&v126, 1);
  v23 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 40;
  sub_20BDDC1C8(v23, (uint64_t)&v126, 1);
  v24 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 41;
  v25 = sub_20BDDC1C8(v24, (uint64_t)&v126, 1);
  v26 = sub_20BDDC1C8(v25, (uint64_t)"  start  ", 9);
  sub_20C093BA0(&v126);
  if ((v128 & 0x80u) == 0)
    locale = &v126;
  else
    locale = v126.__locale_;
  if ((v128 & 0x80u) == 0)
    v28 = v128;
  else
    v28 = v127;
  v29 = sub_20BDDC1C8(v26, (uint64_t)locale, v28);
  sub_20BDDC1C8(v29, (uint64_t)"; current ", 10);
  if ((char)v128 < 0)
    operator delete(v126.__locale_);
  if ((char)v133 < 0)
    operator delete(v131);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v30 = std::locale::use_facet(&v130, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale(&v130);
  std::ostream::put();
  std::ostream::flush();
  if ((sub_20C08D118((_QWORD *)a1) & 1) != 0)
    goto LABEL_69;
  sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
  if ((v133 & 0x80u) == 0)
    v31 = &v131;
  else
    v31 = v131;
  if ((v133 & 0x80u) == 0)
    v32 = v133;
  else
    v32 = v132;
  v33 = (_QWORD *)MEMORY[0x24BEDB310];
  v34 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v31, v32);
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v34, (uint64_t)&v126, 1);
  v35 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v35, (uint64_t)&v126, 1);
  v36 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 40;
  sub_20BDDC1C8(v36, (uint64_t)&v126, 1);
  v37 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 41;
  v38 = sub_20BDDC1C8(v37, (uint64_t)&v126, 1);
  v39 = sub_20BDDC1C8(v38, (uint64_t)"  start  ", 9);
  sub_20C093C28(&v126);
  if ((v128 & 0x80u) == 0)
    v40 = &v126;
  else
    v40 = v126.__locale_;
  if ((v128 & 0x80u) == 0)
    v41 = v128;
  else
    v41 = v127;
  v42 = sub_20BDDC1C8(v39, (uint64_t)v40, v41);
  sub_20BDDC1C8(v42, (uint64_t)"; current ", 10);
  if ((char)v128 < 0)
    operator delete(v126.__locale_);
  if ((char)v133 < 0)
    operator delete(v131);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
  v43 = std::locale::use_facet(&v130, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
  std::locale::~locale(&v130);
  std::ostream::put();
  std::ostream::flush();
  v44 = *(_BYTE **)(a1 + 8);
  if (v44 != *(_BYTE **)(a1 + 40) && *v44 == 34)
  {
    v45 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 8) = v44 + 1;
    *(_QWORD *)(a1 + 16) = v45;
    ++*(_QWORD *)(a1 + 32);
    sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
    if ((v133 & 0x80u) == 0)
      v46 = &v131;
    else
      v46 = v131;
    if ((v133 & 0x80u) == 0)
      v47 = v133;
    else
      v47 = v132;
    v48 = (_QWORD *)MEMORY[0x24BEDB310];
    v49 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v46, v47);
    LOBYTE(v126.__locale_) = 58;
    sub_20BDDC1C8(v49, (uint64_t)&v126, 1);
    v50 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v126.__locale_) = 58;
    sub_20BDDC1C8(v50, (uint64_t)&v126, 1);
    v51 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v126.__locale_) = 40;
    sub_20BDDC1C8(v51, (uint64_t)&v126, 1);
    v52 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v126.__locale_) = 41;
    v53 = sub_20BDDC1C8(v52, (uint64_t)&v126, 1);
    v54 = sub_20BDDC1C8(v53, (uint64_t)" success ", 9);
    sub_20C093C28(&v126);
    if ((v128 & 0x80u) == 0)
      v55 = &v126;
    else
      v55 = v126.__locale_;
    if ((v128 & 0x80u) == 0)
      v56 = v128;
    else
      v56 = v127;
    v57 = sub_20BDDC1C8(v54, (uint64_t)v55, v56);
    sub_20BDDC1C8(v57, (uint64_t)"; next ", 7);
    if ((char)v128 < 0)
      operator delete(v126.__locale_);
    if ((char)v133 < 0)
      operator delete(v131);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(*v48 - 24)));
    v58 = std::locale::use_facet(&v130, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
    std::locale::~locale(&v130);
    std::ostream::put();
    std::ostream::flush();
LABEL_69:
    sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
    if ((v133 & 0x80u) == 0)
      v59 = &v131;
    else
      v59 = v131;
    if ((v133 & 0x80u) == 0)
      v60 = v133;
    else
      v60 = v132;
    v61 = (_QWORD *)MEMORY[0x24BEDB310];
    v62 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v59, v60);
    LOBYTE(v126.__locale_) = 58;
    sub_20BDDC1C8(v62, (uint64_t)&v126, 1);
    v63 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v126.__locale_) = 58;
    sub_20BDDC1C8(v63, (uint64_t)&v126, 1);
    v64 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v126.__locale_) = 40;
    sub_20BDDC1C8(v64, (uint64_t)&v126, 1);
    v65 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v126.__locale_) = 41;
    v66 = sub_20BDDC1C8(v65, (uint64_t)&v126, 1);
    v67 = sub_20BDDC1C8(v66, (uint64_t)" success ", 9);
    sub_20C093BA0(&v126);
    if ((v128 & 0x80u) == 0)
      v68 = &v126;
    else
      v68 = v126.__locale_;
    if ((v128 & 0x80u) == 0)
      v69 = v128;
    else
      v69 = v127;
    v70 = sub_20BDDC1C8(v67, (uint64_t)v68, v69);
    sub_20BDDC1C8(v70, (uint64_t)"; next ", 7);
    if ((char)v128 < 0)
      operator delete(v126.__locale_);
    if ((char)v133 < 0)
      operator delete(v131);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(*v61 - 24)));
    v71 = std::locale::use_facet(&v130, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10);
    std::locale::~locale(&v130);
    std::ostream::put();
    std::ostream::flush();
    v72 = v125;
    *v2 = *(_OWORD *)__p;
    v2[1] = v72;
    sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
    if ((v133 & 0x80u) == 0)
      v73 = &v131;
    else
      v73 = v131;
    if ((v133 & 0x80u) == 0)
      v74 = v133;
    else
      v74 = v132;
    v75 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v73, v74);
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v75, (uint64_t)__p, 1);
    v76 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v76, (uint64_t)__p, 1);
    v77 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 40;
    sub_20BDDC1C8(v77, (uint64_t)__p, 1);
    v78 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 41;
    v79 = sub_20BDDC1C8(v78, (uint64_t)__p, 1);
    v80 = sub_20BDDC1C8(v79, (uint64_t)" failure ", 9);
    sub_20C093B18(__p);
    if ((SBYTE7(v125) & 0x80u) == 0)
      v81 = __p;
    else
      v81 = (void **)__p[0];
    if ((SBYTE7(v125) & 0x80u) == 0)
      v82 = BYTE7(v125);
    else
      v82 = (uint64_t)__p[1];
    v83 = sub_20BDDC1C8(v80, (uint64_t)v81, v82);
    std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(_QWORD *)(*v83 - 24)));
    v84 = std::locale::use_facet(&v126, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
    std::locale::~locale(&v126);
    std::ostream::put();
    std::ostream::flush();
    if (SBYTE7(v125) < 0)
      operator delete(__p[0]);
    if ((char)v133 < 0)
      operator delete(v131);
    return 0;
  }
  sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
  if ((v133 & 0x80u) == 0)
    v86 = &v131;
  else
    v86 = v131;
  if ((v133 & 0x80u) == 0)
    v87 = v133;
  else
    v87 = v132;
  v88 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v86, v87);
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v88, (uint64_t)&v126, 1);
  v89 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v89, (uint64_t)&v126, 1);
  v90 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 40;
  sub_20BDDC1C8(v90, (uint64_t)&v126, 1);
  v91 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 41;
  v92 = sub_20BDDC1C8(v91, (uint64_t)&v126, 1);
  v93 = sub_20BDDC1C8(v92, (uint64_t)" failure ", 9);
  sub_20C093C28(&v126);
  if ((v128 & 0x80u) == 0)
    v94 = &v126;
  else
    v94 = v126.__locale_;
  if ((v128 & 0x80u) == 0)
    v95 = v128;
  else
    v95 = v127;
  v96 = sub_20BDDC1C8(v93, (uint64_t)v94, v95);
  std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(_QWORD *)(*v96 - 24)));
  v97 = std::locale::use_facet(&v129, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
  std::locale::~locale(&v129);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v128 < 0)
    operator delete(v126.__locale_);
  if ((char)v133 < 0)
    operator delete(v131);
  sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
  if ((v133 & 0x80u) == 0)
    v98 = &v131;
  else
    v98 = v131;
  if ((v133 & 0x80u) == 0)
    v99 = v133;
  else
    v99 = v132;
  v100 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v98, v99);
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v100, (uint64_t)&v126, 1);
  v101 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v101, (uint64_t)&v126, 1);
  v102 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 40;
  sub_20BDDC1C8(v102, (uint64_t)&v126, 1);
  v103 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 41;
  v104 = sub_20BDDC1C8(v103, (uint64_t)&v126, 1);
  v105 = sub_20BDDC1C8(v104, (uint64_t)" failure ", 9);
  sub_20C093BA0(&v126);
  if ((v128 & 0x80u) == 0)
    v106 = &v126;
  else
    v106 = v126.__locale_;
  if ((v128 & 0x80u) == 0)
    v107 = v128;
  else
    v107 = v127;
  v108 = sub_20BDDC1C8(v105, (uint64_t)v106, v107);
  std::ios_base::getloc((const std::ios_base *)((char *)v108 + *(_QWORD *)(*v108 - 24)));
  v109 = std::locale::use_facet(&v129, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v109->__vftable[2].~facet_0)(v109, 10);
  std::locale::~locale(&v129);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v128 < 0)
    operator delete(v126.__locale_);
  if ((char)v133 < 0)
    operator delete(v131);
  v110 = v125;
  *v2 = *(_OWORD *)__p;
  v2[1] = v110;
  sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
  if ((v133 & 0x80u) == 0)
    v111 = &v131;
  else
    v111 = v131;
  if ((v133 & 0x80u) == 0)
    v112 = v133;
  else
    v112 = v132;
  v113 = (_QWORD *)MEMORY[0x24BEDB310];
  v114 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v111, v112);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v114, (uint64_t)__p, 1);
  v115 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v115, (uint64_t)__p, 1);
  v116 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v116, (uint64_t)__p, 1);
  v117 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v118 = sub_20BDDC1C8(v117, (uint64_t)__p, 1);
  v119 = sub_20BDDC1C8(v118, (uint64_t)" success ", 9);
  sub_20C093B18(__p);
  if ((SBYTE7(v125) & 0x80u) == 0)
    v120 = __p;
  else
    v120 = (void **)__p[0];
  if ((SBYTE7(v125) & 0x80u) == 0)
    v121 = BYTE7(v125);
  else
    v121 = (uint64_t)__p[1];
  v122 = sub_20BDDC1C8(v119, (uint64_t)v120, v121);
  sub_20BDDC1C8(v122, (uint64_t)"; next ", 7);
  if (SBYTE7(v125) < 0)
    operator delete(__p[0]);
  if ((char)v133 < 0)
    operator delete(v131);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v113 + *(_QWORD *)(*v113 - 24)));
  v123 = std::locale::use_facet(&v130, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v123->__vftable[2].~facet_0)(v123, 10);
  std::locale::~locale(&v130);
  std::ostream::put();
  std::ostream::flush();
  return 1;
}

void sub_20C0934E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17, std::locale a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _OWORD *v26;

  if (a26 < 0)
    operator delete(__p);
  *v26 = a9;
  v26[1] = a10;
  _Unwind_Resume(exception_object);
}

BOOL sub_20C093608(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *p_p;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _BOOL8 v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  const std::locale::facet *v42;
  void *__p;
  uint64_t v45;
  unsigned __int8 v46;
  std::locale v47;
  void *v48;
  uint64_t v49;
  unsigned __int8 v50;
  std::locale v51;

  v2 = a1 + 8;
  v3 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)&v47, a1 + 8, (__int128 *)(a1 + 48));
  if ((v50 & 0x80u) == 0)
    v4 = &v48;
  else
    v4 = v48;
  if ((v50 & 0x80u) == 0)
    v5 = v50;
  else
    v5 = v49;
  v6 = (_QWORD *)MEMORY[0x24BEDB310];
  v7 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v4, v5);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v7, (uint64_t)&__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v8, (uint64_t)&__p, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v9, (uint64_t)&__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v11 = sub_20BDDC1C8(v10, (uint64_t)&__p, 1);
  v12 = sub_20BDDC1C8(v11, (uint64_t)"  start  ", 9);
  sub_20C093CB8(&__p);
  if ((v46 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v46 & 0x80u) == 0)
    v14 = v46;
  else
    v14 = v45;
  v15 = sub_20BDDC1C8(v12, (uint64_t)p_p, v14);
  sub_20BDDC1C8(v15, (uint64_t)"; current ", 10);
  if ((char)v46 < 0)
    operator delete(__p);
  if ((char)v50 < 0)
    operator delete(v48);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v16 = std::locale::use_facet(&v47, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v47);
  std::ostream::put();
  std::ostream::flush();
  v17 = sub_20C093D48((_QWORD *)a1);
  if (v17)
  {
    sub_20C01AE64((uint64_t)&v47, v2, v3);
    if ((v50 & 0x80u) == 0)
      v18 = &v48;
    else
      v18 = v48;
    if ((v50 & 0x80u) == 0)
      v19 = v50;
    else
      v19 = v49;
    v20 = (_QWORD *)MEMORY[0x24BEDB310];
    v21 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v18, v19);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v21, (uint64_t)&__p, 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v22, (uint64_t)&__p, 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v23, (uint64_t)&__p, 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v25 = sub_20BDDC1C8(v24, (uint64_t)&__p, 1);
    v26 = sub_20BDDC1C8(v25, (uint64_t)" success ", 9);
    sub_20C093CB8(&__p);
    if ((v46 & 0x80u) == 0)
      v27 = &__p;
    else
      v27 = __p;
    if ((v46 & 0x80u) == 0)
      v28 = v46;
    else
      v28 = v45;
    v29 = sub_20BDDC1C8(v26, (uint64_t)v27, v28);
    sub_20BDDC1C8(v29, (uint64_t)"; next ", 7);
    if ((char)v46 < 0)
      operator delete(__p);
    if ((char)v50 < 0)
      operator delete(v48);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
    v30 = std::locale::use_facet(&v47, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v47);
    std::ostream::put();
    std::ostream::flush();
  }
  else
  {
    sub_20C01AE64((uint64_t)&v47, v2, v3);
    if ((v50 & 0x80u) == 0)
      v31 = &v48;
    else
      v31 = v48;
    if ((v50 & 0x80u) == 0)
      v32 = v50;
    else
      v32 = v49;
    v33 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v31, v32);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v33, (uint64_t)&__p, 1);
    v34 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v34, (uint64_t)&__p, 1);
    v35 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v35, (uint64_t)&__p, 1);
    v36 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v37 = sub_20BDDC1C8(v36, (uint64_t)&__p, 1);
    v38 = sub_20BDDC1C8(v37, (uint64_t)" failure ", 9);
    sub_20C093CB8(&__p);
    if ((v46 & 0x80u) == 0)
      v39 = &__p;
    else
      v39 = __p;
    if ((v46 & 0x80u) == 0)
      v40 = v46;
    else
      v40 = v45;
    v41 = sub_20BDDC1C8(v38, (uint64_t)v39, v40);
    std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(*v41 - 24)));
    v42 = std::locale::use_facet(&v51, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale(&v51);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v46 < 0)
      operator delete(__p);
    if ((char)v50 < 0)
      operator delete(v48);
  }
  return v17;
}

void sub_20C093AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C093B18(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl6not_atIJNS0_3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113VariableStartENS0_5ascii3oneIJLc34EEEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl6not_atIJNS0_3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113VariableStartENS0_5ascii3oneIJLc34EEEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C093B8C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C093BA0(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113VariableStartENS0_5ascii3oneIJLc34EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113VariableStartENS0_5ascii3oneIJLc34EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C093C14(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C093C28(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB3013 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB3013 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C093CA4(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C093CB8(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB3044 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB3044 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C093D34(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

BOOL sub_20C093D48(_QWORD *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (_BYTE *)a1[1];
  v2 = (_BYTE *)a1[5];
  if (v1 != v2)
  {
    if (*v1 == 10)
    {
      v3 = 0;
      ++a1[3];
    }
    else
    {
      v3 = a1[4] + 1;
    }
    a1[4] = v3;
    v4 = a1[2] + 1;
    a1[1] = v1 + 1;
    a1[2] = v4;
  }
  return v1 != v2;
}

void sub_20C093DA0(char **a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  void *__p[2];
  uint64_t v21;
  char v22;
  _QWORD v23[5];

  v4 = *a1;
  v5 = (uint64_t *)sub_20C08E384(a3);
  sub_20BE93368(__p, v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - (_QWORD)v4);
  v22 = 0;
  v6 = v5[2];
  v7 = v5[3];
  if (v6 >= v7)
  {
    v9 = v5[1];
    v10 = (uint64_t)(v6 - v9) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_20BDDF694();
    v12 = v7 - v9;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v23[4] = v5 + 3;
    v14 = (char *)sub_20BED2F10((uint64_t)(v5 + 3), v13);
    v15 = &v14[32 * v10];
    v23[0] = v14;
    v23[1] = v15;
    v23[3] = &v14[32 * v16];
    v17 = *(_OWORD *)__p;
    *((_QWORD *)v15 + 2) = v21;
    *(_OWORD *)v15 = v17;
    __p[1] = 0;
    v21 = 0;
    __p[0] = 0;
    v15[24] = v22;
    v23[2] = v15 + 32;
    sub_20C090AE0(v5 + 1, v23);
    v18 = v5[2];
    sub_20BED3064((uint64_t)v23);
    v19 = SHIBYTE(v21);
    v5[2] = v18;
    if (v19 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v8 = *(_OWORD *)__p;
    *(_QWORD *)(v6 + 16) = v21;
    *(_OWORD *)v6 = v8;
    *(_BYTE *)(v6 + 24) = v22;
    v5[2] = v6 + 32;
  }
}

void sub_20C093EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_20BED3064((uint64_t)&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C093F0C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115QuotedStringEndILc34EEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115QuotedStringEndILc34EEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C093F80(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C093F94(uint64_t a1)
{
  std::string v2;

  sub_20BDDC0E4(&v2, "Missing ending '\"'");
  sub_20C088F14(a1, &v2);
}

void sub_20C093FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C093FE4(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112QuotedStringILc39EEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112QuotedStringILc39EEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C094058(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C09406C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_117QuotedStringStartILc39EEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_117QuotedStringStartILc39EEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0940E0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0940F4(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  __int128 *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  const std::locale::facet *v17;
  _QWORD *v18;
  std::locale::id *v19;
  void **v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  __int128 v32;
  void **v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *locale;
  uint64_t v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  __int128 v45;
  __int128 v46;
  int v47;
  void **v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  void *v56;
  uint64_t v57;
  _QWORD *v58;
  const std::locale::facet *v59;
  void **v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  const std::locale::facet *v71;
  void **v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  void *v80;
  uint64_t v81;
  _QWORD *v82;
  const std::locale::facet *v83;
  void **v84;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  void *v92;
  uint64_t v93;
  _QWORD *v94;
  const std::locale::facet *v95;
  void **v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  void **v104;
  uint64_t v105;
  _QWORD *v106;
  const std::locale::facet *v107;
  void **v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  void *v116;
  uint64_t v117;
  _QWORD *v118;
  const std::locale::facet *v119;
  __int128 v120;
  void **v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  void **v129;
  uint64_t v130;
  _QWORD *v131;
  const std::locale::facet *v132;
  void **v133;
  uint64_t v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  void **v142;
  uint64_t v143;
  _QWORD *v144;
  const std::locale::facet *v145;
  void **v146;
  uint64_t v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  void **v155;
  uint64_t v156;
  _QWORD *v157;
  const std::locale::facet *v158;
  _BYTE *v159;
  uint64_t v160;
  void **v161;
  uint64_t v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  void **v170;
  uint64_t v171;
  _QWORD *v172;
  const std::locale::facet *v173;
  void **v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  void **v183;
  uint64_t v184;
  _QWORD *v185;
  const std::locale::facet *v186;
  void *__p[2];
  __int128 v189;
  _OWORD *v190;
  std::locale v191;
  uint64_t v192;
  unsigned __int8 v193;
  std::locale v194;
  std::locale v195[2];
  void *v196[2];
  uint64_t v197;
  unsigned __int8 v198;

  v3 = (_OWORD *)(a1 + 8);
  v4 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)v195, a1 + 8, (__int128 *)(a1 + 48));
  if ((v198 & 0x80u) == 0)
    v5 = &v196[1];
  else
    v5 = (void **)v196[1];
  if ((v198 & 0x80u) == 0)
    v6 = v198;
  else
    v6 = v197;
  v7 = (_QWORD *)MEMORY[0x24BEDB310];
  v8 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v5, v6);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v9, (uint64_t)__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v10, (uint64_t)__p, 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v12 = sub_20BDDC1C8(v11, (uint64_t)__p, 1);
  v13 = sub_20BDDC1C8(v12, (uint64_t)"  start  ", 9);
  sub_20C095758(__p);
  if ((SBYTE7(v189) & 0x80u) == 0)
    v14 = __p;
  else
    v14 = (void **)__p[0];
  if ((SBYTE7(v189) & 0x80u) == 0)
    v15 = BYTE7(v189);
  else
    v15 = (uint64_t)__p[1];
  v16 = sub_20BDDC1C8(v13, (uint64_t)v14, v15);
  sub_20BDDC1C8(v16, (uint64_t)"; current ", 10);
  if (SBYTE7(v189) < 0)
    operator delete(__p[0]);
  if ((char)v198 < 0)
    operator delete(v196[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v7 + *(_QWORD *)(*v7 - 24)));
  v17 = std::locale::use_facet(v195, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v17->__vftable[2].~facet_0)(v17, 10);
  std::locale::~locale(v195);
  std::ostream::put();
  v18 = (_QWORD *)MEMORY[0x24BEDB310];
  std::ostream::flush();
  v19 = (std::locale::id *)MEMORY[0x24BEDB350];
  while (1)
  {
    sub_20C01AE64((uint64_t)v195, (uint64_t)v3, v4);
    if ((v198 & 0x80u) == 0)
      v20 = &v196[1];
    else
      v20 = (void **)v196[1];
    if ((v198 & 0x80u) == 0)
      v21 = v198;
    else
      v21 = v197;
    v22 = sub_20BDDC1C8(v18, (uint64_t)v20, v21);
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v22, (uint64_t)__p, 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v23, (uint64_t)__p, 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 40;
    sub_20BDDC1C8(v24, (uint64_t)__p, 1);
    v25 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 41;
    v26 = sub_20BDDC1C8(v25, (uint64_t)__p, 1);
    v27 = sub_20BDDC1C8(v26, (uint64_t)"  start  ", 9);
    sub_20C0957E0(__p);
    if ((SBYTE7(v189) & 0x80u) == 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if ((SBYTE7(v189) & 0x80u) == 0)
      v29 = BYTE7(v189);
    else
      v29 = (uint64_t)__p[1];
    v30 = sub_20BDDC1C8(v27, (uint64_t)v28, v29);
    sub_20BDDC1C8(v30, (uint64_t)"; current ", 10);
    if (SBYTE7(v189) < 0)
      operator delete(__p[0]);
    if ((char)v198 < 0)
      operator delete(v196[1]);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v31 = std::locale::use_facet(v195, v19);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
    std::locale::~locale(v195);
    std::ostream::put();
    std::ostream::flush();
    if ((sub_20C08FC90(a1, a2) & 1) == 0)
      break;
LABEL_128:
    sub_20C01AE64((uint64_t)v195, (uint64_t)v3, v4);
    if ((v198 & 0x80u) == 0)
      v96 = &v196[1];
    else
      v96 = (void **)v196[1];
    if ((v198 & 0x80u) == 0)
      v97 = v198;
    else
      v97 = v197;
    v98 = sub_20BDDC1C8(v18, (uint64_t)v96, v97);
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v98, (uint64_t)__p, 1);
    v99 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v99, (uint64_t)__p, 1);
    v100 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 40;
    sub_20BDDC1C8(v100, (uint64_t)__p, 1);
    v101 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 41;
    v102 = sub_20BDDC1C8(v101, (uint64_t)__p, 1);
    v103 = sub_20BDDC1C8(v102, (uint64_t)" success ", 9);
    sub_20C0957E0(__p);
    if ((SBYTE7(v189) & 0x80u) == 0)
      v104 = __p;
    else
      v104 = (void **)__p[0];
    if ((SBYTE7(v189) & 0x80u) == 0)
      v105 = BYTE7(v189);
    else
      v105 = (uint64_t)__p[1];
    v106 = sub_20BDDC1C8(v103, (uint64_t)v104, v105);
    sub_20BDDC1C8(v106, (uint64_t)"; next ", 7);
    if (SBYTE7(v189) < 0)
      operator delete(__p[0]);
    if ((char)v198 < 0)
      operator delete(v196[1]);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v107 = std::locale::use_facet(v195, v19);
    ((void (*)(const std::locale::facet *, uint64_t))v107->__vftable[2].~facet_0)(v107, 10);
    std::locale::~locale(v195);
    std::ostream::put();
    std::ostream::flush();
  }
  v32 = v3[1];
  *(_OWORD *)__p = *v3;
  v189 = v32;
  v190 = v3;
  sub_20C01AE64((uint64_t)v195, (uint64_t)v3, v4);
  if ((v198 & 0x80u) == 0)
    v33 = &v196[1];
  else
    v33 = (void **)v196[1];
  if ((v198 & 0x80u) == 0)
    v34 = v198;
  else
    v34 = v197;
  v35 = sub_20BDDC1C8(v18, (uint64_t)v33, v34);
  LOBYTE(v191.__locale_) = 58;
  sub_20BDDC1C8(v35, (uint64_t)&v191, 1);
  v36 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v191.__locale_) = 58;
  sub_20BDDC1C8(v36, (uint64_t)&v191, 1);
  v37 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v191.__locale_) = 40;
  sub_20BDDC1C8(v37, (uint64_t)&v191, 1);
  v38 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v191.__locale_) = 41;
  v39 = sub_20BDDC1C8(v38, (uint64_t)&v191, 1);
  v40 = sub_20BDDC1C8(v39, (uint64_t)"  start  ", 9);
  sub_20C095868(&v191);
  if ((v193 & 0x80u) == 0)
    locale = &v191;
  else
    locale = v191.__locale_;
  if ((v193 & 0x80u) == 0)
    v42 = v193;
  else
    v42 = v192;
  v43 = sub_20BDDC1C8(v40, (uint64_t)locale, v42);
  sub_20BDDC1C8(v43, (uint64_t)"; current ", 10);
  if ((char)v193 < 0)
    operator delete(v191.__locale_);
  if ((char)v198 < 0)
    operator delete(v196[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
  v44 = std::locale::use_facet(v195, v19);
  ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale(v195);
  std::ostream::put();
  std::ostream::flush();
  sub_20C0958F0(a1);
  if ((sub_20C095D48(a1) & 1) == 0)
  {
    sub_20C096900(a1);
    if (!sub_20C096D58(a1) || !sub_20C093608(a1))
    {
      v47 = 0;
      goto LABEL_62;
    }
    sub_20C096AE8(a1);
  }
  while (1)
  {
    do
    {
      sub_20C095AD8(a1);
      sub_20C0958F0(a1);
    }
    while ((sub_20C095D48(a1) & 1) != 0);
    sub_20C096900(a1);
    v45 = v3[1];
    *(_OWORD *)&v195[0].__locale_ = *v3;
    *(_OWORD *)v196 = v45;
    if (!sub_20C096D58(a1) || !sub_20C093608(a1))
      break;
    sub_20C096AE8(a1);
  }
  v46 = *(_OWORD *)v196;
  *v3 = *(_OWORD *)&v195[0].__locale_;
  v3[1] = v46;
  v47 = 1;
LABEL_62:
  sub_20C01AE64((uint64_t)v195, (uint64_t)v3, v4);
  if ((v198 & 0x80u) == 0)
    v48 = &v196[1];
  else
    v48 = (void **)v196[1];
  if ((v198 & 0x80u) == 0)
    v49 = v198;
  else
    v49 = v197;
  v50 = sub_20BDDC1C8(v18, (uint64_t)v48, v49);
  LOBYTE(v191.__locale_) = 58;
  sub_20BDDC1C8(v50, (uint64_t)&v191, 1);
  v51 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v191.__locale_) = 58;
  sub_20BDDC1C8(v51, (uint64_t)&v191, 1);
  v52 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v191.__locale_) = 40;
  sub_20BDDC1C8(v52, (uint64_t)&v191, 1);
  v53 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v191.__locale_) = 41;
  v54 = sub_20BDDC1C8(v53, (uint64_t)&v191, 1);
  v55 = sub_20BDDC1C8(v54, (uint64_t)" failure ", 9);
  sub_20C096CD0(&v191);
  if ((v193 & 0x80u) == 0)
    v56 = &v191;
  else
    v56 = v191.__locale_;
  if ((v193 & 0x80u) == 0)
    v57 = v193;
  else
    v57 = v192;
  v58 = sub_20BDDC1C8(v55, (uint64_t)v56, v57);
  std::ios_base::getloc((const std::ios_base *)((char *)v58 + *(_QWORD *)(*v58 - 24)));
  v59 = std::locale::use_facet(&v194, v19);
  ((void (*)(const std::locale::facet *, uint64_t))v59->__vftable[2].~facet_0)(v59, 10);
  std::locale::~locale(&v194);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v193 < 0)
    operator delete(v191.__locale_);
  if ((char)v198 < 0)
    operator delete(v196[1]);
  sub_20C01AE64((uint64_t)v195, (uint64_t)v3, v4);
  if ((v198 & 0x80u) == 0)
    v60 = &v196[1];
  else
    v60 = (void **)v196[1];
  if ((v198 & 0x80u) == 0)
    v61 = v198;
  else
    v61 = v197;
  v62 = sub_20BDDC1C8(v18, (uint64_t)v60, v61);
  LOBYTE(v191.__locale_) = 58;
  sub_20BDDC1C8(v62, (uint64_t)&v191, 1);
  v63 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v191.__locale_) = 58;
  sub_20BDDC1C8(v63, (uint64_t)&v191, 1);
  v64 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v191.__locale_) = 40;
  sub_20BDDC1C8(v64, (uint64_t)&v191, 1);
  v65 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v191.__locale_) = 41;
  v66 = sub_20BDDC1C8(v65, (uint64_t)&v191, 1);
  v67 = sub_20BDDC1C8(v66, (uint64_t)" failure ", 9);
  sub_20C095CC0(&v191);
  if ((v193 & 0x80u) == 0)
    v68 = &v191;
  else
    v68 = v191.__locale_;
  if ((v193 & 0x80u) == 0)
    v69 = v193;
  else
    v69 = v192;
  v70 = sub_20BDDC1C8(v67, (uint64_t)v68, v69);
  std::ios_base::getloc((const std::ios_base *)((char *)v70 + *(_QWORD *)(*v70 - 24)));
  v71 = std::locale::use_facet(&v194, v19);
  ((void (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10);
  std::locale::~locale(&v194);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v193 < 0)
    operator delete(v191.__locale_);
  if ((char)v198 < 0)
    operator delete(v196[1]);
  if (v47)
  {
    sub_20C01AE64((uint64_t)v195, (uint64_t)v3, v4);
    if ((v198 & 0x80u) == 0)
      v72 = &v196[1];
    else
      v72 = (void **)v196[1];
    if ((v198 & 0x80u) == 0)
      v73 = v198;
    else
      v73 = v197;
    v74 = sub_20BDDC1C8(v18, (uint64_t)v72, v73);
    LOBYTE(v191.__locale_) = 58;
    sub_20BDDC1C8(v74, (uint64_t)&v191, 1);
    v75 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v191.__locale_) = 58;
    sub_20BDDC1C8(v75, (uint64_t)&v191, 1);
    v76 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v191.__locale_) = 40;
    sub_20BDDC1C8(v76, (uint64_t)&v191, 1);
    v77 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v191.__locale_) = 41;
    v78 = sub_20BDDC1C8(v77, (uint64_t)&v191, 1);
    v79 = sub_20BDDC1C8(v78, (uint64_t)"  apply  ", 9);
    sub_20C095868(&v191);
    if ((v193 & 0x80u) == 0)
      v80 = &v191;
    else
      v80 = v191.__locale_;
    if ((v193 & 0x80u) == 0)
      v81 = v193;
    else
      v81 = v192;
    v82 = sub_20BDDC1C8(v79, (uint64_t)v80, v81);
    std::ios_base::getloc((const std::ios_base *)((char *)v82 + *(_QWORD *)(*v82 - 24)));
    v83 = std::locale::use_facet(&v194, v19);
    ((void (*)(const std::locale::facet *, uint64_t))v83->__vftable[2].~facet_0)(v83, 10);
    std::locale::~locale(&v194);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v193 < 0)
      operator delete(v191.__locale_);
    if ((char)v198 < 0)
      operator delete(v196[1]);
    sub_20C097DBC((char **)__p, a1, a2);
    sub_20C01AE64((uint64_t)v195, (uint64_t)v3, v4);
    if ((v198 & 0x80u) == 0)
      v84 = &v196[1];
    else
      v84 = (void **)v196[1];
    if ((v198 & 0x80u) == 0)
      v85 = v198;
    else
      v85 = v197;
    v86 = sub_20BDDC1C8(v18, (uint64_t)v84, v85);
    LOBYTE(v191.__locale_) = 58;
    sub_20BDDC1C8(v86, (uint64_t)&v191, 1);
    v87 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v191.__locale_) = 58;
    sub_20BDDC1C8(v87, (uint64_t)&v191, 1);
    v88 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v191.__locale_) = 40;
    sub_20BDDC1C8(v88, (uint64_t)&v191, 1);
    v89 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v191.__locale_) = 41;
    v90 = sub_20BDDC1C8(v89, (uint64_t)&v191, 1);
    v91 = sub_20BDDC1C8(v90, (uint64_t)" success ", 9);
    sub_20C095868(&v191);
    if ((v193 & 0x80u) == 0)
      v92 = &v191;
    else
      v92 = v191.__locale_;
    if ((v193 & 0x80u) == 0)
      v93 = v193;
    else
      v93 = v192;
    v94 = sub_20BDDC1C8(v91, (uint64_t)v92, v93);
    sub_20BDDC1C8(v94, (uint64_t)"; next ", 7);
    if ((char)v193 < 0)
      operator delete(v191.__locale_);
    if ((char)v198 < 0)
      operator delete(v196[1]);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
    v95 = std::locale::use_facet(v195, v19);
    ((void (*)(const std::locale::facet *, uint64_t))v95->__vftable[2].~facet_0)(v95, 10);
    std::locale::~locale(v195);
    std::ostream::put();
    std::ostream::flush();
    goto LABEL_128;
  }
  sub_20C01AE64((uint64_t)v195, (uint64_t)v3, v4);
  if ((v198 & 0x80u) == 0)
    v108 = &v196[1];
  else
    v108 = (void **)v196[1];
  if ((v198 & 0x80u) == 0)
    v109 = v198;
  else
    v109 = v197;
  v110 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v108, v109);
  LOBYTE(v191.__locale_) = 58;
  sub_20BDDC1C8(v110, (uint64_t)&v191, 1);
  v111 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v191.__locale_) = 58;
  sub_20BDDC1C8(v111, (uint64_t)&v191, 1);
  v112 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v191.__locale_) = 40;
  sub_20BDDC1C8(v112, (uint64_t)&v191, 1);
  v113 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v191.__locale_) = 41;
  v114 = sub_20BDDC1C8(v113, (uint64_t)&v191, 1);
  v115 = sub_20BDDC1C8(v114, (uint64_t)" failure ", 9);
  sub_20C095868(&v191);
  if ((v193 & 0x80u) == 0)
    v116 = &v191;
  else
    v116 = v191.__locale_;
  if ((v193 & 0x80u) == 0)
    v117 = v193;
  else
    v117 = v192;
  v118 = sub_20BDDC1C8(v115, (uint64_t)v116, v117);
  std::ios_base::getloc((const std::ios_base *)((char *)v118 + *(_QWORD *)(*v118 - 24)));
  v119 = std::locale::use_facet(&v194, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v119->__vftable[2].~facet_0)(v119, 10);
  std::locale::~locale(&v194);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v193 < 0)
    operator delete(v191.__locale_);
  if ((char)v198 < 0)
    operator delete(v196[1]);
  v120 = v189;
  *v3 = *(_OWORD *)__p;
  v3[1] = v120;
  sub_20C01AE64((uint64_t)v195, (uint64_t)v3, v4);
  if ((v198 & 0x80u) == 0)
    v121 = &v196[1];
  else
    v121 = (void **)v196[1];
  if ((v198 & 0x80u) == 0)
    v122 = v198;
  else
    v122 = v197;
  v123 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v121, v122);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v123, (uint64_t)__p, 1);
  v124 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v124, (uint64_t)__p, 1);
  v125 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v125, (uint64_t)__p, 1);
  v126 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v127 = sub_20BDDC1C8(v126, (uint64_t)__p, 1);
  v128 = sub_20BDDC1C8(v127, (uint64_t)" failure ", 9);
  sub_20C0957E0(__p);
  if ((SBYTE7(v189) & 0x80u) == 0)
    v129 = __p;
  else
    v129 = (void **)__p[0];
  if ((SBYTE7(v189) & 0x80u) == 0)
    v130 = BYTE7(v189);
  else
    v130 = (uint64_t)__p[1];
  v131 = sub_20BDDC1C8(v128, (uint64_t)v129, v130);
  std::ios_base::getloc((const std::ios_base *)((char *)v131 + *(_QWORD *)(*v131 - 24)));
  v132 = std::locale::use_facet(&v191, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v132->__vftable[2].~facet_0)(v132, 10);
  std::locale::~locale(&v191);
  std::ostream::put();
  std::ostream::flush();
  if (SBYTE7(v189) < 0)
    operator delete(__p[0]);
  if ((char)v198 < 0)
    operator delete(v196[1]);
  sub_20C01AE64((uint64_t)v195, (uint64_t)v3, v4);
  if ((v198 & 0x80u) == 0)
    v133 = &v196[1];
  else
    v133 = (void **)v196[1];
  if ((v198 & 0x80u) == 0)
    v134 = v198;
  else
    v134 = v197;
  v135 = (_QWORD *)MEMORY[0x24BEDB310];
  v136 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v133, v134);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v136, (uint64_t)__p, 1);
  v137 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v137, (uint64_t)__p, 1);
  v138 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v138, (uint64_t)__p, 1);
  v139 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v140 = sub_20BDDC1C8(v139, (uint64_t)__p, 1);
  v141 = sub_20BDDC1C8(v140, (uint64_t)" success ", 9);
  sub_20C095758(__p);
  if ((SBYTE7(v189) & 0x80u) == 0)
    v142 = __p;
  else
    v142 = (void **)__p[0];
  if ((SBYTE7(v189) & 0x80u) == 0)
    v143 = BYTE7(v189);
  else
    v143 = (uint64_t)__p[1];
  v144 = sub_20BDDC1C8(v141, (uint64_t)v142, v143);
  sub_20BDDC1C8(v144, (uint64_t)"; next ", 7);
  if (SBYTE7(v189) < 0)
    operator delete(__p[0]);
  if ((char)v198 < 0)
    operator delete(v196[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v135 + *(_QWORD *)(*v135 - 24)));
  v145 = std::locale::use_facet(v195, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v145->__vftable[2].~facet_0)(v145, 10);
  std::locale::~locale(v195);
  std::ostream::put();
  std::ostream::flush();
  sub_20C01AE64((uint64_t)v195, (uint64_t)v3, v4);
  if ((v198 & 0x80u) == 0)
    v146 = &v196[1];
  else
    v146 = (void **)v196[1];
  if ((v198 & 0x80u) == 0)
    v147 = v198;
  else
    v147 = v197;
  v148 = (_QWORD *)MEMORY[0x24BEDB310];
  v149 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v146, v147);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v149, (uint64_t)__p, 1);
  v150 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v150, (uint64_t)__p, 1);
  v151 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v151, (uint64_t)__p, 1);
  v152 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v153 = sub_20BDDC1C8(v152, (uint64_t)__p, 1);
  v154 = sub_20BDDC1C8(v153, (uint64_t)"  start  ", 9);
  sub_20C097F28(__p);
  if ((SBYTE7(v189) & 0x80u) == 0)
    v155 = __p;
  else
    v155 = (void **)__p[0];
  if ((SBYTE7(v189) & 0x80u) == 0)
    v156 = BYTE7(v189);
  else
    v156 = (uint64_t)__p[1];
  v157 = sub_20BDDC1C8(v154, (uint64_t)v155, v156);
  sub_20BDDC1C8(v157, (uint64_t)"; current ", 10);
  if (SBYTE7(v189) < 0)
    operator delete(__p[0]);
  if ((char)v198 < 0)
    operator delete(v196[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v148 + *(_QWORD *)(*v148 - 24)));
  v158 = std::locale::use_facet(v195, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v158->__vftable[2].~facet_0)(v158, 10);
  std::locale::~locale(v195);
  std::ostream::put();
  std::ostream::flush();
  v159 = *(_BYTE **)(a1 + 8);
  if (*(_BYTE **)(a1 + 40) == v159 || *v159 != 39)
  {
    sub_20C01AE64((uint64_t)v195, (uint64_t)v3, v4);
    if ((v198 & 0x80u) == 0)
      v175 = &v196[1];
    else
      v175 = (void **)v196[1];
    if ((v198 & 0x80u) == 0)
      v176 = v198;
    else
      v176 = v197;
    v177 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v175, v176);
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v177, (uint64_t)__p, 1);
    v178 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v178, (uint64_t)__p, 1);
    v179 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 40;
    sub_20BDDC1C8(v179, (uint64_t)__p, 1);
    v180 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 41;
    v181 = sub_20BDDC1C8(v180, (uint64_t)__p, 1);
    v182 = sub_20BDDC1C8(v181, (uint64_t)" failure ", 9);
    sub_20C097F28(__p);
    if ((SBYTE7(v189) & 0x80u) == 0)
      v183 = __p;
    else
      v183 = (void **)__p[0];
    if ((SBYTE7(v189) & 0x80u) == 0)
      v184 = BYTE7(v189);
    else
      v184 = (uint64_t)__p[1];
    v185 = sub_20BDDC1C8(v182, (uint64_t)v183, v184);
    std::ios_base::getloc((const std::ios_base *)((char *)v185 + *(_QWORD *)(*v185 - 24)));
    v186 = std::locale::use_facet(&v191, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v186->__vftable[2].~facet_0)(v186, 10);
    std::locale::~locale(&v191);
    std::ostream::put();
    std::ostream::flush();
    if (SBYTE7(v189) < 0)
      operator delete(__p[0]);
    if ((char)v198 < 0)
      operator delete(v196[1]);
    sub_20C097FB0(a1);
  }
  v160 = *(_QWORD *)(a1 + 16) + 1;
  *(_QWORD *)(a1 + 8) = v159 + 1;
  *(_QWORD *)(a1 + 16) = v160;
  ++*(_QWORD *)(a1 + 32);
  sub_20C01AE64((uint64_t)v195, (uint64_t)v3, v4);
  if ((v198 & 0x80u) == 0)
    v161 = &v196[1];
  else
    v161 = (void **)v196[1];
  if ((v198 & 0x80u) == 0)
    v162 = v198;
  else
    v162 = v197;
  v163 = (_QWORD *)MEMORY[0x24BEDB310];
  v164 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v161, v162);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v164, (uint64_t)__p, 1);
  v165 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v165, (uint64_t)__p, 1);
  v166 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v166, (uint64_t)__p, 1);
  v167 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v168 = sub_20BDDC1C8(v167, (uint64_t)__p, 1);
  v169 = sub_20BDDC1C8(v168, (uint64_t)" success ", 9);
  sub_20C097F28(__p);
  if ((SBYTE7(v189) & 0x80u) == 0)
    v170 = __p;
  else
    v170 = (void **)__p[0];
  if ((SBYTE7(v189) & 0x80u) == 0)
    v171 = BYTE7(v189);
  else
    v171 = (uint64_t)__p[1];
  v172 = sub_20BDDC1C8(v169, (uint64_t)v170, v171);
  sub_20BDDC1C8(v172, (uint64_t)"; next ", 7);
  if (SBYTE7(v189) < 0)
    operator delete(__p[0]);
  if ((char)v198 < 0)
    operator delete(v196[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v163 + *(_QWORD *)(*v163 - 24)));
  v173 = std::locale::use_facet(v195, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v173->__vftable[2].~facet_0)(v173, 10);
  std::locale::~locale(v195);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C0955B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 a11, __int128 a12, __int128 __p, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,std::locale a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,std::locale a27,std::locale a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  _OWORD *v36;

  std::locale::~locale(&a21);
  if (a17 < 0)
    operator delete((void *)__p);
  if (a36 < 0)
    operator delete(a31);
  *v36 = a11;
  v36[1] = a12;
  _Unwind_Resume(a1);
}

void sub_20C095758(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_116QuotedStringBodyILc39EEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_116QuotedStringBodyILc39EEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0957CC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C0957E0(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_120QuotedStringVariableENS3_17QuotedStringCharsILc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_120QuotedStringVariableENS3_17QuotedStringCharsILc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C095854(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C095868(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_117QuotedStringCharsILc39EEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_117QuotedStringCharsILc39EEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0958DC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0958F0(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)"  start  ", 9);
  sub_20C095CC0(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; current ", 10);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C095A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C095AD8(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)" success ", 9);
  sub_20C095CC0(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; next ", 7);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C095C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C095CC0(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJNS0_3seqIJNS0_5ascii3oneIJLc92EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123QuotedStringEscapedCharILc39EEEEEENS2_IJNS0_6not_atIJNS1_IJNS7_13VariableStartENS4_IJLc39EEEEEEEEEENS3_3anyEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJNS0_3seqIJNS0_5ascii3oneIJLc92EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123QuotedStringEscapedCharILc39EEEEEENS2_IJNS0_6not_atIJNS1_IJNS7_13VariableStartENS4_IJLc39EEEEEEEEEENS3_3anyEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C095D34(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C095D48(uint64_t a1)
{
  _OWORD *v2;
  __int128 *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *locale;
  uint64_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  void **v53;
  uint64_t v54;
  _QWORD *v55;
  const std::locale::facet *v56;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  uint64_t v67;
  _QWORD *v68;
  const std::locale::facet *v69;
  __int128 v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  void **v79;
  uint64_t v80;
  _QWORD *v81;
  const std::locale::facet *v82;
  void *__p[2];
  __int128 v84;
  std::locale v85;
  uint64_t v86;
  unsigned __int8 v87;
  std::locale v88;
  std::locale v89;
  void *v90;
  uint64_t v91;
  unsigned __int8 v92;

  v2 = (_OWORD *)(a1 + 8);
  v3 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)&v89, a1 + 8, (__int128 *)(a1 + 48));
  if ((v92 & 0x80u) == 0)
    v4 = &v90;
  else
    v4 = v90;
  if ((v92 & 0x80u) == 0)
    v5 = v92;
  else
    v5 = v91;
  v6 = (_QWORD *)MEMORY[0x24BEDB310];
  v7 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v4, v5);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v9, (uint64_t)__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v11 = sub_20BDDC1C8(v10, (uint64_t)__p, 1);
  v12 = sub_20BDDC1C8(v11, (uint64_t)"  start  ", 9);
  sub_20C096754(__p);
  if ((SBYTE7(v84) & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((SBYTE7(v84) & 0x80u) == 0)
    v14 = BYTE7(v84);
  else
    v14 = (uint64_t)__p[1];
  v15 = sub_20BDDC1C8(v12, (uint64_t)v13, v14);
  sub_20BDDC1C8(v15, (uint64_t)"; current ", 10);
  if (SBYTE7(v84) < 0)
    operator delete(__p[0]);
  if ((char)v92 < 0)
    operator delete(v90);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v16 = std::locale::use_facet(&v89, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v89);
  std::ostream::put();
  std::ostream::flush();
  v17 = v2[1];
  *(_OWORD *)__p = *v2;
  v84 = v17;
  if (sub_20C091BF8(a1))
  {
    sub_20C01AE64((uint64_t)&v89, (uint64_t)v2, v3);
    if ((v92 & 0x80u) == 0)
      v18 = &v90;
    else
      v18 = v90;
    if ((v92 & 0x80u) == 0)
      v19 = v92;
    else
      v19 = v91;
    v20 = (_QWORD *)MEMORY[0x24BEDB310];
    v21 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v18, v19);
    LOBYTE(v85.__locale_) = 58;
    sub_20BDDC1C8(v21, (uint64_t)&v85, 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v85.__locale_) = 58;
    sub_20BDDC1C8(v22, (uint64_t)&v85, 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v85.__locale_) = 40;
    sub_20BDDC1C8(v23, (uint64_t)&v85, 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v85.__locale_) = 41;
    v25 = sub_20BDDC1C8(v24, (uint64_t)&v85, 1);
    v26 = sub_20BDDC1C8(v25, (uint64_t)"  start  ", 9);
    sub_20C0967DC(&v85);
    if ((v87 & 0x80u) == 0)
      locale = &v85;
    else
      locale = v85.__locale_;
    if ((v87 & 0x80u) == 0)
      v28 = v87;
    else
      v28 = v86;
    v29 = sub_20BDDC1C8(v26, (uint64_t)locale, v28);
    sub_20BDDC1C8(v29, (uint64_t)"; current ", 10);
    if ((char)v87 < 0)
      operator delete(v85.__locale_);
    if ((char)v92 < 0)
      operator delete(v90);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
    v30 = std::locale::use_facet(&v89, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
    std::locale::~locale(&v89);
    std::ostream::put();
    std::ostream::flush();
    if (sub_20C096864((_QWORD *)a1))
    {
      sub_20C01AE64((uint64_t)&v89, (uint64_t)v2, v3);
      if ((v92 & 0x80u) == 0)
        v31 = &v90;
      else
        v31 = v90;
      if ((v92 & 0x80u) == 0)
        v32 = v92;
      else
        v32 = v91;
      v33 = (_QWORD *)MEMORY[0x24BEDB310];
      v34 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v31, v32);
      LOBYTE(v85.__locale_) = 58;
      sub_20BDDC1C8(v34, (uint64_t)&v85, 1);
      v35 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(v85.__locale_) = 58;
      sub_20BDDC1C8(v35, (uint64_t)&v85, 1);
      v36 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(v85.__locale_) = 40;
      sub_20BDDC1C8(v36, (uint64_t)&v85, 1);
      v37 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(v85.__locale_) = 41;
      v38 = sub_20BDDC1C8(v37, (uint64_t)&v85, 1);
      v39 = sub_20BDDC1C8(v38, (uint64_t)" success ", 9);
      sub_20C0967DC(&v85);
      if ((v87 & 0x80u) == 0)
        v40 = &v85;
      else
        v40 = v85.__locale_;
      if ((v87 & 0x80u) == 0)
        v41 = v87;
      else
        v41 = v86;
      v42 = sub_20BDDC1C8(v39, (uint64_t)v40, v41);
      sub_20BDDC1C8(v42, (uint64_t)"; next ", 7);
      if ((char)v87 < 0)
        operator delete(v85.__locale_);
      if ((char)v92 < 0)
        operator delete(v90);
      sub_20C088CD8(a1);
      std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
      v43 = std::locale::use_facet(&v89, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
      std::locale::~locale(&v89);
      std::ostream::put();
      std::ostream::flush();
      sub_20C01AE64((uint64_t)&v89, (uint64_t)v2, v3);
      if ((v92 & 0x80u) == 0)
        v44 = &v90;
      else
        v44 = v90;
      if ((v92 & 0x80u) == 0)
        v45 = v92;
      else
        v45 = v91;
      v46 = (_QWORD *)MEMORY[0x24BEDB310];
      v47 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v44, v45);
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v47, (uint64_t)__p, 1);
      v48 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v48, (uint64_t)__p, 1);
      v49 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 40;
      sub_20BDDC1C8(v49, (uint64_t)__p, 1);
      v50 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 41;
      v51 = sub_20BDDC1C8(v50, (uint64_t)__p, 1);
      v52 = sub_20BDDC1C8(v51, (uint64_t)" success ", 9);
      sub_20C096754(__p);
      if ((SBYTE7(v84) & 0x80u) == 0)
        v53 = __p;
      else
        v53 = (void **)__p[0];
      if ((SBYTE7(v84) & 0x80u) == 0)
        v54 = BYTE7(v84);
      else
        v54 = (uint64_t)__p[1];
      v55 = sub_20BDDC1C8(v52, (uint64_t)v53, v54);
      sub_20BDDC1C8(v55, (uint64_t)"; next ", 7);
      if (SBYTE7(v84) < 0)
        operator delete(__p[0]);
      if ((char)v92 < 0)
        operator delete(v90);
      sub_20C088CD8(a1);
      std::ios_base::getloc((const std::ios_base *)((char *)v46 + *(_QWORD *)(*v46 - 24)));
      v56 = std::locale::use_facet(&v89, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v56->__vftable[2].~facet_0)(v56, 10);
      std::locale::~locale(&v89);
      std::ostream::put();
      std::ostream::flush();
      return 1;
    }
    sub_20C01AE64((uint64_t)&v89, (uint64_t)v2, v3);
    if ((v92 & 0x80u) == 0)
      v58 = &v90;
    else
      v58 = v90;
    if ((v92 & 0x80u) == 0)
      v59 = v92;
    else
      v59 = v91;
    v60 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v58, v59);
    LOBYTE(v85.__locale_) = 58;
    sub_20BDDC1C8(v60, (uint64_t)&v85, 1);
    v61 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v85.__locale_) = 58;
    sub_20BDDC1C8(v61, (uint64_t)&v85, 1);
    v62 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v85.__locale_) = 40;
    sub_20BDDC1C8(v62, (uint64_t)&v85, 1);
    v63 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v85.__locale_) = 41;
    v64 = sub_20BDDC1C8(v63, (uint64_t)&v85, 1);
    v65 = sub_20BDDC1C8(v64, (uint64_t)" failure ", 9);
    sub_20C0967DC(&v85);
    if ((v87 & 0x80u) == 0)
      v66 = &v85;
    else
      v66 = v85.__locale_;
    if ((v87 & 0x80u) == 0)
      v67 = v87;
    else
      v67 = v86;
    v68 = sub_20BDDC1C8(v65, (uint64_t)v66, v67);
    std::ios_base::getloc((const std::ios_base *)((char *)v68 + *(_QWORD *)(*v68 - 24)));
    v69 = std::locale::use_facet(&v88, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v69->__vftable[2].~facet_0)(v69, 10);
    std::locale::~locale(&v88);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v87 < 0)
      operator delete(v85.__locale_);
    if ((char)v92 < 0)
      operator delete(v90);
  }
  v70 = v84;
  *v2 = *(_OWORD *)__p;
  v2[1] = v70;
  sub_20C01AE64((uint64_t)&v89, (uint64_t)v2, v3);
  if ((v92 & 0x80u) == 0)
    v71 = &v90;
  else
    v71 = v90;
  if ((v92 & 0x80u) == 0)
    v72 = v92;
  else
    v72 = v91;
  v73 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v71, v72);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v73, (uint64_t)__p, 1);
  v74 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v74, (uint64_t)__p, 1);
  v75 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v75, (uint64_t)__p, 1);
  v76 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v77 = sub_20BDDC1C8(v76, (uint64_t)__p, 1);
  v78 = sub_20BDDC1C8(v77, (uint64_t)" failure ", 9);
  sub_20C096754(__p);
  if ((SBYTE7(v84) & 0x80u) == 0)
    v79 = __p;
  else
    v79 = (void **)__p[0];
  if ((SBYTE7(v84) & 0x80u) == 0)
    v80 = BYTE7(v84);
  else
    v80 = (uint64_t)__p[1];
  v81 = sub_20BDDC1C8(v78, (uint64_t)v79, v80);
  std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(_QWORD *)(*v81 - 24)));
  v82 = std::locale::use_facet(&v85, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
  std::locale::~locale(&v85);
  std::ostream::put();
  std::ostream::flush();
  if (SBYTE7(v84) < 0)
    operator delete(__p[0]);
  if ((char)v92 < 0)
    operator delete(v90);
  return 0;
}

void sub_20C096660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17, std::locale a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _OWORD *v26;

  if (a26 < 0)
    operator delete(__p);
  *v26 = a9;
  v26[1] = a10;
  _Unwind_Resume(exception_object);
}

void sub_20C096754(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJNS0_5ascii3oneIJLc92EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123QuotedStringEscapedCharILc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJNS0_5ascii3oneIJLc92EEEEN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123QuotedStringEscapedCharILc39EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0967C8(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C0967DC(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123QuotedStringEscapedCharILc39EEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123QuotedStringEscapedCharILc39EEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C096850(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C096864(_QWORD *a1)
{
  char *v1;
  int v3;
  uint64_t *v4;
  char *v5;
  uint64_t v7;
  int __s;
  uint64_t v9;

  v1 = (char *)a1[1];
  if (v1 == (char *)a1[5])
    return 0;
  v3 = *v1;
  __s = 660350048;
  v4 = (uint64_t *)memchr(&__s, v3, 4uLL);
  v5 = (char *)(v4 ? v4 : &v9);
  if (v5 - (char *)&__s == 4)
    return 0;
  v7 = a1[2] + 1;
  a1[1] = v1 + 1;
  a1[2] = v7;
  ++a1[4];
  return 1;
}

uint64_t sub_20C096900(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)"  start  ", 9);
  sub_20C096CD0(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; current ", 10);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C096AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C096AE8(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)" success ", 9);
  sub_20C096CD0(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; next ", 7);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C096C88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C096CD0(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJNS0_6not_atIJNS0_3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113VariableStartENS0_5ascii3oneIJLc39EEEEEEEEEENS7_3anyEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJNS0_6not_atIJNS0_3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113VariableStartENS0_5ascii3oneIJLc39EEEEEEEEEENS7_3anyEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C096D44(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C096D58(uint64_t a1)
{
  _OWORD *v2;
  __int128 *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  __int128 v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void *locale;
  uint64_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  const std::locale::facet *v43;
  _BYTE *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  _QWORD *v57;
  const std::locale::facet *v58;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  void *v68;
  uint64_t v69;
  _QWORD *v70;
  const std::locale::facet *v71;
  __int128 v72;
  void *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  void **v81;
  uint64_t v82;
  _QWORD *v83;
  const std::locale::facet *v84;
  void *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  void *v94;
  uint64_t v95;
  _QWORD *v96;
  const std::locale::facet *v97;
  void *v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  void *v106;
  uint64_t v107;
  _QWORD *v108;
  const std::locale::facet *v109;
  __int128 v110;
  void *v111;
  uint64_t v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  void **v120;
  uint64_t v121;
  _QWORD *v122;
  const std::locale::facet *v123;
  void *__p[2];
  __int128 v125;
  std::locale v126;
  uint64_t v127;
  unsigned __int8 v128;
  std::locale v129;
  std::locale v130;
  void *v131;
  uint64_t v132;
  unsigned __int8 v133;

  v2 = (_OWORD *)(a1 + 8);
  v3 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)&v130, a1 + 8, (__int128 *)(a1 + 48));
  if ((v133 & 0x80u) == 0)
    v4 = &v131;
  else
    v4 = v131;
  if ((v133 & 0x80u) == 0)
    v5 = v133;
  else
    v5 = v132;
  v6 = (_QWORD *)MEMORY[0x24BEDB310];
  v7 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v4, v5);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v9, (uint64_t)__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v11 = sub_20BDDC1C8(v10, (uint64_t)__p, 1);
  v12 = sub_20BDDC1C8(v11, (uint64_t)"  start  ", 9);
  sub_20C097C1C(__p);
  if ((SBYTE7(v125) & 0x80u) == 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  if ((SBYTE7(v125) & 0x80u) == 0)
    v14 = BYTE7(v125);
  else
    v14 = (uint64_t)__p[1];
  v15 = sub_20BDDC1C8(v12, (uint64_t)v13, v14);
  sub_20BDDC1C8(v15, (uint64_t)"; current ", 10);
  if (SBYTE7(v125) < 0)
    operator delete(__p[0]);
  if ((char)v133 < 0)
    operator delete(v131);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v16 = std::locale::use_facet(&v130, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v130);
  std::ostream::put();
  std::ostream::flush();
  v17 = v2[1];
  *(_OWORD *)__p = *v2;
  v125 = v17;
  sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
  if ((v133 & 0x80u) == 0)
    v18 = &v131;
  else
    v18 = v131;
  if ((v133 & 0x80u) == 0)
    v19 = v133;
  else
    v19 = v132;
  v20 = (_QWORD *)MEMORY[0x24BEDB310];
  v21 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v18, v19);
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v21, (uint64_t)&v126, 1);
  v22 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v22, (uint64_t)&v126, 1);
  v23 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 40;
  sub_20BDDC1C8(v23, (uint64_t)&v126, 1);
  v24 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 41;
  v25 = sub_20BDDC1C8(v24, (uint64_t)&v126, 1);
  v26 = sub_20BDDC1C8(v25, (uint64_t)"  start  ", 9);
  sub_20C097CA4(&v126);
  if ((v128 & 0x80u) == 0)
    locale = &v126;
  else
    locale = v126.__locale_;
  if ((v128 & 0x80u) == 0)
    v28 = v128;
  else
    v28 = v127;
  v29 = sub_20BDDC1C8(v26, (uint64_t)locale, v28);
  sub_20BDDC1C8(v29, (uint64_t)"; current ", 10);
  if ((char)v128 < 0)
    operator delete(v126.__locale_);
  if ((char)v133 < 0)
    operator delete(v131);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v20 + *(_QWORD *)(*v20 - 24)));
  v30 = std::locale::use_facet(&v130, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale(&v130);
  std::ostream::put();
  std::ostream::flush();
  if ((sub_20C08D118((_QWORD *)a1) & 1) != 0)
    goto LABEL_69;
  sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
  if ((v133 & 0x80u) == 0)
    v31 = &v131;
  else
    v31 = v131;
  if ((v133 & 0x80u) == 0)
    v32 = v133;
  else
    v32 = v132;
  v33 = (_QWORD *)MEMORY[0x24BEDB310];
  v34 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v31, v32);
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v34, (uint64_t)&v126, 1);
  v35 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v35, (uint64_t)&v126, 1);
  v36 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 40;
  sub_20BDDC1C8(v36, (uint64_t)&v126, 1);
  v37 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 41;
  v38 = sub_20BDDC1C8(v37, (uint64_t)&v126, 1);
  v39 = sub_20BDDC1C8(v38, (uint64_t)"  start  ", 9);
  sub_20C097D2C(&v126);
  if ((v128 & 0x80u) == 0)
    v40 = &v126;
  else
    v40 = v126.__locale_;
  if ((v128 & 0x80u) == 0)
    v41 = v128;
  else
    v41 = v127;
  v42 = sub_20BDDC1C8(v39, (uint64_t)v40, v41);
  sub_20BDDC1C8(v42, (uint64_t)"; current ", 10);
  if ((char)v128 < 0)
    operator delete(v126.__locale_);
  if ((char)v133 < 0)
    operator delete(v131);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
  v43 = std::locale::use_facet(&v130, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v43->__vftable[2].~facet_0)(v43, 10);
  std::locale::~locale(&v130);
  std::ostream::put();
  std::ostream::flush();
  v44 = *(_BYTE **)(a1 + 8);
  if (v44 != *(_BYTE **)(a1 + 40) && *v44 == 39)
  {
    v45 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 8) = v44 + 1;
    *(_QWORD *)(a1 + 16) = v45;
    ++*(_QWORD *)(a1 + 32);
    sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
    if ((v133 & 0x80u) == 0)
      v46 = &v131;
    else
      v46 = v131;
    if ((v133 & 0x80u) == 0)
      v47 = v133;
    else
      v47 = v132;
    v48 = (_QWORD *)MEMORY[0x24BEDB310];
    v49 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v46, v47);
    LOBYTE(v126.__locale_) = 58;
    sub_20BDDC1C8(v49, (uint64_t)&v126, 1);
    v50 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v126.__locale_) = 58;
    sub_20BDDC1C8(v50, (uint64_t)&v126, 1);
    v51 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v126.__locale_) = 40;
    sub_20BDDC1C8(v51, (uint64_t)&v126, 1);
    v52 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v126.__locale_) = 41;
    v53 = sub_20BDDC1C8(v52, (uint64_t)&v126, 1);
    v54 = sub_20BDDC1C8(v53, (uint64_t)" success ", 9);
    sub_20C097D2C(&v126);
    if ((v128 & 0x80u) == 0)
      v55 = &v126;
    else
      v55 = v126.__locale_;
    if ((v128 & 0x80u) == 0)
      v56 = v128;
    else
      v56 = v127;
    v57 = sub_20BDDC1C8(v54, (uint64_t)v55, v56);
    sub_20BDDC1C8(v57, (uint64_t)"; next ", 7);
    if ((char)v128 < 0)
      operator delete(v126.__locale_);
    if ((char)v133 < 0)
      operator delete(v131);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v48 + *(_QWORD *)(*v48 - 24)));
    v58 = std::locale::use_facet(&v130, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v58->__vftable[2].~facet_0)(v58, 10);
    std::locale::~locale(&v130);
    std::ostream::put();
    std::ostream::flush();
LABEL_69:
    sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
    if ((v133 & 0x80u) == 0)
      v59 = &v131;
    else
      v59 = v131;
    if ((v133 & 0x80u) == 0)
      v60 = v133;
    else
      v60 = v132;
    v61 = (_QWORD *)MEMORY[0x24BEDB310];
    v62 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v59, v60);
    LOBYTE(v126.__locale_) = 58;
    sub_20BDDC1C8(v62, (uint64_t)&v126, 1);
    v63 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v126.__locale_) = 58;
    sub_20BDDC1C8(v63, (uint64_t)&v126, 1);
    v64 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v126.__locale_) = 40;
    sub_20BDDC1C8(v64, (uint64_t)&v126, 1);
    v65 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(v126.__locale_) = 41;
    v66 = sub_20BDDC1C8(v65, (uint64_t)&v126, 1);
    v67 = sub_20BDDC1C8(v66, (uint64_t)" success ", 9);
    sub_20C097CA4(&v126);
    if ((v128 & 0x80u) == 0)
      v68 = &v126;
    else
      v68 = v126.__locale_;
    if ((v128 & 0x80u) == 0)
      v69 = v128;
    else
      v69 = v127;
    v70 = sub_20BDDC1C8(v67, (uint64_t)v68, v69);
    sub_20BDDC1C8(v70, (uint64_t)"; next ", 7);
    if ((char)v128 < 0)
      operator delete(v126.__locale_);
    if ((char)v133 < 0)
      operator delete(v131);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(*v61 - 24)));
    v71 = std::locale::use_facet(&v130, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v71->__vftable[2].~facet_0)(v71, 10);
    std::locale::~locale(&v130);
    std::ostream::put();
    std::ostream::flush();
    v72 = v125;
    *v2 = *(_OWORD *)__p;
    v2[1] = v72;
    sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
    if ((v133 & 0x80u) == 0)
      v73 = &v131;
    else
      v73 = v131;
    if ((v133 & 0x80u) == 0)
      v74 = v133;
    else
      v74 = v132;
    v75 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v73, v74);
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v75, (uint64_t)__p, 1);
    v76 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v76, (uint64_t)__p, 1);
    v77 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 40;
    sub_20BDDC1C8(v77, (uint64_t)__p, 1);
    v78 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 41;
    v79 = sub_20BDDC1C8(v78, (uint64_t)__p, 1);
    v80 = sub_20BDDC1C8(v79, (uint64_t)" failure ", 9);
    sub_20C097C1C(__p);
    if ((SBYTE7(v125) & 0x80u) == 0)
      v81 = __p;
    else
      v81 = (void **)__p[0];
    if ((SBYTE7(v125) & 0x80u) == 0)
      v82 = BYTE7(v125);
    else
      v82 = (uint64_t)__p[1];
    v83 = sub_20BDDC1C8(v80, (uint64_t)v81, v82);
    std::ios_base::getloc((const std::ios_base *)((char *)v83 + *(_QWORD *)(*v83 - 24)));
    v84 = std::locale::use_facet(&v126, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v84->__vftable[2].~facet_0)(v84, 10);
    std::locale::~locale(&v126);
    std::ostream::put();
    std::ostream::flush();
    if (SBYTE7(v125) < 0)
      operator delete(__p[0]);
    if ((char)v133 < 0)
      operator delete(v131);
    return 0;
  }
  sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
  if ((v133 & 0x80u) == 0)
    v86 = &v131;
  else
    v86 = v131;
  if ((v133 & 0x80u) == 0)
    v87 = v133;
  else
    v87 = v132;
  v88 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v86, v87);
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v88, (uint64_t)&v126, 1);
  v89 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v89, (uint64_t)&v126, 1);
  v90 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 40;
  sub_20BDDC1C8(v90, (uint64_t)&v126, 1);
  v91 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 41;
  v92 = sub_20BDDC1C8(v91, (uint64_t)&v126, 1);
  v93 = sub_20BDDC1C8(v92, (uint64_t)" failure ", 9);
  sub_20C097D2C(&v126);
  if ((v128 & 0x80u) == 0)
    v94 = &v126;
  else
    v94 = v126.__locale_;
  if ((v128 & 0x80u) == 0)
    v95 = v128;
  else
    v95 = v127;
  v96 = sub_20BDDC1C8(v93, (uint64_t)v94, v95);
  std::ios_base::getloc((const std::ios_base *)((char *)v96 + *(_QWORD *)(*v96 - 24)));
  v97 = std::locale::use_facet(&v129, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v97->__vftable[2].~facet_0)(v97, 10);
  std::locale::~locale(&v129);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v128 < 0)
    operator delete(v126.__locale_);
  if ((char)v133 < 0)
    operator delete(v131);
  sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
  if ((v133 & 0x80u) == 0)
    v98 = &v131;
  else
    v98 = v131;
  if ((v133 & 0x80u) == 0)
    v99 = v133;
  else
    v99 = v132;
  v100 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v98, v99);
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v100, (uint64_t)&v126, 1);
  v101 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 58;
  sub_20BDDC1C8(v101, (uint64_t)&v126, 1);
  v102 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 40;
  sub_20BDDC1C8(v102, (uint64_t)&v126, 1);
  v103 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v126.__locale_) = 41;
  v104 = sub_20BDDC1C8(v103, (uint64_t)&v126, 1);
  v105 = sub_20BDDC1C8(v104, (uint64_t)" failure ", 9);
  sub_20C097CA4(&v126);
  if ((v128 & 0x80u) == 0)
    v106 = &v126;
  else
    v106 = v126.__locale_;
  if ((v128 & 0x80u) == 0)
    v107 = v128;
  else
    v107 = v127;
  v108 = sub_20BDDC1C8(v105, (uint64_t)v106, v107);
  std::ios_base::getloc((const std::ios_base *)((char *)v108 + *(_QWORD *)(*v108 - 24)));
  v109 = std::locale::use_facet(&v129, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v109->__vftable[2].~facet_0)(v109, 10);
  std::locale::~locale(&v129);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v128 < 0)
    operator delete(v126.__locale_);
  if ((char)v133 < 0)
    operator delete(v131);
  v110 = v125;
  *v2 = *(_OWORD *)__p;
  v2[1] = v110;
  sub_20C01AE64((uint64_t)&v130, (uint64_t)v2, v3);
  if ((v133 & 0x80u) == 0)
    v111 = &v131;
  else
    v111 = v131;
  if ((v133 & 0x80u) == 0)
    v112 = v133;
  else
    v112 = v132;
  v113 = (_QWORD *)MEMORY[0x24BEDB310];
  v114 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v111, v112);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v114, (uint64_t)__p, 1);
  v115 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v115, (uint64_t)__p, 1);
  v116 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v116, (uint64_t)__p, 1);
  v117 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v118 = sub_20BDDC1C8(v117, (uint64_t)__p, 1);
  v119 = sub_20BDDC1C8(v118, (uint64_t)" success ", 9);
  sub_20C097C1C(__p);
  if ((SBYTE7(v125) & 0x80u) == 0)
    v120 = __p;
  else
    v120 = (void **)__p[0];
  if ((SBYTE7(v125) & 0x80u) == 0)
    v121 = BYTE7(v125);
  else
    v121 = (uint64_t)__p[1];
  v122 = sub_20BDDC1C8(v119, (uint64_t)v120, v121);
  sub_20BDDC1C8(v122, (uint64_t)"; next ", 7);
  if (SBYTE7(v125) < 0)
    operator delete(__p[0]);
  if ((char)v133 < 0)
    operator delete(v131);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v113 + *(_QWORD *)(*v113 - 24)));
  v123 = std::locale::use_facet(&v130, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v123->__vftable[2].~facet_0)(v123, 10);
  std::locale::~locale(&v130);
  std::ostream::put();
  std::ostream::flush();
  return 1;
}

void sub_20C097AF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, std::locale a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::locale a17, std::locale a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _OWORD *v26;

  if (a26 < 0)
    operator delete(__p);
  *v26 = a9;
  v26[1] = a10;
  _Unwind_Resume(exception_object);
}

void sub_20C097C1C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl6not_atIJNS0_3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113VariableStartENS0_5ascii3oneIJLc39EEEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl6not_atIJNS0_3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113VariableStartENS0_5ascii3oneIJLc39EEEEEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C097C90(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C097CA4(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113VariableStartENS0_5ascii3oneIJLc39EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3sorIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113VariableStartENS0_5ascii3oneIJLc39EEEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C097D18(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C097D2C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB35F2 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB35F2 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C097DA8(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C097DBC(char **a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  void *__p[2];
  uint64_t v21;
  char v22;
  _QWORD v23[5];

  v4 = *a1;
  v5 = (uint64_t *)sub_20C08E384(a3);
  sub_20BE93368(__p, v4, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - (_QWORD)v4);
  v22 = 0;
  v6 = v5[2];
  v7 = v5[3];
  if (v6 >= v7)
  {
    v9 = v5[1];
    v10 = (uint64_t)(v6 - v9) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      sub_20BDDF694();
    v12 = v7 - v9;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v23[4] = v5 + 3;
    v14 = (char *)sub_20BED2F10((uint64_t)(v5 + 3), v13);
    v15 = &v14[32 * v10];
    v23[0] = v14;
    v23[1] = v15;
    v23[3] = &v14[32 * v16];
    v17 = *(_OWORD *)__p;
    *((_QWORD *)v15 + 2) = v21;
    *(_OWORD *)v15 = v17;
    __p[1] = 0;
    v21 = 0;
    __p[0] = 0;
    v15[24] = v22;
    v23[2] = v15 + 32;
    sub_20C090AE0(v5 + 1, v23);
    v18 = v5[2];
    sub_20BED3064((uint64_t)v23);
    v19 = SHIBYTE(v21);
    v5[2] = v18;
    if (v19 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v8 = *(_OWORD *)__p;
    *(_QWORD *)(v6 + 16) = v21;
    *(_OWORD *)v6 = v8;
    *(_BYTE *)(v6 + 24) = v22;
    v5[2] = v6 + 32;
  }
}

void sub_20C097EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17)
{
  sub_20BED3064((uint64_t)&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20C097F28(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115QuotedStringEndILc39EEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_115QuotedStringEndILc39EEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C097F9C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C097FB0(uint64_t a1)
{
  std::string v2;

  sub_20BDDC0E4(&v2, "Missing ending \"'\"");
  sub_20C088F14(a1, &v2);
}

void sub_20C097FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C098000(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *p_p;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  const std::locale::facet *v45;
  _BYTE *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  void *v57;
  uint64_t v58;
  _QWORD *v59;
  const std::locale::facet *v60;
  void *v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  void *v69;
  uint64_t v70;
  _QWORD *v71;
  const std::locale::facet *v72;
  void *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v82;
  uint64_t v83;
  _QWORD *v84;
  const std::locale::facet *v85;
  void *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  void *v95;
  uint64_t v96;
  _QWORD *v97;
  const std::locale::facet *v98;
  unsigned __int8 *v99;
  uint64_t v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  void *v110;
  uint64_t v111;
  _QWORD *v112;
  const std::locale::facet *v113;
  void *v114;
  uint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  void *v123;
  uint64_t v124;
  _QWORD *v125;
  const std::locale::facet *v126;
  void *v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  void *v135;
  uint64_t v136;
  _QWORD *v137;
  const std::locale::facet *v138;
  void *v139;
  uint64_t v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  void *v148;
  uint64_t v149;
  _QWORD *v150;
  const std::locale::facet *v151;
  void *v152;
  uint64_t v153;
  _QWORD *v154;
  _QWORD *v155;
  _QWORD *v156;
  _QWORD *v157;
  _QWORD *v158;
  _QWORD *v159;
  void *v160;
  uint64_t v161;
  _QWORD *v162;
  const std::locale::facet *v163;
  void *v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  _QWORD *v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  void *v172;
  uint64_t v173;
  _QWORD *v174;
  const std::locale::facet *v175;
  _OWORD *v176;
  __int128 v177;
  __int128 v179;
  __int128 v180;
  _OWORD *v181;
  void *__p;
  uint64_t v183;
  unsigned __int8 v184;
  std::locale v185;
  void *v186;
  uint64_t v187;
  unsigned __int8 v188;
  std::locale v189;

  v4 = a1 + 8;
  v5 = *(_OWORD *)(a1 + 24);
  v179 = *(_OWORD *)(a1 + 8);
  v180 = v5;
  v181 = (_OWORD *)(a1 + 8);
  v6 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)&v185, a1 + 8, (__int128 *)(a1 + 48));
  if ((v188 & 0x80u) == 0)
    v7 = &v186;
  else
    v7 = v186;
  if ((v188 & 0x80u) == 0)
    v8 = v188;
  else
    v8 = v187;
  v9 = (_QWORD *)MEMORY[0x24BEDB310];
  v10 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v7, v8);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v10, (uint64_t)&__p, 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v11, (uint64_t)&__p, 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v12, (uint64_t)&__p, 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v14 = sub_20BDDC1C8(v13, (uint64_t)&__p, 1);
  v15 = sub_20BDDC1C8(v14, (uint64_t)"  start  ", 9);
  sub_20C099550(&__p);
  if ((v184 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v184 & 0x80u) == 0)
    v17 = v184;
  else
    v17 = v183;
  v18 = sub_20BDDC1C8(v15, (uint64_t)p_p, v17);
  sub_20BDDC1C8(v18, (uint64_t)"; current ", 10);
  if ((char)v184 < 0)
    operator delete(__p);
  if ((char)v188 < 0)
    operator delete(v186);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v19 = std::locale::use_facet(&v185, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale(&v185);
  std::ostream::put();
  std::ostream::flush();
  sub_20C01AE64((uint64_t)&v185, v4, v6);
  if ((v188 & 0x80u) == 0)
    v20 = &v186;
  else
    v20 = v186;
  if ((v188 & 0x80u) == 0)
    v21 = v188;
  else
    v21 = v187;
  v22 = (_QWORD *)MEMORY[0x24BEDB310];
  v23 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v20, v21);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v23, (uint64_t)&__p, 1);
  v24 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v24, (uint64_t)&__p, 1);
  v25 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v25, (uint64_t)&__p, 1);
  v26 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v27 = sub_20BDDC1C8(v26, (uint64_t)&__p, 1);
  v28 = sub_20BDDC1C8(v27, (uint64_t)"  start  ", 9);
  sub_20C0995D8(&__p);
  if ((v184 & 0x80u) == 0)
    v29 = &__p;
  else
    v29 = __p;
  if ((v184 & 0x80u) == 0)
    v30 = v184;
  else
    v30 = v183;
  v31 = sub_20BDDC1C8(v28, (uint64_t)v29, v30);
  sub_20BDDC1C8(v31, (uint64_t)"; current ", 10);
  if ((char)v184 < 0)
    operator delete(__p);
  if ((char)v188 < 0)
    operator delete(v186);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
  v32 = std::locale::use_facet(&v185, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
  std::locale::~locale(&v185);
  std::ostream::put();
  std::ostream::flush();
  sub_20C01AE64((uint64_t)&v185, v4, v6);
  if ((v188 & 0x80u) == 0)
    v33 = &v186;
  else
    v33 = v186;
  if ((v188 & 0x80u) == 0)
    v34 = v188;
  else
    v34 = v187;
  v35 = (_QWORD *)MEMORY[0x24BEDB310];
  v36 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v33, v34);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v36, (uint64_t)&__p, 1);
  v37 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v37, (uint64_t)&__p, 1);
  v38 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v38, (uint64_t)&__p, 1);
  v39 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v40 = sub_20BDDC1C8(v39, (uint64_t)&__p, 1);
  v41 = sub_20BDDC1C8(v40, (uint64_t)"  start  ", 9);
  sub_20C099668(&__p);
  if ((v184 & 0x80u) == 0)
    v42 = &__p;
  else
    v42 = __p;
  if ((v184 & 0x80u) == 0)
    v43 = v184;
  else
    v43 = v183;
  v44 = sub_20BDDC1C8(v41, (uint64_t)v42, v43);
  sub_20BDDC1C8(v44, (uint64_t)"; current ", 10);
  if ((char)v184 < 0)
    operator delete(__p);
  if ((char)v188 < 0)
    operator delete(v186);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
  v45 = std::locale::use_facet(&v185, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
  std::locale::~locale(&v185);
  std::ostream::put();
  std::ostream::flush();
  v46 = *(_BYTE **)(a1 + 8);
  if (v46 == *(_BYTE **)(a1 + 40) || *v46 != 45)
  {
    sub_20C01AE64((uint64_t)&v185, v4, v6);
    if ((v188 & 0x80u) == 0)
      v61 = &v186;
    else
      v61 = v186;
    if ((v188 & 0x80u) == 0)
      v62 = v188;
    else
      v62 = v187;
    v63 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v61, v62);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v63, (uint64_t)&__p, 1);
    v64 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v64, (uint64_t)&__p, 1);
    v65 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v65, (uint64_t)&__p, 1);
    v66 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v67 = sub_20BDDC1C8(v66, (uint64_t)&__p, 1);
    v68 = sub_20BDDC1C8(v67, (uint64_t)" failure ", 9);
    sub_20C099668(&__p);
    if ((v184 & 0x80u) == 0)
      v69 = &__p;
    else
      v69 = __p;
    if ((v184 & 0x80u) == 0)
      v70 = v184;
    else
      v70 = v183;
    v71 = sub_20BDDC1C8(v68, (uint64_t)v69, v70);
    std::ios_base::getloc((const std::ios_base *)((char *)v71 + *(_QWORD *)(*v71 - 24)));
    v72 = std::locale::use_facet(&v189, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v72->__vftable[2].~facet_0)(v72, 10);
    std::locale::~locale(&v189);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v184 < 0)
      operator delete(__p);
    if ((char)v188 < 0)
      operator delete(v186);
  }
  else
  {
    v47 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 8) = v46 + 1;
    *(_QWORD *)(a1 + 16) = v47;
    ++*(_QWORD *)(a1 + 32);
    sub_20C01AE64((uint64_t)&v185, v4, v6);
    if ((v188 & 0x80u) == 0)
      v48 = &v186;
    else
      v48 = v186;
    if ((v188 & 0x80u) == 0)
      v49 = v188;
    else
      v49 = v187;
    v50 = (_QWORD *)MEMORY[0x24BEDB310];
    v51 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v48, v49);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v51, (uint64_t)&__p, 1);
    v52 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v52, (uint64_t)&__p, 1);
    v53 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v53, (uint64_t)&__p, 1);
    v54 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v55 = sub_20BDDC1C8(v54, (uint64_t)&__p, 1);
    v56 = sub_20BDDC1C8(v55, (uint64_t)" success ", 9);
    sub_20C099668(&__p);
    if ((v184 & 0x80u) == 0)
      v57 = &__p;
    else
      v57 = __p;
    if ((v184 & 0x80u) == 0)
      v58 = v184;
    else
      v58 = v183;
    v59 = sub_20BDDC1C8(v56, (uint64_t)v57, v58);
    sub_20BDDC1C8(v59, (uint64_t)"; next ", 7);
    if ((char)v184 < 0)
      operator delete(__p);
    if ((char)v188 < 0)
      operator delete(v186);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v50 + *(_QWORD *)(*v50 - 24)));
    v60 = std::locale::use_facet(&v185, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v60->__vftable[2].~facet_0)(v60, 10);
    std::locale::~locale(&v185);
    std::ostream::put();
    std::ostream::flush();
  }
  sub_20C01AE64((uint64_t)&v185, v4, v6);
  if ((v188 & 0x80u) == 0)
    v73 = &v186;
  else
    v73 = v186;
  if ((v188 & 0x80u) == 0)
    v74 = v188;
  else
    v74 = v187;
  v75 = (_QWORD *)MEMORY[0x24BEDB310];
  v76 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v73, v74);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v76, (uint64_t)&__p, 1);
  v77 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v77, (uint64_t)&__p, 1);
  v78 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v78, (uint64_t)&__p, 1);
  v79 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v80 = sub_20BDDC1C8(v79, (uint64_t)&__p, 1);
  v81 = sub_20BDDC1C8(v80, (uint64_t)" success ", 9);
  sub_20C0995D8(&__p);
  if ((v184 & 0x80u) == 0)
    v82 = &__p;
  else
    v82 = __p;
  if ((v184 & 0x80u) == 0)
    v83 = v184;
  else
    v83 = v183;
  v84 = sub_20BDDC1C8(v81, (uint64_t)v82, v83);
  sub_20BDDC1C8(v84, (uint64_t)"; next ", 7);
  if ((char)v184 < 0)
    operator delete(__p);
  if ((char)v188 < 0)
    operator delete(v186);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v75 + *(_QWORD *)(*v75 - 24)));
  v85 = std::locale::use_facet(&v185, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v85->__vftable[2].~facet_0)(v85, 10);
  std::locale::~locale(&v185);
  std::ostream::put();
  std::ostream::flush();
  sub_20C01AE64((uint64_t)&v185, v4, v6);
  if ((v188 & 0x80u) == 0)
    v86 = &v186;
  else
    v86 = v186;
  if ((v188 & 0x80u) == 0)
    v87 = v188;
  else
    v87 = v187;
  v88 = (_QWORD *)MEMORY[0x24BEDB310];
  v89 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v86, v87);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v89, (uint64_t)&__p, 1);
  v90 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v90, (uint64_t)&__p, 1);
  v91 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v91, (uint64_t)&__p, 1);
  v92 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v93 = sub_20BDDC1C8(v92, (uint64_t)&__p, 1);
  v94 = sub_20BDDC1C8(v93, (uint64_t)"  start  ", 9);
  sub_20C0996F8(&__p);
  if ((v184 & 0x80u) == 0)
    v95 = &__p;
  else
    v95 = __p;
  if ((v184 & 0x80u) == 0)
    v96 = v184;
  else
    v96 = v183;
  v97 = sub_20BDDC1C8(v94, (uint64_t)v95, v96);
  sub_20BDDC1C8(v97, (uint64_t)"; current ", 10);
  if ((char)v184 < 0)
    operator delete(__p);
  if ((char)v188 < 0)
    operator delete(v186);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v88 + *(_QWORD *)(*v88 - 24)));
  v98 = std::locale::use_facet(&v185, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v98->__vftable[2].~facet_0)(v98, 10);
  std::locale::~locale(&v185);
  std::ostream::put();
  std::ostream::flush();
  sub_20C099788(a1);
  v99 = *(unsigned __int8 **)(a1 + 8);
  if (v99 == *(unsigned __int8 **)(a1 + 40) || *v99 - 48 > 9)
  {
    v101 = 0;
  }
  else
  {
    do
    {
      v100 = *(_QWORD *)(a1 + 16) + 1;
      *(_QWORD *)(a1 + 8) = v99 + 1;
      *(_QWORD *)(a1 + 16) = v100;
      ++*(_QWORD *)(a1 + 32);
      sub_20C099970(a1);
      sub_20C099788(a1);
      v99 = *(unsigned __int8 **)(a1 + 8);
    }
    while (v99 != *(unsigned __int8 **)(a1 + 40) && *v99 - 48 <= 9);
    v101 = 1;
  }
  sub_20C01AE64((uint64_t)&v185, v4, v6);
  if ((v188 & 0x80u) == 0)
    v102 = &v186;
  else
    v102 = v186;
  if ((v188 & 0x80u) == 0)
    v103 = v188;
  else
    v103 = v187;
  v104 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v102, v103);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v104, (uint64_t)&__p, 1);
  v105 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v105, (uint64_t)&__p, 1);
  v106 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v106, (uint64_t)&__p, 1);
  v107 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v108 = sub_20BDDC1C8(v107, (uint64_t)&__p, 1);
  v109 = sub_20BDDC1C8(v108, (uint64_t)" failure ", 9);
  sub_20C099B58(&__p);
  if ((v184 & 0x80u) == 0)
    v110 = &__p;
  else
    v110 = __p;
  if ((v184 & 0x80u) == 0)
    v111 = v184;
  else
    v111 = v183;
  v112 = sub_20BDDC1C8(v109, (uint64_t)v110, v111);
  std::ios_base::getloc((const std::ios_base *)((char *)v112 + *(_QWORD *)(*v112 - 24)));
  v113 = std::locale::use_facet(&v189, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v113->__vftable[2].~facet_0)(v113, 10);
  std::locale::~locale(&v189);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v184 < 0)
    operator delete(__p);
  if ((char)v188 < 0)
  {
    operator delete(v186);
    if ((_DWORD)v101)
      goto LABEL_139;
  }
  else if ((_DWORD)v101)
  {
LABEL_139:
    sub_20C01AE64((uint64_t)&v185, v4, v6);
    if ((v188 & 0x80u) == 0)
      v114 = &v186;
    else
      v114 = v186;
    if ((v188 & 0x80u) == 0)
      v115 = v188;
    else
      v115 = v187;
    v116 = (_QWORD *)MEMORY[0x24BEDB310];
    v117 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v114, v115);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v117, (uint64_t)&__p, 1);
    v118 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v118, (uint64_t)&__p, 1);
    v119 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v119, (uint64_t)&__p, 1);
    v120 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v121 = sub_20BDDC1C8(v120, (uint64_t)&__p, 1);
    v122 = sub_20BDDC1C8(v121, (uint64_t)" success ", 9);
    sub_20C0996F8(&__p);
    if ((v184 & 0x80u) == 0)
      v123 = &__p;
    else
      v123 = __p;
    if ((v184 & 0x80u) == 0)
      v124 = v184;
    else
      v124 = v183;
    v125 = sub_20BDDC1C8(v122, (uint64_t)v123, v124);
    sub_20BDDC1C8(v125, (uint64_t)"; next ", 7);
    if ((char)v184 < 0)
      operator delete(__p);
    if ((char)v188 < 0)
      operator delete(v186);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v116 + *(_QWORD *)(*v116 - 24)));
    v126 = std::locale::use_facet(&v185, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v126->__vftable[2].~facet_0)(v126, 10);
    std::locale::~locale(&v185);
    std::ostream::put();
    std::ostream::flush();
    sub_20C01AE64((uint64_t)&v185, v4, v6);
    if ((v188 & 0x80u) == 0)
      v127 = &v186;
    else
      v127 = v186;
    if ((v188 & 0x80u) == 0)
      v128 = v188;
    else
      v128 = v187;
    v129 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v127, v128);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v129, (uint64_t)&__p, 1);
    v130 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v130, (uint64_t)&__p, 1);
    v131 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v131, (uint64_t)&__p, 1);
    v132 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v133 = sub_20BDDC1C8(v132, (uint64_t)&__p, 1);
    v134 = sub_20BDDC1C8(v133, (uint64_t)"  apply  ", 9);
    sub_20C099550(&__p);
    if ((v184 & 0x80u) == 0)
      v135 = &__p;
    else
      v135 = __p;
    if ((v184 & 0x80u) == 0)
      v136 = v184;
    else
      v136 = v183;
    v137 = sub_20BDDC1C8(v134, (uint64_t)v135, v136);
    std::ios_base::getloc((const std::ios_base *)((char *)v137 + *(_QWORD *)(*v137 - 24)));
    v138 = std::locale::use_facet(&v189, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v138->__vftable[2].~facet_0)(v138, 10);
    std::locale::~locale(&v189);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v184 < 0)
      operator delete(__p);
    if ((char)v188 < 0)
      operator delete(v186);
    sub_20C099BE8(&v179, a1, a2);
    sub_20C01AE64((uint64_t)&v185, v4, v6);
    if ((v188 & 0x80u) == 0)
      v139 = &v186;
    else
      v139 = v186;
    if ((v188 & 0x80u) == 0)
      v140 = v188;
    else
      v140 = v187;
    v141 = (_QWORD *)MEMORY[0x24BEDB310];
    v142 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v139, v140);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v142, (uint64_t)&__p, 1);
    v143 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v143, (uint64_t)&__p, 1);
    v144 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v144, (uint64_t)&__p, 1);
    v145 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v146 = sub_20BDDC1C8(v145, (uint64_t)&__p, 1);
    v147 = sub_20BDDC1C8(v146, (uint64_t)" success ", 9);
    sub_20C099550(&__p);
    if ((v184 & 0x80u) == 0)
      v148 = &__p;
    else
      v148 = __p;
    if ((v184 & 0x80u) == 0)
      v149 = v184;
    else
      v149 = v183;
    v150 = sub_20BDDC1C8(v147, (uint64_t)v148, v149);
    sub_20BDDC1C8(v150, (uint64_t)"; next ", 7);
    if ((char)v184 < 0)
      operator delete(__p);
    if ((char)v188 < 0)
      operator delete(v186);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v141 + *(_QWORD *)(*v141 - 24)));
    v151 = std::locale::use_facet(&v185, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v151->__vftable[2].~facet_0)(v151, 10);
    std::locale::~locale(&v185);
    std::ostream::put();
    std::ostream::flush();
    return v101;
  }
  sub_20C01AE64((uint64_t)&v185, v4, v6);
  if ((v188 & 0x80u) == 0)
    v152 = &v186;
  else
    v152 = v186;
  if ((v188 & 0x80u) == 0)
    v153 = v188;
  else
    v153 = v187;
  v154 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v152, v153);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v154, (uint64_t)&__p, 1);
  v155 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v155, (uint64_t)&__p, 1);
  v156 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v156, (uint64_t)&__p, 1);
  v157 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v158 = sub_20BDDC1C8(v157, (uint64_t)&__p, 1);
  v159 = sub_20BDDC1C8(v158, (uint64_t)" failure ", 9);
  sub_20C0996F8(&__p);
  if ((v184 & 0x80u) == 0)
    v160 = &__p;
  else
    v160 = __p;
  if ((v184 & 0x80u) == 0)
    v161 = v184;
  else
    v161 = v183;
  v162 = sub_20BDDC1C8(v159, (uint64_t)v160, v161);
  std::ios_base::getloc((const std::ios_base *)((char *)v162 + *(_QWORD *)(*v162 - 24)));
  v163 = std::locale::use_facet(&v189, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v163->__vftable[2].~facet_0)(v163, 10);
  std::locale::~locale(&v189);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v184 < 0)
    operator delete(__p);
  if ((char)v188 < 0)
    operator delete(v186);
  sub_20C01AE64((uint64_t)&v185, v4, v6);
  if ((v188 & 0x80u) == 0)
    v164 = &v186;
  else
    v164 = v186;
  if ((v188 & 0x80u) == 0)
    v165 = v188;
  else
    v165 = v187;
  v166 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v164, v165);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v166, (uint64_t)&__p, 1);
  v167 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v167, (uint64_t)&__p, 1);
  v168 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v168, (uint64_t)&__p, 1);
  v169 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v170 = sub_20BDDC1C8(v169, (uint64_t)&__p, 1);
  v171 = sub_20BDDC1C8(v170, (uint64_t)" failure ", 9);
  sub_20C099550(&__p);
  if ((v184 & 0x80u) == 0)
    v172 = &__p;
  else
    v172 = __p;
  if ((v184 & 0x80u) == 0)
    v173 = v184;
  else
    v173 = v183;
  v174 = sub_20BDDC1C8(v171, (uint64_t)v172, v173);
  std::ios_base::getloc((const std::ios_base *)((char *)v174 + *(_QWORD *)(*v174 - 24)));
  v175 = std::locale::use_facet(&v189, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v175->__vftable[2].~facet_0)(v175, 10);
  std::locale::~locale(&v189);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v184 < 0)
    operator delete(__p);
  if ((char)v188 < 0)
    operator delete(v186);
  v176 = v181;
  if (v181)
  {
    v177 = v180;
    *v181 = v179;
    v176[1] = v177;
  }
  return v101;
}

void sub_20C099420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, _OWORD *a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  if (a11)
  {
    *a11 = a9;
    a11[1] = a10;
  }
  _Unwind_Resume(exception_object);
}

void sub_20C099550(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17IntegerE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17IntegerE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0995C4(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C0995D8(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB36A9 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB36A9 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C099654(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C099668(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB36E7 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB36E7 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0996E4(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C0996F8(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB3718 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB3718 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C099774(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C099788(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)"  start  ", 9);
  sub_20C099B58(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; current ", 10);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C099928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C099970(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)" success ", 9);
  sub_20C099B58(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; next ", 7);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C099B10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C099B58(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB3750 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB3750 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C099BD4(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C099BE8(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  BOOL *v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  _QWORD *result;
  _QWORD *v11;
  const char *v12;
  char *v13;
  _QWORD *v14;
  _OWORD v15[2];
  uint64_t v16;
  _QWORD v17[2];
  char v18;
  std::string v19;
  char v20;

  v5 = a1[1];
  v15[0] = *a1;
  v15[1] = v5;
  v16 = a2;
  v20 = 0;
  sub_20BE93368(&v19, *(char **)&v15[0], *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)&v15[0]);
  v7 = pxrInternal__aapl__pxrReserved__::TfStringToInt64((char *)&v19, &v20, v6);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v20)
  {
    sub_20BE93368(v17, *(char **)&v15[0], *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - *(_QWORD *)&v15[0]);
    if (v18 >= 0)
      v14 = v17;
    else
      v14 = (_QWORD *)v17[0];
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Integer %s out of range.", v12, v13, v14);
    sub_20C099D8C((uint64_t)v15, &v19);
  }
  v8 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v8
    || (v9 = *(const void **)(v8 - 8)) == 0
    || (result = __dynamic_cast(v9, (const struct __class_type_info *)&unk_24C5275D0, (const struct __class_type_info *)&unk_24C527660, 0)) == 0)
  {
    v11 = operator new(0x10uLL);
    *v11 = &off_24C527688;
    v11[1] = 0;
    v19.__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
    sub_20C08DF60((char **)a3, (uint64_t *)&v19);
    if (v19.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v19.__r_.__value_.__l.__data_ + 8))(v19.__r_.__value_.__r.__words[0]);
    result = *(_QWORD **)(*(_QWORD *)(a3 + 8) - 8);
  }
  result[1] = v7;
  return result;
}

void sub_20C099D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 41) < 0)
    operator delete(*(void **)(v21 - 64));
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C099D8C(uint64_t a1, const std::string *a2)
{
  std::runtime_error *exception;
  std::runtime_error v5;
  _QWORD v6[2];
  char v7;
  _BYTE v8[48];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  exception = (std::runtime_error *)__cxa_allocate_exception(0x28uLL);
  sub_20C01AE64((uint64_t)v8, a1, (__int128 *)(*(_QWORD *)(a1 + 32) + 48));
  v5 = (std::runtime_error)0;
  v6[0] = 0;
  v6[1] = &v5;
  v7 = 0;
  v5.__vftable = (std::runtime_error_vtbl *)operator new(0x30uLL);
  v5.__imp_.__imp_ = (const char *)v5.__vftable;
  v6[0] = v5.__vftable + 2;
  v5.__imp_.__imp_ = (const char *)sub_20C089058((uint64_t)v6, (uint64_t)v8, (uint64_t)&v9, (uint64_t)v5.__vftable);
  std::runtime_error::runtime_error(exception, a2);
  exception->__vftable = (std::runtime_error_vtbl *)&unk_24C526178;
  exception[1] = v5;
  exception[2].__vftable = (std::runtime_error_vtbl *)v6[0];
  v6[0] = 0;
  v5 = (std::runtime_error)0;
  __cxa_throw(exception, (struct type_info *)&unk_24C526150, (void (*)(void *))sub_20C01AE18);
}

void sub_20C099E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  a12 = &a9;
  sub_20C01B544((void ***)&a12);
  if (a22 < 0)
    operator delete(__p);
  if (v23)
    __cxa_free_exception(v22);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C099EDC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x10uLL);
  result = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ConstantNode<long long>::ConstantNode(v4, *(_QWORD *)(a1 + 8));
  *a2 = v4;
  return result;
}

void sub_20C099F1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C099F30(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17BooleanE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17BooleanE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C099FA4(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C099FB8(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  __int128 *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  void **v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void **v28;
  uint64_t v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  __int128 v32;
  __int128 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  void **v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  _QWORD *v47;
  const std::locale::facet *v48;
  void **v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  void **v58;
  uint64_t v59;
  _QWORD *v60;
  const std::locale::facet *v61;
  __int128 v62;
  char v63;
  __int128 v64;
  void **v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  void **v73;
  uint64_t v74;
  _QWORD *v75;
  const std::locale::facet *v76;
  void **v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  void **v85;
  uint64_t v86;
  _QWORD *v87;
  const std::locale::facet *v88;
  void **v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  void **v98;
  uint64_t v99;
  _QWORD *v100;
  const std::locale::facet *v101;
  void **v102;
  uint64_t v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  void **v111;
  uint64_t v112;
  _QWORD *v113;
  const std::locale::facet *v114;
  __int128 v115;
  __int128 v116;
  char v117;
  __int128 v118;
  __int128 v119;
  void **v120;
  uint64_t v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  void **v128;
  uint64_t v129;
  _QWORD *v130;
  const std::locale::facet *v131;
  void **v132;
  uint64_t v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  void **v141;
  uint64_t v142;
  _QWORD *v143;
  const std::locale::facet *v144;
  __int128 v145;
  char v146;
  __int128 v147;
  void **v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  _QWORD *v154;
  _QWORD *v155;
  void **v156;
  uint64_t v157;
  _QWORD *v158;
  const std::locale::facet *v159;
  void **v160;
  uint64_t v161;
  _QWORD *v162;
  _QWORD *v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  _QWORD *v167;
  void **v168;
  uint64_t v169;
  _QWORD *v170;
  const std::locale::facet *v171;
  uint64_t result;
  void **v173;
  uint64_t v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  void **v182;
  uint64_t v183;
  _QWORD *v184;
  void **v185;
  uint64_t v186;
  _QWORD *v187;
  _QWORD *v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  void **v193;
  uint64_t v194;
  _QWORD *v195;
  const std::locale::facet *v196;
  void **v197;
  uint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  _QWORD *v201;
  _QWORD *v202;
  _QWORD *v203;
  _QWORD *v204;
  void **v205;
  uint64_t v206;
  _QWORD *v207;
  const std::locale::facet *v208;
  void **v209;
  uint64_t v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  void **v218;
  uint64_t v219;
  _QWORD *v220;
  void **v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  _QWORD *v225;
  _QWORD *v226;
  _QWORD *v227;
  _QWORD *v228;
  _QWORD *v229;
  void **v230;
  uint64_t v231;
  _QWORD *v232;
  void **v233;
  uint64_t v234;
  _QWORD *v235;
  _QWORD *v236;
  _QWORD *v237;
  _QWORD *v238;
  _QWORD *v239;
  _QWORD *v240;
  void **v241;
  uint64_t v242;
  _QWORD *v243;
  const std::locale::facet *v244;
  void **v245;
  uint64_t v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  _QWORD *v250;
  _QWORD *v251;
  _QWORD *v252;
  void **v253;
  uint64_t v254;
  _QWORD *v255;
  const std::locale::facet *v256;
  void **v257;
  uint64_t v258;
  _QWORD *v259;
  _QWORD *v260;
  _QWORD *v261;
  _QWORD *v262;
  _QWORD *v263;
  _QWORD *v264;
  void **v265;
  uint64_t v266;
  _QWORD *v267;
  const std::locale::facet *v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  void *__p[2];
  __int128 v274;
  std::locale v275[2];
  void *v276[2];
  uint64_t v277;
  unsigned __int8 v278;
  std::locale v279;

  v4 = (_OWORD *)(a1 + 8);
  v269 = *(_OWORD *)(a1 + 8);
  v271 = *(_OWORD *)(a1 + 24);
  v5 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)v275, a1 + 8, (__int128 *)(a1 + 48));
  if ((v278 & 0x80u) == 0)
    v6 = &v276[1];
  else
    v6 = (void **)v276[1];
  if ((v278 & 0x80u) == 0)
    v7 = v278;
  else
    v7 = v277;
  v8 = (_QWORD *)MEMORY[0x24BEDB310];
  v9 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v6, v7);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v9, (uint64_t)__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v10, (uint64_t)__p, 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v11, (uint64_t)__p, 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v13 = sub_20BDDC1C8(v12, (uint64_t)__p, 1);
  v14 = sub_20BDDC1C8(v13, (uint64_t)"  start  ", 9);
  sub_20C09BF10(__p);
  if ((SBYTE7(v274) & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((SBYTE7(v274) & 0x80u) == 0)
    v16 = BYTE7(v274);
  else
    v16 = (uint64_t)__p[1];
  v17 = sub_20BDDC1C8(v14, (uint64_t)v15, v16);
  sub_20BDDC1C8(v17, (uint64_t)"; current ", 10);
  if (SBYTE7(v274) < 0)
    operator delete(__p[0]);
  if ((char)v278 < 0)
    operator delete(v276[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v18 = std::locale::use_facet(v275, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(v275);
  std::ostream::put();
  std::ostream::flush();
  sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
  if ((v278 & 0x80u) == 0)
    v19 = &v276[1];
  else
    v19 = (void **)v276[1];
  if ((v278 & 0x80u) == 0)
    v20 = v278;
  else
    v20 = v277;
  v21 = (_QWORD *)MEMORY[0x24BEDB310];
  v22 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v19, v20);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v22, (uint64_t)__p, 1);
  v23 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v23, (uint64_t)__p, 1);
  v24 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v24, (uint64_t)__p, 1);
  v25 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v26 = sub_20BDDC1C8(v25, (uint64_t)__p, 1);
  v27 = sub_20BDDC1C8(v26, (uint64_t)"  start  ", 9);
  sub_20C09BF98(__p);
  if ((SBYTE7(v274) & 0x80u) == 0)
    v28 = __p;
  else
    v28 = (void **)__p[0];
  if ((SBYTE7(v274) & 0x80u) == 0)
    v29 = BYTE7(v274);
  else
    v29 = (uint64_t)__p[1];
  v30 = sub_20BDDC1C8(v27, (uint64_t)v28, v29);
  sub_20BDDC1C8(v30, (uint64_t)"; current ", 10);
  if (SBYTE7(v274) < 0)
    operator delete(__p[0]);
  if ((char)v278 < 0)
    operator delete(v276[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
  v31 = std::locale::use_facet(v275, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
  std::locale::~locale(v275);
  std::ostream::put();
  std::ostream::flush();
  v32 = v4[1];
  *(_OWORD *)__p = *v4;
  v274 = v32;
  if (sub_20C09C028((_QWORD *)a1))
  {
    v33 = v4[1];
    *(_OWORD *)&v275[0].__locale_ = *v4;
    *(_OWORD *)v276 = v33;
    v34 = sub_20C08DDF4((_QWORD *)a1);
    v35 = *(_OWORD *)v276;
    *v4 = *(_OWORD *)&v275[0].__locale_;
    v4[1] = v35;
    if ((v34 & 1) == 0)
    {
      sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
      if ((v278 & 0x80u) == 0)
        v173 = &v276[1];
      else
        v173 = (void **)v276[1];
      if ((v278 & 0x80u) == 0)
        v174 = v278;
      else
        v174 = v277;
      v175 = (_QWORD *)MEMORY[0x24BEDB310];
      v176 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v173, v174);
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v176, (uint64_t)__p, 1);
      v177 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v177, (uint64_t)__p, 1);
      v178 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 40;
      sub_20BDDC1C8(v178, (uint64_t)__p, 1);
      v179 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 41;
      v180 = sub_20BDDC1C8(v179, (uint64_t)__p, 1);
      v181 = sub_20BDDC1C8(v180, (uint64_t)" success ", 9);
      sub_20C09BF98(__p);
      if ((SBYTE7(v274) & 0x80u) == 0)
        v182 = __p;
      else
        v182 = (void **)__p[0];
      if ((SBYTE7(v274) & 0x80u) == 0)
        v183 = BYTE7(v274);
      else
        v183 = (uint64_t)__p[1];
      v184 = sub_20BDDC1C8(v181, (uint64_t)v182, v183);
      sub_20BDDC1C8(v184, (uint64_t)"; next ", 7);
      if (SBYTE7(v274) < 0)
        operator delete(__p[0]);
      if ((char)v278 < 0)
        operator delete(v276[1]);
      goto LABEL_235;
    }
  }
  v36 = v274;
  *v4 = *(_OWORD *)__p;
  v4[1] = v36;
  sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
  if ((v278 & 0x80u) == 0)
    v37 = &v276[1];
  else
    v37 = (void **)v276[1];
  if ((v278 & 0x80u) == 0)
    v38 = v278;
  else
    v38 = v277;
  v39 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v37, v38);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v39, (uint64_t)__p, 1);
  v40 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v40, (uint64_t)__p, 1);
  v41 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v41, (uint64_t)__p, 1);
  v42 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v43 = sub_20BDDC1C8(v42, (uint64_t)__p, 1);
  v44 = sub_20BDDC1C8(v43, (uint64_t)" failure ", 9);
  sub_20C09BF98(__p);
  if ((SBYTE7(v274) & 0x80u) == 0)
    v45 = __p;
  else
    v45 = (void **)__p[0];
  if ((SBYTE7(v274) & 0x80u) == 0)
    v46 = BYTE7(v274);
  else
    v46 = (uint64_t)__p[1];
  v47 = sub_20BDDC1C8(v44, (uint64_t)v45, v46);
  std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(_QWORD *)(*v47 - 24)));
  v48 = std::locale::use_facet(&v279, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
  std::locale::~locale(&v279);
  std::ostream::put();
  std::ostream::flush();
  if (SBYTE7(v274) < 0)
    operator delete(__p[0]);
  if ((char)v278 < 0)
    operator delete(v276[1]);
  sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
  if ((v278 & 0x80u) == 0)
    v49 = &v276[1];
  else
    v49 = (void **)v276[1];
  if ((v278 & 0x80u) == 0)
    v50 = v278;
  else
    v50 = v277;
  v51 = (_QWORD *)MEMORY[0x24BEDB310];
  v52 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v49, v50);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v52, (uint64_t)__p, 1);
  v53 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v53, (uint64_t)__p, 1);
  v54 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v54, (uint64_t)__p, 1);
  v55 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v56 = sub_20BDDC1C8(v55, (uint64_t)__p, 1);
  v57 = sub_20BDDC1C8(v56, (uint64_t)"  start  ", 9);
  sub_20C09C088(__p);
  if ((SBYTE7(v274) & 0x80u) == 0)
    v58 = __p;
  else
    v58 = (void **)__p[0];
  if ((SBYTE7(v274) & 0x80u) == 0)
    v59 = BYTE7(v274);
  else
    v59 = (uint64_t)__p[1];
  v60 = sub_20BDDC1C8(v57, (uint64_t)v58, v59);
  sub_20BDDC1C8(v60, (uint64_t)"; current ", 10);
  if (SBYTE7(v274) < 0)
    operator delete(__p[0]);
  if ((char)v278 < 0)
    operator delete(v276[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v51 + *(_QWORD *)(*v51 - 24)));
  v61 = std::locale::use_facet(v275, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
  std::locale::~locale(v275);
  std::ostream::put();
  std::ostream::flush();
  if (sub_20C09C118((_QWORD *)a1))
  {
    v62 = v4[1];
    *(_OWORD *)&v275[0].__locale_ = *v4;
    *(_OWORD *)v276 = v62;
    v63 = sub_20C08DDF4((_QWORD *)a1);
    v64 = *(_OWORD *)v276;
    *v4 = *(_OWORD *)&v275[0].__locale_;
    v4[1] = v64;
    if ((v63 & 1) == 0)
    {
      sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
      if ((v278 & 0x80u) == 0)
        v185 = &v276[1];
      else
        v185 = (void **)v276[1];
      if ((v278 & 0x80u) == 0)
        v186 = v278;
      else
        v186 = v277;
      v175 = (_QWORD *)MEMORY[0x24BEDB310];
      v187 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v185, v186);
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v187, (uint64_t)__p, 1);
      v188 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v188, (uint64_t)__p, 1);
      v189 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 40;
      sub_20BDDC1C8(v189, (uint64_t)__p, 1);
      v190 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 41;
      v191 = sub_20BDDC1C8(v190, (uint64_t)__p, 1);
      v192 = sub_20BDDC1C8(v191, (uint64_t)" success ", 9);
      sub_20C09C088(__p);
      if ((SBYTE7(v274) & 0x80u) == 0)
        v193 = __p;
      else
        v193 = (void **)__p[0];
      if ((SBYTE7(v274) & 0x80u) == 0)
        v194 = BYTE7(v274);
      else
        v194 = (uint64_t)__p[1];
      v195 = sub_20BDDC1C8(v192, (uint64_t)v193, v194);
      sub_20BDDC1C8(v195, (uint64_t)"; next ", 7);
      if (SBYTE7(v274) < 0)
        operator delete(__p[0]);
      if ((char)v278 < 0)
        operator delete(v276[1]);
LABEL_235:
      sub_20C088CD8(a1);
      std::ios_base::getloc((const std::ios_base *)((char *)v175 + *(_QWORD *)(*v175 - 24)));
      v196 = std::locale::use_facet(v275, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v196->__vftable[2].~facet_0)(v196, 10);
      std::locale::~locale(v275);
      std::ostream::put();
      std::ostream::flush();
      sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
      if ((v278 & 0x80u) == 0)
        v197 = &v276[1];
      else
        v197 = (void **)v276[1];
      if ((v278 & 0x80u) == 0)
        v198 = v278;
      else
        v198 = v277;
      v199 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v197, v198);
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v199, (uint64_t)__p, 1);
      v200 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v200, (uint64_t)__p, 1);
      v201 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 40;
      sub_20BDDC1C8(v201, (uint64_t)__p, 1);
      v202 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 41;
      v203 = sub_20BDDC1C8(v202, (uint64_t)__p, 1);
      v204 = sub_20BDDC1C8(v203, (uint64_t)"  apply  ", 9);
      sub_20C09BF10(__p);
      if ((SBYTE7(v274) & 0x80u) == 0)
        v205 = __p;
      else
        v205 = (void **)__p[0];
      if ((SBYTE7(v274) & 0x80u) == 0)
        v206 = BYTE7(v274);
      else
        v206 = (uint64_t)__p[1];
      v207 = sub_20BDDC1C8(v204, (uint64_t)v205, v206);
      std::ios_base::getloc((const std::ios_base *)((char *)v207 + *(_QWORD *)(*v207 - 24)));
      v208 = std::locale::use_facet(&v279, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v208->__vftable[2].~facet_0)(v208, 10);
      std::locale::~locale(&v279);
      std::ostream::put();
      std::ostream::flush();
      if (SBYTE7(v274) < 0)
        operator delete(__p[0]);
      if ((char)v278 < 0)
        operator delete(v276[1]);
      *((_BYTE *)sub_20C09C178(a2) + 8) = 1;
      sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
      if ((v278 & 0x80u) == 0)
        v209 = &v276[1];
      else
        v209 = (void **)v276[1];
      if ((v278 & 0x80u) == 0)
        v210 = v278;
      else
        v210 = v277;
      v211 = (_QWORD *)MEMORY[0x24BEDB310];
      v212 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v209, v210);
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v212, (uint64_t)__p, 1);
      v213 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v213, (uint64_t)__p, 1);
      v214 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 40;
      sub_20BDDC1C8(v214, (uint64_t)__p, 1);
      v215 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 41;
      v216 = sub_20BDDC1C8(v215, (uint64_t)__p, 1);
      v217 = sub_20BDDC1C8(v216, (uint64_t)" success ", 9);
      sub_20C09BF10(__p);
      if ((SBYTE7(v274) & 0x80u) == 0)
        v218 = __p;
      else
        v218 = (void **)__p[0];
      if ((SBYTE7(v274) & 0x80u) == 0)
        v219 = BYTE7(v274);
      else
        v219 = (uint64_t)__p[1];
      v220 = sub_20BDDC1C8(v217, (uint64_t)v218, v219);
      sub_20BDDC1C8(v220, (uint64_t)"; next ", 7);
      if (SBYTE7(v274) < 0)
        operator delete(__p[0]);
      if ((char)v278 < 0)
        operator delete(v276[1]);
      goto LABEL_333;
    }
  }
  sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
  if ((v278 & 0x80u) == 0)
    v65 = &v276[1];
  else
    v65 = (void **)v276[1];
  if ((v278 & 0x80u) == 0)
    v66 = v278;
  else
    v66 = v277;
  v67 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v65, v66);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v67, (uint64_t)__p, 1);
  v68 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v68, (uint64_t)__p, 1);
  v69 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v69, (uint64_t)__p, 1);
  v70 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v71 = sub_20BDDC1C8(v70, (uint64_t)__p, 1);
  v72 = sub_20BDDC1C8(v71, (uint64_t)" failure ", 9);
  sub_20C09C088(__p);
  if ((SBYTE7(v274) & 0x80u) == 0)
    v73 = __p;
  else
    v73 = (void **)__p[0];
  if ((SBYTE7(v274) & 0x80u) == 0)
    v74 = BYTE7(v274);
  else
    v74 = (uint64_t)__p[1];
  v75 = sub_20BDDC1C8(v72, (uint64_t)v73, v74);
  std::ios_base::getloc((const std::ios_base *)((char *)v75 + *(_QWORD *)(*v75 - 24)));
  v76 = std::locale::use_facet(&v279, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v76->__vftable[2].~facet_0)(v76, 10);
  std::locale::~locale(&v279);
  std::ostream::put();
  std::ostream::flush();
  if (SBYTE7(v274) < 0)
    operator delete(__p[0]);
  if ((char)v278 < 0)
    operator delete(v276[1]);
  sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
  if ((v278 & 0x80u) == 0)
    v77 = &v276[1];
  else
    v77 = (void **)v276[1];
  if ((v278 & 0x80u) == 0)
    v78 = v278;
  else
    v78 = v277;
  v79 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v77, v78);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v79, (uint64_t)__p, 1);
  v80 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v80, (uint64_t)__p, 1);
  v81 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v81, (uint64_t)__p, 1);
  v82 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v83 = sub_20BDDC1C8(v82, (uint64_t)__p, 1);
  v84 = sub_20BDDC1C8(v83, (uint64_t)" failure ", 9);
  sub_20C09BF10(__p);
  if ((SBYTE7(v274) & 0x80u) == 0)
    v85 = __p;
  else
    v85 = (void **)__p[0];
  if ((SBYTE7(v274) & 0x80u) == 0)
    v86 = BYTE7(v274);
  else
    v86 = (uint64_t)__p[1];
  v87 = sub_20BDDC1C8(v84, (uint64_t)v85, v86);
  std::ios_base::getloc((const std::ios_base *)((char *)v87 + *(_QWORD *)(*v87 - 24)));
  v88 = std::locale::use_facet(&v279, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v88->__vftable[2].~facet_0)(v88, 10);
  std::locale::~locale(&v279);
  std::ostream::put();
  std::ostream::flush();
  if (SBYTE7(v274) < 0)
    operator delete(__p[0]);
  if ((char)v278 < 0)
    operator delete(v276[1]);
  *v4 = v269;
  v4[1] = v271;
  v270 = *v4;
  v272 = v4[1];
  sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
  if ((v278 & 0x80u) == 0)
    v89 = &v276[1];
  else
    v89 = (void **)v276[1];
  if ((v278 & 0x80u) == 0)
    v90 = v278;
  else
    v90 = v277;
  v91 = (_QWORD *)MEMORY[0x24BEDB310];
  v92 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v89, v90);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v92, (uint64_t)__p, 1);
  v93 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v93, (uint64_t)__p, 1);
  v94 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v94, (uint64_t)__p, 1);
  v95 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v96 = sub_20BDDC1C8(v95, (uint64_t)__p, 1);
  v97 = sub_20BDDC1C8(v96, (uint64_t)"  start  ", 9);
  sub_20C09C288(__p);
  if ((SBYTE7(v274) & 0x80u) == 0)
    v98 = __p;
  else
    v98 = (void **)__p[0];
  if ((SBYTE7(v274) & 0x80u) == 0)
    v99 = BYTE7(v274);
  else
    v99 = (uint64_t)__p[1];
  v100 = sub_20BDDC1C8(v97, (uint64_t)v98, v99);
  sub_20BDDC1C8(v100, (uint64_t)"; current ", 10);
  if (SBYTE7(v274) < 0)
    operator delete(__p[0]);
  if ((char)v278 < 0)
    operator delete(v276[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v91 + *(_QWORD *)(*v91 - 24)));
  v101 = std::locale::use_facet(v275, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v101->__vftable[2].~facet_0)(v101, 10);
  std::locale::~locale(v275);
  std::ostream::put();
  std::ostream::flush();
  sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
  if ((v278 & 0x80u) == 0)
    v102 = &v276[1];
  else
    v102 = (void **)v276[1];
  if ((v278 & 0x80u) == 0)
    v103 = v278;
  else
    v103 = v277;
  v104 = (_QWORD *)MEMORY[0x24BEDB310];
  v105 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v102, v103);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v105, (uint64_t)__p, 1);
  v106 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v106, (uint64_t)__p, 1);
  v107 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v107, (uint64_t)__p, 1);
  v108 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v109 = sub_20BDDC1C8(v108, (uint64_t)__p, 1);
  v110 = sub_20BDDC1C8(v109, (uint64_t)"  start  ", 9);
  sub_20C09C310(__p);
  if ((SBYTE7(v274) & 0x80u) == 0)
    v111 = __p;
  else
    v111 = (void **)__p[0];
  if ((SBYTE7(v274) & 0x80u) == 0)
    v112 = BYTE7(v274);
  else
    v112 = (uint64_t)__p[1];
  v113 = sub_20BDDC1C8(v110, (uint64_t)v111, v112);
  sub_20BDDC1C8(v113, (uint64_t)"; current ", 10);
  if (SBYTE7(v274) < 0)
    operator delete(__p[0]);
  if ((char)v278 < 0)
    operator delete(v276[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v104 + *(_QWORD *)(*v104 - 24)));
  v114 = std::locale::use_facet(v275, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v114->__vftable[2].~facet_0)(v114, 10);
  std::locale::~locale(v275);
  std::ostream::put();
  std::ostream::flush();
  v115 = v4[1];
  *(_OWORD *)__p = *v4;
  v274 = v115;
  if (sub_20C09C3A0((_QWORD *)a1))
  {
    v116 = v4[1];
    *(_OWORD *)&v275[0].__locale_ = *v4;
    *(_OWORD *)v276 = v116;
    v117 = sub_20C08DDF4((_QWORD *)a1);
    v118 = *(_OWORD *)v276;
    *v4 = *(_OWORD *)&v275[0].__locale_;
    v4[1] = v118;
    if ((v117 & 1) == 0)
    {
      sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
      if ((v278 & 0x80u) == 0)
        v221 = &v276[1];
      else
        v221 = (void **)v276[1];
      if ((v278 & 0x80u) == 0)
        v222 = v278;
      else
        v222 = v277;
      v223 = (_QWORD *)MEMORY[0x24BEDB310];
      v224 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v221, v222);
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v224, (uint64_t)__p, 1);
      v225 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v225, (uint64_t)__p, 1);
      v226 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 40;
      sub_20BDDC1C8(v226, (uint64_t)__p, 1);
      v227 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 41;
      v228 = sub_20BDDC1C8(v227, (uint64_t)__p, 1);
      v229 = sub_20BDDC1C8(v228, (uint64_t)" success ", 9);
      sub_20C09C310(__p);
      if ((SBYTE7(v274) & 0x80u) == 0)
        v230 = __p;
      else
        v230 = (void **)__p[0];
      if ((SBYTE7(v274) & 0x80u) == 0)
        v231 = BYTE7(v274);
      else
        v231 = (uint64_t)__p[1];
      v232 = sub_20BDDC1C8(v229, (uint64_t)v230, v231);
      sub_20BDDC1C8(v232, (uint64_t)"; next ", 7);
      if (SBYTE7(v274) < 0)
        operator delete(__p[0]);
      if ((char)v278 < 0)
        operator delete(v276[1]);
      goto LABEL_301;
    }
  }
  v119 = v274;
  *v4 = *(_OWORD *)__p;
  v4[1] = v119;
  sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
  if ((v278 & 0x80u) == 0)
    v120 = &v276[1];
  else
    v120 = (void **)v276[1];
  if ((v278 & 0x80u) == 0)
    v121 = v278;
  else
    v121 = v277;
  v122 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v120, v121);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v122, (uint64_t)__p, 1);
  v123 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v123, (uint64_t)__p, 1);
  v124 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v124, (uint64_t)__p, 1);
  v125 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v126 = sub_20BDDC1C8(v125, (uint64_t)__p, 1);
  v127 = sub_20BDDC1C8(v126, (uint64_t)" failure ", 9);
  sub_20C09C310(__p);
  if ((SBYTE7(v274) & 0x80u) == 0)
    v128 = __p;
  else
    v128 = (void **)__p[0];
  if ((SBYTE7(v274) & 0x80u) == 0)
    v129 = BYTE7(v274);
  else
    v129 = (uint64_t)__p[1];
  v130 = sub_20BDDC1C8(v127, (uint64_t)v128, v129);
  std::ios_base::getloc((const std::ios_base *)((char *)v130 + *(_QWORD *)(*v130 - 24)));
  v131 = std::locale::use_facet(&v279, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v131->__vftable[2].~facet_0)(v131, 10);
  std::locale::~locale(&v279);
  std::ostream::put();
  std::ostream::flush();
  if (SBYTE7(v274) < 0)
    operator delete(__p[0]);
  if ((char)v278 < 0)
    operator delete(v276[1]);
  sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
  if ((v278 & 0x80u) == 0)
    v132 = &v276[1];
  else
    v132 = (void **)v276[1];
  if ((v278 & 0x80u) == 0)
    v133 = v278;
  else
    v133 = v277;
  v134 = (_QWORD *)MEMORY[0x24BEDB310];
  v135 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v132, v133);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v135, (uint64_t)__p, 1);
  v136 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v136, (uint64_t)__p, 1);
  v137 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v137, (uint64_t)__p, 1);
  v138 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v139 = sub_20BDDC1C8(v138, (uint64_t)__p, 1);
  v140 = sub_20BDDC1C8(v139, (uint64_t)"  start  ", 9);
  sub_20C09C40C(__p);
  if ((SBYTE7(v274) & 0x80u) == 0)
    v141 = __p;
  else
    v141 = (void **)__p[0];
  if ((SBYTE7(v274) & 0x80u) == 0)
    v142 = BYTE7(v274);
  else
    v142 = (uint64_t)__p[1];
  v143 = sub_20BDDC1C8(v140, (uint64_t)v141, v142);
  sub_20BDDC1C8(v143, (uint64_t)"; current ", 10);
  if (SBYTE7(v274) < 0)
    operator delete(__p[0]);
  if ((char)v278 < 0)
    operator delete(v276[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v134 + *(_QWORD *)(*v134 - 24)));
  v144 = std::locale::use_facet(v275, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v144->__vftable[2].~facet_0)(v144, 10);
  std::locale::~locale(v275);
  std::ostream::put();
  std::ostream::flush();
  if (sub_20C09C49C((_QWORD *)a1))
  {
    v145 = v4[1];
    *(_OWORD *)&v275[0].__locale_ = *v4;
    *(_OWORD *)v276 = v145;
    v146 = sub_20C08DDF4((_QWORD *)a1);
    v147 = *(_OWORD *)v276;
    *v4 = *(_OWORD *)&v275[0].__locale_;
    v4[1] = v147;
    if ((v146 & 1) == 0)
    {
      sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
      if ((v278 & 0x80u) == 0)
        v233 = &v276[1];
      else
        v233 = (void **)v276[1];
      if ((v278 & 0x80u) == 0)
        v234 = v278;
      else
        v234 = v277;
      v223 = (_QWORD *)MEMORY[0x24BEDB310];
      v235 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v233, v234);
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v235, (uint64_t)__p, 1);
      v236 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v236, (uint64_t)__p, 1);
      v237 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 40;
      sub_20BDDC1C8(v237, (uint64_t)__p, 1);
      v238 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 41;
      v239 = sub_20BDDC1C8(v238, (uint64_t)__p, 1);
      v240 = sub_20BDDC1C8(v239, (uint64_t)" success ", 9);
      sub_20C09C40C(__p);
      if ((SBYTE7(v274) & 0x80u) == 0)
        v241 = __p;
      else
        v241 = (void **)__p[0];
      if ((SBYTE7(v274) & 0x80u) == 0)
        v242 = BYTE7(v274);
      else
        v242 = (uint64_t)__p[1];
      v243 = sub_20BDDC1C8(v240, (uint64_t)v241, v242);
      sub_20BDDC1C8(v243, (uint64_t)"; next ", 7);
      if (SBYTE7(v274) < 0)
        operator delete(__p[0]);
      if ((char)v278 < 0)
        operator delete(v276[1]);
LABEL_301:
      sub_20C088CD8(a1);
      std::ios_base::getloc((const std::ios_base *)((char *)v223 + *(_QWORD *)(*v223 - 24)));
      v244 = std::locale::use_facet(v275, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v244->__vftable[2].~facet_0)(v244, 10);
      std::locale::~locale(v275);
      std::ostream::put();
      std::ostream::flush();
      sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
      if ((v278 & 0x80u) == 0)
        v245 = &v276[1];
      else
        v245 = (void **)v276[1];
      if ((v278 & 0x80u) == 0)
        v246 = v278;
      else
        v246 = v277;
      v247 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v245, v246);
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v247, (uint64_t)__p, 1);
      v248 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v248, (uint64_t)__p, 1);
      v249 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 40;
      sub_20BDDC1C8(v249, (uint64_t)__p, 1);
      v250 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 41;
      v251 = sub_20BDDC1C8(v250, (uint64_t)__p, 1);
      v252 = sub_20BDDC1C8(v251, (uint64_t)"  apply  ", 9);
      sub_20C09C288(__p);
      if ((SBYTE7(v274) & 0x80u) == 0)
        v253 = __p;
      else
        v253 = (void **)__p[0];
      if ((SBYTE7(v274) & 0x80u) == 0)
        v254 = BYTE7(v274);
      else
        v254 = (uint64_t)__p[1];
      v255 = sub_20BDDC1C8(v252, (uint64_t)v253, v254);
      std::ios_base::getloc((const std::ios_base *)((char *)v255 + *(_QWORD *)(*v255 - 24)));
      v256 = std::locale::use_facet(&v279, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v256->__vftable[2].~facet_0)(v256, 10);
      std::locale::~locale(&v279);
      std::ostream::put();
      std::ostream::flush();
      if (SBYTE7(v274) < 0)
        operator delete(__p[0]);
      if ((char)v278 < 0)
        operator delete(v276[1]);
      *((_BYTE *)sub_20C09C178(a2) + 8) = 0;
      sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
      if ((v278 & 0x80u) == 0)
        v257 = &v276[1];
      else
        v257 = (void **)v276[1];
      if ((v278 & 0x80u) == 0)
        v258 = v278;
      else
        v258 = v277;
      v211 = (_QWORD *)MEMORY[0x24BEDB310];
      v259 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v257, v258);
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v259, (uint64_t)__p, 1);
      v260 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 58;
      sub_20BDDC1C8(v260, (uint64_t)__p, 1);
      v261 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 40;
      sub_20BDDC1C8(v261, (uint64_t)__p, 1);
      v262 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p[0]) = 41;
      v263 = sub_20BDDC1C8(v262, (uint64_t)__p, 1);
      v264 = sub_20BDDC1C8(v263, (uint64_t)" success ", 9);
      sub_20C09C288(__p);
      if ((SBYTE7(v274) & 0x80u) == 0)
        v265 = __p;
      else
        v265 = (void **)__p[0];
      if ((SBYTE7(v274) & 0x80u) == 0)
        v266 = BYTE7(v274);
      else
        v266 = (uint64_t)__p[1];
      v267 = sub_20BDDC1C8(v264, (uint64_t)v265, v266);
      sub_20BDDC1C8(v267, (uint64_t)"; next ", 7);
      if (SBYTE7(v274) < 0)
        operator delete(__p[0]);
      if ((char)v278 < 0)
        operator delete(v276[1]);
LABEL_333:
      sub_20C088CD8(a1);
      std::ios_base::getloc((const std::ios_base *)((char *)v211 + *(_QWORD *)(*v211 - 24)));
      v268 = std::locale::use_facet(v275, MEMORY[0x24BEDB350]);
      ((void (*)(const std::locale::facet *, uint64_t))v268->__vftable[2].~facet_0)(v268, 10);
      std::locale::~locale(v275);
      std::ostream::put();
      std::ostream::flush();
      return 1;
    }
  }
  sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
  if ((v278 & 0x80u) == 0)
    v148 = &v276[1];
  else
    v148 = (void **)v276[1];
  if ((v278 & 0x80u) == 0)
    v149 = v278;
  else
    v149 = v277;
  v150 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v148, v149);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v150, (uint64_t)__p, 1);
  v151 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v151, (uint64_t)__p, 1);
  v152 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v152, (uint64_t)__p, 1);
  v153 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v154 = sub_20BDDC1C8(v153, (uint64_t)__p, 1);
  v155 = sub_20BDDC1C8(v154, (uint64_t)" failure ", 9);
  sub_20C09C40C(__p);
  if ((SBYTE7(v274) & 0x80u) == 0)
    v156 = __p;
  else
    v156 = (void **)__p[0];
  if ((SBYTE7(v274) & 0x80u) == 0)
    v157 = BYTE7(v274);
  else
    v157 = (uint64_t)__p[1];
  v158 = sub_20BDDC1C8(v155, (uint64_t)v156, v157);
  std::ios_base::getloc((const std::ios_base *)((char *)v158 + *(_QWORD *)(*v158 - 24)));
  v159 = std::locale::use_facet(&v279, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v159->__vftable[2].~facet_0)(v159, 10);
  std::locale::~locale(&v279);
  std::ostream::put();
  std::ostream::flush();
  if (SBYTE7(v274) < 0)
    operator delete(__p[0]);
  if ((char)v278 < 0)
    operator delete(v276[1]);
  sub_20C01AE64((uint64_t)v275, (uint64_t)v4, v5);
  if ((v278 & 0x80u) == 0)
    v160 = &v276[1];
  else
    v160 = (void **)v276[1];
  if ((v278 & 0x80u) == 0)
    v161 = v278;
  else
    v161 = v277;
  v162 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v160, v161);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v162, (uint64_t)__p, 1);
  v163 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v163, (uint64_t)__p, 1);
  v164 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v164, (uint64_t)__p, 1);
  v165 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v166 = sub_20BDDC1C8(v165, (uint64_t)__p, 1);
  v167 = sub_20BDDC1C8(v166, (uint64_t)" failure ", 9);
  sub_20C09C288(__p);
  if ((SBYTE7(v274) & 0x80u) == 0)
    v168 = __p;
  else
    v168 = (void **)__p[0];
  if ((SBYTE7(v274) & 0x80u) == 0)
    v169 = BYTE7(v274);
  else
    v169 = (uint64_t)__p[1];
  v170 = sub_20BDDC1C8(v167, (uint64_t)v168, v169);
  std::ios_base::getloc((const std::ios_base *)((char *)v170 + *(_QWORD *)(*v170 - 24)));
  v171 = std::locale::use_facet(&v279, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v171->__vftable[2].~facet_0)(v171, 10);
  std::locale::~locale(&v279);
  std::ostream::put();
  std::ostream::flush();
  if (SBYTE7(v274) < 0)
    operator delete(__p[0]);
  if ((char)v278 < 0)
    operator delete(v276[1]);
  result = 0;
  *v4 = v270;
  v4[1] = v272;
  return result;
}

void sub_20C09BD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::locale a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _OWORD *v26;

  if (a26 < 0)
    operator delete(__p);
  *v26 = a9;
  v26[1] = a10;
  _Unwind_Resume(exception_object);
}

void sub_20C09BF10(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_111BooleanTrueE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_111BooleanTrueE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09BF84(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C09BF98(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB3840 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB3840 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09C014(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C09C028(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t v3;

  v1 = (_DWORD *)a1[1];
  if (a1[5] - (_QWORD)v1 < 4uLL || *v1 != 1702195796)
    return 0;
  v3 = a1[2] + 4;
  a1[1] = v1 + 1;
  a1[2] = v3;
  a1[4] += 4;
  return 1;
}

void sub_20C09C088(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB3887 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB3887 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09C104(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C09C118(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t v3;

  v1 = (_DWORD *)a1[1];
  if (a1[5] - (_QWORD)v1 < 4uLL || *v1 != 1702195828)
    return 0;
  v3 = a1[2] + 4;
  a1[1] = v1 + 1;
  a1[2] = v3;
  a1[4] += 4;
  return 1;
}

void *sub_20C09C178(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  void *result;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v2
    || (v3 = *(const void **)(v2 - 8)) == 0
    || (result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_24C5275D0, (const struct __class_type_info *)&unk_24C5276A0, 0)) == 0)
  {
    v5 = operator new(0x10uLL);
    *v5 = &off_24C5276C8;
    v5[1] = 0;
    v6 = v5;
    sub_20C08DF60((char **)a1, (uint64_t *)&v6);
    if (v6)
      (*(void (**)(_QWORD *))(*v6 + 8))(v6);
    return *(void **)(*(_QWORD *)(a1 + 8) - 8);
  }
  return result;
}

void sub_20C09C20C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C09C234@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  uint64_t result;

  v4 = operator new(0x10uLL);
  result = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ConstantNode<BOOL>::ConstantNode((uint64_t)v4, *(_BYTE *)(a1 + 8));
  *a2 = v4;
  return result;
}

void sub_20C09C274(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C09C288(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112BooleanFalseE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112BooleanFalseE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09C2FC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C09C310(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB395BLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB395BLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09C38C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C09C3A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = a1[1];
  if ((unint64_t)(a1[5] - v1) < 5)
    return 0;
  if (*(_DWORD *)v1 != 1936482630 || *(_BYTE *)(v1 + 4) != 101)
    return 0;
  v4 = a1[2] + 5;
  a1[1] = v1 + 5;
  a1[2] = v4;
  a1[4] += 5;
  return 1;
}

void sub_20C09C40C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB39A7 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB39A7 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09C488(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C09C49C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;

  v1 = a1[1];
  if ((unint64_t)(a1[5] - v1) < 5)
    return 0;
  if (*(_DWORD *)v1 != 1936482662 || *(_BYTE *)(v1 + 4) != 101)
    return 0;
  v4 = a1[2] + 5;
  a1[1] = v1 + 5;
  a1[2] = v4;
  a1[4] += 5;
  return 1;
}

void sub_20C09C508(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14NoneE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_14NoneE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09C57C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C09C590(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB3A2CLL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB3A2CLL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09C60C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C09C620(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t v3;

  v1 = (_DWORD *)a1[1];
  if (a1[5] - (_QWORD)v1 < 4uLL || *v1 != 1701736270)
    return 0;
  v3 = a1[2] + 4;
  a1[1] = v1 + 1;
  a1[2] = v3;
  a1[4] += 4;
  return 1;
}

void sub_20C09C680(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB3A73 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB3A73 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09C6FC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C09C710(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t v3;

  v1 = (_DWORD *)a1[1];
  if (a1[5] - (_QWORD)v1 < 4uLL || *v1 != 1701736302)
    return 0;
  v3 = a1[2] + 4;
  a1[1] = v1 + 1;
  a1[2] = v3;
  a1[4] += 4;
  return 1;
}

void *sub_20C09C770(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  void *result;
  _QWORD *v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v2
    || (v3 = *(const void **)(v2 - 8)) == 0
    || (result = __dynamic_cast(v3, (const struct __class_type_info *)&unk_24C5275D0, (const struct __class_type_info *)&unk_24C5276E0, 0)) == 0)
  {
    v5 = operator new(8uLL);
    *v5 = &off_24C527708;
    v6 = v5;
    sub_20C08DF60((char **)a1, (uint64_t *)&v6);
    result = v6;
    if (v6)
      return (void *)(*(uint64_t (**)(_QWORD *))(*v6 + 8))(v6);
  }
  return result;
}

void sub_20C09C7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C09C824@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(8uLL);
  result = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::NoneNode::NoneNode(v2);
  *a1 = v2;
  return result;
}

void sub_20C09C854(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C09C868(uint64_t a1, char **a2)
{
  __int128 v5;
  __int128 v6;

  sub_20C09C930(a1);
  sub_20C09CF4C(a1);
  v5 = *(_OWORD *)(a1 + 8);
  v6 = *(_OWORD *)(a1 + 24);
  if (sub_20C09D568(a1, a2) && (sub_20C09DC40(a1) & 1) != 0)
  {
    sub_20C09D134(a1);
    sub_20C09FC24(a1, a2);
    sub_20C0A04AC(a1);
    sub_20C09CB18(a1);
    return 1;
  }
  else
  {
    *(_OWORD *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + 24) = v6;
    sub_20C09D31C(a1);
    sub_20C09CD00(a1);
    return 0;
  }
}

void sub_20C09C920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C09C930(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)"  start  ", 9);
  sub_20C09CEC4(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; current ", 10);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C09CAD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C09CB18(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)" success ", 9);
  sub_20C09CEC4(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; next ", 7);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C09CCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C09CD00(uint64_t a1)
{
  void **v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  unsigned __int8 v17;
  std::locale v18;

  sub_20C01AE64((uint64_t)&v15, a1 + 8, (__int128 *)(a1 + 48));
  if ((v17 & 0x80u) == 0)
    v1 = v16;
  else
    v1 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v2 = v17;
  else
    v2 = (uint64_t)v16[1];
  v3 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v1, v2);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v3, (uint64_t)__p, 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v4, (uint64_t)__p, 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v7 = sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v8 = sub_20BDDC1C8(v7, (uint64_t)" failure ", 9);
  sub_20C09CEC4(__p);
  if ((v14 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v10 = v14;
  else
    v10 = (uint64_t)__p[1];
  v11 = sub_20BDDC1C8(v8, (uint64_t)v9, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  v12 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if ((char)v17 < 0)
    operator delete(v16[0]);
}

void sub_20C09CE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C09CEC4(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18FunctionE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_18FunctionE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09CF38(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C09CF4C(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)"  start  ", 9);
  sub_20C09D4E0(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; current ", 10);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C09D0EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C09D134(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)" success ", 9);
  sub_20C09D4E0(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; next ", 7);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C09D2D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C09D31C(uint64_t a1)
{
  void **v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  unsigned __int8 v17;
  std::locale v18;

  sub_20C01AE64((uint64_t)&v15, a1 + 8, (__int128 *)(a1 + 48));
  if ((v17 & 0x80u) == 0)
    v1 = v16;
  else
    v1 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v2 = v17;
  else
    v2 = (uint64_t)v16[1];
  v3 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v1, v2);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v3, (uint64_t)__p, 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v4, (uint64_t)__p, 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v7 = sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v8 = sub_20BDDC1C8(v7, (uint64_t)" failure ", 9);
  sub_20C09D4E0(__p);
  if ((v14 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v10 = v14;
  else
    v10 = (uint64_t)__p[1];
  v11 = sub_20BDDC1C8(v8, (uint64_t)v9, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  v12 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if ((char)v17 < 0)
    operator delete(v16[0]);
}

void sub_20C09D498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C09D4E0(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112FunctionNameENS3_21FunctionArgumentStartEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl3seqIJN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112FunctionNameENS3_21FunctionArgumentStartEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09D554(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C09D568(uint64_t a1, char **a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *p_p;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  const std::locale::facet *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  const std::locale::facet *v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  const std::locale::facet *v57;
  __int128 v58;
  __int128 v60;
  __int128 v61;
  uint64_t v62;
  void *__p;
  uint64_t v64;
  unsigned __int8 v65;
  std::locale v66;
  void *v67;
  uint64_t v68;
  unsigned __int8 v69;
  std::locale v70;

  v4 = (_OWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 24);
  v60 = *(_OWORD *)(a1 + 8);
  v61 = v5;
  v62 = a1 + 8;
  v6 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)&v66, a1 + 8, (__int128 *)(a1 + 48));
  if ((v69 & 0x80u) == 0)
    v7 = &v67;
  else
    v7 = v67;
  if ((v69 & 0x80u) == 0)
    v8 = v69;
  else
    v8 = v68;
  v9 = (_QWORD *)MEMORY[0x24BEDB310];
  v10 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v7, v8);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v10, (uint64_t)&__p, 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v11, (uint64_t)&__p, 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v12, (uint64_t)&__p, 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v14 = sub_20BDDC1C8(v13, (uint64_t)&__p, 1);
  v15 = sub_20BDDC1C8(v14, (uint64_t)"  start  ", 9);
  sub_20C09E624(&__p);
  if ((v65 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v65 & 0x80u) == 0)
    v17 = v65;
  else
    v17 = v64;
  v18 = sub_20BDDC1C8(v15, (uint64_t)p_p, v17);
  sub_20BDDC1C8(v18, (uint64_t)"; current ", 10);
  if ((char)v65 < 0)
    operator delete(__p);
  if ((char)v69 < 0)
    operator delete(v67);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v19 = std::locale::use_facet(&v66, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale(&v66);
  std::ostream::put();
  std::ostream::flush();
  v20 = sub_20C08DD98((_QWORD *)a1);
  if ((_DWORD)v20)
  {
    while ((sub_20C08DDF4((_QWORD *)a1) & 1) != 0)
      ;
    sub_20C01AE64((uint64_t)&v66, (uint64_t)v4, v6);
    if ((v69 & 0x80u) == 0)
      v21 = &v67;
    else
      v21 = v67;
    if ((v69 & 0x80u) == 0)
      v22 = v69;
    else
      v22 = v68;
    v23 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v21, v22);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v23, (uint64_t)&__p, 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v24, (uint64_t)&__p, 1);
    v25 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v25, (uint64_t)&__p, 1);
    v26 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v27 = sub_20BDDC1C8(v26, (uint64_t)&__p, 1);
    v28 = sub_20BDDC1C8(v27, (uint64_t)"  apply  ", 9);
    sub_20C09E624(&__p);
    if ((v65 & 0x80u) == 0)
      v29 = &__p;
    else
      v29 = __p;
    if ((v65 & 0x80u) == 0)
      v30 = v65;
    else
      v30 = v64;
    v31 = sub_20BDDC1C8(v28, (uint64_t)v29, v30);
    std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(*v31 - 24)));
    v32 = std::locale::use_facet(&v70, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v32->__vftable[2].~facet_0)(v32, 10);
    std::locale::~locale(&v70);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v65 < 0)
      operator delete(__p);
    if ((char)v69 < 0)
      operator delete(v67);
    sub_20C09E6AC((char **)&v60, a1, a2);
    sub_20C01AE64((uint64_t)&v66, (uint64_t)v4, v6);
    if ((v69 & 0x80u) == 0)
      v33 = &v67;
    else
      v33 = v67;
    if ((v69 & 0x80u) == 0)
      v34 = v69;
    else
      v34 = v68;
    v35 = (_QWORD *)MEMORY[0x24BEDB310];
    v36 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v33, v34);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v36, (uint64_t)&__p, 1);
    v37 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v37, (uint64_t)&__p, 1);
    v38 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v38, (uint64_t)&__p, 1);
    v39 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v40 = sub_20BDDC1C8(v39, (uint64_t)&__p, 1);
    v41 = sub_20BDDC1C8(v40, (uint64_t)" success ", 9);
    sub_20C09E624(&__p);
    if ((v65 & 0x80u) == 0)
      v42 = &__p;
    else
      v42 = __p;
    if ((v65 & 0x80u) == 0)
      v43 = v65;
    else
      v43 = v64;
    v44 = sub_20BDDC1C8(v41, (uint64_t)v42, v43);
    sub_20BDDC1C8(v44, (uint64_t)"; next ", 7);
    if ((char)v65 < 0)
      operator delete(__p);
    if ((char)v69 < 0)
      operator delete(v67);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
    v45 = std::locale::use_facet(&v66, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v45->__vftable[2].~facet_0)(v45, 10);
    std::locale::~locale(&v66);
    std::ostream::put();
    std::ostream::flush();
  }
  else
  {
    sub_20C01AE64((uint64_t)&v66, (uint64_t)v4, v6);
    if ((v69 & 0x80u) == 0)
      v46 = &v67;
    else
      v46 = v67;
    if ((v69 & 0x80u) == 0)
      v47 = v69;
    else
      v47 = v68;
    v48 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v46, v47);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v48, (uint64_t)&__p, 1);
    v49 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v49, (uint64_t)&__p, 1);
    v50 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v50, (uint64_t)&__p, 1);
    v51 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v52 = sub_20BDDC1C8(v51, (uint64_t)&__p, 1);
    v53 = sub_20BDDC1C8(v52, (uint64_t)" failure ", 9);
    sub_20C09E624(&__p);
    if ((v65 & 0x80u) == 0)
      v54 = &__p;
    else
      v54 = __p;
    if ((v65 & 0x80u) == 0)
      v55 = v65;
    else
      v55 = v64;
    v56 = sub_20BDDC1C8(v53, (uint64_t)v54, v55);
    std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(_QWORD *)(*v56 - 24)));
    v57 = std::locale::use_facet(&v70, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
    std::locale::~locale(&v70);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v65 < 0)
      operator delete(__p);
    if ((char)v69 < 0)
      operator delete(v67);
    v58 = v61;
    *v4 = v60;
    v4[1] = v58;
  }
  return v20;
}

void sub_20C09DBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _OWORD *v27;

  if (a27 < 0)
    operator delete(__p);
  *v27 = a9;
  v27[1] = a10;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C09DC40(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *p_p;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  _BYTE *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  const std::locale::facet *v57;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  _QWORD *v69;
  const std::locale::facet *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  _QWORD *v81;
  const std::locale::facet *v82;
  void *__p;
  uint64_t v84;
  unsigned __int8 v85;
  std::locale v86;
  void *v87;
  uint64_t v88;
  unsigned __int8 v89;
  std::locale v90;

  v2 = a1 + 8;
  v3 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)&v86, a1 + 8, (__int128 *)(a1 + 48));
  if ((v89 & 0x80u) == 0)
    v4 = &v87;
  else
    v4 = v87;
  if ((v89 & 0x80u) == 0)
    v5 = v89;
  else
    v5 = v88;
  v6 = (_QWORD *)MEMORY[0x24BEDB310];
  v7 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v4, v5);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v7, (uint64_t)&__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v8, (uint64_t)&__p, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v9, (uint64_t)&__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v11 = sub_20BDDC1C8(v10, (uint64_t)&__p, 1);
  v12 = sub_20BDDC1C8(v11, (uint64_t)"  start  ", 9);
  sub_20C09F53C(&__p);
  if ((v85 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v85 & 0x80u) == 0)
    v14 = v85;
  else
    v14 = v84;
  v15 = sub_20BDDC1C8(v12, (uint64_t)p_p, v14);
  sub_20BDDC1C8(v15, (uint64_t)"; current ", 10);
  if ((char)v85 < 0)
    operator delete(__p);
  if ((char)v89 < 0)
    operator delete(v87);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v16 = std::locale::use_facet(&v86, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v86);
  std::ostream::put();
  std::ostream::flush();
  while ((sub_20C09F5C4(a1) & 1) != 0)
    ;
  sub_20C01AE64((uint64_t)&v86, v2, v3);
  if ((v89 & 0x80u) == 0)
    v17 = &v87;
  else
    v17 = v87;
  if ((v89 & 0x80u) == 0)
    v18 = v89;
  else
    v18 = v88;
  v19 = (_QWORD *)MEMORY[0x24BEDB310];
  v20 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v17, v18);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v20, (uint64_t)&__p, 1);
  v21 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v21, (uint64_t)&__p, 1);
  v22 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v22, (uint64_t)&__p, 1);
  v23 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v24 = sub_20BDDC1C8(v23, (uint64_t)&__p, 1);
  v25 = sub_20BDDC1C8(v24, (uint64_t)"  start  ", 9);
  sub_20C09FB94(&__p);
  if ((v85 & 0x80u) == 0)
    v26 = &__p;
  else
    v26 = __p;
  if ((v85 & 0x80u) == 0)
    v27 = v85;
  else
    v27 = v84;
  v28 = sub_20BDDC1C8(v25, (uint64_t)v26, v27);
  sub_20BDDC1C8(v28, (uint64_t)"; current ", 10);
  if ((char)v85 < 0)
    operator delete(__p);
  if ((char)v89 < 0)
    operator delete(v87);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v29 = std::locale::use_facet(&v86, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v86);
  std::ostream::put();
  std::ostream::flush();
  v30 = *(_BYTE **)(a1 + 8);
  if (v30 == *(_BYTE **)(a1 + 40) || *v30 != 40)
  {
    sub_20C01AE64((uint64_t)&v86, v2, v3);
    if ((v89 & 0x80u) == 0)
      v59 = &v87;
    else
      v59 = v87;
    if ((v89 & 0x80u) == 0)
      v60 = v89;
    else
      v60 = v88;
    v61 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v59, v60);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v61, (uint64_t)&__p, 1);
    v62 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v62, (uint64_t)&__p, 1);
    v63 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v63, (uint64_t)&__p, 1);
    v64 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v65 = sub_20BDDC1C8(v64, (uint64_t)&__p, 1);
    v66 = sub_20BDDC1C8(v65, (uint64_t)" failure ", 9);
    sub_20C09FB94(&__p);
    if ((v85 & 0x80u) == 0)
      v67 = &__p;
    else
      v67 = __p;
    if ((v85 & 0x80u) == 0)
      v68 = v85;
    else
      v68 = v84;
    v69 = sub_20BDDC1C8(v66, (uint64_t)v67, v68);
    std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(*v69 - 24)));
    v70 = std::locale::use_facet(&v90, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
    std::locale::~locale(&v90);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v85 < 0)
      operator delete(__p);
    if ((char)v89 < 0)
      operator delete(v87);
    sub_20C01AE64((uint64_t)&v86, v2, v3);
    if ((v89 & 0x80u) == 0)
      v71 = &v87;
    else
      v71 = v87;
    if ((v89 & 0x80u) == 0)
      v72 = v89;
    else
      v72 = v88;
    v73 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v71, v72);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v73, (uint64_t)&__p, 1);
    v74 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v74, (uint64_t)&__p, 1);
    v75 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v75, (uint64_t)&__p, 1);
    v76 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v77 = sub_20BDDC1C8(v76, (uint64_t)&__p, 1);
    v78 = sub_20BDDC1C8(v77, (uint64_t)" failure ", 9);
    sub_20C09F53C(&__p);
    if ((v85 & 0x80u) == 0)
      v79 = &__p;
    else
      v79 = __p;
    if ((v85 & 0x80u) == 0)
      v80 = v85;
    else
      v80 = v84;
    v81 = sub_20BDDC1C8(v78, (uint64_t)v79, v80);
    std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(_QWORD *)(*v81 - 24)));
    v82 = std::locale::use_facet(&v90, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
    std::locale::~locale(&v90);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v85 < 0)
      operator delete(__p);
    if ((char)v89 < 0)
      operator delete(v87);
    return 0;
  }
  else
  {
    v31 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 8) = v30 + 1;
    *(_QWORD *)(a1 + 16) = v31;
    ++*(_QWORD *)(a1 + 32);
    sub_20C01AE64((uint64_t)&v86, v2, v3);
    if ((v89 & 0x80u) == 0)
      v32 = &v87;
    else
      v32 = v87;
    if ((v89 & 0x80u) == 0)
      v33 = v89;
    else
      v33 = v88;
    v34 = (_QWORD *)MEMORY[0x24BEDB310];
    v35 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v32, v33);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v35, (uint64_t)&__p, 1);
    v36 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v36, (uint64_t)&__p, 1);
    v37 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v37, (uint64_t)&__p, 1);
    v38 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v39 = sub_20BDDC1C8(v38, (uint64_t)&__p, 1);
    v40 = sub_20BDDC1C8(v39, (uint64_t)" success ", 9);
    sub_20C09FB94(&__p);
    if ((v85 & 0x80u) == 0)
      v41 = &__p;
    else
      v41 = __p;
    if ((v85 & 0x80u) == 0)
      v42 = v85;
    else
      v42 = v84;
    v43 = sub_20BDDC1C8(v40, (uint64_t)v41, v42);
    sub_20BDDC1C8(v43, (uint64_t)"; next ", 7);
    if ((char)v85 < 0)
      operator delete(__p);
    if ((char)v89 < 0)
      operator delete(v87);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
    v44 = std::locale::use_facet(&v86, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
    std::locale::~locale(&v86);
    std::ostream::put();
    std::ostream::flush();
    while ((sub_20C09F5C4(a1) & 1) != 0)
      ;
    sub_20C01AE64((uint64_t)&v86, v2, v3);
    if ((v89 & 0x80u) == 0)
      v45 = &v87;
    else
      v45 = v87;
    if ((v89 & 0x80u) == 0)
      v46 = v89;
    else
      v46 = v88;
    v47 = (_QWORD *)MEMORY[0x24BEDB310];
    v48 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v45, v46);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v48, (uint64_t)&__p, 1);
    v49 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v49, (uint64_t)&__p, 1);
    v50 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v50, (uint64_t)&__p, 1);
    v51 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v52 = sub_20BDDC1C8(v51, (uint64_t)&__p, 1);
    v53 = sub_20BDDC1C8(v52, (uint64_t)" success ", 9);
    sub_20C09F53C(&__p);
    if ((v85 & 0x80u) == 0)
      v54 = &__p;
    else
      v54 = __p;
    if ((v85 & 0x80u) == 0)
      v55 = v85;
    else
      v55 = v84;
    v56 = sub_20BDDC1C8(v53, (uint64_t)v54, v55);
    sub_20BDDC1C8(v56, (uint64_t)"; next ", 7);
    if ((char)v85 < 0)
      operator delete(__p);
    if ((char)v89 < 0)
      operator delete(v87);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(_QWORD *)(*v47 - 24)));
    v57 = std::locale::use_facet(&v86, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
    std::locale::~locale(&v86);
    std::ostream::put();
    std::ostream::flush();
    return 1;
  }
}

void sub_20C09E580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C09E624(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112FunctionNameE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112FunctionNameE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09E698(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C09E6AC(char **a1, uint64_t a2, char **a3)
{
  _QWORD *v4;
  _BYTE *v5;
  void *__p[2];
  uint64_t v7;
  _QWORD *v8;

  sub_20BE93368(__p, *a1, *(char **)(a2 + 8), *(_QWORD *)(a2 + 8) - (_QWORD)*a1);
  v4 = operator new(0x38uLL);
  *v4 = off_24C527730;
  v5 = v4 + 1;
  if (SHIBYTE(v7) < 0)
  {
    sub_20BDDBFAC(v5, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)__p;
    v4[3] = v7;
  }
  v4[4] = 0;
  v4[5] = 0;
  v4[6] = 0;
  v8 = v4;
  sub_20C08DF60(a3, (uint64_t *)&v8);
  if (v8)
    (*(void (**)(_QWORD *))(*v8 + 8))(v8);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20C09E760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  void *v15;

  operator delete(v15);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C09E7A8(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C527730;
  v3 = (void **)(a1 + 32);
  sub_20C086448(&v3);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20C09E7FC(void **a1)
{
  void **v2;

  *a1 = off_24C527730;
  v2 = a1 + 4;
  sub_20C086448(&v2);
  if (*((char *)a1 + 31) < 0)
    operator delete(a1[1]);
  operator delete(a1);
}

void sub_20C09E854(__n128 *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const void **v6;
  const char *FunctionName;
  size_t v8;
  size_t v9;
  const void *v10;
  int v11;
  const char *v12;
  size_t v13;
  size_t v14;
  const void *v15;
  const char *v16;
  size_t v17;
  size_t v18;
  const void *v19;
  const char *v20;
  size_t v21;
  size_t v22;
  const void *v23;
  const char *v24;
  size_t v25;
  size_t v26;
  const void *v27;
  const char *v28;
  size_t v29;
  size_t v30;
  const void *v31;
  uint64_t *v32;
  _QWORD *v33;
  const char *v34;
  size_t v35;
  size_t v36;
  const void *v37;
  uint64_t *v38;
  const char *v39;
  size_t v40;
  size_t v41;
  const void *v42;
  uint64_t *v43;
  const char *v44;
  size_t v45;
  size_t v46;
  uint64_t v47;
  const void *v48;
  uint64_t *v49;
  const char *v50;
  char *v51;
  const char *v52;
  size_t v53;
  size_t v54;
  uint64_t v55;
  const void *v56;
  uint64_t *v57;
  const char *v58;
  char *v59;
  const char *v60;
  size_t v61;
  size_t v62;
  const void *v63;
  uint64_t *v64;
  const char *v65;
  size_t v66;
  size_t v67;
  const void *v68;
  uint64_t *v69;
  const char *v70;
  size_t v71;
  size_t v72;
  const void *v73;
  uint64_t *v74;
  const char *v75;
  size_t v76;
  size_t v77;
  const void *v78;
  void *v79;
  uint64_t v80;
  const char *v81;
  size_t v82;
  const char *v83;
  char *v84;
  int v85;
  const void *v86;
  void *v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;

  v6 = (const void **)&a1->n128_u64[1];
  FunctionName = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::IfNode::GetFunctionName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::IfNode *)a1);
  v8 = strlen(FunctionName);
  v9 = v8;
  if (a1[1].n128_i8[15] < 0)
  {
    if (v8 == a1[1].n128_u64[0])
    {
      if (v8 == -1)
        goto LABEL_256;
      v10 = *v6;
      goto LABEL_8;
    }
LABEL_9:
    v11 = 0;
    goto LABEL_10;
  }
  if (v8 != a1[1].n128_u8[15])
    goto LABEL_9;
  v10 = v6;
  if (v9 == -1)
LABEL_256:
    sub_20BEB9180();
LABEL_8:
  v8 = memcmp(v10, FunctionName, v9);
  if ((_DWORD)v8)
    goto LABEL_9;
  v32 = (uint64_t *)a1[2].n128_u64[0];
  if (a1[2].n128_u64[1] - (_QWORD)v32 == 16)
  {
    v33 = operator new(0x18uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::If2Node::If2Node(v33, v32, v32 + 1);
    goto LABEL_221;
  }
  *a3 = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      return;
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    return;
  }
  v11 = 1;
LABEL_10:
  v12 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::IfNode::GetFunctionName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::IfNode *)v8);
  v13 = strlen(v12);
  v14 = v13;
  if (a1[1].n128_i8[15] < 0)
  {
    if (v13 != a1[1].n128_u64[0])
      goto LABEL_18;
    if (v13 == -1)
      goto LABEL_257;
    v15 = *v6;
  }
  else
  {
    if (v13 != a1[1].n128_u8[15])
      goto LABEL_18;
    v15 = v6;
    if (v14 == -1)
LABEL_257:
      sub_20BEB9180();
  }
  if (!memcmp(v15, v12, v14))
  {
    v38 = (uint64_t *)a1[2].n128_u64[0];
    if (a1[2].n128_u64[1] - (_QWORD)v38 == 24)
    {
      v33 = operator new(0x20uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::If3Node::If3Node(v33, v38, v38 + 1, v38 + 2);
      goto LABEL_221;
    }
    *a3 = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      if (*(_QWORD *)(a2 + 8))
        return;
    }
    else if (*(_BYTE *)(a2 + 23))
    {
      return;
    }
    v11 = 1;
  }
LABEL_18:
  v16 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::equal_to>::GetFunctionName();
  v17 = strlen(v16);
  v18 = v17;
  if (a1[1].n128_i8[15] < 0)
  {
    if (v17 != a1[1].n128_u64[0])
      goto LABEL_26;
    if (v17 == -1)
      goto LABEL_258;
    v19 = *v6;
  }
  else
  {
    if (v17 != a1[1].n128_u8[15])
      goto LABEL_26;
    v19 = v6;
    if (v18 == -1)
LABEL_258:
      sub_20BEB9180();
  }
  if (!memcmp(v19, v16, v18))
  {
    v43 = (uint64_t *)a1[2].n128_u64[0];
    if (a1[2].n128_u64[1] - (_QWORD)v43 == 16)
    {
      v33 = operator new(0x18uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::equal_to>::ComparisonNode(v33, v43, v43 + 1);
      goto LABEL_221;
    }
    *a3 = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      if (*(_QWORD *)(a2 + 8))
        return;
    }
    else if (*(_BYTE *)(a2 + 23))
    {
      return;
    }
    v11 = 1;
  }
LABEL_26:
  v20 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::not_equal_to>::GetFunctionName();
  v21 = strlen(v20);
  v22 = v21;
  if (a1[1].n128_i8[15] < 0)
  {
    if (v21 != a1[1].n128_u64[0])
      goto LABEL_34;
    if (v21 == -1)
      goto LABEL_259;
    v23 = *v6;
  }
  else
  {
    if (v21 != a1[1].n128_u8[15])
      goto LABEL_34;
    v23 = v6;
    if (v22 == -1)
LABEL_259:
      sub_20BEB9180();
  }
  if (!memcmp(v23, v20, v22))
  {
    v49 = (uint64_t *)a1[2].n128_u64[0];
    if (a1[2].n128_u64[1] - (_QWORD)v49 == 16)
    {
      v33 = operator new(0x18uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::not_equal_to>::ComparisonNode(v33, v49, v49 + 1);
      goto LABEL_221;
    }
    *a3 = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      if (*(_QWORD *)(a2 + 8))
        return;
    }
    else if (*(_BYTE *)(a2 + 23))
    {
      return;
    }
    v11 = 1;
  }
LABEL_34:
  v24 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::less>::GetFunctionName();
  v25 = strlen(v24);
  v26 = v25;
  if (a1[1].n128_i8[15] < 0)
  {
    if (v25 != a1[1].n128_u64[0])
      goto LABEL_42;
    if (v25 == -1)
      goto LABEL_260;
    v27 = *v6;
  }
  else
  {
    if (v25 != a1[1].n128_u8[15])
      goto LABEL_42;
    v27 = v6;
    if (v26 == -1)
LABEL_260:
      sub_20BEB9180();
  }
  if (!memcmp(v27, v24, v26))
  {
    v57 = (uint64_t *)a1[2].n128_u64[0];
    if (a1[2].n128_u64[1] - (_QWORD)v57 == 16)
    {
      v33 = operator new(0x18uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::less>::ComparisonNode(v33, v57, v57 + 1);
      goto LABEL_221;
    }
    *a3 = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      if (*(_QWORD *)(a2 + 8))
        return;
    }
    else if (*(_BYTE *)(a2 + 23))
    {
      return;
    }
    v11 = 1;
  }
LABEL_42:
  v28 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::less_equal>::GetFunctionName();
  v29 = strlen(v28);
  v30 = v29;
  if (a1[1].n128_i8[15] < 0)
  {
    if (v29 != a1[1].n128_u64[0])
      goto LABEL_52;
    if (v29 == -1)
      goto LABEL_261;
    v31 = *v6;
  }
  else
  {
    if (v29 != a1[1].n128_u8[15])
      goto LABEL_52;
    v31 = v6;
    if (v30 == -1)
LABEL_261:
      sub_20BEB9180();
  }
  if (!memcmp(v31, v28, v30))
  {
    v64 = (uint64_t *)a1[2].n128_u64[0];
    if (a1[2].n128_u64[1] - (_QWORD)v64 == 16)
    {
      v33 = operator new(0x18uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::less_equal>::ComparisonNode(v33, v64, v64 + 1);
      goto LABEL_221;
    }
    *a3 = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      if (*(_QWORD *)(a2 + 8))
        return;
    }
    else if (*(_BYTE *)(a2 + 23))
    {
      return;
    }
    v11 = 1;
  }
LABEL_52:
  v34 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::greater>::GetFunctionName();
  v35 = strlen(v34);
  v36 = v35;
  if (a1[1].n128_i8[15] < 0)
  {
    if (v35 != a1[1].n128_u64[0])
      goto LABEL_62;
    if (v35 == -1)
      goto LABEL_262;
    v37 = *v6;
  }
  else
  {
    if (v35 != a1[1].n128_u8[15])
      goto LABEL_62;
    v37 = v6;
    if (v36 == -1)
LABEL_262:
      sub_20BEB9180();
  }
  if (!memcmp(v37, v34, v36))
  {
    v69 = (uint64_t *)a1[2].n128_u64[0];
    if (a1[2].n128_u64[1] - (_QWORD)v69 == 16)
    {
      v33 = operator new(0x18uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::greater>::ComparisonNode(v33, v69, v69 + 1);
      goto LABEL_221;
    }
    *a3 = 0;
    if (*(char *)(a2 + 23) < 0)
      v90 = *(_QWORD *)(a2 + 8);
    else
      v90 = *(unsigned __int8 *)(a2 + 23);
    if (v90)
      return;
    v11 = 1;
  }
LABEL_62:
  v39 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::greater_equal>::GetFunctionName();
  v40 = strlen(v39);
  v41 = v40;
  if (a1[1].n128_i8[15] < 0)
  {
    if (v40 != a1[1].n128_u64[0])
      goto LABEL_72;
    if (v40 == -1)
      goto LABEL_263;
    v42 = *v6;
  }
  else
  {
    if (v40 != a1[1].n128_u8[15])
      goto LABEL_72;
    v42 = v6;
    if (v41 == -1)
LABEL_263:
      sub_20BEB9180();
  }
  if (!memcmp(v42, v39, v41))
  {
    v74 = (uint64_t *)a1[2].n128_u64[0];
    if (a1[2].n128_u64[1] - (_QWORD)v74 == 16)
    {
      v33 = operator new(0x18uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ComparisonNode<std::greater_equal>::ComparisonNode(v33, v74, v74 + 1);
      goto LABEL_221;
    }
    *a3 = 0;
    if (*(char *)(a2 + 23) < 0)
      v92 = *(_QWORD *)(a2 + 8);
    else
      v92 = *(unsigned __int8 *)(a2 + 23);
    if (v92)
      return;
    v11 = 1;
  }
LABEL_72:
  v44 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::LogicalNode<std::logical_and>::GetFunctionName();
  v45 = strlen(v44);
  v46 = v45;
  v47 = a1[1].n128_u8[15];
  if (a1[1].n128_i8[15] < 0)
  {
    if (v45 != a1[1].n128_u64[0])
      goto LABEL_82;
    if (v45 == -1)
      goto LABEL_264;
    v48 = *v6;
  }
  else
  {
    if (v45 != v47)
      goto LABEL_82;
    v48 = v6;
    if (v46 == -1)
LABEL_264:
      sub_20BEB9180();
  }
  if (!memcmp(v48, v44, v46))
  {
    if (a1[2].n128_u64[1] - a1[2].n128_u64[0] > 0xF)
    {
      v33 = operator new(0x20uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::LogicalNode<std::logical_and>::LogicalNode(v33, a1 + 2);
      goto LABEL_221;
    }
    v79 = v6;
    if ((v47 & 0x80) != 0)
      v79 = (void *)*v6;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Function '%s' requires at least %zu arguments.", v50, v51, v79, 2);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v102;
    *(_QWORD *)(a2 + 16) = v103;
    *a3 = 0;
    if (*(char *)(a2 + 23) < 0)
      v80 = *(_QWORD *)(a2 + 8);
    else
      v80 = *(unsigned __int8 *)(a2 + 23);
    if (v80)
      return;
    v11 = 1;
  }
LABEL_82:
  v52 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::LogicalNode<std::logical_or>::GetFunctionName();
  v53 = strlen(v52);
  v54 = v53;
  v55 = a1[1].n128_u8[15];
  if (a1[1].n128_i8[15] < 0)
  {
    if (v53 != a1[1].n128_u64[0])
      goto LABEL_95;
    if (v53 == -1)
      goto LABEL_265;
    v56 = *v6;
  }
  else
  {
    if (v53 != v55)
      goto LABEL_95;
    v56 = v6;
    if (v54 == -1)
LABEL_265:
      sub_20BEB9180();
  }
  v53 = memcmp(v56, v52, v54);
  if (!(_DWORD)v53)
  {
    if (a1[2].n128_u64[1] - a1[2].n128_u64[0] > 0xF)
    {
      v33 = operator new(0x20uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::LogicalNode<std::logical_or>::LogicalNode(v33, a1 + 2);
      goto LABEL_221;
    }
    v87 = v6;
    if ((v55 & 0x80) != 0)
      v87 = (void *)*v6;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Function '%s' requires at least %zu arguments.", v58, v59, v87, 2);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v102;
    *(_QWORD *)(a2 + 16) = v103;
    *a3 = 0;
    if (*(char *)(a2 + 23) < 0)
      v88 = *(_QWORD *)(a2 + 8);
    else
      v88 = *(unsigned __int8 *)(a2 + 23);
    if (v88)
      return;
    v11 = 1;
  }
LABEL_95:
  v60 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::LogicalNotNode::GetFunctionName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::LogicalNotNode *)v53);
  v61 = strlen(v60);
  v62 = v61;
  if (a1[1].n128_i8[15] < 0)
  {
    if (v61 != a1[1].n128_u64[0])
      goto LABEL_108;
    if (v61 == -1)
      goto LABEL_266;
    v63 = *v6;
  }
  else
  {
    if (v61 != a1[1].n128_u8[15])
      goto LABEL_108;
    v63 = v6;
    if (v62 == -1)
LABEL_266:
      sub_20BEB9180();
  }
  v61 = memcmp(v63, v60, v62);
  if (!(_DWORD)v61)
  {
    v89 = (uint64_t *)a1[2].n128_u64[0];
    if (a1[2].n128_u64[1] - (_QWORD)v89 == 8)
    {
      v33 = operator new(0x10uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::LogicalNotNode::LogicalNotNode(v33, v89);
      goto LABEL_221;
    }
    *a3 = 0;
    if (*(char *)(a2 + 23) < 0)
      v95 = *(_QWORD *)(a2 + 8);
    else
      v95 = *(unsigned __int8 *)(a2 + 23);
    if (v95)
      return;
    v11 = 1;
  }
LABEL_108:
  v65 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ContainsNode::GetFunctionName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ContainsNode *)v61);
  v66 = strlen(v65);
  v67 = v66;
  if (a1[1].n128_i8[15] < 0)
  {
    if (v66 != a1[1].n128_u64[0])
      goto LABEL_121;
    if (v66 == -1)
      goto LABEL_267;
    v68 = *v6;
  }
  else
  {
    if (v66 != a1[1].n128_u8[15])
      goto LABEL_121;
    v68 = v6;
    if (v67 == -1)
LABEL_267:
      sub_20BEB9180();
  }
  v66 = memcmp(v68, v65, v67);
  if (!(_DWORD)v66)
  {
    v91 = (uint64_t *)a1[2].n128_u64[0];
    if (a1[2].n128_u64[1] - (_QWORD)v91 == 16)
    {
      v33 = operator new(0x18uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ContainsNode::ContainsNode(v33, v91, v91 + 1);
      goto LABEL_221;
    }
    *a3 = 0;
    if (*(char *)(a2 + 23) < 0)
      v96 = *(_QWORD *)(a2 + 8);
    else
      v96 = *(unsigned __int8 *)(a2 + 23);
    if (v96)
      return;
    v11 = 1;
  }
LABEL_121:
  v70 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::AtNode::GetFunctionName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::AtNode *)v66);
  v71 = strlen(v70);
  v72 = v71;
  if (a1[1].n128_i8[15] < 0)
  {
    if (v71 != a1[1].n128_u64[0])
      goto LABEL_134;
    if (v71 == -1)
      goto LABEL_268;
    v73 = *v6;
  }
  else
  {
    if (v71 != a1[1].n128_u8[15])
      goto LABEL_134;
    v73 = v6;
    if (v72 == -1)
LABEL_268:
      sub_20BEB9180();
  }
  v71 = memcmp(v73, v70, v72);
  if (!(_DWORD)v71)
  {
    v93 = (uint64_t *)a1[2].n128_u64[0];
    if (a1[2].n128_u64[1] - (_QWORD)v93 == 16)
    {
      v33 = operator new(0x18uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::AtNode::AtNode(v33, v93, v93 + 1);
      goto LABEL_221;
    }
    *a3 = 0;
    if (*(char *)(a2 + 23) < 0)
      v97 = *(_QWORD *)(a2 + 8);
    else
      v97 = *(unsigned __int8 *)(a2 + 23);
    if (v97)
      return;
    v11 = 1;
  }
LABEL_134:
  v75 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::LenNode::GetFunctionName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::LenNode *)v71);
  v76 = strlen(v75);
  v77 = v76;
  if (a1[1].n128_i8[15] < 0)
  {
    if (v76 == a1[1].n128_u64[0])
    {
      if (v76 == -1)
        goto LABEL_269;
      v78 = *v6;
LABEL_151:
      v76 = memcmp(v78, v75, v77);
      if ((_DWORD)v76)
        goto LABEL_152;
      v94 = (uint64_t *)a1[2].n128_u64[0];
      if (a1[2].n128_u64[1] - (_QWORD)v94 != 8)
      {
        *a3 = 0;
        if (*(char *)(a2 + 23) < 0)
          v98 = *(_QWORD *)(a2 + 8);
        else
          v98 = *(unsigned __int8 *)(a2 + 23);
        if (v98)
          return;
        v11 = 1;
        goto LABEL_152;
      }
      v33 = operator new(0x10uLL);
      pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::LenNode::LenNode(v33, v94);
LABEL_221:
      *a3 = v33;
      return;
    }
  }
  else if (v76 == a1[1].n128_u8[15])
  {
    v78 = v6;
    if (v77 == -1)
LABEL_269:
      sub_20BEB9180();
    goto LABEL_151;
  }
LABEL_152:
  v81 = pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::DefinedNode::GetFunctionName((pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::DefinedNode *)v76);
  v82 = strlen(v81);
  v84 = (char *)v82;
  v85 = a1[1].n128_i8[15];
  if (v85 < 0)
  {
    if (v82 != a1[1].n128_u64[0])
    {
      if (v11)
      {
LABEL_198:
        v6 = (const void **)*v6;
        goto LABEL_199;
      }
LABEL_216:
      v6 = (const void **)*v6;
      goto LABEL_217;
    }
    if (v82 == -1)
      goto LABEL_270;
    v86 = *v6;
  }
  else
  {
    if (v82 != a1[1].n128_u8[15])
    {
      if (v11)
        goto LABEL_199;
      goto LABEL_217;
    }
    v86 = v6;
    if (v84 == (char *)-1)
LABEL_270:
      sub_20BEB9180();
  }
  if (memcmp(v86, v81, (size_t)v84))
  {
    if (v11)
    {
      if ((v85 & 0x80) != 0)
        goto LABEL_198;
LABEL_199:
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Function '%s' does not take %zu arguments.", v83, v84, v6, (uint64_t)(a1[2].n128_u64[1] - a1[2].n128_u64[0]) >> 3);
LABEL_218:
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v33 = 0;
      *(_OWORD *)a2 = v102;
      *(_QWORD *)(a2 + 16) = v103;
      goto LABEL_221;
    }
    if (v85 < 0)
      goto LABEL_216;
LABEL_217:
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Unknown function %s", v83, v84, v6, v101);
    goto LABEL_218;
  }
  if (a1[2].n128_u64[1] != a1[2].n128_u64[0])
  {
    v33 = operator new(0x20uLL);
    pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::DefinedNode::DefinedNode(v33, a1 + 2);
    goto LABEL_221;
  }
  v99 = v6;
  if (v85 < 0)
    v99 = (void *)*v6;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Function '%s' requires at least %zu arguments.", v83, v84, v99, 1);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v102;
  *(_QWORD *)(a2 + 16) = v103;
  *a3 = 0;
  if (*(char *)(a2 + 23) < 0)
    v100 = *(_QWORD *)(a2 + 8);
  else
    v100 = *(unsigned __int8 *)(a2 + 23);
  if (!v100)
  {
    if ((a1[1].n128_u8[15] & 0x80) == 0)
      goto LABEL_199;
    goto LABEL_198;
  }
}

void sub_20C09F4B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C09F53C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_121FunctionArgumentStartE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_121FunctionArgumentStartE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09F5B0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C09F5C4(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *p_p;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  void *__p;
  uint64_t v46;
  unsigned __int8 v47;
  std::locale v48;
  void *v49;
  uint64_t v50;
  unsigned __int8 v51;
  std::locale v52;

  v2 = a1 + 8;
  v3 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)&v48, a1 + 8, (__int128 *)(a1 + 48));
  if ((v51 & 0x80u) == 0)
    v4 = &v49;
  else
    v4 = v49;
  if ((v51 & 0x80u) == 0)
    v5 = v51;
  else
    v5 = v50;
  v6 = (_QWORD *)MEMORY[0x24BEDB310];
  v7 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v4, v5);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v7, (uint64_t)&__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v8, (uint64_t)&__p, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v9, (uint64_t)&__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v11 = sub_20BDDC1C8(v10, (uint64_t)&__p, 1);
  v12 = sub_20BDDC1C8(v11, (uint64_t)"  start  ", 9);
  sub_20C09FB04(&__p);
  if ((v47 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v47 & 0x80u) == 0)
    v14 = v47;
  else
    v14 = v46;
  v15 = sub_20BDDC1C8(v12, (uint64_t)p_p, v14);
  sub_20BDDC1C8(v15, (uint64_t)"; current ", 10);
  if ((char)v47 < 0)
    operator delete(__p);
  if ((char)v51 < 0)
    operator delete(v49);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v16 = std::locale::use_facet(&v48, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v48);
  std::ostream::put();
  std::ostream::flush();
  v17 = *(_BYTE **)(a1 + 8);
  if (v17 == *(_BYTE **)(a1 + 40) || *v17 != 32)
  {
    sub_20C01AE64((uint64_t)&v48, v2, v3);
    if ((v51 & 0x80u) == 0)
      v33 = &v49;
    else
      v33 = v49;
    if ((v51 & 0x80u) == 0)
      v34 = v51;
    else
      v34 = v50;
    v35 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v33, v34);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v35, (uint64_t)&__p, 1);
    v36 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v36, (uint64_t)&__p, 1);
    v37 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v37, (uint64_t)&__p, 1);
    v38 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v39 = sub_20BDDC1C8(v38, (uint64_t)&__p, 1);
    v40 = sub_20BDDC1C8(v39, (uint64_t)" failure ", 9);
    sub_20C09FB04(&__p);
    if ((v47 & 0x80u) == 0)
      v41 = &__p;
    else
      v41 = __p;
    if ((v47 & 0x80u) == 0)
      v42 = v47;
    else
      v42 = v46;
    v43 = sub_20BDDC1C8(v40, (uint64_t)v41, v42);
    std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)));
    v44 = std::locale::use_facet(&v52, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
    std::locale::~locale(&v52);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v47 < 0)
      operator delete(__p);
    if ((char)v51 < 0)
      operator delete(v49);
    return 0;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 8) = v17 + 1;
    *(_QWORD *)(a1 + 16) = v18;
    ++*(_QWORD *)(a1 + 32);
    sub_20C01AE64((uint64_t)&v48, v2, v3);
    if ((v51 & 0x80u) == 0)
      v19 = &v49;
    else
      v19 = v49;
    if ((v51 & 0x80u) == 0)
      v20 = v51;
    else
      v20 = v50;
    v21 = (_QWORD *)MEMORY[0x24BEDB310];
    v22 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v19, v20);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v22, (uint64_t)&__p, 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v23, (uint64_t)&__p, 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v24, (uint64_t)&__p, 1);
    v25 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v26 = sub_20BDDC1C8(v25, (uint64_t)&__p, 1);
    v27 = sub_20BDDC1C8(v26, (uint64_t)" success ", 9);
    sub_20C09FB04(&__p);
    if ((v47 & 0x80u) == 0)
      v28 = &__p;
    else
      v28 = __p;
    if ((v47 & 0x80u) == 0)
      v29 = v47;
    else
      v29 = v46;
    v30 = sub_20BDDC1C8(v27, (uint64_t)v28, v29);
    sub_20BDDC1C8(v30, (uint64_t)"; next ", 7);
    if ((char)v47 < 0)
      operator delete(__p);
    if ((char)v51 < 0)
      operator delete(v49);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
    v31 = std::locale::use_facet(&v48, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
    std::locale::~locale(&v48);
    std::ostream::put();
    std::ostream::flush();
    return 1;
  }
}

void sub_20C09FA90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C09FB04(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB3C90 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB3C90 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09FB80(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C09FB94(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB3CC1 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB3CC1 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C09FC10(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C09FC24(uint64_t a1, char **a2)
{
  _OWORD *v4;
  __int128 *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  void **v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  void **v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  _QWORD *v47;
  const std::locale::facet *v48;
  __int128 v49;
  void **v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  void **v58;
  uint64_t v59;
  _QWORD *v60;
  const std::locale::facet *v61;
  void **v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  void **v71;
  uint64_t v72;
  _QWORD *v73;
  const std::locale::facet *v74;
  std::locale v76;
  void *__p[2];
  __int128 v78;
  std::locale v79[2];
  void *v80[2];
  uint64_t v81;
  unsigned __int8 v82;

  v4 = (_OWORD *)(a1 + 8);
  v5 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)v79, a1 + 8, (__int128 *)(a1 + 48));
  if ((v82 & 0x80u) == 0)
    v6 = &v80[1];
  else
    v6 = (void **)v80[1];
  if ((v82 & 0x80u) == 0)
    v7 = v82;
  else
    v7 = v81;
  v8 = (_QWORD *)MEMORY[0x24BEDB310];
  v9 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v6, v7);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v9, (uint64_t)__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v10, (uint64_t)__p, 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v11, (uint64_t)__p, 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v13 = sub_20BDDC1C8(v12, (uint64_t)__p, 1);
  v14 = sub_20BDDC1C8(v13, (uint64_t)"  start  ", 9);
  sub_20C0A0E84(__p);
  if ((SBYTE7(v78) & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((SBYTE7(v78) & 0x80u) == 0)
    v16 = BYTE7(v78);
  else
    v16 = (uint64_t)__p[1];
  v17 = sub_20BDDC1C8(v14, (uint64_t)v15, v16);
  sub_20BDDC1C8(v17, (uint64_t)"; current ", 10);
  if (SBYTE7(v78) < 0)
    operator delete(__p[0]);
  if ((char)v82 < 0)
    operator delete(v80[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v18 = std::locale::use_facet(v79, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(v79);
  std::ostream::put();
  std::ostream::flush();
  sub_20C01AE64((uint64_t)v79, (uint64_t)v4, v5);
  if ((v82 & 0x80u) == 0)
    v19 = &v80[1];
  else
    v19 = (void **)v80[1];
  if ((v82 & 0x80u) == 0)
    v20 = v82;
  else
    v20 = v81;
  v21 = sub_20BDDC1C8(v8, (uint64_t)v19, v20);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v21, (uint64_t)__p, 1);
  v22 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v22, (uint64_t)__p, 1);
  v23 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v23, (uint64_t)__p, 1);
  v24 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v25 = sub_20BDDC1C8(v24, (uint64_t)__p, 1);
  v26 = sub_20BDDC1C8(v25, (uint64_t)"  start  ", 9);
  sub_20C0A129C(__p);
  if ((SBYTE7(v78) & 0x80u) == 0)
    v27 = __p;
  else
    v27 = (void **)__p[0];
  if ((SBYTE7(v78) & 0x80u) == 0)
    v28 = BYTE7(v78);
  else
    v28 = (uint64_t)__p[1];
  v29 = sub_20BDDC1C8(v26, (uint64_t)v27, v28);
  sub_20BDDC1C8(v29, (uint64_t)"; current ", 10);
  if (SBYTE7(v78) < 0)
    operator delete(__p[0]);
  if ((char)v82 < 0)
    operator delete(v80[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v30 = std::locale::use_facet(v79, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale(v79);
  std::ostream::put();
  std::ostream::flush();
  v31 = v4[1];
  *(_OWORD *)__p = *v4;
  v78 = v31;
  sub_20C0A1324(a1, a2);
  if (v32)
  {
    do
    {
      v33 = v4[1];
      *(_OWORD *)&v79[0].__locale_ = *v4;
      *(_OWORD *)v80 = v33;
      if (!sub_20C0A3F14(a1))
        break;
      sub_20C0A1324(a1, a2);
    }
    while (v34);
    v35 = *(_OWORD *)v80;
    *v4 = *(_OWORD *)&v79[0].__locale_;
    v4[1] = v35;
    sub_20C01AE64((uint64_t)v79, (uint64_t)v4, v5);
    if ((v82 & 0x80u) == 0)
      v36 = &v80[1];
    else
      v36 = (void **)v80[1];
    if ((v82 & 0x80u) == 0)
      v37 = v82;
    else
      v37 = v81;
    v38 = (_QWORD *)MEMORY[0x24BEDB310];
    v39 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v36, v37);
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v39, (uint64_t)__p, 1);
    v40 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v40, (uint64_t)__p, 1);
    v41 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 40;
    sub_20BDDC1C8(v41, (uint64_t)__p, 1);
    v42 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 41;
    v43 = sub_20BDDC1C8(v42, (uint64_t)__p, 1);
    v44 = sub_20BDDC1C8(v43, (uint64_t)" success ", 9);
    sub_20C0A129C(__p);
    if ((SBYTE7(v78) & 0x80u) == 0)
      v45 = __p;
    else
      v45 = (void **)__p[0];
    if ((SBYTE7(v78) & 0x80u) == 0)
      v46 = BYTE7(v78);
    else
      v46 = (uint64_t)__p[1];
    v47 = sub_20BDDC1C8(v44, (uint64_t)v45, v46);
    sub_20BDDC1C8(v47, (uint64_t)"; next ", 7);
    if (SBYTE7(v78) < 0)
      operator delete(__p[0]);
    if ((char)v82 < 0)
      operator delete(v80[1]);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
    v48 = std::locale::use_facet(v79, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
    std::locale::~locale(v79);
    std::ostream::put();
    std::ostream::flush();
  }
  else
  {
    v49 = v78;
    *v4 = *(_OWORD *)__p;
    v4[1] = v49;
    sub_20C01AE64((uint64_t)v79, (uint64_t)v4, v5);
    if ((v82 & 0x80u) == 0)
      v50 = &v80[1];
    else
      v50 = (void **)v80[1];
    if ((v82 & 0x80u) == 0)
      v51 = v82;
    else
      v51 = v81;
    v52 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v50, v51);
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v52, (uint64_t)__p, 1);
    v53 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v53, (uint64_t)__p, 1);
    v54 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 40;
    sub_20BDDC1C8(v54, (uint64_t)__p, 1);
    v55 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 41;
    v56 = sub_20BDDC1C8(v55, (uint64_t)__p, 1);
    v57 = sub_20BDDC1C8(v56, (uint64_t)" failure ", 9);
    sub_20C0A129C(__p);
    if ((SBYTE7(v78) & 0x80u) == 0)
      v58 = __p;
    else
      v58 = (void **)__p[0];
    if ((SBYTE7(v78) & 0x80u) == 0)
      v59 = BYTE7(v78);
    else
      v59 = (uint64_t)__p[1];
    v60 = sub_20BDDC1C8(v57, (uint64_t)v58, v59);
    std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(_QWORD *)(*v60 - 24)));
    v61 = std::locale::use_facet(&v76, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
    std::locale::~locale(&v76);
    std::ostream::put();
    std::ostream::flush();
    if (SBYTE7(v78) < 0)
      operator delete(__p[0]);
    if ((char)v82 < 0)
      operator delete(v80[1]);
    sub_20C0A0F0C(a1);
  }
  sub_20C01AE64((uint64_t)v79, (uint64_t)v4, v5);
  if ((v82 & 0x80u) == 0)
    v62 = &v80[1];
  else
    v62 = (void **)v80[1];
  if ((v82 & 0x80u) == 0)
    v63 = v82;
  else
    v63 = v81;
  v64 = (_QWORD *)MEMORY[0x24BEDB310];
  v65 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v62, v63);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v65, (uint64_t)__p, 1);
  v66 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v66, (uint64_t)__p, 1);
  v67 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v67, (uint64_t)__p, 1);
  v68 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v69 = sub_20BDDC1C8(v68, (uint64_t)__p, 1);
  v70 = sub_20BDDC1C8(v69, (uint64_t)" success ", 9);
  sub_20C0A0E84(__p);
  if ((SBYTE7(v78) & 0x80u) == 0)
    v71 = __p;
  else
    v71 = (void **)__p[0];
  if ((SBYTE7(v78) & 0x80u) == 0)
    v72 = BYTE7(v78);
  else
    v72 = (uint64_t)__p[1];
  v73 = sub_20BDDC1C8(v70, (uint64_t)v71, v72);
  sub_20BDDC1C8(v73, (uint64_t)"; next ", 7);
  if (SBYTE7(v78) < 0)
    operator delete(__p[0]);
  if ((char)v82 < 0)
    operator delete(v80[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(*v64 - 24)));
  v74 = std::locale::use_facet(v79, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
  std::locale::~locale(v79);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C0A03F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, __int128 a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0A04AC(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *p_p;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  _BYTE *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  const std::locale::facet *v57;
  void *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  void *v67;
  uint64_t v68;
  _QWORD *v69;
  const std::locale::facet *v70;
  void *v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  _QWORD *v81;
  const std::locale::facet *v82;
  void *__p;
  uint64_t v84;
  unsigned __int8 v85;
  std::locale v86;
  void *v87;
  uint64_t v88;
  unsigned __int8 v89;
  std::locale v90;

  v2 = a1 + 8;
  v3 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)&v86, a1 + 8, (__int128 *)(a1 + 48));
  if ((v89 & 0x80u) == 0)
    v4 = &v87;
  else
    v4 = v87;
  if ((v89 & 0x80u) == 0)
    v5 = v89;
  else
    v5 = v88;
  v6 = (_QWORD *)MEMORY[0x24BEDB310];
  v7 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v4, v5);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v7, (uint64_t)&__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v8, (uint64_t)&__p, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v9, (uint64_t)&__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v11 = sub_20BDDC1C8(v10, (uint64_t)&__p, 1);
  v12 = sub_20BDDC1C8(v11, (uint64_t)"  start  ", 9);
  sub_20C0A4DD8(&__p);
  if ((v85 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v85 & 0x80u) == 0)
    v14 = v85;
  else
    v14 = v84;
  v15 = sub_20BDDC1C8(v12, (uint64_t)p_p, v14);
  sub_20BDDC1C8(v15, (uint64_t)"; current ", 10);
  if ((char)v85 < 0)
    operator delete(__p);
  if ((char)v89 < 0)
    operator delete(v87);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v16 = std::locale::use_facet(&v86, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v86);
  std::ostream::put();
  std::ostream::flush();
  while ((sub_20C09F5C4(a1) & 1) != 0)
    ;
  sub_20C01AE64((uint64_t)&v86, v2, v3);
  if ((v89 & 0x80u) == 0)
    v17 = &v87;
  else
    v17 = v87;
  if ((v89 & 0x80u) == 0)
    v18 = v89;
  else
    v18 = v88;
  v19 = (_QWORD *)MEMORY[0x24BEDB310];
  v20 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v17, v18);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v20, (uint64_t)&__p, 1);
  v21 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v21, (uint64_t)&__p, 1);
  v22 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v22, (uint64_t)&__p, 1);
  v23 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v24 = sub_20BDDC1C8(v23, (uint64_t)&__p, 1);
  v25 = sub_20BDDC1C8(v24, (uint64_t)"  start  ", 9);
  sub_20C0A4E60(&__p);
  if ((v85 & 0x80u) == 0)
    v26 = &__p;
  else
    v26 = __p;
  if ((v85 & 0x80u) == 0)
    v27 = v85;
  else
    v27 = v84;
  v28 = sub_20BDDC1C8(v25, (uint64_t)v26, v27);
  sub_20BDDC1C8(v28, (uint64_t)"; current ", 10);
  if ((char)v85 < 0)
    operator delete(__p);
  if ((char)v89 < 0)
    operator delete(v87);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v29 = std::locale::use_facet(&v86, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v86);
  std::ostream::put();
  std::ostream::flush();
  v30 = *(_BYTE **)(a1 + 8);
  if (v30 == *(_BYTE **)(a1 + 40) || *v30 != 41)
  {
    sub_20C01AE64((uint64_t)&v86, v2, v3);
    if ((v89 & 0x80u) == 0)
      v59 = &v87;
    else
      v59 = v87;
    if ((v89 & 0x80u) == 0)
      v60 = v89;
    else
      v60 = v88;
    v61 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v59, v60);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v61, (uint64_t)&__p, 1);
    v62 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v62, (uint64_t)&__p, 1);
    v63 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v63, (uint64_t)&__p, 1);
    v64 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v65 = sub_20BDDC1C8(v64, (uint64_t)&__p, 1);
    v66 = sub_20BDDC1C8(v65, (uint64_t)" failure ", 9);
    sub_20C0A4E60(&__p);
    if ((v85 & 0x80u) == 0)
      v67 = &__p;
    else
      v67 = __p;
    if ((v85 & 0x80u) == 0)
      v68 = v85;
    else
      v68 = v84;
    v69 = sub_20BDDC1C8(v66, (uint64_t)v67, v68);
    std::ios_base::getloc((const std::ios_base *)((char *)v69 + *(_QWORD *)(*v69 - 24)));
    v70 = std::locale::use_facet(&v90, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v70->__vftable[2].~facet_0)(v70, 10);
    std::locale::~locale(&v90);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v85 < 0)
      operator delete(__p);
    if ((char)v89 < 0)
      operator delete(v87);
    sub_20C01AE64((uint64_t)&v86, v2, v3);
    if ((v89 & 0x80u) == 0)
      v71 = &v87;
    else
      v71 = v87;
    if ((v89 & 0x80u) == 0)
      v72 = v89;
    else
      v72 = v88;
    v73 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v71, v72);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v73, (uint64_t)&__p, 1);
    v74 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v74, (uint64_t)&__p, 1);
    v75 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v75, (uint64_t)&__p, 1);
    v76 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v77 = sub_20BDDC1C8(v76, (uint64_t)&__p, 1);
    v78 = sub_20BDDC1C8(v77, (uint64_t)" failure ", 9);
    sub_20C0A4DD8(&__p);
    if ((v85 & 0x80u) == 0)
      v79 = &__p;
    else
      v79 = __p;
    if ((v85 & 0x80u) == 0)
      v80 = v85;
    else
      v80 = v84;
    v81 = sub_20BDDC1C8(v78, (uint64_t)v79, v80);
    std::ios_base::getloc((const std::ios_base *)((char *)v81 + *(_QWORD *)(*v81 - 24)));
    v82 = std::locale::use_facet(&v90, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v82->__vftable[2].~facet_0)(v82, 10);
    std::locale::~locale(&v90);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v85 < 0)
      operator delete(__p);
    if ((char)v89 < 0)
      operator delete(v87);
    sub_20C0A4EF0(a1);
  }
  v31 = *(_QWORD *)(a1 + 16) + 1;
  *(_QWORD *)(a1 + 8) = v30 + 1;
  *(_QWORD *)(a1 + 16) = v31;
  ++*(_QWORD *)(a1 + 32);
  sub_20C01AE64((uint64_t)&v86, v2, v3);
  if ((v89 & 0x80u) == 0)
    v32 = &v87;
  else
    v32 = v87;
  if ((v89 & 0x80u) == 0)
    v33 = v89;
  else
    v33 = v88;
  v34 = (_QWORD *)MEMORY[0x24BEDB310];
  v35 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v32, v33);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v35, (uint64_t)&__p, 1);
  v36 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v36, (uint64_t)&__p, 1);
  v37 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v37, (uint64_t)&__p, 1);
  v38 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v39 = sub_20BDDC1C8(v38, (uint64_t)&__p, 1);
  v40 = sub_20BDDC1C8(v39, (uint64_t)" success ", 9);
  sub_20C0A4E60(&__p);
  if ((v85 & 0x80u) == 0)
    v41 = &__p;
  else
    v41 = __p;
  if ((v85 & 0x80u) == 0)
    v42 = v85;
  else
    v42 = v84;
  v43 = sub_20BDDC1C8(v40, (uint64_t)v41, v42);
  sub_20BDDC1C8(v43, (uint64_t)"; next ", 7);
  if ((char)v85 < 0)
    operator delete(__p);
  if ((char)v89 < 0)
    operator delete(v87);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
  v44 = std::locale::use_facet(&v86, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
  std::locale::~locale(&v86);
  std::ostream::put();
  std::ostream::flush();
  while ((sub_20C09F5C4(a1) & 1) != 0)
    ;
  sub_20C01AE64((uint64_t)&v86, v2, v3);
  if ((v89 & 0x80u) == 0)
    v45 = &v87;
  else
    v45 = v87;
  if ((v89 & 0x80u) == 0)
    v46 = v89;
  else
    v46 = v88;
  v47 = (_QWORD *)MEMORY[0x24BEDB310];
  v48 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v45, v46);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v48, (uint64_t)&__p, 1);
  v49 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v49, (uint64_t)&__p, 1);
  v50 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v50, (uint64_t)&__p, 1);
  v51 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v52 = sub_20BDDC1C8(v51, (uint64_t)&__p, 1);
  v53 = sub_20BDDC1C8(v52, (uint64_t)" success ", 9);
  sub_20C0A4DD8(&__p);
  if ((v85 & 0x80u) == 0)
    v54 = &__p;
  else
    v54 = __p;
  if ((v85 & 0x80u) == 0)
    v55 = v85;
  else
    v55 = v84;
  v56 = sub_20BDDC1C8(v53, (uint64_t)v54, v55);
  sub_20BDDC1C8(v56, (uint64_t)"; next ", 7);
  if ((char)v85 < 0)
    operator delete(__p);
  if ((char)v89 < 0)
    operator delete(v87);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v47 + *(_QWORD *)(*v47 - 24)));
  v57 = std::locale::use_facet(&v86, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
  std::locale::~locale(&v86);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C0A0DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  std::locale::~locale((std::locale *)(v23 - 56));
  if (a14 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sub_20C0A0E84(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_117FunctionArgumentsE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_117FunctionArgumentsE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A0EF8(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A0F0C(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *p_p;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  void *__p;
  uint64_t v32;
  unsigned __int8 v33;
  std::locale v34;
  void *v35;
  uint64_t v36;
  unsigned __int8 v37;

  v2 = a1 + 8;
  v3 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)&v34, a1 + 8, (__int128 *)(a1 + 48));
  if ((v37 & 0x80u) == 0)
    v4 = &v35;
  else
    v4 = v35;
  if ((v37 & 0x80u) == 0)
    v5 = v37;
  else
    v5 = v36;
  v6 = (_QWORD *)MEMORY[0x24BEDB310];
  v7 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v4, v5);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v7, (uint64_t)&__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v8, (uint64_t)&__p, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v9, (uint64_t)&__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v11 = sub_20BDDC1C8(v10, (uint64_t)&__p, 1);
  v12 = sub_20BDDC1C8(v11, (uint64_t)"  start  ", 9);
  sub_20C0A4D48(&__p);
  if ((v33 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v33 & 0x80u) == 0)
    v14 = v33;
  else
    v14 = v32;
  v15 = sub_20BDDC1C8(v12, (uint64_t)p_p, v14);
  sub_20BDDC1C8(v15, (uint64_t)"; current ", 10);
  if ((char)v33 < 0)
    operator delete(__p);
  if ((char)v37 < 0)
    operator delete(v35);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v16 = std::locale::use_facet(&v34, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  std::ostream::flush();
  while ((sub_20C09F5C4(a1) & 1) != 0)
    ;
  sub_20C01AE64((uint64_t)&v34, v2, v3);
  if ((v37 & 0x80u) == 0)
    v17 = &v35;
  else
    v17 = v35;
  if ((v37 & 0x80u) == 0)
    v18 = v37;
  else
    v18 = v36;
  v19 = (_QWORD *)MEMORY[0x24BEDB310];
  v20 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v17, v18);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v20, (uint64_t)&__p, 1);
  v21 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v21, (uint64_t)&__p, 1);
  v22 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v22, (uint64_t)&__p, 1);
  v23 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v24 = sub_20BDDC1C8(v23, (uint64_t)&__p, 1);
  v25 = sub_20BDDC1C8(v24, (uint64_t)" success ", 9);
  sub_20C0A4D48(&__p);
  if ((v33 & 0x80u) == 0)
    v26 = &__p;
  else
    v26 = __p;
  if ((v33 & 0x80u) == 0)
    v27 = v33;
  else
    v27 = v32;
  v28 = sub_20BDDC1C8(v25, (uint64_t)v26, v27);
  sub_20BDDC1C8(v28, (uint64_t)"; next ", 7);
  if ((char)v33 < 0)
    operator delete(__p);
  if ((char)v37 < 0)
    operator delete(v35);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
  v29 = std::locale::use_facet(&v34, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
  std::locale::~locale(&v34);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C0A1244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0A129C(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123FunctionArgumentWrapperINS3_14ExpressionBodyEEENS0_5ascii3oneIJLc44EEEENS8_IJLc32EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123FunctionArgumentWrapperINS3_14ExpressionBodyEEENS0_5ascii3oneIJLc44EEEENS8_IJLc32EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A1310(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

double sub_20C0A1324(uint64_t a1, char **a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *p_p;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  __int128 v20;
  _BYTE *v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  void **v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  const std::locale::facet *v47;
  double result;
  __int128 v49;
  void **v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  const std::locale::facet *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  void *__p;
  uint64_t v67;
  unsigned __int8 v68;
  std::locale v69[2];
  void *v70[2];
  uint64_t v71;
  unsigned __int8 v72;
  std::locale v73;

  v4 = (_OWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 24);
  v63 = *(_OWORD *)(a1 + 8);
  v64 = v5;
  v65 = a1 + 8;
  v6 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)v69, a1 + 8, (__int128 *)(a1 + 48));
  if ((v72 & 0x80u) == 0)
    v7 = &v70[1];
  else
    v7 = (void **)v70[1];
  if ((v72 & 0x80u) == 0)
    v8 = v72;
  else
    v8 = v71;
  v9 = (_QWORD *)MEMORY[0x24BEDB310];
  v10 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v7, v8);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v10, (uint64_t)&__p, 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v11, (uint64_t)&__p, 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v12, (uint64_t)&__p, 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v14 = sub_20BDDC1C8(v13, (uint64_t)&__p, 1);
  v15 = sub_20BDDC1C8(v14, (uint64_t)"  start  ", 9);
  sub_20C0A1AAC(&__p);
  if ((v68 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v68 & 0x80u) == 0)
    v17 = v68;
  else
    v17 = v67;
  v18 = sub_20BDDC1C8(v15, (uint64_t)p_p, v17);
  sub_20BDDC1C8(v18, (uint64_t)"; current ", 10);
  if ((char)v68 < 0)
    operator delete(__p);
  if ((char)v72 < 0)
    operator delete(v70[1]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v19 = std::locale::use_facet(v69, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale(v69);
  std::ostream::put();
  std::ostream::flush();
  if ((sub_20C08922C(a1, a2) & 1) != 0)
    goto LABEL_22;
  sub_20C0A1B34(a1);
  v20 = v4[1];
  *(_OWORD *)&v69[0].__locale_ = *v4;
  *(_OWORD *)v70 = v20;
  sub_20C0A2150(a1);
  v21 = *(_BYTE **)(a1 + 8);
  if (v21 != *(_BYTE **)(a1 + 40) && *v21 == 91)
  {
    v22 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 8) = v21 + 1;
    *(_QWORD *)(a1 + 16) = v22;
    ++*(_QWORD *)(a1 + 32);
    sub_20C0A2338(a1, a2);
    sub_20C0A2510(a1);
    sub_20C0A2AB0((__int128 *)a1, a2);
    if ((sub_20C0A4504(a1) & 1) == 0)
      sub_20C0A4ACC(a1);
    sub_20C0A1D1C(a1);
LABEL_22:
    sub_20C01AE64((uint64_t)v69, (uint64_t)v4, v6);
    if ((v72 & 0x80u) == 0)
      v23 = &v70[1];
    else
      v23 = (void **)v70[1];
    if ((v72 & 0x80u) == 0)
      v24 = v72;
    else
      v24 = v71;
    v25 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v23, v24);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v25, (uint64_t)&__p, 1);
    v26 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v26, (uint64_t)&__p, 1);
    v27 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v27, (uint64_t)&__p, 1);
    v28 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v29 = sub_20BDDC1C8(v28, (uint64_t)&__p, 1);
    v30 = sub_20BDDC1C8(v29, (uint64_t)"  apply  ", 9);
    sub_20C0A1AAC(&__p);
    if ((v68 & 0x80u) == 0)
      v31 = &__p;
    else
      v31 = __p;
    if ((v68 & 0x80u) == 0)
      v32 = v68;
    else
      v32 = v67;
    v33 = sub_20BDDC1C8(v30, (uint64_t)v31, v32);
    std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
    v34 = std::locale::use_facet(&v73, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
    std::locale::~locale(&v73);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v68 < 0)
      operator delete(__p);
    if ((char)v72 < 0)
      operator delete(v70[1]);
    sub_20C0A4B1C(&v63, a1, a2);
    sub_20C01AE64((uint64_t)v69, (uint64_t)v4, v6);
    if ((v72 & 0x80u) == 0)
      v35 = &v70[1];
    else
      v35 = (void **)v70[1];
    if ((v72 & 0x80u) == 0)
      v36 = v72;
    else
      v36 = v71;
    v37 = (_QWORD *)MEMORY[0x24BEDB310];
    v38 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v35, v36);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v38, (uint64_t)&__p, 1);
    v39 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v39, (uint64_t)&__p, 1);
    v40 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v40, (uint64_t)&__p, 1);
    v41 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v42 = sub_20BDDC1C8(v41, (uint64_t)&__p, 1);
    v43 = sub_20BDDC1C8(v42, (uint64_t)" success ", 9);
    sub_20C0A1AAC(&__p);
    if ((v68 & 0x80u) == 0)
      v44 = &__p;
    else
      v44 = __p;
    if ((v68 & 0x80u) == 0)
      v45 = v68;
    else
      v45 = v67;
    v46 = sub_20BDDC1C8(v43, (uint64_t)v44, v45);
    sub_20BDDC1C8(v46, (uint64_t)"; next ", 7);
    if ((char)v68 < 0)
      operator delete(__p);
    if ((char)v72 < 0)
      operator delete(v70[1]);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v37 + *(_QWORD *)(*v37 - 24)));
    v47 = std::locale::use_facet(v69, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v47->__vftable[2].~facet_0)(v47, 10);
    std::locale::~locale(v69);
    std::ostream::put();
    std::ostream::flush();
    return result;
  }
  sub_20C0A26F8(a1);
  v49 = *(_OWORD *)v70;
  *v4 = *(_OWORD *)&v69[0].__locale_;
  v4[1] = v49;
  sub_20C0A1F04(a1);
  sub_20C01AE64((uint64_t)v69, (uint64_t)v4, v6);
  if ((v72 & 0x80u) == 0)
    v50 = &v70[1];
  else
    v50 = (void **)v70[1];
  if ((v72 & 0x80u) == 0)
    v51 = v72;
  else
    v51 = v71;
  v52 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v50, v51);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v52, (uint64_t)&__p, 1);
  v53 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v53, (uint64_t)&__p, 1);
  v54 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v54, (uint64_t)&__p, 1);
  v55 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v56 = sub_20BDDC1C8(v55, (uint64_t)&__p, 1);
  v57 = sub_20BDDC1C8(v56, (uint64_t)" failure ", 9);
  sub_20C0A1AAC(&__p);
  if ((v68 & 0x80u) == 0)
    v58 = &__p;
  else
    v58 = __p;
  if ((v68 & 0x80u) == 0)
    v59 = v68;
  else
    v59 = v67;
  v60 = sub_20BDDC1C8(v57, (uint64_t)v58, v59);
  std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(_QWORD *)(*v60 - 24)));
  v61 = std::locale::use_facet(&v73, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
  std::locale::~locale(&v73);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v68 < 0)
    operator delete(__p);
  if ((char)v72 < 0)
    operator delete(v70[1]);
  result = *(double *)&v63;
  v62 = v64;
  *v4 = v63;
  v4[1] = v62;
  return result;
}

void sub_20C0A1A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, std::locale a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _OWORD *v26;

  if (a26 < 0)
    operator delete(__p);
  *v26 = a9;
  v26[1] = a10;
  _Unwind_Resume(exception_object);
}

void sub_20C0A1AAC(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123FunctionArgumentWrapperINS0_14ExpressionBodyEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_123FunctionArgumentWrapperINS0_14ExpressionBodyEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A1B20(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A1B34(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)"  start  ", 9);
  sub_20C0A20C8(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; current ", 10);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C0A1CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0A1D1C(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)" success ", 9);
  sub_20C0A20C8(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; next ", 7);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C0A1EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0A1F04(uint64_t a1)
{
  void **v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  unsigned __int8 v17;
  std::locale v18;

  sub_20C01AE64((uint64_t)&v15, a1 + 8, (__int128 *)(a1 + 48));
  if ((v17 & 0x80u) == 0)
    v1 = v16;
  else
    v1 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v2 = v17;
  else
    v2 = (uint64_t)v16[1];
  v3 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v1, v2);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v3, (uint64_t)__p, 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v4, (uint64_t)__p, 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v7 = sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v8 = sub_20BDDC1C8(v7, (uint64_t)" failure ", 9);
  sub_20C0A20C8(__p);
  if ((v14 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v10 = v14;
  else
    v10 = (uint64_t)__p[1];
  v11 = sub_20BDDC1C8(v8, (uint64_t)v9, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  v12 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if ((char)v17 < 0)
    operator delete(v16[0]);
}

void sub_20C0A2080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0A20C8(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114ListExpressionE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_114ListExpressionE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A213C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A2150(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)"  start  ", 9);
  sub_20C0A28BC(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; current ", 10);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C0A22F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0A2338(uint64_t a1, char **a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  uint64_t v18;
  void *v19[2];
  unsigned __int8 v20;
  std::locale v21;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v3 = v19;
  else
    v3 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v4 = v20;
  else
    v4 = (uint64_t)v19[1];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v3, v4);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)"  apply  ", 9);
  sub_20C0A28BC(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  std::ios_base::getloc((const std::ios_base *)((char *)v13 + *(_QWORD *)(*v13 - 24)));
  v14 = std::locale::use_facet(&v21, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v21);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  return sub_20C0A2944(a2);
}

void sub_20C0A24C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0A2510(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  void *__p[2];
  unsigned __int8 v17;
  std::locale v18;
  void *v19[2];
  unsigned __int8 v20;

  sub_20C01AE64((uint64_t)&v18, a1 + 8, (__int128 *)(a1 + 48));
  if ((v20 & 0x80u) == 0)
    v2 = v19;
  else
    v2 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v3 = v20;
  else
    v3 = (uint64_t)v19[1];
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v7, (uint64_t)__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)" success ", 9);
  sub_20C0A28BC(__p);
  if ((v17 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v12 = v17;
  else
    v12 = (uint64_t)__p[1];
  v13 = sub_20BDDC1C8(v10, (uint64_t)v11, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; next ", 7);
  if ((char)v17 < 0)
    operator delete(__p[0]);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C0A26B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0A26F8(uint64_t a1)
{
  void **v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  unsigned __int8 v17;
  std::locale v18;

  sub_20C01AE64((uint64_t)&v15, a1 + 8, (__int128 *)(a1 + 48));
  if ((v17 & 0x80u) == 0)
    v1 = v16;
  else
    v1 = (void **)v16[0];
  if ((v17 & 0x80u) == 0)
    v2 = v17;
  else
    v2 = (uint64_t)v16[1];
  v3 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v1, v2);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v3, (uint64_t)__p, 1);
  v4 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v4, (uint64_t)__p, 1);
  v5 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v5, (uint64_t)__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v7 = sub_20BDDC1C8(v6, (uint64_t)__p, 1);
  v8 = sub_20BDDC1C8(v7, (uint64_t)" failure ", 9);
  sub_20C0A28BC(__p);
  if ((v14 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v10 = v14;
  else
    v10 = (uint64_t)__p[1];
  v11 = sub_20BDDC1C8(v8, (uint64_t)v9, v10);
  std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
  v12 = std::locale::use_facet(&v18, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
  std::locale::~locale(&v18);
  std::ostream::put();
  std::ostream::flush();
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if ((char)v17 < 0)
    operator delete(v16[0]);
}

void sub_20C0A2874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0A28BC(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19ListStartE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_19ListStartE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A2930(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A2944(char **a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;

  v2 = operator new(0x20uLL);
  *v2 = off_24C527770;
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v4 = v2;
  sub_20C08DF60(a1, (uint64_t *)&v4);
  result = (uint64_t)v4;
  if (v4)
    return (*(uint64_t (**)(_QWORD *))(*v4 + 8))(v4);
  return result;
}

void sub_20C0A29B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0A29D0(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_24C527770;
  v3 = (void **)(a1 + 8);
  sub_20C086448(&v3);
  return a1;
}

void sub_20C0A2A14(char *a1)
{
  void **v2;

  *(_QWORD *)a1 = off_24C527770;
  v2 = (void **)(a1 + 8);
  sub_20C086448(&v2);
  operator delete(a1);
}

void sub_20C0A2A5C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  __n128 *v3;
  _QWORD *v4;

  v3 = (__n128 *)(a1 + 8);
  v4 = operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_VariableExpressionImpl::ListNode::ListNode(v4, v3);
  *a2 = v4;
}

void sub_20C0A2A9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A2AB0(__int128 *a1, char **a2)
{
  _OWORD *v4;
  __int128 *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  _QWORD *v17;
  const std::locale::facet *v18;
  void **v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  void **v27;
  uint64_t v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  void **v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void **v45;
  uint64_t v46;
  _QWORD *v47;
  const std::locale::facet *v48;
  __int128 v49;
  void **v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  void **v58;
  uint64_t v59;
  _QWORD *v60;
  const std::locale::facet *v61;
  void **v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  void **v71;
  uint64_t v72;
  _QWORD *v73;
  const std::locale::facet *v74;
  std::locale v76;
  void *__p[2];
  __int128 v78;
  std::locale v79[2];
  void *v80[2];
  uint64_t v81;
  unsigned __int8 v82;

  v4 = (__int128 *)((char *)a1 + 8);
  v5 = a1 + 3;
  sub_20C01AE64((uint64_t)v79, (uint64_t)a1 + 8, a1 + 3);
  if ((v82 & 0x80u) == 0)
    v6 = &v80[1];
  else
    v6 = (void **)v80[1];
  if ((v82 & 0x80u) == 0)
    v7 = v82;
  else
    v7 = v81;
  v8 = (_QWORD *)MEMORY[0x24BEDB310];
  v9 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v6, v7);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v9, (uint64_t)__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v10, (uint64_t)__p, 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v11, (uint64_t)__p, 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v13 = sub_20BDDC1C8(v12, (uint64_t)__p, 1);
  v14 = sub_20BDDC1C8(v13, (uint64_t)"  start  ", 9);
  sub_20C0A3338(__p);
  if ((SBYTE7(v78) & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((SBYTE7(v78) & 0x80u) == 0)
    v16 = BYTE7(v78);
  else
    v16 = (uint64_t)__p[1];
  v17 = sub_20BDDC1C8(v14, (uint64_t)v15, v16);
  sub_20BDDC1C8(v17, (uint64_t)"; current ", 10);
  if (SBYTE7(v78) < 0)
    operator delete(__p[0]);
  if ((char)v82 < 0)
    operator delete(v80[1]);
  sub_20C088CD8((uint64_t)a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v18 = std::locale::use_facet(v79, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
  std::locale::~locale(v79);
  std::ostream::put();
  std::ostream::flush();
  sub_20C01AE64((uint64_t)v79, (uint64_t)v4, v5);
  if ((v82 & 0x80u) == 0)
    v19 = &v80[1];
  else
    v19 = (void **)v80[1];
  if ((v82 & 0x80u) == 0)
    v20 = v82;
  else
    v20 = v81;
  v21 = sub_20BDDC1C8(v8, (uint64_t)v19, v20);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v21, (uint64_t)__p, 1);
  v22 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v22, (uint64_t)__p, 1);
  v23 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v23, (uint64_t)__p, 1);
  v24 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v25 = sub_20BDDC1C8(v24, (uint64_t)__p, 1);
  v26 = sub_20BDDC1C8(v25, (uint64_t)"  start  ", 9);
  sub_20C0A33C0(__p);
  if ((SBYTE7(v78) & 0x80u) == 0)
    v27 = __p;
  else
    v27 = (void **)__p[0];
  if ((SBYTE7(v78) & 0x80u) == 0)
    v28 = BYTE7(v78);
  else
    v28 = (uint64_t)__p[1];
  v29 = sub_20BDDC1C8(v26, (uint64_t)v27, v28);
  sub_20BDDC1C8(v29, (uint64_t)"; current ", 10);
  if (SBYTE7(v78) < 0)
    operator delete(__p[0]);
  if ((char)v82 < 0)
    operator delete(v80[1]);
  sub_20C088CD8((uint64_t)a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v30 = std::locale::use_facet(v79, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
  std::locale::~locale(v79);
  std::ostream::put();
  std::ostream::flush();
  v31 = v4[1];
  *(_OWORD *)__p = *v4;
  v78 = v31;
  sub_20C0A3448(a1, a2);
  if (v32)
  {
    do
    {
      v33 = v4[1];
      *(_OWORD *)&v79[0].__locale_ = *v4;
      *(_OWORD *)v80 = v33;
      if (!sub_20C0A3F14((uint64_t)a1))
        break;
      sub_20C0A3448(a1, a2);
    }
    while (v34);
    v35 = *(_OWORD *)v80;
    *v4 = *(_OWORD *)&v79[0].__locale_;
    v4[1] = v35;
    sub_20C01AE64((uint64_t)v79, (uint64_t)v4, v5);
    if ((v82 & 0x80u) == 0)
      v36 = &v80[1];
    else
      v36 = (void **)v80[1];
    if ((v82 & 0x80u) == 0)
      v37 = v82;
    else
      v37 = v81;
    v38 = (_QWORD *)MEMORY[0x24BEDB310];
    v39 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v36, v37);
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v39, (uint64_t)__p, 1);
    v40 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v40, (uint64_t)__p, 1);
    v41 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 40;
    sub_20BDDC1C8(v41, (uint64_t)__p, 1);
    v42 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 41;
    v43 = sub_20BDDC1C8(v42, (uint64_t)__p, 1);
    v44 = sub_20BDDC1C8(v43, (uint64_t)" success ", 9);
    sub_20C0A33C0(__p);
    if ((SBYTE7(v78) & 0x80u) == 0)
      v45 = __p;
    else
      v45 = (void **)__p[0];
    if ((SBYTE7(v78) & 0x80u) == 0)
      v46 = BYTE7(v78);
    else
      v46 = (uint64_t)__p[1];
    v47 = sub_20BDDC1C8(v44, (uint64_t)v45, v46);
    sub_20BDDC1C8(v47, (uint64_t)"; next ", 7);
    if (SBYTE7(v78) < 0)
      operator delete(__p[0]);
    if ((char)v82 < 0)
      operator delete(v80[1]);
    sub_20C088CD8((uint64_t)a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
    v48 = std::locale::use_facet(v79, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v48->__vftable[2].~facet_0)(v48, 10);
    std::locale::~locale(v79);
    std::ostream::put();
    std::ostream::flush();
  }
  else
  {
    v49 = v78;
    *v4 = *(_OWORD *)__p;
    v4[1] = v49;
    sub_20C01AE64((uint64_t)v79, (uint64_t)v4, v5);
    if ((v82 & 0x80u) == 0)
      v50 = &v80[1];
    else
      v50 = (void **)v80[1];
    if ((v82 & 0x80u) == 0)
      v51 = v82;
    else
      v51 = v81;
    v52 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v50, v51);
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v52, (uint64_t)__p, 1);
    v53 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 58;
    sub_20BDDC1C8(v53, (uint64_t)__p, 1);
    v54 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 40;
    sub_20BDDC1C8(v54, (uint64_t)__p, 1);
    v55 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p[0]) = 41;
    v56 = sub_20BDDC1C8(v55, (uint64_t)__p, 1);
    v57 = sub_20BDDC1C8(v56, (uint64_t)" failure ", 9);
    sub_20C0A33C0(__p);
    if ((SBYTE7(v78) & 0x80u) == 0)
      v58 = __p;
    else
      v58 = (void **)__p[0];
    if ((SBYTE7(v78) & 0x80u) == 0)
      v59 = BYTE7(v78);
    else
      v59 = (uint64_t)__p[1];
    v60 = sub_20BDDC1C8(v57, (uint64_t)v58, v59);
    std::ios_base::getloc((const std::ios_base *)((char *)v60 + *(_QWORD *)(*v60 - 24)));
    v61 = std::locale::use_facet(&v76, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v61->__vftable[2].~facet_0)(v61, 10);
    std::locale::~locale(&v76);
    std::ostream::put();
    std::ostream::flush();
    if (SBYTE7(v78) < 0)
      operator delete(__p[0]);
    if ((char)v82 < 0)
      operator delete(v80[1]);
    sub_20C0A0F0C((uint64_t)a1);
  }
  sub_20C01AE64((uint64_t)v79, (uint64_t)v4, v5);
  if ((v82 & 0x80u) == 0)
    v62 = &v80[1];
  else
    v62 = (void **)v80[1];
  if ((v82 & 0x80u) == 0)
    v63 = v82;
  else
    v63 = v81;
  v64 = (_QWORD *)MEMORY[0x24BEDB310];
  v65 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v62, v63);
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v65, (uint64_t)__p, 1);
  v66 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 58;
  sub_20BDDC1C8(v66, (uint64_t)__p, 1);
  v67 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 40;
  sub_20BDDC1C8(v67, (uint64_t)__p, 1);
  v68 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p[0]) = 41;
  v69 = sub_20BDDC1C8(v68, (uint64_t)__p, 1);
  v70 = sub_20BDDC1C8(v69, (uint64_t)" success ", 9);
  sub_20C0A3338(__p);
  if ((SBYTE7(v78) & 0x80u) == 0)
    v71 = __p;
  else
    v71 = (void **)__p[0];
  if ((SBYTE7(v78) & 0x80u) == 0)
    v72 = BYTE7(v78);
  else
    v72 = (uint64_t)__p[1];
  v73 = sub_20BDDC1C8(v70, (uint64_t)v71, v72);
  sub_20BDDC1C8(v73, (uint64_t)"; next ", 7);
  if (SBYTE7(v78) < 0)
    operator delete(__p[0]);
  if ((char)v82 < 0)
    operator delete(v80[1]);
  sub_20C088CD8((uint64_t)a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v64 + *(_QWORD *)(*v64 - 24)));
  v74 = std::locale::use_facet(v79, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v74->__vftable[2].~facet_0)(v74, 10);
  std::locale::~locale(v79);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_20C0A3284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, __int128 a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::locale a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0A3338(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112ListElementsE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_112ListElementsE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A33AC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C0A33C0(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_111ListElementENS0_5ascii3oneIJLc44EEEENS6_IJLc32EEEEEE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N3tao21PXR_INTERNAL_NS_pegtl4listIN32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_111ListElementENS0_5ascii3oneIJLc44EEEENS6_IJLc32EEEEEE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A3434(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

double sub_20C0A3448(__int128 *a1, char **a2)
{
  _OWORD *v4;
  __int128 v5;
  __int128 *v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  void *p_p;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  double result;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  const std::locale::facet *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  void *__p;
  uint64_t v63;
  unsigned __int8 v64;
  std::locale v65;
  void *v66;
  uint64_t v67;
  unsigned __int8 v68;
  std::locale v69;

  v4 = (__int128 *)((char *)a1 + 8);
  v5 = *(__int128 *)((char *)a1 + 24);
  v59 = *(__int128 *)((char *)a1 + 8);
  v60 = v5;
  v61 = (char *)a1 + 8;
  v6 = a1 + 3;
  sub_20C01AE64((uint64_t)&v65, (uint64_t)a1 + 8, a1 + 3);
  if ((v68 & 0x80u) == 0)
    v7 = &v66;
  else
    v7 = v66;
  if ((v68 & 0x80u) == 0)
    v8 = v68;
  else
    v8 = v67;
  v9 = (_QWORD *)MEMORY[0x24BEDB310];
  v10 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v7, v8);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v10, (uint64_t)&__p, 1);
  v11 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v11, (uint64_t)&__p, 1);
  v12 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v12, (uint64_t)&__p, 1);
  v13 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v14 = sub_20BDDC1C8(v13, (uint64_t)&__p, 1);
  v15 = sub_20BDDC1C8(v14, (uint64_t)"  start  ", 9);
  sub_20C0A3B78(&__p);
  if ((v64 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v64 & 0x80u) == 0)
    v17 = v64;
  else
    v17 = v63;
  v18 = sub_20BDDC1C8(v15, (uint64_t)p_p, v17);
  sub_20BDDC1C8(v18, (uint64_t)"; current ", 10);
  if ((char)v64 < 0)
    operator delete(__p);
  if ((char)v68 < 0)
    operator delete(v66);
  sub_20C088CD8((uint64_t)a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v19 = std::locale::use_facet(&v65, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
  std::locale::~locale(&v65);
  std::ostream::put();
  std::ostream::flush();
  if ((sub_20C089838((uint64_t)a1, (uint64_t)a2) & 1) != 0
    || (sub_20C08A408((uint64_t)a1, (uint64_t)a2) & 1) != 0
    || (sub_20C08AFC0((uint64_t)a1, (uint64_t)a2) & 1) != 0
    || (sub_20C098000((uint64_t)a1, (uint64_t)a2) & 1) != 0
    || (sub_20C08BB78((uint64_t)a1, (uint64_t)a2) & 1) != 0
    || (sub_20C08C098((uint64_t)a1, (uint64_t)a2) & 1) != 0
    || sub_20C0A3C00((uint64_t)a1, a2))
  {
    sub_20C01AE64((uint64_t)&v65, (uint64_t)v4, v6);
    if ((v68 & 0x80u) == 0)
      v20 = &v66;
    else
      v20 = v66;
    if ((v68 & 0x80u) == 0)
      v21 = v68;
    else
      v21 = v67;
    v22 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v20, v21);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v22, (uint64_t)&__p, 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v23, (uint64_t)&__p, 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v24, (uint64_t)&__p, 1);
    v25 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v26 = sub_20BDDC1C8(v25, (uint64_t)&__p, 1);
    v27 = sub_20BDDC1C8(v26, (uint64_t)"  apply  ", 9);
    sub_20C0A3B78(&__p);
    if ((v64 & 0x80u) == 0)
      v28 = &__p;
    else
      v28 = __p;
    if ((v64 & 0x80u) == 0)
      v29 = v64;
    else
      v29 = v63;
    v30 = sub_20BDDC1C8(v27, (uint64_t)v28, v29);
    std::ios_base::getloc((const std::ios_base *)((char *)v30 + *(_QWORD *)(*v30 - 24)));
    v31 = std::locale::use_facet(&v69, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
    std::locale::~locale(&v69);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v64 < 0)
      operator delete(__p);
    if ((char)v68 < 0)
      operator delete(v66);
    sub_20C0A3C88(&v59, (uint64_t)a1, a2);
    sub_20C01AE64((uint64_t)&v65, (uint64_t)v4, v6);
    if ((v68 & 0x80u) == 0)
      v32 = &v66;
    else
      v32 = v66;
    if ((v68 & 0x80u) == 0)
      v33 = v68;
    else
      v33 = v67;
    v34 = (_QWORD *)MEMORY[0x24BEDB310];
    v35 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v32, v33);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v35, (uint64_t)&__p, 1);
    v36 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v36, (uint64_t)&__p, 1);
    v37 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v37, (uint64_t)&__p, 1);
    v38 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v39 = sub_20BDDC1C8(v38, (uint64_t)&__p, 1);
    v40 = sub_20BDDC1C8(v39, (uint64_t)" success ", 9);
    sub_20C0A3B78(&__p);
    if ((v64 & 0x80u) == 0)
      v41 = &__p;
    else
      v41 = __p;
    if ((v64 & 0x80u) == 0)
      v42 = v64;
    else
      v42 = v63;
    v43 = sub_20BDDC1C8(v40, (uint64_t)v41, v42);
    sub_20BDDC1C8(v43, (uint64_t)"; next ", 7);
    if ((char)v64 < 0)
      operator delete(__p);
    if ((char)v68 < 0)
      operator delete(v66);
    sub_20C088CD8((uint64_t)a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v34 + *(_QWORD *)(*v34 - 24)));
    v44 = std::locale::use_facet(&v65, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
    std::locale::~locale(&v65);
    std::ostream::put();
    std::ostream::flush();
  }
  else
  {
    sub_20C01AE64((uint64_t)&v65, (uint64_t)v4, v6);
    if ((v68 & 0x80u) == 0)
      v46 = &v66;
    else
      v46 = v66;
    if ((v68 & 0x80u) == 0)
      v47 = v68;
    else
      v47 = v67;
    v48 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v46, v47);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v48, (uint64_t)&__p, 1);
    v49 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v49, (uint64_t)&__p, 1);
    v50 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v50, (uint64_t)&__p, 1);
    v51 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v52 = sub_20BDDC1C8(v51, (uint64_t)&__p, 1);
    v53 = sub_20BDDC1C8(v52, (uint64_t)" failure ", 9);
    sub_20C0A3B78(&__p);
    if ((v64 & 0x80u) == 0)
      v54 = &__p;
    else
      v54 = __p;
    if ((v64 & 0x80u) == 0)
      v55 = v64;
    else
      v55 = v63;
    v56 = sub_20BDDC1C8(v53, (uint64_t)v54, v55);
    std::ios_base::getloc((const std::ios_base *)((char *)v56 + *(_QWORD *)(*v56 - 24)));
    v57 = std::locale::use_facet(&v69, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v57->__vftable[2].~facet_0)(v57, 10);
    std::locale::~locale(&v69);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v64 < 0)
      operator delete(__p);
    if ((char)v68 < 0)
      operator delete(v66);
    result = *(double *)&v59;
    v58 = v60;
    *v4 = v59;
    v4[1] = v58;
  }
  return result;
}

void sub_20C0A3AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, std::locale a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _OWORD *v27;

  if (a27 < 0)
    operator delete(__p);
  *v27 = a9;
  v27[1] = a10;
  _Unwind_Resume(exception_object);
}

void sub_20C0A3B78(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_111ListElementE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_111ListElementE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A3BEC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A3C00(uint64_t a1, char **a2)
{
  sub_20C09C930(a1);
  sub_20C09CF4C(a1);
  if (sub_20C09D568(a1, a2) && sub_20C09DC40(a1))
  {
    sub_20C09D134(a1);
    sub_20C09FC24(a1, a2);
    sub_20C0A04AC(a1);
    sub_20C09CB18(a1);
    return 1;
  }
  else
  {
    sub_20C09D31C(a1);
    sub_20C09CD00(a1);
    return 0;
  }
}

void sub_20C0A3C88(_OWORD *a1, uint64_t a2, _QWORD *a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int64x2_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  std::string __p;
  std::string v34;
  char *v35;
  uint64_t v36;

  v4 = a1[1];
  v30[0] = *a1;
  v30[1] = v4;
  v31 = a2;
  memset(&__p, 0, sizeof(__p));
  sub_20C088A1C(a3, (uint64_t)&__p, &v32);
  v5 = v32;
  if (!v32)
    sub_20C099D8C((uint64_t)v30, &__p);
  v6 = a3[1];
  if (*a3 == v6
    || (v7 = *(const void **)(v6 - 8)) == 0
    || (v8 = __dynamic_cast(v7, (const struct __class_type_info *)&unk_24C5275D0, (const struct __class_type_info *)&unk_24C527788, 0)) == 0)
  {
    sub_20BDDC0E4(&v34, "Unknown error");
    sub_20C099D8C((uint64_t)v30, &v34);
  }
  v9 = v8;
  v12 = v8[3];
  v10 = (uint64_t)(v8 + 3);
  v11 = v12;
  v13 = *(_QWORD **)(v10 - 8);
  if ((unint64_t)v13 >= v12)
  {
    v15 = (int64x2_t *)(v10 - 16);
    v16 = *(_QWORD *)(v10 - 16);
    v17 = ((uint64_t)v13 - v16) >> 3;
    if ((unint64_t)(v17 + 1) >> 61)
      sub_20BDDF694();
    v18 = v11 - v16;
    v19 = v18 >> 2;
    if (v18 >> 2 <= (unint64_t)(v17 + 1))
      v19 = v17 + 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v36 = v10;
    if (v20)
    {
      v21 = (char *)sub_20BDDF6A8(v10, v20);
      v5 = v32;
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    v35 = v23;
    v32 = 0;
    *(_QWORD *)v22 = v5;
    v14 = v22 + 8;
    v34.__r_.__value_.__r.__words[2] = (std::string::size_type)(v22 + 8);
    v25 = (_QWORD *)v9[1];
    v24 = (_QWORD *)v9[2];
    if (v24 == v25)
    {
      v27 = vdupq_n_s64((unint64_t)v24);
    }
    else
    {
      do
      {
        v26 = *--v24;
        *v24 = 0;
        *((_QWORD *)v22 - 1) = v26;
        v22 -= 8;
      }
      while (v24 != v25);
      v27 = *v15;
      v14 = (_QWORD *)v34.__r_.__value_.__r.__words[2];
      v23 = v35;
    }
    v9[1] = v22;
    v9[2] = v14;
    *(int64x2_t *)&v34.__r_.__value_.__r.__words[1] = v27;
    v28 = (char *)v9[3];
    v9[3] = v23;
    v35 = v28;
    v34.__r_.__value_.__r.__words[0] = v27.i64[0];
    sub_20C0A3EB4((uint64_t)&v34);
  }
  else
  {
    v32 = 0;
    *v13 = v5;
    v14 = v13 + 1;
  }
  v9[2] = v14;
  v29 = v32;
  v32 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C0A3E58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0A3EB4(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v4 = *(_QWORD *)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C0A3F14(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *p_p;
  uint64_t v12;
  _QWORD *v13;
  const std::locale::facet *v14;
  _BYTE *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  const std::locale::facet *v29;
  void *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  _QWORD *v41;
  const std::locale::facet *v42;
  void *__p;
  uint64_t v44;
  unsigned __int8 v45;
  std::locale v46;
  void *v47;
  uint64_t v48;
  unsigned __int8 v49;
  std::locale v50;

  while ((sub_20C09F5C4(a1) & 1) != 0)
    ;
  sub_20C01AE64((uint64_t)&v46, a1 + 8, (__int128 *)(a1 + 48));
  if ((v49 & 0x80u) == 0)
    v2 = &v47;
  else
    v2 = v47;
  if ((v49 & 0x80u) == 0)
    v3 = v49;
  else
    v3 = v48;
  v4 = (_QWORD *)MEMORY[0x24BEDB310];
  v5 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v2, v3);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v5, (uint64_t)&__p, 1);
  v6 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v6, (uint64_t)&__p, 1);
  v7 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v7, (uint64_t)&__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v9 = sub_20BDDC1C8(v8, (uint64_t)&__p, 1);
  v10 = sub_20BDDC1C8(v9, (uint64_t)"  start  ", 9);
  sub_20C0A4474(&__p);
  if ((v45 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v45 & 0x80u) == 0)
    v12 = v45;
  else
    v12 = v44;
  v13 = sub_20BDDC1C8(v10, (uint64_t)p_p, v12);
  sub_20BDDC1C8(v13, (uint64_t)"; current ", 10);
  if ((char)v45 < 0)
    operator delete(__p);
  if ((char)v49 < 0)
    operator delete(v47);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v14 = std::locale::use_facet(&v46, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v46);
  std::ostream::put();
  std::ostream::flush();
  v15 = *(_BYTE **)(a1 + 8);
  if (v15 == *(_BYTE **)(a1 + 40) || *v15 != 44)
  {
    sub_20C01AE64((uint64_t)&v46, a1 + 8, (__int128 *)(a1 + 48));
    if ((v49 & 0x80u) == 0)
      v31 = &v47;
    else
      v31 = v47;
    if ((v49 & 0x80u) == 0)
      v32 = v49;
    else
      v32 = v48;
    v33 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v31, v32);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v33, (uint64_t)&__p, 1);
    v34 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v34, (uint64_t)&__p, 1);
    v35 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v35, (uint64_t)&__p, 1);
    v36 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v37 = sub_20BDDC1C8(v36, (uint64_t)&__p, 1);
    v38 = sub_20BDDC1C8(v37, (uint64_t)" failure ", 9);
    sub_20C0A4474(&__p);
    if ((v45 & 0x80u) == 0)
      v39 = &__p;
    else
      v39 = __p;
    if ((v45 & 0x80u) == 0)
      v40 = v45;
    else
      v40 = v44;
    v41 = sub_20BDDC1C8(v38, (uint64_t)v39, v40);
    std::ios_base::getloc((const std::ios_base *)((char *)v41 + *(_QWORD *)(*v41 - 24)));
    v42 = std::locale::use_facet(&v50, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v42->__vftable[2].~facet_0)(v42, 10);
    std::locale::~locale(&v50);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v45 < 0)
      operator delete(__p);
    if ((char)v49 < 0)
      operator delete(v47);
    return 0;
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 8) = v15 + 1;
    *(_QWORD *)(a1 + 16) = v16;
    ++*(_QWORD *)(a1 + 32);
    sub_20C01AE64((uint64_t)&v46, a1 + 8, (__int128 *)(a1 + 48));
    if ((v49 & 0x80u) == 0)
      v17 = &v47;
    else
      v17 = v47;
    if ((v49 & 0x80u) == 0)
      v18 = v49;
    else
      v18 = v48;
    v19 = (_QWORD *)MEMORY[0x24BEDB310];
    v20 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v17, v18);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v20, (uint64_t)&__p, 1);
    v21 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v21, (uint64_t)&__p, 1);
    v22 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v22, (uint64_t)&__p, 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v24 = sub_20BDDC1C8(v23, (uint64_t)&__p, 1);
    v25 = sub_20BDDC1C8(v24, (uint64_t)" success ", 9);
    sub_20C0A4474(&__p);
    if ((v45 & 0x80u) == 0)
      v26 = &__p;
    else
      v26 = __p;
    if ((v45 & 0x80u) == 0)
      v27 = v45;
    else
      v27 = v44;
    v28 = sub_20BDDC1C8(v25, (uint64_t)v26, v27);
    sub_20BDDC1C8(v28, (uint64_t)"; next ", 7);
    if ((char)v45 < 0)
      operator delete(__p);
    if ((char)v49 < 0)
      operator delete(v47);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v19 + *(_QWORD *)(*v19 - 24)));
    v29 = std::locale::use_facet(&v46, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
    std::locale::~locale(&v46);
    std::ostream::put();
    std::ostream::flush();
    while ((sub_20C09F5C4(a1) & 1) != 0)
      ;
    return 1;
  }
}

void sub_20C0A4400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0A4474(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB4017 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB4017 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A44F0(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A4504(uint64_t a1)
{
  uint64_t v2;
  __int128 *v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *p_p;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _BYTE *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  const std::locale::facet *v31;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  uint64_t v42;
  _QWORD *v43;
  const std::locale::facet *v44;
  void *__p;
  uint64_t v46;
  unsigned __int8 v47;
  std::locale v48;
  void *v49;
  uint64_t v50;
  unsigned __int8 v51;
  std::locale v52;

  v2 = a1 + 8;
  v3 = (__int128 *)(a1 + 48);
  sub_20C01AE64((uint64_t)&v48, a1 + 8, (__int128 *)(a1 + 48));
  if ((v51 & 0x80u) == 0)
    v4 = &v49;
  else
    v4 = v49;
  if ((v51 & 0x80u) == 0)
    v5 = v51;
  else
    v5 = v50;
  v6 = (_QWORD *)MEMORY[0x24BEDB310];
  v7 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v4, v5);
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v7, (uint64_t)&__p, 1);
  v8 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 58;
  sub_20BDDC1C8(v8, (uint64_t)&__p, 1);
  v9 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 40;
  sub_20BDDC1C8(v9, (uint64_t)&__p, 1);
  v10 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(__p) = 41;
  v11 = sub_20BDDC1C8(v10, (uint64_t)&__p, 1);
  v12 = sub_20BDDC1C8(v11, (uint64_t)"  start  ", 9);
  sub_20C0A4A44(&__p);
  if ((v47 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = __p;
  if ((v47 & 0x80u) == 0)
    v14 = v47;
  else
    v14 = v46;
  v15 = sub_20BDDC1C8(v12, (uint64_t)p_p, v14);
  sub_20BDDC1C8(v15, (uint64_t)"; current ", 10);
  if ((char)v47 < 0)
    operator delete(__p);
  if ((char)v51 < 0)
    operator delete(v49);
  sub_20C088CD8(a1);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v16 = std::locale::use_facet(&v48, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
  std::locale::~locale(&v48);
  std::ostream::put();
  std::ostream::flush();
  v17 = *(_BYTE **)(a1 + 8);
  if (v17 == *(_BYTE **)(a1 + 40) || *v17 != 93)
  {
    sub_20C01AE64((uint64_t)&v48, v2, v3);
    if ((v51 & 0x80u) == 0)
      v33 = &v49;
    else
      v33 = v49;
    if ((v51 & 0x80u) == 0)
      v34 = v51;
    else
      v34 = v50;
    v35 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v33, v34);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v35, (uint64_t)&__p, 1);
    v36 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v36, (uint64_t)&__p, 1);
    v37 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v37, (uint64_t)&__p, 1);
    v38 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v39 = sub_20BDDC1C8(v38, (uint64_t)&__p, 1);
    v40 = sub_20BDDC1C8(v39, (uint64_t)" failure ", 9);
    sub_20C0A4A44(&__p);
    if ((v47 & 0x80u) == 0)
      v41 = &__p;
    else
      v41 = __p;
    if ((v47 & 0x80u) == 0)
      v42 = v47;
    else
      v42 = v46;
    v43 = sub_20BDDC1C8(v40, (uint64_t)v41, v42);
    std::ios_base::getloc((const std::ios_base *)((char *)v43 + *(_QWORD *)(*v43 - 24)));
    v44 = std::locale::use_facet(&v52, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v44->__vftable[2].~facet_0)(v44, 10);
    std::locale::~locale(&v52);
    std::ostream::put();
    std::ostream::flush();
    if ((char)v47 < 0)
      operator delete(__p);
    if ((char)v51 < 0)
      operator delete(v49);
    return 0;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 8) = v17 + 1;
    *(_QWORD *)(a1 + 16) = v18;
    ++*(_QWORD *)(a1 + 32);
    sub_20C01AE64((uint64_t)&v48, v2, v3);
    if ((v51 & 0x80u) == 0)
      v19 = &v49;
    else
      v19 = v49;
    if ((v51 & 0x80u) == 0)
      v20 = v51;
    else
      v20 = v50;
    v21 = (_QWORD *)MEMORY[0x24BEDB310];
    v22 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)v19, v20);
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v22, (uint64_t)&__p, 1);
    v23 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 58;
    sub_20BDDC1C8(v23, (uint64_t)&__p, 1);
    v24 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 40;
    sub_20BDDC1C8(v24, (uint64_t)&__p, 1);
    v25 = (_QWORD *)std::ostream::operator<<();
    LOBYTE(__p) = 41;
    v26 = sub_20BDDC1C8(v25, (uint64_t)&__p, 1);
    v27 = sub_20BDDC1C8(v26, (uint64_t)" success ", 9);
    sub_20C0A4A44(&__p);
    if ((v47 & 0x80u) == 0)
      v28 = &__p;
    else
      v28 = __p;
    if ((v47 & 0x80u) == 0)
      v29 = v47;
    else
      v29 = v46;
    v30 = sub_20BDDC1C8(v27, (uint64_t)v28, v29);
    sub_20BDDC1C8(v30, (uint64_t)"; next ", 7);
    if ((char)v47 < 0)
      operator delete(__p);
    if ((char)v51 < 0)
      operator delete(v49);
    sub_20C088CD8(a1);
    std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
    v31 = std::locale::use_facet(&v48, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v31->__vftable[2].~facet_0)(v31, 10);
    std::locale::~locale(&v48);
    std::ostream::put();
    std::ostream::flush();
    return 1;
  }
}

void sub_20C0A49D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0A4A44(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17ListEndE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_17ListEndE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A4AB8(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C0A4ACC(uint64_t a1)
{
  std::string v2;

  sub_20BDDC0E4(&v2, "Missing ending ']'");
  sub_20C088F14(a1, &v2);
}

void sub_20C0A4B00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0A4B1C(_OWORD *a1, uint64_t a2, _QWORD *a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  const void *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int64x2_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  std::string __p;
  std::string v34;
  char *v35;
  uint64_t v36;

  v4 = a1[1];
  v30[0] = *a1;
  v30[1] = v4;
  v31 = a2;
  memset(&__p, 0, sizeof(__p));
  sub_20C088A1C(a3, (uint64_t)&__p, &v32);
  v5 = v32;
  if (!v32)
    sub_20C099D8C((uint64_t)v30, &__p);
  v6 = a3[1];
  if (*a3 == v6
    || (v7 = *(const void **)(v6 - 8)) == 0
    || (v8 = __dynamic_cast(v7, (const struct __class_type_info *)&unk_24C5275D0, (const struct __class_type_info *)&unk_24C527748, 0)) == 0)
  {
    sub_20BDDC0E4(&v34, "Unknown error");
    sub_20C099D8C((uint64_t)v30, &v34);
  }
  v9 = v8;
  v12 = v8[6];
  v10 = (uint64_t)(v8 + 6);
  v11 = v12;
  v13 = *(_QWORD **)(v10 - 8);
  if ((unint64_t)v13 >= v12)
  {
    v15 = (int64x2_t *)(v10 - 16);
    v16 = *(_QWORD *)(v10 - 16);
    v17 = ((uint64_t)v13 - v16) >> 3;
    if ((unint64_t)(v17 + 1) >> 61)
      sub_20BDDF694();
    v18 = v11 - v16;
    v19 = v18 >> 2;
    if (v18 >> 2 <= (unint64_t)(v17 + 1))
      v19 = v17 + 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v20 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v20 = v19;
    v36 = v10;
    if (v20)
    {
      v21 = (char *)sub_20BDDF6A8(v10, v20);
      v5 = v32;
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[8 * v17];
    v23 = &v21[8 * v20];
    v35 = v23;
    v32 = 0;
    *(_QWORD *)v22 = v5;
    v14 = v22 + 8;
    v34.__r_.__value_.__r.__words[2] = (std::string::size_type)(v22 + 8);
    v25 = (_QWORD *)v9[4];
    v24 = (_QWORD *)v9[5];
    if (v24 == v25)
    {
      v27 = vdupq_n_s64((unint64_t)v24);
    }
    else
    {
      do
      {
        v26 = *--v24;
        *v24 = 0;
        *((_QWORD *)v22 - 1) = v26;
        v22 -= 8;
      }
      while (v24 != v25);
      v27 = *v15;
      v14 = (_QWORD *)v34.__r_.__value_.__r.__words[2];
      v23 = v35;
    }
    v9[4] = v22;
    v9[5] = v14;
    *(int64x2_t *)&v34.__r_.__value_.__r.__words[1] = v27;
    v28 = (char *)v9[6];
    v9[6] = v23;
    v35 = v28;
    v34.__r_.__value_.__r.__words[0] = v27.i64[0];
    sub_20C0A3EB4((uint64_t)&v34);
  }
  else
  {
    v32 = 0;
    *v13 = v5;
    v14 = v13 + 1;
  }
  v9[5] = v14;
  v29 = v32;
  v32 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20C0A4CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0A4D48(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB4083 & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB4083 & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A4DC4(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C0A4DD8(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_119FunctionArgumentEndE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_119FunctionArgumentEndE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A4E4C(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C0A4E60(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)(0x800000020CAB410ALL & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)(0x800000020CAB410ALL & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A4EDC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C0A4EF0(uint64_t a1)
{
  std::string v2;

  sub_20BDDC0E4(&v2, "Missing ending ')'");
  sub_20C088F14(a1, &v2);
}

void sub_20C0A4F24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0A4F40(uint64_t a1)
{
  std::string v2;

  sub_20BDDC0E4(&v2, "Unexpected expression");
  sub_20C088F14(a1, &v2);
}

void sub_20C0A4F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20C0A4F90(_QWORD *a1@<X8>)
{
  char *v2;
  char *v3;

  v2 = __cxa_demangle((const char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113ExpressionEndE" & 0x7FFFFFFFFFFFFFFFLL), 0, 0, 0);
  if (v2)
  {
    v3 = v2;
    sub_20BDDC0E4(a1, v2);
    free(v3);
  }
  else
  {
    sub_20BDDC0E4(a1, (char *)((unint64_t)"N32pxrInternal__aapl__pxrReserved__12_GLOBAL__N_113ExpressionEndE" & 0x7FFFFFFFFFFFFFFFLL));
  }
}

void sub_20C0A5004(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_20C0A5018(uint64_t a1)
{
  std::string v2;

  sub_20C088F14(a1, &v2);
}

void sub_20C0A504C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double sub_20C0A5068(uint64_t a1, char **a2)
{
  double result;
  char v5;

  if ((sub_20C0A50F8(a1, (uint64_t)a2) & 1) == 0
    && (sub_20C0A51B4(a1, (uint64_t)a2) & 1) == 0
    && (sub_20C0A533C(a1, (uint64_t)a2) & 1) == 0)
  {
    result = sub_20C0A54C4(a1, (uint64_t)a2);
    if ((v5 & 1) == 0 && (sub_20C0A55CC(a1, (uint64_t)a2) & 1) == 0 && (sub_20C0A5724(a1, (uint64_t)a2) & 1) == 0)
      *(_QWORD *)&result = sub_20C0A5AE4(a1, a2).n128_u64[0];
  }
  return result;
}

uint64_t sub_20C0A50F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v4 = sub_20C08D77C((_QWORD *)a1);
  if ((_DWORD)v4)
  {
    v5 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a1 + 8);
    v9 = v5;
    v10 = a1 + 8;
    if (!sub_20C08DD98((_QWORD *)a1))
    {
      v7 = v9;
      *(_OWORD *)(a1 + 8) = v8;
      *(_OWORD *)(a1 + 24) = v7;
      sub_20C08E14C(a1);
    }
    while ((sub_20C08DDF4((_QWORD *)a1) & 1) != 0)
      ;
    sub_20C08DE54((char **)&v8, a1, a2);
    sub_20C0A57EC((_QWORD *)a1);
  }
  return v4;
}

void sub_20C0A519C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12)
{
  _OWORD *v12;

  *v12 = a11;
  v12[1] = a12;
  *v12 = a9;
  v12[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A51B4(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  __int128 v3;
  uint64_t v6;
  __int128 v7;
  char v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v13;
  _BYTE *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;

  v2 = (_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v16 = *(_OWORD *)(a1 + 8);
  v17 = v3;
  if (*(_QWORD *)(a1 + 40) == (_QWORD)v16 || *(_BYTE *)v16 != 34)
    return 0;
  v6 = *(_QWORD *)(a1 + 16) + 1;
  *(_QWORD *)(a1 + 8) = v16 + 1;
  *(_QWORD *)(a1 + 16) = v6;
  ++*(_QWORD *)(a1 + 32);
  sub_20C08E384(a2);
  while (1)
  {
    while ((sub_20C0A5838(a1, a2) & 1) != 0)
      ;
    v7 = v2[1];
    v16 = *v2;
    v17 = v7;
    v18 = v2;
    sub_20C0A58F4(a1);
    if ((v8 & 1) == 0 && (!sub_20C0A5974(a1) || !sub_20C093D48((_QWORD *)a1)))
      break;
    do
    {
      do
        sub_20C0A58F4(a1);
      while ((v9 & 1) != 0);
      v10 = v2[1];
      v19 = *v2;
      v20 = v10;
    }
    while (sub_20C0A5974(a1) && sub_20C093D48((_QWORD *)a1));
    v11 = v20;
    *v2 = v19;
    v2[1] = v11;
    sub_20C093DA0((char **)&v16, a1, a2);
  }
  v13 = v17;
  *v2 = v16;
  v2[1] = v13;
  v14 = *(_BYTE **)(a1 + 8);
  if (*(_BYTE **)(a1 + 40) == v14 || *v14 != 34)
    sub_20C093F94(a1);
  v15 = *(_QWORD *)(a1 + 16) + 1;
  *(_QWORD *)(a1 + 8) = v14 + 1;
  *(_QWORD *)(a1 + 16) = v15;
  ++*(_QWORD *)(a1 + 32);
  return 1;
}

void sub_20C0A5318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14)
{
  _OWORD *v14;

  *v14 = a13;
  v14[1] = a14;
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A533C(uint64_t a1, uint64_t a2)
{
  _OWORD *v2;
  __int128 v3;
  uint64_t v6;
  __int128 v7;
  char v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v13;
  _BYTE *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;

  v2 = (_OWORD *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v16 = *(_OWORD *)(a1 + 8);
  v17 = v3;
  if (*(_QWORD *)(a1 + 40) == (_QWORD)v16 || *(_BYTE *)v16 != 39)
    return 0;
  v6 = *(_QWORD *)(a1 + 16) + 1;
  *(_QWORD *)(a1 + 8) = v16 + 1;
  *(_QWORD *)(a1 + 16) = v6;
  ++*(_QWORD *)(a1 + 32);
  sub_20C08E384(a2);
  while (1)
  {
    while ((sub_20C0A5838(a1, a2) & 1) != 0)
      ;
    v7 = v2[1];
    v16 = *v2;
    v17 = v7;
    v18 = v2;
    sub_20C0A59EC(a1);
    if ((v8 & 1) == 0 && (!sub_20C0A5A6C(a1) || !sub_20C093D48((_QWORD *)a1)))
      break;
    do
    {
      do
        sub_20C0A59EC(a1);
      while ((v9 & 1) != 0);
      v10 = v2[1];
      v19 = *v2;
      v20 = v10;
    }
    while (sub_20C0A5A6C(a1) && sub_20C093D48((_QWORD *)a1));
    v11 = v20;
    *v2 = v19;
    v2[1] = v11;
    sub_20C097DBC((char **)&v16, a1, a2);
  }
  v13 = v17;
  *v2 = v16;
  v2[1] = v13;
  v14 = *(_BYTE **)(a1 + 8);
  if (*(_BYTE **)(a1 + 40) == v14 || *v14 != 39)
    sub_20C097FB0(a1);
  v15 = *(_QWORD *)(a1 + 16) + 1;
  *(_QWORD *)(a1 + 8) = v14 + 1;
  *(_QWORD *)(a1 + 16) = v15;
  ++*(_QWORD *)(a1 + 32);
  return 1;
}

void sub_20C0A54A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14)
{
  _OWORD *v14;

  *v14 = a13;
  v14[1] = a14;
  _Unwind_Resume(a1);
}

double sub_20C0A54C4(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  __int128 v3;
  unsigned __int8 *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v3 = *(_OWORD *)(a1 + 24);
  v13 = *(_OWORD *)(a1 + 8);
  v2 = (unsigned __int8 *)v13;
  v14 = v3;
  v15 = a1 + 8;
  v4 = *(unsigned __int8 **)(a1 + 40);
  if ((unsigned __int8 *)v13 != v4 && *(_BYTE *)v13 == 45)
  {
    v2 = (unsigned __int8 *)(v13 + 1);
    v5 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 8) = v13 + 1;
    *(_QWORD *)(a1 + 16) = v5;
    ++*(_QWORD *)(a1 + 32);
  }
  if (v2 == v4 || *v2 - 48 > 9)
  {
    result = *(double *)&v13;
    v12 = v14;
    *(_OWORD *)(a1 + 8) = v13;
    *(_OWORD *)(a1 + 24) = v12;
  }
  else
  {
    v6 = v2 + 1;
    v7 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = v7 + 1;
    v8 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v8 + 1;
    if (v6 != v4)
    {
      v9 = v8 + 2;
      v10 = v7 + 2;
      do
      {
        if (*v6 - 48 > 9)
          break;
        *(_QWORD *)(a1 + 8) = ++v6;
        *(_QWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 32) = v9++;
        ++v10;
      }
      while (v6 != v4);
    }
    sub_20C099BE8(&v13, a1, a2);
  }
  return result;
}

void sub_20C0A55C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A55CC(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  char v5;
  char v6;
  char v7;
  char v8;
  uint64_t result;
  _BYTE *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  v4 = (__int128 *)(a1 + 8);
  v11 = *(_OWORD *)(a1 + 8);
  v13 = *(_OWORD *)(a1 + 24);
  if (sub_20C09C028((_QWORD *)a1))
  {
    v16 = *v4;
    v20 = v4[1];
    v5 = sub_20C08DDF4((_QWORD *)a1);
    *v4 = v16;
    v4[1] = v20;
    if ((v5 & 1) == 0)
      goto LABEL_10;
  }
  *v4 = v11;
  v4[1] = v13;
  if (sub_20C09C118((_QWORD *)a1)
    && (v17 = *v4, v21 = v4[1], v6 = sub_20C08DDF4((_QWORD *)a1), *v4 = v17, v4[1] = v21, (v6 & 1) == 0))
  {
LABEL_10:
    v10 = sub_20C09C178(a2);
    result = 1;
    v10[8] = 1;
  }
  else
  {
    *v4 = v11;
    v4[1] = v13;
    v12 = *v4;
    v14 = v4[1];
    v15 = *v4;
    if (sub_20C09C3A0((_QWORD *)a1))
    {
      v18 = *v4;
      v22 = v4[1];
      v7 = sub_20C08DDF4((_QWORD *)a1);
      *v4 = v18;
      v4[1] = v22;
      if ((v7 & 1) == 0)
        goto LABEL_11;
    }
    *v4 = v15;
    v4[1] = v14;
    if (sub_20C09C49C((_QWORD *)a1)
      && (v19 = *v4, v23 = v4[1], v8 = sub_20C08DDF4((_QWORD *)a1), *v4 = v19, v4[1] = v23, (v8 & 1) == 0))
    {
LABEL_11:
      *((_BYTE *)sub_20C09C178(a2) + 8) = 0;
      return 1;
    }
    else
    {
      result = 0;
      *v4 = v12;
      v4[1] = v14;
    }
  }
  return result;
}

void sub_20C0A5714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A5724(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  char v5;
  char v6;
  uint64_t result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v4 = (__int128 *)(a1 + 8);
  v8 = *(_OWORD *)(a1 + 8);
  v9 = *(_OWORD *)(a1 + 24);
  if (sub_20C09C620((_QWORD *)a1))
  {
    v10 = *v4;
    v12 = v4[1];
    v5 = sub_20C08DDF4((_QWORD *)a1);
    *v4 = v10;
    v4[1] = v12;
    if ((v5 & 1) == 0)
      goto LABEL_6;
  }
  *v4 = v8;
  v4[1] = v9;
  if (sub_20C09C710((_QWORD *)a1)
    && (v11 = *v4, v13 = v4[1], v6 = sub_20C08DDF4((_QWORD *)a1), *v4 = v11, v4[1] = v13, (v6 & 1) == 0))
  {
LABEL_6:
    sub_20C09C770(a2);
    return 1;
  }
  else
  {
    result = 0;
    *v4 = v8;
    v4[1] = v9;
  }
  return result;
}

void sub_20C0A57E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0A57EC(_QWORD *result)
{
  _BYTE *v1;
  uint64_t v2;

  v1 = (_BYTE *)result[1];
  if ((_BYTE *)result[5] == v1 || *v1 != 125)
    sub_20C08E224((uint64_t)result);
  v2 = result[2] + 1;
  result[1] = v1 + 1;
  result[2] = v2;
  ++result[4];
  return result;
}

uint64_t sub_20C0A5838(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v4 = sub_20C08D77C((_QWORD *)a1);
  if ((_DWORD)v4)
  {
    v5 = *(_OWORD *)(a1 + 24);
    v8 = *(_OWORD *)(a1 + 8);
    v9 = v5;
    v10 = a1 + 8;
    if (!sub_20C08DD98((_QWORD *)a1))
    {
      v7 = v9;
      *(_OWORD *)(a1 + 8) = v8;
      *(_OWORD *)(a1 + 24) = v7;
      sub_20C090C34(a1);
    }
    while ((sub_20C08DDF4((_QWORD *)a1) & 1) != 0)
      ;
    sub_20C090970((char **)&v8, a1, a2);
    sub_20C0A57EC((_QWORD *)a1);
  }
  return v4;
}

void sub_20C0A58DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12)
{
  _OWORD *v12;

  *v12 = a11;
  v12[1] = a12;
  *v12 = a9;
  v12[1] = a10;
  _Unwind_Resume(a1);
}

__n128 sub_20C0A58F4(uint64_t a1)
{
  __n128 *v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __n128 v5;

  v1 = (__n128 *)(a1 + 8);
  v4 = *(__n128 *)(a1 + 8);
  v5 = *(__n128 *)(a1 + 24);
  if (v4.n128_u64[0] == *(_QWORD *)(a1 + 40)
    || *(_BYTE *)v4.n128_u64[0] != 92
    || (v2 = *(_QWORD *)(a1 + 16) + 1,
        *(_QWORD *)(a1 + 8) = v4.n128_u64[0] + 1,
        *(_QWORD *)(a1 + 16) = v2,
        ++*(_QWORD *)(a1 + 32),
        !sub_20C092250((_QWORD *)a1)))
  {
    result = v4;
    *v1 = v4;
    v1[1] = v5;
  }
  return result;
}

BOOL sub_20C0A5974(uint64_t a1)
{
  _OWORD *v2;
  _BOOL8 result;
  unsigned __int8 *v4;
  __int128 v5;
  __int128 v6;

  v2 = (_OWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 8);
  v6 = *(_OWORD *)(a1 + 24);
  if (sub_20C08D77C((_QWORD *)a1))
  {
    result = 0;
LABEL_5:
    *v2 = v5;
    v2[1] = v6;
    return result;
  }
  v4 = *(unsigned __int8 **)(a1 + 8);
  if (v4 != *(unsigned __int8 **)(a1 + 40))
  {
    result = *v4 != 34;
    goto LABEL_5;
  }
  *v2 = v5;
  v2[1] = v6;
  return 1;
}

__n128 sub_20C0A59EC(uint64_t a1)
{
  __n128 *v1;
  uint64_t v2;
  __n128 result;
  __n128 v4;
  __n128 v5;

  v1 = (__n128 *)(a1 + 8);
  v4 = *(__n128 *)(a1 + 8);
  v5 = *(__n128 *)(a1 + 24);
  if (v4.n128_u64[0] == *(_QWORD *)(a1 + 40)
    || *(_BYTE *)v4.n128_u64[0] != 92
    || (v2 = *(_QWORD *)(a1 + 16) + 1,
        *(_QWORD *)(a1 + 8) = v4.n128_u64[0] + 1,
        *(_QWORD *)(a1 + 16) = v2,
        ++*(_QWORD *)(a1 + 32),
        !sub_20C096864((_QWORD *)a1)))
  {
    result = v4;
    *v1 = v4;
    v1[1] = v5;
  }
  return result;
}

BOOL sub_20C0A5A6C(uint64_t a1)
{
  _OWORD *v2;
  _BOOL8 result;
  unsigned __int8 *v4;
  __int128 v5;
  __int128 v6;

  v2 = (_OWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 8);
  v6 = *(_OWORD *)(a1 + 24);
  if (sub_20C08D77C((_QWORD *)a1))
  {
    result = 0;
LABEL_5:
    *v2 = v5;
    v2[1] = v6;
    return result;
  }
  v4 = *(unsigned __int8 **)(a1 + 8);
  if (v4 != *(unsigned __int8 **)(a1 + 40))
  {
    result = *v4 != 39;
    goto LABEL_5;
  }
  *v2 = v5;
  v2[1] = v6;
  return 1;
}

__n128 sub_20C0A5AE4(uint64_t a1, char **a2)
{
  __n128 *v4;
  __n128 result;
  __n128 v6;
  __n128 v7;

  v4 = (__n128 *)(a1 + 8);
  v6 = *(__n128 *)(a1 + 8);
  v7 = *(__n128 *)(a1 + 24);
  if (sub_20C0A5B78(a1, a2) && (sub_20C0A5C00((_QWORD *)a1) & 1) != 0)
  {
    sub_20C0A5DDC(a1, a2);
    sub_20C0A5CF0((_QWORD *)a1);
  }
  else
  {
    result = v6;
    *v4 = v6;
    v4[1] = v7;
  }
  return result;
}

void sub_20C0A5B68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A5B78(uint64_t a1, char **a2)
{
  _OWORD *v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v4 = (_OWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a1 + 8);
  v10 = v5;
  v11 = a1 + 8;
  v6 = sub_20C08DD98((_QWORD *)a1);
  if ((_DWORD)v6)
  {
    while ((sub_20C08DDF4((_QWORD *)a1) & 1) != 0)
      ;
    sub_20C09E6AC((char **)&v9, a1, a2);
  }
  else
  {
    v7 = v10;
    *v4 = v9;
    v4[1] = v7;
  }
  return v6;
}

void sub_20C0A5BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A5C00(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = a1[5];
  v2 = a1[1];
  if (v2 == v1)
    return 0;
  v3 = 0;
  v4 = a1[2];
  v5 = a1[4];
  while (1)
  {
    v6 = *(unsigned __int8 *)(v2 + v3);
    if (v6 != 32)
      break;
    a1[1] = v2 + v3 + 1;
    a1[2] = v4 + v3 + 1;
    a1[4] = v5 + v3++ + 1;
    if (v2 + v3 == v1)
      return 0;
  }
  v7 = 0;
  if (v2 + v3 != v1 && v6 == 40)
  {
    v9 = v2 + v3 + 1;
    v10 = v4 + v3;
    a1[1] = v9;
    a1[2] = v10 + 1;
    v11 = v5 + v3;
    a1[4] = v11 + 1;
    if (v9 != v1)
    {
      v12 = 0;
      do
      {
        if (*(_BYTE *)(v2 + v12 + v3 + 1) != 32)
          break;
        v13 = v2 + v3 + v12 + 2;
        a1[1] = v13;
        a1[2] = v10 + v12 + 2;
        a1[4] = v11 + v12++ + 2;
      }
      while (v13 != v1);
    }
    return 1;
  }
  return v7;
}

_QWORD *sub_20C0A5CF0(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = result[5];
  v2 = result[1];
  if (v2 == v1)
    goto LABEL_5;
  v3 = 0;
  v4 = result[2];
  v5 = result[4];
  while (1)
  {
    v6 = *(unsigned __int8 *)(v2 + v3);
    if (v6 != 32)
      break;
    result[1] = v2 + v3 + 1;
    result[2] = v4 + v3 + 1;
    result[4] = v5 + v3++ + 1;
    if (v2 + v3 == v1)
      goto LABEL_5;
  }
  if (v2 + v3 == v1 || v6 != 41)
LABEL_5:
    sub_20C0A4EF0((uint64_t)result);
  v7 = v2 + v3 + 1;
  v8 = v4 + v3;
  result[1] = v7;
  result[2] = v8 + 1;
  v9 = v5 + v3;
  result[4] = v9 + 1;
  if (v7 != v1)
  {
    v10 = 0;
    do
    {
      if (*(_BYTE *)(v2 + v10 + v3 + 1) != 32)
        break;
      v11 = v2 + v3 + v10 + 2;
      result[1] = v11;
      result[2] = v8 + v10 + 2;
      result[4] = v9 + v10++ + 2;
    }
    while (v11 != v1);
  }
  return result;
}

void sub_20C0A5DDC(uint64_t a1, char **a2)
{
  __int128 *v4;
  int v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = (__int128 *)(a1 + 8);
  v11 = *(_OWORD *)(a1 + 8);
  v12 = *(_OWORD *)(a1 + 24);
  sub_20C0A5ED0(a1, a2);
  if (v5)
  {
    v13 = *v4;
    v14 = v4[1];
    if (sub_20C0A6208((_QWORD *)a1))
    {
      do
      {
        sub_20C0A5ED0(a1, a2);
        if (!v6)
          break;
        v13 = *v4;
        v14 = v4[1];
      }
      while ((sub_20C0A6208((_QWORD *)a1) & 1) != 0);
    }
    *v4 = v13;
    v4[1] = v14;
  }
  else
  {
    *v4 = v11;
    v4[1] = v12;
    v7 = *(_BYTE **)(a1 + 40);
    v8 = *(_BYTE **)(a1 + 8);
    if (v8 != v7)
    {
      v9 = *(_QWORD *)(a1 + 32) + 1;
      v10 = *(_QWORD *)(a1 + 16) + 1;
      do
      {
        if (*v8 != 32)
          break;
        *(_QWORD *)(a1 + 8) = ++v8;
        *(_QWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 32) = v9++;
        ++v10;
      }
      while (v8 != v7);
    }
  }
}

void sub_20C0A5EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

double sub_20C0A5ED0(uint64_t a1, char **a2)
{
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  double result;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v4 = (__int128 *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 24);
  v13 = *(_OWORD *)(a1 + 8);
  v14 = v5;
  v15 = a1 + 8;
  if ((sub_20C0A5068() & 1) != 0)
  {
LABEL_7:
    sub_20C0A4B1C(&v13, a1, a2);
    return result;
  }
  v6 = v4[1];
  v16 = *v4;
  v17 = v6;
  v7 = *(_BYTE **)(a1 + 8);
  if (v7 != *(_BYTE **)(a1 + 40) && *v7 == 91)
  {
    v8 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 8) = v7 + 1;
    *(_QWORD *)(a1 + 16) = v8;
    ++*(_QWORD *)(a1 + 32);
    sub_20C0A2944(a2);
    sub_20C0A5FF0(a1, a2);
    v9 = *(_BYTE **)(a1 + 8);
    if (v9 == *(_BYTE **)(a1 + 40) || *v9 != 93)
      sub_20C0A4ACC(a1);
    v10 = *(_QWORD *)(a1 + 16) + 1;
    *(_QWORD *)(a1 + 8) = v9 + 1;
    *(_QWORD *)(a1 + 16) = v10;
    ++*(_QWORD *)(a1 + 32);
    goto LABEL_7;
  }
  result = *(double *)&v13;
  v12 = v14;
  *v4 = v13;
  v4[1] = v12;
  return result;
}

void sub_20C0A5FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10, uint64_t a11, uint64_t a12, __int128 a13, __int128 a14)
{
  _OWORD *v14;

  *v14 = a13;
  v14[1] = a14;
  *v14 = a9;
  v14[1] = a10;
  _Unwind_Resume(a1);
}

void sub_20C0A5FF0(uint64_t a1, char **a2)
{
  __int128 *v4;
  int v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v4 = (__int128 *)(a1 + 8);
  v11 = *(_OWORD *)(a1 + 8);
  v12 = *(_OWORD *)(a1 + 24);
  sub_20C0A60E4(a1, a2);
  if (v5)
  {
    v13 = *v4;
    v14 = v4[1];
    if (sub_20C0A6208((_QWORD *)a1))
    {
      do
      {
        sub_20C0A60E4(a1, a2);
        if (!v6)
          break;
        v13 = *v4;
        v14 = v4[1];
      }
      while ((sub_20C0A6208((_QWORD *)a1) & 1) != 0);
    }
    *v4 = v13;
    v4[1] = v14;
  }
  else
  {
    *v4 = v11;
    v4[1] = v12;
    v7 = *(_BYTE **)(a1 + 40);
    v8 = *(_BYTE **)(a1 + 8);
    if (v8 != v7)
    {
      v9 = *(_QWORD *)(a1 + 32) + 1;
      v10 = *(_QWORD *)(a1 + 16) + 1;
      do
      {
        if (*v8 != 32)
          break;
        *(_QWORD *)(a1 + 8) = ++v8;
        *(_QWORD *)(a1 + 16) = v10;
        *(_QWORD *)(a1 + 32) = v9++;
        ++v10;
      }
      while (v8 != v7);
    }
  }
}

void sub_20C0A60CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

double sub_20C0A60E4(uint64_t a1, char **a2)
{
  _OWORD *v4;
  __int128 v5;
  char v6;
  double result;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v4 = (_OWORD *)(a1 + 8);
  v5 = *(_OWORD *)(a1 + 24);
  v9 = *(_OWORD *)(a1 + 8);
  v10 = v5;
  v11 = a1 + 8;
  if ((sub_20C0A50F8(a1, (uint64_t)a2) & 1) != 0
    || (sub_20C0A51B4(a1, (uint64_t)a2) & 1) != 0
    || (sub_20C0A533C(a1, (uint64_t)a2) & 1) != 0
    || (sub_20C0A54C4(a1, (uint64_t)a2), (v6 & 1) != 0)
    || (sub_20C0A55CC(a1, (uint64_t)a2) & 1) != 0
    || (sub_20C0A5724(a1, (uint64_t)a2) & 1) != 0
    || sub_20C0A61BC((_QWORD *)a1, a2))
  {
    sub_20C0A3C88(&v9, a1, a2);
  }
  else
  {
    result = *(double *)&v9;
    v8 = v10;
    *v4 = v9;
    v4[1] = v8;
  }
  return result;
}

void sub_20C0A61B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9, __int128 a10)
{
  _OWORD *v10;

  *v10 = a9;
  v10[1] = a10;
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A61BC(_QWORD *a1, char **a2)
{
  uint64_t result;

  result = sub_20C0A5B78((uint64_t)a1, a2);
  if ((_DWORD)result)
  {
    result = sub_20C0A5C00(a1);
    if ((_DWORD)result)
    {
      sub_20C0A5DDC(a1, a2);
      sub_20C0A5CF0(a1);
      return 1;
    }
  }
  return result;
}

uint64_t sub_20C0A6208(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = a1[5];
  v2 = a1[1];
  if (v2 == v1)
    return 0;
  v3 = 0;
  v4 = a1[2];
  v5 = a1[4];
  while (1)
  {
    v6 = *(unsigned __int8 *)(v2 + v3);
    if (v6 != 32)
      break;
    a1[1] = v2 + v3 + 1;
    a1[2] = v4 + v3 + 1;
    a1[4] = v5 + v3++ + 1;
    if (v2 + v3 == v1)
      return 0;
  }
  v7 = 0;
  if (v2 + v3 != v1 && v6 == 44)
  {
    v9 = v2 + v3 + 1;
    v10 = v4 + v3;
    a1[1] = v9;
    a1[2] = v10 + 1;
    v11 = v5 + v3;
    a1[4] = v11 + 1;
    if (v9 != v1)
    {
      v12 = 0;
      do
      {
        if (*(_BYTE *)(v2 + v12 + v3 + 1) != 32)
          break;
        v13 = v2 + v3 + v12 + 2;
        a1[1] = v13;
        a1[2] = v10 + v12 + 2;
        a1[4] = v11 + v12++ + 2;
      }
      while (v13 != v1);
    }
    return 1;
  }
  return v7;
}

void pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType::~SdfDataTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *this)
{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType::SdfDataTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "timeSamples", 0);
  v3 = *v2;
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v6 = operator new(8uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *v6 = v3;
  v7 = v6 + 1;
  *((_QWORD *)this + 3) = v6 + 1;
  if ((v3 & 7) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *v6 &= 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
  }
  else
  {
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

void sub_20C0A6484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;

  v11 = v10;
  sub_20BEEB2B8(&a9);
  if ((v11 & 7) != 0)
  {
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_20C96B3E4(v9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData(unsigned int **this, const void *a2)
{
  sub_20BEBCE60(this + 2, a2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractData::IsEmpty(pxrInternal__aapl__pxrReserved__::SdfAbstractData *this)
{
  void (**v3)(void **, pxrInternal__aapl__pxrReserved__::SdfAbstractData *);
  unsigned __int8 v4;

  v3 = (void (**)(void **, pxrInternal__aapl__pxrReserved__::SdfAbstractData *))&unk_24C527978;
  v4 = 1;
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractData *, void **))(*(_QWORD *)this + 312))(this, (void **)&v3);
  v3[3]((void **)&v3, this);
  return v4;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractData::VisitSpecs(pxrInternal__aapl__pxrReserved__::SdfAbstractData *this, pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a2)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;

  if (a2
    || (v5[0] = "sdf/abstractData.cpp",
        v5[1] = "VisitSpecs",
        v5[2] = 256,
        v5[3] = "void pxrInternal__aapl__pxrReserved__::SdfAbstractData::VisitSpecs(SdfAbstractDataSpecVisitor *) const",
        v6 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "visitor", 0),
        (result & 1) != 0))
  {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractData *, pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *))(*(_QWORD *)this + 312))(this, a2);
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *, pxrInternal__aapl__pxrReserved__::SdfAbstractData *))(*(_QWORD *)a2 + 24))(a2, this);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractData::IsDetached(pxrInternal__aapl__pxrReserved__::SdfAbstractData *this)
{
  return (*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractData *))(*(_QWORD *)this + 24))(this) ^ 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractData::CopyFrom(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD v4[2];

  v4[0] = &unk_24C5279C0;
  v4[1] = a1;
  v2 = sub_20C0A6678(a2);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v2 + 312))(v2, v4);
  return (*(uint64_t (**)(_QWORD *, uint64_t))(v4[0] + 24))(v4, v2);
}

uint64_t sub_20C0A6678(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, con"
            "st pxrInternal__aapl__pxrReserved__::SdfAbstractData>::operator->() const [PtrTemplate = pxrInternal__aapl__"
            "pxrReserved__::TfWeakPtr, Type = const pxrInternal__aapl__pxrReserved__::SdfAbstractData]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAB4355 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfAbstractData::Equals(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (**v8)(void **, _QWORD);
  char v9;
  uint64_t v10;
  void (**v11)(void **, uint64_t);
  char v12;
  uint64_t v13;
  void (**v14)(void **, _QWORD);
  char v15;
  uint64_t v16;

  v4 = *a2;
  v14 = (void (**)(void **, _QWORD))&unk_24C527A08;
  v15 = 1;
  v16 = v4;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 312))(a1, (void **)&v14);
  v14[3]((void **)&v14, a1);
  if (!v15)
    return 0;
  v11 = (void (**)(void **, uint64_t))&unk_24C527A08;
  v12 = 1;
  v13 = a1;
  v5 = sub_20C0A683C(a2);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 312))(v5, (void **)&v11);
  v11[3]((void **)&v11, v5);
  if (!v12)
    return 0;
  v6 = *a2;
  v8 = (void (**)(void **, _QWORD))&unk_24C527A50;
  v9 = 1;
  v10 = v6;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 312))(a1, (void **)&v8);
  v8[3]((void **)&v8, a1);
  return v9 != 0;
}

uint64_t sub_20C0A683C(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfAbstractData>::operator->"
            "() const [U = pxrInternal__aapl__pxrReserved__::SdfAbstractData]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CABC938 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfAbstractData::WriteToStream(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  void *p_p;
  uint64_t v9;
  _QWORD *v10;
  void **v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::type_info *v15;
  char *v16;
  void **v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void **v22;
  void **v23;
  BOOL v24;
  _QWORD *v25;
  _QWORD **v26;
  void *v27[2];
  unsigned __int8 v28;
  void **v29;
  _QWORD *v30[2];
  void *__p;
  uint64_t *v32;
  unsigned __int8 v33;
  void (**v34)(void **, _QWORD);
  _QWORD **v35;
  _QWORD *v36[2];
  char v37;
  _QWORD v38[4];

  v38[2] = *MEMORY[0x24BDAC8D0];
  v36[0] = 0;
  v36[1] = 0;
  v34 = (void (**)(void **, _QWORD))&unk_24C527A98;
  v35 = v36;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 312))(a1, (void **)&v34);
  v34[3]((void **)&v34, a1);
  v4 = v35;
  if (v35 != v36)
  {
    do
    {
      v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, (uint64_t)v4 + 28);
      v6 = pxrInternal__aapl__pxrReserved__::operator<<(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28));
      v7 = sub_20BDDC1C8(v6, (uint64_t)" ", 1);
      pxrInternal__aapl__pxrReserved__::TfEnum::GetDisplayName((uint64_t)&unk_24C524D70, v5, (uint64_t)&__p);
      if ((v33 & 0x80u) == 0)
        p_p = &__p;
      else
        p_p = __p;
      if ((v33 & 0x80u) == 0)
        v9 = v33;
      else
        v9 = (uint64_t)v32;
      v10 = sub_20BDDC1C8(v7, (uint64_t)p_p, v9);
      LOBYTE(v29) = 10;
      sub_20BDDC1C8(v10, (uint64_t)&v29, 1);
      if ((char)v33 < 0)
        operator delete(__p);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(&__p, a1, (uint64_t)v4 + 28);
      sub_20C0A7C98((uint64_t)&v29, (uint64_t *)__p, v32);
      v11 = v29;
      if (v29 != (void **)v30)
      {
        do
        {
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(v38, a1, (uint64_t)v4 + 28, v11 + 4);
          v12 = sub_20BDDC1C8(a2, (uint64_t)"    ", 4);
          v13 = pxrInternal__aapl__pxrReserved__::operator<<(v12, v11 + 4);
          v14 = sub_20BDDC1C8(v13, (uint64_t)" ", 1);
          pxrInternal__aapl__pxrReserved__::VtValue::GetTypeName((pxrInternal__aapl__pxrReserved__::VtValue *)v38, v15, v16, (uint64_t)v27);
          if ((v28 & 0x80u) == 0)
            v17 = v27;
          else
            v17 = (void **)v27[0];
          if ((v28 & 0x80u) == 0)
            v18 = v28;
          else
            v18 = (uint64_t)v27[1];
          v19 = sub_20BDDC1C8(v14, (uint64_t)v17, v18);
          v20 = sub_20BDDC1C8(v19, (uint64_t)" ", 1);
          v21 = (_QWORD *)pxrInternal__aapl__pxrReserved__::operator<<((uint64_t)v20, (uint64_t)v38);
          v37 = 10;
          sub_20BDDC1C8(v21, (uint64_t)&v37, 1);
          if ((char)v28 < 0)
            operator delete(v27[0]);
          sub_20BF4C2D8((uint64_t)v38);
          v22 = (void **)v11[1];
          if (v22)
          {
            do
            {
              v23 = v22;
              v22 = (void **)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v23 = (void **)v11[2];
              v24 = *v23 == v11;
              v11 = v23;
            }
            while (!v24);
          }
          v11 = v23;
        }
        while (v23 != (void **)v30);
      }
      sub_20BF2B200((uint64_t)&v29, v30[0]);
      v29 = &__p;
      sub_20BEEB2B8(&v29);
      v25 = (_QWORD *)v4[1];
      if (v25)
      {
        do
        {
          v26 = (_QWORD **)v25;
          v25 = (_QWORD *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          v26 = (_QWORD **)v4[2];
          v24 = *v26 == v4;
          v4 = v26;
        }
        while (!v24);
      }
      v4 = v26;
    }
    while (v26 != v36);
  }
  v34 = (void (**)(void **, _QWORD))&unk_24C527A98;
  sub_20BFD7C28((uint64_t)&v35, v36[0]);
}

void sub_20C0A6BD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,_QWORD *a28)
{
  sub_20BFD7C28(a9, a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A6C7C(uint64_t a1)
{
  *(_QWORD *)a1 = &unk_24C527A98;
  sub_20BFD7C28(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractData::HasSpecAndField(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  *a5 = result;
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2, a3, a4);
  return result;
}

{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  *a5 = result;
  if ((_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 112))(a1, a2, a3, a4);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractData::GetTypeid(uint64_t a1)
{
  uint64_t Typeid;
  _QWORD v3[3];

  v3[2] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)a1 + 136))(v3);
  Typeid = pxrInternal__aapl__pxrReserved__::VtValue::GetTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v3);
  sub_20BF4C2D8((uint64_t)v3);
  return Typeid;
}

void sub_20C0A6E20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractData::HasDictKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (***a5)(_QWORD, _BYTE *))
{
  _BYTE *v6;
  uint64_t v7;
  char v8;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  if (a5)
    v6 = v10;
  else
    v6 = 0;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 192))(a1, a2, a3, a4, v6);
  v8 = v7 ^ 1;
  if (!a5)
    v8 = 1;
  if ((v8 & 1) == 0)
    v7 = (**a5)(a5, v10);
  sub_20BF4C2D8((uint64_t)v10);
  return v7;
}

void sub_20C0A6EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractData::HasDictKey(pxrInternal__aapl__pxrReserved__::SdfAbstractData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v7;
  uint64_t *v8;
  std::string *EmptyString;
  _QWORD *ValueAtPath;
  uint64_t v11;
  int v13[2];
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  if ((*(unsigned int (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractData *, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, int *))(*(_QWORD *)this + 112))(this, a2, a3, v13)&& (v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)v13), (_DWORD)v7)&& ((v14 & 4) != 0? (v7 = (pxrInternal__aapl__pxrReserved__::TfToken *)(*(uint64_t (**)(int *))((v14 & 0xFFFFFFFFFFFFFFF8)+ 168))(v13), v8 = (uint64_t *)v7): (v8 = *(uint64_t **)v13), (*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) == 0? (EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v7)): (EmptyString = (std::string *)((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) + 16)), (ValueAtPath = (_QWORD *)pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(v8, EmptyString, ":")) != 0))
  {
    if (a5)
      sub_20BF4A9BC(a5, ValueAtPath);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  sub_20BF4C2D8((uint64_t)v13);
  return v11;
}

void sub_20C0A6FF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractData::GetDictValueByKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(_QWORD *)(a5 + 8) = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, a2, a3, a4, a5);
}

void sub_20C0A7038(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractData::SetDictValueByKey(pxrInternal__aapl__pxrReserved__::SdfAbstractData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  const void ****v10;
  std::string *EmptyString;
  _QWORD **v13;
  _QWORD v14[3];

  v14[2] = *MEMORY[0x24BDAC8D0];
  if (!*((_QWORD *)a5 + 1))
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractData *, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)this + 224))(this, a2, a3, a4);
  (*(void (**)(_QWORD *__return_ptr, pxrInternal__aapl__pxrReserved__::SdfAbstractData *, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)this + 136))(v14, this, a2, a3);
  v13 = 0;
  v10 = sub_20BF4AB1C((pxrInternal__aapl__pxrReserved__::VtValue *)v14, (const void ****)&v13);
  if ((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (std::string *)((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v10);
  pxrInternal__aapl__pxrReserved__::VtDictionary::SetValueAtPath((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v13, EmptyString, a5, ":");
  sub_20BF4AB1C((pxrInternal__aapl__pxrReserved__::VtValue *)v14, (const void ****)&v13);
  (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractData *, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, _QWORD *))(*(_QWORD *)this + 152))(this, a2, a3, v14);
  sub_20BF49F14(&v13, 0);
  return sub_20BF4C2D8((uint64_t)v14);
}

void sub_20C0A71A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractData::SetDictValueByKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (***a5)(_QWORD, _BYTE *))
{
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v11 = 0;
  (**a5)(a5, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *))(*(_QWORD *)a1 + 208))(a1, a2, a3, a4, v10);
  return sub_20BF4C2D8((uint64_t)v10);
}

void sub_20C0A7270(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractData::EraseDictValueByKey(pxrInternal__aapl__pxrReserved__::SdfAbstractData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  const void ****v8;
  std::string *EmptyString;
  uint64_t **v11;
  _QWORD v12[3];

  v12[2] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)this + 136))(v12);
  if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)v12))
  {
    v11 = 0;
    v8 = sub_20BF4AB1C((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const void ****)&v11);
    if ((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (std::string *)((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)v8);
    pxrInternal__aapl__pxrReserved__::VtDictionary::EraseValueAtPath(&v11, EmptyString, ":");
    if (pxrInternal__aapl__pxrReserved__::VtDictionary::empty((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v11))
    {
      (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractData *, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)this + 168))(this, a2, a3);
    }
    else
    {
      sub_20BF4AB1C((pxrInternal__aapl__pxrReserved__::VtValue *)v12, (const void ****)&v11);
      (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractData *, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, _QWORD *))(*(_QWORD *)this + 152))(this, a2, a3, v12);
    }
    sub_20BF49F14(&v11, 0);
  }
  return sub_20BF4C2D8((uint64_t)v12);
}

void sub_20C0A73A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAbstractData::ListDictKeys@<X0>(pxrInternal__aapl__pxrReserved__::SdfAbstractData *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::VtDictionary *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  int64x2_t v27;
  char *v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64x2_t v38;
  char *v39;
  uint64_t v40;
  pxrInternal__aapl__pxrReserved__::VtDictionary *v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  (*(void (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **__return_ptr))(*(_QWORD *)this + 200))(&v41);
  if (sub_20BF4A73C((pxrInternal__aapl__pxrReserved__::VtValue *)&v41))
  {
    if ((v42 & 4) != 0)
      v6 = (pxrInternal__aapl__pxrReserved__::VtDictionary *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtDictionary **))((v42 & 0xFFFFFFFFFFFFFFF8) + 168))(&v41);
    else
      v6 = v41;
    v7 = pxrInternal__aapl__pxrReserved__::VtDictionary::size(v6);
    sub_20BFC9A6C((char **)a2, v7);
    v33 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(v6);
    v34 = v8;
    v35 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(v6);
    v36 = v9;
    while (v34 != v36 || v34 && v33 != v35)
    {
      sub_20BF4B4BC(&v33, v9, v10);
      pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v32);
      v14 = *(_QWORD **)(a2 + 8);
      v13 = *(_QWORD *)(a2 + 16);
      if ((unint64_t)v14 >= v13)
      {
        v17 = ((uint64_t)v14 - *(_QWORD *)a2) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          sub_20BDDF694();
        v18 = v13 - *(_QWORD *)a2;
        v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1))
          v19 = v17 + 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        v40 = a2 + 16;
        if (v20)
          v21 = (char *)sub_20BDDF6A8(a2 + 16, v20);
        else
          v21 = 0;
        v22 = &v21[8 * v17];
        v23 = &v21[8 * v20];
        v39 = v23;
        *(_QWORD *)v22 = v32;
        v16 = v22 + 8;
        v32 = 0;
        v38.i64[1] = (uint64_t)(v22 + 8);
        v25 = *(char **)a2;
        v24 = *(char **)(a2 + 8);
        if (v24 == *(char **)a2)
        {
          v27 = vdupq_n_s64((unint64_t)v24);
        }
        else
        {
          do
          {
            v26 = *((_QWORD *)v24 - 1);
            v24 -= 8;
            *((_QWORD *)v22 - 1) = v26;
            v22 -= 8;
            *(_QWORD *)v24 = 0;
          }
          while (v24 != v25);
          v27 = *(int64x2_t *)a2;
          v16 = (_QWORD *)v38.i64[1];
          v23 = v39;
        }
        *(_QWORD *)a2 = v22;
        *(_QWORD *)(a2 + 8) = v16;
        v38 = v27;
        v28 = *(char **)(a2 + 16);
        *(_QWORD *)(a2 + 16) = v23;
        v39 = v28;
        v37 = v27.i64[0];
        sub_20BF1EE98((uint64_t)&v37);
        v15 = v32;
      }
      else
      {
        v15 = 0;
        *v14 = v32;
        v16 = v14 + 1;
        v32 = 0;
      }
      *(_QWORD *)(a2 + 8) = v16;
      if ((v15 & 7) != 0)
      {
        v29 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      sub_20BF4B6E0(&v33, v11, v12);
    }
  }
  return sub_20BF4C2D8((uint64_t)&v41);
}

void sub_20C0A760C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_20BF4C2D8(v3 - 72);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A7680(uint64_t a1)
{
  *(_BYTE *)(a1 + 8) = 0;
  return 0;
}

uint64_t sub_20C0A7694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 i;
  __int128 v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(&v17, a2, a3);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, a3, v7);
  for (i = v17; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFEF824(&i))
  {
    v10 = *(_QWORD *)(a1 + 8);
    v11 = sub_20BFEF7A8((uint64_t *)&i, v8, v9);
    v14 = sub_20BFEF7A8((uint64_t *)&i, v12, v13);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(v18, a2, a3, v14);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v10 + 152))(v10, a3, v11, v18);
    sub_20BF4C2D8((uint64_t)v18);
  }
  *(_QWORD *)&i = &v17;
  sub_20BEEB2B8((void ***)&i);
  return 1;
}

void sub_20C0A77D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0A7814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 72))(*(_QWORD *)(a1 + 16), a3);
  if ((_DWORD)result)
    return *(_BYTE *)(a1 + 8) != 0;
  *(_BYTE *)(a1 + 8) = 0;
  return result;
}

BOOL sub_20C0A7864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;

  result = sub_20C0A7898(a2, *(_QWORD *)(a1 + 16), a3);
  *(_BYTE *)(a1 + 8) = result;
  return result;
}

BOOL sub_20C0A7898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  char *v8;
  void **v9;
  _QWORD *v10;
  void **v11;
  void ***v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char v22;
  uint64_t v24[3];
  _QWORD v25[3];
  void ***v26;
  _QWORD *v27[2];
  void **v28[3];
  __int128 v29;
  std::type_info v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(&v29, a1, a3);
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(v28, a2, a3);
  sub_20C0A7C98((uint64_t)&v26, (uint64_t *)v29, *((uint64_t **)&v29 + 1));
  sub_20C0A7C98((uint64_t)v25, (uint64_t *)v28[0], (uint64_t *)v28[1]);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a3);
  if (v6 != (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 96))(a2, a3)
    || v27[1] != (_QWORD *)v25[2])
  {
LABEL_21:
    v16 = 0;
    goto LABEL_22;
  }
  v9 = (void **)v26;
  if (v26 != v27)
  {
    v10 = (_QWORD *)v25[0];
    while (((unint64_t)v9[4] & 0xFFFFFFFFFFFFFFF8) == (v10[4] & 0xFFFFFFFFFFFFFFF8))
    {
      v11 = (void **)v9[1];
      v12 = (void ***)v9;
      if (v11)
      {
        do
        {
          v9 = v11;
          v11 = (void **)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v9 = v12[2];
          v13 = *v9 == v12;
          v12 = (void ***)v9;
        }
        while (!v13);
      }
      v14 = (_QWORD *)v10[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v10[2];
          v13 = *v15 == (_QWORD)v10;
          v10 = v15;
        }
        while (!v13);
      }
      v10 = v15;
      if (v9 == (void **)v27)
        goto LABEL_17;
    }
    goto LABEL_21;
  }
LABEL_17:
  *(_OWORD *)v24 = v29;
  while (1)
  {
    v16 = v24[0] == v24[1];
    if (v24[0] == v24[1])
      break;
    v17 = sub_20BFEF7A8(v24, v7, v8);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(v31, a1, a3, v17);
    v20 = sub_20BFEF7A8(v24, v18, v19);
    (*(void (**)(std::type_info *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(&v30, a2, a3, v20);
    v22 = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)v31, &v30, v21);
    sub_20BF4C2D8((uint64_t)&v30);
    sub_20BF4C2D8((uint64_t)v31);
    if ((v22 & 1) == 0)
      break;
    sub_20BFEF824(v24);
  }
LABEL_22:
  sub_20BF2B200((uint64_t)v25, (_QWORD *)v25[1]);
  sub_20BF2B200((uint64_t)&v26, v27[0]);
  v26 = v28;
  sub_20BEEB2B8((void ***)&v26);
  v28[0] = (void **)&v29;
  sub_20BEEB2B8(v28);
  return v16;
}

void sub_20C0A7AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void ***a15, _QWORD *a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_20BF2B200((uint64_t)&a15, a16);
  a15 = &a18;
  sub_20BEEB2B8((void ***)&a15);
  a18 = (void **)&a21;
  sub_20BEEB2B8(&a18);
  _Unwind_Resume(a1);
}

void sub_20C0A7B84(_QWORD **a1)
{
  *a1 = &unk_24C527A98;
  sub_20BFD7C28((uint64_t)(a1 + 1), a1[2]);
  operator delete(a1);
}

uint64_t sub_20C0A7BBC(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  sub_20C0A7BE0((uint64_t **)(a1 + 8), a3, a3);
  return 1;
}

uint64_t *sub_20C0A7BE0(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  _QWORD v9[2];
  char v10;
  uint64_t v11;

  v5 = (void **)sub_20BFD74FC((uint64_t)a1, &v11, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v9[1] = a1 + 1;
    sub_20BFD6E54((_DWORD *)v6 + 7, a3);
    sub_20BFD6EA4((_DWORD *)v6 + 8, a3 + 1);
    v10 = 1;
    sub_20BDDE1B4(a1, v11, v7, v6);
    v9[0] = 0;
    sub_20BFD7610((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_20C0A7C98(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C0A7D18((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20C0A7D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF2B200(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0A7D18(uint64_t **a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (uint64_t **)sub_20C0A7D98(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    sub_20BFD25E8((uint64_t)a1, a4, (uint64_t)&v8);
    sub_20BDDE1B4(a1, v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *sub_20C0A7D98(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_20BF1E6D8((uint64_t)(a1 + 2), a5, a2 + 4))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_20BF1E6D8((uint64_t)(a1 + 2), v12 + 4, a5))
      goto LABEL_16;
    return sub_20BF1E63C((uint64_t)a1, a3, a5);
  }
  if (sub_20BF1E6D8((uint64_t)(a1 + 2), a2 + 4, a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_20BF1E6D8((uint64_t)(a1 + 2), a5, v15 + 4))
        return sub_20BF1E63C((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot(uint64_t *this)
{
  unsigned __int8 v1;
  int v2;
  uint64_t *v3;

  v1 = atomic_load((unsigned __int8 *)&qword_254985A10);
  if ((v1 & 1) == 0)
  {
    v3 = this;
    v2 = __cxa_guard_acquire(&qword_254985A10);
    this = v3;
    if (v2)
    {
      qword_2549859F8 = 0;
      unk_254985A00 = 0;
      qword_254985A08 = 0;
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_2549859F8, &dword_20BDBC000);
      __cxa_guard_release(&qword_254985A10);
      this = v3;
    }
  }
  if (!*((_BYTE *)this + 24))
    return &qword_2549859F8;
  return this;
}

uint64_t *sub_20C0A7FD4()
{
  sub_20C0A84F8();
  return sub_20C0A85F8();
}

void sub_20C0A7FE8()
{
  pxrInternal__aapl__pxrReserved__::VtValue::_RegisterCast((uint64_t)&stru_24C516910, (uint64_t)&stru_24C524DB0, (uint64_t)sub_20C0A86F8);
}

double pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(pxrInternal__aapl__pxrReserved__::SdfAssetPath *this)
{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

{
  double result;

  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  return result;
}

char *pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(char *__dst, uint64_t a2, char *a3)
{
  __int128 v5;
  void **v6;
  unsigned __int8 *v7;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v5 = *(_OWORD *)a2;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)__dst = v5;
  }
  *((_QWORD *)__dst + 3) = 0;
  *((_QWORD *)__dst + 4) = 0;
  v6 = (void **)(__dst + 24);
  *((_QWORD *)__dst + 5) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = *(unsigned __int8 **)a2;
  if ((sub_20C0A80F0(v7, a2, a3) & 1) == 0)
  {
    if (__dst[23] < 0)
      operator delete(*(void **)__dst);
    *(_QWORD *)__dst = 0;
    *((_QWORD *)__dst + 1) = 0;
    *((_QWORD *)__dst + 2) = 0;
    if (__dst[47] < 0)
      operator delete(*v6);
    *v6 = 0;
    *((_QWORD *)__dst + 4) = 0;
    *((_QWORD *)__dst + 5) = 0;
  }
  return __dst;
}

void sub_20C0A80CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  sub_20C96B518(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A80F0(unsigned __int8 *a1, uint64_t a2, char *a3)
{
  int v3;
  char *v4;
  int v5;
  uint64_t v6;
  const char *v7;
  char *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  unsigned __int8 *v16;

  v15 = 0;
  v16 = a1;
  v14[0] = 0;
  v14[1] = 0;
  v3 = sub_20C0A8790(&v16, (uint64_t)v14, a3);
  v5 = 1;
  if (v3 < 1)
  {
LABEL_6:
    if (v3 != -1)
    {
      v6 = 1;
      goto LABEL_13;
    }
    v9 = "sdf/assetPath.cpp";
    v10 = "_ValidateAssetPathString";
    v11 = 132;
    v12 = "BOOL pxrInternal__aapl__pxrReserved__::_ValidateAssetPathString(const char *)";
    v13 = 0;
    v7 = (const char *)v14;
    if (v15 < 0)
      v7 = (const char *)v14[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid asset path string -- character %d: %s\n", v5, v7);
  }
  else
  {
    while (v3 >= 0x20 && v3 != 127 && (v3 & 0xFFFFFFE0) != 0x80)
    {
      v3 = sub_20C0A8790(&v16, (uint64_t)v14, v4);
      ++v5;
      if (v3 <= 0)
        goto LABEL_6;
    }
    v9 = "sdf/assetPath.cpp";
    v10 = "_ValidateAssetPathString";
    v11 = 125;
    v12 = "BOOL pxrInternal__aapl__pxrReserved__::_ValidateAssetPathString(const char *)";
    v13 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v9, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid asset path string -- character %d is control character 0x%x", v5, v3);
  }
  v6 = 0;
LABEL_13:
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  return v6;
}

void sub_20C0A8224(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 25) < 0)
    operator delete(*(void **)(v1 - 48));
  _Unwind_Resume(exception_object);
}

char *pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(char *__dst, uint64_t a2, __int128 *a3)
{
  __int128 v6;
  void **v7;
  __int128 v8;
  unsigned __int8 *v9;
  uint64_t v10;
  char *v11;
  unsigned __int8 *v12;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v6 = *(_OWORD *)a2;
    *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 16);
    *(_OWORD *)__dst = v6;
  }
  v7 = (void **)(__dst + 24);
  if (*((char *)a3 + 23) < 0)
  {
    sub_20BDDBFAC(__dst + 24, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    *((_QWORD *)__dst + 5) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
  }
  if (*(char *)(a2 + 23) >= 0)
    v9 = (unsigned __int8 *)a2;
  else
    v9 = *(unsigned __int8 **)a2;
  if (!sub_20C0A80F0(v9, a2, (char *)a3)
    || (*((char *)a3 + 23) >= 0 ? (v12 = (unsigned __int8 *)a3) : (v12 = *(unsigned __int8 **)a3),
        (sub_20C0A80F0(v12, v10, v11) & 1) == 0))
  {
    if (__dst[23] < 0)
      operator delete(*(void **)__dst);
    *(_QWORD *)__dst = 0;
    *((_QWORD *)__dst + 1) = 0;
    *((_QWORD *)__dst + 2) = 0;
    if (__dst[47] < 0)
      operator delete(*v7);
    *v7 = 0;
    *((_QWORD *)__dst + 4) = 0;
    *((_QWORD *)__dst + 5) = 0;
  }
  return __dst;
}

void sub_20C0A8334(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAssetPath::operator<(const void **a1, const void **a2)
{
  int v4;
  int v5;
  size_t v6;
  const void *v7;
  size_t v8;
  const void *v9;
  size_t v10;
  int v11;
  BOOL v12;
  int v14;
  BOOL v15;
  const void **v16;
  const void **v17;
  const void **v18;
  int v19;
  const void **v20;
  const void **v21;
  const void **v22;
  int v23;
  size_t v24;
  const void **v25;
  size_t v26;
  const void **v27;
  size_t v28;
  int v29;

  v4 = *((char *)a2 + 23);
  v5 = *((char *)a1 + 23);
  if (v5 >= 0)
    v6 = *((unsigned __int8 *)a1 + 23);
  else
    v6 = (size_t)a1[1];
  if (v5 >= 0)
    v7 = a1;
  else
    v7 = *a1;
  if (v4 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = (size_t)a2[1];
  if (v4 >= 0)
    v9 = a2;
  else
    v9 = *a2;
  if (v8 >= v6)
    v10 = v6;
  else
    v10 = v8;
  v11 = memcmp(v7, v9, v10);
  v12 = v6 < v8;
  if (v11)
    v12 = v11 < 0;
  if (v12)
    return 1;
  v14 = memcmp(v9, v7, v10);
  v15 = v8 < v6;
  if (v14)
    v15 = v14 < 0;
  if (v15)
    return 0;
  v18 = (const void **)a2[3];
  v17 = a2 + 3;
  v16 = v18;
  v19 = *((char *)v17 + 23);
  v22 = (const void **)a1[3];
  v21 = a1 + 3;
  v20 = v22;
  v23 = *((char *)v21 + 23);
  if (v23 >= 0)
    v24 = *((unsigned __int8 *)v21 + 23);
  else
    v24 = (size_t)v21[1];
  if (v23 >= 0)
    v25 = v21;
  else
    v25 = v20;
  if (v19 >= 0)
    v26 = *((unsigned __int8 *)v17 + 23);
  else
    v26 = (size_t)v17[1];
  if (v19 >= 0)
    v27 = v17;
  else
    v27 = v16;
  if (v26 >= v24)
    v28 = v24;
  else
    v28 = v26;
  v29 = memcmp(v25, v27, v28);
  if (v29)
    return v29 < 0;
  else
    return v24 < v26;
}

uint64_t *sub_20C0A84F8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524DB0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524DB0, (char *)0x30, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C0A85B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0A85F8()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524DC0, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C524DC0, (char *)0x28, 0, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C0A86B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C0A86F8(uint64_t *a1@<X0>, char *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *v6[2];
  char v7;
  void *__p;
  char v9;

  v4 = a1[1];
  if ((v4 & 4) != 0)
    v5 = (*(uint64_t (**)(void))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))();
  else
    v5 = *a1;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath((char *)v6, v5, a2);
  *(_QWORD *)(a3 + 8) = &off_24C5255B8;
  sub_20C00A0DC((char **)a3, (__int128 *)v6);
  if (v9 < 0)
    operator delete(__p);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_20C0A877C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BE930F8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A8790(unsigned __int8 **a1, uint64_t a2, char *a3)
{
  char *v3;
  uint64_t v4;
  unsigned int v6;
  int v7;
  uint64_t v8;
  char *v9;
  char v10;
  char v11;
  __int128 v13;
  uint64_t v14;

  v3 = (char *)*a1;
  if (((char)**a1 & 0x80000000) == 0)
  {
    *a1 = (unsigned __int8 *)(v3 + 1);
    return *v3;
  }
  v4 = **a1;
  if ((v4 & 0xE0) == 0xC0)
  {
    v6 = 2;
    v7 = -225;
    goto LABEL_9;
  }
  if ((v4 & 0xF0) == 0xE0)
  {
    v6 = 3;
    v7 = -241;
    goto LABEL_9;
  }
  if ((v4 & 0xF8) == 0xF0)
  {
    v6 = 4;
    v7 = -249;
LABEL_9:
    v8 = 0;
    LODWORD(v4) = v7 & v4;
    v9 = v3 + 1;
    while (1)
    {
      v11 = *v9++;
      v10 = v11;
      if ((v11 & 0xC0) != 0x80)
        break;
      v4 = v10 & 0x3Fu | ((_DWORD)v4 << 6);
      v8 += 0x100000000;
      if (((unint64_t)v6 << 32) - 0x100000000 == v8)
      {
        *a1 = (unsigned __int8 *)&v3[v6];
        return v4;
      }
    }
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"%d-byte UTF-8 code point lacks %s continuation byte", (const char *)a2, a3, v6, *(char **)((char *)off_24C527AD0 + (v8 >> 29)));
    goto LABEL_15;
  }
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"invalid UTF-8 code point byte 0x%hhx", (const char *)a2, a3, v4);
LABEL_15:
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v13;
  *(_QWORD *)(a2 + 16) = v14;
  return 0xFFFFFFFFLL;
}

void sub_20C0A88C4()
{
}

void pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::SdfValueTypeName *a3@<X2>, int a4@<W3>, char a5@<W4>, unsigned int **a6@<X8>)
{
  unsigned int *v10;
  unsigned int v11;
  const char *v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t Schema;
  pxrInternal__aapl__pxrReserved__::TfToken *AsToken;
  unsigned int *v16;
  unsigned int v17;
  const char *Text;
  unint64_t v19;
  const char *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  void *v22;
  int IsDormant;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v25;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v26;
  unsigned int *v27;
  unsigned int v28;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int *v37;
  unsigned int v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::SdfPath *Path;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  unint64_t v49;
  uint64_t Type;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  char v59;
  char v60;
  int v61;

  v61 = a4;
  v60 = a5;
  *a6 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v55 = (unint64_t)"sdf/attributeSpec.cpp";
    v56 = "New";
    v57 = 61;
    v58 = "static SdfAttributeSpecHandle pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(const SdfPrimSpecHandle "
          "&, const std::string &, const SdfValueTypeName &, SdfVariability, BOOL)";
    v59 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v55, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create an SdfAttributeSpec with a null owner");
    return;
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v55);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v51);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v51, &v53);
  if ((v51 & 7) != 0)
  {
    v10 = (unsigned int *)(v51 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
  sub_20BFD265C(&v55);
  if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v53))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty(a3))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v51);
      if (!*(_BYTE *)(sub_20BFCF650(&v51) + 515))
        goto LABEL_20;
      v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v51);
      Schema = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v13);
      AsToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a3, (unsigned int **)&v55);
      if ((v55 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(AsToken);
      Type = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(Schema);
      if ((v55 & 7) != 0)
      {
        v16 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
        do
          v17 = __ldxr(v16);
        while (__stlxr(v17 - 2, v16));
      }
      if (pxrInternal__aapl__pxrReserved__::SdfValueTypeName::_IsEmpty((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type))
      {
        v55 = (unint64_t)"sdf/attributeSpec.cpp";
        v56 = "New";
        v57 = 102;
        v58 = "static SdfAttributeSpecHandle pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(const SdfPrimSpecHan"
              "dle &, const std::string &, const SdfValueTypeName &, SdfVariability, BOOL)";
        v59 = 0;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v53);
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a3, (unsigned int **)&v49);
        v19 = v49 & 0xFFFFFFFFFFFFFFF8;
        if ((v49 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          v20 = (const char *)(v19 + 16);
          if (*(char *)(v19 + 39) < 0)
            v20 = *(const char **)v20;
        }
        else
        {
          v20 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v55, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create attribute spec <%s> with type '%s' not supported by schema", Text, v20);
        if ((v49 & 7) != 0)
        {
          v34 = (unsigned int *)(v49 & 0xFFFFFFFFFFFFFFF8);
          do
            v35 = __ldxr(v34);
          while (__stlxr(v35 - 2, v34));
        }
        v36 = v52;
        if (v52)
        {
          v37 = (unsigned int *)(v52 + 8);
          do
          {
            v38 = __ldxr(v37);
            v39 = v38 - 1;
          }
          while (__stlxr(v39, v37));
          if (!v39)
            (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
      }
      else
      {
LABEL_20:
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&Type);
        if ((pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CreateSpec((uint64_t)&v51, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, 1, v60 == 0) & 1) != 0)
        {
          v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v51);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetAttributeAtPath((uint64_t *)&v55, v21, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53);
          pxrInternal__aapl__pxrReserved__::SdfSpec::operator=(a6, (unsigned int **)&v55);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v22, (pxrInternal__aapl__pxrReserved__::SdfSpec *)&v55);
          IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a6);
          v24 = IsDormant ? 0 : (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)a6;
          if (!IsDormant
            || (v55 = (unint64_t)"sdf/attributeSpec.cpp",
                v56 = "New",
                v57 = 122,
                v58 = "static SdfAttributeSpecHandle pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(const SdfPri"
                      "mSpecHandle &, const std::string &, const SdfValueTypeName &, SdfVariability, BOOL)",
                v59 = 0,
                (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v55, "resultPtr", 0) & 1) != 0))
          {
            v25 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v25)
              v25 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            sub_20C0A9030(v24, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v25 + 64), &v60);
            v26 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v26)
              v26 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken((uint64_t)a3, (unsigned int **)&v55);
            sub_20C0A90C0(v24, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v26 + 448), (uint64_t *)&v55);
            if ((v55 & 7) != 0)
            {
              v27 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
              do
                v28 = __ldxr(v27);
              while (__stlxr(v28 - 2, v27));
            }
            v29 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v29)
              v29 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            sub_20C0A9170(v24, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v29 + 464), &v61);
          }
        }
        sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&Type);
        v30 = v52;
        if (v52)
        {
          v31 = (unsigned int *)(v52 + 8);
          do
          {
            v32 = __ldxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
      }
      goto LABEL_51;
    }
    v55 = (unint64_t)"sdf/attributeSpec.cpp";
    v56 = "New";
    v57 = 90;
    v58 = "static SdfAttributeSpecHandle pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(const SdfPrimSpecHandle "
          "&, const std::string &, const SdfValueTypeName &, SdfVariability, BOOL)";
    v59 = 0;
    v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v53);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v55, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create attribute spec <%s> with invalid type", v12);
  }
  else
  {
    if ((MEMORY[0x212B90708](a2) & 1) != 0)
    {
      Path = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v55);
      v41 = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(Path);
      v42 = v55;
      v43 = *v41;
      sub_20BFD1A18(&v55);
      if (v42 == v43)
      {
        v55 = (unint64_t)"sdf/attributeSpec.cpp";
        v56 = "New";
        v57 = 78;
        v58 = "static SdfAttributeSpecHandle pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(const SdfPrimSpecHan"
              "dle &, const std::string &, const SdfValueTypeName &, SdfVariability, BOOL)";
        v59 = 0;
        if (*(char *)(a2 + 23) >= 0)
          v44 = (const char *)a2;
        else
          v44 = *(const char **)a2;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v55, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create attribute spec '%s' on the pseudo-root '/'", v44);
        goto LABEL_9;
      }
      v55 = (unint64_t)"sdf/attributeSpec.cpp";
      v56 = "New";
      v57 = 83;
      v58 = "static SdfAttributeSpecHandle pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(const SdfPrimSpecHandl"
            "e &, const std::string &, const SdfValueTypeName &, SdfVariability, BOOL)";
      v59 = 0;
      if (*(char *)(a2 + 23) >= 0)
        v47 = (const char *)a2;
      else
        v47 = *(const char **)a2;
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v51);
      v48 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v51);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v55, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create attribute spec '%s' on <%s>", v47, v48);
    }
    else
    {
      v55 = (unint64_t)"sdf/attributeSpec.cpp";
      v56 = "New";
      v57 = 73;
      v58 = "static SdfAttributeSpecHandle pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::New(const SdfPrimSpecHandl"
            "e &, const std::string &, const SdfValueTypeName &, SdfVariability, BOOL)";
      v59 = 0;
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v51);
      v45 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v51);
      if (*(char *)(a2 + 23) >= 0)
        v46 = (const char *)a2;
      else
        v46 = *(const char **)a2;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v55, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create attribute spec on <%s> with invalid name '%s'", v45, v46);
    }
    sub_20BFD1A18(&v51);
  }
LABEL_9:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
LABEL_51:
  sub_20BFD265C(&v53);
}

void sub_20C0A8E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec *v5;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  v7 = v14;
  if (v14)
  {
    v8 = (unsigned int *)(v14 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  sub_20BFD1A18(va1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v5);
  _Unwind_Resume(a1);
}

BOOL sub_20C0A9030(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _BYTE *a3)
{
  _BOOL8 v3;
  _BYTE v5[8];
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C51FCF3;
  v5[0] = *a3;
  v3 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  sub_20BF4C2D8((uint64_t)v5);
  return v3;
}

void sub_20C0A90AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C0A90C0(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t *a3)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _BOOL8 v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v3 = *a3;
  v8[0] = v3;
  v8[1] = (char *)&off_24C5207B8 + 1;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v8[0] = v4;
  }
  v6 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_20BF4C2D8((uint64_t)v8);
  return v6;
}

void sub_20C0A915C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C0A9170(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, int *a3)
{
  _BOOL8 v3;
  int v5;
  char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)&off_24C5269E8 + 3;
  v5 = *a3;
  v3 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  sub_20BF4C2D8((uint64_t)&v5);
  return v3;
}

void sub_20C0A91EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(unsigned int **this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int *v3;
  unsigned int v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  unsigned int *v6;
  unsigned int *v7;

  sub_20C0A92A4(this, &v6);
  v3 = v6;
  v7 = v6;
  if (v6)
  {
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 + 1, v3));
  }
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfGetPathEditorProxy(&v7, (uint64_t *)v5 + 7, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_20C0A9288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

void sub_20C0A92A4(unsigned int **a1@<X0>, unsigned int **a2@<X8>)
{
  unsigned int *v2;
  unsigned int v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;

  if (!a1)
  {
    v6 = 0;
    goto LABEL_8;
  }
  v2 = *a1;
  v6 = v2;
  if (!v2)
  {
LABEL_8:
    *a2 = 0;
    goto LABEL_9;
  }
  do
    v3 = __ldaxr(v2);
  while (__stlxr(v3 + 1, v2));
  v4 = v6;
  *a2 = v6;
  if (v4)
  {
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 + 1, v4));
  }
LABEL_9:
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::HasConnectionPaths(unsigned int **this)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(this, &v6);
  if (sub_20BFE71C4((uint64_t)&v6))
    v1 = sub_20BFE7798(v6);
  else
    v1 = 1;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20C0A9390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::ClearConnectionPaths(unsigned int **this)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetConnectionPathList(this, &v4);
  if (sub_20C0AA0E4((uint64_t)&v4))
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20C0A9420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetAllowedTokens@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 8), (pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  if (v15 && (sub_20BFED450((pxrInternal__aapl__pxrReserved__::VtValue *)v14) & 1) != 0)
  {
    v5 = sub_20C0A9570((pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  }
  else
  {
    Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v7)
      v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v7 + 8));
    v5 = sub_20C0A9570(Fallback);
  }
  v9 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v5;
  *(_OWORD *)(a2 + 16) = v9;
  v10 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(a2 + 32) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 - 16);
    if (*(_QWORD *)(a2 + 24))
      v11 = *(unint64_t **)(a2 + 24);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return sub_20BF4C2D8((uint64_t)v14);
}

void sub_20C0A9550(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A9570(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFED450(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C0AA158, (uint64_t)&stru_24C51DDE0);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::SetAllowedTokens(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0AA1D8(a1, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 8), a2);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::HasAllowedTokens(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 8));
}

BOOL pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::ClearAllowedTokens(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 8));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetColorSpace@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  unsigned int **v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  unsigned int **v12;
  unsigned int *v13;
  char v15[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 40), (pxrInternal__aapl__pxrReserved__::VtValue *)v15);
  if (v16 && (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)v15) & 1) != 0)
  {
    v5 = (unsigned int **)sub_20BFB46E8((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
    v6 = *v5;
    *a2 = *v5;
    if ((v6 & 7) == 0)
      return sub_20BF4C2D8((uint64_t)v15);
    v7 = (unsigned int *)((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
    goto LABEL_14;
  }
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfSpec::GetSchema(this);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v10)
    v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(Schema, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 40));
  v12 = (unsigned int **)sub_20BFB46E8(Fallback);
  v13 = *v12;
  *a2 = *v12;
  if ((v13 & 7) != 0)
  {
    v7 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 2, v7));
LABEL_14:
    if ((v8 & 1) == 0)
      *a2 = v7;
  }
  return sub_20BF4C2D8((uint64_t)v15);
}

void sub_20C0A97E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::SetColorSpace(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0A90C0(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 40), (uint64_t *)a2);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::HasColorSpace(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 40));
}

BOOL pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::ClearColorSpace(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 40));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetDisplayUnit(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (**v6[3])(_QWORD, uint64_t);
  __int16 v7;

  v4 = MEMORY[0x24BEDB798];
  LODWORD(v5) = 0;
  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v6[2] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C51B650;
  v7 = 0;
  v6[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C527B40;
  v6[1] = (uint64_t (**)(_QWORD, uint64_t))&v4;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::_HasField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 128), v6))return v4;
  v6[0] = (uint64_t (**)(_QWORD, uint64_t))pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(this);
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetDefaultUnit((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)v6);
}

unsigned int **pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::GetRoleName@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this@<X0>, unsigned int **a2@<X8>)
{
  unsigned int **result;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t TypeName;

  TypeName = pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetTypeName(this);
  result = (unsigned int **)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetRole((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&TypeName);
  v4 = *result;
  *a2 = *result;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)((unint64_t)v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a2 = v5;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::SetDisplayUnit(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::TfEnum *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0AA560(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 128), a2);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity *pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::HasDisplayUnit(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::HasField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 128));
}

BOOL pxrInternal__aapl__pxrReserved__::SdfAttributeSpec::ClearDisplayUnit(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
    v2 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::ClearField(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v2 + 128));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfJustCreatePrimAttributeInLayer(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPath *this, uint64_t a3, int a4, int a5)
{
  pxrInternal__aapl__pxrReserved__ *v9;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  char PrimInLayer;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v13;
  unsigned int *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  uint64_t v17;
  const char *v18;
  const char *Text;
  uint64_t Identifier;
  const char *v21;
  _BYTE v23[8];
  unint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;
  char v29;
  int v30;

  v30 = a4;
  v29 = a5;
  if ((pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPropertyPath(this) & 1) != 0)
  {
    if (a1[1])
    {
      if (*(_BYTE *)(sub_20BEB47BC(a1 + 1) + 14))
        v9 = (pxrInternal__aapl__pxrReserved__ *)*a1;
      else
        v9 = 0;
    }
    else
    {
      v9 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v23);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(this, &v24);
    PrimInLayer = pxrInternal__aapl__pxrReserved__::Sdf_UncheckedCreatePrimInLayer(v9, (pxrInternal__aapl__pxrReserved__::SdfLayer *)&v24, v10);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v24 + 1);
    sub_20BFD265C(&v24);
    if ((PrimInLayer & 1) != 0)
    {
      if ((pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CreateSpec((uint64_t)a1, this, 1, a5 ^ 1u) & 1) != 0)
      {
        v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v12)
          v12 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        sub_20C0A9D7C(v9, this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v12 + 64), &v29);
        v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v13)
          v13 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetAsToken(a3, (unsigned int **)&v24);
        sub_20C0A9E04(v9, this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v13 + 448), (uint64_t *)&v24);
        if ((v24 & 7) != 0)
        {
          v14 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v15 = __ldxr(v14);
          while (__stlxr(v15 - 2, v14));
        }
        v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v16)
          v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        sub_20C0A9EAC(v9, this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v16 + 464), &v30);
        v17 = 1;
        goto LABEL_24;
      }
      v24 = (unint64_t)"sdf/attributeSpec.cpp";
      v25 = "SdfJustCreatePrimAttributeInLayer";
      v26 = 229;
      v27 = "BOOL pxrInternal__aapl__pxrReserved__::SdfJustCreatePrimAttributeInLayer(const SdfLayerHandle &, const SdfPa"
            "th &, const SdfValueTypeName &, SdfVariability, BOOL)";
      v28 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
      Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v9);
      if (*(char *)(Identifier + 23) >= 0)
        v21 = (const char *)Identifier;
      else
        v21 = *(const char **)Identifier;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed to create attribute at path '%s' in layer @%s@", Text, v21);
    }
    v17 = 0;
LABEL_24:
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v23);
    return v17;
  }
  v24 = (unint64_t)"sdf/attributeSpec.cpp";
  v25 = "SdfJustCreatePrimAttributeInLayer";
  v26 = 212;
  v27 = "BOOL pxrInternal__aapl__pxrReserved__::SdfJustCreatePrimAttributeInLayer(const SdfLayerHandle &, const SdfPath &"
        ", const SdfValueTypeName &, SdfVariability, BOOL)";
  v28 = 0;
  v18 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(this);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create prim attribute at path '%s' because it is not a prim property path", v18);
  return 0;
}

void sub_20C0A9D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  unsigned int *v14;
  unsigned int v15;

  if ((a13 & 7) != 0)
  {
    v14 = (unsigned int *)(a13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A9D7C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, _BYTE *a4)
{
  _BYTE v5[8];
  void *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = &unk_24C51FCF3;
  v5[0] = *a4;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(a1, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v5);
  return sub_20BF4C2D8((uint64_t)v5);
}

void sub_20C0A9DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A9E04(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v4 = *a4;
  v8[0] = v4;
  v8[1] = (char *)&off_24C5207B8 + 1;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      v8[0] = v5;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(a1, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_20BF4C2D8((uint64_t)v8);
}

void sub_20C0A9E98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0A9EAC(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int *a4)
{
  int v5;
  char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  v6 = (char *)&off_24C5269E8 + 3;
  v5 = *a4;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(a1, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v5);
  return sub_20BF4C2D8((uint64_t)&v5);
}

void sub_20C0A9F20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0A9F34()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5[3];
  uint64_t v6;
  int v7;

  sub_20BEB59B0((uint64_t)&v6, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  sub_20C0AA054((unint64_t **)v5);
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527B18, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527B18, (char *)8, 0, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_AddCppCastFunc((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527B00, (void *(*)(void *, BOOL))nullsub_228);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5[0])
  {
    v5[1] = v5[0];
    operator delete(v5[0]);
  }
  while (v7--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v6);
  return v0;
}

void sub_20C0AA008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

void sub_20C0AA054(unint64_t **a1@<X8>)
{
  unint64_t v2;
  unint64_t *v3;
  void *__p[2];
  char v5;

  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C527B00, (uint64_t)__p);
  v2 = *pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v3 = (unint64_t *)operator new(8uLL);
  *a1 = v3;
  *v3++ = v2;
  a1[1] = v3;
  a1[2] = v3;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20C0AA0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0AA0E4(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 410;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy"
            ">::_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPathKeyPolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

double sub_20C0AA158@<D0>(_QWORD *a1@<X8>)
{
  _OWORD *v2;
  double result;

  v2 = operator new(0x28uLL);
  result = 0.0;
  *v2 = 0u;
  v2[1] = 0u;
  *((_QWORD *)v2 + 4) = 0;
  *a1 = v2;
  a1[1] = sub_20C0AA1A0;
  a1[2] = &stru_24C51DDE0;
  return result;
}

void sub_20C0AA1A0(_QWORD *a1)
{
  if (a1)
  {
    sub_20C00918C(a1);
    operator delete(a1);
  }
}

BOOL sub_20C0AA1D8(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  _BOOL8 v5;
  _QWORD v7[3];

  v7[2] = *MEMORY[0x24BDAC8D0];
  v7[1] = off_24C525500;
  sub_20BF56B40(v7, a3);
  v5 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v7);
  sub_20BF4C2D8((uint64_t)v7);
  return v5;
}

void sub_20C0AA264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0AA280(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  if (sub_20C0AA370((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_QWORD *)v5;
    *(_DWORD *)(v6 + 8) = *(_DWORD *)(v5 + 8);
    *(_QWORD *)v6 = v7;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C0AA308(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  if (sub_20C0AA370(a2))
  {
    v4 = sub_20C0AA460((uint64_t)a2);
    v5 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)v5 = v4;
    *(_DWORD *)(v5 + 8) = v6;
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C0AA370(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAC19E8 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, (const std::type_info *)&unk_24C51B650);
}

uint64_t sub_20C0AA3E8(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CB0C148 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C527B78);
}

uint64_t sub_20C0AA460(uint64_t a1)
{
  unsigned int *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v2 = sub_20C0AA4D0((unsigned int **)a1);
  v3 = *(_QWORD *)v2;
  *(_QWORD *)v2 = MEMORY[0x24BEDB798];
  v2[2] = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    v5 = (*(_QWORD *)(a1 + 8) & 3) == 3;
  else
    v5 = 1;
  if (!v5)
    (*(void (**)(uint64_t))((v4 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  *(_QWORD *)(a1 + 8) = 0;
  return v3;
}

unsigned int *sub_20C0AA4D0(unsigned int **a1)
{
  unsigned int *v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, unsigned int **))(((unint64_t)v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20BF51BB0(a1);
}

BOOL sub_20C0AA560(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, _OWORD *a3)
{
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  _BOOL8 v9;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x24BDAC8D0];
  v11[1] = &off_24C527B88;
  v6 = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)v6 = *a3;
  v7 = v6 + 4;
  atomic_store(0, v6 + 4);
  v11[0] = v6;
  do
    v8 = __ldxr(v7);
  while (__stxr(v8 + 1, v7));
  v9 = pxrInternal__aapl__pxrReserved__::SdfSpec::SetField(a1, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  sub_20BF4C2D8((uint64_t)v11);
  return v9;
}

void sub_20C0AA618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0AA62C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_20C0AA650(void **a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  v1 = (unsigned int *)*a1;
  if (v1)
  {
    v2 = v1 + 4;
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
    {
      __dmb(9u);
      operator delete(v1);
    }
  }
}

_QWORD *sub_20C0AA67C(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  *result = 0;
  return result;
}

uint64_t sub_20C0AA68C()
{
  return 1;
}

unint64_t sub_20C0AA694(int **a1)
{
  int *v1;
  uint64_t v3;
  char v4;

  v1 = *a1;
  v3 = 0;
  v4 = 0;
  sub_20BEC2434((pxrInternal__aapl__pxrReserved__::Tf_HashState *)&v3, v1);
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

BOOL sub_20C0AA6DC(_DWORD **a1, _DWORD **a2)
{
  return sub_20BEC24AC(*a1, *a2);
}

BOOL sub_20C0AA6E8(_DWORD **a1, _DWORD *a2)
{
  return sub_20BEC24AC(*a1, a2);
}

uint64_t sub_20C0AA6F4()
{
  return 0;
}

_QWORD *sub_20C0AA700(uint64_t **a1, _QWORD *a2)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1);
}

void *sub_20C0AA710()
{
  return &unk_24C51B650;
}

uint64_t sub_20C0AA71C()
{
  return 0;
}

uint64_t sub_20C0AA724()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C0AA730()
{
  return 0;
}

uint64_t sub_20C0AA738()
{
  return 0;
}

BOOL sub_20C0AA740(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC19E8 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C0AA778(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C51B650, a2, a3);
}

void *sub_20C0AA798()
{
  return &unk_24C51B650;
}

uint64_t sub_20C0AA7A4(uint64_t a1)
{
  return *(_QWORD *)a1;
}

unsigned int *sub_20C0AA7AC@<X0>(_OWORD **a1@<X0>, unsigned int **a2@<X8>)
{
  _OWORD *v3;
  unsigned int *result;
  unsigned int *v5;
  unsigned int v6;

  v3 = *a1;
  a2[1] = (unsigned int *)&off_24C527B88;
  result = (unsigned int *)operator new(0x18uLL);
  *(_OWORD *)result = *v3;
  v5 = result + 4;
  atomic_store(0, result + 4);
  *a2 = result;
  do
    v6 = __ldxr(v5);
  while (__stxr(v6 + 1, v5));
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock(pxrInternal__aapl__pxrReserved__::SdfChangeBlock *this)
{
  unint64_t *Instance;

  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  *(_QWORD *)this = pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_OpenChangeBlock(Instance, (uint64_t)this);
  return this;
}

void pxrInternal__aapl__pxrReserved__::SdfChangeBlock::_CloseChangeBlock(pxrInternal__aapl__pxrReserved__::SdfChangeBlock *this, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *Instance;

  Instance = (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::_CloseChangeBlock(Instance, (const char *)this, a2);
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::GetInstance()
{
  unint64_t result;

  result = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::_instance);
  if (!result)
    return pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::_instance);
  return result;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::_CreateInstance(unint64_t *a1)
{
  std::string *v2;
  __int128 v3;
  unsigned __int8 v4;
  unint64_t v6;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  std::string v14;
  uint64_t v15;
  int v16;
  void *__p[2];
  uint64_t v18;
  const char *v19;
  char v20;
  int v21;

  pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAB44A3 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)&v14);
  v2 = std::string::insert(&v14, 0, "Create Singleton ");
  v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v18 = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_20BEB4C0C((uint64_t)&v15, "Tf", "TfSingleton::_CreateInstance", (char *)__p);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  do
    v4 = __ldaxr(pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::SdfChangeList*> &)::isInitializing);
  while (__stlxr(1u, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::SdfChangeList*> &)::isInitializing));
  if ((v4 & 1) != 0)
  {
    while (!atomic_load(a1))
      sched_yield();
  }
  else
  {
    if (!atomic_load(a1))
    {
      v10 = operator new(0xD8uLL);
      v10[25] = 0x100000000;
      v10[26] = 0;
      v12 = atomic_load(a1);
      if (v12)
      {
        if (v10 != (_QWORD *)v12)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 84;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>"
                "::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::SdfChangeList]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"race detected setting singleton instance", v11);
        }
      }
      else
      {
        do
          v13 = __ldaxr(a1);
        while (__stlxr((unint64_t)v10, a1));
        if (v13)
        {
          __p[0] = "tf/instantiateSingleton.h";
          __p[1] = "_CreateInstance";
          v18 = 88;
          v19 = "static T *pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>"
                "::_CreateInstance(std::atomic<T *> &) [T = pxrInternal__aapl__pxrReserved__::SdfChangeList]";
          v20 = 0;
          v21 = 4;
          pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)__p, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v11, "instance.exchange(newInst) == nullptr");
        }
      }
    }
    atomic_store(0, pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::_CreateInstance(std::atomic<pxrInternal__aapl__pxrReserved__::SdfChangeList*> &)::isInitializing);
  }
  v6 = atomic_load(a1);
  while (v16--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v15);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__11TfSingletonINS_13SdfChangeListEE15_CreateInstanceERNSt3__16atomicIPS1_EE(a1);
}

void sub_20C0AAA84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_20BEB24F4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::CurrentlyExists()
{
  unint64_t v0;

  v0 = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::_instance);
  return v0 != 0;
}

unint64_t pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::SetInstanceConstructed(unint64_t result, uint64_t a2, char *a3)
{
  unint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  do
    v3 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::_instance);
  while (__stlxr(result, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::_instance));
  if (v3)
  {
    v4[0] = "tf/instantiateSingleton.h";
    v4[1] = "SetInstanceConstructed";
    v4[2] = 56;
    v4[3] = "static void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::"
            "SetInstanceConstructed(T &) [T = pxrInternal__aapl__pxrReserved__::SdfChangeList]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"this function may not be called after GetInstance() or another SetInstanceConstructed() has completed", a3);
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::DeleteInstance()
{
  unint64_t i;
  unint64_t v1;
  void **v2;

  for (i = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::_instance);
        i;
        i = v1)
  {
    v1 = __ldaxr(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::_instance);
    if (v1 == i)
    {
      if (!__stlxr(0, &pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfChangeList>::_instance))
      {
        sub_20BFD28A8((uint64_t *)(i + 208), 0);
        v2 = sub_20BFD2974((void **)i);
        operator delete(v2);
        return;
      }
    }
    else
    {
      __clrex();
    }
    sched_yield();
  }
}

void sub_20C0AABF4()
{
  void *__p;
  uint64_t v1;
  uint64_t v2;
  void *v3[2];
  char v4;

  sub_20BDDC0E4(v3, "SdfChangeList::SubLayerAdded");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C527C40, 0, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfChangeList::SubLayerRemoved");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C527C40, 1, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
  sub_20BDDC0E4(v3, "SdfChangeList::SubLayerOffset");
  __p = 0;
  v1 = 0;
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::TfEnum::_AddName((std::string::size_type)&unk_24C527C40, 2, (uint64_t)v3, (uint64_t)&__p);
  if (SHIBYTE(v2) < 0)
    operator delete(__p);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_20C0AAD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *pxrInternal__aapl__pxrReserved__::operator<<(_QWORD *a1, uint64_t a2, char *a3)
{
  uint64_t v4;
  unsigned int v5;
  pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  void *p_p;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  uint64_t **v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  void *__p;
  uint64_t v71;
  unsigned __int8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v4 = *(_QWORD *)a2;
  v5 = *(_DWORD *)(a2 + 200);
  if (*(_DWORD *)(a2 + 204) < 2u)
    v4 = a2;
  v75 = v4;
  v76 = v4 + 200 * v5;
  if (v5)
  {
    do
    {
      v6 = (pxrInternal__aapl__pxrReserved__::SdfPath *)*sub_20C0AB45C(&v75, a2, a3);
      v9 = *sub_20C0AB45C(&v75, v7, v8);
      v10 = sub_20BDDC1C8(a1, (uint64_t)"  <", 3);
      v11 = pxrInternal__aapl__pxrReserved__::operator<<(v10, v6);
      sub_20BDDC1C8(v11, (uint64_t)">\n", 2);
      v12 = v9 + 8;
      v13 = *(_DWORD *)(v9 + 128);
      if (*(_DWORD *)(v9 + 132) >= 4u)
        v12 = *(_QWORD *)(v9 + 8);
      v73 = v12;
      v74 = v12 + 40 * v13;
      if (v13)
      {
        do
        {
          v14 = sub_20BDDC1C8(a1, (uint64_t)"   infoKey: ", 12);
          v17 = sub_20C0AB4D4(&v73, v15, v16);
          v18 = pxrInternal__aapl__pxrReserved__::operator<<(v14, (_QWORD *)*v17);
          sub_20BDDC1C8(v18, (uint64_t)"\n", 1);
          v19 = sub_20BDDC1C8(a1, (uint64_t)"     oldValue: ", 15);
          v22 = sub_20C0AB4D4(&v73, v20, v21);
          sub_20BF834B0(*v22 + 8);
          if ((v72 & 0x80u) == 0)
            p_p = &__p;
          else
            p_p = __p;
          if ((v72 & 0x80u) == 0)
            v24 = v72;
          else
            v24 = v71;
          v25 = sub_20BDDC1C8(v19, (uint64_t)p_p, v24);
          sub_20BDDC1C8(v25, (uint64_t)"\n", 1);
          if ((char)v72 < 0)
            operator delete(__p);
          v26 = sub_20BDDC1C8(a1, (uint64_t)"     newValue: ", 15);
          v29 = sub_20C0AB4D4(&v73, v27, v28);
          sub_20BF834B0(*v29 + 24);
          if ((v72 & 0x80u) == 0)
            v30 = &__p;
          else
            v30 = __p;
          if ((v72 & 0x80u) == 0)
            v31 = v72;
          else
            v31 = v71;
          v32 = sub_20BDDC1C8(v26, (uint64_t)v30, v31);
          sub_20BDDC1C8(v32, (uint64_t)"\n", 1);
          if ((char)v72 < 0)
            operator delete(__p);
          sub_20C0AB54C(&v73);
        }
        while (v73 != v74);
      }
      v33 = *(_QWORD *)(v9 + 136);
      v34 = *(_QWORD *)(v9 + 144);
      v73 = v33;
      v74 = v34;
      while (v33 != v34)
      {
        v35 = sub_20BDDC1C8(a1, (uint64_t)"    sublayer ", 13);
        v38 = (uint64_t **)sub_20C0AB5C8(&v73, v36, v37);
        v39 = *((char *)*v38 + 23);
        if (v39 >= 0)
          v40 = (uint64_t)*v38;
        else
          v40 = **v38;
        if (v39 >= 0)
          v41 = *((unsigned __int8 *)*v38 + 23);
        else
          v41 = (*v38)[1];
        v42 = sub_20BDDC1C8(v35, v40, v41);
        v43 = sub_20BDDC1C8(v42, (uint64_t)" ", 1);
        v46 = sub_20C0AB5C8(&v73, v44, v45);
        pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C527C40, *(unsigned int *)(*v46 + 24), (uint64_t)&__p);
        if ((v72 & 0x80u) == 0)
          v47 = &__p;
        else
          v47 = __p;
        if ((v72 & 0x80u) == 0)
          v48 = v72;
        else
          v48 = v71;
        v49 = sub_20BDDC1C8(v43, (uint64_t)v47, v48);
        sub_20BDDC1C8(v49, (uint64_t)"\n", 1);
        if ((char)v72 < 0)
          operator delete(__p);
        sub_20C0AB640(&v73);
        v33 = v73;
        v34 = v74;
      }
      if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v9 + 160)))
      {
        v50 = sub_20BDDC1C8(a1, (uint64_t)"   oldPath: <", 13);
        v51 = pxrInternal__aapl__pxrReserved__::operator<<(v50, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v9 + 160));
        sub_20BDDC1C8(v51, (uint64_t)">\n", 2);
      }
      v52 = *(unsigned __int16 *)(v9 + 192);
      v53 = v52 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v52 & 0x40) != 0)
      {
        sub_20BDDC1C8(a1, (uint64_t)"   didRename\n", 13);
        v54 = *(unsigned __int16 *)(v9 + 192);
        v53 = v54 | (*(unsigned __int8 *)(v9 + 194) << 16);
        if ((v54 & 1) == 0)
        {
LABEL_45:
          if ((v53 & 2) == 0)
            goto LABEL_46;
          goto LABEL_71;
        }
      }
      else if ((v52 & 1) == 0)
      {
        goto LABEL_45;
      }
      sub_20BDDC1C8(a1, (uint64_t)"   didChangeIdentifier\n", 23);
      v55 = *(unsigned __int16 *)(v9 + 192);
      v53 = v55 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v55 & 2) == 0)
      {
LABEL_46:
        if ((v53 & 4) == 0)
          goto LABEL_47;
        goto LABEL_72;
      }
LABEL_71:
      sub_20BDDC1C8(a1, (uint64_t)"   didChangeResolvedPath\n", 25);
      v56 = *(unsigned __int16 *)(v9 + 192);
      v53 = v56 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v56 & 4) == 0)
      {
LABEL_47:
        if ((v53 & 8) == 0)
          goto LABEL_48;
        goto LABEL_73;
      }
LABEL_72:
      sub_20BDDC1C8(a1, (uint64_t)"   didReplaceContent\n", 21);
      v57 = *(unsigned __int16 *)(v9 + 192);
      v53 = v57 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v57 & 8) == 0)
      {
LABEL_48:
        if ((v53 & 0x10) == 0)
          goto LABEL_49;
        goto LABEL_74;
      }
LABEL_73:
      sub_20BDDC1C8(a1, (uint64_t)"   didReloadContent\n", 20);
      v58 = *(unsigned __int16 *)(v9 + 192);
      v53 = v58 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v58 & 0x10) == 0)
      {
LABEL_49:
        if ((v53 & 0x20) == 0)
          goto LABEL_50;
        goto LABEL_75;
      }
LABEL_74:
      sub_20BDDC1C8(a1, (uint64_t)"   didReorderChildren\n", 22);
      v59 = *(unsigned __int16 *)(v9 + 192);
      v53 = v59 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v59 & 0x20) == 0)
      {
LABEL_50:
        if ((v53 & 0x80) == 0)
          goto LABEL_51;
        goto LABEL_76;
      }
LABEL_75:
      sub_20BDDC1C8(a1, (uint64_t)"   didReorderProperties\n", 24);
      v60 = *(unsigned __int16 *)(v9 + 192);
      v53 = v60 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v60 & 0x80) == 0)
      {
LABEL_51:
        if ((v53 & 0x100) == 0)
          goto LABEL_52;
        goto LABEL_77;
      }
LABEL_76:
      sub_20BDDC1C8(a1, (uint64_t)"   didChangePrimVariantSets\n", 28);
      v61 = *(unsigned __int16 *)(v9 + 192);
      v53 = v61 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v61 & 0x100) == 0)
      {
LABEL_52:
        if ((v53 & 0x200) == 0)
          goto LABEL_53;
        goto LABEL_78;
      }
LABEL_77:
      sub_20BDDC1C8(a1, (uint64_t)"   didChangePrimInheritPaths\n", 29);
      v62 = *(unsigned __int16 *)(v9 + 192);
      v53 = v62 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v62 & 0x200) == 0)
      {
LABEL_53:
        if ((v53 & 0x400) == 0)
          goto LABEL_54;
        goto LABEL_79;
      }
LABEL_78:
      sub_20BDDC1C8(a1, (uint64_t)"   didChangePrimSpecializes\n", 28);
      v63 = *(unsigned __int16 *)(v9 + 192);
      v53 = v63 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v63 & 0x400) == 0)
      {
LABEL_54:
        if ((v53 & 0x800) == 0)
          goto LABEL_55;
        goto LABEL_80;
      }
LABEL_79:
      sub_20BDDC1C8(a1, (uint64_t)"   didChangePrimReferences\n", 27);
      v64 = *(unsigned __int16 *)(v9 + 192);
      v53 = v64 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v64 & 0x800) == 0)
      {
LABEL_55:
        if ((v53 & 0x1000) == 0)
          goto LABEL_56;
        goto LABEL_81;
      }
LABEL_80:
      sub_20BDDC1C8(a1, (uint64_t)"   didChangeAttributeTimeSamples\n", 33);
      v65 = *(unsigned __int16 *)(v9 + 192);
      v53 = v65 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v65 & 0x1000) == 0)
      {
LABEL_56:
        if ((v53 & 0x2000) == 0)
          goto LABEL_57;
        goto LABEL_82;
      }
LABEL_81:
      sub_20BDDC1C8(a1, (uint64_t)"   didChangeAttributeConnection\n", 32);
      v66 = *(unsigned __int16 *)(v9 + 192);
      v53 = v66 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v66 & 0x2000) == 0)
      {
LABEL_57:
        if ((v53 & 0x4000) == 0)
          goto LABEL_58;
        goto LABEL_83;
      }
LABEL_82:
      sub_20BDDC1C8(a1, (uint64_t)"   didChangeRelationshipTargets\n", 32);
      v67 = *(unsigned __int16 *)(v9 + 192);
      v53 = v67 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v67 & 0x4000) == 0)
      {
LABEL_58:
        if ((v53 & 0x8000) == 0)
          goto LABEL_59;
        goto LABEL_84;
      }
LABEL_83:
      sub_20BDDC1C8(a1, (uint64_t)"   didAddTarget\n", 16);
      v68 = *(unsigned __int16 *)(v9 + 192);
      v53 = v68 | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v68 & 0x8000) == 0)
      {
LABEL_59:
        if ((v53 & 0x10000) == 0)
          goto LABEL_60;
        goto LABEL_85;
      }
LABEL_84:
      sub_20BDDC1C8(a1, (uint64_t)"   didRemoveTarget\n", 19);
      v53 = *(unsigned __int16 *)(v9 + 192) | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v53 & 0x10000) == 0)
      {
LABEL_60:
        if ((v53 & 0x20000) == 0)
          goto LABEL_61;
        goto LABEL_86;
      }
LABEL_85:
      sub_20BDDC1C8(a1, (uint64_t)"   didAddInertPrim\n", 19);
      v53 = *(unsigned __int16 *)(v9 + 192) | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v53 & 0x20000) == 0)
      {
LABEL_61:
        if ((v53 & 0x40000) == 0)
          goto LABEL_62;
        goto LABEL_87;
      }
LABEL_86:
      sub_20BDDC1C8(a1, (uint64_t)"   didAddNonInertPrim\n", 22);
      v53 = *(unsigned __int16 *)(v9 + 192) | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v53 & 0x40000) == 0)
      {
LABEL_62:
        if ((v53 & 0x80000) == 0)
          goto LABEL_63;
        goto LABEL_88;
      }
LABEL_87:
      sub_20BDDC1C8(a1, (uint64_t)"   didRemoveInertPrim\n", 22);
      v53 = *(unsigned __int16 *)(v9 + 192) | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v53 & 0x80000) == 0)
      {
LABEL_63:
        if ((v53 & 0x100000) == 0)
          goto LABEL_64;
        goto LABEL_89;
      }
LABEL_88:
      sub_20BDDC1C8(a1, (uint64_t)"   didRemoveNonInertPrim\n", 25);
      v53 = *(unsigned __int16 *)(v9 + 192) | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v53 & 0x100000) == 0)
      {
LABEL_64:
        if ((v53 & 0x200000) == 0)
          goto LABEL_65;
        goto LABEL_90;
      }
LABEL_89:
      sub_20BDDC1C8(a1, (uint64_t)"   didAddPropertyWithOnlyRequiredFields\n", 40);
      v53 = *(unsigned __int16 *)(v9 + 192) | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v53 & 0x200000) == 0)
      {
LABEL_65:
        if ((v53 & 0x400000) == 0)
          goto LABEL_66;
        goto LABEL_91;
      }
LABEL_90:
      sub_20BDDC1C8(a1, (uint64_t)"   didAddProperty\n", 18);
      v53 = *(unsigned __int16 *)(v9 + 192) | (*(unsigned __int8 *)(v9 + 194) << 16);
      if ((v53 & 0x400000) == 0)
      {
LABEL_66:
        if ((v53 & 0x800000) != 0)
          goto LABEL_92;
        goto LABEL_67;
      }
LABEL_91:
      sub_20BDDC1C8(a1, (uint64_t)"   didRemovePropertyWithOnlyRequiredFields\n", 43);
      if (((*(unsigned __int16 *)(v9 + 192) | (*(unsigned __int8 *)(v9 + 194) << 16)) & 0x800000) != 0)
LABEL_92:
        sub_20BDDC1C8(a1, (uint64_t)"   didRemoveProperty\n", 21);
LABEL_67:
      sub_20C0AB6BC(&v75);
    }
    while (v75 != v76);
  }
  return a1;
}

void sub_20C0AB438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C0AB45C(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TfSmallVector"
            "<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfChangeList::Entry"
            ">, 1>>::operator->() [T = const pxrInternal__aapl__pxrReserved__::TfSmallVector<std::pair<pxrInternal__aapl_"
            "_pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfChangeList::Entry>, 1>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C0AB4D4(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TfSmallVector"
            "<std::pair<pxrInternal__aapl__pxrReserved__::TfToken, std::pair<pxrInternal__aapl__pxrReserved__::VtValue, p"
            "xrInternal__aapl__pxrReserved__::VtValue>>, 3>>::operator->() [T = const pxrInternal__aapl__pxrReserved__::T"
            "fSmallVector<std::pair<pxrInternal__aapl__pxrReserved__::TfToken, std::pair<pxrInternal__aapl__pxrReserved__"
            "::VtValue, pxrInternal__aapl__pxrReserved__::VtValue>>, 3>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C0AB54C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TfSmallVector<std::pair<pxrInternal__aapl__pxrReserved__::TfToken, std::pair<pxrInternal__aapl__pxrReserved"
            "__::VtValue, pxrInternal__aapl__pxrReserved__::VtValue>>, 3>>::operator++() [T = const pxrInternal__aapl__px"
            "rReserved__::TfSmallVector<std::pair<pxrInternal__aapl__pxrReserved__::TfToken, std::pair<pxrInternal__aapl_"
            "_pxrReserved__::VtValue, pxrInternal__aapl__pxrReserved__::VtValue>>, 3>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 40;
  }
  return a1;
}

_QWORD *sub_20C0AB5C8(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<std::string, pxrInternal_"
            "_aapl__pxrReserved__::SdfChangeList::SubLayerChangeType>>>::operator->() [T = const std::vector<std::pair<st"
            "d::string, pxrInternal__aapl__pxrReserved__::SdfChangeList::SubLayerChangeType>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C0AB640(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<std::pair<std::string"
            ", pxrInternal__aapl__pxrReserved__::SdfChangeList::SubLayerChangeType>>>::operator++() [T = const std::vecto"
            "r<std::pair<std::string, pxrInternal__aapl__pxrReserved__::SdfChangeList::SubLayerChangeType>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 32;
  }
  return a1;
}

_QWORD *sub_20C0AB6BC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TfSmallVector<std::pair<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfCha"
            "ngeList::Entry>, 1>>::operator++() [T = const pxrInternal__aapl__pxrReserved__::TfSmallVector<std::pair<pxrI"
            "nternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfChangeList::Entry>, 1>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 200;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfChangeList::SdfChangeList(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  sub_20C0ACC7C((_DWORD *)a1, a2);
  v4 = *(_QWORD *)(a2 + 208);
  if (v4)
  {
    v5 = operator new(0x28uLL);
    sub_20C0AD2E4((uint64_t)v5, v4);
  }
  else
  {
    v5 = 0;
  }
  *(_QWORD *)(a1 + 208) = v5;
  return a1;
}

void sub_20C0AB790(_Unwind_Exception *a1)
{
  void **v1;
  void *v2;

  operator delete(v2);
  sub_20BFD2974(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfChangeList::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  void *v6;

  if (a1 != a2)
  {
    v3 = a2;
    v4 = *(_DWORD *)(a2 + 200);
    if (*(_DWORD *)(a2 + 204) >= 2u)
      a2 = *(_QWORD *)a2;
    sub_20C0AD678((_DWORD *)a1, a2, a2 + 200 * v4);
    v5 = *(_QWORD *)(v3 + 208);
    if (v5)
    {
      v6 = operator new(0x28uLL);
      sub_20C0AD2E4((uint64_t)v6, v5);
    }
    else
    {
      v6 = 0;
    }
    sub_20BFD28A8((uint64_t *)(a1 + 208), (uint64_t)v6);
  }
  return a1;
}

void sub_20C0AB83C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void *pxrInternal__aapl__pxrReserved__::SdfChangeList::GetEntry(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  char *v4;
  uint64_t Entry;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v6;
  void *v7;
  unsigned __int8 v8;
  _QWORD v10[4];
  char v11;
  int v12;

  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2))
  {
    v10[0] = "sdf/changeList.cpp";
    v10[1] = "GetEntry";
    v10[2] = 158;
    v10[3] = "const SdfChangeList::Entry &pxrInternal__aapl__pxrReserved__::SdfChangeList::GetEntry(const SdfPath &) const";
    v11 = 0;
    v12 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)v10, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", v4, "!path.IsEmpty()");
  }
  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::FindEntry((uint64_t *)this, (unsigned int *)a2);
  v6 = this;
  if (*((_DWORD *)this + 51) >= 2u)
    v6 = *(pxrInternal__aapl__pxrReserved__::SdfChangeList **)this;
  if ((pxrInternal__aapl__pxrReserved__::SdfChangeList *)Entry != (pxrInternal__aapl__pxrReserved__::SdfChangeList *)((char *)v6 + 200 * *((unsigned int *)this + 50)))
    return (void *)(Entry + 8);
  v8 = atomic_load((unsigned __int8 *)&qword_254985AD8);
  if ((v8 & 1) != 0 || !__cxa_guard_acquire(&qword_254985AD8))
    return &unk_254985A18;
  sub_20C0ABAA4((uint64_t)&unk_254985A18);
  v7 = &unk_254985A18;
  __cxa_atexit((void (*)(void *))sub_20BFD2A70, &unk_254985A18, &dword_20BDBC000);
  __cxa_guard_release(&qword_254985AD8);
  return v7;
}

void sub_20C0AB974(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254985AD8);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfChangeList::FindEntry(uint64_t *a1, unsigned int *a2)
{
  uint64_t *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1;
  v3 = *((_DWORD *)a1 + 51);
  if (v3 > 1)
  {
    v6 = (uint64_t *)*a1;
    v4 = *((_DWORD *)a1 + 50);
    v5 = *a1 + 200 * v4;
    if (!v4)
      return v5;
  }
  else
  {
    v4 = *((_DWORD *)a1 + 50);
    v5 = (uint64_t)&a1[25 * v4];
    v6 = a1;
    if (!v4)
      return v5;
  }
  if (v6[25 * v4 - 25] == *(_QWORD *)a2)
  {
    v5 -= 200;
    return v5;
  }
  v7 = (_QWORD *)a1[26];
  if (!v7)
  {
    v9 = v2;
    if (v3 >= 2)
      v9 = (uint64_t *)*v2;
    v10 = 25 * v4;
    while (v10 * 8)
    {
      v11 = v9[v10 - 25];
      v10 -= 25;
      if (v11 == *(_QWORD *)a2)
      {
        v9 = (uint64_t *)((char *)v9 + v10 * 8 + 200);
        break;
      }
    }
    if (v3 > 1)
    {
      if (v9 == (uint64_t *)*v2)
      {
        v2 = v9;
        return (uint64_t)&v2[25 * v4];
      }
    }
    else if (v9 == v2)
    {
      return (uint64_t)&v2[25 * v4];
    }
    return (uint64_t)(v9 - 25);
  }
  v8 = sub_20C0AD934(v7, a2);
  if (v8)
  {
    if (*((_DWORD *)v2 + 51) >= 2u)
      v2 = (uint64_t *)*v2;
    return (uint64_t)&v2[25 * v8[3]];
  }
  return v5;
}

uint64_t sub_20C0ABAA4(uint64_t a1)
{
  *(_QWORD *)(a1 + 120) = 0x300000000;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 152));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 156));
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 183) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t Entry;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v5;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::FindEntry((uint64_t *)this, (unsigned int *)a2);
  v5 = this;
  if (*((_DWORD *)this + 51) >= 2u)
    v5 = *(pxrInternal__aapl__pxrReserved__::SdfChangeList **)this;
  if ((pxrInternal__aapl__pxrReserved__::SdfChangeList *)Entry == (pxrInternal__aapl__pxrReserved__::SdfChangeList *)((char *)v5 + 200 * *((unsigned int *)this + 50)))
    return pxrInternal__aapl__pxrReserved__::SdfChangeList::_AddNewEntry(this, a2);
  else
    return Entry + 8;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfChangeList::_MakeNonConstIterator(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfChangeList::_AddNewEntry(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  _QWORD *v5;
  char v6;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v7;
  unsigned int v9;
  _DWORD *v10;

  v10 = a2;
  sub_20C0AC110(this, (uint64_t)&unk_20CAC184C, &v10);
  v4 = *((_QWORD *)this + 26);
  if (v4)
  {
    v9 = *((_DWORD *)this + 50) - 1;
    v5 = sub_20C0ADAAC(v4, (unsigned int *)a2, a2, &v9);
    if (!v6)
      v5[3] = v9;
  }
  else if (*((_DWORD *)this + 50) >= 0x40u)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeList::_RebuildAccel(this);
  }
  v7 = this;
  if (*((_DWORD *)this + 51) >= 2u)
    v7 = *(pxrInternal__aapl__pxrReserved__::SdfChangeList **)this;
  return (uint64_t)v7 + 200 * *((unsigned int *)this + 50) - 192;
}

_BYTE *pxrInternal__aapl__pxrReserved__::SdfChangeList::_MoveEntry(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t Entry;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v9;
  _BYTE *v10;
  _BYTE *v11;
  void **v12;
  __int128 v13;
  __int16 v14;
  void **v15;
  _BYTE v16[120];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  int v21;
  __int128 __p;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)a2 == *(_QWORD *)a3)
    return (_BYTE *)pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a3);
  v17 = 0x300000000;
  v19 = 0;
  v18 = 0uLL;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v20);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v21);
  __p = 0uLL;
  memset(v23, 0, 11);
  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::FindEntry((uint64_t *)this, (unsigned int *)a2);
  v8 = Entry;
  v9 = this;
  if (*((_DWORD *)this + 51) >= 2u)
    v9 = *(pxrInternal__aapl__pxrReserved__::SdfChangeList **)this;
  if ((pxrInternal__aapl__pxrReserved__::SdfChangeList *)Entry != (pxrInternal__aapl__pxrReserved__::SdfChangeList *)((char *)v9 + 200 * *((unsigned int *)this + 50)))
  {
    sub_20BFD34FC((uint64_t)v16, Entry + 8);
    if (((BYTE2(v23[1]) << 16) & 0x33333333) == 0
      || pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v20))
    {
      sub_20C0ABFE4((uint64_t *)this, v8, v8 + 200);
      pxrInternal__aapl__pxrReserved__::SdfChangeList::_RebuildAccel(this);
    }
  }
  v10 = (_BYTE *)pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a3);
  v11 = v10;
  if (v10 != v16)
    sub_20BFD3914((uint64_t)v10, (uint64_t)v16);
  sub_20BFD3E84((uint64_t *)v11 + 16);
  *((_OWORD *)v11 + 8) = v18;
  *((_QWORD *)v11 + 18) = v19;
  v18 = 0uLL;
  v19 = 0;
  sub_20BFD3EBC((int *)v11 + 38, &v20);
  sub_20BFD3F10((int *)v11 + 39, &v21);
  v12 = (void **)(v11 + 160);
  if ((char)v11[183] < 0)
    operator delete(*v12);
  v13 = __p;
  *((_QWORD *)v11 + 22) = v23[0];
  *(_OWORD *)v12 = v13;
  HIBYTE(v23[0]) = 0;
  LOBYTE(__p) = 0;
  v14 = v23[1];
  v11[186] = BYTE2(v23[1]);
  *((_WORD *)v11 + 92) = v14 | 0x40;
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v11 + 38))
  {
    sub_20C01A074((int *)v11 + 38, a2);
    sub_20C01A0C8((int *)v11 + 39, (_DWORD *)a2 + 1);
  }
  if (SHIBYTE(v23[0]) < 0)
    operator delete((void *)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v21);
  sub_20BFD265C(&v20);
  v15 = (void **)&v18;
  sub_20BED2E10(&v15);
  sub_20BFD2AD0((uint64_t)v16);
  return v11;
}

void sub_20C0ABEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfChangeList::_RebuildAccel(pxrInternal__aapl__pxrReserved__::SdfChangeList *this)
{
  size_t v1;
  uint64_t *v2;
  _OWORD *v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  uint64_t v12;

  v1 = *((unsigned int *)this + 50);
  v2 = (uint64_t *)((char *)this + 208);
  if (v1 < 0x40)
  {
    sub_20BFD28A8((uint64_t *)this + 26, 0);
  }
  else
  {
    v4 = operator new(0x28uLL);
    *v4 = 0u;
    v4[1] = 0u;
    *((_DWORD *)v4 + 8) = 1065353216;
    sub_20BDEC6E0((uint64_t)v4, v1);
    sub_20BFD28A8(v2, (uint64_t)v4);
    v5 = (unsigned int *)this;
    if (*((_DWORD *)this + 51) >= 2u)
      v5 = *(unsigned int **)this;
    v6 = *((_DWORD *)this + 50);
    if (v6)
    {
      v7 = 0;
      v8 = 200 * v6;
      do
      {
        v9 = *v2;
        v12 = v7;
        v10 = sub_20C0ADD8C(v9, v5, v5, &v12);
        if (!v11)
          v10[3] = v12;
        v5 += 50;
        ++v7;
        v8 -= 200;
      }
      while (v8);
    }
  }
}

void sub_20C0ABFCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = (void *)sub_20BFD28D4(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0ABFE4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v12;

  if (a2 != a3)
  {
    v5 = 0x8F5C28F5C28F5C29 * ((a3 - a2) >> 3);
    v6 = a1;
    if (*((_DWORD *)a1 + 51) >= 2u)
      v6 = (uint64_t *)*a1;
    v7 = (uint64_t)&v6[25 * *((unsigned int *)a1 + 50)];
    sub_20C0AD814(a3, v7, a2);
    if ((_DWORD)v5)
    {
      v8 = 0;
      do
      {
        v9 = v7 - 200 * v5;
        if (*(char *)(v9 + 191) < 0)
          operator delete(*(void **)(v9 + 168));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v9 + 164));
        v10 = v7 - 200 * v5;
        sub_20BFD265C((_DWORD *)(v10 + 160));
        v12 = (void **)(v10 + 136);
        sub_20BED2E10(&v12);
        sub_20BFD2AD0(v9 + 8);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(v10 + 4));
        sub_20BFD265C((_DWORD *)v10);
        v8 -= 200;
        v7 += 200;
      }
      while (-200 * v5 != v8);
    }
    *((_DWORD *)a1 + 50) -= v5;
  }
  return a2;
}

uint64_t sub_20C0AC110(_DWORD *a1, uint64_t a2, _DWORD **a3)
{
  unsigned int v5;
  unsigned int v6;
  _DWORD *v7;

  v5 = a1[50];
  v6 = a1[51];
  if (v5 == v6)
  {
    sub_20C0AD6FC(a1, v5 + (v5 >> 1) + 1);
    v6 = a1[51];
  }
  v7 = a1;
  if (v6 >= 2)
    v7 = *(_DWORD **)a1;
  return sub_20C0ADA10((uint64_t)&v7[50 * a1[50]++], *a3);
}

void pxrInternal__aapl__pxrReserved__::SdfChangeList::_EraseEntry(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t Entry;
  pxrInternal__aapl__pxrReserved__::SdfChangeList *v4;

  if (*((_DWORD *)this + 50))
  {
    Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::FindEntry((uint64_t *)this, (unsigned int *)a2);
    v4 = this;
    if (*((_DWORD *)this + 51) >= 2u)
      v4 = *(pxrInternal__aapl__pxrReserved__::SdfChangeList **)this;
    if ((pxrInternal__aapl__pxrReserved__::SdfChangeList *)Entry != (pxrInternal__aapl__pxrReserved__::SdfChangeList *)((char *)v4 + 200 * *((unsigned int *)this + 50)))
    {
      sub_20C0ABFE4((uint64_t *)this, Entry, Entry + 200);
      pxrInternal__aapl__pxrReserved__::SdfChangeList::_RebuildAccel(this);
    }
  }
}

_WORD *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReplaceLayerContent(pxrInternal__aapl__pxrReserved__::SdfChangeList *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  uint64_t Entry;
  _WORD *result;
  __int16 v5;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, v2);
  v5 = *(_WORD *)(Entry + 184);
  result = (_WORD *)(Entry + 184);
  *result = v5 | 4;
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReloadLayerContent(pxrInternal__aapl__pxrReserved__::SdfChangeList *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  uint64_t Entry;
  _WORD *result;
  __int16 v5;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, v2);
  v5 = *(_WORD *)(Entry + 184);
  result = (_WORD *)(Entry + 184);
  *result = v5 | 8;
  return result;
}

std::string *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeLayerIdentifier(pxrInternal__aapl__pxrReserved__::SdfPath *a1, const std::string *a2)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  std::string *result;
  int v6;
  int v7;

  v4 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  result = (std::string *)pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(a1, v4);
  v6 = LOWORD(result[7].__r_.__value_.__r.__words[2]);
  v7 = v6 | (result[7].__r_.__value_.__s.__data_[18] << 16);
  if ((v6 & 1) == 0)
  {
    result[7].__r_.__value_.__s.__data_[18] = BYTE2(v7);
    LOWORD(result[7].__r_.__value_.__r.__words[2]) = v7 | 1;
    return std::string::operator=((std::string *)((char *)result + 160), a2);
  }
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeLayerResolvedPath(pxrInternal__aapl__pxrReserved__::SdfChangeList *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  uint64_t Entry;
  _WORD *result;
  __int16 v5;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, v2);
  v5 = *(_WORD *)(Entry + 184);
  result = (_WORD *)(Entry + 184);
  *result = v5 | 2;
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeSublayerPaths(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2, int a3)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  uint64_t *Entry;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  void *__p[2];
  uint64_t v23;
  int v24;
  _QWORD v25[5];

  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  Entry = (uint64_t *)pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(a1, v6);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v23 = *(_QWORD *)(a2 + 16);
  }
  v24 = a3;
  v8 = Entry[18];
  v9 = Entry[17];
  if (v9 >= v8)
  {
    v11 = Entry[16];
    v12 = (uint64_t)(v9 - v11) >> 5;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 59)
      sub_20BDDF694();
    v14 = v8 - v11;
    if (v14 >> 4 > v13)
      v13 = v14 >> 4;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v25[4] = Entry + 18;
    v16 = (char *)sub_20BED2F10((uint64_t)(Entry + 18), v15);
    v17 = &v16[32 * v12];
    v25[0] = v16;
    v25[1] = v17;
    v25[3] = &v16[32 * v18];
    v19 = *(_OWORD *)__p;
    *((_QWORD *)v17 + 2) = v23;
    *(_OWORD *)v17 = v19;
    __p[1] = 0;
    v23 = 0;
    __p[0] = 0;
    *((_DWORD *)v17 + 6) = v24;
    v25[2] = v17 + 32;
    sub_20C0AE06C(Entry + 16, v25);
    v20 = Entry[17];
    sub_20BED3064((uint64_t)v25);
    v21 = SHIBYTE(v23);
    Entry[17] = v20;
    if (v21 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v10 = *(_OWORD *)__p;
    *(_QWORD *)(v9 + 16) = v23;
    *(_OWORD *)v9 = v10;
    *(_DWORD *)(v9 + 24) = v24;
    Entry[17] = v9 + 32;
  }
}

void sub_20C0AC45C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_20BED3064((uint64_t)&a17);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeInfo(pxrInternal__aapl__pxrReserved__::SdfChangeList *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t Entry;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v15[2];
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(a1, a2);
  v9 = Entry;
  v10 = *(_QWORD **)Entry;
  v11 = *(unsigned int *)(Entry + 120);
  if (*(_DWORD *)(Entry + 124) < 4u)
    v10 = (_QWORD *)Entry;
  if ((_DWORD)v11)
  {
    v12 = 40 * v11;
    v13 = v10;
    while ((*v13 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
    {
      v13 += 5;
      v12 -= 40;
      if (!v12)
        goto LABEL_11;
    }
  }
  else
  {
    v13 = v10;
  }
  if (v13 != &v10[5 * v11])
    return sub_20BF4A9BC(v13 + 3, a5);
LABEL_11:
  sub_20C0ACC34(v15, a4, a5);
  sub_20C0AC5D8(v9, a3, v15);
  sub_20BF4C2D8((uint64_t)v16);
  return (_QWORD *)sub_20BF4C2D8((uint64_t)v15);
}

void sub_20C0AC5B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8(v2 + 16);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0AC5D8(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *result;

  v6 = *(_DWORD *)(a1 + 120);
  v7 = *(_DWORD *)(a1 + 124);
  if (v6 == v7)
  {
    sub_20C0AE1C0(a1, v6 + (v6 >> 1) + 1);
    v7 = *(_DWORD *)(a1 + 124);
  }
  v8 = a1;
  if (v7 >= 4)
    v8 = *(_QWORD *)a1;
  result = sub_20C0AE244((uint64_t *)(v8 + 40 * *(unsigned int *)(a1 + 120)), a2, a3);
  ++*(_DWORD *)(a1 + 120);
  return result;
}

_BYTE *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimName(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  if (((*(unsigned __int8 *)(pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a3) + 186) << 16) & 0xC0000) != 0)
    pxrInternal__aapl__pxrReserved__::SdfChangeList::_AddNewEntry(this, a3);
  return pxrInternal__aapl__pxrReserved__::SdfChangeList::_MoveEntry(this, a2, a3);
}

_WORD *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimVariantSets(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t Entry;
  _WORD *result;
  __int16 v4;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  v4 = *(_WORD *)(Entry + 184);
  result = (_WORD *)(Entry + 184);
  *result = v4 | 0x80;
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimInheritPaths(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t Entry;
  _WORD *result;
  __int16 v4;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  v4 = *(_WORD *)(Entry + 184);
  result = (_WORD *)(Entry + 184);
  *result = v4 | 0x100;
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimSpecializes(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t Entry;
  _WORD *result;
  __int16 v4;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  v4 = *(_WORD *)(Entry + 184);
  result = (_WORD *)(Entry + 184);
  *result = v4 | 0x200;
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePrimReferences(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t Entry;
  _WORD *result;
  __int16 v4;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  v4 = *(_WORD *)(Entry + 184);
  result = (_WORD *)(Entry + 184);
  *result = v4 | 0x400;
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReorderPrims(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t Entry;
  _WORD *result;
  __int16 v4;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  v4 = *(_WORD *)(Entry + 184);
  result = (_WORD *)(Entry + 184);
  *result = v4 | 0x10;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfChangeList::DidAddPrim(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t Entry;
  uint64_t result;
  __int16 v8;
  int v9;
  int v10;
  int v11;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  if (((*(unsigned __int8 *)(Entry + 186) << 16) & 0xC0000) != 0)
    Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_AddNewEntry(this, a2);
  v9 = *(unsigned __int16 *)(Entry + 184);
  result = Entry + 184;
  v8 = v9;
  v10 = v9 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a3)
    v11 = 0x10000;
  else
    v11 = 0x20000;
  *(_BYTE *)(result + 2) = (v10 | v11) >> 16;
  *(_WORD *)result = v8;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfChangeList::DidRemovePrim(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t Entry;
  uint64_t result;
  __int16 v8;
  int v9;
  int v10;
  int v11;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  if ((*(_BYTE *)(Entry + 186) & 3) << 16)
    Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_AddNewEntry(this, a2);
  v9 = *(unsigned __int16 *)(Entry + 184);
  result = Entry + 184;
  v8 = v9;
  v10 = v9 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a3)
    v11 = 0x40000;
  else
    v11 = 0x80000;
  *(_BYTE *)(result + 2) = (v10 | v11) >> 16;
  *(_WORD *)result = v8;
  return result;
}

int *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidMovePrim(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t Entry;

  pxrInternal__aapl__pxrReserved__::SdfChangeList::DidRemovePrim(this, a2, 0);
  pxrInternal__aapl__pxrReserved__::SdfChangeList::DidAddPrim(this, a3, 0);
  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a3);
  sub_20C01A074((int *)(Entry + 152), a2);
  return sub_20C01A0C8((int *)(Entry + 156), (_DWORD *)a2 + 1);
}

_BYTE *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangePropertyName(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t Entry;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a3);
  if ((*(unsigned __int16 *)(Entry + 184) | (*(unsigned __int8 *)(Entry + 186) << 16)) >= 0x400000u)
    pxrInternal__aapl__pxrReserved__::SdfChangeList::_AddNewEntry(this, a3);
  return pxrInternal__aapl__pxrReserved__::SdfChangeList::_MoveEntry(this, a2, a3);
}

_WORD *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidReorderProperties(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t Entry;
  _WORD *result;
  __int16 v4;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  v4 = *(_WORD *)(Entry + 184);
  result = (_WORD *)(Entry + 184);
  *result = v4 | 0x20;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfChangeList::DidAddProperty(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t Entry;
  uint64_t result;
  __int16 v8;
  int v9;
  int v10;
  int v11;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  if ((*(unsigned __int16 *)(Entry + 184) | (*(unsigned __int8 *)(Entry + 186) << 16)) >= 0x400000u)
    Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_AddNewEntry(this, a2);
  v9 = *(unsigned __int16 *)(Entry + 184);
  result = Entry + 184;
  v8 = v9;
  v10 = v9 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a3)
    v11 = 0x100000;
  else
    v11 = 0x200000;
  *(_BYTE *)(result + 2) = (v10 | v11) >> 16;
  *(_WORD *)result = v8;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfChangeList::DidRemoveProperty(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3)
{
  uint64_t Entry;
  uint64_t result;
  __int16 v8;
  int v9;
  int v10;
  int v11;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  if (((*(unsigned __int8 *)(Entry + 186) << 16) & 0x300000) != 0)
    Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_AddNewEntry(this, a2);
  v9 = *(unsigned __int16 *)(Entry + 184);
  result = Entry + 184;
  v8 = v9;
  v10 = v9 | (*(unsigned __int8 *)(result + 2) << 16);
  if (a3)
    v11 = 0x400000;
  else
    v11 = -8388608;
  *(_BYTE *)(result + 2) = (v10 | v11) >> 16;
  *(_WORD *)result = v8;
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeTimeSamples(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t Entry;
  _WORD *result;
  __int16 v4;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  v4 = *(_WORD *)(Entry + 184);
  result = (_WORD *)(Entry + 184);
  *result = v4 | 0x800;
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeAttributeConnection(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t Entry;
  _WORD *result;
  __int16 v4;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  v4 = *(_WORD *)(Entry + 184);
  result = (_WORD *)(Entry + 184);
  *result = v4 | 0x1000;
  return result;
}

_WORD *pxrInternal__aapl__pxrReserved__::SdfChangeList::DidChangeRelationshipTargets(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t Entry;
  _WORD *result;
  __int16 v4;

  Entry = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  v4 = *(_WORD *)(Entry + 184);
  result = (_WORD *)(Entry + 184);
  *result = v4 | 0x2000;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfChangeList::DidAddTarget(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result;
  int v5;
  int v6;

  result = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  v5 = *(unsigned __int16 *)(result + 184);
  v6 = v5 | (*(unsigned __int8 *)(result + 186) << 16);
  if ((v5 & 0x8000) != 0)
  {
    result = pxrInternal__aapl__pxrReserved__::SdfChangeList::_AddNewEntry(this, a2);
    v6 = *(unsigned __int16 *)(result + 184) | (*(unsigned __int8 *)(result + 186) << 16);
  }
  *(_BYTE *)(result + 186) = BYTE2(v6);
  *(_WORD *)(result + 184) = v6 | 0x4000;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfChangeList::DidRemoveTarget(pxrInternal__aapl__pxrReserved__::SdfChangeList *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t result;
  int v5;
  int v6;

  result = pxrInternal__aapl__pxrReserved__::SdfChangeList::_GetEntry(this, a2);
  v5 = *(unsigned __int16 *)(result + 184);
  v6 = v5 | (*(unsigned __int8 *)(result + 186) << 16);
  if ((v5 & 0x4000) != 0)
  {
    result = pxrInternal__aapl__pxrReserved__::SdfChangeList::_AddNewEntry(this, a2);
    v6 = *(unsigned __int16 *)(result + 184) | (*(unsigned __int8 *)(result + 186) << 16);
  }
  *(_BYTE *)(result + 186) = BYTE2(v6);
  *(_WORD *)(result + 184) = v6 | 0x8000;
  return result;
}

uint64_t *sub_20C0ACB34()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  pxrInternal__aapl__pxrReserved__::TfType::GetCanonicalTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527C40, (uint64_t)__p);
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  pxrInternal__aapl__pxrReserved__::TfType::_DefineCppType((pxrInternal__aapl__pxrReserved__::TfType *)v0, &stru_24C527C40, (char *)4, 1, 1);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C0ACBF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0ACC34(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;

  v5 = sub_20BF4C200(a1, a2);
  sub_20BF4C6D0(v5 + 2, a3);
  return a1;
}

void sub_20C0ACC68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0ACC7C(_DWORD *a1, uint64_t a2)
{
  unsigned int v4;
  void *v5;
  uint64_t v6;

  a1[51] = 1;
  v4 = *(_DWORD *)(a2 + 200);
  v5 = a1;
  if (v4 >= 2)
  {
    v5 = malloc(200 * v4);
    *(_QWORD *)a1 = v5;
    a1[51] = v4;
  }
  a1[50] = v4;
  if (*(_DWORD *)(a2 + 204) >= 2u)
    v6 = *(_QWORD *)a2;
  else
    v6 = a2;
  sub_20C0ACCF8(v6, v6 + 200 * *(unsigned int *)(a2 + 200), (uint64_t)v5);
  return a1;
}

uint64_t sub_20C0ACCF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      sub_20C0ACD8C((_DWORD *)(a3 + v6), (_DWORD *)(a1 + v6));
      v6 += 200;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_20C0ACD54(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 200)
  {
    sub_20C0AD26C(v1);
    v1 += 200;
  }
  __cxa_rethrow();
}

void sub_20C0ACD78(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0ACD8C(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54(a1, a2);
  sub_20BFD6EA4(v4 + 1, a2 + 1);
  sub_20C0ACDE0((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  return a1;
}

void sub_20C0ACDCC(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0ACDE0(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _BYTE *v5;
  __int128 v6;
  __int16 v7;

  v4 = sub_20C0ACEC0((_DWORD *)a1, a2);
  v4[16] = 0;
  v4[17] = 0;
  v4[18] = 0;
  sub_20C0AD0EC(v4 + 16, *(__int128 **)(a2 + 128), *(__int128 **)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 5);
  sub_20BFD6E54((_DWORD *)(a1 + 152), (_DWORD *)(a2 + 152));
  sub_20BFD6EA4((_DWORD *)(a1 + 156), (_DWORD *)(a2 + 156));
  v5 = (_BYTE *)(a1 + 160);
  if (*(char *)(a2 + 183) < 0)
  {
    sub_20BDDBFAC(v5, *(void **)(a2 + 160), *(_QWORD *)(a2 + 168));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 160);
    *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
    *(_OWORD *)v5 = v6;
  }
  v7 = *(_WORD *)(a2 + 184);
  *(_BYTE *)(a1 + 186) = *(_BYTE *)(a2 + 186);
  *(_WORD *)(a1 + 184) = v7;
  return a1;
}

void sub_20C0ACE90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  _DWORD *v3;
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18(v3);
  sub_20BED2E10((void ***)va);
  sub_20BFD2AD0(v2);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0ACEC0(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;

  a1[31] = 3;
  v4 = *(unsigned int *)(a2 + 120);
  v5 = a1;
  if (v4 >= 4)
  {
    v5 = malloc(40 * v4);
    *(_QWORD *)a1 = v5;
    a1[31] = v4;
  }
  a1[30] = v4;
  if (*(_DWORD *)(a2 + 124) >= 4u)
    v6 = *(_QWORD *)a2;
  else
    v6 = a2;
  sub_20C0ACF3C(v6, v6 + 40 * *(unsigned int *)(a2 + 120), (uint64_t)v5);
  return a1;
}

uint64_t sub_20C0ACF3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      sub_20C0ACFD0((uint64_t *)(a3 + v6), (uint64_t *)(a1 + v6));
      v6 += 40;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_20C0ACF98(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 40)
  {
    sub_20C0AD09C(v1);
    v1 += 5;
  }
  __cxa_rethrow();
}

void sub_20C0ACFBC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0ACFD0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20C0AD054(a1 + 1, a2 + 1);
  return a1;
}

_QWORD *sub_20C0AD054(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;

  v4 = sub_20BF4C6D0(a1, a2);
  sub_20BF4C6D0(v4 + 2, a2 + 2);
  return a1;
}

void sub_20C0AD088(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0AD09C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;

  v2 = (uint64_t)(a1 + 1);
  sub_20BF4C2D8((uint64_t)(a1 + 3));
  result = sub_20BF4C2D8(v2);
  if ((*a1 & 7) != 0)
  {
    v4 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  return result;
}

_QWORD *sub_20C0AD0EC(_QWORD *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    sub_20BF25370(result, a4);
    result = sub_20C0AD170((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_20C0AD150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20BED2E10(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0AD170(uint64_t a1, __int128 *a2, __int128 *a3, _QWORD *__dst)
{
  _QWORD *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD *v8;
  _QWORD v10[3];
  char v11;
  void *v12;
  _QWORD *v13;

  v4 = __dst;
  v12 = __dst;
  v13 = __dst;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_20BDDBFAC(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
        v8 = v4;
      }
      *((_DWORD *)v4 + 6) = *((_DWORD *)v6 + 6);
      v6 += 2;
      v4 = v8 + 4;
      v13 = v8 + 4;
    }
    while (v6 != a3);
  }
  v11 = 1;
  sub_20C0AD238((uint64_t)v10);
  return v4;
}

void sub_20C0AD224(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C0AD238((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0AD238(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C00DA20(a1);
  return a1;
}

_DWORD *sub_20C0AD26C(uint64_t a1)
{
  void **v3;

  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 164));
  sub_20BFD265C((_DWORD *)(a1 + 160));
  v3 = (void **)(a1 + 136);
  sub_20BED2E10(&v3);
  sub_20BFD2AD0(a1 + 8);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C0AD2E4(uint64_t a1, uint64_t a2)
{
  unsigned int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_20BDEC6E0(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned int **)(a2 + 16); i; i = *(unsigned int **)i)
    sub_20C0AD358(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_20C0AD340(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFD28D4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0AD358(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v20[3];

  v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = v5;
      if (v5 >= v6)
        v3 = v5 % v6;
    }
    else
    {
      v3 = v5 & (v6 - 1);
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (*v8)
      {
        do
        {
          v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == *(_QWORD *)a2)
              return v9;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6)
                v10 %= v6;
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
  sub_20C0AD5C4(a1, v5, a3, (uint64_t)v20);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    sub_20BDEC6E0(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v20[0] = *v17;
    *v17 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v20[0];
    }
  }
  v9 = (_QWORD *)v20[0];
  v20[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C0AD634((uint64_t)v20, 0);
  return v9;
}

void sub_20C0AD5AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0AD634((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0AD5C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _DWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x20uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0;
  v8[1] = a2;
  sub_20BFD6E54((_DWORD *)v8 + 4, (_DWORD *)a3);
  result = sub_20BFD6EA4((_DWORD *)v8 + 5, (_DWORD *)(a3 + 4));
  v8[3] = *(_QWORD *)(a3 + 8);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C0AD634(uint64_t a1, uint64_t a2)
{
  _DWORD *v2;

  v2 = *(_DWORD **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20BFD2948(v2 + 4);
    operator delete(v2);
  }
}

uint64_t sub_20C0AD678(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;

  sub_20BFD29B0(a1);
  a1[50] = 0;
  v6 = -1030792151 * ((unint64_t)(a3 - a2) >> 3);
  v7 = a1[51];
  if (v7 < v6)
  {
    sub_20C0AD6FC(a1, -1030792151 * ((unint64_t)(a3 - a2) >> 3));
    v7 = a1[51];
  }
  v8 = (uint64_t)a1;
  if (v7 >= 2)
    v8 = *(_QWORD *)a1;
  result = sub_20C0ACCF8(a2, a3, v8);
  a1[50] = v6;
  return result;
}

void sub_20C0AD6FC(_DWORD *a1, unsigned int a2)
{
  void *v4;
  uint64_t v5;

  v4 = malloc(200 * a2);
  v5 = (uint64_t)a1;
  if (a1[51] >= 2u)
    v5 = *(_QWORD *)a1;
  sub_20C0AD780(v5, v5 + 200 * a1[50], (uint64_t)v4);
  sub_20BFD29B0(a1);
  if (a1[51] >= 2u)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  a1[51] = a2;
}

uint64_t sub_20C0AD780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      sub_20BFD3F68(a3 + v6, a1 + v6);
      v6 += 200;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_20C0AD7DC(void *a1)
{
  uint64_t v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  for (; v2; v2 -= 200)
  {
    sub_20C0AD26C(v1);
    v1 += 200;
  }
  __cxa_rethrow();
}

void sub_20C0AD800(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_20C0AD814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_20C0AD870(a3, v4);
      v4 += 200;
      a3 += 200;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_20C0AD870(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  __int16 v6;

  sub_20BFD3EBC((int *)a1, (int *)a2);
  sub_20BFD3F10((int *)(a1 + 4), (int *)(a2 + 4));
  if (a1 != a2)
    sub_20BFD3914(a1 + 8, a2 + 8);
  sub_20BFD3E84((uint64_t *)(a1 + 136));
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  sub_20BFD3EBC((int *)(a1 + 160), (int *)(a2 + 160));
  sub_20BFD3F10((int *)(a1 + 164), (int *)(a2 + 164));
  v4 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 191) = 0;
  *(_BYTE *)(a2 + 168) = 0;
  v6 = *(_WORD *)(a2 + 192);
  *(_BYTE *)(a1 + 194) = *(_BYTE *)(a2 + 194);
  *(_WORD *)(a1 + 192) = v6;
  return a1;
}

_QWORD *sub_20C0AD934(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = v3;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = v3 & (*(_QWORD *)&v2 - 1);
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v8 == v3)
      {
        if (result[2] == *(_QWORD *)a2)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_20C0ADA10(uint64_t a1, _DWORD *a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54((_DWORD *)a1, a2);
  sub_20BFD6EA4(v4 + 1, a2 + 1);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_DWORD *)(a1 + 132) = 3;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 160));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 164));
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 191) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  return a1;
}

_QWORD *sub_20C0ADAAC(uint64_t a1, unsigned int *a2, _DWORD *a3, unsigned int *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C0ADD18(a1, v6, a3, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C0AD634((uint64_t)v21, 0);
  return v10;
}

void sub_20C0ADD00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0AD634((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0ADD18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _DWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x20uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *v10 = 0;
  v10[1] = a2;
  sub_20BFD6E54((_DWORD *)v10 + 4, a3);
  result = sub_20BFD6EA4((_DWORD *)v10 + 5, a3 + 1);
  v10[3] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

_QWORD *sub_20C0ADD8C(uint64_t a1, unsigned int *a2, _DWORD *a3, _QWORD *a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C0ADFF8(a1, v6, a3, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C0AD634((uint64_t)v21, 0);
  return v10;
}

void sub_20C0ADFE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0AD634((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0ADFF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _DWORD *result;

  v9 = a1 + 16;
  v10 = operator new(0x20uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *v10 = 0;
  v10[1] = a2;
  sub_20BFD6E54((_DWORD *)v10 + 4, a3);
  result = sub_20BFD6EA4((_DWORD *)v10 + 5, a3 + 1);
  v10[3] = *a4;
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

uint64_t sub_20C0AE06C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C0AE0E0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C0AE0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  sub_20C0AE18C((uint64_t)v12);
  return v10;
}

uint64_t sub_20C0AE18C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20BED3020(a1);
  return a1;
}

void sub_20C0AE1C0(uint64_t a1, unsigned int a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = malloc(40 * a2);
  v5 = (_QWORD *)a1;
  if (*(_DWORD *)(a1 + 124) >= 4u)
    v5 = *(_QWORD **)a1;
  sub_20BFD3824(v5, &v5[5 * *(unsigned int *)(a1 + 120)], v4);
  sub_20BFD2B0C(a1);
  if (*(_DWORD *)(a1 + 124) >= 4u)
    free(*(void **)a1);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 124) = a2;
}

uint64_t *sub_20C0AE244(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v5 = *a2;
  *a1 = *a2;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BF4C200(a1 + 1, a3);
  sub_20BF4C200(a1 + 3, a3 + 2);
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::Sdf_Children(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::Sdf_Children(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_24Sdf_AttributeChildPolicyEEC2ERKS2_(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::Sdf_Children(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a3 + 1);
  v10 = *a4;
  *(_QWORD *)(a1 + 24) = *a4;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_24Sdf_AttributeChildPolicyEEC2ERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_7TfTokenERKNS_16SdfNameKeyPolicyE(a1, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValid(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;

  v2 = sub_20BFD2F78((_QWORD *)a1);
  return v3 & 1 | (unint64_t)v2
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_24Sdf_AttributeChildPolicyEE7IsValidEv(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::GetSize(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::_UpdateChildNames(a1);
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_24Sdf_AttributeChildPolicyEE7GetSizeEv(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::_UpdateChildNames(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 64) = 1;
    v2 = sub_20BFD2F78((_QWORD *)a1);
    if (v3 & 1 | (unint64_t)v2)
    {
      v4 = sub_20BFCF650((uint64_t *)a1);
      memset(v13, 0, sizeof(v13));
      v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(&v16, v5, a1 + 16, a1 + 24);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v16))
      {
        if ((v17 & 4) != 0)
          v6 = (uint64_t **)(*(uint64_t (**)(void ***))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(&v16);
        else
          v6 = (uint64_t **)v16;
      }
      else
      {
        v6 = (uint64_t **)v13;
      }
      v14 = 0uLL;
      v15 = 0;
      sub_20BFE538C(&v14, *v6, v6[1], v6[1] - *v6);
      sub_20BF4C2D8((uint64_t)&v16);
      sub_20C0B4038((void **)(a1 + 40));
      *(_OWORD *)(a1 + 40) = v14;
      *(_QWORD *)(a1 + 56) = v15;
      v15 = 0;
      v14 = 0uLL;
      v16 = (void **)&v14;
      sub_20BEEB2B8(&v16);
      v16 = (void **)v13;
      sub_20BEEB2B8(&v16);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 40);
      for (i = *(_QWORD *)(a1 + 48); i != v7; i -= 8)
      {
        v10 = *(_QWORD *)(i - 8);
        v9 = v10;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
      }
      *(_QWORD *)(a1 + 48) = v7;
    }
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_24Sdf_AttributeChildPolicyEE17_UpdateChildNamesEv(a1);
}

void sub_20C0AE66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20BF4C2D8(v10 - 40);
  *(_QWORD *)(v10 - 48) = &a10;
  sub_20BEEB2B8((void ***)(v10 - 48));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::GetChild@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const std::type_info *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v12;
  int v13;
  int v14;
  _QWORD v15[4];
  char v16;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValid((uint64_t)a1)
    || (v15[0] = "sdf/children.cpp",
        v15[1] = "GetChild",
        v15[2] = 81,
        v15[3] = "typename Sdf_Children<ChildPolicy>::ValueType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInterna"
                 "l__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::GetChild(size_t) const [ChildPolicy = pxrInternal__a"
                 "apl__pxrReserved__::Sdf_AttributeChildPolicy]",
        v16 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "IsValid()", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::_UpdateChildNames((uint64_t)a1);
    sub_20C0AE7F4((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1[5] + 8 * a2), &v13);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, &v12);
    if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v12, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_24C527B18, v7))
    {
      v8 = (unsigned int *)v12;
      v15[0] = v12;
      if (v12)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v8 = (unsigned int *)v15[0];
        *a3 = v15[0];
        if (v8)
        {
          do
            v10 = __ldaxr(v8);
          while (__stlxr(v10 + 1, v8));
        }
      }
      else
      {
        *a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v15);
    }
    else
    {
      *a3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    return (uint64_t)sub_20BFD265C(&v13);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_20C0AE7D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_20BFD1A18((int *)va1);
  _Unwind_Resume(a1);
}

void sub_20C0AE7F4(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a1))
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendRelationalAttribute(a1, a2, a3);
  else
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a1, a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::Find(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  _QWORD v9[4];
  char v10;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValid(a1)
    || (v9[0] = "sdf/children.cpp",
        v9[1] = "Find",
        v9[2] = 105,
        v9[3] = "size_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChi"
                "ldPolicy>::Find(const KeyType &) const [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy]",
        v10 = 0,
        v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", 0),
        result = 0,
        (v8 & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::_UpdateChildNames(a1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v9);
    v2 = *(_QWORD *)(a1 + 40);
    result = 0;
    v4 = *(_QWORD *)(a1 + 48) - v2;
    if (v4)
    {
      v5 = v4 >> 3;
      if ((unint64_t)(v4 >> 3) <= 1)
        v5 = 1;
      while ((*(_QWORD *)(v2 + 8 * result) & 0xFFFFFFFFFFFFFFF8) != (v9[0] & 0xFFFFFFFFFFFFFFF8))
      {
        if (v5 == ++result)
        {
          result = v5;
          break;
        }
      }
    }
    if ((v9[0] & 7) != 0)
    {
      v6 = (unsigned int *)(v9[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_24Sdf_AttributeChildPolicyEE4FindERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::FindKey@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t **v7;
  BOOL v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValid(a1)
    || (v17 = "sdf/children.cpp",
        v18 = "FindKey",
        v19 = 125,
        v20 = "typename Sdf_Children<ChildPolicy>::KeyType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aa"
              "pl__pxrReserved__::Sdf_AttributeChildPolicy>::FindKey(const ValueType &) const [ChildPolicy = pxrInternal_"
              "_aapl__pxrReserved__::Sdf_AttributeChildPolicy]",
        v21 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "IsValid()", 0),
        (result & 1) != 0))
  {
    result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2);
    if ((result & 1) == 0)
    {
      v7 = (uint64_t **)sub_20C0AEAB8(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v17);
      v8 = sub_20BEB560C((uint64_t)&v17, a1);
      result = (uint64_t)v18;
      if (v18)
      {
        v9 = (unsigned int *)(v18 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      if (v8)
      {
        v12 = sub_20C0AEAB8(a2);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v12, &v15);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v17);
        v13 = v17;
        v14 = *(char **)(a1 + 16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
        sub_20BFD265C(&v17);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
        result = (uint64_t)sub_20BFD265C(&v15);
        if (v13 == v14)
          return (uint64_t)sub_20C0AEB90(a2, (uint64_t)a3);
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void sub_20C0AEA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **sub_20C0AEAB8(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1)
{
  char *v3;
  _QWORD *v4;
  _QWORD v5[2];
  char v6;
  _QWORD v7[4];
  char v8;
  int v9;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>::o"
            "perator->() const [T = pxrInternal__aapl__pxrReserved__::SdfAttributeSpec]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAB439CLL & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v5);
    if (v6 >= 0)
      v4 = v5;
    else
      v4 = (_QWORD *)v5[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Dereferenced an invalid %s", v3, v4);
  }
  return a1;
}

void sub_20C0AEB5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x20C0AEAD4);
}

void sub_20C0AEB74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C0AEB90@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  uint64_t *Name;
  __int128 v5;
  int v7;
  int v8;

  v3 = sub_20C0AEAB8(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v7);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  if (*((char *)Name + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)*Name, Name[1]);
  }
  else
  {
    v5 = *(_OWORD *)Name;
    *(_QWORD *)(a2 + 16) = Name[2];
    *(_OWORD *)a2 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_20BFD265C(&v7);
}

void sub_20C0AEC08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsEqualTo(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20BEB560C(a1, a2);
  if (result)
    return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
        && (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::Copy(uint64_t a1, __int128 *a2)
{
  _BOOL8 result;
  char v5;
  _QWORD v6[4];
  char v7;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  v6[0] = "sdf/children.cpp";
  v6[1] = "Copy";
  v6[2] = 162;
  v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy"
          ">::Copy(const std::vector<ValueType> &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::"
          "Sdf_AttributeChildPolicy]";
  v7 = 0;
  v5 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "IsValid()", 0);
  result = 0;
  if ((v5 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::Insert(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, int a3)
{
  _BOOL8 result;
  char v7;
  _QWORD v8[4];
  char v9;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  v8[0] = "sdf/children.cpp";
  v8[1] = "Insert";
  v8[2] = 176;
  v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy"
          ">::Insert(const ValueType &, size_t, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf"
          "_AttributeChildPolicy]";
  v9 = 0;
  v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "IsValid()", 0);
  result = 0;
  if ((v7 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::Erase(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  _QWORD v7[4];
  char v8;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValid(a1)
    || (v7[0] = "sdf/children.cpp",
        v7[1] = "Erase",
        v7[2] = 190,
        v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChild"
                "Policy>::Erase(const KeyType &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sd"
                "f_AttributeChildPolicy]",
        v8 = 0,
        v6 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "IsValid()", 0),
        result = 0,
        (v6 & 1) != 0))
  {
    v2 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v7);
    if ((v7[0] & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
    result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::RemoveChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    if ((v7[0] & 7) != 0)
    {
      v4 = (unsigned int *)(v7[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::Sdf_Children(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_OWORD *)(a1 + 49) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_OWORD *)(a1 + 49) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::Sdf_Children(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  v10 = *(unsigned int **)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  if (v10)
  {
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_21Sdf_MapperChildPolicyEEC2ERKS2_(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::Sdf_Children(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t *a4, unsigned int **a5)
{
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  unsigned int v16;

  v9 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v9;
  if (v9)
  {
    v10 = (unsigned int *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a3 + 1);
  v12 = *a4;
  *(_QWORD *)(a1 + 24) = *a4;
  if ((v12 & 7) != 0)
  {
    v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 2, v13));
    if ((v14 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  v15 = *a5;
  *(_QWORD *)(a1 + 32) = *a5;
  if (v15)
  {
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_21Sdf_MapperChildPolicyEEC2ERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_7TfTokenERKNS_16SdfPathKeyPolicyE(a1, a2, a3, a4, a5);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::IsValid(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;

  v2 = sub_20BFD2F78((_QWORD *)a1);
  return v3 & 1 | (unint64_t)v2
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_21Sdf_MapperChildPolicyEE7IsValidEv(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::GetSize(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::_UpdateChildNames(a1);
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

void pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::_UpdateChildNames(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  _DWORD *i;
  _DWORD *v8;
  _QWORD v9[3];
  __int128 v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 64) = 1;
    v2 = sub_20BFD2F78((_QWORD *)a1);
    if (v3 & 1 | (unint64_t)v2)
    {
      v4 = sub_20BFCF650((uint64_t *)a1);
      memset(v9, 0, sizeof(v9));
      v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(&v12, v5, a1 + 16, a1 + 24);
      if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v12))
      {
        if ((v13 & 4) != 0)
          v6 = (void **)(*(uint64_t (**)(void ***))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(&v12);
        else
          v6 = v12;
      }
      else
      {
        v6 = (void **)v9;
      }
      v10 = 0uLL;
      v11 = 0;
      sub_20BFD6D38(&v10, *v6, v6[1], ((_BYTE *)v6[1] - (_BYTE *)*v6) >> 3);
      sub_20BF4C2D8((uint64_t)&v12);
      sub_20BFD7014((_QWORD *)(a1 + 40));
      *(_OWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 56) = v11;
      v11 = 0;
      v10 = 0uLL;
      v12 = (void **)&v10;
      sub_20BFD6F90(&v12);
      v12 = (void **)v9;
      sub_20BFD6F90(&v12);
    }
    else
    {
      v8 = *(_DWORD **)(a1 + 40);
      for (i = *(_DWORD **)(a1 + 48); i != v8; sub_20BFD6F64(a1 + 56, i))
        i -= 2;
      *(_QWORD *)(a1 + 48) = v8;
    }
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_21Sdf_MapperChildPolicyEE17_UpdateChildNamesEv(a1);
}

void sub_20C0AF290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  uint64_t v17;

  sub_20BF4C2D8(v17 - 56);
  a17 = (void **)&a10;
  sub_20BFD6F90(&a17);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::GetChild@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const std::type_info *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v13;
  int v14;
  int v15;
  _QWORD v16[4];
  char v17;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::IsValid((uint64_t)a1)
    || (v16[0] = "sdf/children.cpp",
        v16[1] = "GetChild",
        v16[2] = 81,
        v16[3] = "typename Sdf_Children<ChildPolicy>::ValueType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInterna"
                 "l__aapl__pxrReserved__::Sdf_MapperChildPolicy>::GetChild(size_t) const [ChildPolicy = pxrInternal__aapl"
                 "__pxrReserved__::Sdf_MapperChildPolicy]",
        v17 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v16, "IsValid()", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::_UpdateChildNames((uint64_t)a1);
    sub_20C0AF418((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2), (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1[5] + 8 * a2), &v14);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, &v13);
    if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v13, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_24C527AF0, v7))
    {
      v8 = (unsigned int *)v13;
      v16[0] = v13;
      if (v13)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = (unsigned int *)v16[0];
        *a3 = v16[0];
        if (v10)
        {
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
      }
      else
      {
        *a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16);
    }
    else
    {
      *a3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    return (uint64_t)sub_20BFD265C(&v14);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_20C0AF3F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_20BFD1A18((int *)va1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0AF418@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _DWORD *a3@<X8>)
{
  int v7;
  int v8;
  int v9;
  int v10;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1, &v7);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v7, &v9);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  sub_20BFD265C(&v7);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapper(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v9, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v10);
  return sub_20BFD265C(&v9);
}

void sub_20C0AF4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::Find(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  char v10;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::IsValid(a1)
    || (v9[0] = "sdf/children.cpp",
        v9[1] = "Find",
        v9[2] = 105,
        v9[3] = "size_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildP"
                "olicy>::Find(const KeyType &) const [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]",
        v10 = 0,
        v5 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", 0) & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::_UpdateChildNames(a1);
    sub_20BFD88E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 32), a2, (int *)v9);
    v4 = *(_QWORD *)(a1 + 40);
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 48) - v4;
    if (v6)
    {
      v7 = v6 >> 3;
      if ((unint64_t)(v6 >> 3) <= 1)
        v7 = 1;
      while (*(_QWORD *)(v4 + 8 * v5) != v9[0])
      {
        if (v7 == ++v5)
        {
          v5 = v7;
          break;
        }
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v9 + 1);
    sub_20BFD265C(v9);
  }
  return v5;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::FindKey@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t **v6;
  BOOL v7;
  const char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  char *v13;
  char *v14;
  int v16;
  int v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::IsValid(a1)
    || (v18 = "sdf/children.cpp",
        v19 = "FindKey",
        v20 = 125,
        v21 = "typename Sdf_Children<ChildPolicy>::KeyType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aa"
              "pl__pxrReserved__::Sdf_MapperChildPolicy>::FindKey(const ValueType &) const [ChildPolicy = pxrInternal__aa"
              "pl__pxrReserved__::Sdf_MapperChildPolicy]",
        v22 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v18, "IsValid()", 0) & 1) != 0))
  {
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2) & 1) != 0)
      goto LABEL_11;
    v6 = (uint64_t **)sub_20BFD5244(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v6, (uint64_t *)&v18);
    v7 = sub_20BEB560C((uint64_t)&v18, a1);
    v8 = v19;
    if (v19)
    {
      v9 = (unsigned int *)(v19 + 8);
      do
      {
        v10 = __ldxr(v9);
        v11 = v10 - 1;
      }
      while (__stlxr(v11, v9));
      if (!v11)
        (*(void (**)(const char *))(*(_QWORD *)v8 + 8))(v8);
    }
    if (!v7)
      goto LABEL_11;
    v12 = sub_20BFD5244(a2);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v12, &v16);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, &v18);
    v13 = v18;
    v14 = *(char **)(a1 + 16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v18 + 1);
    sub_20BFD265C(&v18);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
    sub_20BFD265C(&v16);
    if (v13 == v14)
    {
      return sub_20C0AF758(a2, a3);
    }
    else
    {
LABEL_11:
      *(_QWORD *)a3 = 0;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
      return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
    }
  }
  else
  {
    *(_QWORD *)a3 = 0;
    return sub_20C019BD0(a3);
  }
}

void sub_20C0AF730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0AF758@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, _DWORD *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  uint64_t *TargetPath;
  int v6;
  int v7;

  v3 = sub_20BFD5244(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v6);
  TargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6);
  sub_20BFD6E54(a2, TargetPath);
  sub_20BFD6EA4(a2 + 1, (_DWORD *)TargetPath + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20C0AF7CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::IsEqualTo(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20BEB560C(a1, a2);
  if (result)
    return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
        && (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::Copy(uint64_t a1, __int128 *a2)
{
  _BOOL8 result;
  char v5;
  _QWORD v6[4];
  char v7;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  v6[0] = "sdf/children.cpp";
  v6[1] = "Copy";
  v6[2] = 162;
  v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::"
          "Copy(const std::vector<ValueType> &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf"
          "_MapperChildPolicy]";
  v7 = 0;
  v5 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "IsValid()", 0);
  result = 0;
  if ((v5 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::Insert(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, int a3)
{
  _BOOL8 result;
  char v7;
  _QWORD v8[4];
  char v9;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  v8[0] = "sdf/children.cpp";
  v8[1] = "Insert";
  v8[2] = 176;
  v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::"
          "Insert(const ValueType &, size_t, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_Ma"
          "pperChildPolicy]";
  v9 = 0;
  v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "IsValid()", 0);
  result = 0;
  if ((v7 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::Erase(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  _QWORD v6[4];
  char v7;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::IsValid(a1)
    || (v6[0] = "sdf/children.cpp",
        v6[1] = "Erase",
        v6[2] = 190,
        v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPol"
                "icy>::Erase(const KeyType &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_M"
                "apperChildPolicy]",
        v7 = 0,
        v4 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "IsValid()", 0) & 1) != 0))
  {
    sub_20BFD88E0((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(a1 + 32), a2, (int *)v6);
    v4 = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::RemoveChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), v6);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v6 + 1);
    sub_20BFD265C(v6);
  }
  return v4;
}

void sub_20C0AFA2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::Sdf_Children(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::Sdf_Children(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_24Sdf_MapperArgChildPolicyEEC2ERKS2_(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::Sdf_Children(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a3 + 1);
  v10 = *a4;
  *(_QWORD *)(a1 + 24) = *a4;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_24Sdf_MapperArgChildPolicyEEC2ERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_7TfTokenERKNS_16SdfNameKeyPolicyE(a1, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValid(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;

  v2 = sub_20BFD2F78((_QWORD *)a1);
  return v3 & 1 | (unint64_t)v2
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_24Sdf_MapperArgChildPolicyEE7IsValidEv(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::GetSize(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::_UpdateChildNames(a1);
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

void pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::_UpdateChildNames(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 64) = 1;
    v2 = sub_20BFD2F78((_QWORD *)a1);
    if (v3 & 1 | (unint64_t)v2)
    {
      v4 = sub_20BFCF650((uint64_t *)a1);
      memset(v13, 0, sizeof(v13));
      v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(&v16, v5, a1 + 16, a1 + 24);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v16))
      {
        if ((v17 & 4) != 0)
          v6 = (uint64_t **)(*(uint64_t (**)(void ***))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(&v16);
        else
          v6 = (uint64_t **)v16;
      }
      else
      {
        v6 = (uint64_t **)v13;
      }
      v14 = 0uLL;
      v15 = 0;
      sub_20BFE538C(&v14, *v6, v6[1], v6[1] - *v6);
      sub_20BF4C2D8((uint64_t)&v16);
      sub_20C0B4038((void **)(a1 + 40));
      *(_OWORD *)(a1 + 40) = v14;
      *(_QWORD *)(a1 + 56) = v15;
      v15 = 0;
      v14 = 0uLL;
      v16 = (void **)&v14;
      sub_20BEEB2B8(&v16);
      v16 = (void **)v13;
      sub_20BEEB2B8(&v16);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 40);
      for (i = *(_QWORD *)(a1 + 48); i != v7; i -= 8)
      {
        v10 = *(_QWORD *)(i - 8);
        v9 = v10;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
      }
      *(_QWORD *)(a1 + 48) = v7;
    }
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_24Sdf_MapperArgChildPolicyEE17_UpdateChildNamesEv(a1);
}

void sub_20C0AFDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20BF4C2D8(v10 - 40);
  *(_QWORD *)(v10 - 48) = &a10;
  sub_20BEEB2B8((void ***)(v10 - 48));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::GetChild@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const std::type_info *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v13;
  int v14;
  int v15;
  _QWORD v16[4];
  char v17;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValid((uint64_t)a1)
    || (v16[0] = "sdf/children.cpp",
        v16[1] = "GetChild",
        v16[2] = 81,
        v16[3] = "typename Sdf_Children<ChildPolicy>::ValueType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInterna"
                 "l__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::GetChild(size_t) const [ChildPolicy = pxrInternal__a"
                 "apl__pxrReserved__::Sdf_MapperArgChildPolicy]",
        v17 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v16, "IsValid()", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::_UpdateChildNames((uint64_t)a1);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1[5] + 8 * a2), &v14);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, &v13);
    if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v13, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_24C527AF0, v7))
    {
      v8 = (unsigned int *)v13;
      v16[0] = v13;
      if (v13)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = (unsigned int *)v16[0];
        *a3 = v16[0];
        if (v10)
        {
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
      }
      else
      {
        *a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16);
    }
    else
    {
      *a3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    return (uint64_t)sub_20BFD265C(&v14);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_20C0AFF5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_20BFD1A18((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::Find(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  _QWORD v9[4];
  char v10;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValid(a1)
    || (v9[0] = "sdf/children.cpp",
        v9[1] = "Find",
        v9[2] = 105,
        v9[3] = "size_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChi"
                "ldPolicy>::Find(const KeyType &) const [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]",
        v10 = 0,
        v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", 0),
        result = 0,
        (v8 & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::_UpdateChildNames(a1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v9);
    v2 = *(_QWORD *)(a1 + 40);
    result = 0;
    v4 = *(_QWORD *)(a1 + 48) - v2;
    if (v4)
    {
      v5 = v4 >> 3;
      if ((unint64_t)(v4 >> 3) <= 1)
        v5 = 1;
      while ((*(_QWORD *)(v2 + 8 * result) & 0xFFFFFFFFFFFFFFF8) != (v9[0] & 0xFFFFFFFFFFFFFFF8))
      {
        if (v5 == ++result)
        {
          result = v5;
          break;
        }
      }
    }
    if ((v9[0] & 7) != 0)
    {
      v6 = (unsigned int *)(v9[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::FindKey@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t **v7;
  BOOL v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValid(a1)
    || (v17 = "sdf/children.cpp",
        v18 = "FindKey",
        v19 = 125,
        v20 = "typename Sdf_Children<ChildPolicy>::KeyType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aa"
              "pl__pxrReserved__::Sdf_MapperArgChildPolicy>::FindKey(const ValueType &) const [ChildPolicy = pxrInternal_"
              "_aapl__pxrReserved__::Sdf_MapperArgChildPolicy]",
        v21 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "IsValid()", 0),
        (result & 1) != 0))
  {
    result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2);
    if ((result & 1) == 0)
    {
      v7 = (uint64_t **)sub_20BFD5244(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v17);
      v8 = sub_20BEB560C((uint64_t)&v17, a1);
      result = (uint64_t)v18;
      if (v18)
      {
        v9 = (unsigned int *)(v18 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      if (v8)
      {
        v12 = sub_20BFD5244(a2);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v12, &v15);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v17);
        v13 = v17;
        v14 = *(char **)(a1 + 16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
        sub_20BFD265C(&v17);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
        result = (uint64_t)sub_20BFD265C(&v15);
        if (v13 == v14)
          return (uint64_t)sub_20C0B01EC(a2, (uint64_t)a3);
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void sub_20C0B01C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0B01EC@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  uint64_t *Name;
  __int128 v5;
  int v7;
  int v8;

  v3 = sub_20BFD5244(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v7);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  if (*((char *)Name + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)*Name, Name[1]);
  }
  else
  {
    v5 = *(_OWORD *)Name;
    *(_QWORD *)(a2 + 16) = Name[2];
    *(_OWORD *)a2 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_20BFD265C(&v7);
}

void sub_20C0B0264(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsEqualTo(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20BEB560C(a1, a2);
  if (result)
    return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
        && (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::Copy(uint64_t a1, __int128 *a2)
{
  _BOOL8 result;
  char v5;
  _QWORD v6[4];
  char v7;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  v6[0] = "sdf/children.cpp";
  v6[1] = "Copy";
  v6[2] = 162;
  v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy"
          ">::Copy(const std::vector<ValueType> &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::"
          "Sdf_MapperArgChildPolicy]";
  v7 = 0;
  v5 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "IsValid()", 0);
  result = 0;
  if ((v5 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::Insert(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, int a3)
{
  _BOOL8 result;
  char v7;
  _QWORD v8[4];
  char v9;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  v8[0] = "sdf/children.cpp";
  v8[1] = "Insert";
  v8[2] = 176;
  v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy"
          ">::Insert(const ValueType &, size_t, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf"
          "_MapperArgChildPolicy]";
  v9 = 0;
  v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "IsValid()", 0);
  result = 0;
  if ((v7 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::Erase(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  _QWORD v7[4];
  char v8;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValid(a1)
    || (v7[0] = "sdf/children.cpp",
        v7[1] = "Erase",
        v7[2] = 190,
        v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChild"
                "Policy>::Erase(const KeyType &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sd"
                "f_MapperArgChildPolicy]",
        v8 = 0,
        v6 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "IsValid()", 0),
        result = 0,
        (v6 & 1) != 0))
  {
    v2 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v7);
    if ((v7[0] & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
    result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::RemoveChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    if ((v7[0] & 7) != 0)
    {
      v4 = (unsigned int *)(v7[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Sdf_Children(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Sdf_Children(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_19Sdf_PrimChildPolicyEEC2ERKS2_(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Sdf_Children(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a3 + 1);
  v10 = *a4;
  *(_QWORD *)(a1 + 24) = *a4;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_19Sdf_PrimChildPolicyEEC2ERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_7TfTokenERKNS_16SdfNameKeyPolicyE(a1, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsValid(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;

  v2 = sub_20BFD2F78((_QWORD *)a1);
  return v3 & 1 | (unint64_t)v2
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_19Sdf_PrimChildPolicyEE7IsValidEv(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::_UpdateChildNames(a1);
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_19Sdf_PrimChildPolicyEE7GetSizeEv(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::_UpdateChildNames(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 64) = 1;
    v2 = sub_20BFD2F78((_QWORD *)a1);
    if (v3 & 1 | (unint64_t)v2)
    {
      v4 = sub_20BFCF650((uint64_t *)a1);
      memset(v13, 0, sizeof(v13));
      v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(&v16, v5, a1 + 16, a1 + 24);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v16))
      {
        if ((v17 & 4) != 0)
          v6 = (uint64_t **)(*(uint64_t (**)(void ***))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(&v16);
        else
          v6 = (uint64_t **)v16;
      }
      else
      {
        v6 = (uint64_t **)v13;
      }
      v14 = 0uLL;
      v15 = 0;
      sub_20BFE538C(&v14, *v6, v6[1], v6[1] - *v6);
      sub_20BF4C2D8((uint64_t)&v16);
      sub_20C0B4038((void **)(a1 + 40));
      *(_OWORD *)(a1 + 40) = v14;
      *(_QWORD *)(a1 + 56) = v15;
      v15 = 0;
      v14 = 0uLL;
      v16 = (void **)&v14;
      sub_20BEEB2B8(&v16);
      v16 = (void **)v13;
      sub_20BEEB2B8(&v16);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 40);
      for (i = *(_QWORD *)(a1 + 48); i != v7; i -= 8)
      {
        v10 = *(_QWORD *)(i - 8);
        v9 = v10;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
      }
      *(_QWORD *)(a1 + 48) = v7;
    }
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_19Sdf_PrimChildPolicyEE17_UpdateChildNamesEv(a1);
}

void sub_20C0B08B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20BF4C2D8(v10 - 40);
  *(_QWORD *)(v10 - 48) = &a10;
  sub_20BEEB2B8((void ***)(v10 - 48));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetChild@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const std::type_info *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v13;
  int v14;
  int v15;
  _QWORD v16[4];
  char v17;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsValid((uint64_t)a1)
    || (v16[0] = "sdf/children.cpp",
        v16[1] = "GetChild",
        v16[2] = 81,
        v16[3] = "typename Sdf_Children<ChildPolicy>::ValueType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInterna"
                 "l__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetChild(size_t) const [ChildPolicy = pxrInternal__aapl__"
                 "pxrReserved__::Sdf_PrimChildPolicy]",
        v17 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v16, "IsValid()", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::_UpdateChildNames((uint64_t)a1);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1[5] + 8 * a2), &v14);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, &v13);
    if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v13, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_24C527C50, v7))
    {
      v8 = (unsigned int *)v13;
      v16[0] = v13;
      if (v13)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = (unsigned int *)v16[0];
        *a3 = v16[0];
        if (v10)
        {
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
      }
      else
      {
        *a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16);
    }
    else
    {
      *a3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    return (uint64_t)sub_20BFD265C(&v14);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_20C0B0A14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_20BFD1A18((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Find(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  _QWORD v9[4];
  char v10;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsValid(a1)
    || (v9[0] = "sdf/children.cpp",
        v9[1] = "Find",
        v9[2] = 105,
        v9[3] = "size_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPol"
                "icy>::Find(const KeyType &) const [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]",
        v10 = 0,
        v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", 0),
        result = 0,
        (v8 & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::_UpdateChildNames(a1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v9);
    v2 = *(_QWORD *)(a1 + 40);
    result = 0;
    v4 = *(_QWORD *)(a1 + 48) - v2;
    if (v4)
    {
      v5 = v4 >> 3;
      if ((unint64_t)(v4 >> 3) <= 1)
        v5 = 1;
      while ((*(_QWORD *)(v2 + 8 * result) & 0xFFFFFFFFFFFFFFF8) != (v9[0] & 0xFFFFFFFFFFFFFFF8))
      {
        if (v5 == ++result)
        {
          result = v5;
          break;
        }
      }
    }
    if ((v9[0] & 7) != 0)
    {
      v6 = (unsigned int *)(v9[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::FindKey@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t **v7;
  BOOL v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsValid(a1)
    || (v17 = "sdf/children.cpp",
        v18 = "FindKey",
        v19 = 125,
        v20 = "typename Sdf_Children<ChildPolicy>::KeyType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aa"
              "pl__pxrReserved__::Sdf_PrimChildPolicy>::FindKey(const ValueType &) const [ChildPolicy = pxrInternal__aapl"
              "__pxrReserved__::Sdf_PrimChildPolicy]",
        v21 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "IsValid()", 0),
        (result & 1) != 0))
  {
    result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2);
    if ((result & 1) == 0)
    {
      v7 = (uint64_t **)sub_20C0B0CA4(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v17);
      v8 = sub_20BEB560C((uint64_t)&v17, a1);
      result = (uint64_t)v18;
      if (v18)
      {
        v9 = (unsigned int *)(v18 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      if (v8)
      {
        v12 = sub_20C0B0CA4(a2);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v12, &v15);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v17);
        v13 = v17;
        v14 = *(char **)(a1 + 16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
        sub_20BFD265C(&v17);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
        result = (uint64_t)sub_20BFD265C(&v15);
        if (v13 == v14)
          return (uint64_t)sub_20C0B0D7C(a2, (uint64_t)a3);
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void sub_20C0B0C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **sub_20C0B0CA4(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1)
{
  char *v3;
  _QWORD *v4;
  _QWORD v5[2];
  char v6;
  _QWORD v7[4];
  char v8;
  int v9;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>::operat"
            "or->() const [T = pxrInternal__aapl__pxrReserved__::SdfPrimSpec]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAE7364 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v5);
    if (v6 >= 0)
      v4 = v5;
    else
      v4 = (_QWORD *)v5[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Dereferenced an invalid %s", v3, v4);
  }
  return a1;
}

void sub_20C0B0D48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x20C0B0CC0);
}

void sub_20C0B0D60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C0B0D7C@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  uint64_t *Name;
  __int128 v5;
  int v7;
  int v8;

  v3 = sub_20C0B0CA4(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v7);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  if (*((char *)Name + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)*Name, Name[1]);
  }
  else
  {
    v5 = *(_OWORD *)Name;
    *(_QWORD *)(a2 + 16) = Name[2];
    *(_OWORD *)a2 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_20BFD265C(&v7);
}

void sub_20C0B0DF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsEqualTo(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20BEB560C(a1, a2);
  if (result)
    return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
        && (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Copy(uint64_t a1, __int128 *a2)
{
  _BOOL8 result;
  char v5;
  _QWORD v6[4];
  char v7;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  v6[0] = "sdf/children.cpp";
  v6[1] = "Copy";
  v6[2] = 162;
  v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Co"
          "py(const std::vector<ValueType> &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
  v7 = 0;
  v5 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "IsValid()", 0);
  result = 0;
  if ((v5 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Insert(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, int a3)
{
  _BOOL8 result;
  char v7;
  _QWORD v8[4];
  char v9;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  v8[0] = "sdf/children.cpp";
  v8[1] = "Insert";
  v8[2] = 176;
  v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::In"
          "sert(const ValueType &, size_t, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
  v9 = 0;
  v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "IsValid()", 0);
  result = 0;
  if ((v7 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Erase(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  _QWORD v7[4];
  char v8;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsValid(a1)
    || (v7[0] = "sdf/children.cpp",
        v7[1] = "Erase",
        v7[2] = 190,
        v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolic"
                "y>::Erase(const KeyType &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]",
        v8 = 0,
        v6 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "IsValid()", 0),
        result = 0,
        (v6 & 1) != 0))
  {
    v2 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v7);
    if ((v7[0] & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
    result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::RemoveChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    if ((v7[0] & 7) != 0)
    {
      v4 = (unsigned int *)(v7[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::Sdf_Children(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::Sdf_Children(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_23Sdf_PropertyChildPolicyEEC2ERKS2_(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::Sdf_Children(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a3 + 1);
  v10 = *a4;
  *(_QWORD *)(a1 + 24) = *a4;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_23Sdf_PropertyChildPolicyEEC2ERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_7TfTokenERKNS_16SdfNameKeyPolicyE(a1, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsValid(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;

  v2 = sub_20BFD2F78((_QWORD *)a1);
  return v3 & 1 | (unint64_t)v2
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_23Sdf_PropertyChildPolicyEE7IsValidEv(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetSize(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::_UpdateChildNames(a1);
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_23Sdf_PropertyChildPolicyEE7GetSizeEv(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::_UpdateChildNames(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 64) = 1;
    v2 = sub_20BFD2F78((_QWORD *)a1);
    if (v3 & 1 | (unint64_t)v2)
    {
      v4 = sub_20BFCF650((uint64_t *)a1);
      memset(v13, 0, sizeof(v13));
      v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(&v16, v5, a1 + 16, a1 + 24);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v16))
      {
        if ((v17 & 4) != 0)
          v6 = (uint64_t **)(*(uint64_t (**)(void ***))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(&v16);
        else
          v6 = (uint64_t **)v16;
      }
      else
      {
        v6 = (uint64_t **)v13;
      }
      v14 = 0uLL;
      v15 = 0;
      sub_20BFE538C(&v14, *v6, v6[1], v6[1] - *v6);
      sub_20BF4C2D8((uint64_t)&v16);
      sub_20C0B4038((void **)(a1 + 40));
      *(_OWORD *)(a1 + 40) = v14;
      *(_QWORD *)(a1 + 56) = v15;
      v15 = 0;
      v14 = 0uLL;
      v16 = (void **)&v14;
      sub_20BEEB2B8(&v16);
      v16 = (void **)v13;
      sub_20BEEB2B8(&v16);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 40);
      for (i = *(_QWORD *)(a1 + 48); i != v7; i -= 8)
      {
        v10 = *(_QWORD *)(i - 8);
        v9 = v10;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
      }
      *(_QWORD *)(a1 + 48) = v7;
    }
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_23Sdf_PropertyChildPolicyEE17_UpdateChildNamesEv(a1);
}

void sub_20C0B1440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20BF4C2D8(v10 - 40);
  *(_QWORD *)(v10 - 48) = &a10;
  sub_20BEEB2B8((void ***)(v10 - 48));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetChild@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const std::type_info *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v13;
  int v14;
  int v15;
  _QWORD v16[4];
  char v17;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsValid((uint64_t)a1)
    || (v16[0] = "sdf/children.cpp",
        v16[1] = "GetChild",
        v16[2] = 81,
        v16[3] = "typename Sdf_Children<ChildPolicy>::ValueType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInterna"
                 "l__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::GetChild(size_t) const [ChildPolicy = pxrInternal__aa"
                 "pl__pxrReserved__::Sdf_PropertyChildPolicy]",
        v17 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v16, "IsValid()", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::_UpdateChildNames((uint64_t)a1);
    sub_20C0AE7F4((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1[5] + 8 * a2), &v14);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, &v13);
    if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v13, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_24C527B00, v7))
    {
      v8 = (unsigned int *)v13;
      v16[0] = v13;
      if (v13)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = (unsigned int *)v16[0];
        *a3 = v16[0];
        if (v10)
        {
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
      }
      else
      {
        *a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16);
    }
    else
    {
      *a3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    return (uint64_t)sub_20BFD265C(&v14);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_20C0B15A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_20BFD1A18((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::Find(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  _QWORD v9[4];
  char v10;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsValid(a1)
    || (v9[0] = "sdf/children.cpp",
        v9[1] = "Find",
        v9[2] = 105,
        v9[3] = "size_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChil"
                "dPolicy>::Find(const KeyType &) const [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]",
        v10 = 0,
        v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", 0),
        result = 0,
        (v8 & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::_UpdateChildNames(a1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v9);
    v2 = *(_QWORD *)(a1 + 40);
    result = 0;
    v4 = *(_QWORD *)(a1 + 48) - v2;
    if (v4)
    {
      v5 = v4 >> 3;
      if ((unint64_t)(v4 >> 3) <= 1)
        v5 = 1;
      while ((*(_QWORD *)(v2 + 8 * result) & 0xFFFFFFFFFFFFFFF8) != (v9[0] & 0xFFFFFFFFFFFFFFF8))
      {
        if (v5 == ++result)
        {
          result = v5;
          break;
        }
      }
    }
    if ((v9[0] & 7) != 0)
    {
      v6 = (unsigned int *)(v9[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_23Sdf_PropertyChildPolicyEE4FindERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::FindKey@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t **v7;
  BOOL v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsValid(a1)
    || (v17 = "sdf/children.cpp",
        v18 = "FindKey",
        v19 = 125,
        v20 = "typename Sdf_Children<ChildPolicy>::KeyType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aa"
              "pl__pxrReserved__::Sdf_PropertyChildPolicy>::FindKey(const ValueType &) const [ChildPolicy = pxrInternal__"
              "aapl__pxrReserved__::Sdf_PropertyChildPolicy]",
        v21 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "IsValid()", 0),
        (result & 1) != 0))
  {
    result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2);
    if ((result & 1) == 0)
    {
      v7 = (uint64_t **)sub_20BFE6874(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v17);
      v8 = sub_20BEB560C((uint64_t)&v17, a1);
      result = (uint64_t)v18;
      if (v18)
      {
        v9 = (unsigned int *)(v18 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      if (v8)
      {
        v12 = sub_20BFE6874(a2);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v12, &v15);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v17);
        v13 = v17;
        v14 = *(char **)(a1 + 16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
        sub_20BFD265C(&v17);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
        result = (uint64_t)sub_20BFD265C(&v15);
        if (v13 == v14)
          return (uint64_t)sub_20C0B1834(a2, (uint64_t)a3);
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void sub_20C0B180C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0B1834@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  uint64_t *Name;
  __int128 v5;
  int v7;
  int v8;

  v3 = sub_20BFE6874(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v7);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  if (*((char *)Name + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)*Name, Name[1]);
  }
  else
  {
    v5 = *(_OWORD *)Name;
    *(_QWORD *)(a2 + 16) = Name[2];
    *(_OWORD *)a2 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_20BFD265C(&v7);
}

void sub_20C0B18AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsEqualTo(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20BEB560C(a1, a2);
  if (result)
    return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
        && (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::Copy(uint64_t a1, __int128 *a2)
{
  _BOOL8 result;
  char v5;
  _QWORD v6[4];
  char v7;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  v6[0] = "sdf/children.cpp";
  v6[1] = "Copy";
  v6[2] = 162;
  v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>"
          "::Copy(const std::vector<ValueType> &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::S"
          "df_PropertyChildPolicy]";
  v7 = 0;
  v5 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "IsValid()", 0);
  result = 0;
  if ((v5 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::Insert(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, int a3)
{
  _BOOL8 result;
  char v7;
  _QWORD v8[4];
  char v9;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  v8[0] = "sdf/children.cpp";
  v8[1] = "Insert";
  v8[2] = 176;
  v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>"
          "::Insert(const ValueType &, size_t, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_"
          "PropertyChildPolicy]";
  v9 = 0;
  v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "IsValid()", 0);
  result = 0;
  if ((v7 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::Erase(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  _QWORD v7[4];
  char v8;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsValid(a1)
    || (v7[0] = "sdf/children.cpp",
        v7[1] = "Erase",
        v7[2] = 190,
        v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildP"
                "olicy>::Erase(const KeyType &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf"
                "_PropertyChildPolicy]",
        v8 = 0,
        v6 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "IsValid()", 0),
        result = 0,
        (v6 & 1) != 0))
  {
    v2 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v7);
    if ((v7[0] & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
    result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::RemoveChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    if ((v7[0] & 7) != 0)
    {
      v4 = (unsigned int *)(v7[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::Sdf_Children(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::Sdf_Children(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_27Sdf_RelationshipChildPolicyEEC2ERKS2_(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::Sdf_Children(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a3 + 1);
  v10 = *a4;
  *(_QWORD *)(a1 + 24) = *a4;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_27Sdf_RelationshipChildPolicyEEC2ERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_7TfTokenERKNS_16SdfNameKeyPolicyE(a1, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsValid(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;

  v2 = sub_20BFD2F78((_QWORD *)a1);
  return v3 & 1 | (unint64_t)v2
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_27Sdf_RelationshipChildPolicyEE7IsValidEv(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::GetSize(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::_UpdateChildNames(a1);
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_27Sdf_RelationshipChildPolicyEE7GetSizeEv(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::_UpdateChildNames(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 64) = 1;
    v2 = sub_20BFD2F78((_QWORD *)a1);
    if (v3 & 1 | (unint64_t)v2)
    {
      v4 = sub_20BFCF650((uint64_t *)a1);
      memset(v13, 0, sizeof(v13));
      v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(&v16, v5, a1 + 16, a1 + 24);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v16))
      {
        if ((v17 & 4) != 0)
          v6 = (uint64_t **)(*(uint64_t (**)(void ***))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(&v16);
        else
          v6 = (uint64_t **)v16;
      }
      else
      {
        v6 = (uint64_t **)v13;
      }
      v14 = 0uLL;
      v15 = 0;
      sub_20BFE538C(&v14, *v6, v6[1], v6[1] - *v6);
      sub_20BF4C2D8((uint64_t)&v16);
      sub_20C0B4038((void **)(a1 + 40));
      *(_OWORD *)(a1 + 40) = v14;
      *(_QWORD *)(a1 + 56) = v15;
      v15 = 0;
      v14 = 0uLL;
      v16 = (void **)&v14;
      sub_20BEEB2B8(&v16);
      v16 = (void **)v13;
      sub_20BEEB2B8(&v16);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 40);
      for (i = *(_QWORD *)(a1 + 48); i != v7; i -= 8)
      {
        v10 = *(_QWORD *)(i - 8);
        v9 = v10;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
      }
      *(_QWORD *)(a1 + 48) = v7;
    }
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_27Sdf_RelationshipChildPolicyEE17_UpdateChildNamesEv(a1);
}

void sub_20C0B1EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20BF4C2D8(v10 - 40);
  *(_QWORD *)(v10 - 48) = &a10;
  sub_20BEEB2B8((void ***)(v10 - 48));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::GetChild@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const std::type_info *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v12;
  int v13;
  int v14;
  _QWORD v15[4];
  char v16;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsValid((uint64_t)a1)
    || (v15[0] = "sdf/children.cpp",
        v15[1] = "GetChild",
        v15[2] = 81,
        v15[3] = "typename Sdf_Children<ChildPolicy>::ValueType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInterna"
                 "l__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::GetChild(size_t) const [ChildPolicy = pxrInternal"
                 "__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]",
        v16 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v15, "IsValid()", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::_UpdateChildNames((uint64_t)a1);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2), (const pxrInternal__aapl__pxrReserved__::TfToken *)(a1[5] + 8 * a2), &v13);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v13, &v12);
    if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v12, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&stru_24C527C68, v7))
    {
      v8 = (unsigned int *)v12;
      v15[0] = v12;
      if (v12)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v8 = (unsigned int *)v15[0];
        *a3 = v15[0];
        if (v8)
        {
          do
            v10 = __ldaxr(v8);
          while (__stlxr(v10 + 1, v8));
        }
      }
      else
      {
        *a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v8, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v15);
    }
    else
    {
      *a3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v12);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v14);
    return (uint64_t)sub_20BFD265C(&v13);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_20C0B205C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_20BFD1A18((int *)va1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::Find(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  _QWORD v9[4];
  char v10;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsValid(a1)
    || (v9[0] = "sdf/children.cpp",
        v9[1] = "Find",
        v9[2] = 105,
        v9[3] = "size_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_Relationship"
                "ChildPolicy>::Find(const KeyType &) const [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]",
        v10 = 0,
        v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", 0),
        result = 0,
        (v8 & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::_UpdateChildNames(a1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v9);
    v2 = *(_QWORD *)(a1 + 40);
    result = 0;
    v4 = *(_QWORD *)(a1 + 48) - v2;
    if (v4)
    {
      v5 = v4 >> 3;
      if ((unint64_t)(v4 >> 3) <= 1)
        v5 = 1;
      while ((*(_QWORD *)(v2 + 8 * result) & 0xFFFFFFFFFFFFFFF8) != (v9[0] & 0xFFFFFFFFFFFFFFF8))
      {
        if (v5 == ++result)
        {
          result = v5;
          break;
        }
      }
    }
    if ((v9[0] & 7) != 0)
    {
      v6 = (unsigned int *)(v9[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  return result;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_27Sdf_RelationshipChildPolicyEE4FindERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEE(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::FindKey@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t **v7;
  BOOL v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsValid(a1)
    || (v17 = "sdf/children.cpp",
        v18 = "FindKey",
        v19 = 125,
        v20 = "typename Sdf_Children<ChildPolicy>::KeyType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aa"
              "pl__pxrReserved__::Sdf_RelationshipChildPolicy>::FindKey(const ValueType &) const [ChildPolicy = pxrIntern"
              "al__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]",
        v21 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "IsValid()", 0),
        (result & 1) != 0))
  {
    result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2);
    if ((result & 1) == 0)
    {
      v7 = (uint64_t **)sub_20C0B22EC(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v17);
      v8 = sub_20BEB560C((uint64_t)&v17, a1);
      result = (uint64_t)v18;
      if (v18)
      {
        v9 = (unsigned int *)(v18 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      if (v8)
      {
        v12 = sub_20C0B22EC(a2);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v12, &v15);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v17);
        v13 = v17;
        v14 = *(char **)(a1 + 16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
        sub_20BFD265C(&v17);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
        result = (uint64_t)sub_20BFD265C(&v15);
        if (v13 == v14)
          return (uint64_t)sub_20C0B23C4(a2, (uint64_t)a3);
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void sub_20C0B22C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **sub_20C0B22EC(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1)
{
  char *v3;
  _QWORD *v4;
  _QWORD v5[2];
  char v6;
  _QWORD v7[4];
  char v8;
  int v9;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>"
            "::operator->() const [T = pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAB44D7 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v5);
    if (v6 >= 0)
      v4 = v5;
    else
      v4 = (_QWORD *)v5[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Dereferenced an invalid %s", v3, v4);
  }
  return a1;
}

void sub_20C0B2390(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x20C0B2308);
}

void sub_20C0B23A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C0B23C4@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  uint64_t *Name;
  __int128 v5;
  int v7;
  int v8;

  v3 = sub_20C0B22EC(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v7);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  if (*((char *)Name + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)*Name, Name[1]);
  }
  else
  {
    v5 = *(_OWORD *)Name;
    *(_QWORD *)(a2 + 16) = Name[2];
    *(_OWORD *)a2 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_20BFD265C(&v7);
}

void sub_20C0B243C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsEqualTo(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20BEB560C(a1, a2);
  if (result)
    return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
        && (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::Copy(uint64_t a1, __int128 *a2)
{
  _BOOL8 result;
  char v5;
  _QWORD v6[4];
  char v7;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  v6[0] = "sdf/children.cpp";
  v6[1] = "Copy";
  v6[2] = 162;
  v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPol"
          "icy>::Copy(const std::vector<ValueType> &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved_"
          "_::Sdf_RelationshipChildPolicy]";
  v7 = 0;
  v5 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "IsValid()", 0);
  result = 0;
  if ((v5 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::Insert(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, int a3)
{
  _BOOL8 result;
  char v7;
  _QWORD v8[4];
  char v9;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  v8[0] = "sdf/children.cpp";
  v8[1] = "Insert";
  v8[2] = 176;
  v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPol"
          "icy>::Insert(const ValueType &, size_t, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::"
          "Sdf_RelationshipChildPolicy]";
  v9 = 0;
  v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "IsValid()", 0);
  result = 0;
  if ((v7 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::Erase(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  _QWORD v7[4];
  char v8;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsValid(a1)
    || (v7[0] = "sdf/children.cpp",
        v7[1] = "Erase",
        v7[2] = 190,
        v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipCh"
                "ildPolicy>::Erase(const KeyType &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__:"
                ":Sdf_RelationshipChildPolicy]",
        v8 = 0,
        v6 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "IsValid()", 0),
        result = 0,
        (v6 & 1) != 0))
  {
    v2 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v7);
    if ((v7[0] & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
    result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::RemoveChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    if ((v7[0] & 7) != 0)
    {
      v4 = (unsigned int *)(v7[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::Sdf_Children(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::Sdf_Children(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_22Sdf_VariantChildPolicyEEC2ERKS2_(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::Sdf_Children(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a3 + 1);
  v10 = *a4;
  *(_QWORD *)(a1 + 24) = *a4;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_22Sdf_VariantChildPolicyEEC2ERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_7TfTokenERKNS_16SdfNameKeyPolicyE(a1, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsValid(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;

  v2 = sub_20BFD2F78((_QWORD *)a1);
  return v3 & 1 | (unint64_t)v2
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_22Sdf_VariantChildPolicyEE7IsValidEv(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::GetSize(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::_UpdateChildNames(a1);
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_22Sdf_VariantChildPolicyEE7GetSizeEv(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::_UpdateChildNames(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 64) = 1;
    v2 = sub_20BFD2F78((_QWORD *)a1);
    if (v3 & 1 | (unint64_t)v2)
    {
      v4 = sub_20BFCF650((uint64_t *)a1);
      memset(v13, 0, sizeof(v13));
      v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(&v16, v5, a1 + 16, a1 + 24);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v16))
      {
        if ((v17 & 4) != 0)
          v6 = (uint64_t **)(*(uint64_t (**)(void ***))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(&v16);
        else
          v6 = (uint64_t **)v16;
      }
      else
      {
        v6 = (uint64_t **)v13;
      }
      v14 = 0uLL;
      v15 = 0;
      sub_20BFE538C(&v14, *v6, v6[1], v6[1] - *v6);
      sub_20BF4C2D8((uint64_t)&v16);
      sub_20C0B4038((void **)(a1 + 40));
      *(_OWORD *)(a1 + 40) = v14;
      *(_QWORD *)(a1 + 56) = v15;
      v15 = 0;
      v14 = 0uLL;
      v16 = (void **)&v14;
      sub_20BEEB2B8(&v16);
      v16 = (void **)v13;
      sub_20BEEB2B8(&v16);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 40);
      for (i = *(_QWORD *)(a1 + 48); i != v7; i -= 8)
      {
        v10 = *(_QWORD *)(i - 8);
        v9 = v10;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
      }
      *(_QWORD *)(a1 + 48) = v7;
    }
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_22Sdf_VariantChildPolicyEE17_UpdateChildNamesEv(a1);
}

void sub_20C0B2A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20BF4C2D8(v10 - 40);
  *(_QWORD *)(v10 - 48) = &a10;
  sub_20BEEB2B8((void ***)(v10 - 48));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::GetChild@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const std::type_info *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v13;
  int v14;
  int v15;
  _QWORD v16[4];
  char v17;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsValid((uint64_t)a1)
    || (v16[0] = "sdf/children.cpp",
        v16[1] = "GetChild",
        v16[2] = 81,
        v16[3] = "typename Sdf_Children<ChildPolicy>::ValueType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInterna"
                 "l__aapl__pxrReserved__::Sdf_VariantChildPolicy>::GetChild(size_t) const [ChildPolicy = pxrInternal__aap"
                 "l__pxrReserved__::Sdf_VariantChildPolicy]",
        v17 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v16, "IsValid()", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::_UpdateChildNames((uint64_t)a1);
    sub_20C0B2C10((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 2), (_QWORD *)(a1[5] + 8 * a2), &v14);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, &v13);
    if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v13, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_24C527C80, v7))
    {
      v8 = (unsigned int *)v13;
      v16[0] = v13;
      if (v13)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = (unsigned int *)v16[0];
        *a3 = v16[0];
        if (v10)
        {
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
      }
      else
      {
        *a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16);
    }
    else
    {
      *a3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    return (uint64_t)sub_20BFD265C(&v14);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_20C0B2BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_20BFD1A18((int *)va1);
  _Unwind_Resume(a1);
}

void sub_20C0B2C10(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t *EmptyString;
  uint64_t v7;
  uint64_t *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  void *__p;
  char v15;
  void *v16[2];
  uint64_t v17;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(a1, (uint64_t)v12);
  *(_OWORD *)v16 = *(_OWORD *)v12;
  v17 = v13;
  v12[1] = 0;
  v13 = 0;
  v12[0] = 0;
  if (v15 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v13) < 0)
      operator delete(v12[0]);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, v12);
  EmptyString = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v11);
  if ((v11 & 0xFFFFFFFFFFFFFFF8) != 0)
  {
    v7 = (v11 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  else
  {
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
    v7 = (uint64_t)EmptyString;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    v8 = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    v8 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)EmptyString);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(v12, v7, (uint64_t)v8, a3);
  if ((v11 & 7) != 0)
  {
    v9 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v12 + 1);
  sub_20BFD265C(v12);
  if (SHIBYTE(v17) < 0)
    operator delete(v16[0]);
}

void sub_20C0B2D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20BFD1A18(&a11);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::Find(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  _QWORD v9[4];
  char v10;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsValid(a1)
    || (v9[0] = "sdf/children.cpp",
        v9[1] = "Find",
        v9[2] = 105,
        v9[3] = "size_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChild"
                "Policy>::Find(const KeyType &) const [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]",
        v10 = 0,
        v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", 0),
        result = 0,
        (v8 & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::_UpdateChildNames(a1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v9);
    v2 = *(_QWORD *)(a1 + 40);
    result = 0;
    v4 = *(_QWORD *)(a1 + 48) - v2;
    if (v4)
    {
      v5 = v4 >> 3;
      if ((unint64_t)(v4 >> 3) <= 1)
        v5 = 1;
      while ((*(_QWORD *)(v2 + 8 * result) & 0xFFFFFFFFFFFFFFF8) != (v9[0] & 0xFFFFFFFFFFFFFFF8))
      {
        if (v5 == ++result)
        {
          result = v5;
          break;
        }
      }
    }
    if ((v9[0] & 7) != 0)
    {
      v6 = (unsigned int *)(v9[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::FindKey@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t **v7;
  BOOL v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsValid(a1)
    || (v17 = "sdf/children.cpp",
        v18 = "FindKey",
        v19 = 125,
        v20 = "typename Sdf_Children<ChildPolicy>::KeyType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aa"
              "pl__pxrReserved__::Sdf_VariantChildPolicy>::FindKey(const ValueType &) const [ChildPolicy = pxrInternal__a"
              "apl__pxrReserved__::Sdf_VariantChildPolicy]",
        v21 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "IsValid()", 0),
        (result & 1) != 0))
  {
    result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2);
    if ((result & 1) == 0)
    {
      v7 = (uint64_t **)sub_20BFE8634(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v17);
      v8 = sub_20BEB560C((uint64_t)&v17, a1);
      result = (uint64_t)v18;
      if (v18)
      {
        v9 = (unsigned int *)(v18 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      if (v8)
      {
        v12 = sub_20BFE8634(a2);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v12, &v15);
        sub_20C0B2FEC((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v17);
        v13 = v17;
        v14 = *(char **)(a1 + 16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
        sub_20BFD265C(&v17);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
        result = (uint64_t)sub_20BFD265C(&v15);
        if (v13 == v14)
          return (uint64_t)sub_20C0B3100(a2, (uint64_t)a3);
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void sub_20C0B2FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

void sub_20C0B2FEC(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, _DWORD *a2@<X8>)
{
  int v4;
  int v5;
  void *v6[2];
  uint64_t v7;
  void *__p;
  char v9;
  __int128 v10;
  uint64_t v11;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(a1, (uint64_t)v6);
  v10 = *(_OWORD *)v6;
  v11 = v7;
  v6[1] = 0;
  v7 = 0;
  v6[0] = 0;
  if (v9 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v7) < 0)
      operator delete(v6[0]);
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v4);
  sub_20BDDC0E4(v6, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&v4, (uint64_t)&v10, (uint64_t)v6, a2);
  if (SHIBYTE(v7) < 0)
    operator delete(v6[0]);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
  sub_20BFD265C(&v4);
  if (SHIBYTE(v11) < 0)
    operator delete((void *)v10);
}

void sub_20C0B30BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  sub_20BFD1A18(&a10);
  if (*(char *)(v16 - 25) < 0)
    operator delete(*(void **)(v16 - 48));
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0B3100@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  uint64_t *Name;
  __int128 v5;
  int v7;
  int v8;

  v3 = sub_20BFE8634(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v7);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  if (*((char *)Name + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)*Name, Name[1]);
  }
  else
  {
    v5 = *(_OWORD *)Name;
    *(_QWORD *)(a2 + 16) = Name[2];
    *(_OWORD *)a2 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_20BFD265C(&v7);
}

void sub_20C0B3178(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsEqualTo(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20BEB560C(a1, a2);
  if (result)
    return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
        && (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::Copy(uint64_t a1, __int128 *a2)
{
  _BOOL8 result;
  char v5;
  _QWORD v6[4];
  char v7;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  v6[0] = "sdf/children.cpp";
  v6[1] = "Copy";
  v6[2] = 162;
  v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>:"
          ":Copy(const std::vector<ValueType> &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sd"
          "f_VariantChildPolicy]";
  v7 = 0;
  v5 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "IsValid()", 0);
  result = 0;
  if ((v5 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::Insert(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, int a3)
{
  _BOOL8 result;
  char v7;
  _QWORD v8[4];
  char v9;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  v8[0] = "sdf/children.cpp";
  v8[1] = "Insert";
  v8[2] = 176;
  v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>:"
          ":Insert(const ValueType &, size_t, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_V"
          "ariantChildPolicy]";
  v9 = 0;
  v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "IsValid()", 0);
  result = 0;
  if ((v7 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2, a3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::Erase(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  _QWORD v7[4];
  char v8;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsValid(a1)
    || (v7[0] = "sdf/children.cpp",
        v7[1] = "Erase",
        v7[2] = 190,
        v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPo"
                "licy>::Erase(const KeyType &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_"
                "VariantChildPolicy]",
        v8 = 0,
        v6 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "IsValid()", 0),
        result = 0,
        (v6 & 1) != 0))
  {
    v2 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v7);
    if ((v7[0] & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
    result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::RemoveChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16));
    if ((v7[0] & 7) != 0)
    {
      v4 = (unsigned int *)(v7[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Sdf_Children(uint64_t a1)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 16));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)(a1 + 20));
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Sdf_Children(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), (_DWORD *)(a2 + 16));
  sub_20BFD6EA4((_DWORD *)(a1 + 20), (_DWORD *)(a2 + 20));
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_25Sdf_VariantSetChildPolicyEEC2ERKS2_(a1, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Sdf_Children(uint64_t a1, _QWORD *a2, _DWORD *a3, uint64_t *a4)
{
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;

  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  if (v7)
  {
    v8 = (unsigned int *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  sub_20BFD6E54((_DWORD *)(a1 + 16), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 20), a3 + 1);
  v10 = *a4;
  *(_QWORD *)(a1 + 24) = *a4;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(a1 + 24) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_25Sdf_VariantSetChildPolicyEEC2ERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_7TfTokenERKNS_16SdfNameKeyPolicyE(a1, a2, a3, a4);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValid(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;

  v2 = sub_20BFD2F78((_QWORD *)a1);
  return v3 & 1 | (unint64_t)v2
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 16));
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_25Sdf_VariantSetChildPolicyEE7IsValidEv(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::_UpdateChildNames(a1);
  return (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 3;
}

{
  return __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_25Sdf_VariantSetChildPolicyEE7GetSizeEv(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::_UpdateChildNames(uint64_t a1)
{
  uint64_t (*v2)(uint64_t *);
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 64))
  {
    *(_BYTE *)(a1 + 64) = 1;
    v2 = sub_20BFD2F78((_QWORD *)a1);
    if (v3 & 1 | (unint64_t)v2)
    {
      v4 = sub_20BFCF650((uint64_t *)a1);
      memset(v13, 0, sizeof(v13));
      v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 136))(&v16, v5, a1 + 16, a1 + 24);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v16))
      {
        if ((v17 & 4) != 0)
          v6 = (uint64_t **)(*(uint64_t (**)(void ***))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(&v16);
        else
          v6 = (uint64_t **)v16;
      }
      else
      {
        v6 = (uint64_t **)v13;
      }
      v14 = 0uLL;
      v15 = 0;
      sub_20BFE538C(&v14, *v6, v6[1], v6[1] - *v6);
      sub_20BF4C2D8((uint64_t)&v16);
      sub_20C0B4038((void **)(a1 + 40));
      *(_OWORD *)(a1 + 40) = v14;
      *(_QWORD *)(a1 + 56) = v15;
      v15 = 0;
      v14 = 0uLL;
      v16 = (void **)&v14;
      sub_20BEEB2B8(&v16);
      v16 = (void **)v13;
      sub_20BEEB2B8(&v16);
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 40);
      for (i = *(_QWORD *)(a1 + 48); i != v7; i -= 8)
      {
        v10 = *(_QWORD *)(i - 8);
        v9 = v10;
        if ((v10 & 7) != 0)
        {
          v11 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
          do
            v12 = __ldxr(v11);
          while (__stlxr(v12 - 2, v11));
        }
      }
      *(_QWORD *)(a1 + 48) = v7;
    }
  }
}

{
  __ZNK32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_25Sdf_VariantSetChildPolicyEE17_UpdateChildNamesEv(a1);
}

void sub_20C0B37C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;

  sub_20BF4C2D8(v10 - 40);
  *(_QWORD *)(v10 - 48) = &a10;
  sub_20BEEB2B8((void ***)(v10 - 48));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetChild@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  const std::type_info *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v13;
  int v14;
  int v15;
  _QWORD v16[4];
  char v17;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValid((uint64_t)a1)
    || (v16[0] = "sdf/children.cpp",
        v16[1] = "GetChild",
        v16[2] = 81,
        v16[3] = "typename Sdf_Children<ChildPolicy>::ValueType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInterna"
                 "l__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetChild(size_t) const [ChildPolicy = pxrInternal__"
                 "aapl__pxrReserved__::Sdf_VariantSetChildPolicy]",
        v17 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v16, "IsValid()", 0),
        (result & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::_UpdateChildNames((uint64_t)a1);
    sub_20C0B394C((pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 2), (_QWORD *)(a1[5] + 8 * a2), &v14);
    v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v14, &v13);
    if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v13, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_24C527C98, v7))
    {
      v8 = (unsigned int *)v13;
      v16[0] = v13;
      if (v13)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
        v10 = (unsigned int *)v16[0];
        *a3 = v16[0];
        if (v10)
        {
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 + 1, v10));
        }
      }
      else
      {
        *a3 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16);
    }
    else
    {
      *a3 = 0;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    return (uint64_t)sub_20BFD265C(&v14);
  }
  else
  {
    *a3 = 0;
  }
  return result;
}

void sub_20C0B3928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  sub_20BFD1A18((int *)va1);
  _Unwind_Resume(a1);
}

void sub_20C0B394C(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t *EmptyString;
  void *__p[2];
  char v7;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  sub_20BDDC0E4(__p, "");
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(a1, (uint64_t)EmptyString, (uint64_t)__p, a3);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_20C0B39CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Find(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  char v8;
  _QWORD v9[4];
  char v10;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValid(a1)
    || (v9[0] = "sdf/children.cpp",
        v9[1] = "Find",
        v9[2] = 105,
        v9[3] = "size_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetCh"
                "ildPolicy>::Find(const KeyType &) const [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]",
        v10 = 0,
        v8 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v9, "IsValid()", 0),
        result = 0,
        (v8 & 1) != 0))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::_UpdateChildNames(a1);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v9);
    v2 = *(_QWORD *)(a1 + 40);
    result = 0;
    v4 = *(_QWORD *)(a1 + 48) - v2;
    if (v4)
    {
      v5 = v4 >> 3;
      if ((unint64_t)(v4 >> 3) <= 1)
        v5 = 1;
      while ((*(_QWORD *)(v2 + 8 * result) & 0xFFFFFFFFFFFFFFF8) != (v9[0] & 0xFFFFFFFFFFFFFFF8))
      {
        if (v5 == ++result)
        {
          result = v5;
          break;
        }
      }
    }
    if ((v9[0] & 7) != 0)
    {
      v6 = (unsigned int *)(v9[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v7 = __ldxr(v6);
      while (__stlxr(v7 - 2, v6));
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::FindKey@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t **v7;
  BOOL v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  char *v13;
  char *v14;
  int v15;
  int v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;

  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValid(a1)
    || (v17 = "sdf/children.cpp",
        v18 = "FindKey",
        v19 = 125,
        v20 = "typename Sdf_Children<ChildPolicy>::KeyType pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aa"
              "pl__pxrReserved__::Sdf_VariantSetChildPolicy>::FindKey(const ValueType &) const [ChildPolicy = pxrInternal"
              "__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]",
        v21 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "IsValid()", 0),
        (result & 1) != 0))
  {
    result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2);
    if ((result & 1) == 0)
    {
      v7 = (uint64_t **)sub_20C0B3C54(a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v7, (uint64_t *)&v17);
      v8 = sub_20BEB560C((uint64_t)&v17, a1);
      result = (uint64_t)v18;
      if (v18)
      {
        v9 = (unsigned int *)(v18 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
      }
      if (v8)
      {
        v12 = sub_20C0B3C54(a2);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v12, &v15);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v17);
        v13 = v17;
        v14 = *(char **)(a1 + 16);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
        sub_20BFD265C(&v17);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
        result = (uint64_t)sub_20BFD265C(&v15);
        if (v13 == v14)
          return (uint64_t)sub_20C0B3D2C(a2, (uint64_t)a3);
      }
    }
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  return result;
}

void sub_20C0B3C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20BFD1A18(&a9);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_Identity **sub_20C0B3C54(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1)
{
  char *v3;
  _QWORD *v4;
  _QWORD v5[2];
  char v6;
  _QWORD v7[4];
  char v8;
  int v9;

  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a1))
  {
    v7[0] = "sdf/declareHandles.h";
    v7[1] = "operator->";
    v7[2] = 96;
    v7[3] = "SpecType *pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>::"
            "operator->() const [T = pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec]";
    v8 = 0;
    v9 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAB4511 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v5);
    if (v6 >= 0)
      v4 = v5;
    else
      v4 = (_QWORD *)v5[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v7, (pxrInternal__aapl__pxrReserved__ *)"Dereferenced an invalid %s", v3, v4);
  }
  return a1;
}

void sub_20C0B3CF8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x20C0B3C70);
}

void sub_20C0B3D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20C0B3D2C@<X0>(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v3;
  uint64_t *Name;
  __int128 v5;
  int v7;
  int v8;

  v3 = sub_20C0B3C54(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v3, &v7);
  Name = pxrInternal__aapl__pxrReserved__::SdfPath::GetName((pxrInternal__aapl__pxrReserved__::SdfPath *)&v7);
  if (*((char *)Name + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, (void *)*Name, Name[1]);
  }
  else
  {
    v5 = *(_OWORD *)Name;
    *(_QWORD *)(a2 + 16) = Name[2];
    *(_OWORD *)a2 = v5;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v8);
  return sub_20BFD265C(&v7);
}

void sub_20C0B3DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsEqualTo(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_20BEB560C(a1, a2);
  if (result)
    return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
        && (*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Copy(uint64_t a1, __int128 *a2)
{
  _BOOL8 result;
  char v5;
  _QWORD v6[4];
  char v7;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  v6[0] = "sdf/children.cpp";
  v6[1] = "Copy";
  v6[2] = 162;
  v6[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolic"
          "y>::Copy(const std::vector<ValueType> &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__:"
          ":Sdf_VariantSetChildPolicy]";
  v7 = 0;
  v5 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v6, "IsValid()", 0);
  result = 0;
  if ((v5 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::SetChildren((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 16), a2);
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Insert(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, int a3)
{
  _BOOL8 result;
  char v7;
  _QWORD v8[4];
  char v9;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValid(a1))
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), a2, a3);
  v8[0] = "sdf/children.cpp";
  v8[1] = "Insert";
  v8[2] = 176;
  v8[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolic"
          "y>::Insert(const ValueType &, size_t, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sd"
          "f_VariantSetChildPolicy]";
  v9 = 0;
  v7 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v8, "IsValid()", 0);
  result = 0;
  if ((v7 & 1) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::InsertChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16), a2, a3);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Erase(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::TfToken *v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int v5;
  char v6;
  _QWORD v7[4];
  char v8;

  *(_BYTE *)(a1 + 64) = 0;
  if (pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValid(a1)
    || (v7[0] = "sdf/children.cpp",
        v7[1] = "Erase",
        v7[2] = 190,
        v7[3] = "BOOL pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChil"
                "dPolicy>::Erase(const KeyType &, const std::string &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::S"
                "df_VariantSetChildPolicy]",
        v8 = 0,
        v6 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "IsValid()", 0),
        result = 0,
        (v6 & 1) != 0))
  {
    v2 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(v7);
    if ((v7[0] & 0xFFFFFFFFFFFFFFF8) == 0)
      pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v2);
    result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::RemoveChild((uint64_t *)a1, (pxrInternal__aapl__pxrReserved__::TfToken *)(a1 + 16));
    if ((v7[0] & 7) != 0)
    {
      v4 = (unsigned int *)(v7[0] & 0xFFFFFFFFFFFFFFF8);
      do
        v5 = __ldxr(v4);
      while (__stlxr(v5 - 2, v4));
    }
  }
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__12Sdf_ChildrenINS_25Sdf_VariantSetChildPolicyEE5EraseERKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEESB_(a1);
}

void sub_20C0B4038(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CreateSpec(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;

  v9 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(v8) + 14))
      v10 = *(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CreateSpec(v10, a2, a3, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_AttributeChildPolicyEE10CreateSpecERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Spec;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  void **v17;
  const char *Text;
  void **v19;
  unsigned int *v21;
  void *__p[2];
  char v23;
  char v24[8];
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;

  if ((_DWORD)a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
    Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if ((Spec & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v25);
      sub_20C0B438C((unsigned int **)__p);
      v9 = *(unsigned int **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v21 = v9;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          v21 = v10;
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, 1);
      if ((v21 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v14 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_20BFD265C(&v25);
    }
    else
    {
      v25 = "sdf/childrenUtils.cpp";
      v26 = "CreateSpec";
      v27 = 101;
      v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attrib"
            "uteChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl"
            "__pxrReserved__::Sdf_AttributeChildPolicy]";
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C524D70, a3, (uint64_t)__p);
      v16 = v23;
      v17 = (void **)__p[0];
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v19 = __p;
      if (v16 < 0)
        v19 = v17;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v19, Text);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  }
  else
  {
    v25 = "sdf/childrenUtils.cpp";
    v26 = "CreateSpec";
    v27 = 90;
    v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attribut"
          "eChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__px"
          "rReserved__::Sdf_AttributeChildPolicy]";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_AttributeChildPolicyEE10CreateSpecEPNS_8SdfLayerERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

void sub_20C0B42F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a18);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_20C0B438C@<X0>(unsigned int **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result)
    result = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v3 = (unsigned int *)*((_QWORD *)result + 5);
  *a1 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 = v4;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t *EmptyString;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName((size_t *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16));
  EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName((size_t *)EmptyString);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_AttributeChildPolicyEE11IsValidNameERKNS_7TfTokenE(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName(size_t *a1)
{
  int v1;
  void *__p;
  char v4;
  unsigned __int8 v5;

  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidNamespacedIdentifier(a1, (uint64_t)&__p);
  v1 = v5;
  if (v5 && v4 < 0)
    operator delete(__p);
  return v1 == 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CanRename@<X0>(uint64_t **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  char v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  void *v13;
  _QWORD *result;
  const char *Text;
  const char *v16;
  char *v17;
  unint64_t v18;
  const char *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  int HasSpec;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  void *v27;
  void *__p[2];
  uint64_t v29;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
  v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v6);
  v8 = __p[1];
  if (__p[1])
  {
    v9 = (unsigned int *)((char *)__p[1] + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
  }
  if ((v7 & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName(a2))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      sub_20C0B476C((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a2, (int *)&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      v12 = v27;
      v13 = __p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      if (v12 == v13)
        goto LABEL_9;
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v27))
        goto LABEL_21;
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
      HasSpec = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v22 = __p[1];
      if (__p[1])
      {
        v23 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v24 = __ldxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
      }
      if (!HasSpec)
      {
LABEL_9:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 24) = 0;
      }
      else
      {
LABEL_21:
        sub_20BDDC0E4(__p, "An object with that name already exists");
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v27);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v18 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v16, v17, Text, v19);
      if (SHIBYTE(v29) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, __p[0], (unint64_t)__p[1]);
        v26 = SHIBYTE(v29);
        *(_BYTE *)(a3 + 24) = 1;
        if (v26 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    return sub_20BFD265C(&v27);
  }
  else
  {
    result = sub_20BDDC0E4(__p, "Layer is not editable");
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v29;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

void sub_20C0B46CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0B476C@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  int v6;
  int v7;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v6);
  sub_20C0AE7F4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20C0B47CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::Rename(pxrInternal__aapl__pxrReserved__::SdfSpec *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  void ***v14;
  uint64_t v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  const char *Text;
  const char *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 i;
  uint64_t v47;
  const char *v48;
  char v49;
  int v50;
  _DWORD v51[3];
  uint64_t v52[3];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &v50);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName(a2))
  {
    sub_20C0B476C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, a2, (int *)&v45);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v45))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &i);
      v4 = v45;
      v5 = i;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 1);
      sub_20BFD265C(&i);
      if (v4 == v5)
      {
        v6 = 1;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v43);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v41);
        sub_20C0B438C((unsigned int **)&v40);
        v11 = sub_20BFCF650(&v43);
        i = 0uLL;
        v47 = 0;
        v12 = sub_20C0A683C((uint64_t *)(v11 + 112));
        (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v12 + 136))(v52, v12, &v41, &v40);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)v52))
        {
          if ((v52[1] & 4) != 0)
            v13 = (uint64_t **)(*(uint64_t (**)(uint64_t *))((v52[1] & 0xFFFFFFFFFFFFFFF8) + 168))(v52);
          else
            v13 = (uint64_t **)v52[0];
        }
        else
        {
          v13 = (uint64_t **)&i;
        }
        v38 = 0uLL;
        v39 = 0;
        sub_20BFE538C(&v38, *v13, v13[1], v13[1] - *v13);
        v14 = (void ***)sub_20BF4C2D8((uint64_t)v52);
        v52[0] = (uint64_t)&i;
        sub_20BEEB2B8(v14);
        *(_OWORD *)v52 = v38;
        while (v52[0] != v52[1])
        {
          if ((*(_QWORD *)sub_20C023B14(v52, v15, v16) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
          {
            *(_QWORD *)&i = "sdf/childrenUtils.cpp";
            *((_QWORD *)&i + 1) = "Rename";
            v47 = 726;
            v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "AttributeChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy ="
                  " pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy]";
            v49 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to %s because a sibling with that name already exists", Text, v24);
            v6 = 0;
            goto LABEL_38;
          }
          sub_20C023C08(v52);
        }
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
        v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
        v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
        if ((v6 & 1) != 0)
        {
          for (i = v38; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
          {
            v20 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v18, v19);
            if ((*v20 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50) & 0xFFFFFFFFFFFFFFF8))
            {
              v25 = *(_QWORD *)a2;
              if ((*(_QWORD *)a2 & 7) != 0)
              {
                v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
                do
                  v27 = __ldxr(v26);
                while (__stxr(v27 + 2, v26));
                if ((v27 & 1) == 0)
                  v25 &= 0xFFFFFFFFFFFFFFF8;
              }
              v28 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v21, v22);
              if ((*v28 & 7) != 0)
              {
                v29 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
                do
                  v30 = __ldxr(v29);
                while (__stlxr(v30 - 2, v29));
              }
              *v28 = v25;
              break;
            }
          }
          v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
          sub_20C0B4E30(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (uint64_t **)&v38);
        }
        sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
LABEL_38:
        *(_QWORD *)&i = &v38;
        sub_20BEEB2B8((void ***)&i);
        if ((v40 & 7) != 0)
        {
          v32 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
        sub_20BFD265C(&v41);
        v34 = v44;
        if (v44)
        {
          v35 = (unsigned int *)(v44 + 8);
          do
          {
            v36 = __ldxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    sub_20BFD265C(&v45);
  }
  else
  {
    *(_QWORD *)&i = "sdf/childrenUtils.cpp";
    *((_QWORD *)&i + 1) = "Rename";
    v47 = 699;
    v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attribut"
          "eChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy = pxrInternal__aa"
          "pl__pxrReserved__::Sdf_AttributeChildPolicy]";
    v49 = 0;
    v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v7, v9);
    v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v51);
  sub_20BFD265C(&v50);
  return v6;
}

uint64_t sub_20C0B4D3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9 = sub_20C0A683C((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t ***__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 136))(&v11, v9, a2, a3);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v11))
  {
    if ((v12 & 4) != 0)
      a4 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(&v11);
    else
      a4 = v11;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_20BFE538C(a5, *a4, a4[1], a4[1] - *a4);
  return sub_20BF4C2D8((uint64_t)&v11);
}

void sub_20C0B4E14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0B4E30(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t **a4)
{
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v8[1] = &off_24C526790;
  sub_20C030230(v8, a4);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(a1, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_20BF4C2D8((uint64_t)v8);
}

void sub_20C0B4EC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  uint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  void ***v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t *v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v41;
  uint64_t **v42;
  uint64_t v43;
  char *v44;
  BOOL v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v50;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v51;
  uint64_t v52;
  char *v53;
  _BOOL4 HasPrefix;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v55;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  const pxrInternal__aapl__pxrReserved__::TfToken *v64;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v65;
  uint64_t v66;
  char *v67;
  _BOOL8 v68;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v69;
  uint64_t v70;
  char *v71;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v72;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v73;
  int v74;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  void ***v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *m;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v87;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v88;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v89;
  uint64_t v90;
  char *v91;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v92;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v100;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v101;
  unsigned int *v102;
  unsigned int v103;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  __int128 k;
  __int128 j;
  char v115[8];
  void *__p[2];
  uint64_t v117;
  const char *v118;
  char v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  uint64_t v127;
  __int128 i;
  uint64_t v129;
  void **v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C((unsigned int **)&v125);
  v123 = 0uLL;
  v124 = 0;
  __p[1] = 0;
  v117 = 0;
  __p[0] = &__p[1];
  for (i = *a3; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C0D7E04(&i))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D7D88((uint64_t *)&i, v6, v7);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8) & 1) != 0)
      goto LABEL_14;
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D7D88((uint64_t *)&i, v9, v10);
    sub_20C0AEB90(v11, (uint64_t)&v126);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v120);
    if (SHIBYTE(v127) < 0)
      operator delete((void *)v126);
    sub_20C0D7FB4((uint64_t **)__p, (uint64_t *)&v120, (uint64_t *)&v120);
    if ((v9 & 1) != 0)
      goto LABEL_9;
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D7D88((uint64_t *)&i, v9, v10);
    v13 = sub_20C0AEAB8(v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v126);
    v14 = v126;
    v15 = *(_QWORD *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v126 + 1);
    sub_20BFD265C(&v126);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_20BFD265C(&j);
    if (v14 != v15)
LABEL_9:
      v16 = 1;
    else
      v16 = 0;
    if ((v120 & 7) != 0)
    {
      v17 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    if ((v16 & 1) != 0)
    {
LABEL_14:
      v19 = (unsigned int **)sub_20C0D7D88((uint64_t *)&i, v9, v10);
      v20 = *((_QWORD *)&v123 + 1);
      if (*((_QWORD *)&v123 + 1) >= v124)
      {
        v23 = sub_20C0D7E80((unsigned int ***)&v123, v19);
      }
      else
      {
        v21 = *v19;
        **((_QWORD **)&v123 + 1) = *v19;
        if (v21)
        {
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        v23 = (char *)(v20 + 8);
      }
      *((_QWORD *)&v123 + 1) = v23;
    }
  }
  sub_20BF2B200((uint64_t)__p, (_QWORD *)__p[1]);
  v24 = sub_20BFCF650(a1);
  __p[0] = 0;
  __p[1] = 0;
  v117 = 0;
  v25 = sub_20C0A683C((uint64_t *)(v24 + 112));
  (*(void (**)(__int128 *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v25 + 136))(&i, v25, a2, &v125);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0)
      v26 = (uint64_t **)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    else
      v26 = (uint64_t **)i;
  }
  else
  {
    v26 = (uint64_t **)__p;
  }
  v126 = 0uLL;
  v127 = 0;
  sub_20BFE538C(&v126, *v26, v26[1], v26[1] - *v26);
  v27 = (void ***)sub_20BF4C2D8((uint64_t)&i);
  *(_QWORD *)&i = __p;
  sub_20BEEB2B8(v27);
  *((_QWORD *)&i + 1) = 0;
  v129 = 0;
  *(_QWORD *)&i = (char *)&i + 8;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  sub_20BFC9A6C((char **)&v120, (uint64_t)(*((_QWORD *)&v123 + 1) - v123) >> 3);
  for (j = v123; (_QWORD)j != *((_QWORD *)&j + 1); sub_20C0B5CDC(&j))
  {
    v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B5C60((uint64_t *)&j, v28, v29);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v30))
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 181;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attri"
             "buteChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPoli"
             "cy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_103;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B5C60((uint64_t *)&j, v31, v32);
    sub_20C0AEB90(v33, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v105);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    v34 = v121;
    if ((unint64_t)v121 >= v122)
    {
      v38 = sub_20BFCA068((char **)&v120, (uint64_t *)&v105);
    }
    else
    {
      v35 = v105;
      *v121 = v105;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 2, v36));
        if ((v37 & 1) == 0)
          *v34 &= 0xFFFFFFFFFFFFFFF8;
      }
      v38 = (char *)(v34 + 1);
    }
    v121 = (uint64_t *)v38;
    sub_20C0D7FB4((uint64_t **)&i, (uint64_t *)&v105, (uint64_t *)&v105);
    if ((v39 & 1) == 0)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 188;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attri"
             "buteChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPoli"
             "cy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
LABEL_100:
      if ((v105 & 7) != 0)
      {
        v98 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
LABEL_103:
      v68 = 0;
      goto LABEL_108;
    }
    v41 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B5C60((uint64_t *)&j, v39, v40);
    v42 = (uint64_t **)sub_20C0AEAB8(v41);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v42, (uint64_t *)__p);
    v45 = sub_20BEB560C((uint64_t)__p, (uint64_t)a1);
    v46 = __p[1];
    if (__p[1])
    {
      v47 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v48 = __ldxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
        (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
    }
    if (!v45)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 193;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attri"
             "buteChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPoli"
             "cy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_100;
    }
    v50 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B5C60((uint64_t *)&j, v43, v44);
    v51 = sub_20C0AEAB8(v50);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v51, &v130);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v130, __p);
    if (*(void **)a2 == __p[0])
    {
      HasPrefix = 0;
    }
    else
    {
      v55 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B5C60((uint64_t *)&j, v52, v53);
      v56 = sub_20C0AEAB8(v55);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v56, &k);
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
      sub_20BFD265C(&k);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v130 + 1);
    sub_20BFD265C(&v130);
    if (HasPrefix)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 203;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attri"
             "buteChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPoli"
             "cy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      goto LABEL_100;
    }
    if ((v105 & 7) != 0)
    {
      v57 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
  *(_OWORD *)__p = v126;
  while (__p[0] != __p[1])
  {
    v61 = (uint64_t *)sub_20C023B14((uint64_t *)__p, v59, v60);
    if ((_QWORD *)((char *)&i + 8) == sub_20C0D8030((uint64_t)&i, v61))
    {
      v64 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B14((uint64_t *)__p, v62, v63);
      sub_20C0AE7F4(a2, v64, (int *)&j);
      v65 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v65, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_20BFD265C(&j);
    }
    sub_20C023C08(__p);
  }
  sub_20C0D80BC((uint64_t)&j, (uint64_t *)v126, *((uint64_t **)&v126 + 1));
  for (k = v123; ; sub_20C0B5CDC(&k))
  {
    v68 = k == *((_QWORD *)&k + 1);
    if ((_QWORD)k == *((_QWORD *)&k + 1))
      break;
    v69 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B5C60((uint64_t *)&k, v66, v67);
    sub_20C0AEB90(v69, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v112);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    sub_20C0AE7F4(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v112, &v110);
    v72 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B5C60((uint64_t *)&k, v70, v71);
    v73 = sub_20C0AEAB8(v72);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v73, __p);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    if (v109 == *(_QWORD *)a2)
    {
      v74 = 10;
    }
    else
    {
      if ((_QWORD *)((char *)&j + 8) != sub_20C0D8030((uint64_t)&j, &v112))
      {
        v75 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v75, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
      }
      sub_20C0B438C((unsigned int **)&v108);
      v76 = sub_20BFCF650(a1);
      __p[0] = 0;
      __p[1] = 0;
      v117 = 0;
      v77 = sub_20C0A683C((uint64_t *)(v76 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v77 + 136))(&v130, v77, &v109, &v108);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v130))
      {
        if ((v131 & 4) != 0)
          v78 = (uint64_t **)(*(uint64_t (**)(void ***))((v131 & 0xFFFFFFFFFFFFFFF8) + 168))(&v130);
        else
          v78 = (uint64_t **)v130;
      }
      else
      {
        v78 = (uint64_t **)__p;
      }
      v105 = 0;
      v106 = 0;
      v107 = 0;
      sub_20BFE538C(&v105, *v78, v78[1], v78[1] - *v78);
      v79 = (void ***)sub_20BF4C2D8((uint64_t)&v130);
      v130 = __p;
      sub_20BEEB2B8(v79);
      v80 = (uint64_t *)v105;
      if ((uint64_t *)v105 != v106)
      {
        while ((*v80 & 0xFFFFFFFFFFFFFFF8) != (v112 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v80 == v106)
          {
            v80 = v106;
            break;
          }
        }
      }
      if (v80 == v106)
      {
        __p[0] = "sdf/childrenUtils.cpp";
        __p[1] = "SetChildren";
        v117 = 254;
        v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Att"
               "ributeChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename Child"
               "Policy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy]";
        v119 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        v74 = 1;
      }
      else
      {
        sub_20C0D813C(v80 + 1, v106, v80);
        for (m = v106; m != v81; --m)
        {
          v84 = *(m - 1);
          v83 = v84;
          if ((v84 & 7) != 0)
          {
            v85 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
            do
              v86 = __ldxr(v85);
            while (__stlxr(v86 - 2, v85));
          }
        }
        v106 = v81;
        if ((uint64_t *)v105 == v81)
        {
          v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v88, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108);
        }
        else
        {
          v87 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v87, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108, (uint64_t **)&v105);
        }
        v89 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        v92 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B5C60((uint64_t *)&k, v90, v91);
        v93 = sub_20C0AEAB8(v92);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v93, __p);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v89, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_20BFD265C(__p);
        v74 = 0;
      }
      __p[0] = &v105;
      sub_20BEEB2B8((void ***)__p);
      if ((v108 & 7) != 0)
      {
        v94 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
    sub_20BFD265C(&v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v111);
    sub_20BFD265C(&v110);
    if ((v112 & 7) != 0)
    {
      v96 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
      do
        v97 = __ldxr(v96);
      while (__stlxr(v97 - 2, v96));
    }
    if (v74 != 10 && v74)
      goto LABEL_107;
  }
  if ((uint64_t *)v120 == v121)
  {
    v101 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v101, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125);
  }
  else
  {
    v100 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    sub_20C0B4E30(v100, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125, (uint64_t **)&v120);
  }
LABEL_107:
  sub_20BF2B200((uint64_t)&j, *((_QWORD **)&j + 1));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
LABEL_108:
  __p[0] = &v120;
  sub_20BEEB2B8((void ***)__p);
  sub_20BF2B200((uint64_t)&i, *((_QWORD **)&i + 1));
  __p[0] = &v126;
  sub_20BEEB2B8((void ***)__p);
  __p[0] = &v123;
  sub_20BFE69E4((void ***)__p);
  if ((v125 & 7) != 0)
  {
    v102 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  return v68;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_AttributeChildPolicyEE11SetChildrenERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__16vectorINS_9SdfHandleINS_16SdfAttributeSpecEEENSB_9allocatorISF_EEEE(a1, a2, a3);
}

void sub_20C0B5920(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;

  if ((a10 & 7) != 0)
  {
    v39 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  __p = &a34;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BF2B200(v37 - 144, *(_QWORD **)(v37 - 136));
  __p = (uint64_t *)(v37 - 176);
  sub_20BEEB2B8((void ***)&__p);
  __p = (uint64_t *)&a37;
  sub_20BFE69E4((void ***)&__p);
  v41 = *(_QWORD *)(v37 - 184);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C0B5C60(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfHand"
            "le<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>>>::operator*() [T = std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0B5CD4()
{
  JUMPOUT(0x20C0B5C84);
}

_QWORD *sub_20C0B5CDC(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>>>::operator++() [T = std::vector<pxrInt"
            "ernal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

_QWORD *sub_20C0B5D58(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  sub_20C0D813C(a2 + 1, *(_QWORD **)(a1 + 8), a2);
  for (i = *(_QWORD *)(a1 + 8); i != v4; i -= 8)
  {
    v7 = *(_QWORD *)(i - 8);
    v6 = v7;
    if ((v7 & 7) != 0)
    {
      v8 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
      do
        v9 = __ldxr(v8);
      while (__stlxr(v9 - 2, v8));
    }
  }
  *(_QWORD *)(a1 + 8) = v4;
  return a2;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t **v8;
  BOOL v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  _BOOL4 HasPrefix;
  uint64_t v23;
  uint64_t v24;
  void **p_p;
  void ***v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  _QWORD *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  const char *Text;
  void ***v38;
  void **v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  int v54;
  void **v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  void *__p;
  const char *v62;
  uint64_t v63;
  const char *v64;
  char v65;
  unsigned int *v66[2];
  void **v67;
  void **v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C(v66);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 290;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attribut"
          "eChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, i"
          "nt) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  v8 = (uint64_t **)sub_20C0AEAB8(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&__p);
  v9 = sub_20BEB560C((uint64_t)&__p, (uint64_t)a1);
  v10 = v62;
  if (v62)
  {
    v11 = (unsigned int *)(v62 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!v9)
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 295;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attribut"
          "eChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, i"
          "nt) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_12;
  }
  v14 = sub_20C0AEAB8(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v55);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, &__p);
  v15 = __p;
  v16 = *(void **)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
  sub_20BFD265C(&v55);
  if (v15 == v16)
  {
    v17 = 1;
  }
  else
  {
    sub_20C0AEB90(a3, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v60);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    sub_20C0AE7F4(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v60, &v58);
    v21 = sub_20C0AEAB8(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v21, &__p);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (HasPrefix)
    {
      __p = "sdf/childrenUtils.cpp";
      v62 = "InsertChild";
      v63 = 312;
      v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attrib"
            "uteChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType "
            "&, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy]";
      v65 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      v17 = 0;
    }
    else
    {
      v23 = sub_20BFCF650(a1);
      __p = 0;
      v62 = 0;
      v63 = 0;
      v24 = sub_20C0A683C((uint64_t *)(v23 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v24 + 136))(&v67, v24, a2, v66);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v67))
      {
        if ((v68 & 4) != 0)
          p_p = (void **)(*(uint64_t (**)(void ***))(((unint64_t)v68 & 0xFFFFFFFFFFFFFFF8) + 168))(&v67);
        else
          p_p = v67;
      }
      else
      {
        p_p = &__p;
      }
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_20BFE538C(&v55, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
      v26 = (void ***)sub_20BF4C2D8((uint64_t)&v67);
      v67 = &__p;
      sub_20BEEB2B8(v26);
      v29 = (unint64_t)((char *)v56 - (char *)v55) >> 3;
      if (a4 != -1)
        LODWORD(v29) = a4;
      v30 = (int)v29;
      if ((int)v29 <= (unint64_t)(((char *)v56 - (char *)v55) >> 3))
      {
        v67 = v55;
        v68 = (void **)v56;
        while (v67 != v68)
        {
          v32 = (_QWORD *)sub_20C023B14((uint64_t *)&v67, v27, v28);
          if ((*v32 & 0xFFFFFFFFFFFFFFF8) == (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            __p = "sdf/childrenUtils.cpp";
            v62 = "InsertChild";
            v63 = 334;
            v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "AttributeChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy"
                  "::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy]";
            v65 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_37;
          }
          sub_20C023C08(&v67);
        }
        v33 = sub_20C0AEAB8(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v33, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v53);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
        sub_20C0B438C((unsigned int **)&v52);
        v34 = sub_20BFCF650(a1);
        __p = 0;
        v62 = 0;
        v63 = 0;
        v35 = sub_20C0A683C((uint64_t *)(v34 + 112));
        (*(void (**)(void ***__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v35 + 136))(&v70, v35, &v53, &v52);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v70))
        {
          if ((v71 & 4) != 0)
            v36 = (void **)(*(uint64_t (**)(void ***))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(&v70);
          else
            v36 = v70;
        }
        else
        {
          v36 = &__p;
        }
        v67 = 0;
        v68 = 0;
        v69 = 0;
        sub_20BFE538C(&v67, (uint64_t *)*v36, (uint64_t *)v36[1], ((_BYTE *)v36[1] - (_BYTE *)*v36) >> 3);
        v38 = (void ***)sub_20BF4C2D8((uint64_t)&v70);
        v70 = &__p;
        sub_20BEEB2B8(v38);
        v39 = v67;
        if (v67 != v68)
        {
          while (((unint64_t)*v39 & 0xFFFFFFFFFFFFFFF8) != (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v39 == v68)
            {
              v39 = v68;
              break;
            }
          }
        }
        v17 = v39 != v68;
        if (v39 == v68)
        {
          __p = "sdf/childrenUtils.cpp";
          v62 = "InsertChild";
          v63 = 352;
          v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_At"
                "tributeChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Va"
                "lueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy]";
          v65 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
          sub_20C0B5D58((uint64_t)&v67, v39);
          if (v67 == v68)
          {
            v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52);
          }
          else
          {
            v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52, (uint64_t **)&v67);
          }
          v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          v43 = sub_20C0AEAB8(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v43, &v70);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
          sub_20BFD1A18(&v70);
          sub_20C0B66C4(&v55, (char *)&v55[v30], (char *)&v60);
          v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v44, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v66, (uint64_t **)&v55);
          v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v70);
          IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v70);
          if ((IsDormant & 1) == 0)
          {
            Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v70);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v70);
          sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
        }
        __p = &v67;
        sub_20BEEB2B8((void ***)&__p);
        if ((v52 & 7) != 0)
        {
          v48 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
        sub_20BFD265C(&v53);
      }
      else
      {
        __p = "sdf/childrenUtils.cpp";
        v62 = "InsertChild";
        v63 = 326;
        v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attr"
              "ibuteChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueT"
              "ype &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy]";
        v65 = 0;
        v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v31, v30);
LABEL_37:
        v17 = 0;
      }
      __p = &v55;
      sub_20BEEB2B8((void ***)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
    sub_20BFD265C(&v58);
    if ((v60 & 7) != 0)
    {
      v50 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
  }
LABEL_13:
  if (((uint64_t)v66[0] & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v66[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  return v17;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_AttributeChildPolicyEE11InsertChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_16SdfAttributeSpecEEEi(a1, a2, a3, a4);
}

void sub_20C0B64A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;

  __p = (__int16 *)(v30 - 112);
  sub_20BEEB2B8((void ***)&__p);
  if ((a11 & 7) != 0)
  {
    v32 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  sub_20BFD1A18(&a12);
  __p = &a14;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a19);
  if ((a20 & 7) != 0)
  {
    v34 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if ((a29 & 7) != 0)
  {
    v36 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  _Unwind_Resume(a1);
}

char *sub_20C0B66C4(_QWORD *a1, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  int64x2_t v32;
  char *v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  char *v38;
  __int128 v39;
  char *v40;
  _QWORD *v41;
  char *v42;
  int64x2_t v43;
  char *v44;
  uint64_t v45;

  v4 = a2;
  v6 = a1[1];
  v8 = (uint64_t)(a1 + 2);
  v7 = a1[2];
  if (v6 >= v7)
  {
    v9 = (char *)*a1;
    v10 = ((uint64_t)(v6 - *a1) >> 3) + 1;
    if (v10 >> 61)
      sub_20BDDF694();
    v11 = a2 - v9;
    v12 = (a2 - v9) >> 3;
    v13 = v7 - (_QWORD)v9;
    if (v13 >> 2 > v10)
      v10 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v10;
    v41 = a1 + 2;
    if (v14)
    {
      v15 = (char *)sub_20BDDF6A8((uint64_t)(a1 + 2), v14);
      v17 = v16;
    }
    else
    {
      v15 = 0;
      v17 = 0;
    }
    v21 = &v15[8 * v12];
    v38 = v15;
    *(_QWORD *)&v39 = v21;
    *((_QWORD *)&v39 + 1) = v21;
    v40 = &v15[8 * v17];
    if (v12 == v17)
    {
      if (v11 < 1)
      {
        if (v9 == v4)
          v23 = 1;
        else
          v23 = v11 >> 2;
        v45 = v8;
        v24 = (char *)sub_20BDDF6A8(v8, v23);
        v26 = (_QWORD *)v39;
        v27 = *((_QWORD *)&v39 + 1) - v39;
        if (*((_QWORD *)&v39 + 1) == (_QWORD)v39)
        {
          v32 = vdupq_n_s64(v39);
          v29 = (unint64_t)&v24[8 * (v23 >> 2)];
        }
        else
        {
          v28 = v27 >> 3;
          v29 = (unint64_t)&v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
          v30 = 8 * v28;
          v31 = &v24[8 * (v23 >> 2)];
          do
          {
            *(_QWORD *)v31 = *v26;
            v31 += 8;
            *v26++ = 0;
            v30 -= 8;
          }
          while (v30);
          v32 = (int64x2_t)v39;
        }
        v33 = v40;
        v42 = v38;
        v38 = v24;
        *(_QWORD *)&v39 = &v24[8 * (v23 >> 2)];
        v43 = v32;
        *((_QWORD *)&v39 + 1) = v29;
        v40 = &v24[8 * v25];
        v44 = v33;
        sub_20BF1EE98((uint64_t)&v42);
        v21 = (char *)*((_QWORD *)&v39 + 1);
      }
      else
      {
        if (v12 >= -1)
          v22 = v12 + 1;
        else
          v22 = v12 + 2;
        sub_20C0D813C(&v15[8 * v12], v21, &v21[-8 * (v22 >> 1)]);
        *(_QWORD *)&v39 = v39 - 8 * (v22 >> 1);
        *((_QWORD *)&v39 + 1) = v21;
      }
    }
    v34 = *(_QWORD *)a3;
    *(_QWORD *)v21 = *(_QWORD *)a3;
    if ((v34 & 7) != 0)
    {
      v35 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 2, v35));
      if ((v36 & 1) == 0)
        *(_QWORD *)v21 &= 0xFFFFFFFFFFFFFFF8;
    }
    *((_QWORD *)&v39 + 1) += 8;
    v4 = (char *)sub_20C0D81DC(a1, &v38, v4);
    sub_20BF1EE98((uint64_t)&v38);
  }
  else if (a2 == (char *)v6)
  {
    v18 = *(_QWORD *)a3;
    *(_QWORD *)a2 = *(_QWORD *)a3;
    if ((v18 & 7) != 0)
    {
      v19 = (unsigned int *)(v18 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 2, v19));
      if ((v20 & 1) == 0)
        *(_QWORD *)a2 &= 0xFFFFFFFFFFFFFFF8;
    }
    a1[1] = a2 + 8;
  }
  else
  {
    sub_20C0D8194((uint64_t)a1, a2, v6, (uint64_t)(a2 + 8));
    if (v4 <= a3)
      a3 += 8 * (a1[1] > (unint64_t)a3);
    sub_20BF32220(v4, a3);
  }
  return v4;
}

void sub_20C0B6948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BF1EE98((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  void ***v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v29;
  void **v30[3];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C((unsigned int **)&v34);
  v4 = sub_20BFCF650(a1);
  memset(v30, 0, sizeof(v30));
  v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v5 + 136))(&v37, v5, a2, &v34);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v37))
  {
    if ((v38 & 4) != 0)
      v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(&v37);
    else
      v6 = (uint64_t **)v37;
  }
  else
  {
    v6 = (uint64_t **)v30;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_20BFE538C(&v31, *v6, v6[1], v6[1] - *v6);
  v7 = (void ***)sub_20BF4C2D8((uint64_t)&v37);
  v37 = (unint64_t)v30;
  sub_20BEEB2B8(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v30);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v37);
  v8 = (uint64_t *)v31;
  v9 = v37;
  if ((uint64_t *)v31 == v32)
  {
LABEL_9:
    v11 = 0;
  }
  else
  {
    v10 = -v31;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v37 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v32)
        goto LABEL_9;
    }
    sub_20C0AE7F4(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v37, &v35);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    sub_20C0D813C((_QWORD *)(8 - v10), v32, (_QWORD *)-v10);
    for (i = v32; i != v13; --i)
    {
      v16 = *(i - 1);
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    v32 = v13;
    if ((uint64_t *)v31 == v13)
    {
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v20, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v19, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (uint64_t **)&v31);
    }
    v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v21, a2, &v29);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v29);
    if ((IsDormant & 1) == 0)
    {
      Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v29);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
    v11 = 1;
    v9 = v37;
  }
  if ((v9 & 7) != 0)
  {
    v24 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20BFD2190(v30);
  v30[0] = (void **)&v31;
  sub_20BEEB2B8(v30);
  if ((v34 & 7) != 0)
  {
    v26 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_AttributeChildPolicyEE11RemoveChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEE(a1, a2);
}

void sub_20C0B6BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void **p_p;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void ***v21;
  void ***v22;
  char *v23;
  uint64_t v24;
  _BOOL4 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *i;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  char *v34;
  char *j;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  uint64_t IsDormant;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v46;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  unsigned int *v65[2];
  void **v66;
  uint64_t v67;
  uint64_t v68;
  void ***v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C(v65);
  sub_20C0B7424(a2, a4, (int *)&v64);
  v10 = sub_20C0AEAB8(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v61);
  v11 = v64;
  v12 = v61;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
  sub_20BFD265C(&v61);
  if (a5 == -2 && v11 == v12)
    goto LABEL_65;
  v13 = sub_20BFCF650(a1);
  __p = 0;
  v59 = 0;
  v60 = 0;
  v14 = sub_20C0A683C((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::TfToken *, unsigned int **))(*(_QWORD *)v14 + 136))(&v66, v14, a2, v65);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v66))
  {
    if ((v67 & 4) != 0)
      p_p = (void **)(*(uint64_t (**)(void ***))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(&v66);
    else
      p_p = v66;
  }
  else
  {
    p_p = &__p;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  sub_20BFE538C(&v61, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
  sub_20BF4C2D8((uint64_t)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  sub_20C0AEB90(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v57);
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
  v16 = sub_20C0AEAB8(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (a5 == -2 && v56 == *(_QWORD *)a2)
  {
    if (v61 == v62)
    {
      v17 = v61;
    }
    else
    {
      v17 = v61;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v62)
        {
          v17 = v62;
          break;
        }
      }
    }
    v18 = (unint64_t)((char *)v17 - (char *)v61) >> 3;
  }
  else if (v62 - v61 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v62 - v61;
  }
  sub_20C0B438C((unsigned int **)&v55);
  v19 = sub_20BFCF650(a1);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v20 = sub_20C0A683C((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v20 + 136))(&v69, v20, &v56, &v55);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v69))
  {
    if ((v70 & 4) != 0)
      v21 = (void ***)(*(uint64_t (**)(void ****))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(&v69);
    else
      v21 = v69;
  }
  else
  {
    v21 = &v66;
  }
  __p = 0;
  v59 = 0;
  v60 = 0;
  sub_20BFE538C(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  v22 = (void ***)sub_20BF4C2D8((uint64_t)&v69);
  v69 = &v66;
  sub_20BEEB2B8(v22);
  v23 = (char *)__p;
  if (__p != v59)
  {
    while ((*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v59)
      {
        v23 = v59;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  if (v56 == *(_QWORD *)a2)
  {
    v24 = v23 - (_BYTE *)__p;
    if ((v57 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8)
      && ((_DWORD)v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == (_DWORD)v18))
    {
      goto LABEL_58;
    }
    v26 = (int)v18 > v24 >> 3;
    v27 = v61;
    if (v61 != v62)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v62)
        {
          v27 = v62;
          break;
        }
      }
    }
    sub_20C0D813C(v27 + 1, v62, v27);
    LODWORD(v18) = v18 - v26;
    for (i = v62; i != v28; --i)
    {
      v31 = *(i - 1);
      v30 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
    }
    v62 = v28;
  }
  else
  {
    sub_20C0D813C((_QWORD *)v23 + 1, v59, v23);
    for (j = v59; j != v34; j -= 8)
    {
      v37 = *((_QWORD *)j - 1);
      v36 = v37;
      if ((v37 & 7) != 0)
      {
        v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
    }
    v59 = v34;
    if (__p == v34)
    {
      v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55);
      v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v69);
      IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v69);
      if ((IsDormant & 1) == 0)
      {
        Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v69);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v69);
    }
    else
    {
      v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55, (uint64_t **)&__p);
    }
  }
  v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v46 = sub_20C0AEAB8(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v46, &v69);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
  sub_20BFD265C(&v69);
  sub_20C0B66C4(&v61, (char *)&v61[(int)v18], (char *)a4);
  v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  sub_20C0B4E30(v47, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v65, &v61);
LABEL_58:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  if ((v55 & 7) != 0)
  {
    v48 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if ((v57 & 7) != 0)
  {
    v50 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  __p = &v61;
  sub_20BEEB2B8((void ***)&__p);
LABEL_65:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
  sub_20BFD265C(&v64);
  if (((uint64_t)v65[0] & 7) != 0)
  {
    v52 = (unsigned int *)((unint64_t)v65[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  return 1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_AttributeChildPolicyEE30MoveChildForBatchNamespaceEditERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_16SdfAttributeSpecEEERKNS_7TfTokenEi(a1, a2, a3, a4, a5);
}

void sub_20C0B7280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  uint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_20BEEB2B8(&p_p);
  if ((a9 & 7) != 0)
  {
    v26 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  sub_20BFD1A18(&a10);
  if ((a11 & 7) != 0)
  {
    v28 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  __p = &a18;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a21);
  if ((a22 & 7) != 0)
  {
    v30 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  _Unwind_Resume(a1);
}

void sub_20C0B7424(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  uint64_t *EmptyString;

  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName((size_t *)EmptyString))
  {
    sub_20C0AE7F4(a1, a2, a3);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  const char *v13;
  _BOOL8 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t **v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  _BOOL4 HasPrefix;
  uint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  void **v39[3];
  unint64_t v40;
  int v41;
  uint64_t v42;
  void *__p;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  void ***v51;

  sub_20C0B438C((unsigned int **)&v50);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      v13 = "Layer is not editable";
      goto LABEL_7;
    }
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      v13 = "Object does not exist";
LABEL_7:
      MEMORY[0x212B929D0](a6, v13);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v18 = (uint64_t **)sub_20C0AEAB8(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v18, &v46);
  v19 = sub_20BEB560C((uint64_t)&v46, (uint64_t)a1);
  v20 = v47;
  if (v47)
  {
    v21 = (unsigned int *)(v47 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (!v19)
  {
    if (!a6)
      goto LABEL_8;
    v13 = "Cannot reparent to another layer";
    goto LABEL_7;
  }
  sub_20C0B7424(a2, a4, &v48);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v48))
  {
    if (!a6)
    {
LABEL_27:
      v14 = 0;
      goto LABEL_28;
    }
    v27 = "Invalid name";
LABEL_26:
    MEMORY[0x212B929D0](a6, v27);
    goto LABEL_27;
  }
  v24 = sub_20C0AEAB8(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  v25 = v46;
  v26 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (v25 != v26)
  {
    v28 = sub_20C0AEAB8(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v46);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_20BFD265C(&v46);
    if (!HasPrefix)
    {
      v30 = sub_20BFCF650(a1);
      __p = 0;
      v44 = 0;
      v45 = 0;
      sub_20C0B4D3C(v30, (uint64_t)a2, (uint64_t)&v50, (uint64_t **)&__p, &v46);
      v39[0] = &__p;
      sub_20BEEB2B8(v39);
      v31 = (unint64_t)(v47 - v46) >> 3;
      if (a5 != -1)
        LODWORD(v31) = a5;
      if ((_DWORD)v31 == -2 || (int)v31 <= (unint64_t)((v47 - v46) >> 3))
      {
        sub_20C0AEB90(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
        if (SHIBYTE(v45) < 0)
          operator delete(__p);
        v32 = sub_20C0AEAB8(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v41);
        sub_20BFD1A18(&__p);
        sub_20C0B438C((unsigned int **)&v40);
        v33 = sub_20BFCF650(a1);
        memset(v39, 0, sizeof(v39));
        sub_20C0B4D3C(v33, (uint64_t)&v41, (uint64_t)&v40, (uint64_t **)v39, &__p);
        v51 = v39;
        sub_20BEEB2B8((void ***)&v51);
        v34 = __p;
        if (__p != v44)
        {
          while ((*v34 & 0xFFFFFFFFFFFFFFF8) != (v42 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v34 == v44)
            {
              v34 = v44;
              break;
            }
          }
        }
        v14 = v34 != v44;
        if (a6 && v34 == v44)
          MEMORY[0x212B929D0](a6, "Coding error: Object is not in its parent's children");
        v39[0] = &__p;
        sub_20BEEB2B8(v39);
        if ((v40 & 7) != 0)
        {
          v35 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        sub_20BFD1A18(&v41);
        if ((v42 & 7) != 0)
        {
          v37 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
      }
      else
      {
        if (a6)
          MEMORY[0x212B929D0](a6, "Invalid index");
        v14 = 0;
      }
      __p = &v46;
      sub_20BEEB2B8((void ***)&__p);
      goto LABEL_28;
    }
    if (!a6)
      goto LABEL_27;
    v27 = "Cannot reparent object under itself";
    goto LABEL_26;
  }
  v14 = 1;
LABEL_28:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
  sub_20BFD265C(&v48);
LABEL_9:
  if ((v50 & 7) != 0)
  {
    v15 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v14;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_AttributeChildPolicyEE33CanMoveChildForBatchNamespaceEditERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_16SdfAttributeSpecEEERKNS_7TfTokenEiPNSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEE(a1, a2, a3, a4, a5, a6);
}

void sub_20C0B7884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  __p = &a22;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18((_DWORD *)(v23 - 88));
  v25 = *(_QWORD *)(v23 - 80);
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  _BOOL8 v12;
  void ***v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  void **v18[3];
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22[2];
  void ***v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C(v22);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8) & 1) != 0)
  {
    v9 = sub_20BFCF650(a1);
    memset(v18, 0, sizeof(v18));
    v10 = sub_20C0A683C((uint64_t *)(v9 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v10 + 136))(&v23, v10, a2, v22);
    if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
    {
      if ((v24 & 4) != 0)
        v11 = (uint64_t **)(*(uint64_t (**)(void ****))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(&v23);
      else
        v11 = (uint64_t **)v23;
    }
    else
    {
      v11 = (uint64_t **)v18;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_20BFE538C(&v19, *v11, v11[1], v11[1] - *v11);
    v13 = (void ***)sub_20BF4C2D8((uint64_t)&v23);
    v23 = v18;
    sub_20BEEB2B8(v13);
    v14 = v19;
    if (v19 != v20)
    {
      while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v14 == v20)
        {
          v14 = v20;
          break;
        }
      }
    }
    v12 = v14 != v20;
    if (a4 && v14 == v20)
      MEMORY[0x212B929D0](a4, "Object does not exist");
    v18[0] = (void **)&v19;
    sub_20BEEB2B8(v18);
  }
  else
  {
    if (a4)
      MEMORY[0x212B929D0](a4, "Layer is not editable");
    v12 = 0;
  }
  if (((uint64_t)v22[0] & 7) != 0)
  {
    v15 = (unsigned int *)((unint64_t)v22[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v12;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_AttributeChildPolicyEE35CanRemoveChildForBatchNamespaceEditERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_7TfTokenEPNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEE(a1, a2, a3, a4);
}

void sub_20C0B7BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;

  a10 = (void **)&a13;
  sub_20BEEB2B8(&a10);
  if ((a16 & 7) != 0)
  {
    v17 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::CreateSpec(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;

  v9 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(v8) + 14))
      v10 = *(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::CreateSpec(v10, a2, a3, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_21Sdf_MapperChildPolicyEE10CreateSpecERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Spec;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  void **v12;
  const char *Text;
  void **v14;
  int v16;
  int v17;
  void *__p[2];
  char v19;
  _BYTE v20[8];
  char *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  char v25;

  if ((_DWORD)a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
    Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if ((Spec & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v21);
      sub_20C0B7ED8((unsigned int **)__p);
      sub_20C0B7F40(a2, &v16);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      sub_20BFD265C(&v16);
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v9 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
      sub_20BFD265C(&v21);
    }
    else
    {
      v21 = "sdf/childrenUtils.cpp";
      v22 = "CreateSpec";
      v23 = 101;
      v24 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mapper"
            "ChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__p"
            "xrReserved__::Sdf_MapperChildPolicy]";
      v25 = 0;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C524D70, a3, (uint64_t)__p);
      v11 = v19;
      v12 = (void **)__p[0];
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v14 = __p;
      if (v11 < 0)
        v14 = v12;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v14, Text);
      if (v19 < 0)
        operator delete(__p[0]);
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
  }
  else
  {
    v21 = "sdf/childrenUtils.cpp";
    v22 = "CreateSpec";
    v23 = 90;
    v24 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperCh"
          "ildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__pxrRe"
          "served__::Sdf_MapperChildPolicy]";
    v25 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_21Sdf_MapperChildPolicyEE10CreateSpecEPNS_8SdfLayerERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

void sub_20C0B7E54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a18);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_20C0B7ED8@<X0>(unsigned int **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result)
    result = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v3 = (unsigned int *)*((_QWORD *)result + 3);
  *a1 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 = v4;
  }
  return result;
}

_DWORD *sub_20C0B7F40@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, int *a2@<X8>)
{
  uint64_t *TargetPath;
  int v6;
  int v7;
  int v8;
  int v9;

  TargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(a1);
  sub_20BFD6E54(&v8, TargetPath);
  sub_20BFD6EA4(&v9, (_DWORD *)TargetPath + 1);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_20BFD265C(&v6);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v9);
  return sub_20BFD265C(&v8);
}

void sub_20C0B7FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11)
{
  sub_20BFD1A18(&a9);
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::IsValidName()
{
  return 1;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::IsValidName(__int128 *a1)
{
  return pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString(a1, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  uint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  uint64_t v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v15;
  _DWORD *v16;
  _DWORD *v17;
  char v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void ***v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  char *v37;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v38;
  uint64_t **v39;
  uint64_t v40;
  char *v41;
  BOOL v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v47;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v48;
  uint64_t v49;
  char *v50;
  _BOOL4 HasPrefix;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v52;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v53;
  uint64_t v54;
  char *v55;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v56;
  uint64_t v57;
  char *v58;
  pxrInternal__aapl__pxrReserved__::SdfPath *v59;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v60;
  uint64_t v61;
  char *v62;
  _BOOL8 v63;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v64;
  uint64_t v65;
  char *v66;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v67;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v68;
  int v69;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *p_k;
  void ***v74;
  int *v75;
  int *v76;
  int *v77;
  int *n;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v79;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v80;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v81;
  uint64_t v82;
  char *v83;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v84;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v85;
  unsigned int *v86;
  unsigned int v87;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v88;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v89;
  unsigned int *v90;
  unsigned int v91;
  int *v93;
  int *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  __int128 m;
  __int128 j;
  _BYTE v103[8];
  __int128 k;
  uint64_t v105;
  const char *v106;
  char v107;
  _DWORD *v108;
  _DWORD *v109;
  unint64_t v110;
  __int128 i;
  uint64_t v112;
  __int128 v113;
  unint64_t v114;
  unsigned int *v115[2];
  uint64_t *v116;
  _QWORD *v117[2];
  __int128 *v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  sub_20C0B7ED8(v115);
  v113 = 0uLL;
  v114 = 0;
  *((_QWORD *)&k + 1) = 0;
  v105 = 0;
  *(_QWORD *)&k = (char *)&k + 8;
  for (i = *a3; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C0D8358(&i))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v6, v7);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8) & 1) != 0)
      goto LABEL_9;
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v9, v10);
    sub_20C0AF758(v11, &v116);
    sub_20C0A7BE0((uint64_t **)&k, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v116, &v116);
    if ((v12 & 1) != 0)
      goto LABEL_7;
    v14 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v12, v13);
    v15 = sub_20BFD5244(v14);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v15, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v108);
    v16 = v108;
    v17 = *(_DWORD **)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v108 + 1);
    sub_20BFD265C(&v108);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_20BFD265C(&j);
    if (v16 != v17)
LABEL_7:
      v18 = 1;
    else
      v18 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v116 + 1);
    sub_20BFD265C(&v116);
    if ((v18 & 1) != 0)
    {
LABEL_9:
      v19 = (unsigned int **)sub_20C0D82DC((uint64_t *)&i, v9, v10);
      v20 = *((_QWORD *)&v113 + 1);
      if (*((_QWORD *)&v113 + 1) >= v114)
      {
        v23 = sub_20BFD2FCC((unsigned int ***)&v113, v19);
      }
      else
      {
        v21 = *v19;
        **((_QWORD **)&v113 + 1) = *v19;
        if (v21)
        {
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        v23 = (char *)(v20 + 8);
      }
      *((_QWORD *)&v113 + 1) = v23;
    }
  }
  sub_20BFD7C28((uint64_t)&k, *((_QWORD **)&k + 1));
  v24 = sub_20BFCF650(a1);
  k = 0uLL;
  v105 = 0;
  v25 = sub_20C0A683C((uint64_t *)(v24 + 112));
  (*(void (**)(uint64_t **__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v25 + 136))(&v116, v25, a2, v115);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v116))
  {
    if (((uint64_t)v117[0] & 4) != 0)
      v26 = (uint64_t *)(*(uint64_t (**)(uint64_t **))(((unint64_t)v117[0] & 0xFFFFFFFFFFFFFFF8) + 168))(&v116);
    else
      v26 = v116;
  }
  else
  {
    v26 = (uint64_t *)&k;
  }
  i = 0uLL;
  v112 = 0;
  sub_20BFD6D38(&i, (_DWORD *)*v26, (_DWORD *)v26[1], (v26[1] - *v26) >> 3);
  v27 = (void ***)sub_20BF4C2D8((uint64_t)&v116);
  v116 = (uint64_t *)&k;
  sub_20BFD6F90(v27);
  v117[0] = 0;
  v117[1] = 0;
  v116 = (uint64_t *)v117;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  sub_20C0B8D74((uint64_t *)&v108, (uint64_t)(*((_QWORD *)&v113 + 1) - v113) >> 3);
  for (j = v113; (_QWORD)j != *((_QWORD *)&j + 1); sub_20C0B8E80(&j))
  {
    v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v28, v29);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v30))
    {
      *(_QWORD *)&k = "sdf/childrenUtils.cpp";
      *((_QWORD *)&k + 1) = "SetChildren";
      v105 = 181;
      v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mappe"
             "rChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy:"
             ":ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]";
      v107 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_78;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v31, v32);
    sub_20C0AF758(v33, &v93);
    v34 = v109;
    if ((unint64_t)v109 >= v110)
    {
      v35 = (_DWORD *)sub_20BFD7890((uint64_t *)&v108, &v93);
    }
    else
    {
      sub_20BFD6E54(v109, &v93);
      sub_20BFD6EA4(v34 + 1, (_DWORD *)&v93 + 1);
      v35 = v34 + 2;
    }
    v109 = v35;
    sub_20C0A7BE0(&v116, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v93, &v93);
    if ((v36 & 1) == 0)
    {
      *(_QWORD *)&k = "sdf/childrenUtils.cpp";
      *((_QWORD *)&k + 1) = "SetChildren";
      v105 = 188;
      v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mappe"
             "rChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy:"
             ":ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]";
      v107 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
      goto LABEL_77;
    }
    v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v36, v37);
    v39 = (uint64_t **)sub_20BFD5244(v38);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v39, (uint64_t *)&k);
    v42 = sub_20BEB560C((uint64_t)&k, (uint64_t)a1);
    v43 = *((_QWORD *)&k + 1);
    if (*((_QWORD *)&k + 1))
    {
      v44 = (unsigned int *)(*((_QWORD *)&k + 1) + 8);
      do
      {
        v45 = __ldxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    }
    if (!v42)
    {
      *(_QWORD *)&k = "sdf/childrenUtils.cpp";
      *((_QWORD *)&k + 1) = "SetChildren";
      v105 = 193;
      v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mappe"
             "rChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy:"
             ":ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]";
      v107 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_77;
    }
    v47 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v40, v41);
    v48 = sub_20BFD5244(v47);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v48, &v118);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v118, &k);
    if (*(_QWORD *)a2 == (_QWORD)k)
    {
      HasPrefix = 0;
    }
    else
    {
      v52 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v49, v50);
      v53 = sub_20BFD5244(v52);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v53, &m);
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&m);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&m + 1);
      sub_20BFD265C(&m);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
    sub_20BFD265C(&k);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v118 + 1);
    sub_20BFD265C(&v118);
    if (HasPrefix)
    {
      *(_QWORD *)&k = "sdf/childrenUtils.cpp";
      *((_QWORD *)&k + 1) = "SetChildren";
      v105 = 203;
      v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mappe"
             "rChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy:"
             ":ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]";
      v107 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
LABEL_77:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
      sub_20BFD265C(&v93);
LABEL_78:
      v63 = 0;
      goto LABEL_83;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
    sub_20BFD265C(&v93);
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v103);
  for (k = i; (_QWORD)k != *((_QWORD *)&k + 1); sub_20BFD7240(&k))
  {
    v56 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&k, v54, v55);
    if (v117 == sub_20BFE4AF0((uint64_t)&v116, v56))
    {
      v59 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&k, v57, v58);
      sub_20C0AF418(a2, v59, &j);
      v60 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v60, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_20BFD265C(&j);
    }
  }
  sub_20C0D83D4((uint64_t)&j, (const pxrInternal__aapl__pxrReserved__::SdfPath *)i, *((const pxrInternal__aapl__pxrReserved__::SdfPath **)&i + 1));
  for (m = v113; ; sub_20C0B8E80(&m))
  {
    v63 = m == *((_QWORD *)&m + 1);
    if ((_QWORD)m == *((_QWORD *)&m + 1))
      break;
    v64 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&m, v61, v62);
    sub_20C0AF758(v64, &v100);
    sub_20C0AF418(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v100, &v98);
    v67 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&m, v65, v66);
    v68 = sub_20BFD5244(v67);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v68, &k);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&k, &v97);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
    sub_20BFD265C(&k);
    if (v97 == *(_QWORD *)a2)
    {
      v69 = 10;
    }
    else
    {
      if ((_QWORD *)((char *)&j + 8) != sub_20BFE4AF0((uint64_t)&j, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v100))
      {
        v70 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v70, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v98);
      }
      sub_20C0B7ED8((unsigned int **)&v96);
      v71 = sub_20BFCF650(a1);
      k = 0uLL;
      v105 = 0;
      v72 = sub_20C0A683C((uint64_t *)(v71 + 112));
      (*(void (**)(__int128 **__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v72 + 136))(&v118, v72, &v97, &v96);
      if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v118))
      {
        if ((v119 & 4) != 0)
          p_k = (__int128 *)(*(uint64_t (**)(__int128 **))((v119 & 0xFFFFFFFFFFFFFFF8) + 168))(&v118);
        else
          p_k = v118;
      }
      else
      {
        p_k = &k;
      }
      v93 = 0;
      v94 = 0;
      v95 = 0;
      sub_20BFD6D38(&v93, *(_DWORD **)p_k, *((_DWORD **)p_k + 1), (uint64_t)(*((_QWORD *)p_k + 1) - *(_QWORD *)p_k) >> 3);
      v74 = (void ***)sub_20BF4C2D8((uint64_t)&v118);
      v118 = &k;
      sub_20BFD6F90(v74);
      v75 = v93;
      if (v93 != v94)
      {
        while (*(_QWORD *)v75 != v100)
        {
          v75 += 2;
          if (v75 == v94)
          {
            v75 = v94;
            break;
          }
        }
      }
      if (v75 == v94)
      {
        *(_QWORD *)&k = "sdf/childrenUtils.cpp";
        *((_QWORD *)&k + 1) = "SetChildren";
        v105 = 254;
        v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Map"
               "perChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
               "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]";
        v107 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        v69 = 1;
      }
      else
      {
        sub_20C0D8454((uint64_t)&v118, v75 + 2, v94, v75);
        v77 = v76;
        for (n = v94; n != v77; sub_20BFD6F64((uint64_t)&v95, n))
          n -= 2;
        v94 = v77;
        if (v93 == v77)
        {
          v80 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v80, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v97, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v96);
        }
        else
        {
          v79 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B8F7C(v79, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v97, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v96, &v93);
        }
        v81 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        v84 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&m, v82, v83);
        v85 = sub_20BFD5244(v84);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v85, &k);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v81, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v98);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
        sub_20BFD265C(&k);
        v69 = 0;
      }
      *(_QWORD *)&k = &v93;
      sub_20BFD6F90((void ***)&k);
      if ((v96 & 7) != 0)
      {
        v86 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v97 + 1);
    sub_20BFD265C(&v97);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v99);
    sub_20BFD265C(&v98);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v100 + 1);
    sub_20BFD265C(&v100);
    if (v69 != 10 && v69)
      goto LABEL_82;
  }
  if (v108 == v109)
  {
    v89 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v89, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v115);
  }
  else
  {
    v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    sub_20C0B8F7C(v88, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v115, &v108);
  }
LABEL_82:
  sub_20BFD7C28((uint64_t)&j, *((_QWORD **)&j + 1));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v103);
LABEL_83:
  *(_QWORD *)&k = &v108;
  sub_20BFD6F90((void ***)&k);
  sub_20BFD7C28((uint64_t)&v116, v117[0]);
  *(_QWORD *)&k = &i;
  sub_20BFD6F90((void ***)&k);
  *(_QWORD *)&k = &v113;
  sub_20BFD2B90((void ***)&k);
  if (((uint64_t)v115[0] & 7) != 0)
  {
    v90 = (unsigned int *)((unint64_t)v115[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  return v63;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_21Sdf_MapperChildPolicyEE11SetChildrenERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__16vectorINS_9SdfHandleINS_7SdfSpecEEENSB_9allocatorISF_EEEE(a1, a2, a3);
}

void sub_20C0B89C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;

  sub_20BFD1A18(&a10);
  a23 = (void **)&a28;
  sub_20BFD6F90(&a23);
  sub_20BFD7C28(v31 - 144, *(_QWORD **)(v31 - 136));
  a23 = (void **)&a31;
  sub_20BFD6F90(&a23);
  a23 = (void **)(v31 - 192);
  sub_20BFD2B90(&a23);
  v33 = *(_QWORD *)(v31 - 160);
  if ((v33 & 7) != 0)
  {
    v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C0B8C80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _DWORD **a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  _DWORD **v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v9 = sub_20C0A683C((uint64_t *)(a1 + 112));
  (*(void (**)(_DWORD ***__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 136))(&v11, v9, a2, a3);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v11))
  {
    if ((v12 & 4) != 0)
      a4 = (_DWORD **)(*(uint64_t (**)(_DWORD ***))((v12 & 0xFFFFFFFFFFFFFFF8) + 168))(&v11);
    else
      a4 = v11;
  }
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  sub_20BFD6D38(a5, *a4, a4[1], ((char *)a4[1] - (char *)*a4) >> 3);
  return sub_20BF4C2D8((uint64_t)&v11);
}

void sub_20C0B8D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void **sub_20C0B8D74(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      sub_20BDDF694();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_20BDDF6A8((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 8 * v6;
    sub_20BFD797C(a1, v7);
    return sub_20BFD7B28(v7);
  }
  return result;
}

void sub_20C0B8DF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD7B28((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0B8E04(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfHand"
            "le<pxrInternal__aapl__pxrReserved__::SdfSpec>>>::operator*() [T = std::vector<pxrInternal__aapl__pxrReserved"
            "__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfSpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0B8E78()
{
  JUMPOUT(0x20C0B8E28);
}

_QWORD *sub_20C0B8E80(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfSpec>>>::operator++() [T = std::vector<pxrInternal__aa"
            "pl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfSpec>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

int *sub_20C0B8EFC(uint64_t a1, int *a2)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  char v8;

  sub_20C0D8454((uint64_t)&v8, a2 + 2, *(int **)(a1 + 8), a2);
  v5 = v4;
  v6 = *(_DWORD **)(a1 + 8);
  if (v6 != v4)
  {
    do
    {
      v6 -= 2;
      sub_20BFD6F64(a1 + 16, v6);
    }
    while (v6 != v5);
  }
  *(_QWORD *)(a1 + 8) = v5;
  return a2;
}

uint64_t sub_20C0B8F7C(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, _DWORD **a4)
{
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v8[1] = &off_24C526910;
  sub_20C030C78(v8, a4);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(a1, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_20BF4C2D8((uint64_t)v8);
}

void sub_20C0B9010(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t **v8;
  BOOL v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  void **v15;
  void **v16;
  _BOOL8 v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  _BOOL4 HasPrefix;
  uint64_t v23;
  uint64_t v24;
  void ***v25;
  void ***v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  _QWORD *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t v34;
  uint64_t v35;
  void ***v36;
  const char *Text;
  void ***v38;
  int *v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v48;
  unsigned int v49;
  unint64_t v50;
  int v51;
  int v52;
  void ***v53;
  char *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  void **v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  char v63;
  unsigned int *v64[2];
  void ***v65;
  int *v66;
  uint64_t v67;
  void ***v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  sub_20C0B7ED8(v64);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    v59 = (void **)"sdf/childrenUtils.cpp";
    v60 = "InsertChild";
    v61 = 290;
    v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperCh"
          "ildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, int)"
          " [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]";
    v63 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  v8 = (uint64_t **)sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&v59);
  v9 = sub_20BEB560C((uint64_t)&v59, (uint64_t)a1);
  v10 = v60;
  if (v60)
  {
    v11 = (unsigned int *)(v60 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!v9)
  {
    v59 = (void **)"sdf/childrenUtils.cpp";
    v60 = "InsertChild";
    v61 = 295;
    v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperCh"
          "ildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, int)"
          " [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]";
    v63 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_12;
  }
  v14 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v53);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v59);
  v15 = v59;
  v16 = *(void ***)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
  sub_20BFD265C(&v59);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
  sub_20BFD265C(&v53);
  if (v15 == v16)
  {
    v17 = 1;
  }
  else
  {
    sub_20C0AF758(a3, &v58);
    sub_20C0AF418(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, &v56);
    v21 = sub_20BFD5244(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v21, &v59);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v59);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
    sub_20BFD265C(&v59);
    if (HasPrefix)
    {
      v59 = (void **)"sdf/childrenUtils.cpp";
      v60 = "InsertChild";
      v61 = 312;
      v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mapper"
            "ChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, "
            "int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]";
      v63 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      v17 = 0;
    }
    else
    {
      v23 = sub_20BFCF650(a1);
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v24 = sub_20C0A683C((uint64_t *)(v23 + 112));
      (*(void (**)(void ****__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v24 + 136))(&v65, v24, a2, v64);
      if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v65))
      {
        if ((v66 & 4) != 0)
          v25 = (void ***)(*(uint64_t (**)(void ****))(((unint64_t)v66 & 0xFFFFFFFFFFFFFFF8) + 168))(&v65);
        else
          v25 = v65;
      }
      else
      {
        v25 = &v59;
      }
      v53 = 0;
      v54 = 0;
      v55 = 0;
      sub_20BFD6D38(&v53, *v25, v25[1], v25[1] - *v25);
      v26 = (void ***)sub_20BF4C2D8((uint64_t)&v65);
      v65 = &v59;
      sub_20BFD6F90(v26);
      v29 = (unint64_t)(v54 - (char *)v53) >> 3;
      if (a4 != -1)
        LODWORD(v29) = a4;
      v30 = (int)v29;
      if ((int)v29 <= (unint64_t)((v54 - (char *)v53) >> 3))
      {
        v65 = v53;
        v66 = (int *)v54;
        while (v65 != (void ***)v66)
        {
          v32 = (_QWORD *)sub_20BFD71C4((uint64_t *)&v65, v27, v28);
          if (*v32 == v58)
          {
            v59 = (void **)"sdf/childrenUtils.cpp";
            v60 = "InsertChild";
            v61 = 334;
            v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "MapperChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::V"
                  "alueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]";
            v63 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_35;
          }
          sub_20BFD7240(&v65);
        }
        v33 = sub_20BFD5244(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v33, &v59);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, &v51);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
        sub_20BFD265C(&v59);
        sub_20C0B7ED8((unsigned int **)&v50);
        v34 = sub_20BFCF650(a1);
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v35 = sub_20C0A683C((uint64_t *)(v34 + 112));
        (*(void (**)(void ****__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v35 + 136))(&v68, v35, &v51, &v50);
        if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v68))
        {
          if ((v69 & 4) != 0)
            v36 = (void ***)(*(uint64_t (**)(void ****))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(&v68);
          else
            v36 = v68;
        }
        else
        {
          v36 = &v59;
        }
        v65 = 0;
        v66 = 0;
        v67 = 0;
        sub_20BFD6D38(&v65, *v36, v36[1], v36[1] - *v36);
        v38 = (void ***)sub_20BF4C2D8((uint64_t)&v68);
        v68 = &v59;
        sub_20BFD6F90(v38);
        v39 = (int *)v65;
        if (v65 != (void ***)v66)
        {
          while (*(_QWORD *)v39 != v58)
          {
            v39 += 2;
            if (v39 == v66)
            {
              v39 = v66;
              break;
            }
          }
        }
        v17 = v39 != v66;
        if (v39 == v66)
        {
          v59 = (void **)"sdf/childrenUtils.cpp";
          v60 = "InsertChild";
          v61 = 352;
          v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Ma"
                "pperChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Value"
                "Type &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]";
          v63 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v59);
          sub_20C0B8EFC((uint64_t)&v65, v39);
          if (v65 == (void ***)v66)
          {
            v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v50);
          }
          else
          {
            v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            sub_20C0B8F7C(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v50, (_DWORD **)&v65);
          }
          v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          v43 = sub_20BFD5244(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v43, &v68);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v68, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
          sub_20BFD1A18(&v68);
          sub_20C0B98C8((uint64_t *)&v53, (int *)&v53[v30], (int *)&v58);
          v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B8F7C(v44, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v64, (_DWORD **)&v53);
          v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51, &v68);
          IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v68);
          if ((IsDormant & 1) == 0)
          {
            Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v68);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v68);
          sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v59);
        }
        v59 = (void **)&v65;
        sub_20BFD6F90(&v59);
        if ((v50 & 7) != 0)
        {
          v48 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
        sub_20BFD265C(&v51);
      }
      else
      {
        v59 = (void **)"sdf/childrenUtils.cpp";
        v60 = "InsertChild";
        v61 = 326;
        v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mapp"
              "erChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType"
              " &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]";
        v63 = 0;
        v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v31, v30);
LABEL_35:
        v17 = 0;
      }
      v59 = (void **)&v53;
      sub_20BFD6F90(&v59);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v57);
    sub_20BFD265C(&v56);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
    sub_20BFD265C(&v58);
  }
LABEL_13:
  if (((uint64_t)v64[0] & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v64[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  return v17;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_21Sdf_MapperChildPolicyEE11InsertChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_7SdfSpecEEEi(a1, a2, a3, a4);
}

void sub_20C0B96D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, int a17, int a18, int a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;

  a20 = (void **)(v25 - 112);
  sub_20BFD6F90(&a20);
  if ((a11 & 7) != 0)
  {
    v27 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  sub_20BFD1A18(&a12);
  a20 = (void **)&a14;
  sub_20BFD6F90(&a20);
  sub_20BFD1A18(&a17);
  sub_20BFD1A18(&a19);
  if ((a25 & 7) != 0)
  {
    v29 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  _Unwind_Resume(a1);
}

int *sub_20C0B98C8(uint64_t *a1, int *a2, int *a3)
{
  int *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v4 = a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = ((uint64_t)a2 - *a1) >> 3;
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v12 = ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v12 >> 61)
      sub_20BDDF694();
    v13 = v10 - v7;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v21 = v9;
    if (v14)
      v15 = (char *)sub_20BDDF6A8(v9, v14);
    else
      v15 = 0;
    v17 = v15;
    v18 = &v15[8 * v8];
    v19 = v18;
    v20 = &v15[8 * v14];
    sub_20C0D8548(&v17, a3);
    v4 = (int *)sub_20C0312D8((uint64_t)a1, &v17, v4);
    sub_20BFD7B28(&v17);
  }
  else if (a2 == (int *)v6)
  {
    sub_20BFD6E54(a2, a3);
    sub_20BFD6EA4((_DWORD *)(v7 + 8 * v8 + 4), a3 + 1);
    a1[1] = (uint64_t)(v4 + 2);
  }
  else
  {
    sub_20C0311C4((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 2));
    if (v4 <= a3)
      a3 += 2 * (a1[1] > (unint64_t)a3);
    sub_20C01A074(v4, a3);
    sub_20C01A0C8((int *)(v7 + 8 * v8 + 4), a3 + 1);
  }
  return v4;
}

void sub_20C0B9A20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD7B28((void **)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void ***v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  int *v13;
  int *v14;
  int *i;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v18;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v24;
  void **v25[3];
  uint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  void ***v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  sub_20C0B7ED8((unsigned int **)&v29);
  v6 = sub_20BFCF650(a1);
  memset(v25, 0, sizeof(v25));
  v7 = sub_20C0A683C((uint64_t *)(v6 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v7 + 136))(&v32, v7, a2, &v29);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v32))
  {
    if ((v33 & 4) != 0)
      v8 = (void ***)(*(uint64_t (**)(void ****))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(&v32);
    else
      v8 = v32;
  }
  else
  {
    v8 = v25;
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  sub_20BFD6D38(&v26, *v8, v8[1], v8[1] - *v8);
  sub_20BF4C2D8((uint64_t)&v32);
  v32 = v25;
  sub_20BFD6F90((void ***)&v32);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  sub_20BFD6E54(&v32, a3);
  sub_20BFD6EA4((_DWORD *)&v32 + 1, a3 + 1);
  v9 = (int *)v26;
  if ((int *)v26 == v27)
  {
LABEL_9:
    v11 = 0;
  }
  else
  {
    v10 = -v26;
    while (*(void ****)v9 != v32)
    {
      v9 += 2;
      v10 -= 8;
      if (v9 == v27)
        goto LABEL_9;
    }
    sub_20C0AF418(a2, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v32, &v30);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
    sub_20C0D8454((uint64_t)&v24, (int *)(8 - v10), v27, (int *)-v10);
    v14 = v13;
    for (i = v27; i != v14; sub_20BFD6F64((uint64_t)&v28, i))
      i -= 2;
    v27 = v14;
    if ((int *)v26 == v14)
    {
      v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v17, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
    }
    else
    {
      v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B8F7C(v16, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29, (_DWORD **)&v26);
    }
    v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v18, a2, &v24);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v24);
    if ((IsDormant & 1) == 0)
    {
      Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v24);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    sub_20BFD265C(&v30);
    v11 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  v25[0] = (void **)&v26;
  sub_20BFD6F90(v25);
  if ((v29 & 7) != 0)
  {
    v21 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_21Sdf_MapperChildPolicyEE11RemoveChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathESA_(a1, a2, a3);
}

void sub_20C0B9CE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char ***v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char ****v21;
  void ***v22;
  int *v23;
  uint64_t v24;
  _BOOL4 v26;
  int *v27;
  int *v28;
  int *v29;
  int *i;
  int *v31;
  int *v32;
  int *j;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v34;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v35;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v36;
  uint64_t IsDormant;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v39;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char **v50;
  int *v51;
  uint64_t v52;
  char *v53;
  int *v54;
  uint64_t v55;
  char *v56;
  unsigned int *v57[2];
  char ***v58;
  uint64_t v59;
  uint64_t v60;
  void ***v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  sub_20C0B7ED8(v57);
  sub_20C0AF418(a2, a4, &v56);
  v10 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v53);
  v11 = v56;
  v12 = v53;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
  sub_20BFD265C(&v53);
  if (a5 == -2 && v11 == v12)
    goto LABEL_52;
  v13 = sub_20BFCF650(a1);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v14 = sub_20C0A683C((uint64_t *)(v13 + 112));
  (*(void (**)(char ****__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v14 + 136))(&v58, v14, a2, v57);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
  {
    if ((v59 & 4) != 0)
      v15 = (char ***)(*(uint64_t (**)(char ****))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(&v58);
    else
      v15 = v58;
  }
  else
  {
    v15 = &v50;
  }
  v53 = 0;
  v54 = 0;
  v55 = 0;
  sub_20BFD6D38(&v53, *v15, v15[1], v15[1] - *v15);
  sub_20BF4C2D8((uint64_t)&v58);
  v58 = &v50;
  sub_20BFD6F90((void ***)&v58);
  sub_20C0AF758(a3, &v49);
  v16 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &v50);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
  sub_20BFD265C(&v50);
  if (a5 == -2 && v48 == *(_QWORD *)a2)
  {
    if (v53 == (char *)v54)
    {
      v17 = (int *)v53;
    }
    else
    {
      v17 = (int *)v53;
      while (*(_QWORD *)v17 != v49)
      {
        v17 += 2;
        if (v17 == v54)
        {
          v17 = v54;
          break;
        }
      }
    }
    v18 = (unint64_t)((char *)v17 - v53) >> 3;
  }
  else if (((char *)v54 - v53) >> 3 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = ((char *)v54 - v53) >> 3;
  }
  sub_20C0B7ED8((unsigned int **)&v47);
  v19 = sub_20BFCF650(a1);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v20 = sub_20C0A683C((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v20 + 136))(&v61, v20, &v48, &v47);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v61))
  {
    if ((v62 & 4) != 0)
      v21 = (char ****)(*(uint64_t (**)(void ****))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(&v61);
    else
      v21 = (char ****)v61;
  }
  else
  {
    v21 = &v58;
  }
  v50 = 0;
  v51 = 0;
  v52 = 0;
  sub_20BFD6D38(&v50, *v21, v21[1], v21[1] - *v21);
  v22 = (void ***)sub_20BF4C2D8((uint64_t)&v61);
  v61 = (void ***)&v58;
  sub_20BFD6F90(v22);
  v23 = (int *)v50;
  if (v50 != (char **)v51)
  {
    while (*(_QWORD *)v23 != v49)
    {
      v23 += 2;
      if (v23 == v51)
      {
        v23 = v51;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v58);
  if (v48 == *(_QWORD *)a2)
  {
    v24 = (char *)v23 - (char *)v50;
    if (v49 == *(_QWORD *)a4
      && ((_DWORD)v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == (_DWORD)v18))
    {
      goto LABEL_48;
    }
    v26 = (int)v18 > v24 >> 3;
    v27 = (int *)v53;
    if (v53 != (char *)v54)
    {
      while (*(_QWORD *)v27 != v49)
      {
        v27 += 2;
        if (v27 == v54)
        {
          v27 = v54;
          break;
        }
      }
    }
    sub_20C0D8454((uint64_t)&v61, v27 + 2, v54, v27);
    v29 = v28;
    LODWORD(v18) = v18 - v26;
    for (i = v54; i != v29; sub_20BFD6F64((uint64_t)&v55, i))
      i -= 2;
    v54 = v29;
  }
  else
  {
    sub_20C0D8454((uint64_t)&v61, v23 + 2, v51, v23);
    v32 = v31;
    for (j = v51; j != v32; sub_20BFD6F64((uint64_t)&v52, j))
      j -= 2;
    v51 = v32;
    if (v50 == (char **)v32)
    {
      v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v35, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v47);
      v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, &v61);
      IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v61);
      if ((IsDormant & 1) == 0)
      {
        Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v61);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v61);
    }
    else
    {
      v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B8F7C(v34, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v47, (_DWORD **)&v50);
    }
  }
  v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v40 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v40, &v61);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v39, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v61, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
  sub_20BFD265C(&v61);
  sub_20C0B98C8((uint64_t *)&v53, (int *)&v53[8 * (int)v18], (int *)a4);
  v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  sub_20C0B8F7C(v41, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v57, (_DWORD **)&v53);
LABEL_48:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v58);
  v58 = &v50;
  sub_20BFD6F90((void ***)&v58);
  if ((v47 & 7) != 0)
  {
    v42 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
  sub_20BFD265C(&v48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
  sub_20BFD265C(&v49);
  v50 = &v53;
  sub_20BFD6F90((void ***)&v50);
LABEL_52:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if (((uint64_t)v57[0] & 7) != 0)
  {
    v44 = (unsigned int *)((unint64_t)v57[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  return 1;
}

void sub_20C0BA308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, void **a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,void ***a22)
{
  uint64_t v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v22 - 88));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a22);
  a22 = &a13;
  sub_20BFD6F90((void ***)&a22);
  if ((a9 & 7) != 0)
  {
    v24 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20BFD1A18(&a10);
  sub_20BFD1A18(&a12);
  a13 = (void **)&a16;
  sub_20BFD6F90(&a13);
  sub_20BFD1A18(&a19);
  if ((a20 & 7) != 0)
  {
    v26 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  const char *v13;
  _BOOL8 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t **v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  _BOOL4 HasPrefix;
  uint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int *v35;
  unsigned int v36;
  void **v37[3];
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  void ***v49;

  sub_20C0B7ED8((unsigned int **)&v48);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      v13 = "Layer is not editable";
      goto LABEL_7;
    }
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      v13 = "Object does not exist";
LABEL_7:
      MEMORY[0x212B929D0](a6, v13);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v18 = (uint64_t **)sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v18, &v44);
  v19 = sub_20BEB560C((uint64_t)&v44, (uint64_t)a1);
  v20 = v45;
  if (v45)
  {
    v21 = (unsigned int *)(v45 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (!v19)
  {
    if (!a6)
      goto LABEL_8;
    v13 = "Cannot reparent to another layer";
    goto LABEL_7;
  }
  sub_20C0AF418(a2, a4, &v46);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v46))
  {
    if (!a6)
    {
LABEL_27:
      v14 = 0;
      goto LABEL_28;
    }
    v27 = "Invalid name";
LABEL_26:
    MEMORY[0x212B929D0](a6, v27);
    goto LABEL_27;
  }
  v24 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &v41);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, &v44);
  v25 = v44;
  v26 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
  sub_20BFD265C(&v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
  sub_20BFD265C(&v41);
  if (v25 != v26)
  {
    v28 = sub_20BFD5244(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v44);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
    sub_20BFD265C(&v44);
    if (!HasPrefix)
    {
      v30 = sub_20BFCF650(a1);
      v41 = 0;
      v42 = 0;
      v43 = 0;
      sub_20C0B8C80(v30, (uint64_t)a2, (uint64_t)&v48, (_DWORD **)&v41, &v44);
      v37[0] = (void **)&v41;
      sub_20BFD6F90(v37);
      v31 = (unint64_t)(v45 - v44) >> 3;
      if (a5 != -1)
        LODWORD(v31) = a5;
      if ((_DWORD)v31 == -2 || (int)v31 <= (unint64_t)((v45 - v44) >> 3))
      {
        sub_20C0AF758(a3, &v40);
        v32 = sub_20BFD5244(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, &v41);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, &v39);
        sub_20BFD1A18(&v41);
        sub_20C0B7ED8((unsigned int **)&v38);
        v33 = sub_20BFCF650(a1);
        memset(v37, 0, sizeof(v37));
        sub_20C0B8C80(v33, (uint64_t)&v39, (uint64_t)&v38, (_DWORD **)v37, &v41);
        v49 = v37;
        sub_20BFD6F90((void ***)&v49);
        v34 = v41;
        if (v41 != v42)
        {
          while (*v34 != v40)
          {
            if (++v34 == v42)
            {
              v34 = v42;
              break;
            }
          }
        }
        v14 = v34 != v42;
        if (a6 && v34 == v42)
          MEMORY[0x212B929D0](a6, "Coding error: Object is not in its parent's children");
        v37[0] = (void **)&v41;
        sub_20BFD6F90(v37);
        if ((v38 & 7) != 0)
        {
          v35 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        sub_20BFD1A18(&v39);
        sub_20BFD1A18(&v40);
      }
      else
      {
        if (a6)
          MEMORY[0x212B929D0](a6, "Invalid index");
        v14 = 0;
      }
      v41 = &v44;
      sub_20BFD6F90((void ***)&v41);
      goto LABEL_28;
    }
    if (!a6)
      goto LABEL_27;
    v27 = "Cannot reparent object under itself";
    goto LABEL_26;
  }
  v14 = 1;
LABEL_28:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
  sub_20BFD265C(&v46);
LABEL_9:
  if ((v48 & 7) != 0)
  {
    v15 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v14;
}

void sub_20C0BA820(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;

  a16 = (void **)&a19;
  sub_20BFD6F90(&a16);
  sub_20BFD1A18((_DWORD *)(v19 - 88));
  v21 = *(_QWORD *)(v19 - 80);
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v10;
  void ***v11;
  _BOOL8 v12;
  void ***v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  void **v18[3];
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22[2];
  void ***v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20C0B7ED8(v22);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8) & 1) != 0)
  {
    v9 = sub_20BFCF650(a1);
    memset(v18, 0, sizeof(v18));
    v10 = sub_20C0A683C((uint64_t *)(v9 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v10 + 136))(&v23, v10, a2, v22);
    if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
    {
      if ((v24 & 4) != 0)
        v11 = (void ***)(*(uint64_t (**)(void ****))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(&v23);
      else
        v11 = v23;
    }
    else
    {
      v11 = v18;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_20BFD6D38(&v19, *v11, v11[1], v11[1] - *v11);
    v13 = (void ***)sub_20BF4C2D8((uint64_t)&v23);
    v23 = v18;
    sub_20BFD6F90(v13);
    v14 = v19;
    if (v19 != v20)
    {
      while (*v14 != *a3)
      {
        if (++v14 == v20)
        {
          v14 = v20;
          break;
        }
      }
    }
    v12 = v14 != v20;
    if (a4 && v14 == v20)
      MEMORY[0x212B929D0](a4, "Object does not exist");
    v18[0] = (void **)&v19;
    sub_20BFD6F90(v18);
  }
  else
  {
    if (a4)
      MEMORY[0x212B929D0](a4, "Layer is not editable");
    v12 = 0;
  }
  if (((uint64_t)v22[0] & 7) != 0)
  {
    v15 = (unsigned int *)((unint64_t)v22[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v12;
}

void sub_20C0BAB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;

  a10 = (void **)&a13;
  sub_20BFD6F90(&a10);
  if ((a16 & 7) != 0)
  {
    v17 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::CreateSpec(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;

  v9 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(v8) + 14))
      v10 = *(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::CreateSpec(v10, a2, a3, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_MapperArgChildPolicyEE10CreateSpecERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Spec;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  void **v17;
  const char *Text;
  void **v19;
  unsigned int *v21;
  void *__p[2];
  char v23;
  char v24[8];
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;

  if ((_DWORD)a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
    Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if ((Spec & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v25);
      sub_20C0BAE84((unsigned int **)__p);
      v9 = *(unsigned int **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v21 = v9;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          v21 = v10;
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, 1);
      if ((v21 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v14 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_20BFD265C(&v25);
    }
    else
    {
      v25 = "sdf/childrenUtils.cpp";
      v26 = "CreateSpec";
      v27 = 101;
      v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mapper"
            "ArgChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl"
            "__pxrReserved__::Sdf_MapperArgChildPolicy]";
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C524D70, a3, (uint64_t)__p);
      v16 = v23;
      v17 = (void **)__p[0];
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v19 = __p;
      if (v16 < 0)
        v19 = v17;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v19, Text);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  }
  else
  {
    v25 = "sdf/childrenUtils.cpp";
    v26 = "CreateSpec";
    v27 = 90;
    v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperAr"
          "gChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__px"
          "rReserved__::Sdf_MapperArgChildPolicy]";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_MapperArgChildPolicyEE10CreateSpecEPNS_8SdfLayerERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

void sub_20C0BADF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a18);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_20C0BAE84@<X0>(unsigned int **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result)
    result = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v3 = (unsigned int *)*((_QWORD *)result + 2);
  *a1 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 = v4;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t *EmptyString;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_MapperArgChildPolicyEE11IsValidNameERKNS_7TfTokenE(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName(uint64_t a1)
{
  int v1;
  void *__p;
  char v4;
  unsigned __int8 v5;

  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidIdentifier(a1, (uint64_t)&__p);
  v1 = v5;
  if (v5 && v4 < 0)
    operator delete(__p);
  return v1 == 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::CanRename@<X0>(uint64_t **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  char v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  void *v13;
  _QWORD *result;
  const char *Text;
  const char *v16;
  char *v17;
  unint64_t v18;
  const char *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  int HasSpec;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  void *v27;
  void *__p[2];
  uint64_t v29;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
  v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v6);
  v8 = __p[1];
  if (__p[1])
  {
    v9 = (unsigned int *)((char *)__p[1] + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
  }
  if ((v7 & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName(a2))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      sub_20C0BB264((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a2, &v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      v12 = v27;
      v13 = __p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      if (v12 == v13)
        goto LABEL_9;
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v27))
        goto LABEL_21;
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
      HasSpec = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v22 = __p[1];
      if (__p[1])
      {
        v23 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v24 = __ldxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
      }
      if (!HasSpec)
      {
LABEL_9:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 24) = 0;
      }
      else
      {
LABEL_21:
        sub_20BDDC0E4(__p, "An object with that name already exists");
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v27);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v18 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v16, v17, Text, v19);
      if (SHIBYTE(v29) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, __p[0], (unint64_t)__p[1]);
        v26 = SHIBYTE(v29);
        *(_BYTE *)(a3 + 24) = 1;
        if (v26 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    return sub_20BFD265C(&v27);
  }
  else
  {
    result = sub_20BDDC0E4(__p, "Layer is not editable");
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v29;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

void sub_20C0BB1C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0BB264@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  int v6;
  int v7;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20C0BB2C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::Rename(pxrInternal__aapl__pxrReserved__::SdfSpec *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  void ***v14;
  uint64_t v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  const char *Text;
  const char *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 i;
  uint64_t v47;
  const char *v48;
  char v49;
  int v50;
  _DWORD v51[3];
  uint64_t v52[3];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &v50);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName(a2))
  {
    sub_20C0BB264((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, a2, &v45);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v45))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &i);
      v4 = v45;
      v5 = i;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 1);
      sub_20BFD265C(&i);
      if (v4 == v5)
      {
        v6 = 1;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v43);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v41);
        sub_20C0BAE84((unsigned int **)&v40);
        v11 = sub_20BFCF650(&v43);
        i = 0uLL;
        v47 = 0;
        v12 = sub_20C0A683C((uint64_t *)(v11 + 112));
        (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v12 + 136))(v52, v12, &v41, &v40);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)v52))
        {
          if ((v52[1] & 4) != 0)
            v13 = (uint64_t **)(*(uint64_t (**)(uint64_t *))((v52[1] & 0xFFFFFFFFFFFFFFF8) + 168))(v52);
          else
            v13 = (uint64_t **)v52[0];
        }
        else
        {
          v13 = (uint64_t **)&i;
        }
        v38 = 0uLL;
        v39 = 0;
        sub_20BFE538C(&v38, *v13, v13[1], v13[1] - *v13);
        v14 = (void ***)sub_20BF4C2D8((uint64_t)v52);
        v52[0] = (uint64_t)&i;
        sub_20BEEB2B8(v14);
        *(_OWORD *)v52 = v38;
        while (v52[0] != v52[1])
        {
          if ((*(_QWORD *)sub_20C023B14(v52, v15, v16) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
          {
            *(_QWORD *)&i = "sdf/childrenUtils.cpp";
            *((_QWORD *)&i + 1) = "Rename";
            v47 = 726;
            v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "MapperArgChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy ="
                  " pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]";
            v49 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to %s because a sibling with that name already exists", Text, v24);
            v6 = 0;
            goto LABEL_38;
          }
          sub_20C023C08(v52);
        }
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
        v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
        v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
        if ((v6 & 1) != 0)
        {
          for (i = v38; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
          {
            v20 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v18, v19);
            if ((*v20 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50) & 0xFFFFFFFFFFFFFFF8))
            {
              v25 = *(_QWORD *)a2;
              if ((*(_QWORD *)a2 & 7) != 0)
              {
                v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
                do
                  v27 = __ldxr(v26);
                while (__stxr(v27 + 2, v26));
                if ((v27 & 1) == 0)
                  v25 &= 0xFFFFFFFFFFFFFFF8;
              }
              v28 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v21, v22);
              if ((*v28 & 7) != 0)
              {
                v29 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
                do
                  v30 = __ldxr(v29);
                while (__stlxr(v30 - 2, v29));
              }
              *v28 = v25;
              break;
            }
          }
          v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
          sub_20C0B4E30(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (uint64_t **)&v38);
        }
        sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
LABEL_38:
        *(_QWORD *)&i = &v38;
        sub_20BEEB2B8((void ***)&i);
        if ((v40 & 7) != 0)
        {
          v32 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
        sub_20BFD265C(&v41);
        v34 = v44;
        if (v44)
        {
          v35 = (unsigned int *)(v44 + 8);
          do
          {
            v36 = __ldxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    sub_20BFD265C(&v45);
  }
  else
  {
    *(_QWORD *)&i = "sdf/childrenUtils.cpp";
    *((_QWORD *)&i + 1) = "Rename";
    v47 = 699;
    v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperAr"
          "gChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy = pxrInternal__aa"
          "pl__pxrReserved__::Sdf_MapperArgChildPolicy]";
    v49 = 0;
    v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v7, v9);
    v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v51);
  sub_20BFD265C(&v50);
  return v6;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  uint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  void ***v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t *v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v41;
  uint64_t **v42;
  uint64_t v43;
  char *v44;
  BOOL v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v50;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v51;
  uint64_t v52;
  char *v53;
  _BOOL4 HasPrefix;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v55;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  const pxrInternal__aapl__pxrReserved__::TfToken *v64;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v65;
  uint64_t v66;
  char *v67;
  _BOOL8 v68;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v69;
  uint64_t v70;
  char *v71;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v72;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v73;
  int v74;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  void ***v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *m;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v87;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v88;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v89;
  uint64_t v90;
  char *v91;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v92;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v100;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v101;
  unsigned int *v102;
  unsigned int v103;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  __int128 k;
  __int128 j;
  char v115[8];
  void *__p[2];
  uint64_t v117;
  const char *v118;
  char v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  uint64_t v127;
  __int128 i;
  uint64_t v129;
  void **v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  sub_20C0BAE84((unsigned int **)&v125);
  v123 = 0uLL;
  v124 = 0;
  __p[1] = 0;
  v117 = 0;
  __p[0] = &__p[1];
  for (i = *a3; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C0D8358(&i))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v6, v7);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8) & 1) != 0)
      goto LABEL_14;
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v9, v10);
    sub_20C0B01EC(v11, (uint64_t)&v126);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v120);
    if (SHIBYTE(v127) < 0)
      operator delete((void *)v126);
    sub_20C0D7FB4((uint64_t **)__p, (uint64_t *)&v120, (uint64_t *)&v120);
    if ((v9 & 1) != 0)
      goto LABEL_9;
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v9, v10);
    v13 = sub_20BFD5244(v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v126);
    v14 = v126;
    v15 = *(_QWORD *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v126 + 1);
    sub_20BFD265C(&v126);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_20BFD265C(&j);
    if (v14 != v15)
LABEL_9:
      v16 = 1;
    else
      v16 = 0;
    if ((v120 & 7) != 0)
    {
      v17 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    if ((v16 & 1) != 0)
    {
LABEL_14:
      v19 = (unsigned int **)sub_20C0D82DC((uint64_t *)&i, v9, v10);
      v20 = *((_QWORD *)&v123 + 1);
      if (*((_QWORD *)&v123 + 1) >= v124)
      {
        v23 = sub_20BFD2FCC((unsigned int ***)&v123, v19);
      }
      else
      {
        v21 = *v19;
        **((_QWORD **)&v123 + 1) = *v19;
        if (v21)
        {
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        v23 = (char *)(v20 + 8);
      }
      *((_QWORD *)&v123 + 1) = v23;
    }
  }
  sub_20BF2B200((uint64_t)__p, (_QWORD *)__p[1]);
  v24 = sub_20BFCF650(a1);
  __p[0] = 0;
  __p[1] = 0;
  v117 = 0;
  v25 = sub_20C0A683C((uint64_t *)(v24 + 112));
  (*(void (**)(__int128 *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v25 + 136))(&i, v25, a2, &v125);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0)
      v26 = (uint64_t **)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    else
      v26 = (uint64_t **)i;
  }
  else
  {
    v26 = (uint64_t **)__p;
  }
  v126 = 0uLL;
  v127 = 0;
  sub_20BFE538C(&v126, *v26, v26[1], v26[1] - *v26);
  v27 = (void ***)sub_20BF4C2D8((uint64_t)&i);
  *(_QWORD *)&i = __p;
  sub_20BEEB2B8(v27);
  *((_QWORD *)&i + 1) = 0;
  v129 = 0;
  *(_QWORD *)&i = (char *)&i + 8;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  sub_20BFC9A6C((char **)&v120, (uint64_t)(*((_QWORD *)&v123 + 1) - v123) >> 3);
  for (j = v123; (_QWORD)j != *((_QWORD *)&j + 1); sub_20C0B8E80(&j))
  {
    v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v28, v29);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v30))
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 181;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mappe"
             "rArgChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPoli"
             "cy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_103;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v31, v32);
    sub_20C0B01EC(v33, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v105);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    v34 = v121;
    if ((unint64_t)v121 >= v122)
    {
      v38 = sub_20BFCA068((char **)&v120, (uint64_t *)&v105);
    }
    else
    {
      v35 = v105;
      *v121 = v105;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 2, v36));
        if ((v37 & 1) == 0)
          *v34 &= 0xFFFFFFFFFFFFFFF8;
      }
      v38 = (char *)(v34 + 1);
    }
    v121 = (uint64_t *)v38;
    sub_20C0D7FB4((uint64_t **)&i, (uint64_t *)&v105, (uint64_t *)&v105);
    if ((v39 & 1) == 0)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 188;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mappe"
             "rArgChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPoli"
             "cy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
LABEL_100:
      if ((v105 & 7) != 0)
      {
        v98 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
LABEL_103:
      v68 = 0;
      goto LABEL_108;
    }
    v41 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v39, v40);
    v42 = (uint64_t **)sub_20BFD5244(v41);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v42, (uint64_t *)__p);
    v45 = sub_20BEB560C((uint64_t)__p, (uint64_t)a1);
    v46 = __p[1];
    if (__p[1])
    {
      v47 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v48 = __ldxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
        (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
    }
    if (!v45)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 193;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mappe"
             "rArgChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPoli"
             "cy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_100;
    }
    v50 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v43, v44);
    v51 = sub_20BFD5244(v50);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v51, &v130);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v130, __p);
    if (*(void **)a2 == __p[0])
    {
      HasPrefix = 0;
    }
    else
    {
      v55 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v52, v53);
      v56 = sub_20BFD5244(v55);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v56, &k);
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
      sub_20BFD265C(&k);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v130 + 1);
    sub_20BFD265C(&v130);
    if (HasPrefix)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 203;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mappe"
             "rArgChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPoli"
             "cy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      goto LABEL_100;
    }
    if ((v105 & 7) != 0)
    {
      v57 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
  *(_OWORD *)__p = v126;
  while (__p[0] != __p[1])
  {
    v61 = (uint64_t *)sub_20C023B14((uint64_t *)__p, v59, v60);
    if ((_QWORD *)((char *)&i + 8) == sub_20C0D8030((uint64_t)&i, v61))
    {
      v64 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B14((uint64_t *)__p, v62, v63);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(a2, v64, &j);
      v65 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v65, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_20BFD265C(&j);
    }
    sub_20C023C08(__p);
  }
  sub_20C0D80BC((uint64_t)&j, (uint64_t *)v126, *((uint64_t **)&v126 + 1));
  for (k = v123; ; sub_20C0B8E80(&k))
  {
    v68 = k == *((_QWORD *)&k + 1);
    if ((_QWORD)k == *((_QWORD *)&k + 1))
      break;
    v69 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&k, v66, v67);
    sub_20C0B01EC(v69, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v112);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v112, &v110);
    v72 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&k, v70, v71);
    v73 = sub_20BFD5244(v72);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v73, __p);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    if (v109 == *(_QWORD *)a2)
    {
      v74 = 10;
    }
    else
    {
      if ((_QWORD *)((char *)&j + 8) != sub_20C0D8030((uint64_t)&j, &v112))
      {
        v75 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v75, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
      }
      sub_20C0BAE84((unsigned int **)&v108);
      v76 = sub_20BFCF650(a1);
      __p[0] = 0;
      __p[1] = 0;
      v117 = 0;
      v77 = sub_20C0A683C((uint64_t *)(v76 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v77 + 136))(&v130, v77, &v109, &v108);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v130))
      {
        if ((v131 & 4) != 0)
          v78 = (uint64_t **)(*(uint64_t (**)(void ***))((v131 & 0xFFFFFFFFFFFFFFF8) + 168))(&v130);
        else
          v78 = (uint64_t **)v130;
      }
      else
      {
        v78 = (uint64_t **)__p;
      }
      v105 = 0;
      v106 = 0;
      v107 = 0;
      sub_20BFE538C(&v105, *v78, v78[1], v78[1] - *v78);
      v79 = (void ***)sub_20BF4C2D8((uint64_t)&v130);
      v130 = __p;
      sub_20BEEB2B8(v79);
      v80 = (uint64_t *)v105;
      if ((uint64_t *)v105 != v106)
      {
        while ((*v80 & 0xFFFFFFFFFFFFFFF8) != (v112 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v80 == v106)
          {
            v80 = v106;
            break;
          }
        }
      }
      if (v80 == v106)
      {
        __p[0] = "sdf/childrenUtils.cpp";
        __p[1] = "SetChildren";
        v117 = 254;
        v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Map"
               "perArgChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename Child"
               "Policy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]";
        v119 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        v74 = 1;
      }
      else
      {
        sub_20C0D813C(v80 + 1, v106, v80);
        for (m = v106; m != v81; --m)
        {
          v84 = *(m - 1);
          v83 = v84;
          if ((v84 & 7) != 0)
          {
            v85 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
            do
              v86 = __ldxr(v85);
            while (__stlxr(v86 - 2, v85));
          }
        }
        v106 = v81;
        if ((uint64_t *)v105 == v81)
        {
          v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v88, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108);
        }
        else
        {
          v87 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v87, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108, (uint64_t **)&v105);
        }
        v89 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        v92 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&k, v90, v91);
        v93 = sub_20BFD5244(v92);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v93, __p);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v89, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_20BFD265C(__p);
        v74 = 0;
      }
      __p[0] = &v105;
      sub_20BEEB2B8((void ***)__p);
      if ((v108 & 7) != 0)
      {
        v94 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
    sub_20BFD265C(&v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v111);
    sub_20BFD265C(&v110);
    if ((v112 & 7) != 0)
    {
      v96 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
      do
        v97 = __ldxr(v96);
      while (__stlxr(v97 - 2, v96));
    }
    if (v74 != 10 && v74)
      goto LABEL_107;
  }
  if ((uint64_t *)v120 == v121)
  {
    v101 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v101, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125);
  }
  else
  {
    v100 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    sub_20C0B4E30(v100, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125, (uint64_t **)&v120);
  }
LABEL_107:
  sub_20BF2B200((uint64_t)&j, *((_QWORD **)&j + 1));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
LABEL_108:
  __p[0] = &v120;
  sub_20BEEB2B8((void ***)__p);
  sub_20BF2B200((uint64_t)&i, *((_QWORD **)&i + 1));
  __p[0] = &v126;
  sub_20BEEB2B8((void ***)__p);
  __p[0] = &v123;
  sub_20BFD2B90((void ***)__p);
  if ((v125 & 7) != 0)
  {
    v102 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  return v68;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_MapperArgChildPolicyEE11SetChildrenERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__16vectorINS_9SdfHandleINS_7SdfSpecEEENSB_9allocatorISF_EEEE(a1, a2, a3);
}

void sub_20C0BC274(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;

  if ((a10 & 7) != 0)
  {
    v39 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  __p = &a34;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BF2B200(v37 - 144, *(_QWORD **)(v37 - 136));
  __p = (uint64_t *)(v37 - 176);
  sub_20BEEB2B8((void ***)&__p);
  __p = (uint64_t *)&a37;
  sub_20BFD2B90((void ***)&__p);
  v41 = *(_QWORD *)(v37 - 184);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t **v8;
  BOOL v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  _BOOL4 HasPrefix;
  uint64_t v23;
  uint64_t v24;
  void **p_p;
  void ***v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  _QWORD *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  const char *Text;
  void ***v38;
  void **v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  int v54;
  void **v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  void *__p;
  const char *v62;
  uint64_t v63;
  const char *v64;
  char v65;
  unsigned int *v66[2];
  void **v67;
  void **v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  sub_20C0BAE84(v66);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 290;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperAr"
          "gChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, i"
          "nt) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  v8 = (uint64_t **)sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&__p);
  v9 = sub_20BEB560C((uint64_t)&__p, (uint64_t)a1);
  v10 = v62;
  if (v62)
  {
    v11 = (unsigned int *)(v62 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!v9)
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 295;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperAr"
          "gChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, i"
          "nt) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_12;
  }
  v14 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v55);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, &__p);
  v15 = __p;
  v16 = *(void **)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
  sub_20BFD265C(&v55);
  if (v15 == v16)
  {
    v17 = 1;
  }
  else
  {
    sub_20C0B01EC(a3, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v60);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v60, &v58);
    v21 = sub_20BFD5244(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v21, &__p);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (HasPrefix)
    {
      __p = "sdf/childrenUtils.cpp";
      v62 = "InsertChild";
      v63 = 312;
      v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mapper"
            "ArgChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType "
            "&, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]";
      v65 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      v17 = 0;
    }
    else
    {
      v23 = sub_20BFCF650(a1);
      __p = 0;
      v62 = 0;
      v63 = 0;
      v24 = sub_20C0A683C((uint64_t *)(v23 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v24 + 136))(&v67, v24, a2, v66);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v67))
      {
        if ((v68 & 4) != 0)
          p_p = (void **)(*(uint64_t (**)(void ***))(((unint64_t)v68 & 0xFFFFFFFFFFFFFFF8) + 168))(&v67);
        else
          p_p = v67;
      }
      else
      {
        p_p = &__p;
      }
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_20BFE538C(&v55, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
      v26 = (void ***)sub_20BF4C2D8((uint64_t)&v67);
      v67 = &__p;
      sub_20BEEB2B8(v26);
      v29 = (unint64_t)((char *)v56 - (char *)v55) >> 3;
      if (a4 != -1)
        LODWORD(v29) = a4;
      v30 = (int)v29;
      if ((int)v29 <= (unint64_t)(((char *)v56 - (char *)v55) >> 3))
      {
        v67 = v55;
        v68 = (void **)v56;
        while (v67 != v68)
        {
          v32 = (_QWORD *)sub_20C023B14((uint64_t *)&v67, v27, v28);
          if ((*v32 & 0xFFFFFFFFFFFFFFF8) == (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            __p = "sdf/childrenUtils.cpp";
            v62 = "InsertChild";
            v63 = 334;
            v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "MapperArgChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy"
                  "::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]";
            v65 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_37;
          }
          sub_20C023C08(&v67);
        }
        v33 = sub_20BFD5244(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v33, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v53);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
        sub_20C0BAE84((unsigned int **)&v52);
        v34 = sub_20BFCF650(a1);
        __p = 0;
        v62 = 0;
        v63 = 0;
        v35 = sub_20C0A683C((uint64_t *)(v34 + 112));
        (*(void (**)(void ***__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v35 + 136))(&v70, v35, &v53, &v52);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v70))
        {
          if ((v71 & 4) != 0)
            v36 = (void **)(*(uint64_t (**)(void ***))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(&v70);
          else
            v36 = v70;
        }
        else
        {
          v36 = &__p;
        }
        v67 = 0;
        v68 = 0;
        v69 = 0;
        sub_20BFE538C(&v67, (uint64_t *)*v36, (uint64_t *)v36[1], ((_BYTE *)v36[1] - (_BYTE *)*v36) >> 3);
        v38 = (void ***)sub_20BF4C2D8((uint64_t)&v70);
        v70 = &__p;
        sub_20BEEB2B8(v38);
        v39 = v67;
        if (v67 != v68)
        {
          while (((unint64_t)*v39 & 0xFFFFFFFFFFFFFFF8) != (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v39 == v68)
            {
              v39 = v68;
              break;
            }
          }
        }
        v17 = v39 != v68;
        if (v39 == v68)
        {
          __p = "sdf/childrenUtils.cpp";
          v62 = "InsertChild";
          v63 = 352;
          v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Ma"
                "pperArgChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Va"
                "lueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]";
          v65 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
          sub_20C0B5D58((uint64_t)&v67, v39);
          if (v67 == v68)
          {
            v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52);
          }
          else
          {
            v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52, (uint64_t **)&v67);
          }
          v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          v43 = sub_20BFD5244(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v43, &v70);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
          sub_20BFD1A18(&v70);
          sub_20C0B66C4(&v55, (char *)&v55[v30], (char *)&v60);
          v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v44, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v66, (uint64_t **)&v55);
          v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v70);
          IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v70);
          if ((IsDormant & 1) == 0)
          {
            Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v70);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v70);
          sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
        }
        __p = &v67;
        sub_20BEEB2B8((void ***)&__p);
        if ((v52 & 7) != 0)
        {
          v48 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
        sub_20BFD265C(&v53);
      }
      else
      {
        __p = "sdf/childrenUtils.cpp";
        v62 = "InsertChild";
        v63 = 326;
        v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mapp"
              "erArgChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueT"
              "ype &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]";
        v65 = 0;
        v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v31, v30);
LABEL_37:
        v17 = 0;
      }
      __p = &v55;
      sub_20BEEB2B8((void ***)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
    sub_20BFD265C(&v58);
    if ((v60 & 7) != 0)
    {
      v50 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
  }
LABEL_13:
  if (((uint64_t)v66[0] & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v66[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  return v17;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_MapperArgChildPolicyEE11InsertChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_7SdfSpecEEEi(a1, a2, a3, a4);
}

void sub_20C0BCC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;

  __p = (__int16 *)(v30 - 112);
  sub_20BEEB2B8((void ***)&__p);
  if ((a11 & 7) != 0)
  {
    v32 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  sub_20BFD1A18(&a12);
  __p = &a14;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a19);
  if ((a20 & 7) != 0)
  {
    v34 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if ((a29 & 7) != 0)
  {
    v36 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  void ***v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v29;
  void **v30[3];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  sub_20C0BAE84((unsigned int **)&v34);
  v4 = sub_20BFCF650(a1);
  memset(v30, 0, sizeof(v30));
  v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v5 + 136))(&v37, v5, a2, &v34);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v37))
  {
    if ((v38 & 4) != 0)
      v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(&v37);
    else
      v6 = (uint64_t **)v37;
  }
  else
  {
    v6 = (uint64_t **)v30;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_20BFE538C(&v31, *v6, v6[1], v6[1] - *v6);
  v7 = (void ***)sub_20BF4C2D8((uint64_t)&v37);
  v37 = (unint64_t)v30;
  sub_20BEEB2B8(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v30);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v37);
  v8 = (uint64_t *)v31;
  v9 = v37;
  if ((uint64_t *)v31 == v32)
  {
LABEL_9:
    v11 = 0;
  }
  else
  {
    v10 = -v31;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v37 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v32)
        goto LABEL_9;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v37, &v35);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    sub_20C0D813C((_QWORD *)(8 - v10), v32, (_QWORD *)-v10);
    for (i = v32; i != v13; --i)
    {
      v16 = *(i - 1);
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    v32 = v13;
    if ((uint64_t *)v31 == v13)
    {
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v20, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v19, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (uint64_t **)&v31);
    }
    v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v21, a2, &v29);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v29);
    if ((IsDormant & 1) == 0)
    {
      Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v29);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
    v11 = 1;
    v9 = v37;
  }
  if ((v9 & 7) != 0)
  {
    v24 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v30);
  v30[0] = (void **)&v31;
  sub_20BEEB2B8(v30);
  if ((v34 & 7) != 0)
  {
    v26 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_24Sdf_MapperArgChildPolicyEE11RemoveChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEE(a1, a2);
}

void sub_20C0BD158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void **p_p;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void ***v21;
  void ***v22;
  char *v23;
  uint64_t v24;
  _BOOL4 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *i;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  char *v34;
  char *j;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  uint64_t IsDormant;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v46;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  unsigned int *v65[2];
  void **v66;
  uint64_t v67;
  uint64_t v68;
  void ***v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  sub_20C0BAE84(v65);
  sub_20C0BD980(a2, a4, &v64);
  v10 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v61);
  v11 = v64;
  v12 = v61;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
  sub_20BFD265C(&v61);
  if (a5 == -2 && v11 == v12)
    goto LABEL_65;
  v13 = sub_20BFCF650(a1);
  __p = 0;
  v59 = 0;
  v60 = 0;
  v14 = sub_20C0A683C((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::TfToken *, unsigned int **))(*(_QWORD *)v14 + 136))(&v66, v14, a2, v65);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v66))
  {
    if ((v67 & 4) != 0)
      p_p = (void **)(*(uint64_t (**)(void ***))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(&v66);
    else
      p_p = v66;
  }
  else
  {
    p_p = &__p;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  sub_20BFE538C(&v61, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
  sub_20BF4C2D8((uint64_t)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  sub_20C0B01EC(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v57);
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
  v16 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (a5 == -2 && v56 == *(_QWORD *)a2)
  {
    if (v61 == v62)
    {
      v17 = v61;
    }
    else
    {
      v17 = v61;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v62)
        {
          v17 = v62;
          break;
        }
      }
    }
    v18 = (unint64_t)((char *)v17 - (char *)v61) >> 3;
  }
  else if (v62 - v61 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v62 - v61;
  }
  sub_20C0BAE84((unsigned int **)&v55);
  v19 = sub_20BFCF650(a1);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v20 = sub_20C0A683C((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v20 + 136))(&v69, v20, &v56, &v55);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v69))
  {
    if ((v70 & 4) != 0)
      v21 = (void ***)(*(uint64_t (**)(void ****))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(&v69);
    else
      v21 = v69;
  }
  else
  {
    v21 = &v66;
  }
  __p = 0;
  v59 = 0;
  v60 = 0;
  sub_20BFE538C(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  v22 = (void ***)sub_20BF4C2D8((uint64_t)&v69);
  v69 = &v66;
  sub_20BEEB2B8(v22);
  v23 = (char *)__p;
  if (__p != v59)
  {
    while ((*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v59)
      {
        v23 = v59;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  if (v56 == *(_QWORD *)a2)
  {
    v24 = v23 - (_BYTE *)__p;
    if ((v57 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8)
      && ((_DWORD)v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == (_DWORD)v18))
    {
      goto LABEL_58;
    }
    v26 = (int)v18 > v24 >> 3;
    v27 = v61;
    if (v61 != v62)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v62)
        {
          v27 = v62;
          break;
        }
      }
    }
    sub_20C0D813C(v27 + 1, v62, v27);
    LODWORD(v18) = v18 - v26;
    for (i = v62; i != v28; --i)
    {
      v31 = *(i - 1);
      v30 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
    }
    v62 = v28;
  }
  else
  {
    sub_20C0D813C((_QWORD *)v23 + 1, v59, v23);
    for (j = v59; j != v34; j -= 8)
    {
      v37 = *((_QWORD *)j - 1);
      v36 = v37;
      if ((v37 & 7) != 0)
      {
        v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
    }
    v59 = v34;
    if (__p == v34)
    {
      v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55);
      v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v69);
      IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v69);
      if ((IsDormant & 1) == 0)
      {
        Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v69);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v69);
    }
    else
    {
      v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55, (uint64_t **)&__p);
    }
  }
  v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v46 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v46, &v69);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
  sub_20BFD265C(&v69);
  sub_20C0B66C4(&v61, (char *)&v61[(int)v18], (char *)a4);
  v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  sub_20C0B4E30(v47, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v65, &v61);
LABEL_58:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  if ((v55 & 7) != 0)
  {
    v48 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if ((v57 & 7) != 0)
  {
    v50 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  __p = &v61;
  sub_20BEEB2B8((void ***)&__p);
LABEL_65:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
  sub_20BFD265C(&v64);
  if (((uint64_t)v65[0] & 7) != 0)
  {
    v52 = (unsigned int *)((unint64_t)v65[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  return 1;
}

void sub_20C0BD7DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  uint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_20BEEB2B8(&p_p);
  if ((a9 & 7) != 0)
  {
    v26 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  sub_20BFD1A18(&a10);
  if ((a11 & 7) != 0)
  {
    v28 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  __p = &a18;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a21);
  if ((a22 & 7) != 0)
  {
    v30 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  _Unwind_Resume(a1);
}

void ***sub_20C0BD980@<X0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t *EmptyString;

  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString))
    return pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(a1, a2, a3);
  *(_QWORD *)a3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
  return (void ***)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  const char *v13;
  _BOOL8 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t **v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  _BOOL4 HasPrefix;
  uint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  void **v39[3];
  unint64_t v40;
  int v41;
  uint64_t v42;
  void *__p;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  void ***v51;

  sub_20C0BAE84((unsigned int **)&v50);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      v13 = "Layer is not editable";
      goto LABEL_7;
    }
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      v13 = "Object does not exist";
LABEL_7:
      MEMORY[0x212B929D0](a6, v13);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v18 = (uint64_t **)sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v18, &v46);
  v19 = sub_20BEB560C((uint64_t)&v46, (uint64_t)a1);
  v20 = v47;
  if (v47)
  {
    v21 = (unsigned int *)(v47 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (!v19)
  {
    if (!a6)
      goto LABEL_8;
    v13 = "Cannot reparent to another layer";
    goto LABEL_7;
  }
  sub_20C0BD980(a2, a4, &v48);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v48))
  {
    if (!a6)
    {
LABEL_27:
      v14 = 0;
      goto LABEL_28;
    }
    v27 = "Invalid name";
LABEL_26:
    MEMORY[0x212B929D0](a6, v27);
    goto LABEL_27;
  }
  v24 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  v25 = v46;
  v26 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (v25 != v26)
  {
    v28 = sub_20BFD5244(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v46);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_20BFD265C(&v46);
    if (!HasPrefix)
    {
      v30 = sub_20BFCF650(a1);
      __p = 0;
      v44 = 0;
      v45 = 0;
      sub_20C0B4D3C(v30, (uint64_t)a2, (uint64_t)&v50, (uint64_t **)&__p, &v46);
      v39[0] = &__p;
      sub_20BEEB2B8(v39);
      v31 = (unint64_t)(v47 - v46) >> 3;
      if (a5 != -1)
        LODWORD(v31) = a5;
      if ((_DWORD)v31 == -2 || (int)v31 <= (unint64_t)((v47 - v46) >> 3))
      {
        sub_20C0B01EC(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
        if (SHIBYTE(v45) < 0)
          operator delete(__p);
        v32 = sub_20BFD5244(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v41);
        sub_20BFD1A18(&__p);
        sub_20C0BAE84((unsigned int **)&v40);
        v33 = sub_20BFCF650(a1);
        memset(v39, 0, sizeof(v39));
        sub_20C0B4D3C(v33, (uint64_t)&v41, (uint64_t)&v40, (uint64_t **)v39, &__p);
        v51 = v39;
        sub_20BEEB2B8((void ***)&v51);
        v34 = __p;
        if (__p != v44)
        {
          while ((*v34 & 0xFFFFFFFFFFFFFFF8) != (v42 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v34 == v44)
            {
              v34 = v44;
              break;
            }
          }
        }
        v14 = v34 != v44;
        if (a6 && v34 == v44)
          MEMORY[0x212B929D0](a6, "Coding error: Object is not in its parent's children");
        v39[0] = &__p;
        sub_20BEEB2B8(v39);
        if ((v40 & 7) != 0)
        {
          v35 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        sub_20BFD1A18(&v41);
        if ((v42 & 7) != 0)
        {
          v37 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
      }
      else
      {
        if (a6)
          MEMORY[0x212B929D0](a6, "Invalid index");
        v14 = 0;
      }
      __p = &v46;
      sub_20BEEB2B8((void ***)&__p);
      goto LABEL_28;
    }
    if (!a6)
      goto LABEL_27;
    v27 = "Cannot reparent object under itself";
    goto LABEL_26;
  }
  v14 = 1;
LABEL_28:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
  sub_20BFD265C(&v48);
LABEL_9:
  if ((v50 & 7) != 0)
  {
    v15 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v14;
}

void sub_20C0BDDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  __p = &a22;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18((_DWORD *)(v23 - 88));
  v25 = *(_QWORD *)(v23 - 80);
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  _BOOL8 v12;
  void ***v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  void **v18[3];
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22[2];
  void ***v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20C0BAE84(v22);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8) & 1) != 0)
  {
    v9 = sub_20BFCF650(a1);
    memset(v18, 0, sizeof(v18));
    v10 = sub_20C0A683C((uint64_t *)(v9 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v10 + 136))(&v23, v10, a2, v22);
    if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
    {
      if ((v24 & 4) != 0)
        v11 = (uint64_t **)(*(uint64_t (**)(void ****))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(&v23);
      else
        v11 = (uint64_t **)v23;
    }
    else
    {
      v11 = (uint64_t **)v18;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_20BFE538C(&v19, *v11, v11[1], v11[1] - *v11);
    v13 = (void ***)sub_20BF4C2D8((uint64_t)&v23);
    v23 = v18;
    sub_20BEEB2B8(v13);
    v14 = v19;
    if (v19 != v20)
    {
      while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v14 == v20)
        {
          v14 = v20;
          break;
        }
      }
    }
    v12 = v14 != v20;
    if (a4 && v14 == v20)
      MEMORY[0x212B929D0](a4, "Object does not exist");
    v18[0] = (void **)&v19;
    sub_20BEEB2B8(v18);
  }
  else
  {
    if (a4)
      MEMORY[0x212B929D0](a4, "Layer is not editable");
    v12 = 0;
  }
  if (((uint64_t)v22[0] & 7) != 0)
  {
    v15 = (unsigned int *)((unint64_t)v22[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v12;
}

void sub_20C0BE124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;

  a10 = (void **)&a13;
  sub_20BEEB2B8(&a10);
  if ((a16 & 7) != 0)
  {
    v17 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::CreateSpec(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;

  v9 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(v8) + 14))
      v10 = *(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::CreateSpec(v10, a2, a3, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_25Sdf_ExpressionChildPolicyEE10CreateSpecERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Spec;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  void **v17;
  const char *Text;
  void **v19;
  unsigned int *v21;
  void *__p[2];
  char v23;
  char v24[8];
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;

  if ((_DWORD)a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
    Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if ((Spec & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v25);
      sub_20C0BE47C((unsigned int **)__p);
      v9 = *(unsigned int **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v21 = v9;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          v21 = v10;
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, 1);
      if ((v21 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v14 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_20BFD265C(&v25);
    }
    else
    {
      v25 = "sdf/childrenUtils.cpp";
      v26 = "CreateSpec";
      v27 = 101;
      v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Expres"
            "sionChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aap"
            "l__pxrReserved__::Sdf_ExpressionChildPolicy]";
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C524D70, a3, (uint64_t)__p);
      v16 = v23;
      v17 = (void **)__p[0];
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v19 = __p;
      if (v16 < 0)
        v19 = v17;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v19, Text);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  }
  else
  {
    v25 = "sdf/childrenUtils.cpp";
    v26 = "CreateSpec";
    v27 = 90;
    v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Expressi"
          "onChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__p"
          "xrReserved__::Sdf_ExpressionChildPolicy]";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_25Sdf_ExpressionChildPolicyEE10CreateSpecEPNS_8SdfLayerERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

void sub_20C0BE3E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a18);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_20C0BE47C@<X0>(unsigned int **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result)
    result = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v3 = (unsigned int *)*((_QWORD *)result + 1);
  *a1 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 = v4;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::IsValidName(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t *EmptyString;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_25Sdf_ExpressionChildPolicyEE11IsValidNameERKNS_7TfTokenE(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::CanRename@<X0>(uint64_t **a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  char v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  void *v13;
  _QWORD *result;
  const char *Text;
  const char *v16;
  char *v17;
  unint64_t v18;
  const char *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  int HasSpec;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  void *v27;
  void *__p[2];
  uint64_t v29;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
  v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v6);
  v8 = __p[1];
  if (__p[1])
  {
    v9 = (unsigned int *)((char *)__p[1] + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
  }
  if ((v7 & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::IsValidName(a2))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      sub_20C0BE810((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      v12 = v27;
      v13 = __p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      if (v12 == v13)
        goto LABEL_9;
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v27))
        goto LABEL_21;
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
      HasSpec = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v22 = __p[1];
      if (__p[1])
      {
        v23 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v24 = __ldxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
      }
      if (!HasSpec)
      {
LABEL_9:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 24) = 0;
      }
      else
      {
LABEL_21:
        sub_20BDDC0E4(__p, "An object with that name already exists");
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v27);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v18 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v16, v17, Text, v19);
      if (SHIBYTE(v29) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, __p[0], (unint64_t)__p[1]);
        v26 = SHIBYTE(v29);
        *(_BYTE *)(a3 + 24) = 1;
        if (v26 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    return sub_20BFD265C(&v27);
  }
  else
  {
    result = sub_20BDDC0E4(__p, "Layer is not editable");
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v29;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

void sub_20C0BE770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0BE810@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, _DWORD *a2@<X8>)
{
  int v4;
  int v5;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v4);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression((pxrInternal__aapl__pxrReserved__::SdfPath *)&v4, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v5);
  return sub_20BFD265C(&v4);
}

void sub_20C0BE860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::Rename(pxrInternal__aapl__pxrReserved__::SdfSpec *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  void ***v14;
  uint64_t v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  const char *Text;
  const char *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 i;
  uint64_t v47;
  const char *v48;
  char v49;
  int v50;
  _DWORD v51[3];
  uint64_t v52[3];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &v50);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::IsValidName(a2))
  {
    sub_20C0BE810((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v45);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v45))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &i);
      v4 = v45;
      v5 = i;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 1);
      sub_20BFD265C(&i);
      if (v4 == v5)
      {
        v6 = 1;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v43);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v41);
        sub_20C0BE47C((unsigned int **)&v40);
        v11 = sub_20BFCF650(&v43);
        i = 0uLL;
        v47 = 0;
        v12 = sub_20C0A683C((uint64_t *)(v11 + 112));
        (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v12 + 136))(v52, v12, &v41, &v40);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)v52))
        {
          if ((v52[1] & 4) != 0)
            v13 = (uint64_t **)(*(uint64_t (**)(uint64_t *))((v52[1] & 0xFFFFFFFFFFFFFFF8) + 168))(v52);
          else
            v13 = (uint64_t **)v52[0];
        }
        else
        {
          v13 = (uint64_t **)&i;
        }
        v38 = 0uLL;
        v39 = 0;
        sub_20BFE538C(&v38, *v13, v13[1], v13[1] - *v13);
        v14 = (void ***)sub_20BF4C2D8((uint64_t)v52);
        v52[0] = (uint64_t)&i;
        sub_20BEEB2B8(v14);
        *(_OWORD *)v52 = v38;
        while (v52[0] != v52[1])
        {
          if ((*(_QWORD *)sub_20C023B14(v52, v15, v16) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
          {
            *(_QWORD *)&i = "sdf/childrenUtils.cpp";
            *((_QWORD *)&i + 1) = "Rename";
            v47 = 726;
            v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "ExpressionChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy "
                  "= pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]";
            v49 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to %s because a sibling with that name already exists", Text, v24);
            v6 = 0;
            goto LABEL_38;
          }
          sub_20C023C08(v52);
        }
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
        v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
        v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
        if ((v6 & 1) != 0)
        {
          for (i = v38; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
          {
            v20 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v18, v19);
            if ((*v20 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50) & 0xFFFFFFFFFFFFFFF8))
            {
              v25 = *(_QWORD *)a2;
              if ((*(_QWORD *)a2 & 7) != 0)
              {
                v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
                do
                  v27 = __ldxr(v26);
                while (__stxr(v27 + 2, v26));
                if ((v27 & 1) == 0)
                  v25 &= 0xFFFFFFFFFFFFFFF8;
              }
              v28 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v21, v22);
              if ((*v28 & 7) != 0)
              {
                v29 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
                do
                  v30 = __ldxr(v29);
                while (__stlxr(v30 - 2, v29));
              }
              *v28 = v25;
              break;
            }
          }
          v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
          sub_20C0B4E30(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (uint64_t **)&v38);
        }
        sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
LABEL_38:
        *(_QWORD *)&i = &v38;
        sub_20BEEB2B8((void ***)&i);
        if ((v40 & 7) != 0)
        {
          v32 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
        sub_20BFD265C(&v41);
        v34 = v44;
        if (v44)
        {
          v35 = (unsigned int *)(v44 + 8);
          do
          {
            v36 = __ldxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    sub_20BFD265C(&v45);
  }
  else
  {
    *(_QWORD *)&i = "sdf/childrenUtils.cpp";
    *((_QWORD *)&i + 1) = "Rename";
    v47 = 699;
    v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Expressi"
          "onChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy = pxrInternal__a"
          "apl__pxrReserved__::Sdf_ExpressionChildPolicy]";
    v49 = 0;
    v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v7, v9);
    v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v51);
  sub_20BFD265C(&v50);
  return v6;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  uint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  void ***v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t *v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v41;
  uint64_t **v42;
  uint64_t v43;
  char *v44;
  BOOL v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v50;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v51;
  uint64_t v52;
  char *v53;
  _BOOL4 HasPrefix;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v55;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v64;
  uint64_t v65;
  char *v66;
  _BOOL8 v67;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v68;
  uint64_t v69;
  char *v70;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v71;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v72;
  int v73;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t **v77;
  void ***v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *m;
  uint64_t v82;
  uint64_t v83;
  unsigned int *v84;
  unsigned int v85;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v86;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v87;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v88;
  uint64_t v89;
  char *v90;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v91;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v92;
  unsigned int *v93;
  unsigned int v94;
  unsigned int *v95;
  unsigned int v96;
  unsigned int *v97;
  unsigned int v98;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v99;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v100;
  unsigned int *v101;
  unsigned int v102;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  __int128 k;
  __int128 j;
  char v114[8];
  void *__p[2];
  uint64_t v116;
  const char *v117;
  char v118;
  unint64_t v119;
  uint64_t *v120;
  unint64_t v121;
  __int128 v122;
  unint64_t v123;
  unint64_t v124;
  __int128 v125;
  uint64_t v126;
  __int128 i;
  uint64_t v128;
  void **v129;
  uint64_t v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  sub_20C0BE47C((unsigned int **)&v124);
  v122 = 0uLL;
  v123 = 0;
  __p[1] = 0;
  v116 = 0;
  __p[0] = &__p[1];
  for (i = *a3; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C0D8358(&i))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v6, v7);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8) & 1) != 0)
      goto LABEL_14;
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v9, v10);
    sub_20C0B01EC(v11, (uint64_t)&v125);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v119);
    if (SHIBYTE(v126) < 0)
      operator delete((void *)v125);
    sub_20C0D7FB4((uint64_t **)__p, (uint64_t *)&v119, (uint64_t *)&v119);
    if ((v9 & 1) != 0)
      goto LABEL_9;
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v9, v10);
    v13 = sub_20BFD5244(v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v125);
    v14 = v125;
    v15 = *(_QWORD *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v125 + 1);
    sub_20BFD265C(&v125);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_20BFD265C(&j);
    if (v14 != v15)
LABEL_9:
      v16 = 1;
    else
      v16 = 0;
    if ((v119 & 7) != 0)
    {
      v17 = (unsigned int *)(v119 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    if ((v16 & 1) != 0)
    {
LABEL_14:
      v19 = (unsigned int **)sub_20C0D82DC((uint64_t *)&i, v9, v10);
      v20 = *((_QWORD *)&v122 + 1);
      if (*((_QWORD *)&v122 + 1) >= v123)
      {
        v23 = sub_20BFD2FCC((unsigned int ***)&v122, v19);
      }
      else
      {
        v21 = *v19;
        **((_QWORD **)&v122 + 1) = *v19;
        if (v21)
        {
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        v23 = (char *)(v20 + 8);
      }
      *((_QWORD *)&v122 + 1) = v23;
    }
  }
  sub_20BF2B200((uint64_t)__p, (_QWORD *)__p[1]);
  v24 = sub_20BFCF650(a1);
  __p[0] = 0;
  __p[1] = 0;
  v116 = 0;
  v25 = sub_20C0A683C((uint64_t *)(v24 + 112));
  (*(void (**)(__int128 *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v25 + 136))(&i, v25, a2, &v124);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0)
      v26 = (uint64_t **)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    else
      v26 = (uint64_t **)i;
  }
  else
  {
    v26 = (uint64_t **)__p;
  }
  v125 = 0uLL;
  v126 = 0;
  sub_20BFE538C(&v125, *v26, v26[1], v26[1] - *v26);
  v27 = (void ***)sub_20BF4C2D8((uint64_t)&i);
  *(_QWORD *)&i = __p;
  sub_20BEEB2B8(v27);
  *((_QWORD *)&i + 1) = 0;
  v128 = 0;
  *(_QWORD *)&i = (char *)&i + 8;
  v119 = 0;
  v120 = 0;
  v121 = 0;
  sub_20BFC9A6C((char **)&v119, (uint64_t)(*((_QWORD *)&v122 + 1) - v122) >> 3);
  for (j = v122; (_QWORD)j != *((_QWORD *)&j + 1); sub_20C0B8E80(&j))
  {
    v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v28, v29);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v30))
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v116 = 181;
      v117 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Expre"
             "ssionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
             "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]";
      v118 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_103;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v31, v32);
    sub_20C0B01EC(v33, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v104);
    if (SHIBYTE(v116) < 0)
      operator delete(__p[0]);
    v34 = v120;
    if ((unint64_t)v120 >= v121)
    {
      v38 = sub_20BFCA068((char **)&v119, (uint64_t *)&v104);
    }
    else
    {
      v35 = v104;
      *v120 = v104;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 2, v36));
        if ((v37 & 1) == 0)
          *v34 &= 0xFFFFFFFFFFFFFFF8;
      }
      v38 = (char *)(v34 + 1);
    }
    v120 = (uint64_t *)v38;
    sub_20C0D7FB4((uint64_t **)&i, (uint64_t *)&v104, (uint64_t *)&v104);
    if ((v39 & 1) == 0)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v116 = 188;
      v117 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Expre"
             "ssionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
             "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]";
      v118 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
LABEL_100:
      if ((v104 & 7) != 0)
      {
        v97 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
        do
          v98 = __ldxr(v97);
        while (__stlxr(v98 - 2, v97));
      }
LABEL_103:
      v67 = 0;
      goto LABEL_108;
    }
    v41 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v39, v40);
    v42 = (uint64_t **)sub_20BFD5244(v41);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v42, (uint64_t *)__p);
    v45 = sub_20BEB560C((uint64_t)__p, (uint64_t)a1);
    v46 = __p[1];
    if (__p[1])
    {
      v47 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v48 = __ldxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
        (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
    }
    if (!v45)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v116 = 193;
      v117 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Expre"
             "ssionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
             "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]";
      v118 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_100;
    }
    v50 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v43, v44);
    v51 = sub_20BFD5244(v50);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v51, &v129);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v129, __p);
    if (*(void **)a2 == __p[0])
    {
      HasPrefix = 0;
    }
    else
    {
      v55 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v52, v53);
      v56 = sub_20BFD5244(v55);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v56, &k);
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
      sub_20BFD265C(&k);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v129 + 1);
    sub_20BFD265C(&v129);
    if (HasPrefix)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v116 = 203;
      v117 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Expre"
             "ssionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
             "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]";
      v118 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      goto LABEL_100;
    }
    if ((v104 & 7) != 0)
    {
      v57 = (unsigned int *)(v104 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v114);
  *(_OWORD *)__p = v125;
  while (__p[0] != __p[1])
  {
    v61 = (uint64_t *)sub_20C023B14((uint64_t *)__p, v59, v60);
    if ((_QWORD *)((char *)&i + 8) == sub_20C0D8030((uint64_t)&i, v61))
    {
      sub_20C023B14((uint64_t *)__p, v62, v63);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a2, &j);
      v64 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v64, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_20BFD265C(&j);
    }
    sub_20C023C08(__p);
  }
  sub_20C0D80BC((uint64_t)&j, (uint64_t *)v125, *((uint64_t **)&v125 + 1));
  for (k = v122; ; sub_20C0B8E80(&k))
  {
    v67 = k == *((_QWORD *)&k + 1);
    if ((_QWORD)k == *((_QWORD *)&k + 1))
      break;
    v68 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&k, v65, v66);
    sub_20C0B01EC(v68, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v111);
    if (SHIBYTE(v116) < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a2, &v109);
    v71 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&k, v69, v70);
    v72 = sub_20BFD5244(v71);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v72, __p);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v108);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    if (v108 == *(_QWORD *)a2)
    {
      v73 = 10;
    }
    else
    {
      if ((_QWORD *)((char *)&j + 8) != sub_20C0D8030((uint64_t)&j, &v111))
      {
        v74 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v74, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109);
      }
      sub_20C0BE47C((unsigned int **)&v107);
      v75 = sub_20BFCF650(a1);
      __p[0] = 0;
      __p[1] = 0;
      v116 = 0;
      v76 = sub_20C0A683C((uint64_t *)(v75 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v76 + 136))(&v129, v76, &v108, &v107);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v129))
      {
        if ((v130 & 4) != 0)
          v77 = (uint64_t **)(*(uint64_t (**)(void ***))((v130 & 0xFFFFFFFFFFFFFFF8) + 168))(&v129);
        else
          v77 = (uint64_t **)v129;
      }
      else
      {
        v77 = (uint64_t **)__p;
      }
      v104 = 0;
      v105 = 0;
      v106 = 0;
      sub_20BFE538C(&v104, *v77, v77[1], v77[1] - *v77);
      v78 = (void ***)sub_20BF4C2D8((uint64_t)&v129);
      v129 = __p;
      sub_20BEEB2B8(v78);
      v79 = (uint64_t *)v104;
      if ((uint64_t *)v104 != v105)
      {
        while ((*v79 & 0xFFFFFFFFFFFFFFF8) != (v111 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v79 == v105)
          {
            v79 = v105;
            break;
          }
        }
      }
      if (v79 == v105)
      {
        __p[0] = "sdf/childrenUtils.cpp";
        __p[1] = "SetChildren";
        v116 = 254;
        v117 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Exp"
               "ressionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename Chil"
               "dPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]";
        v118 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        v73 = 1;
      }
      else
      {
        sub_20C0D813C(v79 + 1, v105, v79);
        for (m = v105; m != v80; --m)
        {
          v83 = *(m - 1);
          v82 = v83;
          if ((v83 & 7) != 0)
          {
            v84 = (unsigned int *)(v82 & 0xFFFFFFFFFFFFFFF8);
            do
              v85 = __ldxr(v84);
            while (__stlxr(v85 - 2, v84));
          }
        }
        v105 = v80;
        if ((uint64_t *)v104 == v80)
        {
          v87 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v87, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v108, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v107);
        }
        else
        {
          v86 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v86, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v108, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v107, (uint64_t **)&v104);
        }
        v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        v91 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&k, v89, v90);
        v92 = sub_20BFD5244(v91);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v92, __p);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v88, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_20BFD265C(__p);
        v73 = 0;
      }
      __p[0] = &v104;
      sub_20BEEB2B8((void ***)__p);
      if ((v107 & 7) != 0)
      {
        v93 = (unsigned int *)(v107 & 0xFFFFFFFFFFFFFFF8);
        do
          v94 = __ldxr(v93);
        while (__stlxr(v94 - 2, v93));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v108 + 1);
    sub_20BFD265C(&v108);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v110);
    sub_20BFD265C(&v109);
    if ((v111 & 7) != 0)
    {
      v95 = (unsigned int *)(v111 & 0xFFFFFFFFFFFFFFF8);
      do
        v96 = __ldxr(v95);
      while (__stlxr(v96 - 2, v95));
    }
    if (v73 != 10 && v73)
      goto LABEL_107;
  }
  if ((uint64_t *)v119 == v120)
  {
    v100 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v100, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v124);
  }
  else
  {
    v99 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    sub_20C0B4E30(v99, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v124, (uint64_t **)&v119);
  }
LABEL_107:
  sub_20BF2B200((uint64_t)&j, *((_QWORD **)&j + 1));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v114);
LABEL_108:
  __p[0] = &v119;
  sub_20BEEB2B8((void ***)__p);
  sub_20BF2B200((uint64_t)&i, *((_QWORD **)&i + 1));
  __p[0] = &v125;
  sub_20BEEB2B8((void ***)__p);
  __p[0] = &v122;
  sub_20BFD2B90((void ***)__p);
  if ((v124 & 7) != 0)
  {
    v101 = (unsigned int *)(v124 & 0xFFFFFFFFFFFFFFF8);
    do
      v102 = __ldxr(v101);
    while (__stlxr(v102 - 2, v101));
  }
  return v67;
}

void sub_20C0BF804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;

  if ((a10 & 7) != 0)
  {
    v39 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  __p = &a34;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BF2B200(v37 - 144, *(_QWORD **)(v37 - 136));
  __p = (uint64_t *)(v37 - 176);
  sub_20BEEB2B8((void ***)&__p);
  __p = (uint64_t *)&a37;
  sub_20BFD2B90((void ***)&__p);
  v41 = *(_QWORD *)(v37 - 184);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t **v8;
  BOOL v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  _BOOL4 HasPrefix;
  uint64_t v23;
  uint64_t v24;
  void **p_p;
  void ***v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  _QWORD *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  const char *Text;
  void ***v38;
  void **v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  int v54;
  void **v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  void *__p;
  const char *v62;
  uint64_t v63;
  const char *v64;
  char v65;
  unsigned int *v66[2];
  void **v67;
  void **v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  sub_20C0BE47C(v66);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 290;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Expressi"
          "onChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, "
          "int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  v8 = (uint64_t **)sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&__p);
  v9 = sub_20BEB560C((uint64_t)&__p, (uint64_t)a1);
  v10 = v62;
  if (v62)
  {
    v11 = (unsigned int *)(v62 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!v9)
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 295;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Expressi"
          "onChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, "
          "int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_12;
  }
  v14 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v55);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, &__p);
  v15 = __p;
  v16 = *(void **)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
  sub_20BFD265C(&v55);
  if (v15 == v16)
  {
    v17 = 1;
  }
  else
  {
    sub_20C0B01EC(a3, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v60);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a2, &v58);
    v21 = sub_20BFD5244(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v21, &__p);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (HasPrefix)
    {
      __p = "sdf/childrenUtils.cpp";
      v62 = "InsertChild";
      v63 = 312;
      v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Expres"
            "sionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType"
            " &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]";
      v65 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      v17 = 0;
    }
    else
    {
      v23 = sub_20BFCF650(a1);
      __p = 0;
      v62 = 0;
      v63 = 0;
      v24 = sub_20C0A683C((uint64_t *)(v23 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v24 + 136))(&v67, v24, a2, v66);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v67))
      {
        if ((v68 & 4) != 0)
          p_p = (void **)(*(uint64_t (**)(void ***))(((unint64_t)v68 & 0xFFFFFFFFFFFFFFF8) + 168))(&v67);
        else
          p_p = v67;
      }
      else
      {
        p_p = &__p;
      }
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_20BFE538C(&v55, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
      v26 = (void ***)sub_20BF4C2D8((uint64_t)&v67);
      v67 = &__p;
      sub_20BEEB2B8(v26);
      v29 = (unint64_t)((char *)v56 - (char *)v55) >> 3;
      if (a4 != -1)
        LODWORD(v29) = a4;
      v30 = (int)v29;
      if ((int)v29 <= (unint64_t)(((char *)v56 - (char *)v55) >> 3))
      {
        v67 = v55;
        v68 = (void **)v56;
        while (v67 != v68)
        {
          v32 = (_QWORD *)sub_20C023B14((uint64_t *)&v67, v27, v28);
          if ((*v32 & 0xFFFFFFFFFFFFFFF8) == (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            __p = "sdf/childrenUtils.cpp";
            v62 = "InsertChild";
            v63 = 334;
            v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "ExpressionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolic"
                  "y::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]";
            v65 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_37;
          }
          sub_20C023C08(&v67);
        }
        v33 = sub_20BFD5244(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v33, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v53);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
        sub_20C0BE47C((unsigned int **)&v52);
        v34 = sub_20BFCF650(a1);
        __p = 0;
        v62 = 0;
        v63 = 0;
        v35 = sub_20C0A683C((uint64_t *)(v34 + 112));
        (*(void (**)(void ***__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v35 + 136))(&v70, v35, &v53, &v52);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v70))
        {
          if ((v71 & 4) != 0)
            v36 = (void **)(*(uint64_t (**)(void ***))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(&v70);
          else
            v36 = v70;
        }
        else
        {
          v36 = &__p;
        }
        v67 = 0;
        v68 = 0;
        v69 = 0;
        sub_20BFE538C(&v67, (uint64_t *)*v36, (uint64_t *)v36[1], ((_BYTE *)v36[1] - (_BYTE *)*v36) >> 3);
        v38 = (void ***)sub_20BF4C2D8((uint64_t)&v70);
        v70 = &__p;
        sub_20BEEB2B8(v38);
        v39 = v67;
        if (v67 != v68)
        {
          while (((unint64_t)*v39 & 0xFFFFFFFFFFFFFFF8) != (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v39 == v68)
            {
              v39 = v68;
              break;
            }
          }
        }
        v17 = v39 != v68;
        if (v39 == v68)
        {
          __p = "sdf/childrenUtils.cpp";
          v62 = "InsertChild";
          v63 = 352;
          v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Ex"
                "pressionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::V"
                "alueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]";
          v65 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
          sub_20C0B5D58((uint64_t)&v67, v39);
          if (v67 == v68)
          {
            v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52);
          }
          else
          {
            v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52, (uint64_t **)&v67);
          }
          v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          v43 = sub_20BFD5244(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v43, &v70);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
          sub_20BFD1A18(&v70);
          sub_20C0B66C4(&v55, (char *)&v55[v30], (char *)&v60);
          v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v44, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v66, (uint64_t **)&v55);
          v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v70);
          IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v70);
          if ((IsDormant & 1) == 0)
          {
            Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v70);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v70);
          sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
        }
        __p = &v67;
        sub_20BEEB2B8((void ***)&__p);
        if ((v52 & 7) != 0)
        {
          v48 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
        sub_20BFD265C(&v53);
      }
      else
      {
        __p = "sdf/childrenUtils.cpp";
        v62 = "InsertChild";
        v63 = 326;
        v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Expr"
              "essionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Value"
              "Type &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]";
        v65 = 0;
        v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v31, v30);
LABEL_37:
        v17 = 0;
      }
      __p = &v55;
      sub_20BEEB2B8((void ***)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
    sub_20BFD265C(&v58);
    if ((v60 & 7) != 0)
    {
      v50 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
  }
LABEL_13:
  if (((uint64_t)v66[0] & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v66[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  return v17;
}

void sub_20C0C0224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;

  __p = (__int16 *)(v30 - 112);
  sub_20BEEB2B8((void ***)&__p);
  if ((a11 & 7) != 0)
  {
    v32 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  sub_20BFD1A18(&a12);
  __p = &a14;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a19);
  if ((a20 & 7) != 0)
  {
    v34 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if ((a29 & 7) != 0)
  {
    v36 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  void ***v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v29;
  void **v30[3];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  sub_20C0BE47C((unsigned int **)&v34);
  v4 = sub_20BFCF650(a1);
  memset(v30, 0, sizeof(v30));
  v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v5 + 136))(&v37, v5, a2, &v34);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v37))
  {
    if ((v38 & 4) != 0)
      v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(&v37);
    else
      v6 = (uint64_t **)v37;
  }
  else
  {
    v6 = (uint64_t **)v30;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_20BFE538C(&v31, *v6, v6[1], v6[1] - *v6);
  v7 = (void ***)sub_20BF4C2D8((uint64_t)&v37);
  v37 = (unint64_t)v30;
  sub_20BEEB2B8(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v30);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v37);
  v8 = (uint64_t *)v31;
  v9 = v37;
  if ((uint64_t *)v31 == v32)
  {
LABEL_9:
    v11 = 0;
  }
  else
  {
    v10 = -v31;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v37 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v32)
        goto LABEL_9;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a2, &v35);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    sub_20C0D813C((_QWORD *)(8 - v10), v32, (_QWORD *)-v10);
    for (i = v32; i != v13; --i)
    {
      v16 = *(i - 1);
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    v32 = v13;
    if ((uint64_t *)v31 == v13)
    {
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v20, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v19, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (uint64_t **)&v31);
    }
    v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v21, a2, &v29);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v29);
    if ((IsDormant & 1) == 0)
    {
      Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v29);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
    v11 = 1;
    v9 = v37;
  }
  if ((v9 & 7) != 0)
  {
    v24 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v30);
  v30[0] = (void **)&v31;
  sub_20BEEB2B8(v30);
  if ((v34 & 7) != 0)
  {
    v26 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_25Sdf_ExpressionChildPolicyEE11RemoveChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEE(a1, a2);
}

void sub_20C0C06E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, char *a4, int a5)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void **p_p;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void ***v21;
  void ***v22;
  char *v23;
  uint64_t v24;
  _BOOL4 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *i;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  char *v34;
  char *j;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  uint64_t IsDormant;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v46;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  unsigned int *v65[2];
  void **v66;
  uint64_t v67;
  uint64_t v68;
  void ***v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  sub_20C0BE47C(v65);
  sub_20C0C0F08(a2, a4, &v64);
  v10 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v61);
  v11 = v64;
  v12 = v61;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
  sub_20BFD265C(&v61);
  if (a5 == -2 && v11 == v12)
    goto LABEL_65;
  v13 = sub_20BFCF650(a1);
  __p = 0;
  v59 = 0;
  v60 = 0;
  v14 = sub_20C0A683C((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::TfToken *, unsigned int **))(*(_QWORD *)v14 + 136))(&v66, v14, a2, v65);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v66))
  {
    if ((v67 & 4) != 0)
      p_p = (void **)(*(uint64_t (**)(void ***))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(&v66);
    else
      p_p = v66;
  }
  else
  {
    p_p = &__p;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  sub_20BFE538C(&v61, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
  sub_20BF4C2D8((uint64_t)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  sub_20C0B01EC(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v57);
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
  v16 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (a5 == -2 && v56 == *(_QWORD *)a2)
  {
    if (v61 == v62)
    {
      v17 = v61;
    }
    else
    {
      v17 = v61;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v62)
        {
          v17 = v62;
          break;
        }
      }
    }
    v18 = (unint64_t)((char *)v17 - (char *)v61) >> 3;
  }
  else if (v62 - v61 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v62 - v61;
  }
  sub_20C0BE47C((unsigned int **)&v55);
  v19 = sub_20BFCF650(a1);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v20 = sub_20C0A683C((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v20 + 136))(&v69, v20, &v56, &v55);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v69))
  {
    if ((v70 & 4) != 0)
      v21 = (void ***)(*(uint64_t (**)(void ****))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(&v69);
    else
      v21 = v69;
  }
  else
  {
    v21 = &v66;
  }
  __p = 0;
  v59 = 0;
  v60 = 0;
  sub_20BFE538C(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  v22 = (void ***)sub_20BF4C2D8((uint64_t)&v69);
  v69 = &v66;
  sub_20BEEB2B8(v22);
  v23 = (char *)__p;
  if (__p != v59)
  {
    while ((*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v59)
      {
        v23 = v59;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  if (v56 == *(_QWORD *)a2)
  {
    v24 = v23 - (_BYTE *)__p;
    if ((v57 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8)
      && ((_DWORD)v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == (_DWORD)v18))
    {
      goto LABEL_58;
    }
    v26 = (int)v18 > v24 >> 3;
    v27 = v61;
    if (v61 != v62)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v62)
        {
          v27 = v62;
          break;
        }
      }
    }
    sub_20C0D813C(v27 + 1, v62, v27);
    LODWORD(v18) = v18 - v26;
    for (i = v62; i != v28; --i)
    {
      v31 = *(i - 1);
      v30 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
    }
    v62 = v28;
  }
  else
  {
    sub_20C0D813C((_QWORD *)v23 + 1, v59, v23);
    for (j = v59; j != v34; j -= 8)
    {
      v37 = *((_QWORD *)j - 1);
      v36 = v37;
      if ((v37 & 7) != 0)
      {
        v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
    }
    v59 = v34;
    if (__p == v34)
    {
      v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55);
      v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v69);
      IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v69);
      if ((IsDormant & 1) == 0)
      {
        Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v69);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v69);
    }
    else
    {
      v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55, (uint64_t **)&__p);
    }
  }
  v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v46 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v46, &v69);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
  sub_20BFD265C(&v69);
  sub_20C0B66C4(&v61, (char *)&v61[(int)v18], a4);
  v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  sub_20C0B4E30(v47, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v65, &v61);
LABEL_58:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  if ((v55 & 7) != 0)
  {
    v48 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if ((v57 & 7) != 0)
  {
    v50 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  __p = &v61;
  sub_20BEEB2B8((void ***)&__p);
LABEL_65:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
  sub_20BFD265C(&v64);
  if (((uint64_t)v65[0] & 7) != 0)
  {
    v52 = (unsigned int *)((unint64_t)v65[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  return 1;
}

void sub_20C0C0D64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  uint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_20BEEB2B8(&p_p);
  if ((a9 & 7) != 0)
  {
    v26 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  sub_20BFD1A18(&a10);
  if ((a11 & 7) != 0)
  {
    v28 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  __p = &a18;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a21);
  if ((a22 & 7) != 0)
  {
    v30 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  _Unwind_Resume(a1);
}

void ***sub_20C0C0F08@<X0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t *EmptyString;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString))
    return pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a1, a3);
  *(_QWORD *)a3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
  return (void ***)pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, _QWORD *a4, int a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  const char *v13;
  _BOOL8 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t **v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  _BOOL4 HasPrefix;
  uint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  void **v39[3];
  unint64_t v40;
  int v41;
  uint64_t v42;
  void *__p;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  void ***v51;

  sub_20C0BE47C((unsigned int **)&v50);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      v13 = "Layer is not editable";
      goto LABEL_7;
    }
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      v13 = "Object does not exist";
LABEL_7:
      MEMORY[0x212B929D0](a6, v13);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v18 = (uint64_t **)sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v18, &v46);
  v19 = sub_20BEB560C((uint64_t)&v46, (uint64_t)a1);
  v20 = v47;
  if (v47)
  {
    v21 = (unsigned int *)(v47 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (!v19)
  {
    if (!a6)
      goto LABEL_8;
    v13 = "Cannot reparent to another layer";
    goto LABEL_7;
  }
  sub_20C0C0F08(a2, a4, &v48);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v48))
  {
    if (!a6)
    {
LABEL_27:
      v14 = 0;
      goto LABEL_28;
    }
    v27 = "Invalid name";
LABEL_26:
    MEMORY[0x212B929D0](a6, v27);
    goto LABEL_27;
  }
  v24 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  v25 = v46;
  v26 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (v25 != v26)
  {
    v28 = sub_20BFD5244(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v46);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_20BFD265C(&v46);
    if (!HasPrefix)
    {
      v30 = sub_20BFCF650(a1);
      __p = 0;
      v44 = 0;
      v45 = 0;
      sub_20C0B4D3C(v30, (uint64_t)a2, (uint64_t)&v50, (uint64_t **)&__p, &v46);
      v39[0] = &__p;
      sub_20BEEB2B8(v39);
      v31 = (unint64_t)(v47 - v46) >> 3;
      if (a5 != -1)
        LODWORD(v31) = a5;
      if ((_DWORD)v31 == -2 || (int)v31 <= (unint64_t)((v47 - v46) >> 3))
      {
        sub_20C0B01EC(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
        if (SHIBYTE(v45) < 0)
          operator delete(__p);
        v32 = sub_20BFD5244(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v41);
        sub_20BFD1A18(&__p);
        sub_20C0BE47C((unsigned int **)&v40);
        v33 = sub_20BFCF650(a1);
        memset(v39, 0, sizeof(v39));
        sub_20C0B4D3C(v33, (uint64_t)&v41, (uint64_t)&v40, (uint64_t **)v39, &__p);
        v51 = v39;
        sub_20BEEB2B8((void ***)&v51);
        v34 = __p;
        if (__p != v44)
        {
          while ((*v34 & 0xFFFFFFFFFFFFFFF8) != (v42 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v34 == v44)
            {
              v34 = v44;
              break;
            }
          }
        }
        v14 = v34 != v44;
        if (a6 && v34 == v44)
          MEMORY[0x212B929D0](a6, "Coding error: Object is not in its parent's children");
        v39[0] = &__p;
        sub_20BEEB2B8(v39);
        if ((v40 & 7) != 0)
        {
          v35 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        sub_20BFD1A18(&v41);
        if ((v42 & 7) != 0)
        {
          v37 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
      }
      else
      {
        if (a6)
          MEMORY[0x212B929D0](a6, "Invalid index");
        v14 = 0;
      }
      __p = &v46;
      sub_20BEEB2B8((void ***)&__p);
      goto LABEL_28;
    }
    if (!a6)
      goto LABEL_27;
    v27 = "Cannot reparent object under itself";
    goto LABEL_26;
  }
  v14 = 1;
LABEL_28:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
  sub_20BFD265C(&v48);
LABEL_9:
  if ((v50 & 7) != 0)
  {
    v15 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v14;
}

void sub_20C0C1354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  __p = &a22;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18((_DWORD *)(v23 - 88));
  v25 = *(_QWORD *)(v23 - 80);
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  _BOOL8 v12;
  void ***v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  void **v18[3];
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22[2];
  void ***v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20C0BE47C(v22);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8) & 1) != 0)
  {
    v9 = sub_20BFCF650(a1);
    memset(v18, 0, sizeof(v18));
    v10 = sub_20C0A683C((uint64_t *)(v9 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v10 + 136))(&v23, v10, a2, v22);
    if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
    {
      if ((v24 & 4) != 0)
        v11 = (uint64_t **)(*(uint64_t (**)(void ****))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(&v23);
      else
        v11 = (uint64_t **)v23;
    }
    else
    {
      v11 = (uint64_t **)v18;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_20BFE538C(&v19, *v11, v11[1], v11[1] - *v11);
    v13 = (void ***)sub_20BF4C2D8((uint64_t)&v23);
    v23 = v18;
    sub_20BEEB2B8(v13);
    v14 = v19;
    if (v19 != v20)
    {
      while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v14 == v20)
        {
          v14 = v20;
          break;
        }
      }
    }
    v12 = v14 != v20;
    if (a4 && v14 == v20)
      MEMORY[0x212B929D0](a4, "Object does not exist");
    v18[0] = (void **)&v19;
    sub_20BEEB2B8(v18);
  }
  else
  {
    if (a4)
      MEMORY[0x212B929D0](a4, "Layer is not editable");
    v12 = 0;
  }
  if (((uint64_t)v22[0] & 7) != 0)
  {
    v15 = (unsigned int *)((unint64_t)v22[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v12;
}

void sub_20C0C1698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;

  a10 = (void **)&a13;
  sub_20BEEB2B8(&a10);
  if ((a16 & 7) != 0)
  {
    v17 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CreateSpec(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;

  v9 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(v8) + 14))
      v10 = *(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CreateSpec(v10, a2, a3, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_19Sdf_PrimChildPolicyEE10CreateSpecERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Spec;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  void **v17;
  const char *Text;
  void **v19;
  unsigned int *v21;
  void *__p[2];
  char v23;
  char v24[8];
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;

  if ((_DWORD)a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
    Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if ((Spec & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v25);
      sub_20C0C19F0((unsigned int **)__p);
      v9 = *(unsigned int **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v21 = v9;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          v21 = v10;
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, 1);
      if ((v21 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v14 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_20BFD265C(&v25);
    }
    else
    {
      v25 = "sdf/childrenUtils.cpp";
      v26 = "CreateSpec";
      v27 = 101;
      v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimCh"
            "ildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__pxr"
            "Reserved__::Sdf_PrimChildPolicy]";
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C524D70, a3, (uint64_t)__p);
      v16 = v23;
      v17 = (void **)__p[0];
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v19 = __p;
      if (v16 < 0)
        v19 = v17;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v19, Text);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  }
  else
  {
    v25 = "sdf/childrenUtils.cpp";
    v26 = "CreateSpec";
    v27 = 90;
    v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChil"
          "dPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__pxrRese"
          "rved__::Sdf_PrimChildPolicy]";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_19Sdf_PrimChildPolicyEE10CreateSpecEPNS_8SdfLayerERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

void sub_20C0C195C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a18);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_20C0C19F0@<X0>(unsigned int **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result)
    result = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v3 = (unsigned int *)*((_QWORD *)result + 4);
  *a1 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 = v4;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsValidName(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t *EmptyString;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_19Sdf_PrimChildPolicyEE11IsValidNameERKNS_7TfTokenE(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CanRename@<X0>(uint64_t **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  char v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  void *v13;
  _QWORD *result;
  const char *Text;
  const char *v16;
  char *v17;
  unint64_t v18;
  const char *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  int HasSpec;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  void *v27;
  void *__p[2];
  uint64_t v29;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
  v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v6);
  v8 = __p[1];
  if (__p[1])
  {
    v9 = (unsigned int *)((char *)__p[1] + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
  }
  if ((v7 & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsValidName(a2))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      sub_20C0C1D88((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a2, &v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      v12 = v27;
      v13 = __p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      if (v12 == v13)
        goto LABEL_9;
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v27))
        goto LABEL_21;
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
      HasSpec = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v22 = __p[1];
      if (__p[1])
      {
        v23 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v24 = __ldxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
      }
      if (!HasSpec)
      {
LABEL_9:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 24) = 0;
      }
      else
      {
LABEL_21:
        sub_20BDDC0E4(__p, "An object with that name already exists");
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v27);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v18 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v16, v17, Text, v19);
      if (SHIBYTE(v29) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, __p[0], (unint64_t)__p[1]);
        v26 = SHIBYTE(v29);
        *(_BYTE *)(a3 + 24) = 1;
        if (v26 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    return sub_20BFD265C(&v27);
  }
  else
  {
    result = sub_20BDDC0E4(__p, "Layer is not editable");
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v29;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_19Sdf_PrimChildPolicyEE9CanRenameERKNS_7SdfSpecERKNS_7TfTokenE(a1, a2, a3);
}

void sub_20C0C1CE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0C1D88@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  int v6;
  int v7;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20C0C1DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Rename(pxrInternal__aapl__pxrReserved__::SdfSpec *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  void ***v14;
  uint64_t v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  const char *Text;
  const char *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 i;
  uint64_t v47;
  const char *v48;
  char v49;
  int v50;
  _DWORD v51[3];
  uint64_t v52[3];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &v50);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::IsValidName(a2))
  {
    sub_20C0C1D88((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, a2, &v45);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v45))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &i);
      v4 = v45;
      v5 = i;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 1);
      sub_20BFD265C(&i);
      if (v4 == v5)
      {
        v6 = 1;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v43);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v41);
        sub_20C0C19F0((unsigned int **)&v40);
        v11 = sub_20BFCF650(&v43);
        i = 0uLL;
        v47 = 0;
        v12 = sub_20C0A683C((uint64_t *)(v11 + 112));
        (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v12 + 136))(v52, v12, &v41, &v40);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)v52))
        {
          if ((v52[1] & 4) != 0)
            v13 = (uint64_t **)(*(uint64_t (**)(uint64_t *))((v52[1] & 0xFFFFFFFFFFFFFFF8) + 168))(v52);
          else
            v13 = (uint64_t **)v52[0];
        }
        else
        {
          v13 = (uint64_t **)&i;
        }
        v38 = 0uLL;
        v39 = 0;
        sub_20BFE538C(&v38, *v13, v13[1], v13[1] - *v13);
        v14 = (void ***)sub_20BF4C2D8((uint64_t)v52);
        v52[0] = (uint64_t)&i;
        sub_20BEEB2B8(v14);
        *(_OWORD *)v52 = v38;
        while (v52[0] != v52[1])
        {
          if ((*(_QWORD *)sub_20C023B14(v52, v15, v16) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
          {
            *(_QWORD *)&i = "sdf/childrenUtils.cpp";
            *((_QWORD *)&i + 1) = "Rename";
            v47 = 726;
            v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "PrimChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy = pxrI"
                  "nternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
            v49 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to %s because a sibling with that name already exists", Text, v24);
            v6 = 0;
            goto LABEL_38;
          }
          sub_20C023C08(v52);
        }
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
        v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
        v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
        if ((v6 & 1) != 0)
        {
          for (i = v38; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
          {
            v20 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v18, v19);
            if ((*v20 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50) & 0xFFFFFFFFFFFFFFF8))
            {
              v25 = *(_QWORD *)a2;
              if ((*(_QWORD *)a2 & 7) != 0)
              {
                v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
                do
                  v27 = __ldxr(v26);
                while (__stxr(v27 + 2, v26));
                if ((v27 & 1) == 0)
                  v25 &= 0xFFFFFFFFFFFFFFF8;
              }
              v28 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v21, v22);
              if ((*v28 & 7) != 0)
              {
                v29 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
                do
                  v30 = __ldxr(v29);
                while (__stlxr(v30 - 2, v29));
              }
              *v28 = v25;
              break;
            }
          }
          v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
          sub_20C0B4E30(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (uint64_t **)&v38);
        }
        sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
LABEL_38:
        *(_QWORD *)&i = &v38;
        sub_20BEEB2B8((void ***)&i);
        if ((v40 & 7) != 0)
        {
          v32 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
        sub_20BFD265C(&v41);
        v34 = v44;
        if (v44)
        {
          v35 = (unsigned int *)(v44 + 8);
          do
          {
            v36 = __ldxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    sub_20BFD265C(&v45);
  }
  else
  {
    *(_QWORD *)&i = "sdf/childrenUtils.cpp";
    *((_QWORD *)&i + 1) = "Rename";
    v47 = 699;
    v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChil"
          "dPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy = pxrInternal__aapl__p"
          "xrReserved__::Sdf_PrimChildPolicy]";
    v49 = 0;
    v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v7, v9);
    v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v51);
  sub_20BFD265C(&v50);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_19Sdf_PrimChildPolicyEE6RenameERKNS_7SdfSpecERKNS_7TfTokenE(a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  uint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  void ***v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t *v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v41;
  uint64_t **v42;
  uint64_t v43;
  char *v44;
  BOOL v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v50;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v51;
  uint64_t v52;
  char *v53;
  _BOOL4 HasPrefix;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v55;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  const pxrInternal__aapl__pxrReserved__::TfToken *v64;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v65;
  uint64_t v66;
  char *v67;
  _BOOL8 v68;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v69;
  uint64_t v70;
  char *v71;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v72;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v73;
  int v74;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  void ***v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *m;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v87;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v88;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v89;
  uint64_t v90;
  char *v91;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v92;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v100;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v101;
  unsigned int *v102;
  unsigned int v103;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  __int128 k;
  __int128 j;
  char v115[8];
  void *__p[2];
  uint64_t v117;
  const char *v118;
  char v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  uint64_t v127;
  __int128 i;
  uint64_t v129;
  void **v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  sub_20C0C19F0((unsigned int **)&v125);
  v123 = 0uLL;
  v124 = 0;
  __p[1] = 0;
  v117 = 0;
  __p[0] = &__p[1];
  for (i = *a3; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C0D874C(&i))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D86D0((uint64_t *)&i, v6, v7);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8) & 1) != 0)
      goto LABEL_14;
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D86D0((uint64_t *)&i, v9, v10);
    sub_20C0B0D7C(v11, (uint64_t)&v126);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v120);
    if (SHIBYTE(v127) < 0)
      operator delete((void *)v126);
    sub_20C0D7FB4((uint64_t **)__p, (uint64_t *)&v120, (uint64_t *)&v120);
    if ((v9 & 1) != 0)
      goto LABEL_9;
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D86D0((uint64_t *)&i, v9, v10);
    v13 = sub_20C0B0CA4(v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v126);
    v14 = v126;
    v15 = *(_QWORD *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v126 + 1);
    sub_20BFD265C(&v126);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_20BFD265C(&j);
    if (v14 != v15)
LABEL_9:
      v16 = 1;
    else
      v16 = 0;
    if ((v120 & 7) != 0)
    {
      v17 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    if ((v16 & 1) != 0)
    {
LABEL_14:
      v19 = (unsigned int **)sub_20C0D86D0((uint64_t *)&i, v9, v10);
      v20 = *((_QWORD *)&v123 + 1);
      if (*((_QWORD *)&v123 + 1) >= v124)
      {
        v23 = sub_20C0D7E80((unsigned int ***)&v123, v19);
      }
      else
      {
        v21 = *v19;
        **((_QWORD **)&v123 + 1) = *v19;
        if (v21)
        {
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        v23 = (char *)(v20 + 8);
      }
      *((_QWORD *)&v123 + 1) = v23;
    }
  }
  sub_20BF2B200((uint64_t)__p, (_QWORD *)__p[1]);
  v24 = sub_20BFCF650(a1);
  __p[0] = 0;
  __p[1] = 0;
  v117 = 0;
  v25 = sub_20C0A683C((uint64_t *)(v24 + 112));
  (*(void (**)(__int128 *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v25 + 136))(&i, v25, a2, &v125);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0)
      v26 = (uint64_t **)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    else
      v26 = (uint64_t **)i;
  }
  else
  {
    v26 = (uint64_t **)__p;
  }
  v126 = 0uLL;
  v127 = 0;
  sub_20BFE538C(&v126, *v26, v26[1], v26[1] - *v26);
  v27 = (void ***)sub_20BF4C2D8((uint64_t)&i);
  *(_QWORD *)&i = __p;
  sub_20BEEB2B8(v27);
  *((_QWORD *)&i + 1) = 0;
  v129 = 0;
  *(_QWORD *)&i = (char *)&i + 8;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  sub_20BFC9A6C((char **)&v120, (uint64_t)(*((_QWORD *)&v123 + 1) - v123) >> 3);
  for (j = v123; (_QWORD)j != *((_QWORD *)&j + 1); sub_20C0C3154(&j))
  {
    v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C30D8((uint64_t *)&j, v28, v29);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v30))
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 181;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimC"
             "hildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy::V"
             "alueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_103;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C30D8((uint64_t *)&j, v31, v32);
    sub_20C0B0D7C(v33, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v105);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    v34 = v121;
    if ((unint64_t)v121 >= v122)
    {
      v38 = sub_20BFCA068((char **)&v120, (uint64_t *)&v105);
    }
    else
    {
      v35 = v105;
      *v121 = v105;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 2, v36));
        if ((v37 & 1) == 0)
          *v34 &= 0xFFFFFFFFFFFFFFF8;
      }
      v38 = (char *)(v34 + 1);
    }
    v121 = (uint64_t *)v38;
    sub_20C0D7FB4((uint64_t **)&i, (uint64_t *)&v105, (uint64_t *)&v105);
    if ((v39 & 1) == 0)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 188;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimC"
             "hildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy::V"
             "alueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
LABEL_100:
      if ((v105 & 7) != 0)
      {
        v98 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
LABEL_103:
      v68 = 0;
      goto LABEL_108;
    }
    v41 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C30D8((uint64_t *)&j, v39, v40);
    v42 = (uint64_t **)sub_20C0B0CA4(v41);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v42, (uint64_t *)__p);
    v45 = sub_20BEB560C((uint64_t)__p, (uint64_t)a1);
    v46 = __p[1];
    if (__p[1])
    {
      v47 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v48 = __ldxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
        (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
    }
    if (!v45)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 193;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimC"
             "hildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy::V"
             "alueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_100;
    }
    v50 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C30D8((uint64_t *)&j, v43, v44);
    v51 = sub_20C0B0CA4(v50);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v51, &v130);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v130, __p);
    if (*(void **)a2 == __p[0])
    {
      HasPrefix = 0;
    }
    else
    {
      v55 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C30D8((uint64_t *)&j, v52, v53);
      v56 = sub_20C0B0CA4(v55);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v56, &k);
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
      sub_20BFD265C(&k);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v130 + 1);
    sub_20BFD265C(&v130);
    if (HasPrefix)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 203;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimC"
             "hildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy::V"
             "alueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      goto LABEL_100;
    }
    if ((v105 & 7) != 0)
    {
      v57 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
  *(_OWORD *)__p = v126;
  while (__p[0] != __p[1])
  {
    v61 = (uint64_t *)sub_20C023B14((uint64_t *)__p, v59, v60);
    if ((_QWORD *)((char *)&i + 8) == sub_20C0D8030((uint64_t)&i, v61))
    {
      v64 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B14((uint64_t *)__p, v62, v63);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, v64, &j);
      v65 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v65, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_20BFD265C(&j);
    }
    sub_20C023C08(__p);
  }
  sub_20C0D80BC((uint64_t)&j, (uint64_t *)v126, *((uint64_t **)&v126 + 1));
  for (k = v123; ; sub_20C0C3154(&k))
  {
    v68 = k == *((_QWORD *)&k + 1);
    if ((_QWORD)k == *((_QWORD *)&k + 1))
      break;
    v69 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C30D8((uint64_t *)&k, v66, v67);
    sub_20C0B0D7C(v69, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v112);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v112, &v110);
    v72 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C30D8((uint64_t *)&k, v70, v71);
    v73 = sub_20C0B0CA4(v72);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v73, __p);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    if (v109 == *(_QWORD *)a2)
    {
      v74 = 10;
    }
    else
    {
      if ((_QWORD *)((char *)&j + 8) != sub_20C0D8030((uint64_t)&j, &v112))
      {
        v75 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v75, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
      }
      sub_20C0C19F0((unsigned int **)&v108);
      v76 = sub_20BFCF650(a1);
      __p[0] = 0;
      __p[1] = 0;
      v117 = 0;
      v77 = sub_20C0A683C((uint64_t *)(v76 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v77 + 136))(&v130, v77, &v109, &v108);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v130))
      {
        if ((v131 & 4) != 0)
          v78 = (uint64_t **)(*(uint64_t (**)(void ***))((v131 & 0xFFFFFFFFFFFFFFF8) + 168))(&v130);
        else
          v78 = (uint64_t **)v130;
      }
      else
      {
        v78 = (uint64_t **)__p;
      }
      v105 = 0;
      v106 = 0;
      v107 = 0;
      sub_20BFE538C(&v105, *v78, v78[1], v78[1] - *v78);
      v79 = (void ***)sub_20BF4C2D8((uint64_t)&v130);
      v130 = __p;
      sub_20BEEB2B8(v79);
      v80 = (uint64_t *)v105;
      if ((uint64_t *)v105 != v106)
      {
        while ((*v80 & 0xFFFFFFFFFFFFFFF8) != (v112 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v80 == v106)
          {
            v80 = v106;
            break;
          }
        }
      }
      if (v80 == v106)
      {
        __p[0] = "sdf/childrenUtils.cpp";
        __p[1] = "SetChildren";
        v117 = 254;
        v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Pri"
               "mChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolic"
               "y::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
        v119 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        v74 = 1;
      }
      else
      {
        sub_20C0D813C(v80 + 1, v106, v80);
        for (m = v106; m != v81; --m)
        {
          v84 = *(m - 1);
          v83 = v84;
          if ((v84 & 7) != 0)
          {
            v85 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
            do
              v86 = __ldxr(v85);
            while (__stlxr(v86 - 2, v85));
          }
        }
        v106 = v81;
        if ((uint64_t *)v105 == v81)
        {
          v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v88, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108);
        }
        else
        {
          v87 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v87, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108, (uint64_t **)&v105);
        }
        v89 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        v92 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C30D8((uint64_t *)&k, v90, v91);
        v93 = sub_20C0B0CA4(v92);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v93, __p);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v89, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_20BFD265C(__p);
        v74 = 0;
      }
      __p[0] = &v105;
      sub_20BEEB2B8((void ***)__p);
      if ((v108 & 7) != 0)
      {
        v94 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
    sub_20BFD265C(&v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v111);
    sub_20BFD265C(&v110);
    if ((v112 & 7) != 0)
    {
      v96 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
      do
        v97 = __ldxr(v96);
      while (__stlxr(v97 - 2, v96));
    }
    if (v74 != 10 && v74)
      goto LABEL_107;
  }
  if ((uint64_t *)v120 == v121)
  {
    v101 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v101, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125);
  }
  else
  {
    v100 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    sub_20C0B4E30(v100, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125, (uint64_t **)&v120);
  }
LABEL_107:
  sub_20BF2B200((uint64_t)&j, *((_QWORD **)&j + 1));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
LABEL_108:
  __p[0] = &v120;
  sub_20BEEB2B8((void ***)__p);
  sub_20BF2B200((uint64_t)&i, *((_QWORD **)&i + 1));
  __p[0] = &v126;
  sub_20BEEB2B8((void ***)__p);
  __p[0] = &v123;
  sub_20BFE69E4((void ***)__p);
  if ((v125 & 7) != 0)
  {
    v102 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  return v68;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_19Sdf_PrimChildPolicyEE11SetChildrenERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__16vectorINS_9SdfHandleINS_11SdfPrimSpecEEENSB_9allocatorISF_EEEE(a1, a2, a3);
}

void sub_20C0C2D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;

  if ((a10 & 7) != 0)
  {
    v39 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  __p = &a34;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BF2B200(v37 - 144, *(_QWORD **)(v37 - 136));
  __p = (uint64_t *)(v37 - 176);
  sub_20BEEB2B8((void ***)&__p);
  __p = (uint64_t *)&a37;
  sub_20BFE69E4((void ***)&__p);
  v41 = *(_QWORD *)(v37 - 184);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C0C30D8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfHand"
            "le<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>>::operator*() [T = std::vector<pxrInternal__aapl__pxrRese"
            "rved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0C314C()
{
  JUMPOUT(0x20C0C30FCLL);
}

_QWORD *sub_20C0C3154(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>>::operator++() [T = std::vector<pxrInternal"
            "__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t **v8;
  BOOL v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  _BOOL4 HasPrefix;
  uint64_t v23;
  uint64_t v24;
  void **p_p;
  void ***v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  _QWORD *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  const char *Text;
  void ***v38;
  void **v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  int v54;
  void **v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  void *__p;
  const char *v62;
  uint64_t v63;
  const char *v64;
  char v65;
  unsigned int *v66[2];
  void **v67;
  void **v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  sub_20C0C19F0(v66);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 290;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChil"
          "dPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, int) ["
          "ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  v8 = (uint64_t **)sub_20C0B0CA4(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&__p);
  v9 = sub_20BEB560C((uint64_t)&__p, (uint64_t)a1);
  v10 = v62;
  if (v62)
  {
    v11 = (unsigned int *)(v62 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!v9)
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 295;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChil"
          "dPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, int) ["
          "ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_12;
  }
  v14 = sub_20C0B0CA4(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v55);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, &__p);
  v15 = __p;
  v16 = *(void **)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
  sub_20BFD265C(&v55);
  if (v15 == v16)
  {
    v17 = 1;
  }
  else
  {
    sub_20C0B0D7C(a3, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v60);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v60, &v58);
    v21 = sub_20C0B0CA4(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v21, &__p);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (HasPrefix)
    {
      __p = "sdf/childrenUtils.cpp";
      v62 = "InsertChild";
      v63 = 312;
      v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimCh"
            "ildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, in"
            "t) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
      v65 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      v17 = 0;
    }
    else
    {
      v23 = sub_20BFCF650(a1);
      __p = 0;
      v62 = 0;
      v63 = 0;
      v24 = sub_20C0A683C((uint64_t *)(v23 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v24 + 136))(&v67, v24, a2, v66);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v67))
      {
        if ((v68 & 4) != 0)
          p_p = (void **)(*(uint64_t (**)(void ***))(((unint64_t)v68 & 0xFFFFFFFFFFFFFFF8) + 168))(&v67);
        else
          p_p = v67;
      }
      else
      {
        p_p = &__p;
      }
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_20BFE538C(&v55, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
      v26 = (void ***)sub_20BF4C2D8((uint64_t)&v67);
      v67 = &__p;
      sub_20BEEB2B8(v26);
      v29 = (unint64_t)((char *)v56 - (char *)v55) >> 3;
      if (a4 != -1)
        LODWORD(v29) = a4;
      v30 = (int)v29;
      if ((int)v29 <= (unint64_t)(((char *)v56 - (char *)v55) >> 3))
      {
        v67 = v55;
        v68 = (void **)v56;
        while (v67 != v68)
        {
          v32 = (_QWORD *)sub_20C023B14((uint64_t *)&v67, v27, v28);
          if ((*v32 & 0xFFFFFFFFFFFFFFF8) == (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            __p = "sdf/childrenUtils.cpp";
            v62 = "InsertChild";
            v63 = 334;
            v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "PrimChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Val"
                  "ueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
            v65 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_37;
          }
          sub_20C023C08(&v67);
        }
        v33 = sub_20C0B0CA4(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v33, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v53);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
        sub_20C0C19F0((unsigned int **)&v52);
        v34 = sub_20BFCF650(a1);
        __p = 0;
        v62 = 0;
        v63 = 0;
        v35 = sub_20C0A683C((uint64_t *)(v34 + 112));
        (*(void (**)(void ***__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v35 + 136))(&v70, v35, &v53, &v52);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v70))
        {
          if ((v71 & 4) != 0)
            v36 = (void **)(*(uint64_t (**)(void ***))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(&v70);
          else
            v36 = v70;
        }
        else
        {
          v36 = &__p;
        }
        v67 = 0;
        v68 = 0;
        v69 = 0;
        sub_20BFE538C(&v67, (uint64_t *)*v36, (uint64_t *)v36[1], ((_BYTE *)v36[1] - (_BYTE *)*v36) >> 3);
        v38 = (void ***)sub_20BF4C2D8((uint64_t)&v70);
        v70 = &__p;
        sub_20BEEB2B8(v38);
        v39 = v67;
        if (v67 != v68)
        {
          while (((unint64_t)*v39 & 0xFFFFFFFFFFFFFFF8) != (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v39 == v68)
            {
              v39 = v68;
              break;
            }
          }
        }
        v17 = v39 != v68;
        if (v39 == v68)
        {
          __p = "sdf/childrenUtils.cpp";
          v62 = "InsertChild";
          v63 = 352;
          v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Pr"
                "imChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueTy"
                "pe &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
          v65 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
          sub_20C0B5D58((uint64_t)&v67, v39);
          if (v67 == v68)
          {
            v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52);
          }
          else
          {
            v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52, (uint64_t **)&v67);
          }
          v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          v43 = sub_20C0B0CA4(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v43, &v70);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
          sub_20BFD1A18(&v70);
          sub_20C0B66C4(&v55, (char *)&v55[v30], (char *)&v60);
          v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v44, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v66, (uint64_t **)&v55);
          v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v70);
          IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v70);
          if ((IsDormant & 1) == 0)
          {
            Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v70);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v70);
          sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
        }
        __p = &v67;
        sub_20BEEB2B8((void ***)&__p);
        if ((v52 & 7) != 0)
        {
          v48 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
        sub_20BFD265C(&v53);
      }
      else
      {
        __p = "sdf/childrenUtils.cpp";
        v62 = "InsertChild";
        v63 = 326;
        v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Prim"
              "ChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &"
              ", int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]";
        v65 = 0;
        v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v31, v30);
LABEL_37:
        v17 = 0;
      }
      __p = &v55;
      sub_20BEEB2B8((void ***)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
    sub_20BFD265C(&v58);
    if ((v60 & 7) != 0)
    {
      v50 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
  }
LABEL_13:
  if (((uint64_t)v66[0] & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v66[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  return v17;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_19Sdf_PrimChildPolicyEE11InsertChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_11SdfPrimSpecEEEi(a1, a2, a3, a4);
}

void sub_20C0C38B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;

  __p = (__int16 *)(v30 - 112);
  sub_20BEEB2B8((void ***)&__p);
  if ((a11 & 7) != 0)
  {
    v32 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  sub_20BFD1A18(&a12);
  __p = &a14;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a19);
  if ((a20 & 7) != 0)
  {
    v34 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if ((a29 & 7) != 0)
  {
    v36 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  void ***v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v29;
  void **v30[3];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  sub_20C0C19F0((unsigned int **)&v34);
  v4 = sub_20BFCF650(a1);
  memset(v30, 0, sizeof(v30));
  v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v5 + 136))(&v37, v5, a2, &v34);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v37))
  {
    if ((v38 & 4) != 0)
      v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(&v37);
    else
      v6 = (uint64_t **)v37;
  }
  else
  {
    v6 = (uint64_t **)v30;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_20BFE538C(&v31, *v6, v6[1], v6[1] - *v6);
  v7 = (void ***)sub_20BF4C2D8((uint64_t)&v37);
  v37 = (unint64_t)v30;
  sub_20BEEB2B8(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v30);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v37);
  v8 = (uint64_t *)v31;
  v9 = v37;
  if ((uint64_t *)v31 == v32)
  {
LABEL_9:
    v11 = 0;
  }
  else
  {
    v10 = -v31;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v37 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v32)
        goto LABEL_9;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v37, &v35);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    sub_20C0D813C((_QWORD *)(8 - v10), v32, (_QWORD *)-v10);
    for (i = v32; i != v13; --i)
    {
      v16 = *(i - 1);
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    v32 = v13;
    if ((uint64_t *)v31 == v13)
    {
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v20, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v19, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (uint64_t **)&v31);
    }
    v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v21, a2, &v29);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v29);
    if ((IsDormant & 1) == 0)
    {
      Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v29);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
    v11 = 1;
    v9 = v37;
  }
  if ((v9 & 7) != 0)
  {
    v24 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20BFD2190(v30);
  v30[0] = (void **)&v31;
  sub_20BEEB2B8(v30);
  if ((v34 & 7) != 0)
  {
    v26 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_19Sdf_PrimChildPolicyEE11RemoveChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEE(a1, a2);
}

void sub_20C0C3D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void **p_p;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void ***v21;
  void ***v22;
  char *v23;
  uint64_t v24;
  _BOOL4 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *i;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  char *v34;
  char *j;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  uint64_t IsDormant;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v46;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  unsigned int *v65[2];
  void **v66;
  uint64_t v67;
  uint64_t v68;
  void ***v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  sub_20C0C19F0(v65);
  sub_20C0C459C(a2, a4, &v64);
  v10 = sub_20C0B0CA4(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v61);
  v11 = v64;
  v12 = v61;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
  sub_20BFD265C(&v61);
  if (a5 == -2 && v11 == v12)
    goto LABEL_65;
  v13 = sub_20BFCF650(a1);
  __p = 0;
  v59 = 0;
  v60 = 0;
  v14 = sub_20C0A683C((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::TfToken *, unsigned int **))(*(_QWORD *)v14 + 136))(&v66, v14, a2, v65);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v66))
  {
    if ((v67 & 4) != 0)
      p_p = (void **)(*(uint64_t (**)(void ***))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(&v66);
    else
      p_p = v66;
  }
  else
  {
    p_p = &__p;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  sub_20BFE538C(&v61, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
  sub_20BF4C2D8((uint64_t)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  sub_20C0B0D7C(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v57);
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
  v16 = sub_20C0B0CA4(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (a5 == -2 && v56 == *(_QWORD *)a2)
  {
    if (v61 == v62)
    {
      v17 = v61;
    }
    else
    {
      v17 = v61;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v62)
        {
          v17 = v62;
          break;
        }
      }
    }
    v18 = (unint64_t)((char *)v17 - (char *)v61) >> 3;
  }
  else if (v62 - v61 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v62 - v61;
  }
  sub_20C0C19F0((unsigned int **)&v55);
  v19 = sub_20BFCF650(a1);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v20 = sub_20C0A683C((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v20 + 136))(&v69, v20, &v56, &v55);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v69))
  {
    if ((v70 & 4) != 0)
      v21 = (void ***)(*(uint64_t (**)(void ****))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(&v69);
    else
      v21 = v69;
  }
  else
  {
    v21 = &v66;
  }
  __p = 0;
  v59 = 0;
  v60 = 0;
  sub_20BFE538C(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  v22 = (void ***)sub_20BF4C2D8((uint64_t)&v69);
  v69 = &v66;
  sub_20BEEB2B8(v22);
  v23 = (char *)__p;
  if (__p != v59)
  {
    while ((*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v59)
      {
        v23 = v59;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  if (v56 == *(_QWORD *)a2)
  {
    v24 = v23 - (_BYTE *)__p;
    if ((v57 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8)
      && ((_DWORD)v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == (_DWORD)v18))
    {
      goto LABEL_58;
    }
    v26 = (int)v18 > v24 >> 3;
    v27 = v61;
    if (v61 != v62)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v62)
        {
          v27 = v62;
          break;
        }
      }
    }
    sub_20C0D813C(v27 + 1, v62, v27);
    LODWORD(v18) = v18 - v26;
    for (i = v62; i != v28; --i)
    {
      v31 = *(i - 1);
      v30 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
    }
    v62 = v28;
  }
  else
  {
    sub_20C0D813C((_QWORD *)v23 + 1, v59, v23);
    for (j = v59; j != v34; j -= 8)
    {
      v37 = *((_QWORD *)j - 1);
      v36 = v37;
      if ((v37 & 7) != 0)
      {
        v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
    }
    v59 = v34;
    if (__p == v34)
    {
      v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55);
      v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v69);
      IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v69);
      if ((IsDormant & 1) == 0)
      {
        Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v69);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v69);
    }
    else
    {
      v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55, (uint64_t **)&__p);
    }
  }
  v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v46 = sub_20C0B0CA4(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v46, &v69);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
  sub_20BFD265C(&v69);
  sub_20C0B66C4(&v61, (char *)&v61[(int)v18], (char *)a4);
  v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  sub_20C0B4E30(v47, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v65, &v61);
LABEL_58:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  if ((v55 & 7) != 0)
  {
    v48 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if ((v57 & 7) != 0)
  {
    v50 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  __p = &v61;
  sub_20BEEB2B8((void ***)&__p);
LABEL_65:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
  sub_20BFD265C(&v64);
  if (((uint64_t)v65[0] & 7) != 0)
  {
    v52 = (unsigned int *)((unint64_t)v65[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  return 1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_19Sdf_PrimChildPolicyEE30MoveChildForBatchNamespaceEditERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_11SdfPrimSpecEEERKNS_7TfTokenEi(a1, a2, a3, a4, a5);
}

void sub_20C0C43F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  uint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_20BEEB2B8(&p_p);
  if ((a9 & 7) != 0)
  {
    v26 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  sub_20BFD1A18(&a10);
  if ((a11 & 7) != 0)
  {
    v28 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  __p = &a18;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a21);
  if ((a22 & 7) != 0)
  {
    v30 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0C459C@<X0>(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t *EmptyString;

  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString))
    return pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a1, a2, a3);
  *(_QWORD *)a3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
  return pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  const char *v13;
  _BOOL8 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t **v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  _BOOL4 HasPrefix;
  uint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  void **v39[3];
  unint64_t v40;
  int v41;
  uint64_t v42;
  void *__p;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  void ***v51;

  sub_20C0C19F0((unsigned int **)&v50);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      v13 = "Layer is not editable";
      goto LABEL_7;
    }
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      v13 = "Object does not exist";
LABEL_7:
      MEMORY[0x212B929D0](a6, v13);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v18 = (uint64_t **)sub_20C0B0CA4(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v18, &v46);
  v19 = sub_20BEB560C((uint64_t)&v46, (uint64_t)a1);
  v20 = v47;
  if (v47)
  {
    v21 = (unsigned int *)(v47 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (!v19)
  {
    if (!a6)
      goto LABEL_8;
    v13 = "Cannot reparent to another layer";
    goto LABEL_7;
  }
  sub_20C0C459C(a2, a4, &v48);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v48))
  {
    if (!a6)
    {
LABEL_27:
      v14 = 0;
      goto LABEL_28;
    }
    v27 = "Invalid name";
LABEL_26:
    MEMORY[0x212B929D0](a6, v27);
    goto LABEL_27;
  }
  v24 = sub_20C0B0CA4(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  v25 = v46;
  v26 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (v25 != v26)
  {
    v28 = sub_20C0B0CA4(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v46);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_20BFD265C(&v46);
    if (!HasPrefix)
    {
      v30 = sub_20BFCF650(a1);
      __p = 0;
      v44 = 0;
      v45 = 0;
      sub_20C0B4D3C(v30, (uint64_t)a2, (uint64_t)&v50, (uint64_t **)&__p, &v46);
      v39[0] = &__p;
      sub_20BEEB2B8(v39);
      v31 = (unint64_t)(v47 - v46) >> 3;
      if (a5 != -1)
        LODWORD(v31) = a5;
      if ((_DWORD)v31 == -2 || (int)v31 <= (unint64_t)((v47 - v46) >> 3))
      {
        sub_20C0B0D7C(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
        if (SHIBYTE(v45) < 0)
          operator delete(__p);
        v32 = sub_20C0B0CA4(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v41);
        sub_20BFD1A18(&__p);
        sub_20C0C19F0((unsigned int **)&v40);
        v33 = sub_20BFCF650(a1);
        memset(v39, 0, sizeof(v39));
        sub_20C0B4D3C(v33, (uint64_t)&v41, (uint64_t)&v40, (uint64_t **)v39, &__p);
        v51 = v39;
        sub_20BEEB2B8((void ***)&v51);
        v34 = __p;
        if (__p != v44)
        {
          while ((*v34 & 0xFFFFFFFFFFFFFFF8) != (v42 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v34 == v44)
            {
              v34 = v44;
              break;
            }
          }
        }
        v14 = v34 != v44;
        if (a6 && v34 == v44)
          MEMORY[0x212B929D0](a6, "Coding error: Object is not in its parent's children");
        v39[0] = &__p;
        sub_20BEEB2B8(v39);
        if ((v40 & 7) != 0)
        {
          v35 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        sub_20BFD1A18(&v41);
        if ((v42 & 7) != 0)
        {
          v37 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
      }
      else
      {
        if (a6)
          MEMORY[0x212B929D0](a6, "Invalid index");
        v14 = 0;
      }
      __p = &v46;
      sub_20BEEB2B8((void ***)&__p);
      goto LABEL_28;
    }
    if (!a6)
      goto LABEL_27;
    v27 = "Cannot reparent object under itself";
    goto LABEL_26;
  }
  v14 = 1;
LABEL_28:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
  sub_20BFD265C(&v48);
LABEL_9:
  if ((v50 & 7) != 0)
  {
    v15 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v14;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_19Sdf_PrimChildPolicyEE33CanMoveChildForBatchNamespaceEditERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_11SdfPrimSpecEEERKNS_7TfTokenEiPNSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEE(a1, a2, a3, a4, a5, a6);
}

void sub_20C0C49FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  __p = &a22;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18((_DWORD *)(v23 - 88));
  v25 = *(_QWORD *)(v23 - 80);
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  _BOOL8 v12;
  void ***v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  void **v18[3];
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22[2];
  void ***v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20C0C19F0(v22);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8) & 1) != 0)
  {
    v9 = sub_20BFCF650(a1);
    memset(v18, 0, sizeof(v18));
    v10 = sub_20C0A683C((uint64_t *)(v9 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v10 + 136))(&v23, v10, a2, v22);
    if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
    {
      if ((v24 & 4) != 0)
        v11 = (uint64_t **)(*(uint64_t (**)(void ****))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(&v23);
      else
        v11 = (uint64_t **)v23;
    }
    else
    {
      v11 = (uint64_t **)v18;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_20BFE538C(&v19, *v11, v11[1], v11[1] - *v11);
    v13 = (void ***)sub_20BF4C2D8((uint64_t)&v23);
    v23 = v18;
    sub_20BEEB2B8(v13);
    v14 = v19;
    if (v19 != v20)
    {
      while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v14 == v20)
        {
          v14 = v20;
          break;
        }
      }
    }
    v12 = v14 != v20;
    if (a4 && v14 == v20)
      MEMORY[0x212B929D0](a4, "Object does not exist");
    v18[0] = (void **)&v19;
    sub_20BEEB2B8(v18);
  }
  else
  {
    if (a4)
      MEMORY[0x212B929D0](a4, "Layer is not editable");
    v12 = 0;
  }
  if (((uint64_t)v22[0] & 7) != 0)
  {
    v15 = (unsigned int *)((unint64_t)v22[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v12;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_19Sdf_PrimChildPolicyEE35CanRemoveChildForBatchNamespaceEditERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_7TfTokenEPNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEE(a1, a2, a3, a4);
}

void sub_20C0C4D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;

  a10 = (void **)&a13;
  sub_20BEEB2B8(&a10);
  if ((a16 & 7) != 0)
  {
    v17 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CreateSpec(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;

  v9 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(v8) + 14))
      v10 = *(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CreateSpec(v10, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Spec;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  void **v17;
  const char *Text;
  void **v19;
  unsigned int *v21;
  void *__p[2];
  char v23;
  char v24[8];
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;

  if ((_DWORD)a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
    Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if ((Spec & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v25);
      sub_20C0B438C((unsigned int **)__p);
      v9 = *(unsigned int **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v21 = v9;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          v21 = v10;
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, 1);
      if ((v21 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v14 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_20BFD265C(&v25);
    }
    else
    {
      v25 = "sdf/childrenUtils.cpp";
      v26 = "CreateSpec";
      v27 = 101;
      v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Proper"
            "tyChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl_"
            "_pxrReserved__::Sdf_PropertyChildPolicy]";
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C524D70, a3, (uint64_t)__p);
      v16 = v23;
      v17 = (void **)__p[0];
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v19 = __p;
      if (v16 < 0)
        v19 = v17;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v19, Text);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  }
  else
  {
    v25 = "sdf/childrenUtils.cpp";
    v26 = "CreateSpec";
    v27 = 90;
    v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Property"
          "ChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__pxr"
          "Reserved__::Sdf_PropertyChildPolicy]";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_23Sdf_PropertyChildPolicyEE10CreateSpecEPNS_8SdfLayerERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

void sub_20C0C5004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a18);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsValidName(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t *EmptyString;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName((size_t *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16));
  EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName((size_t *)EmptyString);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_23Sdf_PropertyChildPolicyEE11IsValidNameERKNS_7TfTokenE(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CanRename@<X0>(uint64_t **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  char v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  void *v13;
  _QWORD *result;
  const char *Text;
  const char *v16;
  char *v17;
  unint64_t v18;
  const char *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  int HasSpec;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  void *v27;
  void *__p[2];
  uint64_t v29;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
  v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v6);
  v8 = __p[1];
  if (__p[1])
  {
    v9 = (unsigned int *)((char *)__p[1] + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
  }
  if ((v7 & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsValidName(a2))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      sub_20C0C53C8((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a2, (int *)&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      v12 = v27;
      v13 = __p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      if (v12 == v13)
        goto LABEL_9;
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v27))
        goto LABEL_21;
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
      HasSpec = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v22 = __p[1];
      if (__p[1])
      {
        v23 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v24 = __ldxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
      }
      if (!HasSpec)
      {
LABEL_9:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 24) = 0;
      }
      else
      {
LABEL_21:
        sub_20BDDC0E4(__p, "An object with that name already exists");
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v27);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v18 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v16, v17, Text, v19);
      if (SHIBYTE(v29) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, __p[0], (unint64_t)__p[1]);
        v26 = SHIBYTE(v29);
        *(_BYTE *)(a3 + 24) = 1;
        if (v26 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    return sub_20BFD265C(&v27);
  }
  else
  {
    result = sub_20BDDC0E4(__p, "Layer is not editable");
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v29;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_23Sdf_PropertyChildPolicyEE9CanRenameERKNS_7SdfSpecERKNS_7TfTokenE(a1, a2, a3);
}

void sub_20C0C5328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0C53C8@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  int v6;
  int v7;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v6);
  sub_20C0AE7F4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20C0C5428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::Rename(pxrInternal__aapl__pxrReserved__::SdfSpec *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  void ***v14;
  uint64_t v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  const char *Text;
  const char *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 i;
  uint64_t v47;
  const char *v48;
  char v49;
  int v50;
  _DWORD v51[3];
  uint64_t v52[3];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &v50);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::IsValidName(a2))
  {
    sub_20C0C53C8((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, a2, (int *)&v45);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v45))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &i);
      v4 = v45;
      v5 = i;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 1);
      sub_20BFD265C(&i);
      if (v4 == v5)
      {
        v6 = 1;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v43);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v41);
        sub_20C0B438C((unsigned int **)&v40);
        v11 = sub_20BFCF650(&v43);
        i = 0uLL;
        v47 = 0;
        v12 = sub_20C0A683C((uint64_t *)(v11 + 112));
        (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v12 + 136))(v52, v12, &v41, &v40);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)v52))
        {
          if ((v52[1] & 4) != 0)
            v13 = (uint64_t **)(*(uint64_t (**)(uint64_t *))((v52[1] & 0xFFFFFFFFFFFFFFF8) + 168))(v52);
          else
            v13 = (uint64_t **)v52[0];
        }
        else
        {
          v13 = (uint64_t **)&i;
        }
        v38 = 0uLL;
        v39 = 0;
        sub_20BFE538C(&v38, *v13, v13[1], v13[1] - *v13);
        v14 = (void ***)sub_20BF4C2D8((uint64_t)v52);
        v52[0] = (uint64_t)&i;
        sub_20BEEB2B8(v14);
        *(_OWORD *)v52 = v38;
        while (v52[0] != v52[1])
        {
          if ((*(_QWORD *)sub_20C023B14(v52, v15, v16) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
          {
            *(_QWORD *)&i = "sdf/childrenUtils.cpp";
            *((_QWORD *)&i + 1) = "Rename";
            v47 = 726;
            v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "PropertyChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy = "
                  "pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
            v49 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to %s because a sibling with that name already exists", Text, v24);
            v6 = 0;
            goto LABEL_38;
          }
          sub_20C023C08(v52);
        }
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
        v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
        v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
        if ((v6 & 1) != 0)
        {
          for (i = v38; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
          {
            v20 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v18, v19);
            if ((*v20 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50) & 0xFFFFFFFFFFFFFFF8))
            {
              v25 = *(_QWORD *)a2;
              if ((*(_QWORD *)a2 & 7) != 0)
              {
                v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
                do
                  v27 = __ldxr(v26);
                while (__stxr(v27 + 2, v26));
                if ((v27 & 1) == 0)
                  v25 &= 0xFFFFFFFFFFFFFFF8;
              }
              v28 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v21, v22);
              if ((*v28 & 7) != 0)
              {
                v29 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
                do
                  v30 = __ldxr(v29);
                while (__stlxr(v30 - 2, v29));
              }
              *v28 = v25;
              break;
            }
          }
          v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
          sub_20C0B4E30(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (uint64_t **)&v38);
        }
        sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
LABEL_38:
        *(_QWORD *)&i = &v38;
        sub_20BEEB2B8((void ***)&i);
        if ((v40 & 7) != 0)
        {
          v32 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
        sub_20BFD265C(&v41);
        v34 = v44;
        if (v44)
        {
          v35 = (unsigned int *)(v44 + 8);
          do
          {
            v36 = __ldxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    sub_20BFD265C(&v45);
  }
  else
  {
    *(_QWORD *)&i = "sdf/childrenUtils.cpp";
    *((_QWORD *)&i + 1) = "Rename";
    v47 = 699;
    v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Property"
          "ChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy = pxrInternal__aap"
          "l__pxrReserved__::Sdf_PropertyChildPolicy]";
    v49 = 0;
    v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v7, v9);
    v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v51);
  sub_20BFD265C(&v50);
  return v6;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_23Sdf_PropertyChildPolicyEE6RenameERKNS_7SdfSpecERKNS_7TfTokenE(a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  uint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  void ***v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t *v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v41;
  uint64_t **v42;
  uint64_t v43;
  char *v44;
  BOOL v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v50;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v51;
  uint64_t v52;
  char *v53;
  _BOOL4 HasPrefix;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v55;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  const pxrInternal__aapl__pxrReserved__::TfToken *v64;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v65;
  uint64_t v66;
  char *v67;
  _BOOL8 v68;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v69;
  uint64_t v70;
  char *v71;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v72;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v73;
  int v74;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  void ***v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *m;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v87;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v88;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v89;
  uint64_t v90;
  char *v91;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v92;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v100;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v101;
  unsigned int *v102;
  unsigned int v103;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  __int128 k;
  __int128 j;
  char v115[8];
  void *__p[2];
  uint64_t v117;
  const char *v118;
  char v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  uint64_t v127;
  __int128 i;
  uint64_t v129;
  void **v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C((unsigned int **)&v125);
  v123 = 0uLL;
  v124 = 0;
  __p[1] = 0;
  v117 = 0;
  __p[0] = &__p[1];
  for (i = *a3; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C0D8844(&i))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D87C8((uint64_t *)&i, v6, v7);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8) & 1) != 0)
      goto LABEL_14;
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D87C8((uint64_t *)&i, v9, v10);
    sub_20C0B1834(v11, (uint64_t)&v126);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v120);
    if (SHIBYTE(v127) < 0)
      operator delete((void *)v126);
    sub_20C0D7FB4((uint64_t **)__p, (uint64_t *)&v120, (uint64_t *)&v120);
    if ((v9 & 1) != 0)
      goto LABEL_9;
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D87C8((uint64_t *)&i, v9, v10);
    v13 = sub_20BFE6874(v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v126);
    v14 = v126;
    v15 = *(_QWORD *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v126 + 1);
    sub_20BFD265C(&v126);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_20BFD265C(&j);
    if (v14 != v15)
LABEL_9:
      v16 = 1;
    else
      v16 = 0;
    if ((v120 & 7) != 0)
    {
      v17 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    if ((v16 & 1) != 0)
    {
LABEL_14:
      v19 = (unsigned int **)sub_20C0D87C8((uint64_t *)&i, v9, v10);
      v20 = *((_QWORD *)&v123 + 1);
      if (*((_QWORD *)&v123 + 1) >= v124)
      {
        v23 = sub_20C0D7E80((unsigned int ***)&v123, v19);
      }
      else
      {
        v21 = *v19;
        **((_QWORD **)&v123 + 1) = *v19;
        if (v21)
        {
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        v23 = (char *)(v20 + 8);
      }
      *((_QWORD *)&v123 + 1) = v23;
    }
  }
  sub_20BF2B200((uint64_t)__p, (_QWORD *)__p[1]);
  v24 = sub_20BFCF650(a1);
  __p[0] = 0;
  __p[1] = 0;
  v117 = 0;
  v25 = sub_20C0A683C((uint64_t *)(v24 + 112));
  (*(void (**)(__int128 *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v25 + 136))(&i, v25, a2, &v125);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0)
      v26 = (uint64_t **)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    else
      v26 = (uint64_t **)i;
  }
  else
  {
    v26 = (uint64_t **)__p;
  }
  v126 = 0uLL;
  v127 = 0;
  sub_20BFE538C(&v126, *v26, v26[1], v26[1] - *v26);
  v27 = (void ***)sub_20BF4C2D8((uint64_t)&i);
  *(_QWORD *)&i = __p;
  sub_20BEEB2B8(v27);
  *((_QWORD *)&i + 1) = 0;
  v129 = 0;
  *(_QWORD *)&i = (char *)&i + 8;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  sub_20BFC9A6C((char **)&v120, (uint64_t)(*((_QWORD *)&v123 + 1) - v123) >> 3);
  for (j = v123; (_QWORD)j != *((_QWORD *)&j + 1); sub_20C0C6794(&j))
  {
    v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C6718((uint64_t *)&j, v28, v29);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v30))
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 181;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Prope"
             "rtyChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolic"
             "y::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_103;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C6718((uint64_t *)&j, v31, v32);
    sub_20C0B1834(v33, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v105);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    v34 = v121;
    if ((unint64_t)v121 >= v122)
    {
      v38 = sub_20BFCA068((char **)&v120, (uint64_t *)&v105);
    }
    else
    {
      v35 = v105;
      *v121 = v105;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 2, v36));
        if ((v37 & 1) == 0)
          *v34 &= 0xFFFFFFFFFFFFFFF8;
      }
      v38 = (char *)(v34 + 1);
    }
    v121 = (uint64_t *)v38;
    sub_20C0D7FB4((uint64_t **)&i, (uint64_t *)&v105, (uint64_t *)&v105);
    if ((v39 & 1) == 0)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 188;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Prope"
             "rtyChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolic"
             "y::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
LABEL_100:
      if ((v105 & 7) != 0)
      {
        v98 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
LABEL_103:
      v68 = 0;
      goto LABEL_108;
    }
    v41 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C6718((uint64_t *)&j, v39, v40);
    v42 = (uint64_t **)sub_20BFE6874(v41);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v42, (uint64_t *)__p);
    v45 = sub_20BEB560C((uint64_t)__p, (uint64_t)a1);
    v46 = __p[1];
    if (__p[1])
    {
      v47 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v48 = __ldxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
        (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
    }
    if (!v45)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 193;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Prope"
             "rtyChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolic"
             "y::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_100;
    }
    v50 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C6718((uint64_t *)&j, v43, v44);
    v51 = sub_20BFE6874(v50);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v51, &v130);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v130, __p);
    if (*(void **)a2 == __p[0])
    {
      HasPrefix = 0;
    }
    else
    {
      v55 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C6718((uint64_t *)&j, v52, v53);
      v56 = sub_20BFE6874(v55);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v56, &k);
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
      sub_20BFD265C(&k);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v130 + 1);
    sub_20BFD265C(&v130);
    if (HasPrefix)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 203;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Prope"
             "rtyChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolic"
             "y::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      goto LABEL_100;
    }
    if ((v105 & 7) != 0)
    {
      v57 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
  *(_OWORD *)__p = v126;
  while (__p[0] != __p[1])
  {
    v61 = (uint64_t *)sub_20C023B14((uint64_t *)__p, v59, v60);
    if ((_QWORD *)((char *)&i + 8) == sub_20C0D8030((uint64_t)&i, v61))
    {
      v64 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B14((uint64_t *)__p, v62, v63);
      sub_20C0AE7F4(a2, v64, (int *)&j);
      v65 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v65, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_20BFD265C(&j);
    }
    sub_20C023C08(__p);
  }
  sub_20C0D80BC((uint64_t)&j, (uint64_t *)v126, *((uint64_t **)&v126 + 1));
  for (k = v123; ; sub_20C0C6794(&k))
  {
    v68 = k == *((_QWORD *)&k + 1);
    if ((_QWORD)k == *((_QWORD *)&k + 1))
      break;
    v69 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C6718((uint64_t *)&k, v66, v67);
    sub_20C0B1834(v69, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v112);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    sub_20C0AE7F4(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v112, &v110);
    v72 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C6718((uint64_t *)&k, v70, v71);
    v73 = sub_20BFE6874(v72);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v73, __p);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    if (v109 == *(_QWORD *)a2)
    {
      v74 = 10;
    }
    else
    {
      if ((_QWORD *)((char *)&j + 8) != sub_20C0D8030((uint64_t)&j, &v112))
      {
        v75 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v75, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
      }
      sub_20C0B438C((unsigned int **)&v108);
      v76 = sub_20BFCF650(a1);
      __p[0] = 0;
      __p[1] = 0;
      v117 = 0;
      v77 = sub_20C0A683C((uint64_t *)(v76 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v77 + 136))(&v130, v77, &v109, &v108);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v130))
      {
        if ((v131 & 4) != 0)
          v78 = (uint64_t **)(*(uint64_t (**)(void ***))((v131 & 0xFFFFFFFFFFFFFFF8) + 168))(&v130);
        else
          v78 = (uint64_t **)v130;
      }
      else
      {
        v78 = (uint64_t **)__p;
      }
      v105 = 0;
      v106 = 0;
      v107 = 0;
      sub_20BFE538C(&v105, *v78, v78[1], v78[1] - *v78);
      v79 = (void ***)sub_20BF4C2D8((uint64_t)&v130);
      v130 = __p;
      sub_20BEEB2B8(v79);
      v80 = (uint64_t *)v105;
      if ((uint64_t *)v105 != v106)
      {
        while ((*v80 & 0xFFFFFFFFFFFFFFF8) != (v112 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v80 == v106)
          {
            v80 = v106;
            break;
          }
        }
      }
      if (v80 == v106)
      {
        __p[0] = "sdf/childrenUtils.cpp";
        __p[1] = "SetChildren";
        v117 = 254;
        v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Pro"
               "pertyChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildP"
               "olicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
        v119 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        v74 = 1;
      }
      else
      {
        sub_20C0D813C(v80 + 1, v106, v80);
        for (m = v106; m != v81; --m)
        {
          v84 = *(m - 1);
          v83 = v84;
          if ((v84 & 7) != 0)
          {
            v85 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
            do
              v86 = __ldxr(v85);
            while (__stlxr(v86 - 2, v85));
          }
        }
        v106 = v81;
        if ((uint64_t *)v105 == v81)
        {
          v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v88, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108);
        }
        else
        {
          v87 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v87, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108, (uint64_t **)&v105);
        }
        v89 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        v92 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C6718((uint64_t *)&k, v90, v91);
        v93 = sub_20BFE6874(v92);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v93, __p);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v89, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_20BFD265C(__p);
        v74 = 0;
      }
      __p[0] = &v105;
      sub_20BEEB2B8((void ***)__p);
      if ((v108 & 7) != 0)
      {
        v94 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
    sub_20BFD265C(&v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v111);
    sub_20BFD265C(&v110);
    if ((v112 & 7) != 0)
    {
      v96 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
      do
        v97 = __ldxr(v96);
      while (__stlxr(v97 - 2, v96));
    }
    if (v74 != 10 && v74)
      goto LABEL_107;
  }
  if ((uint64_t *)v120 == v121)
  {
    v101 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v101, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125);
  }
  else
  {
    v100 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    sub_20C0B4E30(v100, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125, (uint64_t **)&v120);
  }
LABEL_107:
  sub_20BF2B200((uint64_t)&j, *((_QWORD **)&j + 1));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
LABEL_108:
  __p[0] = &v120;
  sub_20BEEB2B8((void ***)__p);
  sub_20BF2B200((uint64_t)&i, *((_QWORD **)&i + 1));
  __p[0] = &v126;
  sub_20BEEB2B8((void ***)__p);
  __p[0] = &v123;
  sub_20BFE69E4((void ***)__p);
  if ((v125 & 7) != 0)
  {
    v102 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  return v68;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_23Sdf_PropertyChildPolicyEE11SetChildrenERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__16vectorINS_9SdfHandleINS_15SdfPropertySpecEEENSB_9allocatorISF_EEEE(a1, a2, a3);
}

void sub_20C0C63D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;

  if ((a10 & 7) != 0)
  {
    v39 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  __p = &a34;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BF2B200(v37 - 144, *(_QWORD **)(v37 - 136));
  __p = (uint64_t *)(v37 - 176);
  sub_20BEEB2B8((void ***)&__p);
  __p = (uint64_t *)&a37;
  sub_20BFE69E4((void ***)&__p);
  v41 = *(_QWORD *)(v37 - 184);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C0C6718(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfHand"
            "le<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>>::operator*() [T = std::vector<pxrInternal__aapl__pxr"
            "Reserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0C678C()
{
  JUMPOUT(0x20C0C673CLL);
}

_QWORD *sub_20C0C6794(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>>::operator++() [T = std::vector<pxrInte"
            "rnal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t **v8;
  BOOL v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  _BOOL4 HasPrefix;
  uint64_t v23;
  uint64_t v24;
  void **p_p;
  void ***v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  _QWORD *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  const char *Text;
  void ***v38;
  void **v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  int v54;
  void **v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  void *__p;
  const char *v62;
  uint64_t v63;
  const char *v64;
  char v65;
  unsigned int *v66[2];
  void **v67;
  void **v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C(v66);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 290;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Property"
          "ChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, in"
          "t) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  v8 = (uint64_t **)sub_20BFE6874(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&__p);
  v9 = sub_20BEB560C((uint64_t)&__p, (uint64_t)a1);
  v10 = v62;
  if (v62)
  {
    v11 = (unsigned int *)(v62 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!v9)
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 295;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Property"
          "ChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, in"
          "t) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_12;
  }
  v14 = sub_20BFE6874(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v55);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, &__p);
  v15 = __p;
  v16 = *(void **)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
  sub_20BFD265C(&v55);
  if (v15 == v16)
  {
    v17 = 1;
  }
  else
  {
    sub_20C0B1834(a3, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v60);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    sub_20C0AE7F4(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v60, &v58);
    v21 = sub_20BFE6874(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v21, &__p);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (HasPrefix)
    {
      __p = "sdf/childrenUtils.cpp";
      v62 = "InsertChild";
      v63 = 312;
      v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Proper"
            "tyChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &"
            ", int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
      v65 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      v17 = 0;
    }
    else
    {
      v23 = sub_20BFCF650(a1);
      __p = 0;
      v62 = 0;
      v63 = 0;
      v24 = sub_20C0A683C((uint64_t *)(v23 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v24 + 136))(&v67, v24, a2, v66);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v67))
      {
        if ((v68 & 4) != 0)
          p_p = (void **)(*(uint64_t (**)(void ***))(((unint64_t)v68 & 0xFFFFFFFFFFFFFFF8) + 168))(&v67);
        else
          p_p = v67;
      }
      else
      {
        p_p = &__p;
      }
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_20BFE538C(&v55, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
      v26 = (void ***)sub_20BF4C2D8((uint64_t)&v67);
      v67 = &__p;
      sub_20BEEB2B8(v26);
      v29 = (unint64_t)((char *)v56 - (char *)v55) >> 3;
      if (a4 != -1)
        LODWORD(v29) = a4;
      v30 = (int)v29;
      if ((int)v29 <= (unint64_t)(((char *)v56 - (char *)v55) >> 3))
      {
        v67 = v55;
        v68 = (void **)v56;
        while (v67 != v68)
        {
          v32 = (_QWORD *)sub_20C023B14((uint64_t *)&v67, v27, v28);
          if ((*v32 & 0xFFFFFFFFFFFFFFF8) == (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            __p = "sdf/childrenUtils.cpp";
            v62 = "InsertChild";
            v63 = 334;
            v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "PropertyChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy:"
                  ":ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
            v65 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_37;
          }
          sub_20C023C08(&v67);
        }
        v33 = sub_20BFE6874(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v33, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v53);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
        sub_20C0B438C((unsigned int **)&v52);
        v34 = sub_20BFCF650(a1);
        __p = 0;
        v62 = 0;
        v63 = 0;
        v35 = sub_20C0A683C((uint64_t *)(v34 + 112));
        (*(void (**)(void ***__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v35 + 136))(&v70, v35, &v53, &v52);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v70))
        {
          if ((v71 & 4) != 0)
            v36 = (void **)(*(uint64_t (**)(void ***))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(&v70);
          else
            v36 = v70;
        }
        else
        {
          v36 = &__p;
        }
        v67 = 0;
        v68 = 0;
        v69 = 0;
        sub_20BFE538C(&v67, (uint64_t *)*v36, (uint64_t *)v36[1], ((_BYTE *)v36[1] - (_BYTE *)*v36) >> 3);
        v38 = (void ***)sub_20BF4C2D8((uint64_t)&v70);
        v70 = &__p;
        sub_20BEEB2B8(v38);
        v39 = v67;
        if (v67 != v68)
        {
          while (((unint64_t)*v39 & 0xFFFFFFFFFFFFFFF8) != (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v39 == v68)
            {
              v39 = v68;
              break;
            }
          }
        }
        v17 = v39 != v68;
        if (v39 == v68)
        {
          __p = "sdf/childrenUtils.cpp";
          v62 = "InsertChild";
          v63 = 352;
          v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Pr"
                "opertyChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Val"
                "ueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
          v65 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
          sub_20C0B5D58((uint64_t)&v67, v39);
          if (v67 == v68)
          {
            v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52);
          }
          else
          {
            v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52, (uint64_t **)&v67);
          }
          v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          v43 = sub_20BFE6874(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v43, &v70);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
          sub_20BFD1A18(&v70);
          sub_20C0B66C4(&v55, (char *)&v55[v30], (char *)&v60);
          v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v44, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v66, (uint64_t **)&v55);
          v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v70);
          IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v70);
          if ((IsDormant & 1) == 0)
          {
            Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v70);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v70);
          sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
        }
        __p = &v67;
        sub_20BEEB2B8((void ***)&__p);
        if ((v52 & 7) != 0)
        {
          v48 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
        sub_20BFD265C(&v53);
      }
      else
      {
        __p = "sdf/childrenUtils.cpp";
        v62 = "InsertChild";
        v63 = 326;
        v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Prop"
              "ertyChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueTy"
              "pe &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]";
        v65 = 0;
        v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v31, v30);
LABEL_37:
        v17 = 0;
      }
      __p = &v55;
      sub_20BEEB2B8((void ***)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
    sub_20BFD265C(&v58);
    if ((v60 & 7) != 0)
    {
      v50 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
  }
LABEL_13:
  if (((uint64_t)v66[0] & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v66[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  return v17;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_23Sdf_PropertyChildPolicyEE11InsertChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_15SdfPropertySpecEEEi(a1, a2, a3, a4);
}

void sub_20C0C6EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;

  __p = (__int16 *)(v30 - 112);
  sub_20BEEB2B8((void ***)&__p);
  if ((a11 & 7) != 0)
  {
    v32 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  sub_20BFD1A18(&a12);
  __p = &a14;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a19);
  if ((a20 & 7) != 0)
  {
    v34 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if ((a29 & 7) != 0)
  {
    v36 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  void ***v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v29;
  void **v30[3];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C((unsigned int **)&v34);
  v4 = sub_20BFCF650(a1);
  memset(v30, 0, sizeof(v30));
  v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v5 + 136))(&v37, v5, a2, &v34);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v37))
  {
    if ((v38 & 4) != 0)
      v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(&v37);
    else
      v6 = (uint64_t **)v37;
  }
  else
  {
    v6 = (uint64_t **)v30;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_20BFE538C(&v31, *v6, v6[1], v6[1] - *v6);
  v7 = (void ***)sub_20BF4C2D8((uint64_t)&v37);
  v37 = (unint64_t)v30;
  sub_20BEEB2B8(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v30);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v37);
  v8 = (uint64_t *)v31;
  v9 = v37;
  if ((uint64_t *)v31 == v32)
  {
LABEL_9:
    v11 = 0;
  }
  else
  {
    v10 = -v31;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v37 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v32)
        goto LABEL_9;
    }
    sub_20C0AE7F4(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v37, &v35);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    sub_20C0D813C((_QWORD *)(8 - v10), v32, (_QWORD *)-v10);
    for (i = v32; i != v13; --i)
    {
      v16 = *(i - 1);
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    v32 = v13;
    if ((uint64_t *)v31 == v13)
    {
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v20, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v19, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (uint64_t **)&v31);
    }
    v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v21, a2, &v29);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v29);
    if ((IsDormant & 1) == 0)
    {
      Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v29);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
    v11 = 1;
    v9 = v37;
  }
  if ((v9 & 7) != 0)
  {
    v24 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20BFD2190(v30);
  v30[0] = (void **)&v31;
  sub_20BEEB2B8(v30);
  if ((v34 & 7) != 0)
  {
    v26 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_23Sdf_PropertyChildPolicyEE11RemoveChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEE(a1, a2);
}

void sub_20C0C73B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void **p_p;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void ***v21;
  void ***v22;
  char *v23;
  uint64_t v24;
  _BOOL4 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *i;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  char *v34;
  char *j;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  uint64_t IsDormant;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v46;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  unsigned int *v65[2];
  void **v66;
  uint64_t v67;
  uint64_t v68;
  void ***v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C(v65);
  sub_20C0B7424(a2, a4, (int *)&v64);
  v10 = sub_20BFE6874(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v61);
  v11 = v64;
  v12 = v61;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
  sub_20BFD265C(&v61);
  if (a5 == -2 && v11 == v12)
    goto LABEL_65;
  v13 = sub_20BFCF650(a1);
  __p = 0;
  v59 = 0;
  v60 = 0;
  v14 = sub_20C0A683C((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::TfToken *, unsigned int **))(*(_QWORD *)v14 + 136))(&v66, v14, a2, v65);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v66))
  {
    if ((v67 & 4) != 0)
      p_p = (void **)(*(uint64_t (**)(void ***))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(&v66);
    else
      p_p = v66;
  }
  else
  {
    p_p = &__p;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  sub_20BFE538C(&v61, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
  sub_20BF4C2D8((uint64_t)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  sub_20C0B1834(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v57);
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
  v16 = sub_20BFE6874(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (a5 == -2 && v56 == *(_QWORD *)a2)
  {
    if (v61 == v62)
    {
      v17 = v61;
    }
    else
    {
      v17 = v61;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v62)
        {
          v17 = v62;
          break;
        }
      }
    }
    v18 = (unint64_t)((char *)v17 - (char *)v61) >> 3;
  }
  else if (v62 - v61 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v62 - v61;
  }
  sub_20C0B438C((unsigned int **)&v55);
  v19 = sub_20BFCF650(a1);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v20 = sub_20C0A683C((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v20 + 136))(&v69, v20, &v56, &v55);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v69))
  {
    if ((v70 & 4) != 0)
      v21 = (void ***)(*(uint64_t (**)(void ****))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(&v69);
    else
      v21 = v69;
  }
  else
  {
    v21 = &v66;
  }
  __p = 0;
  v59 = 0;
  v60 = 0;
  sub_20BFE538C(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  v22 = (void ***)sub_20BF4C2D8((uint64_t)&v69);
  v69 = &v66;
  sub_20BEEB2B8(v22);
  v23 = (char *)__p;
  if (__p != v59)
  {
    while ((*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v59)
      {
        v23 = v59;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  if (v56 == *(_QWORD *)a2)
  {
    v24 = v23 - (_BYTE *)__p;
    if ((v57 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8)
      && ((_DWORD)v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == (_DWORD)v18))
    {
      goto LABEL_58;
    }
    v26 = (int)v18 > v24 >> 3;
    v27 = v61;
    if (v61 != v62)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v62)
        {
          v27 = v62;
          break;
        }
      }
    }
    sub_20C0D813C(v27 + 1, v62, v27);
    LODWORD(v18) = v18 - v26;
    for (i = v62; i != v28; --i)
    {
      v31 = *(i - 1);
      v30 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
    }
    v62 = v28;
  }
  else
  {
    sub_20C0D813C((_QWORD *)v23 + 1, v59, v23);
    for (j = v59; j != v34; j -= 8)
    {
      v37 = *((_QWORD *)j - 1);
      v36 = v37;
      if ((v37 & 7) != 0)
      {
        v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
    }
    v59 = v34;
    if (__p == v34)
    {
      v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55);
      v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v69);
      IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v69);
      if ((IsDormant & 1) == 0)
      {
        Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v69);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v69);
    }
    else
    {
      v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55, (uint64_t **)&__p);
    }
  }
  v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v46 = sub_20BFE6874(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v46, &v69);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
  sub_20BFD265C(&v69);
  sub_20C0B66C4(&v61, (char *)&v61[(int)v18], (char *)a4);
  v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  sub_20C0B4E30(v47, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v65, &v61);
LABEL_58:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  if ((v55 & 7) != 0)
  {
    v48 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if ((v57 & 7) != 0)
  {
    v50 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  __p = &v61;
  sub_20BEEB2B8((void ***)&__p);
LABEL_65:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
  sub_20BFD265C(&v64);
  if (((uint64_t)v65[0] & 7) != 0)
  {
    v52 = (unsigned int *)((unint64_t)v65[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  return 1;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_23Sdf_PropertyChildPolicyEE30MoveChildForBatchNamespaceEditERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_15SdfPropertySpecEEERKNS_7TfTokenEi(a1, a2, a3, a4, a5);
}

void sub_20C0C7A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  uint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_20BEEB2B8(&p_p);
  if ((a9 & 7) != 0)
  {
    v26 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  sub_20BFD1A18(&a10);
  if ((a11 & 7) != 0)
  {
    v28 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  __p = &a18;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a21);
  if ((a22 & 7) != 0)
  {
    v30 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  const char *v13;
  _BOOL8 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t **v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  _BOOL4 HasPrefix;
  uint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  void **v39[3];
  unint64_t v40;
  int v41;
  uint64_t v42;
  void *__p;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  void ***v51;

  sub_20C0B438C((unsigned int **)&v50);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      v13 = "Layer is not editable";
      goto LABEL_7;
    }
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      v13 = "Object does not exist";
LABEL_7:
      MEMORY[0x212B929D0](a6, v13);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v18 = (uint64_t **)sub_20BFE6874(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v18, &v46);
  v19 = sub_20BEB560C((uint64_t)&v46, (uint64_t)a1);
  v20 = v47;
  if (v47)
  {
    v21 = (unsigned int *)(v47 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (!v19)
  {
    if (!a6)
      goto LABEL_8;
    v13 = "Cannot reparent to another layer";
    goto LABEL_7;
  }
  sub_20C0B7424(a2, a4, &v48);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v48))
  {
    if (!a6)
    {
LABEL_27:
      v14 = 0;
      goto LABEL_28;
    }
    v27 = "Invalid name";
LABEL_26:
    MEMORY[0x212B929D0](a6, v27);
    goto LABEL_27;
  }
  v24 = sub_20BFE6874(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  v25 = v46;
  v26 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (v25 != v26)
  {
    v28 = sub_20BFE6874(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v46);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_20BFD265C(&v46);
    if (!HasPrefix)
    {
      v30 = sub_20BFCF650(a1);
      __p = 0;
      v44 = 0;
      v45 = 0;
      sub_20C0B4D3C(v30, (uint64_t)a2, (uint64_t)&v50, (uint64_t **)&__p, &v46);
      v39[0] = &__p;
      sub_20BEEB2B8(v39);
      v31 = (unint64_t)(v47 - v46) >> 3;
      if (a5 != -1)
        LODWORD(v31) = a5;
      if ((_DWORD)v31 == -2 || (int)v31 <= (unint64_t)((v47 - v46) >> 3))
      {
        sub_20C0B1834(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
        if (SHIBYTE(v45) < 0)
          operator delete(__p);
        v32 = sub_20BFE6874(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v41);
        sub_20BFD1A18(&__p);
        sub_20C0B438C((unsigned int **)&v40);
        v33 = sub_20BFCF650(a1);
        memset(v39, 0, sizeof(v39));
        sub_20C0B4D3C(v33, (uint64_t)&v41, (uint64_t)&v40, (uint64_t **)v39, &__p);
        v51 = v39;
        sub_20BEEB2B8((void ***)&v51);
        v34 = __p;
        if (__p != v44)
        {
          while ((*v34 & 0xFFFFFFFFFFFFFFF8) != (v42 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v34 == v44)
            {
              v34 = v44;
              break;
            }
          }
        }
        v14 = v34 != v44;
        if (a6 && v34 == v44)
          MEMORY[0x212B929D0](a6, "Coding error: Object is not in its parent's children");
        v39[0] = &__p;
        sub_20BEEB2B8(v39);
        if ((v40 & 7) != 0)
        {
          v35 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        sub_20BFD1A18(&v41);
        if ((v42 & 7) != 0)
        {
          v37 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
      }
      else
      {
        if (a6)
          MEMORY[0x212B929D0](a6, "Invalid index");
        v14 = 0;
      }
      __p = &v46;
      sub_20BEEB2B8((void ***)&__p);
      goto LABEL_28;
    }
    if (!a6)
      goto LABEL_27;
    v27 = "Cannot reparent object under itself";
    goto LABEL_26;
  }
  v14 = 1;
LABEL_28:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
  sub_20BFD265C(&v48);
LABEL_9:
  if ((v50 & 7) != 0)
  {
    v15 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v14;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_23Sdf_PropertyChildPolicyEE33CanMoveChildForBatchNamespaceEditERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_15SdfPropertySpecEEERKNS_7TfTokenEiPNSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEE(a1, a2, a3, a4, a5, a6);
}

void sub_20C0C7FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  __p = &a22;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18((_DWORD *)(v23 - 88));
  v25 = *(_QWORD *)(v23 - 80);
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  _BOOL8 v12;
  void ***v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  void **v18[3];
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22[2];
  void ***v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C(v22);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8) & 1) != 0)
  {
    v9 = sub_20BFCF650(a1);
    memset(v18, 0, sizeof(v18));
    v10 = sub_20C0A683C((uint64_t *)(v9 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v10 + 136))(&v23, v10, a2, v22);
    if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
    {
      if ((v24 & 4) != 0)
        v11 = (uint64_t **)(*(uint64_t (**)(void ****))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(&v23);
      else
        v11 = (uint64_t **)v23;
    }
    else
    {
      v11 = (uint64_t **)v18;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_20BFE538C(&v19, *v11, v11[1], v11[1] - *v11);
    v13 = (void ***)sub_20BF4C2D8((uint64_t)&v23);
    v23 = v18;
    sub_20BEEB2B8(v13);
    v14 = v19;
    if (v19 != v20)
    {
      while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v14 == v20)
        {
          v14 = v20;
          break;
        }
      }
    }
    v12 = v14 != v20;
    if (a4 && v14 == v20)
      MEMORY[0x212B929D0](a4, "Object does not exist");
    v18[0] = (void **)&v19;
    sub_20BEEB2B8(v18);
  }
  else
  {
    if (a4)
      MEMORY[0x212B929D0](a4, "Layer is not editable");
    v12 = 0;
  }
  if (((uint64_t)v22[0] & 7) != 0)
  {
    v15 = (unsigned int *)((unint64_t)v22[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v12;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_23Sdf_PropertyChildPolicyEE35CanRemoveChildForBatchNamespaceEditERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_7TfTokenEPNSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEE(a1, a2, a3, a4);
}

void sub_20C0C82FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;

  a10 = (void **)&a13;
  sub_20BEEB2B8(&a10);
  if ((a16 & 7) != 0)
  {
    v17 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CreateSpec(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;

  v9 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(v8) + 14))
      v10 = *(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CreateSpec(v10, a2, a3, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_27Sdf_RelationshipChildPolicyEE10CreateSpecERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Spec;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  void **v17;
  const char *Text;
  void **v19;
  unsigned int *v21;
  void *__p[2];
  char v23;
  char v24[8];
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;

  if ((_DWORD)a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
    Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if ((Spec & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v25);
      sub_20C0B438C((unsigned int **)__p);
      v9 = *(unsigned int **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v21 = v9;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          v21 = v10;
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, 1);
      if ((v21 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v14 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_20BFD265C(&v25);
    }
    else
    {
      v25 = "sdf/childrenUtils.cpp";
      v26 = "CreateSpec";
      v27 = 101;
      v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__a"
            "apl__pxrReserved__::Sdf_RelationshipChildPolicy]";
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C524D70, a3, (uint64_t)__p);
      v16 = v23;
      v17 = (void **)__p[0];
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v19 = __p;
      if (v16 < 0)
        v19 = v17;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v19, Text);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  }
  else
  {
    v25 = "sdf/childrenUtils.cpp";
    v26 = "CreateSpec";
    v27 = 90;
    v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl_"
          "_pxrReserved__::Sdf_RelationshipChildPolicy]";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_27Sdf_RelationshipChildPolicyEE10CreateSpecEPNS_8SdfLayerERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

void sub_20C0C85C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a18);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsValidName(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t *EmptyString;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName((size_t *)((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16));
  EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName((size_t *)EmptyString);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_27Sdf_RelationshipChildPolicyEE11IsValidNameERKNS_7TfTokenE(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CanRename@<X0>(uint64_t **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  char v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  void *v13;
  _QWORD *result;
  const char *Text;
  const char *v16;
  char *v17;
  unint64_t v18;
  const char *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  int HasSpec;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  void *v27;
  void *__p[2];
  uint64_t v29;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
  v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v6);
  v8 = __p[1];
  if (__p[1])
  {
    v9 = (unsigned int *)((char *)__p[1] + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
  }
  if ((v7 & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsValidName(a2))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      sub_20C0C8984((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a2, (int *)&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      v12 = v27;
      v13 = __p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      if (v12 == v13)
        goto LABEL_9;
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v27))
        goto LABEL_21;
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
      HasSpec = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v22 = __p[1];
      if (__p[1])
      {
        v23 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v24 = __ldxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
      }
      if (!HasSpec)
      {
LABEL_9:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 24) = 0;
      }
      else
      {
LABEL_21:
        sub_20BDDC0E4(__p, "An object with that name already exists");
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v27);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v18 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v16, v17, Text, v19);
      if (SHIBYTE(v29) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, __p[0], (unint64_t)__p[1]);
        v26 = SHIBYTE(v29);
        *(_BYTE *)(a3 + 24) = 1;
        if (v26 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    return sub_20BFD265C(&v27);
  }
  else
  {
    result = sub_20BDDC0E4(__p, "Layer is not editable");
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v29;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

void sub_20C0C88E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0C8984@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  int v6;
  int v7;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v6);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20C0C89E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::Rename(pxrInternal__aapl__pxrReserved__::SdfSpec *a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  void ***v14;
  uint64_t v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  const char *Text;
  const char *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 i;
  uint64_t v47;
  const char *v48;
  char v49;
  int v50;
  _DWORD v51[3];
  uint64_t v52[3];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &v50);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::IsValidName(a2))
  {
    sub_20C0C8984((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, a2, (int *)&v45);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v45))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &i);
      v4 = v45;
      v5 = i;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 1);
      sub_20BFD265C(&i);
      if (v4 == v5)
      {
        v6 = 1;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v43);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v41);
        sub_20C0B438C((unsigned int **)&v40);
        v11 = sub_20BFCF650(&v43);
        i = 0uLL;
        v47 = 0;
        v12 = sub_20C0A683C((uint64_t *)(v11 + 112));
        (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v12 + 136))(v52, v12, &v41, &v40);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)v52))
        {
          if ((v52[1] & 4) != 0)
            v13 = (uint64_t **)(*(uint64_t (**)(uint64_t *))((v52[1] & 0xFFFFFFFFFFFFFFF8) + 168))(v52);
          else
            v13 = (uint64_t **)v52[0];
        }
        else
        {
          v13 = (uint64_t **)&i;
        }
        v38 = 0uLL;
        v39 = 0;
        sub_20BFE538C(&v38, *v13, v13[1], v13[1] - *v13);
        v14 = (void ***)sub_20BF4C2D8((uint64_t)v52);
        v52[0] = (uint64_t)&i;
        sub_20BEEB2B8(v14);
        *(_OWORD *)v52 = v38;
        while (v52[0] != v52[1])
        {
          if ((*(_QWORD *)sub_20C023B14(v52, v15, v16) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
          {
            *(_QWORD *)&i = "sdf/childrenUtils.cpp";
            *((_QWORD *)&i + 1) = "Rename";
            v47 = 726;
            v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "RelationshipChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolic"
                  "y = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
            v49 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to %s because a sibling with that name already exists", Text, v24);
            v6 = 0;
            goto LABEL_38;
          }
          sub_20C023C08(v52);
        }
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
        v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
        v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
        if ((v6 & 1) != 0)
        {
          for (i = v38; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
          {
            v20 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v18, v19);
            if ((*v20 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50) & 0xFFFFFFFFFFFFFFF8))
            {
              v25 = *(_QWORD *)a2;
              if ((*(_QWORD *)a2 & 7) != 0)
              {
                v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
                do
                  v27 = __ldxr(v26);
                while (__stxr(v27 + 2, v26));
                if ((v27 & 1) == 0)
                  v25 &= 0xFFFFFFFFFFFFFFF8;
              }
              v28 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v21, v22);
              if ((*v28 & 7) != 0)
              {
                v29 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
                do
                  v30 = __ldxr(v29);
                while (__stlxr(v30 - 2, v29));
              }
              *v28 = v25;
              break;
            }
          }
          v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
          sub_20C0B4E30(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (uint64_t **)&v38);
        }
        sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
LABEL_38:
        *(_QWORD *)&i = &v38;
        sub_20BEEB2B8((void ***)&i);
        if ((v40 & 7) != 0)
        {
          v32 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
        sub_20BFD265C(&v41);
        v34 = v44;
        if (v44)
        {
          v35 = (unsigned int *)(v44 + 8);
          do
          {
            v36 = __ldxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    sub_20BFD265C(&v45);
  }
  else
  {
    *(_QWORD *)&i = "sdf/childrenUtils.cpp";
    *((_QWORD *)&i + 1) = "Rename";
    v47 = 699;
    v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy = pxrInternal_"
          "_aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
    v49 = 0;
    v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v7, v9);
    v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v51);
  sub_20BFD265C(&v50);
  return v6;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  uint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  void ***v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t *v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v41;
  uint64_t **v42;
  uint64_t v43;
  char *v44;
  BOOL v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v50;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v51;
  uint64_t v52;
  char *v53;
  _BOOL4 HasPrefix;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v55;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  const pxrInternal__aapl__pxrReserved__::TfToken *v64;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v65;
  uint64_t v66;
  char *v67;
  _BOOL8 v68;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v69;
  uint64_t v70;
  char *v71;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v72;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v73;
  int v74;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  void ***v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *m;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v87;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v88;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v89;
  uint64_t v90;
  char *v91;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v92;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v100;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v101;
  unsigned int *v102;
  unsigned int v103;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  __int128 k;
  __int128 j;
  char v115[8];
  void *__p[2];
  uint64_t v117;
  const char *v118;
  char v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  uint64_t v127;
  __int128 i;
  uint64_t v129;
  void **v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C((unsigned int **)&v125);
  v123 = 0uLL;
  v124 = 0;
  __p[1] = 0;
  v117 = 0;
  __p[0] = &__p[1];
  for (i = *a3; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C0D893C(&i))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D88C0((uint64_t *)&i, v6, v7);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8) & 1) != 0)
      goto LABEL_14;
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D88C0((uint64_t *)&i, v9, v10);
    sub_20C0B23C4(v11, (uint64_t)&v126);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v120);
    if (SHIBYTE(v127) < 0)
      operator delete((void *)v126);
    sub_20C0D7FB4((uint64_t **)__p, (uint64_t *)&v120, (uint64_t *)&v120);
    if ((v9 & 1) != 0)
      goto LABEL_9;
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D88C0((uint64_t *)&i, v9, v10);
    v13 = sub_20C0B22EC(v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v126);
    v14 = v126;
    v15 = *(_QWORD *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v126 + 1);
    sub_20BFD265C(&v126);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_20BFD265C(&j);
    if (v14 != v15)
LABEL_9:
      v16 = 1;
    else
      v16 = 0;
    if ((v120 & 7) != 0)
    {
      v17 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    if ((v16 & 1) != 0)
    {
LABEL_14:
      v19 = (unsigned int **)sub_20C0D88C0((uint64_t *)&i, v9, v10);
      v20 = *((_QWORD *)&v123 + 1);
      if (*((_QWORD *)&v123 + 1) >= v124)
      {
        v23 = sub_20C0D7E80((unsigned int ***)&v123, v19);
      }
      else
      {
        v21 = *v19;
        **((_QWORD **)&v123 + 1) = *v19;
        if (v21)
        {
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        v23 = (char *)(v20 + 8);
      }
      *((_QWORD *)&v123 + 1) = v23;
    }
  }
  sub_20BF2B200((uint64_t)__p, (_QWORD *)__p[1]);
  v24 = sub_20BFCF650(a1);
  __p[0] = 0;
  __p[1] = 0;
  v117 = 0;
  v25 = sub_20C0A683C((uint64_t *)(v24 + 112));
  (*(void (**)(__int128 *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v25 + 136))(&i, v25, a2, &v125);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0)
      v26 = (uint64_t **)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    else
      v26 = (uint64_t **)i;
  }
  else
  {
    v26 = (uint64_t **)__p;
  }
  v126 = 0uLL;
  v127 = 0;
  sub_20BFE538C(&v126, *v26, v26[1], v26[1] - *v26);
  v27 = (void ***)sub_20BF4C2D8((uint64_t)&i);
  *(_QWORD *)&i = __p;
  sub_20BEEB2B8(v27);
  *((_QWORD *)&i + 1) = 0;
  v129 = 0;
  *(_QWORD *)&i = (char *)&i + 8;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  sub_20BFC9A6C((char **)&v120, (uint64_t)(*((_QWORD *)&v123 + 1) - v123) >> 3);
  for (j = v123; (_QWORD)j != *((_QWORD *)&j + 1); sub_20C0C9D50(&j))
  {
    v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C9CD4((uint64_t *)&j, v28, v29);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v30))
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 181;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relat"
             "ionshipChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildP"
             "olicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_103;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C9CD4((uint64_t *)&j, v31, v32);
    sub_20C0B23C4(v33, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v105);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    v34 = v121;
    if ((unint64_t)v121 >= v122)
    {
      v38 = sub_20BFCA068((char **)&v120, (uint64_t *)&v105);
    }
    else
    {
      v35 = v105;
      *v121 = v105;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 2, v36));
        if ((v37 & 1) == 0)
          *v34 &= 0xFFFFFFFFFFFFFFF8;
      }
      v38 = (char *)(v34 + 1);
    }
    v121 = (uint64_t *)v38;
    sub_20C0D7FB4((uint64_t **)&i, (uint64_t *)&v105, (uint64_t *)&v105);
    if ((v39 & 1) == 0)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 188;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relat"
             "ionshipChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildP"
             "olicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
LABEL_100:
      if ((v105 & 7) != 0)
      {
        v98 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
LABEL_103:
      v68 = 0;
      goto LABEL_108;
    }
    v41 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C9CD4((uint64_t *)&j, v39, v40);
    v42 = (uint64_t **)sub_20C0B22EC(v41);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v42, (uint64_t *)__p);
    v45 = sub_20BEB560C((uint64_t)__p, (uint64_t)a1);
    v46 = __p[1];
    if (__p[1])
    {
      v47 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v48 = __ldxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
        (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
    }
    if (!v45)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 193;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relat"
             "ionshipChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildP"
             "olicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_100;
    }
    v50 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C9CD4((uint64_t *)&j, v43, v44);
    v51 = sub_20C0B22EC(v50);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v51, &v130);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v130, __p);
    if (*(void **)a2 == __p[0])
    {
      HasPrefix = 0;
    }
    else
    {
      v55 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C9CD4((uint64_t *)&j, v52, v53);
      v56 = sub_20C0B22EC(v55);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v56, &k);
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
      sub_20BFD265C(&k);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v130 + 1);
    sub_20BFD265C(&v130);
    if (HasPrefix)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 203;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relat"
             "ionshipChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildP"
             "olicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      goto LABEL_100;
    }
    if ((v105 & 7) != 0)
    {
      v57 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
  *(_OWORD *)__p = v126;
  while (__p[0] != __p[1])
  {
    v61 = (uint64_t *)sub_20C023B14((uint64_t *)__p, v59, v60);
    if ((_QWORD *)((char *)&i + 8) == sub_20C0D8030((uint64_t)&i, v61))
    {
      v64 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B14((uint64_t *)__p, v62, v63);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, v64, (int *)&j);
      v65 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v65, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_20BFD265C(&j);
    }
    sub_20C023C08(__p);
  }
  sub_20C0D80BC((uint64_t)&j, (uint64_t *)v126, *((uint64_t **)&v126 + 1));
  for (k = v123; ; sub_20C0C9D50(&k))
  {
    v68 = k == *((_QWORD *)&k + 1);
    if ((_QWORD)k == *((_QWORD *)&k + 1))
      break;
    v69 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C9CD4((uint64_t *)&k, v66, v67);
    sub_20C0B23C4(v69, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v112);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v112, &v110);
    v72 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C9CD4((uint64_t *)&k, v70, v71);
    v73 = sub_20C0B22EC(v72);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v73, __p);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    if (v109 == *(_QWORD *)a2)
    {
      v74 = 10;
    }
    else
    {
      if ((_QWORD *)((char *)&j + 8) != sub_20C0D8030((uint64_t)&j, &v112))
      {
        v75 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v75, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
      }
      sub_20C0B438C((unsigned int **)&v108);
      v76 = sub_20BFCF650(a1);
      __p[0] = 0;
      __p[1] = 0;
      v117 = 0;
      v77 = sub_20C0A683C((uint64_t *)(v76 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v77 + 136))(&v130, v77, &v109, &v108);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v130))
      {
        if ((v131 & 4) != 0)
          v78 = (uint64_t **)(*(uint64_t (**)(void ***))((v131 & 0xFFFFFFFFFFFFFFF8) + 168))(&v130);
        else
          v78 = (uint64_t **)v130;
      }
      else
      {
        v78 = (uint64_t **)__p;
      }
      v105 = 0;
      v106 = 0;
      v107 = 0;
      sub_20BFE538C(&v105, *v78, v78[1], v78[1] - *v78);
      v79 = (void ***)sub_20BF4C2D8((uint64_t)&v130);
      v130 = __p;
      sub_20BEEB2B8(v79);
      v80 = (uint64_t *)v105;
      if ((uint64_t *)v105 != v106)
      {
        while ((*v80 & 0xFFFFFFFFFFFFFFF8) != (v112 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v80 == v106)
          {
            v80 = v106;
            break;
          }
        }
      }
      if (v80 == v106)
      {
        __p[0] = "sdf/childrenUtils.cpp";
        __p[1] = "SetChildren";
        v117 = 254;
        v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Rel"
               "ationshipChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename Ch"
               "ildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
        v119 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        v74 = 1;
      }
      else
      {
        sub_20C0D813C(v80 + 1, v106, v80);
        for (m = v106; m != v81; --m)
        {
          v84 = *(m - 1);
          v83 = v84;
          if ((v84 & 7) != 0)
          {
            v85 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
            do
              v86 = __ldxr(v85);
            while (__stlxr(v86 - 2, v85));
          }
        }
        v106 = v81;
        if ((uint64_t *)v105 == v81)
        {
          v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v88, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108);
        }
        else
        {
          v87 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v87, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108, (uint64_t **)&v105);
        }
        v89 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        v92 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C9CD4((uint64_t *)&k, v90, v91);
        v93 = sub_20C0B22EC(v92);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v93, __p);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v89, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_20BFD265C(__p);
        v74 = 0;
      }
      __p[0] = &v105;
      sub_20BEEB2B8((void ***)__p);
      if ((v108 & 7) != 0)
      {
        v94 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
    sub_20BFD265C(&v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v111);
    sub_20BFD265C(&v110);
    if ((v112 & 7) != 0)
    {
      v96 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
      do
        v97 = __ldxr(v96);
      while (__stlxr(v97 - 2, v96));
    }
    if (v74 != 10 && v74)
      goto LABEL_107;
  }
  if ((uint64_t *)v120 == v121)
  {
    v101 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v101, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125);
  }
  else
  {
    v100 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    sub_20C0B4E30(v100, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125, (uint64_t **)&v120);
  }
LABEL_107:
  sub_20BF2B200((uint64_t)&j, *((_QWORD **)&j + 1));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
LABEL_108:
  __p[0] = &v120;
  sub_20BEEB2B8((void ***)__p);
  sub_20BF2B200((uint64_t)&i, *((_QWORD **)&i + 1));
  __p[0] = &v126;
  sub_20BEEB2B8((void ***)__p);
  __p[0] = &v123;
  sub_20BFE69E4((void ***)__p);
  if ((v125 & 7) != 0)
  {
    v102 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  return v68;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_27Sdf_RelationshipChildPolicyEE11SetChildrenERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__16vectorINS_9SdfHandleINS_19SdfRelationshipSpecEEENSB_9allocatorISF_EEEE(a1, a2, a3);
}

void sub_20C0C9994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;

  if ((a10 & 7) != 0)
  {
    v39 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  __p = &a34;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BF2B200(v37 - 144, *(_QWORD **)(v37 - 136));
  __p = (uint64_t *)(v37 - 176);
  sub_20BEEB2B8((void ***)&__p);
  __p = (uint64_t *)&a37;
  sub_20BFE69E4((void ***)&__p);
  v41 = *(_QWORD *)(v37 - 184);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C0C9CD4(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfHand"
            "le<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>>::operator*() [T = std::vector<pxrInternal__aapl_"
            "_pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0C9D48()
{
  JUMPOUT(0x20C0C9CF8);
}

_QWORD *sub_20C0C9D50(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>>::operator++() [T = std::vector<pxr"
            "Internal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t **v8;
  BOOL v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  _BOOL4 HasPrefix;
  uint64_t v23;
  uint64_t v24;
  void **p_p;
  void ***v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  _QWORD *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  const char *Text;
  void ***v38;
  void **v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  int v54;
  void **v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  void *__p;
  const char *v62;
  uint64_t v63;
  const char *v64;
  char v65;
  unsigned int *v66[2];
  void **v67;
  void **v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C(v66);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 290;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &"
          ", int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  v8 = (uint64_t **)sub_20C0B22EC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&__p);
  v9 = sub_20BEB560C((uint64_t)&__p, (uint64_t)a1);
  v10 = v62;
  if (v62)
  {
    v11 = (unsigned int *)(v62 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!v9)
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 295;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &"
          ", int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_12;
  }
  v14 = sub_20C0B22EC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v55);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, &__p);
  v15 = __p;
  v16 = *(void **)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
  sub_20BFD265C(&v55);
  if (v15 == v16)
  {
    v17 = 1;
  }
  else
  {
    sub_20C0B23C4(a3, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v60);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v60, &v58);
    v21 = sub_20C0B22EC(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v21, &__p);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (HasPrefix)
    {
      __p = "sdf/childrenUtils.cpp";
      v62 = "InsertChild";
      v63 = 312;
      v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueTy"
            "pe &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
      v65 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      v17 = 0;
    }
    else
    {
      v23 = sub_20BFCF650(a1);
      __p = 0;
      v62 = 0;
      v63 = 0;
      v24 = sub_20C0A683C((uint64_t *)(v23 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v24 + 136))(&v67, v24, a2, v66);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v67))
      {
        if ((v68 & 4) != 0)
          p_p = (void **)(*(uint64_t (**)(void ***))(((unint64_t)v68 & 0xFFFFFFFFFFFFFFF8) + 168))(&v67);
        else
          p_p = v67;
      }
      else
      {
        p_p = &__p;
      }
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_20BFE538C(&v55, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
      v26 = (void ***)sub_20BF4C2D8((uint64_t)&v67);
      v67 = &__p;
      sub_20BEEB2B8(v26);
      v29 = (unint64_t)((char *)v56 - (char *)v55) >> 3;
      if (a4 != -1)
        LODWORD(v29) = a4;
      v30 = (int)v29;
      if ((int)v29 <= (unint64_t)(((char *)v56 - (char *)v55) >> 3))
      {
        v67 = v55;
        v68 = (void **)v56;
        while (v67 != v68)
        {
          v32 = (_QWORD *)sub_20C023B14((uint64_t *)&v67, v27, v28);
          if ((*v32 & 0xFFFFFFFFFFFFFFF8) == (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            __p = "sdf/childrenUtils.cpp";
            v62 = "InsertChild";
            v63 = 334;
            v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "RelationshipChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPol"
                  "icy::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
            v65 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_37;
          }
          sub_20C023C08(&v67);
        }
        v33 = sub_20C0B22EC(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v33, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v53);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
        sub_20C0B438C((unsigned int **)&v52);
        v34 = sub_20BFCF650(a1);
        __p = 0;
        v62 = 0;
        v63 = 0;
        v35 = sub_20C0A683C((uint64_t *)(v34 + 112));
        (*(void (**)(void ***__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v35 + 136))(&v70, v35, &v53, &v52);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v70))
        {
          if ((v71 & 4) != 0)
            v36 = (void **)(*(uint64_t (**)(void ***))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(&v70);
          else
            v36 = v70;
        }
        else
        {
          v36 = &__p;
        }
        v67 = 0;
        v68 = 0;
        v69 = 0;
        sub_20BFE538C(&v67, (uint64_t *)*v36, (uint64_t *)v36[1], ((_BYTE *)v36[1] - (_BYTE *)*v36) >> 3);
        v38 = (void ***)sub_20BF4C2D8((uint64_t)&v70);
        v70 = &__p;
        sub_20BEEB2B8(v38);
        v39 = v67;
        if (v67 != v68)
        {
          while (((unint64_t)*v39 & 0xFFFFFFFFFFFFFFF8) != (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v39 == v68)
            {
              v39 = v68;
              break;
            }
          }
        }
        v17 = v39 != v68;
        if (v39 == v68)
        {
          __p = "sdf/childrenUtils.cpp";
          v62 = "InsertChild";
          v63 = 352;
          v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Re"
                "lationshipChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy:"
                ":ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
          v65 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
          sub_20C0B5D58((uint64_t)&v67, v39);
          if (v67 == v68)
          {
            v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52);
          }
          else
          {
            v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52, (uint64_t **)&v67);
          }
          v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          v43 = sub_20C0B22EC(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v43, &v70);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
          sub_20BFD1A18(&v70);
          sub_20C0B66C4(&v55, (char *)&v55[v30], (char *)&v60);
          v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v44, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v66, (uint64_t **)&v55);
          v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v70);
          IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v70);
          if ((IsDormant & 1) == 0)
          {
            Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v70);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v70);
          sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
        }
        __p = &v67;
        sub_20BEEB2B8((void ***)&__p);
        if ((v52 & 7) != 0)
        {
          v48 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
        sub_20BFD265C(&v53);
      }
      else
      {
        __p = "sdf/childrenUtils.cpp";
        v62 = "InsertChild";
        v63 = 326;
        v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Rela"
              "tionshipChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Val"
              "ueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy]";
        v65 = 0;
        v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v31, v30);
LABEL_37:
        v17 = 0;
      }
      __p = &v55;
      sub_20BEEB2B8((void ***)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
    sub_20BFD265C(&v58);
    if ((v60 & 7) != 0)
    {
      v50 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
  }
LABEL_13:
  if (((uint64_t)v66[0] & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v66[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  return v17;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_27Sdf_RelationshipChildPolicyEE11InsertChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_19SdfRelationshipSpecEEEi(a1, a2, a3, a4);
}

void sub_20C0CA4B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;

  __p = (__int16 *)(v30 - 112);
  sub_20BEEB2B8((void ***)&__p);
  if ((a11 & 7) != 0)
  {
    v32 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  sub_20BFD1A18(&a12);
  __p = &a14;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a19);
  if ((a20 & 7) != 0)
  {
    v34 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if ((a29 & 7) != 0)
  {
    v36 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  void ***v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v29;
  void **v30[3];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C((unsigned int **)&v34);
  v4 = sub_20BFCF650(a1);
  memset(v30, 0, sizeof(v30));
  v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v5 + 136))(&v37, v5, a2, &v34);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v37))
  {
    if ((v38 & 4) != 0)
      v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(&v37);
    else
      v6 = (uint64_t **)v37;
  }
  else
  {
    v6 = (uint64_t **)v30;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_20BFE538C(&v31, *v6, v6[1], v6[1] - *v6);
  v7 = (void ***)sub_20BF4C2D8((uint64_t)&v37);
  v37 = (unint64_t)v30;
  sub_20BEEB2B8(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v30);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v37);
  v8 = (uint64_t *)v31;
  v9 = v37;
  if ((uint64_t *)v31 == v32)
  {
LABEL_9:
    v11 = 0;
  }
  else
  {
    v10 = -v31;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v37 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v32)
        goto LABEL_9;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v37, &v35);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    sub_20C0D813C((_QWORD *)(8 - v10), v32, (_QWORD *)-v10);
    for (i = v32; i != v13; --i)
    {
      v16 = *(i - 1);
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    v32 = v13;
    if ((uint64_t *)v31 == v13)
    {
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v20, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v19, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (uint64_t **)&v31);
    }
    v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v21, a2, &v29);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v29);
    if ((IsDormant & 1) == 0)
    {
      Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v29);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
    v11 = 1;
    v9 = v37;
  }
  if ((v9 & 7) != 0)
  {
    v24 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20BFD2190(v30);
  v30[0] = (void **)&v31;
  sub_20BEEB2B8(v30);
  if ((v34 & 7) != 0)
  {
    v26 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_27Sdf_RelationshipChildPolicyEE11RemoveChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEE(a1, a2);
}

void sub_20C0CA970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void **p_p;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void ***v21;
  void ***v22;
  char *v23;
  uint64_t v24;
  _BOOL4 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *i;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  char *v34;
  char *j;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  uint64_t IsDormant;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v46;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  unsigned int *v65[2];
  void **v66;
  uint64_t v67;
  uint64_t v68;
  void ***v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C(v65);
  sub_20C0CB198(a2, a4, (int *)&v64);
  v10 = sub_20C0B22EC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v61);
  v11 = v64;
  v12 = v61;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
  sub_20BFD265C(&v61);
  if (a5 == -2 && v11 == v12)
    goto LABEL_65;
  v13 = sub_20BFCF650(a1);
  __p = 0;
  v59 = 0;
  v60 = 0;
  v14 = sub_20C0A683C((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::TfToken *, unsigned int **))(*(_QWORD *)v14 + 136))(&v66, v14, a2, v65);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v66))
  {
    if ((v67 & 4) != 0)
      p_p = (void **)(*(uint64_t (**)(void ***))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(&v66);
    else
      p_p = v66;
  }
  else
  {
    p_p = &__p;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  sub_20BFE538C(&v61, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
  sub_20BF4C2D8((uint64_t)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  sub_20C0B23C4(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v57);
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
  v16 = sub_20C0B22EC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (a5 == -2 && v56 == *(_QWORD *)a2)
  {
    if (v61 == v62)
    {
      v17 = v61;
    }
    else
    {
      v17 = v61;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v62)
        {
          v17 = v62;
          break;
        }
      }
    }
    v18 = (unint64_t)((char *)v17 - (char *)v61) >> 3;
  }
  else if (v62 - v61 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v62 - v61;
  }
  sub_20C0B438C((unsigned int **)&v55);
  v19 = sub_20BFCF650(a1);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v20 = sub_20C0A683C((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v20 + 136))(&v69, v20, &v56, &v55);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v69))
  {
    if ((v70 & 4) != 0)
      v21 = (void ***)(*(uint64_t (**)(void ****))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(&v69);
    else
      v21 = v69;
  }
  else
  {
    v21 = &v66;
  }
  __p = 0;
  v59 = 0;
  v60 = 0;
  sub_20BFE538C(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  v22 = (void ***)sub_20BF4C2D8((uint64_t)&v69);
  v69 = &v66;
  sub_20BEEB2B8(v22);
  v23 = (char *)__p;
  if (__p != v59)
  {
    while ((*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v59)
      {
        v23 = v59;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  if (v56 == *(_QWORD *)a2)
  {
    v24 = v23 - (_BYTE *)__p;
    if ((v57 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8)
      && ((_DWORD)v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == (_DWORD)v18))
    {
      goto LABEL_58;
    }
    v26 = (int)v18 > v24 >> 3;
    v27 = v61;
    if (v61 != v62)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v62)
        {
          v27 = v62;
          break;
        }
      }
    }
    sub_20C0D813C(v27 + 1, v62, v27);
    LODWORD(v18) = v18 - v26;
    for (i = v62; i != v28; --i)
    {
      v31 = *(i - 1);
      v30 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
    }
    v62 = v28;
  }
  else
  {
    sub_20C0D813C((_QWORD *)v23 + 1, v59, v23);
    for (j = v59; j != v34; j -= 8)
    {
      v37 = *((_QWORD *)j - 1);
      v36 = v37;
      if ((v37 & 7) != 0)
      {
        v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
    }
    v59 = v34;
    if (__p == v34)
    {
      v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55);
      v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v69);
      IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v69);
      if ((IsDormant & 1) == 0)
      {
        Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v69);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v69);
    }
    else
    {
      v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55, (uint64_t **)&__p);
    }
  }
  v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v46 = sub_20C0B22EC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v46, &v69);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
  sub_20BFD265C(&v69);
  sub_20C0B66C4(&v61, (char *)&v61[(int)v18], (char *)a4);
  v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  sub_20C0B4E30(v47, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v65, &v61);
LABEL_58:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  if ((v55 & 7) != 0)
  {
    v48 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if ((v57 & 7) != 0)
  {
    v50 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  __p = &v61;
  sub_20BEEB2B8((void ***)&__p);
LABEL_65:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
  sub_20BFD265C(&v64);
  if (((uint64_t)v65[0] & 7) != 0)
  {
    v52 = (unsigned int *)((unint64_t)v65[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  return 1;
}

void sub_20C0CAFF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  uint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_20BEEB2B8(&p_p);
  if ((a9 & 7) != 0)
  {
    v26 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  sub_20BFD1A18(&a10);
  if ((a11 & 7) != 0)
  {
    v28 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  __p = &a18;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a21);
  if ((a22 & 7) != 0)
  {
    v30 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  _Unwind_Resume(a1);
}

void sub_20C0CB198(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, int *a3@<X8>)
{
  uint64_t *EmptyString;

  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::IsValidName((size_t *)EmptyString))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a1, a2, a3);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  const char *v13;
  _BOOL8 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t **v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  _BOOL4 HasPrefix;
  uint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  void **v39[3];
  unint64_t v40;
  int v41;
  uint64_t v42;
  void *__p;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  void ***v51;

  sub_20C0B438C((unsigned int **)&v50);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      v13 = "Layer is not editable";
      goto LABEL_7;
    }
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      v13 = "Object does not exist";
LABEL_7:
      MEMORY[0x212B929D0](a6, v13);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v18 = (uint64_t **)sub_20C0B22EC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v18, &v46);
  v19 = sub_20BEB560C((uint64_t)&v46, (uint64_t)a1);
  v20 = v47;
  if (v47)
  {
    v21 = (unsigned int *)(v47 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (!v19)
  {
    if (!a6)
      goto LABEL_8;
    v13 = "Cannot reparent to another layer";
    goto LABEL_7;
  }
  sub_20C0CB198(a2, a4, &v48);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v48))
  {
    if (!a6)
    {
LABEL_27:
      v14 = 0;
      goto LABEL_28;
    }
    v27 = "Invalid name";
LABEL_26:
    MEMORY[0x212B929D0](a6, v27);
    goto LABEL_27;
  }
  v24 = sub_20C0B22EC(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  v25 = v46;
  v26 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (v25 != v26)
  {
    v28 = sub_20C0B22EC(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v46);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_20BFD265C(&v46);
    if (!HasPrefix)
    {
      v30 = sub_20BFCF650(a1);
      __p = 0;
      v44 = 0;
      v45 = 0;
      sub_20C0B4D3C(v30, (uint64_t)a2, (uint64_t)&v50, (uint64_t **)&__p, &v46);
      v39[0] = &__p;
      sub_20BEEB2B8(v39);
      v31 = (unint64_t)(v47 - v46) >> 3;
      if (a5 != -1)
        LODWORD(v31) = a5;
      if ((_DWORD)v31 == -2 || (int)v31 <= (unint64_t)((v47 - v46) >> 3))
      {
        sub_20C0B23C4(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
        if (SHIBYTE(v45) < 0)
          operator delete(__p);
        v32 = sub_20C0B22EC(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v41);
        sub_20BFD1A18(&__p);
        sub_20C0B438C((unsigned int **)&v40);
        v33 = sub_20BFCF650(a1);
        memset(v39, 0, sizeof(v39));
        sub_20C0B4D3C(v33, (uint64_t)&v41, (uint64_t)&v40, (uint64_t **)v39, &__p);
        v51 = v39;
        sub_20BEEB2B8((void ***)&v51);
        v34 = __p;
        if (__p != v44)
        {
          while ((*v34 & 0xFFFFFFFFFFFFFFF8) != (v42 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v34 == v44)
            {
              v34 = v44;
              break;
            }
          }
        }
        v14 = v34 != v44;
        if (a6 && v34 == v44)
          MEMORY[0x212B929D0](a6, "Coding error: Object is not in its parent's children");
        v39[0] = &__p;
        sub_20BEEB2B8(v39);
        if ((v40 & 7) != 0)
        {
          v35 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        sub_20BFD1A18(&v41);
        if ((v42 & 7) != 0)
        {
          v37 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
      }
      else
      {
        if (a6)
          MEMORY[0x212B929D0](a6, "Invalid index");
        v14 = 0;
      }
      __p = &v46;
      sub_20BEEB2B8((void ***)&__p);
      goto LABEL_28;
    }
    if (!a6)
      goto LABEL_27;
    v27 = "Cannot reparent object under itself";
    goto LABEL_26;
  }
  v14 = 1;
LABEL_28:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
  sub_20BFD265C(&v48);
LABEL_9:
  if ((v50 & 7) != 0)
  {
    v15 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v14;
}

void sub_20C0CB5F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  __p = &a22;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18((_DWORD *)(v23 - 88));
  v25 = *(_QWORD *)(v23 - 80);
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  _BOOL8 v12;
  void ***v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  void **v18[3];
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22[2];
  void ***v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C(v22);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8) & 1) != 0)
  {
    v9 = sub_20BFCF650(a1);
    memset(v18, 0, sizeof(v18));
    v10 = sub_20C0A683C((uint64_t *)(v9 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v10 + 136))(&v23, v10, a2, v22);
    if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
    {
      if ((v24 & 4) != 0)
        v11 = (uint64_t **)(*(uint64_t (**)(void ****))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(&v23);
      else
        v11 = (uint64_t **)v23;
    }
    else
    {
      v11 = (uint64_t **)v18;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_20BFE538C(&v19, *v11, v11[1], v11[1] - *v11);
    v13 = (void ***)sub_20BF4C2D8((uint64_t)&v23);
    v23 = v18;
    sub_20BEEB2B8(v13);
    v14 = v19;
    if (v19 != v20)
    {
      while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v14 == v20)
        {
          v14 = v20;
          break;
        }
      }
    }
    v12 = v14 != v20;
    if (a4 && v14 == v20)
      MEMORY[0x212B929D0](a4, "Object does not exist");
    v18[0] = (void **)&v19;
    sub_20BEEB2B8(v18);
  }
  else
  {
    if (a4)
      MEMORY[0x212B929D0](a4, "Layer is not editable");
    v12 = 0;
  }
  if (((uint64_t)v22[0] & 7) != 0)
  {
    v15 = (unsigned int *)((unint64_t)v22[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v12;
}

void sub_20C0CB93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;

  a10 = (void **)&a13;
  sub_20BEEB2B8(&a10);
  if ((a16 & 7) != 0)
  {
    v17 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CreateSpec(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;

  v9 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(v8) + 14))
      v10 = *(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CreateSpec(v10, a2, a3, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_22Sdf_VariantChildPolicyEE10CreateSpecERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Spec;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  void **v17;
  const char *Text;
  void **v19;
  unsigned int *v21;
  void *__p[2];
  char v23;
  char v24[8];
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;

  if ((_DWORD)a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
    Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if ((Spec & 1) != 0)
    {
      sub_20C0B2FEC(a2, &v25);
      sub_20C0CBC94((unsigned int **)__p);
      v9 = *(unsigned int **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v21 = v9;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          v21 = v10;
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, 1);
      if ((v21 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v14 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_20BFD265C(&v25);
    }
    else
    {
      v25 = "sdf/childrenUtils.cpp";
      v26 = "CreateSpec";
      v27 = 101;
      v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__"
            "pxrReserved__::Sdf_VariantChildPolicy]";
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C524D70, a3, (uint64_t)__p);
      v16 = v23;
      v17 = (void **)__p[0];
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v19 = __p;
      if (v16 < 0)
        v19 = v17;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v19, Text);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  }
  else
  {
    v25 = "sdf/childrenUtils.cpp";
    v26 = "CreateSpec";
    v27 = 90;
    v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantC"
          "hildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__pxrR"
          "eserved__::Sdf_VariantChildPolicy]";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_22Sdf_VariantChildPolicyEE10CreateSpecEPNS_8SdfLayerERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

void sub_20C0CBC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a18);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_20C0CBC94@<X0>(unsigned int **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result)
    result = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v3 = (unsigned int *)*((_QWORD *)result + 7);
  *a1 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 = v4;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsValidName(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t *EmptyString;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_22Sdf_VariantChildPolicyEE11IsValidNameERKNS_7TfTokenE(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CanRename@<X0>(uint64_t **a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  char v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  void *v13;
  _QWORD *result;
  const char *Text;
  const char *v16;
  char *v17;
  unint64_t v18;
  const char *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  int HasSpec;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  void *v27;
  void *__p[2];
  uint64_t v29;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
  v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v6);
  v8 = __p[1];
  if (__p[1])
  {
    v9 = (unsigned int *)((char *)__p[1] + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
  }
  if ((v7 & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsValidName(a2))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      sub_20C0CC02C((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a2, &v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      v12 = v27;
      v13 = __p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      if (v12 == v13)
        goto LABEL_9;
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v27))
        goto LABEL_21;
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
      HasSpec = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v22 = __p[1];
      if (__p[1])
      {
        v23 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v24 = __ldxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
      }
      if (!HasSpec)
      {
LABEL_9:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 24) = 0;
      }
      else
      {
LABEL_21:
        sub_20BDDC0E4(__p, "An object with that name already exists");
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v27);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v18 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v16, v17, Text, v19);
      if (SHIBYTE(v29) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, __p[0], (unint64_t)__p[1]);
        v26 = SHIBYTE(v29);
        *(_BYTE *)(a3 + 24) = 1;
        if (v26 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    return sub_20BFD265C(&v27);
  }
  else
  {
    result = sub_20BDDC0E4(__p, "Layer is not editable");
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v29;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

void sub_20C0CBF8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0CC02C@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  int v6;
  int v7;

  sub_20C0B2FEC(a1, &v6);
  sub_20C0B2C10((pxrInternal__aapl__pxrReserved__::SdfPath *)&v6, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20C0CC08C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::Rename(pxrInternal__aapl__pxrReserved__::SdfSpec *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  void ***v14;
  uint64_t v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  const char *Text;
  const char *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 i;
  uint64_t v47;
  const char *v48;
  char v49;
  int v50;
  _DWORD v51[3];
  uint64_t v52[3];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &v50);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::IsValidName(a2))
  {
    sub_20C0CC02C((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, a2, &v45);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v45))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &i);
      v4 = v45;
      v5 = i;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 1);
      sub_20BFD265C(&i);
      if (v4 == v5)
      {
        v6 = 1;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v43);
        sub_20C0B2FEC((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v41);
        sub_20C0CBC94((unsigned int **)&v40);
        v11 = sub_20BFCF650(&v43);
        i = 0uLL;
        v47 = 0;
        v12 = sub_20C0A683C((uint64_t *)(v11 + 112));
        (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v12 + 136))(v52, v12, &v41, &v40);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)v52))
        {
          if ((v52[1] & 4) != 0)
            v13 = (uint64_t **)(*(uint64_t (**)(uint64_t *))((v52[1] & 0xFFFFFFFFFFFFFFF8) + 168))(v52);
          else
            v13 = (uint64_t **)v52[0];
        }
        else
        {
          v13 = (uint64_t **)&i;
        }
        v38 = 0uLL;
        v39 = 0;
        sub_20BFE538C(&v38, *v13, v13[1], v13[1] - *v13);
        v14 = (void ***)sub_20BF4C2D8((uint64_t)v52);
        v52[0] = (uint64_t)&i;
        sub_20BEEB2B8(v14);
        *(_OWORD *)v52 = v38;
        while (v52[0] != v52[1])
        {
          if ((*(_QWORD *)sub_20C023B14(v52, v15, v16) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
          {
            *(_QWORD *)&i = "sdf/childrenUtils.cpp";
            *((_QWORD *)&i + 1) = "Rename";
            v47 = 726;
            v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "VariantChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy = p"
                  "xrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
            v49 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to %s because a sibling with that name already exists", Text, v24);
            v6 = 0;
            goto LABEL_38;
          }
          sub_20C023C08(v52);
        }
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
        v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
        v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
        if ((v6 & 1) != 0)
        {
          for (i = v38; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
          {
            v20 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v18, v19);
            if ((*v20 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50) & 0xFFFFFFFFFFFFFFF8))
            {
              v25 = *(_QWORD *)a2;
              if ((*(_QWORD *)a2 & 7) != 0)
              {
                v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
                do
                  v27 = __ldxr(v26);
                while (__stxr(v27 + 2, v26));
                if ((v27 & 1) == 0)
                  v25 &= 0xFFFFFFFFFFFFFFF8;
              }
              v28 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v21, v22);
              if ((*v28 & 7) != 0)
              {
                v29 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
                do
                  v30 = __ldxr(v29);
                while (__stlxr(v30 - 2, v29));
              }
              *v28 = v25;
              break;
            }
          }
          v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
          sub_20C0B4E30(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (uint64_t **)&v38);
        }
        sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
LABEL_38:
        *(_QWORD *)&i = &v38;
        sub_20BEEB2B8((void ***)&i);
        if ((v40 & 7) != 0)
        {
          v32 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
        sub_20BFD265C(&v41);
        v34 = v44;
        if (v44)
        {
          v35 = (unsigned int *)(v44 + 8);
          do
          {
            v36 = __ldxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    sub_20BFD265C(&v45);
  }
  else
  {
    *(_QWORD *)&i = "sdf/childrenUtils.cpp";
    *((_QWORD *)&i + 1) = "Rename";
    v47 = 699;
    v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantC"
          "hildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy = pxrInternal__aapl"
          "__pxrReserved__::Sdf_VariantChildPolicy]";
    v49 = 0;
    v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v7, v9);
    v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v51);
  sub_20BFD265C(&v50);
  return v6;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  uint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  void ***v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t *v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v41;
  uint64_t **v42;
  uint64_t v43;
  char *v44;
  BOOL v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v50;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v51;
  uint64_t v52;
  char *v53;
  _BOOL4 HasPrefix;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v55;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v65;
  uint64_t v66;
  char *v67;
  _BOOL8 v68;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v69;
  uint64_t v70;
  char *v71;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v72;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v73;
  int v74;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  void ***v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *m;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v87;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v88;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v89;
  uint64_t v90;
  char *v91;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v92;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v100;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v101;
  unsigned int *v102;
  unsigned int v103;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  __int128 k;
  __int128 j;
  char v115[8];
  void *__p[2];
  uint64_t v117;
  const char *v118;
  char v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  uint64_t v127;
  __int128 i;
  uint64_t v129;
  void **v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  sub_20C0CBC94((unsigned int **)&v125);
  v123 = 0uLL;
  v124 = 0;
  __p[1] = 0;
  v117 = 0;
  __p[0] = &__p[1];
  for (i = *a3; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C0D8A34(&i))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D89B8((uint64_t *)&i, v6, v7);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8) & 1) != 0)
      goto LABEL_14;
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D89B8((uint64_t *)&i, v9, v10);
    sub_20C0B3100(v11, (uint64_t)&v126);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v120);
    if (SHIBYTE(v127) < 0)
      operator delete((void *)v126);
    sub_20C0D7FB4((uint64_t **)__p, (uint64_t *)&v120, (uint64_t *)&v120);
    if ((v9 & 1) != 0)
      goto LABEL_9;
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D89B8((uint64_t *)&i, v9, v10);
    v13 = sub_20BFE8634(v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v126);
    v14 = v126;
    v15 = *(_QWORD *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v126 + 1);
    sub_20BFD265C(&v126);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_20BFD265C(&j);
    if (v14 != v15)
LABEL_9:
      v16 = 1;
    else
      v16 = 0;
    if ((v120 & 7) != 0)
    {
      v17 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    if ((v16 & 1) != 0)
    {
LABEL_14:
      v19 = (unsigned int **)sub_20C0D89B8((uint64_t *)&i, v9, v10);
      v20 = *((_QWORD *)&v123 + 1);
      if (*((_QWORD *)&v123 + 1) >= v124)
      {
        v23 = sub_20C0D7E80((unsigned int ***)&v123, v19);
      }
      else
      {
        v21 = *v19;
        **((_QWORD **)&v123 + 1) = *v19;
        if (v21)
        {
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        v23 = (char *)(v20 + 8);
      }
      *((_QWORD *)&v123 + 1) = v23;
    }
  }
  sub_20BF2B200((uint64_t)__p, (_QWORD *)__p[1]);
  v24 = sub_20BFCF650(a1);
  __p[0] = 0;
  __p[1] = 0;
  v117 = 0;
  v25 = sub_20C0A683C((uint64_t *)(v24 + 112));
  (*(void (**)(__int128 *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v25 + 136))(&i, v25, a2, &v125);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0)
      v26 = (uint64_t **)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    else
      v26 = (uint64_t **)i;
  }
  else
  {
    v26 = (uint64_t **)__p;
  }
  v126 = 0uLL;
  v127 = 0;
  sub_20BFE538C(&v126, *v26, v26[1], v26[1] - *v26);
  v27 = (void ***)sub_20BF4C2D8((uint64_t)&i);
  *(_QWORD *)&i = __p;
  sub_20BEEB2B8(v27);
  *((_QWORD *)&i + 1) = 0;
  v129 = 0;
  *(_QWORD *)&i = (char *)&i + 8;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  sub_20BFC9A6C((char **)&v120, (uint64_t)(*((_QWORD *)&v123 + 1) - v123) >> 3);
  for (j = v123; (_QWORD)j != *((_QWORD *)&j + 1); sub_20C0CD3F8(&j))
  {
    v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0CD37C((uint64_t *)&j, v28, v29);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v30))
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 181;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varia"
             "ntChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy"
             "::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_103;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0CD37C((uint64_t *)&j, v31, v32);
    sub_20C0B3100(v33, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v105);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    v34 = v121;
    if ((unint64_t)v121 >= v122)
    {
      v38 = sub_20BFCA068((char **)&v120, (uint64_t *)&v105);
    }
    else
    {
      v35 = v105;
      *v121 = v105;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 2, v36));
        if ((v37 & 1) == 0)
          *v34 &= 0xFFFFFFFFFFFFFFF8;
      }
      v38 = (char *)(v34 + 1);
    }
    v121 = (uint64_t *)v38;
    sub_20C0D7FB4((uint64_t **)&i, (uint64_t *)&v105, (uint64_t *)&v105);
    if ((v39 & 1) == 0)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 188;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varia"
             "ntChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy"
             "::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
LABEL_100:
      if ((v105 & 7) != 0)
      {
        v98 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
LABEL_103:
      v68 = 0;
      goto LABEL_108;
    }
    v41 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0CD37C((uint64_t *)&j, v39, v40);
    v42 = (uint64_t **)sub_20BFE8634(v41);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v42, (uint64_t *)__p);
    v45 = sub_20BEB560C((uint64_t)__p, (uint64_t)a1);
    v46 = __p[1];
    if (__p[1])
    {
      v47 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v48 = __ldxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
        (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
    }
    if (!v45)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 193;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varia"
             "ntChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy"
             "::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_100;
    }
    v50 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0CD37C((uint64_t *)&j, v43, v44);
    v51 = sub_20BFE8634(v50);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v51, &v130);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v130, __p);
    if (*(void **)a2 == __p[0])
    {
      HasPrefix = 0;
    }
    else
    {
      v55 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0CD37C((uint64_t *)&j, v52, v53);
      v56 = sub_20BFE8634(v55);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v56, &k);
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
      sub_20BFD265C(&k);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v130 + 1);
    sub_20BFD265C(&v130);
    if (HasPrefix)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 203;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varia"
             "ntChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPolicy"
             "::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      goto LABEL_100;
    }
    if ((v105 & 7) != 0)
    {
      v57 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
  *(_OWORD *)__p = v126;
  while (__p[0] != __p[1])
  {
    v61 = (uint64_t *)sub_20C023B14((uint64_t *)__p, v59, v60);
    if ((_QWORD *)((char *)&i + 8) == sub_20C0D8030((uint64_t)&i, v61))
    {
      v64 = (_QWORD *)sub_20C023B14((uint64_t *)__p, v62, v63);
      sub_20C0B2C10(a2, v64, &j);
      v65 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v65, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_20BFD265C(&j);
    }
    sub_20C023C08(__p);
  }
  sub_20C0D80BC((uint64_t)&j, (uint64_t *)v126, *((uint64_t **)&v126 + 1));
  for (k = v123; ; sub_20C0CD3F8(&k))
  {
    v68 = k == *((_QWORD *)&k + 1);
    if ((_QWORD)k == *((_QWORD *)&k + 1))
      break;
    v69 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0CD37C((uint64_t *)&k, v66, v67);
    sub_20C0B3100(v69, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v112);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    sub_20C0B2C10(a2, &v112, &v110);
    v72 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0CD37C((uint64_t *)&k, v70, v71);
    v73 = sub_20BFE8634(v72);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v73, __p);
    sub_20C0B2FEC((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    if (v109 == *(_QWORD *)a2)
    {
      v74 = 10;
    }
    else
    {
      if ((_QWORD *)((char *)&j + 8) != sub_20C0D8030((uint64_t)&j, &v112))
      {
        v75 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v75, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
      }
      sub_20C0CBC94((unsigned int **)&v108);
      v76 = sub_20BFCF650(a1);
      __p[0] = 0;
      __p[1] = 0;
      v117 = 0;
      v77 = sub_20C0A683C((uint64_t *)(v76 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v77 + 136))(&v130, v77, &v109, &v108);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v130))
      {
        if ((v131 & 4) != 0)
          v78 = (uint64_t **)(*(uint64_t (**)(void ***))((v131 & 0xFFFFFFFFFFFFFFF8) + 168))(&v130);
        else
          v78 = (uint64_t **)v130;
      }
      else
      {
        v78 = (uint64_t **)__p;
      }
      v105 = 0;
      v106 = 0;
      v107 = 0;
      sub_20BFE538C(&v105, *v78, v78[1], v78[1] - *v78);
      v79 = (void ***)sub_20BF4C2D8((uint64_t)&v130);
      v130 = __p;
      sub_20BEEB2B8(v79);
      v80 = (uint64_t *)v105;
      if ((uint64_t *)v105 != v106)
      {
        while ((*v80 & 0xFFFFFFFFFFFFFFF8) != (v112 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v80 == v106)
          {
            v80 = v106;
            break;
          }
        }
      }
      if (v80 == v106)
      {
        __p[0] = "sdf/childrenUtils.cpp";
        __p[1] = "SetChildren";
        v117 = 254;
        v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Var"
               "iantChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPo"
               "licy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
        v119 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        v74 = 1;
      }
      else
      {
        sub_20C0D813C(v80 + 1, v106, v80);
        for (m = v106; m != v81; --m)
        {
          v84 = *(m - 1);
          v83 = v84;
          if ((v84 & 7) != 0)
          {
            v85 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
            do
              v86 = __ldxr(v85);
            while (__stlxr(v86 - 2, v85));
          }
        }
        v106 = v81;
        if ((uint64_t *)v105 == v81)
        {
          v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v88, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108);
        }
        else
        {
          v87 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v87, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108, (uint64_t **)&v105);
        }
        v89 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        v92 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0CD37C((uint64_t *)&k, v90, v91);
        v93 = sub_20BFE8634(v92);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v93, __p);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v89, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_20BFD265C(__p);
        v74 = 0;
      }
      __p[0] = &v105;
      sub_20BEEB2B8((void ***)__p);
      if ((v108 & 7) != 0)
      {
        v94 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
    sub_20BFD265C(&v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v111);
    sub_20BFD265C(&v110);
    if ((v112 & 7) != 0)
    {
      v96 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
      do
        v97 = __ldxr(v96);
      while (__stlxr(v97 - 2, v96));
    }
    if (v74 != 10 && v74)
      goto LABEL_107;
  }
  if ((uint64_t *)v120 == v121)
  {
    v101 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v101, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125);
  }
  else
  {
    v100 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    sub_20C0B4E30(v100, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125, (uint64_t **)&v120);
  }
LABEL_107:
  sub_20BF2B200((uint64_t)&j, *((_QWORD **)&j + 1));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
LABEL_108:
  __p[0] = &v120;
  sub_20BEEB2B8((void ***)__p);
  sub_20BF2B200((uint64_t)&i, *((_QWORD **)&i + 1));
  __p[0] = &v126;
  sub_20BEEB2B8((void ***)__p);
  __p[0] = &v123;
  sub_20BFE69E4((void ***)__p);
  if ((v125 & 7) != 0)
  {
    v102 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  return v68;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_22Sdf_VariantChildPolicyEE11SetChildrenERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__16vectorINS_9SdfHandleINS_14SdfVariantSpecEEENSB_9allocatorISF_EEEE(a1, a2, a3);
}

void sub_20C0CD03C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;

  if ((a10 & 7) != 0)
  {
    v39 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  __p = &a34;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BF2B200(v37 - 144, *(_QWORD **)(v37 - 136));
  __p = (uint64_t *)(v37 - 176);
  sub_20BEEB2B8((void ***)&__p);
  __p = (uint64_t *)&a37;
  sub_20BFE69E4((void ***)&__p);
  v41 = *(_QWORD *)(v37 - 184);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C0CD37C(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfHand"
            "le<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>>::operator*() [T = std::vector<pxrInternal__aapl__pxrR"
            "eserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0CD3F0()
{
  JUMPOUT(0x20C0CD3A0);
}

_QWORD *sub_20C0CD3F8(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>>::operator++() [T = std::vector<pxrInter"
            "nal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t **v8;
  BOOL v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  _BOOL4 HasPrefix;
  uint64_t v23;
  uint64_t v24;
  void **p_p;
  void ***v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  _QWORD *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  const char *Text;
  void ***v38;
  void **v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  int v54;
  void **v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  void *__p;
  const char *v62;
  uint64_t v63;
  const char *v64;
  char v65;
  unsigned int *v66[2];
  void **v67;
  void **v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  sub_20C0CBC94(v66);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 290;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantC"
          "hildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, int"
          ") [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  v8 = (uint64_t **)sub_20BFE8634(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&__p);
  v9 = sub_20BEB560C((uint64_t)&__p, (uint64_t)a1);
  v10 = v62;
  if (v62)
  {
    v11 = (unsigned int *)(v62 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!v9)
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 295;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantC"
          "hildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, int"
          ") [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_12;
  }
  v14 = sub_20BFE8634(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v55);
  sub_20C0B2FEC((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, &__p);
  v15 = __p;
  v16 = *(void **)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
  sub_20BFD265C(&v55);
  if (v15 == v16)
  {
    v17 = 1;
  }
  else
  {
    sub_20C0B3100(a3, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v60);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    sub_20C0B2C10(a2, &v60, &v58);
    v21 = sub_20BFE8634(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v21, &__p);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (HasPrefix)
    {
      __p = "sdf/childrenUtils.cpp";
      v62 = "InsertChild";
      v63 = 312;
      v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &,"
            " int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
      v65 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      v17 = 0;
    }
    else
    {
      v23 = sub_20BFCF650(a1);
      __p = 0;
      v62 = 0;
      v63 = 0;
      v24 = sub_20C0A683C((uint64_t *)(v23 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v24 + 136))(&v67, v24, a2, v66);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v67))
      {
        if ((v68 & 4) != 0)
          p_p = (void **)(*(uint64_t (**)(void ***))(((unint64_t)v68 & 0xFFFFFFFFFFFFFFF8) + 168))(&v67);
        else
          p_p = v67;
      }
      else
      {
        p_p = &__p;
      }
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_20BFE538C(&v55, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
      v26 = (void ***)sub_20BF4C2D8((uint64_t)&v67);
      v67 = &__p;
      sub_20BEEB2B8(v26);
      v29 = (unint64_t)((char *)v56 - (char *)v55) >> 3;
      if (a4 != -1)
        LODWORD(v29) = a4;
      v30 = (int)v29;
      if ((int)v29 <= (unint64_t)(((char *)v56 - (char *)v55) >> 3))
      {
        v67 = v55;
        v68 = (void **)v56;
        while (v67 != v68)
        {
          v32 = (_QWORD *)sub_20C023B14((uint64_t *)&v67, v27, v28);
          if ((*v32 & 0xFFFFFFFFFFFFFFF8) == (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            __p = "sdf/childrenUtils.cpp";
            v62 = "InsertChild";
            v63 = 334;
            v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "VariantChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::"
                  "ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
            v65 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_37;
          }
          sub_20C023C08(&v67);
        }
        v33 = sub_20BFE8634(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v33, &__p);
        sub_20C0B2FEC((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v53);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
        sub_20C0CBC94((unsigned int **)&v52);
        v34 = sub_20BFCF650(a1);
        __p = 0;
        v62 = 0;
        v63 = 0;
        v35 = sub_20C0A683C((uint64_t *)(v34 + 112));
        (*(void (**)(void ***__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v35 + 136))(&v70, v35, &v53, &v52);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v70))
        {
          if ((v71 & 4) != 0)
            v36 = (void **)(*(uint64_t (**)(void ***))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(&v70);
          else
            v36 = v70;
        }
        else
        {
          v36 = &__p;
        }
        v67 = 0;
        v68 = 0;
        v69 = 0;
        sub_20BFE538C(&v67, (uint64_t *)*v36, (uint64_t *)v36[1], ((_BYTE *)v36[1] - (_BYTE *)*v36) >> 3);
        v38 = (void ***)sub_20BF4C2D8((uint64_t)&v70);
        v70 = &__p;
        sub_20BEEB2B8(v38);
        v39 = v67;
        if (v67 != v68)
        {
          while (((unint64_t)*v39 & 0xFFFFFFFFFFFFFFF8) != (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v39 == v68)
            {
              v39 = v68;
              break;
            }
          }
        }
        v17 = v39 != v68;
        if (v39 == v68)
        {
          __p = "sdf/childrenUtils.cpp";
          v62 = "InsertChild";
          v63 = 352;
          v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Va"
                "riantChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Valu"
                "eType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
          v65 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
          sub_20C0B5D58((uint64_t)&v67, v39);
          if (v67 == v68)
          {
            v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52);
          }
          else
          {
            v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52, (uint64_t **)&v67);
          }
          v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          v43 = sub_20BFE8634(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v43, &v70);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
          sub_20BFD1A18(&v70);
          sub_20C0B66C4(&v55, (char *)&v55[v30], (char *)&v60);
          v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v44, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v66, (uint64_t **)&v55);
          v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v70);
          IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v70);
          if ((IsDormant & 1) == 0)
          {
            Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v70);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v70);
          sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
        }
        __p = &v67;
        sub_20BEEB2B8((void ***)&__p);
        if ((v52 & 7) != 0)
        {
          v48 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
        sub_20BFD265C(&v53);
      }
      else
      {
        __p = "sdf/childrenUtils.cpp";
        v62 = "InsertChild";
        v63 = 326;
        v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Vari"
              "antChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueTyp"
              "e &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]";
        v65 = 0;
        v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v31, v30);
LABEL_37:
        v17 = 0;
      }
      __p = &v55;
      sub_20BEEB2B8((void ***)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
    sub_20BFD265C(&v58);
    if ((v60 & 7) != 0)
    {
      v50 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
  }
LABEL_13:
  if (((uint64_t)v66[0] & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v66[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  return v17;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_22Sdf_VariantChildPolicyEE11InsertChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_14SdfVariantSpecEEEi(a1, a2, a3, a4);
}

void sub_20C0CDB58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;

  __p = (__int16 *)(v30 - 112);
  sub_20BEEB2B8((void ***)&__p);
  if ((a11 & 7) != 0)
  {
    v32 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  sub_20BFD1A18(&a12);
  __p = &a14;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a19);
  if ((a20 & 7) != 0)
  {
    v34 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if ((a29 & 7) != 0)
  {
    v36 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  void ***v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v29;
  void **v30[3];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  sub_20C0CBC94((unsigned int **)&v34);
  v4 = sub_20BFCF650(a1);
  memset(v30, 0, sizeof(v30));
  v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v5 + 136))(&v37, v5, a2, &v34);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v37))
  {
    if ((v38 & 4) != 0)
      v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(&v37);
    else
      v6 = (uint64_t **)v37;
  }
  else
  {
    v6 = (uint64_t **)v30;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_20BFE538C(&v31, *v6, v6[1], v6[1] - *v6);
  v7 = (void ***)sub_20BF4C2D8((uint64_t)&v37);
  v37 = (unint64_t)v30;
  sub_20BEEB2B8(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v30);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v37);
  v8 = (uint64_t *)v31;
  v9 = v37;
  if ((uint64_t *)v31 == v32)
  {
LABEL_9:
    v11 = 0;
  }
  else
  {
    v10 = -v31;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v37 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v32)
        goto LABEL_9;
    }
    sub_20C0B2C10(a2, &v37, &v35);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    sub_20C0D813C((_QWORD *)(8 - v10), v32, (_QWORD *)-v10);
    for (i = v32; i != v13; --i)
    {
      v16 = *(i - 1);
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    v32 = v13;
    if ((uint64_t *)v31 == v13)
    {
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v20, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v19, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (uint64_t **)&v31);
    }
    v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v21, a2, &v29);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v29);
    if ((IsDormant & 1) == 0)
    {
      Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v29);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
    v11 = 1;
    v9 = v37;
  }
  if ((v9 & 7) != 0)
  {
    v24 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v30);
  v30[0] = (void **)&v31;
  sub_20BEEB2B8(v30);
  if ((v34 & 7) != 0)
  {
    v26 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_22Sdf_VariantChildPolicyEE11RemoveChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEE(a1, a2);
}

void sub_20C0CE018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, char *a4, int a5)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void **p_p;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void ***v21;
  void ***v22;
  char *v23;
  uint64_t v24;
  _BOOL4 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *i;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  char *v34;
  char *j;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  uint64_t IsDormant;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v46;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  unsigned int *v65[2];
  void **v66;
  uint64_t v67;
  uint64_t v68;
  void ***v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  sub_20C0CBC94(v65);
  sub_20C0CE840(a2, a4, &v64);
  v10 = sub_20BFE8634(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v61);
  v11 = v64;
  v12 = v61;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
  sub_20BFD265C(&v61);
  if (a5 == -2 && v11 == v12)
    goto LABEL_65;
  v13 = sub_20BFCF650(a1);
  __p = 0;
  v59 = 0;
  v60 = 0;
  v14 = sub_20C0A683C((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::TfToken *, unsigned int **))(*(_QWORD *)v14 + 136))(&v66, v14, a2, v65);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v66))
  {
    if ((v67 & 4) != 0)
      p_p = (void **)(*(uint64_t (**)(void ***))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(&v66);
    else
      p_p = v66;
  }
  else
  {
    p_p = &__p;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  sub_20BFE538C(&v61, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
  sub_20BF4C2D8((uint64_t)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  sub_20C0B3100(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v57);
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
  v16 = sub_20BFE8634(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  sub_20C0B2FEC((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (a5 == -2 && v56 == *(_QWORD *)a2)
  {
    if (v61 == v62)
    {
      v17 = v61;
    }
    else
    {
      v17 = v61;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v62)
        {
          v17 = v62;
          break;
        }
      }
    }
    v18 = (unint64_t)((char *)v17 - (char *)v61) >> 3;
  }
  else if (v62 - v61 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v62 - v61;
  }
  sub_20C0CBC94((unsigned int **)&v55);
  v19 = sub_20BFCF650(a1);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v20 = sub_20C0A683C((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v20 + 136))(&v69, v20, &v56, &v55);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v69))
  {
    if ((v70 & 4) != 0)
      v21 = (void ***)(*(uint64_t (**)(void ****))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(&v69);
    else
      v21 = v69;
  }
  else
  {
    v21 = &v66;
  }
  __p = 0;
  v59 = 0;
  v60 = 0;
  sub_20BFE538C(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  v22 = (void ***)sub_20BF4C2D8((uint64_t)&v69);
  v69 = &v66;
  sub_20BEEB2B8(v22);
  v23 = (char *)__p;
  if (__p != v59)
  {
    while ((*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v59)
      {
        v23 = v59;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  if (v56 == *(_QWORD *)a2)
  {
    v24 = v23 - (_BYTE *)__p;
    if ((v57 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8)
      && ((_DWORD)v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == (_DWORD)v18))
    {
      goto LABEL_58;
    }
    v26 = (int)v18 > v24 >> 3;
    v27 = v61;
    if (v61 != v62)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v62)
        {
          v27 = v62;
          break;
        }
      }
    }
    sub_20C0D813C(v27 + 1, v62, v27);
    LODWORD(v18) = v18 - v26;
    for (i = v62; i != v28; --i)
    {
      v31 = *(i - 1);
      v30 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
    }
    v62 = v28;
  }
  else
  {
    sub_20C0D813C((_QWORD *)v23 + 1, v59, v23);
    for (j = v59; j != v34; j -= 8)
    {
      v37 = *((_QWORD *)j - 1);
      v36 = v37;
      if ((v37 & 7) != 0)
      {
        v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
    }
    v59 = v34;
    if (__p == v34)
    {
      v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55);
      v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v69);
      IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v69);
      if ((IsDormant & 1) == 0)
      {
        Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v69);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v69);
    }
    else
    {
      v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55, (uint64_t **)&__p);
    }
  }
  v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v46 = sub_20BFE8634(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v46, &v69);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
  sub_20BFD265C(&v69);
  sub_20C0B66C4(&v61, (char *)&v61[(int)v18], a4);
  v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  sub_20C0B4E30(v47, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v65, &v61);
LABEL_58:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  if ((v55 & 7) != 0)
  {
    v48 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if ((v57 & 7) != 0)
  {
    v50 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  __p = &v61;
  sub_20BEEB2B8((void ***)&__p);
LABEL_65:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
  sub_20BFD265C(&v64);
  if (((uint64_t)v65[0] & 7) != 0)
  {
    v52 = (unsigned int *)((unint64_t)v65[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  return 1;
}

void sub_20C0CE69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  uint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_20BEEB2B8(&p_p);
  if ((a9 & 7) != 0)
  {
    v26 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  sub_20BFD1A18(&a10);
  if ((a11 & 7) != 0)
  {
    v28 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  __p = &a18;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a21);
  if ((a22 & 7) != 0)
  {
    v30 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  _Unwind_Resume(a1);
}

void sub_20C0CE840(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t *EmptyString;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString))
  {
    sub_20C0B2C10(a1, a2, a3);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, _QWORD *a4, int a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  const char *v13;
  _BOOL8 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t **v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  _BOOL4 HasPrefix;
  uint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  void **v39[3];
  unint64_t v40;
  int v41;
  uint64_t v42;
  void *__p;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  void ***v51;

  sub_20C0CBC94((unsigned int **)&v50);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      v13 = "Layer is not editable";
      goto LABEL_7;
    }
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      v13 = "Object does not exist";
LABEL_7:
      MEMORY[0x212B929D0](a6, v13);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v18 = (uint64_t **)sub_20BFE8634(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v18, &v46);
  v19 = sub_20BEB560C((uint64_t)&v46, (uint64_t)a1);
  v20 = v47;
  if (v47)
  {
    v21 = (unsigned int *)(v47 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (!v19)
  {
    if (!a6)
      goto LABEL_8;
    v13 = "Cannot reparent to another layer";
    goto LABEL_7;
  }
  sub_20C0CE840(a2, a4, &v48);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v48))
  {
    if (!a6)
    {
LABEL_27:
      v14 = 0;
      goto LABEL_28;
    }
    v27 = "Invalid name";
LABEL_26:
    MEMORY[0x212B929D0](a6, v27);
    goto LABEL_27;
  }
  v24 = sub_20BFE8634(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &__p);
  sub_20C0B2FEC((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  v25 = v46;
  v26 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (v25 != v26)
  {
    v28 = sub_20BFE8634(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v46);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_20BFD265C(&v46);
    if (!HasPrefix)
    {
      v30 = sub_20BFCF650(a1);
      __p = 0;
      v44 = 0;
      v45 = 0;
      sub_20C0B4D3C(v30, (uint64_t)a2, (uint64_t)&v50, (uint64_t **)&__p, &v46);
      v39[0] = &__p;
      sub_20BEEB2B8(v39);
      v31 = (unint64_t)(v47 - v46) >> 3;
      if (a5 != -1)
        LODWORD(v31) = a5;
      if ((_DWORD)v31 == -2 || (int)v31 <= (unint64_t)((v47 - v46) >> 3))
      {
        sub_20C0B3100(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
        if (SHIBYTE(v45) < 0)
          operator delete(__p);
        v32 = sub_20BFE8634(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, &__p);
        sub_20C0B2FEC((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v41);
        sub_20BFD1A18(&__p);
        sub_20C0CBC94((unsigned int **)&v40);
        v33 = sub_20BFCF650(a1);
        memset(v39, 0, sizeof(v39));
        sub_20C0B4D3C(v33, (uint64_t)&v41, (uint64_t)&v40, (uint64_t **)v39, &__p);
        v51 = v39;
        sub_20BEEB2B8((void ***)&v51);
        v34 = __p;
        if (__p != v44)
        {
          while ((*v34 & 0xFFFFFFFFFFFFFFF8) != (v42 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v34 == v44)
            {
              v34 = v44;
              break;
            }
          }
        }
        v14 = v34 != v44;
        if (a6 && v34 == v44)
          MEMORY[0x212B929D0](a6, "Coding error: Object is not in its parent's children");
        v39[0] = &__p;
        sub_20BEEB2B8(v39);
        if ((v40 & 7) != 0)
        {
          v35 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        sub_20BFD1A18(&v41);
        if ((v42 & 7) != 0)
        {
          v37 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
      }
      else
      {
        if (a6)
          MEMORY[0x212B929D0](a6, "Invalid index");
        v14 = 0;
      }
      __p = &v46;
      sub_20BEEB2B8((void ***)&__p);
      goto LABEL_28;
    }
    if (!a6)
      goto LABEL_27;
    v27 = "Cannot reparent object under itself";
    goto LABEL_26;
  }
  v14 = 1;
LABEL_28:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
  sub_20BFD265C(&v48);
LABEL_9:
  if ((v50 & 7) != 0)
  {
    v15 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v14;
}

void sub_20C0CECA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  __p = &a22;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18((_DWORD *)(v23 - 88));
  v25 = *(_QWORD *)(v23 - 80);
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  _BOOL8 v12;
  void ***v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  void **v18[3];
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22[2];
  void ***v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20C0CBC94(v22);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8) & 1) != 0)
  {
    v9 = sub_20BFCF650(a1);
    memset(v18, 0, sizeof(v18));
    v10 = sub_20C0A683C((uint64_t *)(v9 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v10 + 136))(&v23, v10, a2, v22);
    if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
    {
      if ((v24 & 4) != 0)
        v11 = (uint64_t **)(*(uint64_t (**)(void ****))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(&v23);
      else
        v11 = (uint64_t **)v23;
    }
    else
    {
      v11 = (uint64_t **)v18;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_20BFE538C(&v19, *v11, v11[1], v11[1] - *v11);
    v13 = (void ***)sub_20BF4C2D8((uint64_t)&v23);
    v23 = v18;
    sub_20BEEB2B8(v13);
    v14 = v19;
    if (v19 != v20)
    {
      while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v14 == v20)
        {
          v14 = v20;
          break;
        }
      }
    }
    v12 = v14 != v20;
    if (a4 && v14 == v20)
      MEMORY[0x212B929D0](a4, "Object does not exist");
    v18[0] = (void **)&v19;
    sub_20BEEB2B8(v18);
  }
  else
  {
    if (a4)
      MEMORY[0x212B929D0](a4, "Layer is not editable");
    v12 = 0;
  }
  if (((uint64_t)v22[0] & 7) != 0)
  {
    v15 = (unsigned int *)((unint64_t)v22[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v12;
}

void sub_20C0CEFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;

  a10 = (void **)&a13;
  sub_20BEEB2B8(&a10);
  if ((a16 & 7) != 0)
  {
    v17 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CreateSpec(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;

  v9 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(v8) + 14))
      v10 = *(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CreateSpec(v10, a2, a3, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_25Sdf_VariantSetChildPolicyEE10CreateSpecERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Spec;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  int v16;
  void **v17;
  const char *Text;
  void **v19;
  unsigned int *v21;
  void *__p[2];
  char v23;
  char v24[8];
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;

  if ((_DWORD)a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
    Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if ((Spec & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v25);
      sub_20C0CF33C((unsigned int **)__p);
      v9 = *(unsigned int **)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v21 = v9;
      if ((v9 & 7) != 0)
      {
        v10 = (unsigned int *)((unint64_t)v9 & 0xFFFFFFFFFFFFFFF8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 2, v10));
        if ((v11 & 1) == 0)
          v21 = v10;
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>((uint64_t *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v25, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v21, 1);
      if ((v21 & 7) != 0)
      {
        v12 = (unsigned int *)((unint64_t)v21 & 0xFFFFFFFFFFFFFFF8);
        do
          v13 = __ldxr(v12);
        while (__stlxr(v13 - 2, v12));
      }
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v14 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v25 + 1);
      sub_20BFD265C(&v25);
    }
    else
    {
      v25 = "sdf/childrenUtils.cpp";
      v26 = "CreateSpec";
      v27 = 101;
      v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tSetChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aap"
            "l__pxrReserved__::Sdf_VariantSetChildPolicy]";
      v29 = 0;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C524D70, a3, (uint64_t)__p);
      v16 = v23;
      v17 = (void **)__p[0];
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v19 = __p;
      if (v16 < 0)
        v19 = v17;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v19, Text);
      if (v23 < 0)
        operator delete(__p[0]);
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v24);
  }
  else
  {
    v25 = "sdf/childrenUtils.cpp";
    v26 = "CreateSpec";
    v27 = 90;
    v28 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantS"
          "etChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal__aapl__p"
          "xrReserved__::Sdf_VariantSetChildPolicy]";
    v29 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_25Sdf_VariantSetChildPolicyEE10CreateSpecEPNS_8SdfLayerERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

void sub_20C0CF2A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a18);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_20C0CF33C@<X0>(unsigned int **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result)
    result = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v3 = (unsigned int *)*((_QWORD *)result + 8);
  *a1 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 = v4;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValidName(pxrInternal__aapl__pxrReserved__::TfToken *a1)
{
  uint64_t *EmptyString;

  if ((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) != 0)
    return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_25Sdf_VariantSetChildPolicyEE11IsValidNameERKNS_7TfTokenE(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CanRename@<X0>(uint64_t **a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  char v7;
  void *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  void *v12;
  void *v13;
  _QWORD *result;
  const char *Text;
  const char *v16;
  char *v17;
  unint64_t v18;
  const char *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  int HasSpec;
  void *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  void *v27;
  void *__p[2];
  uint64_t v29;

  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
  v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v6);
  v8 = __p[1];
  if (__p[1])
  {
    v9 = (unsigned int *)((char *)__p[1] + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(void *))(*(_QWORD *)v8 + 8))(v8);
  }
  if ((v7 & 1) != 0)
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValidName(a2))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      sub_20C0CF6D4((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, a2, &v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, __p);
      v12 = v27;
      v13 = __p[0];
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
      sub_20BFD265C(__p);
      if (v12 == v13)
        goto LABEL_9;
      if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v27))
        goto LABEL_21;
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(a1, (uint64_t *)__p);
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)__p);
      HasSpec = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v20, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v22 = __p[1];
      if (__p[1])
      {
        v23 = (unsigned int *)((char *)__p[1] + 8);
        do
        {
          v24 = __ldxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(void *))(*(_QWORD *)v22 + 8))(v22);
      }
      if (!HasSpec)
      {
LABEL_9:
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 24) = 0;
      }
      else
      {
LABEL_21:
        sub_20BDDC0E4(__p, "An object with that name already exists");
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)a1, &v27);
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      v18 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v16, v17, Text, v19);
      if (SHIBYTE(v29) < 0)
      {
        sub_20BDDBFAC((_BYTE *)a3, __p[0], (unint64_t)__p[1]);
        v26 = SHIBYTE(v29);
        *(_BYTE *)(a3 + 24) = 1;
        if (v26 < 0)
          operator delete(__p[0]);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(_QWORD *)(a3 + 16) = v29;
        *(_BYTE *)(a3 + 24) = 1;
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
    return sub_20BFD265C(&v27);
  }
  else
  {
    result = sub_20BDDC0E4(__p, "Layer is not editable");
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 16) = v29;
    *(_BYTE *)(a3 + 24) = 1;
  }
  return result;
}

void sub_20C0CF634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  sub_20BFD1A18(&a11);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0CF6D4@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  int v6;
  int v7;

  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a1, &v6);
  sub_20C0B394C((pxrInternal__aapl__pxrReserved__::TfToken *)&v6, a2, a3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  return sub_20BFD265C(&v6);
}

void sub_20C0CF734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Rename(pxrInternal__aapl__pxrReserved__::SdfSpec *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t **v13;
  void ***v14;
  uint64_t v15;
  char *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  const char *Text;
  const char *v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  _QWORD *v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v31;
  unsigned int *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int v37;
  __int128 v38;
  uint64_t v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 i;
  uint64_t v47;
  const char *v48;
  char v49;
  int v50;
  _DWORD v51[3];
  uint64_t v52[3];
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &v50);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::IsValidName(a2))
  {
    sub_20C0CF6D4((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, a2, &v45);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v45))
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath(a1, &i);
      v4 = v45;
      v5 = i;
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&i + 1);
      sub_20BFD265C(&i);
      if (v4 == v5)
      {
        v6 = 1;
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer((uint64_t **)a1, &v43);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v41);
        sub_20C0CF33C((unsigned int **)&v40);
        v11 = sub_20BFCF650(&v43);
        i = 0uLL;
        v47 = 0;
        v12 = sub_20C0A683C((uint64_t *)(v11 + 112));
        (*(void (**)(uint64_t *__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v12 + 136))(v52, v12, &v41, &v40);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)v52))
        {
          if ((v52[1] & 4) != 0)
            v13 = (uint64_t **)(*(uint64_t (**)(uint64_t *))((v52[1] & 0xFFFFFFFFFFFFFFF8) + 168))(v52);
          else
            v13 = (uint64_t **)v52[0];
        }
        else
        {
          v13 = (uint64_t **)&i;
        }
        v38 = 0uLL;
        v39 = 0;
        sub_20BFE538C(&v38, *v13, v13[1], v13[1] - *v13);
        v14 = (void ***)sub_20BF4C2D8((uint64_t)v52);
        v52[0] = (uint64_t)&i;
        sub_20BEEB2B8(v14);
        *(_OWORD *)v52 = v38;
        while (v52[0] != v52[1])
        {
          if ((*(_QWORD *)sub_20C023B14(v52, v15, v16) & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8))
          {
            *(_QWORD *)&i = "sdf/childrenUtils.cpp";
            *((_QWORD *)&i + 1) = "Rename";
            v47 = 726;
            v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "VariantSetChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy "
                  "= pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
            v49 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
            v24 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to %s because a sibling with that name already exists", Text, v24);
            v6 = 0;
            goto LABEL_38;
          }
          sub_20C023C08(v52);
        }
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
        v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
        v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v17, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45);
        if ((v6 & 1) != 0)
        {
          for (i = v38; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
          {
            v20 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v18, v19);
            if ((*v20 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50) & 0xFFFFFFFFFFFFFFF8))
            {
              v25 = *(_QWORD *)a2;
              if ((*(_QWORD *)a2 & 7) != 0)
              {
                v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
                do
                  v27 = __ldxr(v26);
                while (__stxr(v27 + 2, v26));
                if ((v27 & 1) == 0)
                  v25 &= 0xFFFFFFFFFFFFFFF8;
              }
              v28 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v21, v22);
              if ((*v28 & 7) != 0)
              {
                v29 = (unsigned int *)(*v28 & 0xFFFFFFFFFFFFFFF8);
                do
                  v30 = __ldxr(v29);
                while (__stlxr(v30 - 2, v29));
              }
              *v28 = v25;
              break;
            }
          }
          v31 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v43);
          sub_20C0B4E30(v31, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v40, (uint64_t **)&v38);
        }
        sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v52);
LABEL_38:
        *(_QWORD *)&i = &v38;
        sub_20BEEB2B8((void ***)&i);
        if ((v40 & 7) != 0)
        {
          v32 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v42);
        sub_20BFD265C(&v41);
        v34 = v44;
        if (v44)
        {
          v35 = (unsigned int *)(v44 + 8);
          do
          {
            v36 = __ldxr(v35);
            v37 = v36 - 1;
          }
          while (__stlxr(v37, v35));
          if (!v37)
            (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
        }
      }
    }
    else
    {
      v6 = 0;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v45 + 1);
    sub_20BFD265C(&v45);
  }
  else
  {
    *(_QWORD *)&i = "sdf/childrenUtils.cpp";
    *((_QWORD *)&i + 1) = "Rename";
    v47 = 699;
    v48 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantS"
          "etChildPolicy>::Rename(const SdfSpec &, const typename ChildPolicy::FieldType &) [ChildPolicy = pxrInternal__a"
          "apl__pxrReserved__::Sdf_VariantSetChildPolicy]";
    v49 = 0;
    v7 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
    v8 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&i, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename %s to invalid name '%s'", v7, v9);
    v6 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v51);
  sub_20BFD265C(&v50);
  return v6;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  uint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  void ***v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t *v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v41;
  uint64_t **v42;
  uint64_t v43;
  char *v44;
  BOOL v45;
  void *v46;
  unsigned int *v47;
  unsigned int v48;
  unsigned int v49;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v50;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v51;
  uint64_t v52;
  char *v53;
  _BOOL4 HasPrefix;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v55;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v56;
  unsigned int *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  _QWORD *v64;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v65;
  uint64_t v66;
  char *v67;
  _BOOL8 v68;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v69;
  uint64_t v70;
  char *v71;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v72;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v73;
  int v74;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t **v78;
  void ***v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *m;
  uint64_t v83;
  uint64_t v84;
  unsigned int *v85;
  unsigned int v86;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v87;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v88;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v89;
  uint64_t v90;
  char *v91;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v92;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v93;
  unsigned int *v94;
  unsigned int v95;
  unsigned int *v96;
  unsigned int v97;
  unsigned int *v98;
  unsigned int v99;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v100;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v101;
  unsigned int *v102;
  unsigned int v103;
  unint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  __int128 k;
  __int128 j;
  char v115[8];
  void *__p[2];
  uint64_t v117;
  const char *v118;
  char v119;
  unint64_t v120;
  uint64_t *v121;
  unint64_t v122;
  __int128 v123;
  unint64_t v124;
  unint64_t v125;
  __int128 v126;
  uint64_t v127;
  __int128 i;
  uint64_t v129;
  void **v130;
  uint64_t v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  sub_20C0CF33C((unsigned int **)&v125);
  v123 = 0uLL;
  v124 = 0;
  __p[1] = 0;
  v117 = 0;
  __p[0] = &__p[1];
  for (i = *a3; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C0D8B2C(&i))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D8AB0((uint64_t *)&i, v6, v7);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8) & 1) != 0)
      goto LABEL_14;
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D8AB0((uint64_t *)&i, v9, v10);
    sub_20C0B3D2C(v11, (uint64_t)&v126);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v120);
    if (SHIBYTE(v127) < 0)
      operator delete((void *)v126);
    sub_20C0D7FB4((uint64_t **)__p, (uint64_t *)&v120, (uint64_t *)&v120);
    if ((v9 & 1) != 0)
      goto LABEL_9;
    v12 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D8AB0((uint64_t *)&i, v9, v10);
    v13 = sub_20C0B3C54(v12);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v13, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v126);
    v14 = v126;
    v15 = *(_QWORD *)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v126 + 1);
    sub_20BFD265C(&v126);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_20BFD265C(&j);
    if (v14 != v15)
LABEL_9:
      v16 = 1;
    else
      v16 = 0;
    if ((v120 & 7) != 0)
    {
      v17 = (unsigned int *)(v120 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    if ((v16 & 1) != 0)
    {
LABEL_14:
      v19 = (unsigned int **)sub_20C0D8AB0((uint64_t *)&i, v9, v10);
      v20 = *((_QWORD *)&v123 + 1);
      if (*((_QWORD *)&v123 + 1) >= v124)
      {
        v23 = sub_20C0D7E80((unsigned int ***)&v123, v19);
      }
      else
      {
        v21 = *v19;
        **((_QWORD **)&v123 + 1) = *v19;
        if (v21)
        {
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        v23 = (char *)(v20 + 8);
      }
      *((_QWORD *)&v123 + 1) = v23;
    }
  }
  sub_20BF2B200((uint64_t)__p, (_QWORD *)__p[1]);
  v24 = sub_20BFCF650(a1);
  __p[0] = 0;
  __p[1] = 0;
  v117 = 0;
  v25 = sub_20C0A683C((uint64_t *)(v24 + 112));
  (*(void (**)(__int128 *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v25 + 136))(&i, v25, a2, &v125);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
  {
    if ((BYTE8(i) & 4) != 0)
      v26 = (uint64_t **)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
    else
      v26 = (uint64_t **)i;
  }
  else
  {
    v26 = (uint64_t **)__p;
  }
  v126 = 0uLL;
  v127 = 0;
  sub_20BFE538C(&v126, *v26, v26[1], v26[1] - *v26);
  v27 = (void ***)sub_20BF4C2D8((uint64_t)&i);
  *(_QWORD *)&i = __p;
  sub_20BEEB2B8(v27);
  *((_QWORD *)&i + 1) = 0;
  v129 = 0;
  *(_QWORD *)&i = (char *)&i + 8;
  v120 = 0;
  v121 = 0;
  v122 = 0;
  sub_20BFC9A6C((char **)&v120, (uint64_t)(*((_QWORD *)&v123 + 1) - v123) >> 3);
  for (j = v123; (_QWORD)j != *((_QWORD *)&j + 1); sub_20C0D0AA0(&j))
  {
    v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D0A24((uint64_t *)&j, v28, v29);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v30))
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 181;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varia"
             "ntSetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
             "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_103;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D0A24((uint64_t *)&j, v31, v32);
    sub_20C0B3D2C(v33, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v105);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    v34 = v121;
    if ((unint64_t)v121 >= v122)
    {
      v38 = sub_20BFCA068((char **)&v120, (uint64_t *)&v105);
    }
    else
    {
      v35 = v105;
      *v121 = v105;
      if ((v35 & 7) != 0)
      {
        v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
        do
          v37 = __ldxr(v36);
        while (__stxr(v37 + 2, v36));
        if ((v37 & 1) == 0)
          *v34 &= 0xFFFFFFFFFFFFFFF8;
      }
      v38 = (char *)(v34 + 1);
    }
    v121 = (uint64_t *)v38;
    sub_20C0D7FB4((uint64_t **)&i, (uint64_t *)&v105, (uint64_t *)&v105);
    if ((v39 & 1) == 0)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 188;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varia"
             "ntSetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
             "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
LABEL_100:
      if ((v105 & 7) != 0)
      {
        v98 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
        do
          v99 = __ldxr(v98);
        while (__stlxr(v99 - 2, v98));
      }
LABEL_103:
      v68 = 0;
      goto LABEL_108;
    }
    v41 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D0A24((uint64_t *)&j, v39, v40);
    v42 = (uint64_t **)sub_20C0B3C54(v41);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v42, (uint64_t *)__p);
    v45 = sub_20BEB560C((uint64_t)__p, (uint64_t)a1);
    v46 = __p[1];
    if (__p[1])
    {
      v47 = (unsigned int *)((char *)__p[1] + 8);
      do
      {
        v48 = __ldxr(v47);
        v49 = v48 - 1;
      }
      while (__stlxr(v49, v47));
      if (!v49)
        (*(void (**)(void *))(*(_QWORD *)v46 + 8))(v46);
    }
    if (!v45)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 193;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varia"
             "ntSetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
             "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_100;
    }
    v50 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D0A24((uint64_t *)&j, v43, v44);
    v51 = sub_20C0B3C54(v50);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v51, &v130);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v130, __p);
    if (*(void **)a2 == __p[0])
    {
      HasPrefix = 0;
    }
    else
    {
      v55 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D0A24((uint64_t *)&j, v52, v53);
      v56 = sub_20C0B3C54(v55);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v56, &k);
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
      sub_20BFD265C(&k);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v130 + 1);
    sub_20BFD265C(&v130);
    if (HasPrefix)
    {
      __p[0] = "sdf/childrenUtils.cpp";
      __p[1] = "SetChildren";
      v117 = 203;
      v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varia"
             "ntSetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename ChildPol"
             "icy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
      v119 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      goto LABEL_100;
    }
    if ((v105 & 7) != 0)
    {
      v57 = (unsigned int *)(v105 & 0xFFFFFFFFFFFFFFF8);
      do
        v58 = __ldxr(v57);
      while (__stlxr(v58 - 2, v57));
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
  *(_OWORD *)__p = v126;
  while (__p[0] != __p[1])
  {
    v61 = (uint64_t *)sub_20C023B14((uint64_t *)__p, v59, v60);
    if ((_QWORD *)((char *)&i + 8) == sub_20C0D8030((uint64_t)&i, v61))
    {
      v64 = (_QWORD *)sub_20C023B14((uint64_t *)__p, v62, v63);
      sub_20C0B394C(a2, v64, &j);
      v65 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v65, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_20BFD265C(&j);
    }
    sub_20C023C08(__p);
  }
  sub_20C0D80BC((uint64_t)&j, (uint64_t *)v126, *((uint64_t **)&v126 + 1));
  for (k = v123; ; sub_20C0D0AA0(&k))
  {
    v68 = k == *((_QWORD *)&k + 1);
    if ((_QWORD)k == *((_QWORD *)&k + 1))
      break;
    v69 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D0A24((uint64_t *)&k, v66, v67);
    sub_20C0B3D2C(v69, (uint64_t)__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v112);
    if (SHIBYTE(v117) < 0)
      operator delete(__p[0]);
    sub_20C0B394C(a2, &v112, &v110);
    v72 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D0A24((uint64_t *)&k, v70, v71);
    v73 = sub_20C0B3C54(v72);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v73, __p);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)__p, &v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
    sub_20BFD265C(__p);
    if (v109 == *(_QWORD *)a2)
    {
      v74 = 10;
    }
    else
    {
      if ((_QWORD *)((char *)&j + 8) != sub_20C0D8030((uint64_t)&j, &v112))
      {
        v75 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v75, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
      }
      sub_20C0CF33C((unsigned int **)&v108);
      v76 = sub_20BFCF650(a1);
      __p[0] = 0;
      __p[1] = 0;
      v117 = 0;
      v77 = sub_20C0A683C((uint64_t *)(v76 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v77 + 136))(&v130, v77, &v109, &v108);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v130))
      {
        if ((v131 & 4) != 0)
          v78 = (uint64_t **)(*(uint64_t (**)(void ***))((v131 & 0xFFFFFFFFFFFFFFF8) + 168))(&v130);
        else
          v78 = (uint64_t **)v130;
      }
      else
      {
        v78 = (uint64_t **)__p;
      }
      v105 = 0;
      v106 = 0;
      v107 = 0;
      sub_20BFE538C(&v105, *v78, v78[1], v78[1] - *v78);
      v79 = (void ***)sub_20BF4C2D8((uint64_t)&v130);
      v130 = __p;
      sub_20BEEB2B8(v79);
      v80 = (uint64_t *)v105;
      if ((uint64_t *)v105 != v106)
      {
        while ((*v80 & 0xFFFFFFFFFFFFFFF8) != (v112 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v80 == v106)
          {
            v80 = v106;
            break;
          }
        }
      }
      if (v80 == v106)
      {
        __p[0] = "sdf/childrenUtils.cpp";
        __p[1] = "SetChildren";
        v117 = 254;
        v118 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Var"
               "iantSetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename Chil"
               "dPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
        v119 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        v74 = 1;
      }
      else
      {
        sub_20C0D813C(v80 + 1, v106, v80);
        for (m = v106; m != v81; --m)
        {
          v84 = *(m - 1);
          v83 = v84;
          if ((v84 & 7) != 0)
          {
            v85 = (unsigned int *)(v83 & 0xFFFFFFFFFFFFFFF8);
            do
              v86 = __ldxr(v85);
            while (__stlxr(v86 - 2, v85));
          }
        }
        v106 = v81;
        if ((uint64_t *)v105 == v81)
        {
          v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v88, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108);
        }
        else
        {
          v87 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v87, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v109, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v108, (uint64_t **)&v105);
        }
        v89 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        v92 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D0A24((uint64_t *)&k, v90, v91);
        v93 = sub_20C0B3C54(v92);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v93, __p);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v89, (const pxrInternal__aapl__pxrReserved__::SdfPath *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v110);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)__p + 1);
        sub_20BFD265C(__p);
        v74 = 0;
      }
      __p[0] = &v105;
      sub_20BEEB2B8((void ***)__p);
      if ((v108 & 7) != 0)
      {
        v94 = (unsigned int *)(v108 & 0xFFFFFFFFFFFFFFF8);
        do
          v95 = __ldxr(v94);
        while (__stlxr(v95 - 2, v94));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v109 + 1);
    sub_20BFD265C(&v109);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v111);
    sub_20BFD265C(&v110);
    if ((v112 & 7) != 0)
    {
      v96 = (unsigned int *)(v112 & 0xFFFFFFFFFFFFFFF8);
      do
        v97 = __ldxr(v96);
      while (__stlxr(v97 - 2, v96));
    }
    if (v74 != 10 && v74)
      goto LABEL_107;
  }
  if ((uint64_t *)v120 == v121)
  {
    v101 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v101, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125);
  }
  else
  {
    v100 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    sub_20C0B4E30(v100, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v125, (uint64_t **)&v120);
  }
LABEL_107:
  sub_20BF2B200((uint64_t)&j, *((_QWORD **)&j + 1));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v115);
LABEL_108:
  __p[0] = &v120;
  sub_20BEEB2B8((void ***)__p);
  sub_20BF2B200((uint64_t)&i, *((_QWORD **)&i + 1));
  __p[0] = &v126;
  sub_20BEEB2B8((void ***)__p);
  __p[0] = &v123;
  sub_20BFE69E4((void ***)__p);
  if ((v125 & 7) != 0)
  {
    v102 = (unsigned int *)(v125 & 0xFFFFFFFFFFFFFFF8);
    do
      v103 = __ldxr(v102);
    while (__stlxr(v103 - 2, v102));
  }
  return v68;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_25Sdf_VariantSetChildPolicyEE11SetChildrenERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__16vectorINS_9SdfHandleINS_17SdfVariantSetSpecEEENSB_9allocatorISF_EEEE(a1, a2, a3);
}

void sub_20C0D06E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  uint64_t v37;
  unsigned int *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;

  if ((a10 & 7) != 0)
  {
    v39 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v40 = __ldxr(v39);
    while (__stlxr(v40 - 2, v39));
  }
  __p = &a34;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BF2B200(v37 - 144, *(_QWORD **)(v37 - 136));
  __p = (uint64_t *)(v37 - 176);
  sub_20BEEB2B8((void ***)&__p);
  __p = (uint64_t *)&a37;
  sub_20BFE69E4((void ***)&__p);
  v41 = *(_QWORD *)(v37 - 184);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C0D0A24(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReserved__::SdfHand"
            "le<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>>::operator*() [T = std::vector<pxrInternal__aapl__p"
            "xrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0D0A98()
{
  JUMPOUT(0x20C0D0A48);
}

_QWORD *sub_20C0D0AA0(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::vector<pxrInternal__aapl__pxrReser"
            "ved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>>::operator++() [T = std::vector<pxrIn"
            "ternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t **v8;
  BOOL v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  void *v15;
  void *v16;
  _BOOL8 v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  _BOOL4 HasPrefix;
  uint64_t v23;
  uint64_t v24;
  void **p_p;
  void ***v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  _QWORD *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t v34;
  uint64_t v35;
  void **v36;
  const char *Text;
  void ***v38;
  void **v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unint64_t v52;
  int v53;
  int v54;
  void **v55;
  uint64_t *v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  void *__p;
  const char *v62;
  uint64_t v63;
  const char *v64;
  char v65;
  unsigned int *v66[2];
  void **v67;
  void **v68;
  uint64_t v69;
  void **v70;
  uint64_t v71;
  uint64_t v72;

  v72 = *MEMORY[0x24BDAC8D0];
  sub_20C0CF33C(v66);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 290;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantS"
          "etChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, "
          "int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  v8 = (uint64_t **)sub_20C0B3C54(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&__p);
  v9 = sub_20BEB560C((uint64_t)&__p, (uint64_t)a1);
  v10 = v62;
  if (v62)
  {
    v11 = (unsigned int *)(v62 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!v9)
  {
    __p = "sdf/childrenUtils.cpp";
    v62 = "InsertChild";
    v63 = 295;
    v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantS"
          "etChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType &, "
          "int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
    v65 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_12;
  }
  v14 = sub_20C0B3C54(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v55);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v55, &__p);
  v15 = __p;
  v16 = *(void **)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v55 + 1);
  sub_20BFD265C(&v55);
  if (v15 == v16)
  {
    v17 = 1;
  }
  else
  {
    sub_20C0B3D2C(a3, (uint64_t)&__p);
    pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v60);
    if (SHIBYTE(v63) < 0)
      operator delete(__p);
    sub_20C0B394C(a2, &v60, &v58);
    v21 = sub_20C0B3C54(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v21, &__p);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&__p);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
    sub_20BFD265C(&__p);
    if (HasPrefix)
    {
      __p = "sdf/childrenUtils.cpp";
      v62 = "InsertChild";
      v63 = 312;
      v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Varian"
            "tSetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::ValueType"
            " &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
      v65 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      v17 = 0;
    }
    else
    {
      v23 = sub_20BFCF650(a1);
      __p = 0;
      v62 = 0;
      v63 = 0;
      v24 = sub_20C0A683C((uint64_t *)(v23 + 112));
      (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::TfToken *, unsigned int **))(*(_QWORD *)v24 + 136))(&v67, v24, a2, v66);
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v67))
      {
        if ((v68 & 4) != 0)
          p_p = (void **)(*(uint64_t (**)(void ***))(((unint64_t)v68 & 0xFFFFFFFFFFFFFFF8) + 168))(&v67);
        else
          p_p = v67;
      }
      else
      {
        p_p = &__p;
      }
      v55 = 0;
      v56 = 0;
      v57 = 0;
      sub_20BFE538C(&v55, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
      v26 = (void ***)sub_20BF4C2D8((uint64_t)&v67);
      v67 = &__p;
      sub_20BEEB2B8(v26);
      v29 = (unint64_t)((char *)v56 - (char *)v55) >> 3;
      if (a4 != -1)
        LODWORD(v29) = a4;
      v30 = (int)v29;
      if ((int)v29 <= (unint64_t)(((char *)v56 - (char *)v55) >> 3))
      {
        v67 = v55;
        v68 = (void **)v56;
        while (v67 != v68)
        {
          v32 = (_QWORD *)sub_20C023B14((uint64_t *)&v67, v27, v28);
          if ((*v32 & 0xFFFFFFFFFFFFFFF8) == (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            __p = "sdf/childrenUtils.cpp";
            v62 = "InsertChild";
            v63 = 334;
            v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "VariantSetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolic"
                  "y::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
            v65 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_37;
          }
          sub_20C023C08(&v67);
        }
        v33 = sub_20C0B3C54(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v33, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v53);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
        sub_20BFD265C(&__p);
        sub_20C0CF33C((unsigned int **)&v52);
        v34 = sub_20BFCF650(a1);
        __p = 0;
        v62 = 0;
        v63 = 0;
        v35 = sub_20C0A683C((uint64_t *)(v34 + 112));
        (*(void (**)(void ***__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v35 + 136))(&v70, v35, &v53, &v52);
        if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v70))
        {
          if ((v71 & 4) != 0)
            v36 = (void **)(*(uint64_t (**)(void ***))((v71 & 0xFFFFFFFFFFFFFFF8) + 168))(&v70);
          else
            v36 = v70;
        }
        else
        {
          v36 = &__p;
        }
        v67 = 0;
        v68 = 0;
        v69 = 0;
        sub_20BFE538C(&v67, (uint64_t *)*v36, (uint64_t *)v36[1], ((_BYTE *)v36[1] - (_BYTE *)*v36) >> 3);
        v38 = (void ***)sub_20BF4C2D8((uint64_t)&v70);
        v70 = &__p;
        sub_20BEEB2B8(v38);
        v39 = v67;
        if (v67 != v68)
        {
          while (((unint64_t)*v39 & 0xFFFFFFFFFFFFFFF8) != (v60 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v39 == v68)
            {
              v39 = v68;
              break;
            }
          }
        }
        v17 = v39 != v68;
        if (v39 == v68)
        {
          __p = "sdf/childrenUtils.cpp";
          v62 = "InsertChild";
          v63 = 352;
          v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Va"
                "riantSetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::V"
                "alueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
          v65 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
          sub_20C0B5D58((uint64_t)&v67, v39);
          if (v67 == v68)
          {
            v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52);
          }
          else
          {
            v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v52, (uint64_t **)&v67);
          }
          v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          v43 = sub_20C0B3C54(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v43, &v70);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v70, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
          sub_20BFD1A18(&v70);
          sub_20C0B66C4(&v55, (char *)&v55[v30], (char *)&v60);
          v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B4E30(v44, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v66, (uint64_t **)&v55);
          v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v70);
          IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v70);
          if ((IsDormant & 1) == 0)
          {
            Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v70);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v70);
          sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&__p);
        }
        __p = &v67;
        sub_20BEEB2B8((void ***)&__p);
        if ((v52 & 7) != 0)
        {
          v48 = (unsigned int *)(v52 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v54);
        sub_20BFD265C(&v53);
      }
      else
      {
        __p = "sdf/childrenUtils.cpp";
        v62 = "InsertChild";
        v63 = 326;
        v64 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Vari"
              "antSetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Value"
              "Type &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]";
        v65 = 0;
        v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v58);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v31, v30);
LABEL_37:
        v17 = 0;
      }
      __p = &v55;
      sub_20BEEB2B8((void ***)&__p);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v59);
    sub_20BFD265C(&v58);
    if ((v60 & 7) != 0)
    {
      v50 = (unsigned int *)(v60 & 0xFFFFFFFFFFFFFFF8);
      do
        v51 = __ldxr(v50);
      while (__stlxr(v51 - 2, v50));
    }
  }
LABEL_13:
  if (((uint64_t)v66[0] & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v66[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  return v17;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_25Sdf_VariantSetChildPolicyEE11InsertChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNS_9SdfHandleINS_17SdfVariantSetSpecEEEi(a1, a2, a3, a4);
}

void sub_20C0D1200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,__int16 *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  uint64_t v30;
  unsigned int *v32;
  unsigned int v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int v37;

  __p = (__int16 *)(v30 - 112);
  sub_20BEEB2B8((void ***)&__p);
  if ((a11 & 7) != 0)
  {
    v32 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v33 = __ldxr(v32);
    while (__stlxr(v33 - 2, v32));
  }
  sub_20BFD1A18(&a12);
  __p = &a14;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a19);
  if ((a20 & 7) != 0)
  {
    v34 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  if ((a29 & 7) != 0)
  {
    v36 = (unsigned int *)(a29 & 0xFFFFFFFFFFFFFFF8);
    do
      v37 = __ldxr(v36);
    while (__stlxr(v37 - 2, v36));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  void ***v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v29;
  void **v30[3];
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  sub_20C0CF33C((unsigned int **)&v34);
  v4 = sub_20BFCF650(a1);
  memset(v30, 0, sizeof(v30));
  v5 = sub_20C0A683C((uint64_t *)(v4 + 112));
  (*(void (**)(unint64_t *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::TfToken *, unint64_t *))(*(_QWORD *)v5 + 136))(&v37, v5, a2, &v34);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v37))
  {
    if ((v38 & 4) != 0)
      v6 = (uint64_t **)(*(uint64_t (**)(unint64_t *))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(&v37);
    else
      v6 = (uint64_t **)v37;
  }
  else
  {
    v6 = (uint64_t **)v30;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_20BFE538C(&v31, *v6, v6[1], v6[1] - *v6);
  v7 = (void ***)sub_20BF4C2D8((uint64_t)&v37);
  v37 = (unint64_t)v30;
  sub_20BEEB2B8(v7);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v30);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v37);
  v8 = (uint64_t *)v31;
  v9 = v37;
  if ((uint64_t *)v31 == v32)
  {
LABEL_9:
    v11 = 0;
  }
  else
  {
    v10 = -v31;
    while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (v37 & 0xFFFFFFFFFFFFFFF8))
    {
      ++v8;
      v10 -= 8;
      if (v8 == v32)
        goto LABEL_9;
    }
    sub_20C0B394C(a2, &v37, &v35);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v35);
    sub_20C0D813C((_QWORD *)(8 - v10), v32, (_QWORD *)-v10);
    for (i = v32; i != v13; --i)
    {
      v16 = *(i - 1);
      v15 = v16;
      if ((v16 & 7) != 0)
      {
        v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v18 = __ldxr(v17);
        while (__stlxr(v18 - 2, v17));
      }
    }
    v32 = v13;
    if ((uint64_t *)v31 == v13)
    {
      v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v20, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34);
    }
    else
    {
      v19 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v19, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v34, (uint64_t **)&v31);
    }
    v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v21, a2, &v29);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v29);
    if ((IsDormant & 1) == 0)
    {
      Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v29);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v29);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v36);
    sub_20BFD265C(&v35);
    v11 = 1;
    v9 = v37;
  }
  if ((v9 & 7) != 0)
  {
    v24 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v30);
  v30[0] = (void **)&v31;
  sub_20BEEB2B8(v30);
  if ((v34 & 7) != 0)
  {
    v26 = (unsigned int *)(v34 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_25Sdf_VariantSetChildPolicyEE11RemoveChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathERKNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEE(a1, a2);
}

void sub_20C0D16C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, char *a4, int a5)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  void **p_p;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void ***v21;
  void ***v22;
  char *v23;
  uint64_t v24;
  _BOOL4 v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *i;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  char *v34;
  char *j;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  uint64_t IsDormant;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v46;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int *v52;
  unsigned int v53;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *__p;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  unsigned int *v65[2];
  void **v66;
  uint64_t v67;
  uint64_t v68;
  void ***v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  sub_20C0CF33C(v65);
  sub_20C0D1EE8(a2, a4, &v64);
  v10 = sub_20C0B3C54(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v61);
  v11 = v64;
  v12 = v61;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
  sub_20BFD265C(&v61);
  if (a5 == -2 && v11 == v12)
    goto LABEL_65;
  v13 = sub_20BFCF650(a1);
  __p = 0;
  v59 = 0;
  v60 = 0;
  v14 = sub_20C0A683C((uint64_t *)(v13 + 112));
  (*(void (**)(void ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::TfToken *, unsigned int **))(*(_QWORD *)v14 + 136))(&v66, v14, a2, v65);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v66))
  {
    if ((v67 & 4) != 0)
      p_p = (void **)(*(uint64_t (**)(void ***))((v67 & 0xFFFFFFFFFFFFFFF8) + 168))(&v66);
    else
      p_p = v66;
  }
  else
  {
    p_p = &__p;
  }
  v61 = 0;
  v62 = 0;
  v63 = 0;
  sub_20BFE538C(&v61, (uint64_t *)*p_p, (uint64_t *)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 3);
  sub_20BF4C2D8((uint64_t)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  sub_20C0B3D2C(a3, (uint64_t)&__p);
  pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v57);
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
  v16 = sub_20C0B3C54(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (a5 == -2 && v56 == *(_QWORD *)a2)
  {
    if (v61 == v62)
    {
      v17 = v61;
    }
    else
    {
      v17 = v61;
      while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v17 == v62)
        {
          v17 = v62;
          break;
        }
      }
    }
    v18 = (unint64_t)((char *)v17 - (char *)v61) >> 3;
  }
  else if (v62 - v61 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = v62 - v61;
  }
  sub_20C0CF33C((unsigned int **)&v55);
  v19 = sub_20BFCF650(a1);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v20 = sub_20C0A683C((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v20 + 136))(&v69, v20, &v56, &v55);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v69))
  {
    if ((v70 & 4) != 0)
      v21 = (void ***)(*(uint64_t (**)(void ****))((v70 & 0xFFFFFFFFFFFFFFF8) + 168))(&v69);
    else
      v21 = v69;
  }
  else
  {
    v21 = &v66;
  }
  __p = 0;
  v59 = 0;
  v60 = 0;
  sub_20BFE538C(&__p, (uint64_t *)*v21, (uint64_t *)v21[1], v21[1] - *v21);
  v22 = (void ***)sub_20BF4C2D8((uint64_t)&v69);
  v69 = &v66;
  sub_20BEEB2B8(v22);
  v23 = (char *)__p;
  if (__p != v59)
  {
    while ((*(_QWORD *)v23 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
    {
      v23 += 8;
      if (v23 == v59)
      {
        v23 = v59;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  if (v56 == *(_QWORD *)a2)
  {
    v24 = v23 - (_BYTE *)__p;
    if ((v57 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8)
      && ((_DWORD)v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == (_DWORD)v18))
    {
      goto LABEL_58;
    }
    v26 = (int)v18 > v24 >> 3;
    v27 = v61;
    if (v61 != v62)
    {
      while ((*v27 & 0xFFFFFFFFFFFFFFF8) != (v57 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v27 == v62)
        {
          v27 = v62;
          break;
        }
      }
    }
    sub_20C0D813C(v27 + 1, v62, v27);
    LODWORD(v18) = v18 - v26;
    for (i = v62; i != v28; --i)
    {
      v31 = *(i - 1);
      v30 = v31;
      if ((v31 & 7) != 0)
      {
        v32 = (unsigned int *)(v30 & 0xFFFFFFFFFFFFFFF8);
        do
          v33 = __ldxr(v32);
        while (__stlxr(v33 - 2, v32));
      }
    }
    v62 = v28;
  }
  else
  {
    sub_20C0D813C((_QWORD *)v23 + 1, v59, v23);
    for (j = v59; j != v34; j -= 8)
    {
      v37 = *((_QWORD *)j - 1);
      v36 = v37;
      if ((v37 & 7) != 0)
      {
        v38 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stlxr(v39 - 2, v38));
      }
    }
    v59 = v34;
    if (__p == v34)
    {
      v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55);
      v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v69);
      IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v69);
      if ((IsDormant & 1) == 0)
      {
        Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v69);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v69);
    }
    else
    {
      v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B4E30(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v55, (uint64_t **)&__p);
    }
  }
  v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v46 = sub_20C0B3C54(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v46, &v69);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v69, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v64);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v69 + 1);
  sub_20BFD265C(&v69);
  sub_20C0B66C4(&v61, (char *)&v61[(int)v18], a4);
  v47 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  sub_20C0B4E30(v47, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v65, &v61);
LABEL_58:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v66);
  v66 = &__p;
  sub_20BEEB2B8(&v66);
  if ((v55 & 7) != 0)
  {
    v48 = (unsigned int *)(v55 & 0xFFFFFFFFFFFFFFF8);
    do
      v49 = __ldxr(v48);
    while (__stlxr(v49 - 2, v48));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if ((v57 & 7) != 0)
  {
    v50 = (unsigned int *)(v57 & 0xFFFFFFFFFFFFFFF8);
    do
      v51 = __ldxr(v50);
    while (__stlxr(v51 - 2, v50));
  }
  __p = &v61;
  sub_20BEEB2B8((void ***)&__p);
LABEL_65:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v64 + 1);
  sub_20BFD265C(&v64);
  if (((uint64_t)v65[0] & 7) != 0)
  {
    v52 = (unsigned int *)((unint64_t)v65[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v53 = __ldxr(v52);
    while (__stlxr(v53 - 2, v52));
  }
  return 1;
}

void sub_20C0D1D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, uint64_t a11, char *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,uint64_t a22,uint64_t a23,void **p_p)
{
  uint64_t v24;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int v31;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v24 - 88));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&p_p);
  p_p = (void **)&__p;
  sub_20BEEB2B8(&p_p);
  if ((a9 & 7) != 0)
  {
    v26 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  sub_20BFD1A18(&a10);
  if ((a11 & 7) != 0)
  {
    v28 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v29 = __ldxr(v28);
    while (__stlxr(v29 - 2, v28));
  }
  __p = &a18;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18(&a21);
  if ((a22 & 7) != 0)
  {
    v30 = (unsigned int *)(a22 & 0xFFFFFFFFFFFFFFF8);
    do
      v31 = __ldxr(v30);
    while (__stlxr(v31 - 2, v30));
  }
  _Unwind_Resume(a1);
}

void sub_20C0D1EE8(pxrInternal__aapl__pxrReserved__::TfToken *a1@<X0>, _QWORD *a2@<X1>, _DWORD *a3@<X8>)
{
  uint64_t *EmptyString;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  if (pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::IsValidName((uint64_t)EmptyString))
  {
    sub_20C0B394C(a1, a2, a3);
  }
  else
  {
    *(_QWORD *)a3 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a3);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a3 + 1);
  }
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::TfToken *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, _QWORD *a4, int a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  const char *v13;
  _BOOL8 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t **v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  _BOOL4 HasPrefix;
  uint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  uint64_t v33;
  _QWORD *v34;
  unsigned int *v35;
  unsigned int v36;
  unsigned int *v37;
  unsigned int v38;
  void **v39[3];
  unint64_t v40;
  int v41;
  uint64_t v42;
  void *__p;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  unint64_t v50;
  void ***v51;

  sub_20C0CF33C((unsigned int **)&v50);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      v13 = "Layer is not editable";
      goto LABEL_7;
    }
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      v13 = "Object does not exist";
LABEL_7:
      MEMORY[0x212B929D0](a6, v13);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v18 = (uint64_t **)sub_20C0B3C54(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v18, &v46);
  v19 = sub_20BEB560C((uint64_t)&v46, (uint64_t)a1);
  v20 = v47;
  if (v47)
  {
    v21 = (unsigned int *)(v47 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (!v19)
  {
    if (!a6)
      goto LABEL_8;
    v13 = "Cannot reparent to another layer";
    goto LABEL_7;
  }
  sub_20C0D1EE8(a2, a4, &v48);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v48))
  {
    if (!a6)
    {
LABEL_27:
      v14 = 0;
      goto LABEL_28;
    }
    v27 = "Invalid name";
LABEL_26:
    MEMORY[0x212B929D0](a6, v27);
    goto LABEL_27;
  }
  v24 = sub_20C0B3C54(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &__p);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v46);
  v25 = v46;
  v26 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
  sub_20BFD265C(&v46);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&__p + 1);
  sub_20BFD265C(&__p);
  if (v25 != v26)
  {
    v28 = sub_20C0B3C54(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v46);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v46 + 1);
    sub_20BFD265C(&v46);
    if (!HasPrefix)
    {
      v30 = sub_20BFCF650(a1);
      __p = 0;
      v44 = 0;
      v45 = 0;
      sub_20C0B4D3C(v30, (uint64_t)a2, (uint64_t)&v50, (uint64_t **)&__p, &v46);
      v39[0] = &__p;
      sub_20BEEB2B8(v39);
      v31 = (unint64_t)(v47 - v46) >> 3;
      if (a5 != -1)
        LODWORD(v31) = a5;
      if ((_DWORD)v31 == -2 || (int)v31 <= (unint64_t)((v47 - v46) >> 3))
      {
        sub_20C0B3D2C(a3, (uint64_t)&__p);
        pxrInternal__aapl__pxrReserved__::TfToken::TfToken(&v42);
        if (SHIBYTE(v45) < 0)
          operator delete(__p);
        v32 = sub_20C0B3C54(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, &__p);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&__p, &v41);
        sub_20BFD1A18(&__p);
        sub_20C0CF33C((unsigned int **)&v40);
        v33 = sub_20BFCF650(a1);
        memset(v39, 0, sizeof(v39));
        sub_20C0B4D3C(v33, (uint64_t)&v41, (uint64_t)&v40, (uint64_t **)v39, &__p);
        v51 = v39;
        sub_20BEEB2B8((void ***)&v51);
        v34 = __p;
        if (__p != v44)
        {
          while ((*v34 & 0xFFFFFFFFFFFFFFF8) != (v42 & 0xFFFFFFFFFFFFFFF8))
          {
            if (++v34 == v44)
            {
              v34 = v44;
              break;
            }
          }
        }
        v14 = v34 != v44;
        if (a6 && v34 == v44)
          MEMORY[0x212B929D0](a6, "Coding error: Object is not in its parent's children");
        v39[0] = &__p;
        sub_20BEEB2B8(v39);
        if ((v40 & 7) != 0)
        {
          v35 = (unsigned int *)(v40 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        sub_20BFD1A18(&v41);
        if ((v42 & 7) != 0)
        {
          v37 = (unsigned int *)(v42 & 0xFFFFFFFFFFFFFFF8);
          do
            v38 = __ldxr(v37);
          while (__stlxr(v38 - 2, v37));
        }
      }
      else
      {
        if (a6)
          MEMORY[0x212B929D0](a6, "Invalid index");
        v14 = 0;
      }
      __p = &v46;
      sub_20BEEB2B8((void ***)&__p);
      goto LABEL_28;
    }
    if (!a6)
      goto LABEL_27;
    v27 = "Cannot reparent object under itself";
    goto LABEL_26;
  }
  v14 = 1;
LABEL_28:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
  sub_20BFD265C(&v48);
LABEL_9:
  if ((v50 & 7) != 0)
  {
    v15 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v14;
}

void sub_20C0D2348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23)
{
  uint64_t v23;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;

  __p = &a22;
  sub_20BEEB2B8((void ***)&__p);
  sub_20BFD1A18((_DWORD *)(v23 - 88));
  v25 = *(_QWORD *)(v23 - 80);
  if ((v25 & 7) != 0)
  {
    v26 = (unsigned int *)(v25 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  _BOOL8 v12;
  void ***v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  void **v18[3];
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22[2];
  void ***v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20C0CF33C(v22);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8) & 1) != 0)
  {
    v9 = sub_20BFCF650(a1);
    memset(v18, 0, sizeof(v18));
    v10 = sub_20C0A683C((uint64_t *)(v9 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v10 + 136))(&v23, v10, a2, v22);
    if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
    {
      if ((v24 & 4) != 0)
        v11 = (uint64_t **)(*(uint64_t (**)(void ****))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(&v23);
      else
        v11 = (uint64_t **)v23;
    }
    else
    {
      v11 = (uint64_t **)v18;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_20BFE538C(&v19, *v11, v11[1], v11[1] - *v11);
    v13 = (void ***)sub_20BF4C2D8((uint64_t)&v23);
    v23 = v18;
    sub_20BEEB2B8(v13);
    v14 = v19;
    if (v19 != v20)
    {
      while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v14 == v20)
        {
          v14 = v20;
          break;
        }
      }
    }
    v12 = v14 != v20;
    if (a4 && v14 == v20)
      MEMORY[0x212B929D0](a4, "Object does not exist");
    v18[0] = (void **)&v19;
    sub_20BEEB2B8(v18);
  }
  else
  {
    if (a4)
      MEMORY[0x212B929D0](a4, "Layer is not editable");
    v12 = 0;
  }
  if (((uint64_t)v22[0] & 7) != 0)
  {
    v15 = (unsigned int *)((unint64_t)v22[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v12;
}

void sub_20C0D268C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;

  a10 = (void **)&a13;
  sub_20BEEB2B8(&a10);
  if ((a16 & 7) != 0)
  {
    v17 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CreateSpec(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;

  v9 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(v8) + 14))
      v10 = *(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CreateSpec(v10, a2, a3, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_33Sdf_RelationshipTargetChildPolicyEE10CreateSpecERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Spec;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  void **v12;
  const char *Text;
  void **v14;
  int v16;
  int v17;
  void *__p[2];
  char v19;
  _BYTE v20[8];
  char *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  char v25;

  if ((_DWORD)a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
    Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if ((Spec & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v21);
      sub_20C0D299C((unsigned int **)__p);
      sub_20C0D2A04(a2, &v16);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      sub_20BFD265C(&v16);
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v9 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
      sub_20BFD265C(&v21);
    }
    else
    {
      v21 = "sdf/childrenUtils.cpp";
      v22 = "CreateSpec";
      v23 = 101;
      v24 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipTargetChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInter"
            "nal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
      v25 = 0;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C524D70, a3, (uint64_t)__p);
      v11 = v19;
      v12 = (void **)__p[0];
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v14 = __p;
      if (v11 < 0)
        v14 = v12;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v14, Text);
      if (v19 < 0)
        operator delete(__p[0]);
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
  }
  else
  {
    v21 = "sdf/childrenUtils.cpp";
    v22 = "CreateSpec";
    v23 = 90;
    v24 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipTargetChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal_"
          "_aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
    v25 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_33Sdf_RelationshipTargetChildPolicyEE10CreateSpecEPNS_8SdfLayerERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

void sub_20C0D2918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a18);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_20C0D299C@<X0>(unsigned int **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result)
    result = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v3 = (unsigned int *)*((_QWORD *)result + 6);
  *a1 = v3;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 = v4;
  }
  return result;
}

_DWORD *sub_20C0D2A04@<X0>(pxrInternal__aapl__pxrReserved__::SdfPath *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t *TargetPath;

  TargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::GetTargetPath(a1);
  sub_20BFD6E54(a2, TargetPath);
  return sub_20BFD6EA4(a2 + 1, (_DWORD *)TargetPath + 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::IsValidName()
{
  return 1;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::IsValidName(__int128 *a1)
{
  return pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString(a1, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  uint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  uint64_t v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v15;
  _DWORD *v16;
  _DWORD *v17;
  char v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void ***v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  char *v37;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v38;
  uint64_t **v39;
  uint64_t v40;
  char *v41;
  BOOL v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v47;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v48;
  uint64_t v49;
  char *v50;
  _BOOL4 HasPrefix;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v52;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v53;
  uint64_t v54;
  char *v55;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v56;
  uint64_t v57;
  char *v58;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v59;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v60;
  uint64_t v61;
  char *v62;
  _BOOL8 v63;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v64;
  uint64_t v65;
  char *v66;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v67;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v68;
  int v69;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *p_k;
  void ***v74;
  int *v75;
  int *v76;
  int *v77;
  int *n;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v79;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v80;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v81;
  uint64_t v82;
  char *v83;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v84;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v85;
  unsigned int *v86;
  unsigned int v87;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v88;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v89;
  unsigned int *v90;
  unsigned int v91;
  int *v93;
  int *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  __int128 m;
  __int128 j;
  _BYTE v103[8];
  __int128 k;
  uint64_t v105;
  const char *v106;
  char v107;
  _DWORD *v108;
  _DWORD *v109;
  unint64_t v110;
  __int128 i;
  uint64_t v112;
  __int128 v113;
  unint64_t v114;
  unsigned int *v115[2];
  uint64_t *v116;
  _QWORD *v117[2];
  __int128 *v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  sub_20C0D299C(v115);
  v113 = 0uLL;
  v114 = 0;
  *((_QWORD *)&k + 1) = 0;
  v105 = 0;
  *(_QWORD *)&k = (char *)&k + 8;
  for (i = *a3; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C0D8358(&i))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v6, v7);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8) & 1) != 0)
      goto LABEL_9;
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v9, v10);
    sub_20C0AF758(v11, &v116);
    sub_20C0A7BE0((uint64_t **)&k, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v116, &v116);
    if ((v12 & 1) != 0)
      goto LABEL_7;
    v14 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v12, v13);
    v15 = sub_20BFD5244(v14);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v15, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v108);
    v16 = v108;
    v17 = *(_DWORD **)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v108 + 1);
    sub_20BFD265C(&v108);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_20BFD265C(&j);
    if (v16 != v17)
LABEL_7:
      v18 = 1;
    else
      v18 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v116 + 1);
    sub_20BFD265C(&v116);
    if ((v18 & 1) != 0)
    {
LABEL_9:
      v19 = (unsigned int **)sub_20C0D82DC((uint64_t *)&i, v9, v10);
      v20 = *((_QWORD *)&v113 + 1);
      if (*((_QWORD *)&v113 + 1) >= v114)
      {
        v23 = sub_20BFD2FCC((unsigned int ***)&v113, v19);
      }
      else
      {
        v21 = *v19;
        **((_QWORD **)&v113 + 1) = *v19;
        if (v21)
        {
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        v23 = (char *)(v20 + 8);
      }
      *((_QWORD *)&v113 + 1) = v23;
    }
  }
  sub_20BFD7C28((uint64_t)&k, *((_QWORD **)&k + 1));
  v24 = sub_20BFCF650(a1);
  k = 0uLL;
  v105 = 0;
  v25 = sub_20C0A683C((uint64_t *)(v24 + 112));
  (*(void (**)(uint64_t **__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v25 + 136))(&v116, v25, a2, v115);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v116))
  {
    if (((uint64_t)v117[0] & 4) != 0)
      v26 = (uint64_t *)(*(uint64_t (**)(uint64_t **))(((unint64_t)v117[0] & 0xFFFFFFFFFFFFFFF8) + 168))(&v116);
    else
      v26 = v116;
  }
  else
  {
    v26 = (uint64_t *)&k;
  }
  i = 0uLL;
  v112 = 0;
  sub_20BFD6D38(&i, (_DWORD *)*v26, (_DWORD *)v26[1], (v26[1] - *v26) >> 3);
  v27 = (void ***)sub_20BF4C2D8((uint64_t)&v116);
  v116 = (uint64_t *)&k;
  sub_20BFD6F90(v27);
  v117[0] = 0;
  v117[1] = 0;
  v116 = (uint64_t *)v117;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  sub_20C0B8D74((uint64_t *)&v108, (uint64_t)(*((_QWORD *)&v113 + 1) - v113) >> 3);
  for (j = v113; (_QWORD)j != *((_QWORD *)&j + 1); sub_20C0B8E80(&j))
  {
    v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v28, v29);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v30))
    {
      *(_QWORD *)&k = "sdf/childrenUtils.cpp";
      *((_QWORD *)&k + 1) = "SetChildren";
      v105 = 181;
      v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relat"
             "ionshipTargetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename "
             "ChildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
      v107 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_78;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v31, v32);
    sub_20C0AF758(v33, &v93);
    v34 = v109;
    if ((unint64_t)v109 >= v110)
    {
      v35 = (_DWORD *)sub_20BFD7890((uint64_t *)&v108, &v93);
    }
    else
    {
      sub_20BFD6E54(v109, &v93);
      sub_20BFD6EA4(v34 + 1, (_DWORD *)&v93 + 1);
      v35 = v34 + 2;
    }
    v109 = v35;
    sub_20C0A7BE0(&v116, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v93, &v93);
    if ((v36 & 1) == 0)
    {
      *(_QWORD *)&k = "sdf/childrenUtils.cpp";
      *((_QWORD *)&k + 1) = "SetChildren";
      v105 = 188;
      v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relat"
             "ionshipTargetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename "
             "ChildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
      v107 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
      goto LABEL_77;
    }
    v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v36, v37);
    v39 = (uint64_t **)sub_20BFD5244(v38);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v39, (uint64_t *)&k);
    v42 = sub_20BEB560C((uint64_t)&k, (uint64_t)a1);
    v43 = *((_QWORD *)&k + 1);
    if (*((_QWORD *)&k + 1))
    {
      v44 = (unsigned int *)(*((_QWORD *)&k + 1) + 8);
      do
      {
        v45 = __ldxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    }
    if (!v42)
    {
      *(_QWORD *)&k = "sdf/childrenUtils.cpp";
      *((_QWORD *)&k + 1) = "SetChildren";
      v105 = 193;
      v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relat"
             "ionshipTargetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename "
             "ChildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
      v107 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_77;
    }
    v47 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v40, v41);
    v48 = sub_20BFD5244(v47);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v48, &v118);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v118, &k);
    if (*(_QWORD *)a2 == (_QWORD)k)
    {
      HasPrefix = 0;
    }
    else
    {
      v52 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v49, v50);
      v53 = sub_20BFD5244(v52);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v53, &m);
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&m);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&m + 1);
      sub_20BFD265C(&m);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
    sub_20BFD265C(&k);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v118 + 1);
    sub_20BFD265C(&v118);
    if (HasPrefix)
    {
      *(_QWORD *)&k = "sdf/childrenUtils.cpp";
      *((_QWORD *)&k + 1) = "SetChildren";
      v105 = 203;
      v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relat"
             "ionshipTargetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename "
             "ChildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
      v107 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
LABEL_77:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
      sub_20BFD265C(&v93);
LABEL_78:
      v63 = 0;
      goto LABEL_83;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
    sub_20BFD265C(&v93);
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v103);
  for (k = i; (_QWORD)k != *((_QWORD *)&k + 1); sub_20BFD7240(&k))
  {
    v56 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&k, v54, v55);
    if (v117 == sub_20BFE4AF0((uint64_t)&v116, v56))
    {
      v59 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&k, v57, v58);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, v59, &j);
      v60 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v60, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_20BFD265C(&j);
    }
  }
  sub_20C0D83D4((uint64_t)&j, (const pxrInternal__aapl__pxrReserved__::SdfPath *)i, *((const pxrInternal__aapl__pxrReserved__::SdfPath **)&i + 1));
  for (m = v113; ; sub_20C0B8E80(&m))
  {
    v63 = m == *((_QWORD *)&m + 1);
    if ((_QWORD)m == *((_QWORD *)&m + 1))
      break;
    v64 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&m, v61, v62);
    sub_20C0AF758(v64, &v100);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v100, &v98);
    v67 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&m, v65, v66);
    v68 = sub_20BFD5244(v67);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v68, &k);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&k, &v97);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
    sub_20BFD265C(&k);
    if (v97 == *(_QWORD *)a2)
    {
      v69 = 10;
    }
    else
    {
      if ((_QWORD *)((char *)&j + 8) != sub_20BFE4AF0((uint64_t)&j, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v100))
      {
        v70 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v70, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v98);
      }
      sub_20C0D299C((unsigned int **)&v96);
      v71 = sub_20BFCF650(a1);
      k = 0uLL;
      v105 = 0;
      v72 = sub_20C0A683C((uint64_t *)(v71 + 112));
      (*(void (**)(__int128 **__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v72 + 136))(&v118, v72, &v97, &v96);
      if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v118))
      {
        if ((v119 & 4) != 0)
          p_k = (__int128 *)(*(uint64_t (**)(__int128 **))((v119 & 0xFFFFFFFFFFFFFFF8) + 168))(&v118);
        else
          p_k = v118;
      }
      else
      {
        p_k = &k;
      }
      v93 = 0;
      v94 = 0;
      v95 = 0;
      sub_20BFD6D38(&v93, *(_DWORD **)p_k, *((_DWORD **)p_k + 1), (uint64_t)(*((_QWORD *)p_k + 1) - *(_QWORD *)p_k) >> 3);
      v74 = (void ***)sub_20BF4C2D8((uint64_t)&v118);
      v118 = &k;
      sub_20BFD6F90(v74);
      v75 = v93;
      if (v93 != v94)
      {
        while (*(_QWORD *)v75 != v100)
        {
          v75 += 2;
          if (v75 == v94)
          {
            v75 = v94;
            break;
          }
        }
      }
      if (v75 == v94)
      {
        *(_QWORD *)&k = "sdf/childrenUtils.cpp";
        *((_QWORD *)&k + 1) = "SetChildren";
        v105 = 254;
        v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Rel"
               "ationshipTargetChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typen"
               "ame ChildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
        v107 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        v69 = 1;
      }
      else
      {
        sub_20C0D8454((uint64_t)&v118, v75 + 2, v94, v75);
        v77 = v76;
        for (n = v94; n != v77; sub_20BFD6F64((uint64_t)&v95, n))
          n -= 2;
        v94 = v77;
        if (v93 == v77)
        {
          v80 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v80, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v97, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v96);
        }
        else
        {
          v79 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B8F7C(v79, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v97, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v96, &v93);
        }
        v81 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        v84 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&m, v82, v83);
        v85 = sub_20BFD5244(v84);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v85, &k);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v81, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v98);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
        sub_20BFD265C(&k);
        v69 = 0;
      }
      *(_QWORD *)&k = &v93;
      sub_20BFD6F90((void ***)&k);
      if ((v96 & 7) != 0)
      {
        v86 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v97 + 1);
    sub_20BFD265C(&v97);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v99);
    sub_20BFD265C(&v98);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v100 + 1);
    sub_20BFD265C(&v100);
    if (v69 != 10 && v69)
      goto LABEL_82;
  }
  if (v108 == v109)
  {
    v89 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v89, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v115);
  }
  else
  {
    v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    sub_20C0B8F7C(v88, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v115, &v108);
  }
LABEL_82:
  sub_20BFD7C28((uint64_t)&j, *((_QWORD **)&j + 1));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v103);
LABEL_83:
  *(_QWORD *)&k = &v108;
  sub_20BFD6F90((void ***)&k);
  sub_20BFD7C28((uint64_t)&v116, v117[0]);
  *(_QWORD *)&k = &i;
  sub_20BFD6F90((void ***)&k);
  *(_QWORD *)&k = &v113;
  sub_20BFD2B90((void ***)&k);
  if (((uint64_t)v115[0] & 7) != 0)
  {
    v90 = (unsigned int *)((unint64_t)v115[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  return v63;
}

void sub_20C0D33F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;

  sub_20BFD1A18(&a10);
  a23 = (void **)&a28;
  sub_20BFD6F90(&a23);
  sub_20BFD7C28(v31 - 144, *(_QWORD **)(v31 - 136));
  a23 = (void **)&a31;
  sub_20BFD6F90(&a23);
  a23 = (void **)(v31 - 192);
  sub_20BFD2B90(&a23);
  v33 = *(_QWORD *)(v31 - 160);
  if ((v33 & 7) != 0)
  {
    v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t **v8;
  BOOL v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  void **v15;
  void **v16;
  _BOOL8 v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  _BOOL4 HasPrefix;
  uint64_t v23;
  uint64_t v24;
  void ***v25;
  void ***v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  _QWORD *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t v34;
  uint64_t v35;
  void ***v36;
  const char *Text;
  void ***v38;
  int *v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v48;
  unsigned int v49;
  unint64_t v50;
  int v51;
  int v52;
  void ***v53;
  char *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  void **v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  char v63;
  unsigned int *v64[2];
  void ***v65;
  int *v66;
  uint64_t v67;
  void ***v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  sub_20C0D299C(v64);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    v59 = (void **)"sdf/childrenUtils.cpp";
    v60 = "InsertChild";
    v61 = 290;
    v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipTargetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Value"
          "Type &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
    v63 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  v8 = (uint64_t **)sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&v59);
  v9 = sub_20BEB560C((uint64_t)&v59, (uint64_t)a1);
  v10 = v60;
  if (v60)
  {
    v11 = (unsigned int *)(v60 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!v9)
  {
    v59 = (void **)"sdf/childrenUtils.cpp";
    v60 = "InsertChild";
    v61 = 295;
    v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipTargetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Value"
          "Type &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
    v63 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_12;
  }
  v14 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v53);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v59);
  v15 = v59;
  v16 = *(void ***)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
  sub_20BFD265C(&v59);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
  sub_20BFD265C(&v53);
  if (v15 == v16)
  {
    v17 = 1;
  }
  else
  {
    sub_20C0AF758(a3, &v58);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, &v56);
    v21 = sub_20BFD5244(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v21, &v59);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v59);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
    sub_20BFD265C(&v59);
    if (HasPrefix)
    {
      v59 = (void **)"sdf/childrenUtils.cpp";
      v60 = "InsertChild";
      v61 = 312;
      v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relati"
            "onshipTargetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::V"
            "alueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
      v63 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      v17 = 0;
    }
    else
    {
      v23 = sub_20BFCF650(a1);
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v24 = sub_20C0A683C((uint64_t *)(v23 + 112));
      (*(void (**)(void ****__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v24 + 136))(&v65, v24, a2, v64);
      if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v65))
      {
        if ((v66 & 4) != 0)
          v25 = (void ***)(*(uint64_t (**)(void ****))(((unint64_t)v66 & 0xFFFFFFFFFFFFFFF8) + 168))(&v65);
        else
          v25 = v65;
      }
      else
      {
        v25 = &v59;
      }
      v53 = 0;
      v54 = 0;
      v55 = 0;
      sub_20BFD6D38(&v53, *v25, v25[1], v25[1] - *v25);
      v26 = (void ***)sub_20BF4C2D8((uint64_t)&v65);
      v65 = &v59;
      sub_20BFD6F90(v26);
      v29 = (unint64_t)(v54 - (char *)v53) >> 3;
      if (a4 != -1)
        LODWORD(v29) = a4;
      v30 = (int)v29;
      if ((int)v29 <= (unint64_t)((v54 - (char *)v53) >> 3))
      {
        v65 = v53;
        v66 = (int *)v54;
        while (v65 != (void ***)v66)
        {
          v32 = (_QWORD *)sub_20BFD71C4((uint64_t *)&v65, v27, v28);
          if (*v32 == v58)
          {
            v59 = (void **)"sdf/childrenUtils.cpp";
            v60 = "InsertChild";
            v61 = 334;
            v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "RelationshipTargetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename Ch"
                  "ildPolicy::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
            v63 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_35;
          }
          sub_20BFD7240(&v65);
        }
        v33 = sub_20BFD5244(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v33, &v59);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, &v51);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
        sub_20BFD265C(&v59);
        sub_20C0D299C((unsigned int **)&v50);
        v34 = sub_20BFCF650(a1);
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v35 = sub_20C0A683C((uint64_t *)(v34 + 112));
        (*(void (**)(void ****__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v35 + 136))(&v68, v35, &v51, &v50);
        if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v68))
        {
          if ((v69 & 4) != 0)
            v36 = (void ***)(*(uint64_t (**)(void ****))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(&v68);
          else
            v36 = v68;
        }
        else
        {
          v36 = &v59;
        }
        v65 = 0;
        v66 = 0;
        v67 = 0;
        sub_20BFD6D38(&v65, *v36, v36[1], v36[1] - *v36);
        v38 = (void ***)sub_20BF4C2D8((uint64_t)&v68);
        v68 = &v59;
        sub_20BFD6F90(v38);
        v39 = (int *)v65;
        if (v65 != (void ***)v66)
        {
          while (*(_QWORD *)v39 != v58)
          {
            v39 += 2;
            if (v39 == v66)
            {
              v39 = v66;
              break;
            }
          }
        }
        v17 = v39 != v66;
        if (v39 == v66)
        {
          v59 = (void **)"sdf/childrenUtils.cpp";
          v60 = "InsertChild";
          v61 = 352;
          v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Re"
                "lationshipTargetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildP"
                "olicy::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
          v63 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v59);
          sub_20C0B8EFC((uint64_t)&v65, v39);
          if (v65 == (void ***)v66)
          {
            v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v50);
          }
          else
          {
            v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            sub_20C0B8F7C(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v50, (_DWORD **)&v65);
          }
          v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          v43 = sub_20BFD5244(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v43, &v68);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v68, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
          sub_20BFD1A18(&v68);
          sub_20C0B98C8((uint64_t *)&v53, (int *)&v53[v30], (int *)&v58);
          v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B8F7C(v44, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v64, (_DWORD **)&v53);
          v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51, &v68);
          IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v68);
          if ((IsDormant & 1) == 0)
          {
            Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v68);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v68);
          sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v59);
        }
        v59 = (void **)&v65;
        sub_20BFD6F90(&v59);
        if ((v50 & 7) != 0)
        {
          v48 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
        sub_20BFD265C(&v51);
      }
      else
      {
        v59 = (void **)"sdf/childrenUtils.cpp";
        v60 = "InsertChild";
        v61 = 326;
        v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Rela"
              "tionshipTargetChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolic"
              "y::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]";
        v63 = 0;
        v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v31, v30);
LABEL_35:
        v17 = 0;
      }
      v59 = (void **)&v53;
      sub_20BFD6F90(&v59);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v57);
    sub_20BFD265C(&v56);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
    sub_20BFD265C(&v58);
  }
LABEL_13:
  if (((uint64_t)v64[0] & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v64[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  return v17;
}

void sub_20C0D3D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, int a17, int a18, int a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;

  a20 = (void **)(v25 - 112);
  sub_20BFD6F90(&a20);
  if ((a11 & 7) != 0)
  {
    v27 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  sub_20BFD1A18(&a12);
  a20 = (void **)&a14;
  sub_20BFD6F90(&a20);
  sub_20BFD1A18(&a17);
  sub_20BFD1A18(&a19);
  if ((a25 & 7) != 0)
  {
    v29 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void ***v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  int *v13;
  int *v14;
  int *i;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v18;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v24;
  void **v25[3];
  uint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  void ***v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  sub_20C0D299C((unsigned int **)&v29);
  v6 = sub_20BFCF650(a1);
  memset(v25, 0, sizeof(v25));
  v7 = sub_20C0A683C((uint64_t *)(v6 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v7 + 136))(&v32, v7, a2, &v29);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v32))
  {
    if ((v33 & 4) != 0)
      v8 = (void ***)(*(uint64_t (**)(void ****))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(&v32);
    else
      v8 = v32;
  }
  else
  {
    v8 = v25;
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  sub_20BFD6D38(&v26, *v8, v8[1], v8[1] - *v8);
  sub_20BF4C2D8((uint64_t)&v32);
  v32 = v25;
  sub_20BFD6F90((void ***)&v32);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  sub_20BFD6E54(&v32, a3);
  sub_20BFD6EA4((_DWORD *)&v32 + 1, a3 + 1);
  v9 = (int *)v26;
  if ((int *)v26 == v27)
  {
LABEL_9:
    v11 = 0;
  }
  else
  {
    v10 = -v26;
    while (*(void ****)v9 != v32)
    {
      v9 += 2;
      v10 -= 8;
      if (v9 == v27)
        goto LABEL_9;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v32, &v30);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
    sub_20C0D8454((uint64_t)&v24, (int *)(8 - v10), v27, (int *)-v10);
    v14 = v13;
    for (i = v27; i != v14; sub_20BFD6F64((uint64_t)&v28, i))
      i -= 2;
    v27 = v14;
    if ((int *)v26 == v14)
    {
      v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v17, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
    }
    else
    {
      v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B8F7C(v16, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29, (_DWORD **)&v26);
    }
    v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v18, a2, &v24);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v24);
    if ((IsDormant & 1) == 0)
    {
      Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v24);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    sub_20BFD265C(&v30);
    v11 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  v25[0] = (void **)&v26;
  sub_20BFD6F90(v25);
  if ((v29 & 7) != 0)
  {
    v21 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_33Sdf_RelationshipTargetChildPolicyEE11RemoveChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathESA_(a1, a2, a3);
}

void sub_20C0D4200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char ***v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char ****v21;
  void ***v22;
  int *v23;
  uint64_t v24;
  _BOOL4 v26;
  int *v27;
  int *v28;
  int *v29;
  int *i;
  int *v31;
  int *v32;
  int *j;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v34;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v35;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v36;
  uint64_t IsDormant;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v39;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char **v50;
  int *v51;
  uint64_t v52;
  char *v53;
  int *v54;
  uint64_t v55;
  char *v56;
  unsigned int *v57[2];
  char ***v58;
  uint64_t v59;
  uint64_t v60;
  void ***v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  sub_20C0D299C(v57);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, a4, &v56);
  v10 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v53);
  v11 = v56;
  v12 = v53;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
  sub_20BFD265C(&v53);
  if (a5 == -2 && v11 == v12)
    goto LABEL_52;
  v13 = sub_20BFCF650(a1);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v14 = sub_20C0A683C((uint64_t *)(v13 + 112));
  (*(void (**)(char ****__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v14 + 136))(&v58, v14, a2, v57);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
  {
    if ((v59 & 4) != 0)
      v15 = (char ***)(*(uint64_t (**)(char ****))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(&v58);
    else
      v15 = v58;
  }
  else
  {
    v15 = &v50;
  }
  v53 = 0;
  v54 = 0;
  v55 = 0;
  sub_20BFD6D38(&v53, *v15, v15[1], v15[1] - *v15);
  sub_20BF4C2D8((uint64_t)&v58);
  v58 = &v50;
  sub_20BFD6F90((void ***)&v58);
  sub_20C0AF758(a3, &v49);
  v16 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &v50);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
  sub_20BFD265C(&v50);
  if (a5 == -2 && v48 == *(_QWORD *)a2)
  {
    if (v53 == (char *)v54)
    {
      v17 = (int *)v53;
    }
    else
    {
      v17 = (int *)v53;
      while (*(_QWORD *)v17 != v49)
      {
        v17 += 2;
        if (v17 == v54)
        {
          v17 = v54;
          break;
        }
      }
    }
    v18 = (unint64_t)((char *)v17 - v53) >> 3;
  }
  else if (((char *)v54 - v53) >> 3 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = ((char *)v54 - v53) >> 3;
  }
  sub_20C0D299C((unsigned int **)&v47);
  v19 = sub_20BFCF650(a1);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v20 = sub_20C0A683C((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v20 + 136))(&v61, v20, &v48, &v47);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v61))
  {
    if ((v62 & 4) != 0)
      v21 = (char ****)(*(uint64_t (**)(void ****))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(&v61);
    else
      v21 = (char ****)v61;
  }
  else
  {
    v21 = &v58;
  }
  v50 = 0;
  v51 = 0;
  v52 = 0;
  sub_20BFD6D38(&v50, *v21, v21[1], v21[1] - *v21);
  v22 = (void ***)sub_20BF4C2D8((uint64_t)&v61);
  v61 = (void ***)&v58;
  sub_20BFD6F90(v22);
  v23 = (int *)v50;
  if (v50 != (char **)v51)
  {
    while (*(_QWORD *)v23 != v49)
    {
      v23 += 2;
      if (v23 == v51)
      {
        v23 = v51;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v58);
  if (v48 == *(_QWORD *)a2)
  {
    v24 = (char *)v23 - (char *)v50;
    if (v49 == *(_QWORD *)a4
      && ((_DWORD)v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == (_DWORD)v18))
    {
      goto LABEL_48;
    }
    v26 = (int)v18 > v24 >> 3;
    v27 = (int *)v53;
    if (v53 != (char *)v54)
    {
      while (*(_QWORD *)v27 != v49)
      {
        v27 += 2;
        if (v27 == v54)
        {
          v27 = v54;
          break;
        }
      }
    }
    sub_20C0D8454((uint64_t)&v61, v27 + 2, v54, v27);
    v29 = v28;
    LODWORD(v18) = v18 - v26;
    for (i = v54; i != v29; sub_20BFD6F64((uint64_t)&v55, i))
      i -= 2;
    v54 = v29;
  }
  else
  {
    sub_20C0D8454((uint64_t)&v61, v23 + 2, v51, v23);
    v32 = v31;
    for (j = v51; j != v32; sub_20BFD6F64((uint64_t)&v52, j))
      j -= 2;
    v51 = v32;
    if (v50 == (char **)v32)
    {
      v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v35, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v47);
      v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, &v61);
      IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v61);
      if ((IsDormant & 1) == 0)
      {
        Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v61);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v61);
    }
    else
    {
      v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B8F7C(v34, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v47, (_DWORD **)&v50);
    }
  }
  v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v40 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v40, &v61);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v39, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v61, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
  sub_20BFD265C(&v61);
  sub_20C0B98C8((uint64_t *)&v53, (int *)&v53[8 * (int)v18], (int *)a4);
  v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  sub_20C0B8F7C(v41, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v57, (_DWORD **)&v53);
LABEL_48:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v58);
  v58 = &v50;
  sub_20BFD6F90((void ***)&v58);
  if ((v47 & 7) != 0)
  {
    v42 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
  sub_20BFD265C(&v48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
  sub_20BFD265C(&v49);
  v50 = &v53;
  sub_20BFD6F90((void ***)&v50);
LABEL_52:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if (((uint64_t)v57[0] & 7) != 0)
  {
    v44 = (unsigned int *)((unint64_t)v57[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  return 1;
}

void sub_20C0D4828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, void **a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,void ***a22)
{
  uint64_t v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v22 - 88));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a22);
  a22 = &a13;
  sub_20BFD6F90((void ***)&a22);
  if ((a9 & 7) != 0)
  {
    v24 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20BFD1A18(&a10);
  sub_20BFD1A18(&a12);
  a13 = (void **)&a16;
  sub_20BFD6F90(&a13);
  sub_20BFD1A18(&a19);
  if ((a20 & 7) != 0)
  {
    v26 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  const char *v13;
  _BOOL8 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t **v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  _BOOL4 HasPrefix;
  uint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int *v35;
  unsigned int v36;
  void **v37[3];
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  void ***v49;

  sub_20C0D299C((unsigned int **)&v48);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      v13 = "Layer is not editable";
      goto LABEL_7;
    }
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      v13 = "Object does not exist";
LABEL_7:
      MEMORY[0x212B929D0](a6, v13);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v18 = (uint64_t **)sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v18, &v44);
  v19 = sub_20BEB560C((uint64_t)&v44, (uint64_t)a1);
  v20 = v45;
  if (v45)
  {
    v21 = (unsigned int *)(v45 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (!v19)
  {
    if (!a6)
      goto LABEL_8;
    v13 = "Cannot reparent to another layer";
    goto LABEL_7;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, a4, &v46);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v46))
  {
    if (!a6)
    {
LABEL_27:
      v14 = 0;
      goto LABEL_28;
    }
    v27 = "Invalid name";
LABEL_26:
    MEMORY[0x212B929D0](a6, v27);
    goto LABEL_27;
  }
  v24 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &v41);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, &v44);
  v25 = v44;
  v26 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
  sub_20BFD265C(&v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
  sub_20BFD265C(&v41);
  if (v25 != v26)
  {
    v28 = sub_20BFD5244(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v44);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
    sub_20BFD265C(&v44);
    if (!HasPrefix)
    {
      v30 = sub_20BFCF650(a1);
      v41 = 0;
      v42 = 0;
      v43 = 0;
      sub_20C0B8C80(v30, (uint64_t)a2, (uint64_t)&v48, (_DWORD **)&v41, &v44);
      v37[0] = (void **)&v41;
      sub_20BFD6F90(v37);
      v31 = (unint64_t)(v45 - v44) >> 3;
      if (a5 != -1)
        LODWORD(v31) = a5;
      if ((_DWORD)v31 == -2 || (int)v31 <= (unint64_t)((v45 - v44) >> 3))
      {
        sub_20C0AF758(a3, &v40);
        v32 = sub_20BFD5244(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, &v41);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, &v39);
        sub_20BFD1A18(&v41);
        sub_20C0D299C((unsigned int **)&v38);
        v33 = sub_20BFCF650(a1);
        memset(v37, 0, sizeof(v37));
        sub_20C0B8C80(v33, (uint64_t)&v39, (uint64_t)&v38, (_DWORD **)v37, &v41);
        v49 = v37;
        sub_20BFD6F90((void ***)&v49);
        v34 = v41;
        if (v41 != v42)
        {
          while (*v34 != v40)
          {
            if (++v34 == v42)
            {
              v34 = v42;
              break;
            }
          }
        }
        v14 = v34 != v42;
        if (a6 && v34 == v42)
          MEMORY[0x212B929D0](a6, "Coding error: Object is not in its parent's children");
        v37[0] = (void **)&v41;
        sub_20BFD6F90(v37);
        if ((v38 & 7) != 0)
        {
          v35 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        sub_20BFD1A18(&v39);
        sub_20BFD1A18(&v40);
      }
      else
      {
        if (a6)
          MEMORY[0x212B929D0](a6, "Invalid index");
        v14 = 0;
      }
      v41 = &v44;
      sub_20BFD6F90((void ***)&v41);
      goto LABEL_28;
    }
    if (!a6)
      goto LABEL_27;
    v27 = "Cannot reparent object under itself";
    goto LABEL_26;
  }
  v14 = 1;
LABEL_28:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
  sub_20BFD265C(&v46);
LABEL_9:
  if ((v48 & 7) != 0)
  {
    v15 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v14;
}

void sub_20C0D4D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;

  a16 = (void **)&a19;
  sub_20BFD6F90(&a16);
  sub_20BFD1A18((_DWORD *)(v19 - 88));
  v21 = *(_QWORD *)(v19 - 80);
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v10;
  void ***v11;
  _BOOL8 v12;
  void ***v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  void **v18[3];
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22[2];
  void ***v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20C0D299C(v22);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8) & 1) != 0)
  {
    v9 = sub_20BFCF650(a1);
    memset(v18, 0, sizeof(v18));
    v10 = sub_20C0A683C((uint64_t *)(v9 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v10 + 136))(&v23, v10, a2, v22);
    if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
    {
      if ((v24 & 4) != 0)
        v11 = (void ***)(*(uint64_t (**)(void ****))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(&v23);
      else
        v11 = v23;
    }
    else
    {
      v11 = v18;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_20BFD6D38(&v19, *v11, v11[1], v11[1] - *v11);
    v13 = (void ***)sub_20BF4C2D8((uint64_t)&v23);
    v23 = v18;
    sub_20BFD6F90(v13);
    v14 = v19;
    if (v19 != v20)
    {
      while (*v14 != *a3)
      {
        if (++v14 == v20)
        {
          v14 = v20;
          break;
        }
      }
    }
    v12 = v14 != v20;
    if (a4 && v14 == v20)
      MEMORY[0x212B929D0](a4, "Object does not exist");
    v18[0] = (void **)&v19;
    sub_20BFD6F90(v18);
  }
  else
  {
    if (a4)
      MEMORY[0x212B929D0](a4, "Layer is not editable");
    v12 = 0;
  }
  if (((uint64_t)v22[0] & 7) != 0)
  {
    v15 = (unsigned int *)((unint64_t)v22[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v12;
}

void sub_20C0D504C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;

  a10 = (void **)&a13;
  sub_20BFD6F90(&a10);
  if ((a16 & 7) != 0)
  {
    v17 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CreateSpec(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;

  v9 = *(_QWORD *)(a1 + 8);
  v8 = (uint64_t *)(a1 + 8);
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(v8) + 14))
      v10 = *(pxrInternal__aapl__pxrReserved__::SdfLayer **)a1;
    else
      v10 = 0;
  }
  else
  {
    v10 = 0;
  }
  return pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CreateSpec(v10, a2, a3, a4);
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_34Sdf_AttributeConnectionChildPolicyEE10CreateSpecERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Spec;
  unsigned int *v9;
  unsigned int v10;
  int v11;
  void **v12;
  const char *Text;
  void **v14;
  int v16;
  int v17;
  void *__p[2];
  char v19;
  _BYTE v20[8];
  char *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  char v25;

  if ((_DWORD)a3)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
    Spec = pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(a1, a2, a3, a4);
    if ((Spec & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v21);
      sub_20C0D535C((unsigned int **)__p);
      sub_20C0D2A04(a2, &v16);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::SdfPath>((uint64_t *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v21, (const pxrInternal__aapl__pxrReserved__::TfToken *)__p, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v16, 1);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v17);
      sub_20BFD265C(&v16);
      if (((uint64_t)__p[0] & 7) != 0)
      {
        v9 = (unsigned int *)((unint64_t)__p[0] & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stlxr(v10 - 2, v9));
      }
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v21 + 1);
      sub_20BFD265C(&v21);
    }
    else
    {
      v21 = "sdf/childrenUtils.cpp";
      v22 = "CreateSpec";
      v23 = 101;
      v24 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attrib"
            "uteConnectionChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInte"
            "rnal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
      v25 = 0;
      pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C524D70, a3, (uint64_t)__p);
      v11 = v19;
      v12 = (void **)__p[0];
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v14 = __p;
      if (v11 < 0)
        v14 = v12;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Failed to create spec of type '%s' at <%s>", (const char *)v14, Text);
      if (v19 < 0)
        operator delete(__p[0]);
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
  }
  else
  {
    v21 = "sdf/childrenUtils.cpp";
    v22 = "CreateSpec";
    v23 = 90;
    v24 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attribut"
          "eConnectionChildPolicy>::CreateSpec(SdfLayer *, const SdfPath &, SdfSpecType, BOOL) [ChildPolicy = pxrInternal"
          "__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
    v25 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid object type");
    return 0;
  }
  return Spec;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_34Sdf_AttributeConnectionChildPolicyEE10CreateSpecEPNS_8SdfLayerERKNS_7SdfPathENS_11SdfSpecTypeEb(a1, a2, a3, a4);
}

void sub_20C0D52D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a18);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *sub_20C0D535C@<X0>(unsigned int **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *result;
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;

  result = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  if (!result)
    result = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
  v3 = *(unsigned int **)result;
  *a1 = *(unsigned int **)result;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)((unint64_t)v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 = v4;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::IsValidName()
{
  return 1;
}

int *pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::IsValidName(__int128 *a1)
{
  return pxrInternal__aapl__pxrReserved__::SdfPath::IsValidPathString(a1, 0);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::SetChildren(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, __int128 *a3)
{
  uint64_t v6;
  char *v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v8;
  uint64_t v9;
  char *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v11;
  uint64_t v12;
  char *v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v15;
  _DWORD *v16;
  _DWORD *v17;
  char v18;
  unsigned int **v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  void ***v27;
  uint64_t v28;
  char *v29;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v30;
  uint64_t v31;
  char *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  char *v37;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v38;
  uint64_t **v39;
  uint64_t v40;
  char *v41;
  BOOL v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int v46;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v47;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v48;
  uint64_t v49;
  char *v50;
  _BOOL4 HasPrefix;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v52;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v53;
  uint64_t v54;
  char *v55;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v56;
  uint64_t v57;
  char *v58;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v59;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v60;
  uint64_t v61;
  char *v62;
  _BOOL8 v63;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v64;
  uint64_t v65;
  char *v66;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v67;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v68;
  int v69;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *p_k;
  void ***v74;
  int *v75;
  int *v76;
  int *v77;
  int *n;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v79;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v80;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v81;
  uint64_t v82;
  char *v83;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v84;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v85;
  unsigned int *v86;
  unsigned int v87;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v88;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v89;
  unsigned int *v90;
  unsigned int v91;
  int *v93;
  int *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  __int128 m;
  __int128 j;
  _BYTE v103[8];
  __int128 k;
  uint64_t v105;
  const char *v106;
  char v107;
  _DWORD *v108;
  _DWORD *v109;
  unint64_t v110;
  __int128 i;
  uint64_t v112;
  __int128 v113;
  unint64_t v114;
  unsigned int *v115[2];
  uint64_t *v116;
  _QWORD *v117[2];
  __int128 *v118;
  uint64_t v119;
  uint64_t v120;

  v120 = *MEMORY[0x24BDAC8D0];
  sub_20C0D535C(v115);
  v113 = 0uLL;
  v114 = 0;
  *((_QWORD *)&k + 1) = 0;
  v105 = 0;
  *(_QWORD *)&k = (char *)&k + 8;
  for (i = *a3; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C0D8358(&i))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v6, v7);
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v8) & 1) != 0)
      goto LABEL_9;
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v9, v10);
    sub_20C0AF758(v11, &v116);
    sub_20C0A7BE0((uint64_t **)&k, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v116, &v116);
    if ((v12 & 1) != 0)
      goto LABEL_7;
    v14 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D82DC((uint64_t *)&i, v12, v13);
    v15 = sub_20BFD5244(v14);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v15, &j);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&j, &v108);
    v16 = v108;
    v17 = *(_DWORD **)a2;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v108 + 1);
    sub_20BFD265C(&v108);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
    sub_20BFD265C(&j);
    if (v16 != v17)
LABEL_7:
      v18 = 1;
    else
      v18 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v116 + 1);
    sub_20BFD265C(&v116);
    if ((v18 & 1) != 0)
    {
LABEL_9:
      v19 = (unsigned int **)sub_20C0D82DC((uint64_t *)&i, v9, v10);
      v20 = *((_QWORD *)&v113 + 1);
      if (*((_QWORD *)&v113 + 1) >= v114)
      {
        v23 = sub_20BFD2FCC((unsigned int ***)&v113, v19);
      }
      else
      {
        v21 = *v19;
        **((_QWORD **)&v113 + 1) = *v19;
        if (v21)
        {
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 + 1, v21));
        }
        v23 = (char *)(v20 + 8);
      }
      *((_QWORD *)&v113 + 1) = v23;
    }
  }
  sub_20BFD7C28((uint64_t)&k, *((_QWORD **)&k + 1));
  v24 = sub_20BFCF650(a1);
  k = 0uLL;
  v105 = 0;
  v25 = sub_20C0A683C((uint64_t *)(v24 + 112));
  (*(void (**)(uint64_t **__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v25 + 136))(&v116, v25, a2, v115);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v116))
  {
    if (((uint64_t)v117[0] & 4) != 0)
      v26 = (uint64_t *)(*(uint64_t (**)(uint64_t **))(((unint64_t)v117[0] & 0xFFFFFFFFFFFFFFF8) + 168))(&v116);
    else
      v26 = v116;
  }
  else
  {
    v26 = (uint64_t *)&k;
  }
  i = 0uLL;
  v112 = 0;
  sub_20BFD6D38(&i, (_DWORD *)*v26, (_DWORD *)v26[1], (v26[1] - *v26) >> 3);
  v27 = (void ***)sub_20BF4C2D8((uint64_t)&v116);
  v116 = (uint64_t *)&k;
  sub_20BFD6F90(v27);
  v117[0] = 0;
  v117[1] = 0;
  v116 = (uint64_t *)v117;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  sub_20C0B8D74((uint64_t *)&v108, (uint64_t)(*((_QWORD *)&v113 + 1) - v113) >> 3);
  for (j = v113; (_QWORD)j != *((_QWORD *)&j + 1); sub_20C0B8E80(&j))
  {
    v30 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v28, v29);
    if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(v30))
    {
      *(_QWORD *)&k = "sdf/childrenUtils.cpp";
      *((_QWORD *)&k + 1) = "SetChildren";
      v105 = 181;
      v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attri"
             "buteConnectionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename"
             " ChildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
      v107 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
      goto LABEL_78;
    }
    v33 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v31, v32);
    sub_20C0AF758(v33, &v93);
    v34 = v109;
    if ((unint64_t)v109 >= v110)
    {
      v35 = (_DWORD *)sub_20BFD7890((uint64_t *)&v108, &v93);
    }
    else
    {
      sub_20BFD6E54(v109, &v93);
      sub_20BFD6EA4(v34 + 1, (_DWORD *)&v93 + 1);
      v35 = v34 + 2;
    }
    v109 = v35;
    sub_20C0A7BE0(&v116, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v93, &v93);
    if ((v36 & 1) == 0)
    {
      *(_QWORD *)&k = "sdf/childrenUtils.cpp";
      *((_QWORD *)&k + 1) = "SetChildren";
      v105 = 188;
      v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attri"
             "buteConnectionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename"
             " ChildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
      v107 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Duplicate child");
      goto LABEL_77;
    }
    v38 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v36, v37);
    v39 = (uint64_t **)sub_20BFD5244(v38);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v39, (uint64_t *)&k);
    v42 = sub_20BEB560C((uint64_t)&k, (uint64_t)a1);
    v43 = *((_QWORD *)&k + 1);
    if (*((_QWORD *)&k + 1))
    {
      v44 = (unsigned int *)(*((_QWORD *)&k + 1) + 8);
      do
      {
        v45 = __ldxr(v44);
        v46 = v45 - 1;
      }
      while (__stlxr(v46, v44));
      if (!v46)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    }
    if (!v42)
    {
      *(_QWORD *)&k = "sdf/childrenUtils.cpp";
      *((_QWORD *)&k + 1) = "SetChildren";
      v105 = 193;
      v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attri"
             "buteConnectionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename"
             " ChildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
      v107 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
      goto LABEL_77;
    }
    v47 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v40, v41);
    v48 = sub_20BFD5244(v47);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v48, &v118);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v118, &k);
    if (*(_QWORD *)a2 == (_QWORD)k)
    {
      HasPrefix = 0;
    }
    else
    {
      v52 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&j, v49, v50);
      v53 = sub_20BFD5244(v52);
      pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v53, &m);
      HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&m);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&m + 1);
      sub_20BFD265C(&m);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
    sub_20BFD265C(&k);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v118 + 1);
    sub_20BFD265C(&v118);
    if (HasPrefix)
    {
      *(_QWORD *)&k = "sdf/childrenUtils.cpp";
      *((_QWORD *)&k + 1) = "SetChildren";
      v105 = 203;
      v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attri"
             "buteConnectionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<typename"
             " ChildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
      v107 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
LABEL_77:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
      sub_20BFD265C(&v93);
LABEL_78:
      v63 = 0;
      goto LABEL_83;
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v93 + 1);
    sub_20BFD265C(&v93);
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v103);
  for (k = i; (_QWORD)k != *((_QWORD *)&k + 1); sub_20BFD7240(&k))
  {
    v56 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&k, v54, v55);
    if (v117 == sub_20BFE4AF0((uint64_t)&v116, v56))
    {
      v59 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&k, v57, v58);
      pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, v59, &j);
      v60 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v60, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&j);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&j + 1);
      sub_20BFD265C(&j);
    }
  }
  sub_20C0D83D4((uint64_t)&j, (const pxrInternal__aapl__pxrReserved__::SdfPath *)i, *((const pxrInternal__aapl__pxrReserved__::SdfPath **)&i + 1));
  for (m = v113; ; sub_20C0B8E80(&m))
  {
    v63 = m == *((_QWORD *)&m + 1);
    if ((_QWORD)m == *((_QWORD *)&m + 1))
      break;
    v64 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&m, v61, v62);
    sub_20C0AF758(v64, &v100);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v100, &v98);
    v67 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&m, v65, v66);
    v68 = sub_20BFD5244(v67);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v68, &k);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&k, &v97);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
    sub_20BFD265C(&k);
    if (v97 == *(_QWORD *)a2)
    {
      v69 = 10;
    }
    else
    {
      if ((_QWORD *)((char *)&j + 8) != sub_20BFE4AF0((uint64_t)&j, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v100))
      {
        v70 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v70, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v98);
      }
      sub_20C0D535C((unsigned int **)&v96);
      v71 = sub_20BFCF650(a1);
      k = 0uLL;
      v105 = 0;
      v72 = sub_20C0A683C((uint64_t *)(v71 + 112));
      (*(void (**)(__int128 **__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v72 + 136))(&v118, v72, &v97, &v96);
      if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v118))
      {
        if ((v119 & 4) != 0)
          p_k = (__int128 *)(*(uint64_t (**)(__int128 **))((v119 & 0xFFFFFFFFFFFFFFF8) + 168))(&v118);
        else
          p_k = v118;
      }
      else
      {
        p_k = &k;
      }
      v93 = 0;
      v94 = 0;
      v95 = 0;
      sub_20BFD6D38(&v93, *(_DWORD **)p_k, *((_DWORD **)p_k + 1), (uint64_t)(*((_QWORD *)p_k + 1) - *(_QWORD *)p_k) >> 3);
      v74 = (void ***)sub_20BF4C2D8((uint64_t)&v118);
      v118 = &k;
      sub_20BFD6F90(v74);
      v75 = v93;
      if (v93 != v94)
      {
        while (*(_QWORD *)v75 != v100)
        {
          v75 += 2;
          if (v75 == v94)
          {
            v75 = v94;
            break;
          }
        }
      }
      if (v75 == v94)
      {
        *(_QWORD *)&k = "sdf/childrenUtils.cpp";
        *((_QWORD *)&k + 1) = "SetChildren";
        v105 = 254;
        v106 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Att"
               "ributeConnectionChildPolicy>::SetChildren(const SdfLayerHandle &, const SdfPath &, const std::vector<type"
               "name ChildPolicy::ValueType> &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
        v107 = 0;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&k, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        v69 = 1;
      }
      else
      {
        sub_20C0D8454((uint64_t)&v118, v75 + 2, v94, v75);
        v77 = v76;
        for (n = v94; n != v77; sub_20BFD6F64((uint64_t)&v95, n))
          n -= 2;
        v94 = v77;
        if (v93 == v77)
        {
          v80 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v80, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v97, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v96);
        }
        else
        {
          v79 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B8F7C(v79, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v97, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v96, &v93);
        }
        v81 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
        v84 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0B8E04((uint64_t *)&m, v82, v83);
        v85 = sub_20BFD5244(v84);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v85, &k);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v81, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&k, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v98);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&k + 1);
        sub_20BFD265C(&k);
        v69 = 0;
      }
      *(_QWORD *)&k = &v93;
      sub_20BFD6F90((void ***)&k);
      if ((v96 & 7) != 0)
      {
        v86 = (unsigned int *)(v96 & 0xFFFFFFFFFFFFFFF8);
        do
          v87 = __ldxr(v86);
        while (__stlxr(v87 - 2, v86));
      }
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v97 + 1);
    sub_20BFD265C(&v97);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v99);
    sub_20BFD265C(&v98);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v100 + 1);
    sub_20BFD265C(&v100);
    if (v69 != 10 && v69)
      goto LABEL_82;
  }
  if (v108 == v109)
  {
    v89 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v89, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v115);
  }
  else
  {
    v88 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    sub_20C0B8F7C(v88, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v115, &v108);
  }
LABEL_82:
  sub_20BFD7C28((uint64_t)&j, *((_QWORD **)&j + 1));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v103);
LABEL_83:
  *(_QWORD *)&k = &v108;
  sub_20BFD6F90((void ***)&k);
  sub_20BFD7C28((uint64_t)&v116, v117[0]);
  *(_QWORD *)&k = &i;
  sub_20BFD6F90((void ***)&k);
  *(_QWORD *)&k = &v113;
  sub_20BFD2B90((void ***)&k);
  if (((uint64_t)v115[0] & 7) != 0)
  {
    v90 = (unsigned int *)((unint64_t)v115[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v91 = __ldxr(v90);
    while (__stlxr(v91 - 2, v90));
  }
  return v63;
}

void sub_20C0D5D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  uint64_t v33;
  unsigned int *v34;
  unsigned int v35;

  sub_20BFD1A18(&a10);
  a23 = (void **)&a28;
  sub_20BFD6F90(&a23);
  sub_20BFD7C28(v31 - 144, *(_QWORD **)(v31 - 136));
  a23 = (void **)&a31;
  sub_20BFD6F90(&a23);
  a23 = (void **)(v31 - 192);
  sub_20BFD2B90(&a23);
  v33 = *(_QWORD *)(v31 - 160);
  if ((v33 & 7) != 0)
  {
    v34 = (unsigned int *)(v33 & 0xFFFFFFFFFFFFFFF8);
    do
      v35 = __ldxr(v34);
    while (__stlxr(v35 - 2, v34));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::InsertChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, int a4)
{
  uint64_t **v8;
  BOOL v9;
  const char *v10;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v14;
  void **v15;
  void **v16;
  _BOOL8 v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v21;
  _BOOL4 HasPrefix;
  uint64_t v23;
  uint64_t v24;
  void ***v25;
  void ***v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  const char *v31;
  _QWORD *v32;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v33;
  uint64_t v34;
  uint64_t v35;
  void ***v36;
  const char *Text;
  void ***v38;
  int *v39;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v42;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v45;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v48;
  unsigned int v49;
  unint64_t v50;
  int v51;
  int v52;
  void ***v53;
  char *v54;
  uint64_t v55;
  int v56;
  int v57;
  uint64_t v58;
  void **v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  char v63;
  unsigned int *v64[2];
  void ***v65;
  int *v66;
  uint64_t v67;
  void ***v68;
  uint64_t v69;
  uint64_t v70;

  v70 = *MEMORY[0x24BDAC8D0];
  sub_20C0D535C(v64);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    v59 = (void **)"sdf/childrenUtils.cpp";
    v60 = "InsertChild";
    v61 = 290;
    v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attribut"
          "eConnectionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Valu"
          "eType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
    v63 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid child");
LABEL_12:
    v17 = 0;
    goto LABEL_13;
  }
  v8 = (uint64_t **)sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v8, (uint64_t *)&v59);
  v9 = sub_20BEB560C((uint64_t)&v59, (uint64_t)a1);
  v10 = v60;
  if (v60)
  {
    v11 = (unsigned int *)(v60 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      (*(void (**)(const char *))(*(_QWORD *)v10 + 8))(v10);
  }
  if (!v9)
  {
    v59 = (void **)"sdf/childrenUtils.cpp";
    v60 = "InsertChild";
    v61 = 295;
    v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attribut"
          "eConnectionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::Valu"
          "eType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
    v63 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent to another layer");
    goto LABEL_12;
  }
  v14 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v14, &v53);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v53, &v59);
  v15 = v59;
  v16 = *(void ***)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
  sub_20BFD265C(&v59);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
  sub_20BFD265C(&v53);
  if (v15 == v16)
  {
    v17 = 1;
  }
  else
  {
    sub_20C0AF758(a3, &v58);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v58, &v56);
    v21 = sub_20BFD5244(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v21, &v59);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v59);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
    sub_20BFD265C(&v59);
    if (HasPrefix)
    {
      v59 = (void **)"sdf/childrenUtils.cpp";
      v60 = "InsertChild";
      v61 = 312;
      v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attrib"
            "uteConnectionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPolicy::"
            "ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
      v63 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot reparent child under itself");
      v17 = 0;
    }
    else
    {
      v23 = sub_20BFCF650(a1);
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v24 = sub_20C0A683C((uint64_t *)(v23 + 112));
      (*(void (**)(void ****__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v24 + 136))(&v65, v24, a2, v64);
      if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v65))
      {
        if ((v66 & 4) != 0)
          v25 = (void ***)(*(uint64_t (**)(void ****))(((unint64_t)v66 & 0xFFFFFFFFFFFFFFF8) + 168))(&v65);
        else
          v25 = v65;
      }
      else
      {
        v25 = &v59;
      }
      v53 = 0;
      v54 = 0;
      v55 = 0;
      sub_20BFD6D38(&v53, *v25, v25[1], v25[1] - *v25);
      v26 = (void ***)sub_20BF4C2D8((uint64_t)&v65);
      v65 = &v59;
      sub_20BFD6F90(v26);
      v29 = (unint64_t)(v54 - (char *)v53) >> 3;
      if (a4 != -1)
        LODWORD(v29) = a4;
      v30 = (int)v29;
      if ((int)v29 <= (unint64_t)((v54 - (char *)v53) >> 3))
      {
        v65 = v53;
        v66 = (int *)v54;
        while (v65 != (void ***)v66)
        {
          v32 = (_QWORD *)sub_20BFD71C4((uint64_t *)&v65, v27, v28);
          if (*v32 == v58)
          {
            v59 = (void **)"sdf/childrenUtils.cpp";
            v60 = "InsertChild";
            v61 = 334;
            v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_"
                  "AttributeConnectionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename C"
                  "hildPolicy::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
            v63 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert duplicate spec %s", Text);
            goto LABEL_35;
          }
          sub_20BFD7240(&v65);
        }
        v33 = sub_20BFD5244(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v33, &v59);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v59, &v51);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v59 + 1);
        sub_20BFD265C(&v59);
        sub_20C0D535C((unsigned int **)&v50);
        v34 = sub_20BFCF650(a1);
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v35 = sub_20C0A683C((uint64_t *)(v34 + 112));
        (*(void (**)(void ****__return_ptr, uint64_t, int *, unint64_t *))(*(_QWORD *)v35 + 136))(&v68, v35, &v51, &v50);
        if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v68))
        {
          if ((v69 & 4) != 0)
            v36 = (void ***)(*(uint64_t (**)(void ****))((v69 & 0xFFFFFFFFFFFFFFF8) + 168))(&v68);
          else
            v36 = v68;
        }
        else
        {
          v36 = &v59;
        }
        v65 = 0;
        v66 = 0;
        v67 = 0;
        sub_20BFD6D38(&v65, *v36, v36[1], v36[1] - *v36);
        v38 = (void ***)sub_20BF4C2D8((uint64_t)&v68);
        v68 = &v59;
        sub_20BFD6F90(v38);
        v39 = (int *)v65;
        if (v65 != (void ***)v66)
        {
          while (*(_QWORD *)v39 != v58)
          {
            v39 += 2;
            if (v39 == v66)
            {
              v39 = v66;
              break;
            }
          }
        }
        v17 = v39 != v66;
        if (v39 == v66)
        {
          v59 = (void **)"sdf/childrenUtils.cpp";
          v60 = "InsertChild";
          v61 = 352;
          v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_At"
                "tributeConnectionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename Child"
                "Policy::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
          v63 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"An object was not in its parent's list of children");
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v59);
          sub_20C0B8EFC((uint64_t)&v65, v39);
          if (v65 == (void ***)v66)
          {
            v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v41, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v50);
          }
          else
          {
            v40 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
            sub_20C0B8F7C(v40, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v50, (_DWORD **)&v65);
          }
          v42 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          v43 = sub_20BFD5244(a3);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v43, &v68);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v42, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v68, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
          sub_20BFD1A18(&v68);
          sub_20C0B98C8((uint64_t *)&v53, (int *)&v53[v30], (int *)&v58);
          v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          sub_20C0B8F7C(v44, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v64, (_DWORD **)&v53);
          v45 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v45, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v51, &v68);
          IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v68);
          if ((IsDormant & 1) == 0)
          {
            Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
            pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v68);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v68);
          sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v59);
        }
        v59 = (void **)&v65;
        sub_20BFD6F90(&v59);
        if ((v50 & 7) != 0)
        {
          v48 = (unsigned int *)(v50 & 0xFFFFFFFFFFFFFFF8);
          do
            v49 = __ldxr(v48);
          while (__stlxr(v49 - 2, v48));
        }
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v52);
        sub_20BFD265C(&v51);
      }
      else
      {
        v59 = (void **)"sdf/childrenUtils.cpp";
        v60 = "InsertChild";
        v61 = 326;
        v62 = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attr"
              "ibuteConnectionChildPolicy>::InsertChild(const SdfLayerHandle &, const SdfPath &, const typename ChildPoli"
              "cy::ValueType &, int) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]";
        v63 = 0;
        v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v59, 1, (pxrInternal__aapl__pxrReserved__ *)"Attempt to insert spec %s at an invalid index %d", v31, v30);
LABEL_35:
        v17 = 0;
      }
      v59 = (void **)&v53;
      sub_20BFD6F90(&v59);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v57);
    sub_20BFD265C(&v56);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v58 + 1);
    sub_20BFD265C(&v58);
  }
LABEL_13:
  if (((uint64_t)v64[0] & 7) != 0)
  {
    v18 = (unsigned int *)((unint64_t)v64[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v19 = __ldxr(v18);
    while (__stlxr(v19 - 2, v18));
  }
  return v17;
}

void sub_20C0D66EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, char a14, uint64_t a15, uint64_t a16, int a17, int a18, int a19, void **a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v25;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;

  a20 = (void **)(v25 - 112);
  sub_20BFD6F90(&a20);
  if ((a11 & 7) != 0)
  {
    v27 = (unsigned int *)(a11 & 0xFFFFFFFFFFFFFFF8);
    do
      v28 = __ldxr(v27);
    while (__stlxr(v28 - 2, v27));
  }
  sub_20BFD1A18(&a12);
  a20 = (void **)&a14;
  sub_20BFD6F90(&a20);
  sub_20BFD1A18(&a17);
  sub_20BFD1A18(&a19);
  if ((a25 & 7) != 0)
  {
    v29 = (unsigned int *)(a25 & 0xFFFFFFFFFFFFFFF8);
    do
      v30 = __ldxr(v29);
    while (__stlxr(v30 - 2, v29));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::RemoveChild(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  void ***v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  int *v13;
  int *v14;
  int *i;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v16;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v17;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v18;
  uint64_t IsDormant;
  unint64_t Instance;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v24;
  void **v25[3];
  uint64_t v26;
  int *v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  void ***v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  sub_20C0D535C((unsigned int **)&v29);
  v6 = sub_20BFCF650(a1);
  memset(v25, 0, sizeof(v25));
  v7 = sub_20C0A683C((uint64_t *)(v6 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v7 + 136))(&v32, v7, a2, &v29);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v32))
  {
    if ((v33 & 4) != 0)
      v8 = (void ***)(*(uint64_t (**)(void ****))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(&v32);
    else
      v8 = v32;
  }
  else
  {
    v8 = v25;
  }
  v26 = 0;
  v27 = 0;
  v28 = 0;
  sub_20BFD6D38(&v26, *v8, v8[1], v8[1] - *v8);
  sub_20BF4C2D8((uint64_t)&v32);
  v32 = v25;
  sub_20BFD6F90((void ***)&v32);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  sub_20BFD6E54(&v32, a3);
  sub_20BFD6EA4((_DWORD *)&v32 + 1, a3 + 1);
  v9 = (int *)v26;
  if ((int *)v26 == v27)
  {
LABEL_9:
    v11 = 0;
  }
  else
  {
    v10 = -v26;
    while (*(void ****)v9 != v32)
    {
      v9 += 2;
      v10 -= 8;
      if (v9 == v27)
        goto LABEL_9;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v32, &v30);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(v12, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v30);
    sub_20C0D8454((uint64_t)&v24, (int *)(8 - v10), v27, (int *)-v10);
    v14 = v13;
    for (i = v27; i != v14; sub_20BFD6F64((uint64_t)&v28, i))
      i -= 2;
    v27 = v14;
    if ((int *)v26 == v14)
    {
      v17 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v17, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29);
    }
    else
    {
      v16 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B8F7C(v16, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v29, (_DWORD **)&v26);
    }
    v18 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v18, a2, &v24);
    IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v24);
    if ((IsDormant & 1) == 0)
    {
      Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
      pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, &v24);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v24);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v31);
    sub_20BFD265C(&v30);
    v11 = 1;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v32 + 1);
  sub_20BFD265C(&v32);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v25);
  v25[0] = (void **)&v26;
  sub_20BFD6F90(v25);
  if ((v29 & 7) != 0)
  {
    v21 = (unsigned int *)(v29 & 0xFFFFFFFFFFFFFFF8);
    do
      v22 = __ldxr(v21);
    while (__stlxr(v22 - 2, v21));
  }
  return v11;
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__17Sdf_ChildrenUtilsINS_34Sdf_AttributeConnectionChildPolicyEE11RemoveChildERKNS_9TfWeakPtrINS_8SdfLayerEEERKNS_7SdfPathESA_(a1, a2, a3);
}

void sub_20C0D6B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::MoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char ***v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  int *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char ****v21;
  void ***v22;
  int *v23;
  uint64_t v24;
  _BOOL4 v26;
  int *v27;
  int *v28;
  int *v29;
  int *i;
  int *v31;
  int *v32;
  int *j;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v34;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v35;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v36;
  uint64_t IsDormant;
  unint64_t Instance;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v39;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  unsigned int v45;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char **v50;
  int *v51;
  uint64_t v52;
  char *v53;
  int *v54;
  uint64_t v55;
  char *v56;
  unsigned int *v57[2];
  char ***v58;
  uint64_t v59;
  uint64_t v60;
  void ***v61;
  uint64_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  sub_20C0D535C(v57);
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, a4, &v56);
  v10 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v10, &v53);
  v11 = v56;
  v12 = v53;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v53 + 1);
  sub_20BFD265C(&v53);
  if (a5 == -2 && v11 == v12)
    goto LABEL_52;
  v13 = sub_20BFCF650(a1);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v14 = sub_20C0A683C((uint64_t *)(v13 + 112));
  (*(void (**)(char ****__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unsigned int **))(*(_QWORD *)v14 + 136))(&v58, v14, a2, v57);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v58))
  {
    if ((v59 & 4) != 0)
      v15 = (char ***)(*(uint64_t (**)(char ****))((v59 & 0xFFFFFFFFFFFFFFF8) + 168))(&v58);
    else
      v15 = v58;
  }
  else
  {
    v15 = &v50;
  }
  v53 = 0;
  v54 = 0;
  v55 = 0;
  sub_20BFD6D38(&v53, *v15, v15[1], v15[1] - *v15);
  sub_20BF4C2D8((uint64_t)&v58);
  v58 = &v50;
  sub_20BFD6F90((void ***)&v58);
  sub_20C0AF758(a3, &v49);
  v16 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v16, &v50);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v50 + 1);
  sub_20BFD265C(&v50);
  if (a5 == -2 && v48 == *(_QWORD *)a2)
  {
    if (v53 == (char *)v54)
    {
      v17 = (int *)v53;
    }
    else
    {
      v17 = (int *)v53;
      while (*(_QWORD *)v17 != v49)
      {
        v17 += 2;
        if (v17 == v54)
        {
          v17 = v54;
          break;
        }
      }
    }
    v18 = (unint64_t)((char *)v17 - v53) >> 3;
  }
  else if (((char *)v54 - v53) >> 3 >= (unint64_t)a5)
  {
    LODWORD(v18) = a5;
  }
  else
  {
    LODWORD(v18) = ((char *)v54 - v53) >> 3;
  }
  sub_20C0D535C((unsigned int **)&v47);
  v19 = sub_20BFCF650(a1);
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v20 = sub_20C0A683C((uint64_t *)(v19 + 112));
  (*(void (**)(void ****__return_ptr, uint64_t, uint64_t *, unint64_t *))(*(_QWORD *)v20 + 136))(&v61, v20, &v48, &v47);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v61))
  {
    if ((v62 & 4) != 0)
      v21 = (char ****)(*(uint64_t (**)(void ****))((v62 & 0xFFFFFFFFFFFFFFF8) + 168))(&v61);
    else
      v21 = (char ****)v61;
  }
  else
  {
    v21 = &v58;
  }
  v50 = 0;
  v51 = 0;
  v52 = 0;
  sub_20BFD6D38(&v50, *v21, v21[1], v21[1] - *v21);
  v22 = (void ***)sub_20BF4C2D8((uint64_t)&v61);
  v61 = (void ***)&v58;
  sub_20BFD6F90(v22);
  v23 = (int *)v50;
  if (v50 != (char **)v51)
  {
    while (*(_QWORD *)v23 != v49)
    {
      v23 += 2;
      if (v23 == v51)
      {
        v23 = v51;
        break;
      }
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v58);
  if (v48 == *(_QWORD *)a2)
  {
    v24 = (char *)v23 - (char *)v50;
    if (v49 == *(_QWORD *)a4
      && ((_DWORD)v18 == ((unint64_t)v24 >> 3)
       || ((unint64_t)v24 >> 3) + 1 == (_DWORD)v18))
    {
      goto LABEL_48;
    }
    v26 = (int)v18 > v24 >> 3;
    v27 = (int *)v53;
    if (v53 != (char *)v54)
    {
      while (*(_QWORD *)v27 != v49)
      {
        v27 += 2;
        if (v27 == v54)
        {
          v27 = v54;
          break;
        }
      }
    }
    sub_20C0D8454((uint64_t)&v61, v27 + 2, v54, v27);
    v29 = v28;
    LODWORD(v18) = v18 - v26;
    for (i = v54; i != v29; sub_20BFD6F64((uint64_t)&v55, i))
      i -= 2;
    v54 = v29;
  }
  else
  {
    sub_20C0D8454((uint64_t)&v61, v23 + 2, v51, v23);
    v32 = v31;
    for (j = v51; j != v32; sub_20BFD6F64((uint64_t)&v52, j))
      j -= 2;
    v51 = v32;
    if (v50 == (char **)v32)
    {
      v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(v35, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v47);
      v36 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v36, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, &v61);
      IsDormant = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v61);
      if ((IsDormant & 1) == 0)
      {
        Instance = pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance((pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)IsDormant);
        pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::AddSpecIfTracking(Instance, (unsigned int **)&v61);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v61);
    }
    else
    {
      v34 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      sub_20C0B8F7C(v34, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v48, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v47, (_DWORD **)&v50);
    }
  }
  v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  v40 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v40, &v61);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(v39, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v61, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v56);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v61 + 1);
  sub_20BFD265C(&v61);
  sub_20C0B98C8((uint64_t *)&v53, (int *)&v53[8 * (int)v18], (int *)a4);
  v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  sub_20C0B8F7C(v41, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)v57, (_DWORD **)&v53);
LABEL_48:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&v58);
  v58 = &v50;
  sub_20BFD6F90((void ***)&v58);
  if ((v47 & 7) != 0)
  {
    v42 = (unsigned int *)(v47 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v48 + 1);
  sub_20BFD265C(&v48);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v49 + 1);
  sub_20BFD265C(&v49);
  v50 = &v53;
  sub_20BFD6F90((void ***)&v50);
LABEL_52:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
  sub_20BFD265C(&v56);
  if (((uint64_t)v57[0] & 7) != 0)
  {
    v44 = (unsigned int *)((unint64_t)v57[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v45 = __ldxr(v44);
    while (__stlxr(v45 - 2, v44));
  }
  return 1;
}

void sub_20C0D71B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, int a11, int a12, void **a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, int a19, uint64_t a20,uint64_t a21,void ***a22)
{
  uint64_t v22;
  unsigned int *v24;
  unsigned int v25;
  unsigned int *v26;
  unsigned int v27;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v22 - 88));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a22);
  a22 = &a13;
  sub_20BFD6F90((void ***)&a22);
  if ((a9 & 7) != 0)
  {
    v24 = (unsigned int *)(a9 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  sub_20BFD1A18(&a10);
  sub_20BFD1A18(&a12);
  a13 = (void **)&a16;
  sub_20BFD6F90(&a13);
  sub_20BFD1A18(&a19);
  if ((a20 & 7) != 0)
  {
    v26 = (unsigned int *)(a20 & 0xFFFFFFFFFFFFFFF8);
    do
      v27 = __ldxr(v26);
    while (__stlxr(v27 - 2, v26));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CanMoveChildForBatchNamespaceEdit(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5, uint64_t a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  const char *v13;
  _BOOL8 v14;
  unsigned int *v15;
  unsigned int v16;
  uint64_t **v18;
  BOOL v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  _BOOL4 HasPrefix;
  uint64_t v30;
  unint64_t v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  uint64_t v33;
  uint64_t *v34;
  unsigned int *v35;
  unsigned int v36;
  void **v37[3];
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  unint64_t v48;
  void ***v49;

  sub_20C0D535C((unsigned int **)&v48);
  v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v12) & 1) == 0)
  {
    if (a6)
    {
      v13 = "Layer is not editable";
      goto LABEL_7;
    }
LABEL_8:
    v14 = 0;
    goto LABEL_9;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a3))
  {
    if (a6)
    {
      v13 = "Object does not exist";
LABEL_7:
      MEMORY[0x212B929D0](a6, v13);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  v18 = (uint64_t **)sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v18, &v44);
  v19 = sub_20BEB560C((uint64_t)&v44, (uint64_t)a1);
  v20 = v45;
  if (v45)
  {
    v21 = (unsigned int *)(v45 + 8);
    do
    {
      v22 = __ldxr(v21);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v21));
    if (!v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
  if (!v19)
  {
    if (!a6)
      goto LABEL_8;
    v13 = "Cannot reparent to another layer";
    goto LABEL_7;
  }
  pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, a4, &v46);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v46))
  {
    if (!a6)
    {
LABEL_27:
      v14 = 0;
      goto LABEL_28;
    }
    v27 = "Invalid name";
LABEL_26:
    MEMORY[0x212B929D0](a6, v27);
    goto LABEL_27;
  }
  v24 = sub_20BFD5244(a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v24, &v41);
  pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, &v44);
  v25 = v44;
  v26 = *(_QWORD *)a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
  sub_20BFD265C(&v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v41 + 1);
  sub_20BFD265C(&v41);
  if (v25 != v26)
  {
    v28 = sub_20BFD5244(a3);
    pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v28, &v44);
    HasPrefix = pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix((pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v44);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
    sub_20BFD265C(&v44);
    if (!HasPrefix)
    {
      v30 = sub_20BFCF650(a1);
      v41 = 0;
      v42 = 0;
      v43 = 0;
      sub_20C0B8C80(v30, (uint64_t)a2, (uint64_t)&v48, (_DWORD **)&v41, &v44);
      v37[0] = (void **)&v41;
      sub_20BFD6F90(v37);
      v31 = (unint64_t)(v45 - v44) >> 3;
      if (a5 != -1)
        LODWORD(v31) = a5;
      if ((_DWORD)v31 == -2 || (int)v31 <= (unint64_t)((v45 - v44) >> 3))
      {
        sub_20C0AF758(a3, &v40);
        v32 = sub_20BFD5244(a3);
        pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v32, &v41);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v41, &v39);
        sub_20BFD1A18(&v41);
        sub_20C0D535C((unsigned int **)&v38);
        v33 = sub_20BFCF650(a1);
        memset(v37, 0, sizeof(v37));
        sub_20C0B8C80(v33, (uint64_t)&v39, (uint64_t)&v38, (_DWORD **)v37, &v41);
        v49 = v37;
        sub_20BFD6F90((void ***)&v49);
        v34 = v41;
        if (v41 != v42)
        {
          while (*v34 != v40)
          {
            if (++v34 == v42)
            {
              v34 = v42;
              break;
            }
          }
        }
        v14 = v34 != v42;
        if (a6 && v34 == v42)
          MEMORY[0x212B929D0](a6, "Coding error: Object is not in its parent's children");
        v37[0] = (void **)&v41;
        sub_20BFD6F90(v37);
        if ((v38 & 7) != 0)
        {
          v35 = (unsigned int *)(v38 & 0xFFFFFFFFFFFFFFF8);
          do
            v36 = __ldxr(v35);
          while (__stlxr(v36 - 2, v35));
        }
        sub_20BFD1A18(&v39);
        sub_20BFD1A18(&v40);
      }
      else
      {
        if (a6)
          MEMORY[0x212B929D0](a6, "Invalid index");
        v14 = 0;
      }
      v41 = &v44;
      sub_20BFD6F90((void ***)&v41);
      goto LABEL_28;
    }
    if (!a6)
      goto LABEL_27;
    v27 = "Cannot reparent object under itself";
    goto LABEL_26;
  }
  v14 = 1;
LABEL_28:
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
  sub_20BFD265C(&v46);
LABEL_9:
  if ((v48 & 7) != 0)
  {
    v15 = (unsigned int *)(v48 & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v14;
}

void sub_20C0D76C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;

  a16 = (void **)&a19;
  sub_20BFD6F90(&a16);
  sub_20BFD1A18((_DWORD *)(v19 - 88));
  v21 = *(_QWORD *)(v19 - 80);
  if ((v21 & 7) != 0)
  {
    v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
    do
      v23 = __ldxr(v22);
    while (__stlxr(v23 - 2, v22));
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CanRemoveChildForBatchNamespaceEdit(uint64_t *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  uint64_t v9;
  uint64_t v10;
  void ***v11;
  _BOOL8 v12;
  void ***v13;
  _QWORD *v14;
  unsigned int *v15;
  unsigned int v16;
  void **v18[3];
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22[2];
  void ***v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  sub_20C0D535C(v22);
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(v8) & 1) != 0)
  {
    v9 = sub_20BFCF650(a1);
    memset(v18, 0, sizeof(v18));
    v10 = sub_20C0A683C((uint64_t *)(v9 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, uint64_t, unsigned int **))(*(_QWORD *)v10 + 136))(&v23, v10, a2, v22);
    if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v23))
    {
      if ((v24 & 4) != 0)
        v11 = (void ***)(*(uint64_t (**)(void ****))((v24 & 0xFFFFFFFFFFFFFFF8) + 168))(&v23);
      else
        v11 = v23;
    }
    else
    {
      v11 = v18;
    }
    v19 = 0;
    v20 = 0;
    v21 = 0;
    sub_20BFD6D38(&v19, *v11, v11[1], v11[1] - *v11);
    v13 = (void ***)sub_20BF4C2D8((uint64_t)&v23);
    v23 = v18;
    sub_20BFD6F90(v13);
    v14 = v19;
    if (v19 != v20)
    {
      while (*v14 != *a3)
      {
        if (++v14 == v20)
        {
          v14 = v20;
          break;
        }
      }
    }
    v12 = v14 != v20;
    if (a4 && v14 == v20)
      MEMORY[0x212B929D0](a4, "Object does not exist");
    v18[0] = (void **)&v19;
    sub_20BFD6F90(v18);
  }
  else
  {
    if (a4)
      MEMORY[0x212B929D0](a4, "Layer is not editable");
    v12 = 0;
  }
  if (((uint64_t)v22[0] & 7) != 0)
  {
    v15 = (unsigned int *)((unint64_t)v22[0] & 0xFFFFFFFFFFFFFFF8);
    do
      v16 = __ldxr(v15);
    while (__stlxr(v16 - 2, v15));
  }
  return v12;
}

void sub_20C0D79D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  unsigned int *v17;
  unsigned int v18;

  a10 = (void **)&a13;
  sub_20BFD6F90(&a10);
  if ((a16 & 7) != 0)
  {
    v17 = (unsigned int *)(a16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stlxr(v18 - 2, v17));
  }
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::CanRename@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  uint64_t v4;
  const char *v5;
  char v6;

  *(_QWORD *)&v3 = "sdf/childrenUtils.cpp";
  *((_QWORD *)&v3 + 1) = "CanRename";
  v4 = 762;
  v5 = "static SdfAllowed pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Mappe"
       "rChildPolicy>::CanRename(const SdfSpec &, const SdfPath &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_M"
       "apperChildPolicy]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename mappers");
  sub_20BDDC0E4(&v3, "Cannot rename mappers");
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::Rename()
{
  _QWORD v1[4];
  char v2;

  v1[0] = "sdf/childrenUtils.cpp";
  v1[1] = "Rename";
  v1[2] = 771;
  v1[3] = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperCh"
          "ildPolicy>::Rename(const SdfSpec &, const SdfPath &) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]";
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename mappers");
  return 0;
}

double pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CanRename@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  uint64_t v4;
  const char *v5;
  char v6;

  *(_QWORD *)&v3 = "sdf/childrenUtils.cpp";
  *((_QWORD *)&v3 + 1) = "CanRename";
  v4 = 780;
  v5 = "static SdfAllowed pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attri"
       "buteConnectionChildPolicy>::CanRename(const SdfSpec &, const SdfPath &) [ChildPolicy = pxrInternal__aapl__pxrRese"
       "rved__::Sdf_AttributeConnectionChildPolicy]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename attribute connections");
  sub_20BDDC0E4(&v3, "Cannot rename attribute connections");
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::Rename()
{
  _QWORD v1[4];
  char v2;

  v1[0] = "sdf/childrenUtils.cpp";
  v1[1] = "Rename";
  v1[2] = 789;
  v1[3] = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Attribut"
          "eConnectionChildPolicy>::Rename(const SdfSpec &, const SdfPath &) [ChildPolicy = pxrInternal__aapl__pxrReserve"
          "d__::Sdf_AttributeConnectionChildPolicy]";
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename attribute connections");
  return 0;
}

double pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CanRename@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  uint64_t v4;
  const char *v5;
  char v6;

  *(_QWORD *)&v3 = "sdf/childrenUtils.cpp";
  *((_QWORD *)&v3 + 1) = "CanRename";
  v4 = 798;
  v5 = "static SdfAllowed pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relat"
       "ionshipTargetChildPolicy>::CanRename(const SdfSpec &, const SdfPath &) [ChildPolicy = pxrInternal__aapl__pxrReser"
       "ved__::Sdf_RelationshipTargetChildPolicy]";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v3, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename relationship targets");
  sub_20BDDC0E4(&v3, "Cannot rename relationship targets");
  result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 24) = 1;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::Rename()
{
  _QWORD v1[4];
  char v2;

  v1[0] = "sdf/childrenUtils.cpp";
  v1[1] = "Rename";
  v1[2] = 807;
  v1[3] = "static BOOL pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_Relation"
          "shipTargetChildPolicy>::Rename(const SdfSpec &, const SdfPath &) [ChildPolicy = pxrInternal__aapl__pxrReserved"
          "__::Sdf_RelationshipTargetChildPolicy]";
  v2 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v1, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot rename relationship targets");
  return 0;
}

_QWORD *sub_20C0D7D00(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  sub_20BDDC1C8(a1, (uint64_t)"[ ", 2);
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v5)
  {
    do
    {
      v6 = pxrInternal__aapl__pxrReserved__::operator<<(a1, v4);
      sub_20BDDC1C8(v6, (uint64_t)" ", 1);
      ++v4;
    }
    while (v4 != v5);
  }
  sub_20BDDC1C8(a1, (uint64_t)"]", 1);
  return a1;
}

uint64_t sub_20C0D7D88(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>>>::operator*() [T = const std::vector<pxrIntern"
            "al__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0D7DFC()
{
  JUMPOUT(0x20C0D7DACLL);
}

_QWORD *sub_20C0D7E04(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>>>::operator++() [T = const std::v"
            "ector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfAttributeSpec>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

char *sub_20C0D7E80(unsigned int ***a1, unsigned int **a2)
{
  unsigned int **v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  unsigned int **v11;
  unsigned int *v12;
  unsigned int v13;
  char *v14;
  char *v15;
  unint64_t v16;
  unsigned int **v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  int64x2_t v21;
  char *v22;
  char *v24;
  int64x2_t v25;
  char *v26;
  _QWORD *v27;

  v3 = *a1;
  v4 = a1[1] - *a1;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = (char *)a1[2] - (char *)v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v27 = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDDF6A8(v7, v9);
  else
    v10 = 0;
  v11 = (unsigned int **)&v10[8 * v4];
  v24 = v10;
  v25.i64[0] = (uint64_t)v11;
  v25.i64[1] = (uint64_t)v11;
  v26 = &v10[8 * v9];
  v12 = *a2;
  *v11 = *a2;
  if (v12)
  {
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
    v14 = (char *)v25.i64[1];
    v11 = (unsigned int **)v25.i64[0];
  }
  else
  {
    v14 = &v10[8 * v4];
  }
  v15 = v14 + 8;
  v25.i64[1] = (uint64_t)(v14 + 8);
  v17 = *a1;
  v16 = (unint64_t)a1[1];
  if ((unsigned int **)v16 == *a1)
  {
    v21 = vdupq_n_s64(v16);
  }
  else
  {
    do
    {
      v19 = *(unsigned int **)(v16 - 8);
      v16 -= 8;
      v18 = v19;
      *--v11 = v19;
      if (v19)
      {
        do
          v20 = __ldaxr(v18);
        while (__stlxr(v20 + 1, v18));
      }
    }
    while ((unsigned int **)v16 != v17);
    v21 = *(int64x2_t *)a1;
    v15 = (char *)v25.i64[1];
  }
  *a1 = v11;
  a1[1] = (unsigned int **)v15;
  v25 = v21;
  v22 = (char *)a1[2];
  a1[2] = (unsigned int **)v26;
  v26 = v22;
  v24 = (char *)v21.i64[0];
  sub_20BFE59F0((uint64_t)&v24);
  return v15;
}

uint64_t *sub_20C0D7FB4(uint64_t **a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_20BF1E63C((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_20BFD25E8((uint64_t)a1, a3, (uint64_t)&v7);
    sub_20BDDE1B4(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *sub_20C0D8030(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = sub_20BF1E6D8(v5, v3 + 4, a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_20BF1E6D8(v5, a2, v6 + 4))
    return v2;
  return v6;
}

uint64_t sub_20C0D80BC(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v4;
  uint64_t *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C0A7D18((uint64_t **)a1, v4, v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20C0D8124(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF2B200(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0D813C(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  unsigned int *v3;
  unsigned int v4;

  if (result != a2)
  {
    do
    {
      if (result != a3)
      {
        if ((*a3 & 7) != 0)
        {
          v3 = (unsigned int *)(*a3 & 0xFFFFFFFFFFFFFFF8);
          do
            v4 = __ldxr(v3);
          while (__stlxr(v4 - 2, v3));
        }
        *a3 = *result;
        *result = 0;
      }
      ++result;
      ++a3;
    }
    while (result != a2);
    return a2;
  }
  return result;
}

_QWORD *sub_20C0D8194(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v6 = *(_QWORD **)(a1 + 8);
  v7 = (_QWORD *)((char *)v6 + (_QWORD)a2 - a4);
  v8 = v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD **)(a1 + 8);
    do
    {
      *v8++ = *v9;
      *v9++ = 0;
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_20C0D8278(a2, v7, v6);
}

uint64_t sub_20C0D81DC(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;

  result = a2[1];
  v5 = (_QWORD *)*a1;
  v6 = result;
  if ((_QWORD *)*a1 != a3)
  {
    v7 = a3;
    v6 = a2[1];
    do
    {
      v8 = *--v7;
      *(_QWORD *)(v6 - 8) = v8;
      v6 -= 8;
      *v7 = 0;
    }
    while (v7 != v5);
  }
  a2[1] = v6;
  v9 = (_QWORD *)a1[1];
  v10 = (_QWORD *)a2[2];
  if (v9 != a3)
  {
    do
    {
      *v10++ = *a3;
      *a3++ = 0;
    }
    while (a3 != v9);
    v6 = a2[1];
  }
  a2[2] = v10;
  v11 = (_QWORD *)*a1;
  *a1 = v6;
  a2[1] = v11;
  v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

_QWORD *sub_20C0D8278(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;

  if (a2 != a1)
  {
    v3 = a2;
    do
    {
      v4 = v3;
      v5 = a3;
      --v3;
      --a3;
      if (v4 != v5)
      {
        if ((*a3 & 7) != 0)
        {
          v6 = (unsigned int *)(*a3 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stlxr(v7 - 2, v6));
        }
        *a3 = *v3;
        *v3 = 0;
      }
    }
    while (v3 != a1);
  }
  return a2;
}

uint64_t sub_20C0D82DC(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfSpec>>>::operator*() [T = const std::vector<pxrInternal__aapl_"
            "_pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfSpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0D8350()
{
  JUMPOUT(0x20C0D8300);
}

_QWORD *sub_20C0D8358(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfSpec>>>::operator++() [T = const std::vector<pxr"
            "Internal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfSpec>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_20C0D83D4(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  _QWORD *v4;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20BFD72BC((uint64_t **)a1, v4, v6, v6);
      v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v6 + 8);
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_20C0D843C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFD7C28(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

int *sub_20C0D8454(uint64_t a1, int *a2, int *a3, int *a4)
{
  int *v5;
  int *v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    sub_20BFD3EBC(a4, v5);
    sub_20BFD3F10(a4 + 1, v5 + 1);
    a4 += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

_QWORD *sub_20C0D84C0(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPath **a2)
{
  pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  _QWORD *v6;

  sub_20BDDC1C8(a1, (uint64_t)"[ ", 2);
  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v6 = pxrInternal__aapl__pxrReserved__::operator<<(a1, v4);
      sub_20BDDC1C8(v6, (uint64_t)" ", 1);
      v4 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 8);
    }
    while (v4 != v5);
  }
  sub_20BDDC1C8(a1, (uint64_t)"]", 1);
  return a1;
}

_DWORD *sub_20C0D8548(_QWORD *a1, _DWORD *a2)
{
  int *v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _DWORD *result;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v4 = (int *)a1[2];
  if (v4 == (int *)a1[3])
  {
    v5 = (int *)a1[1];
    v6 = (uint64_t)v5 - *a1;
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (int *)*a1)
        v13 = 1;
      else
        v13 = ((uint64_t)v4 - *a1) >> 2;
      v14 = a1[4];
      v22 = a1[4];
      *(_QWORD *)&v20 = sub_20BDDF6A8(v14, v13);
      *((_QWORD *)&v20 + 1) = v20 + 8 * (v13 >> 2);
      *(_QWORD *)&v21 = *((_QWORD *)&v20 + 1);
      *((_QWORD *)&v21 + 1) = v20 + 8 * v15;
      sub_20C0D8660(&v20, (_DWORD *)a1[1], (uint64_t)(a1[2] - a1[1]) >> 3);
      v16 = v21;
      v17 = *(_OWORD *)a1;
      v18 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v20;
      *((_OWORD *)a1 + 1) = v16;
      v20 = v17;
      v21 = v18;
      sub_20BFD7B28((void **)&v20);
      v4 = (int *)a1[2];
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = v10 >> 1;
      sub_20C0D8454((uint64_t)&v20, v5, v4, &v5[-2 * (v10 >> 1)]);
      v4 = v12;
      a1[1] -= 8 * v11;
      a1[2] = v12;
    }
  }
  sub_20BFD6E54(v4, a2);
  result = sub_20BFD6EA4(v4 + 1, a2 + 1);
  a1[2] += 8;
  return result;
}

void sub_20C0D864C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20BFD7B28(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0D8660(_DWORD *result, _DWORD *a2, uint64_t a3)
{
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v6;
  _DWORD *v7;

  v3 = result;
  v4 = (_DWORD *)*((_QWORD *)result + 2);
  if (a3)
  {
    v6 = 8 * a3;
    v7 = &v4[2 * a3];
    do
    {
      sub_20BFD38A4(v4, a2);
      result = sub_20BFD38DC(v4 + 1, a2 + 1);
      v4 += 2;
      a2 += 2;
      v6 -= 8;
    }
    while (v6);
    v4 = v7;
  }
  *((_QWORD *)v3 + 2) = v4;
  return result;
}

uint64_t sub_20C0D86D0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>>::operator*() [T = const std::vector<pxrInternal__a"
            "apl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0D8744()
{
  JUMPOUT(0x20C0D86F4);
}

_QWORD *sub_20C0D874C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>>::operator++() [T = const std::vector"
            "<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPrimSpec>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_20C0D87C8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>>::operator*() [T = const std::vector<pxrInterna"
            "l__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0D883C()
{
  JUMPOUT(0x20C0D87ECLL);
}

_QWORD *sub_20C0D8844(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>>::operator++() [T = const std::ve"
            "ctor<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfPropertySpec>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_20C0D88C0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>>::operator*() [T = const std::vector<pxrInt"
            "ernal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0D8934()
{
  JUMPOUT(0x20C0D88E4);
}

_QWORD *sub_20C0D893C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>>::operator++() [T = const std"
            "::vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfRelationshipSpec>>"
            ", Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_20C0D89B8(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>>::operator*() [T = const std::vector<pxrInternal"
            "__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0D8A2C()
{
  JUMPOUT(0x20C0D89DCLL);
}

_QWORD *sub_20C0D8A34(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>>::operator++() [T = const std::vec"
            "tor<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSpec>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

uint64_t sub_20C0D8AB0(uint64_t *a1, uint64_t a2, char *a3)
{
  uint64_t result;
  _QWORD v5[4];
  char v6;
  int v7;

  result = *a1;
  if (result == a1[1])
  {
    v5[0] = "tf/iterator.h";
    v5[1] = "operator*";
    v5[2] = 271;
    v5[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__pxrReserved__::S"
            "dfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>>::operator*() [T = const std::vector<pxrInter"
            "nal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>, Reverse = false]";
    v6 = 0;
    v7 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v5, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0D8B24()
{
  JUMPOUT(0x20C0D8AD4);
}

_QWORD *sub_20C0D8B2C(_QWORD *a1)
{
  _QWORD v3[4];
  char v4;

  if (*a1 == a1[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::vector<pxrInternal__aapl__px"
            "rReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>>::operator++() [T = const std::"
            "vector<pxrInternal__aapl__pxrReserved__::SdfHandle<pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec>>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *a1 += 8;
  }
  return a1;
}

pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler::SdfCleanupEnabler(pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *this)
{
  sub_20C0D8C60((uint64_t)this);
  return this;
}

{
  sub_20C0D8C60((uint64_t)this);
  return this;
}

void pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler::~SdfCleanupEnabler(pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *v2;
  pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *Instance;

  v2 = (pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)sub_20C0D8D38();
  if (*((_QWORD *)v2 + 1) - *(_QWORD *)v2 == 8)
  {
    Instance = (pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker *)pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::GetInstance(v2);
    pxrInternal__aapl__pxrReserved__::Sdf_CleanupTracker::CleanupSpecs(Instance);
  }
  sub_20C0D8DC4((uint64_t)this);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler::IsCleanupEnabled(pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler *this)
{
  _QWORD *v1;

  v1 = (_QWORD *)sub_20C0D8D38();
  return *v1 != v1[1];
}

void sub_20C0D8C60(uint64_t a1)
{
  void **v2;
  _QWORD *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v2 = (void **)sub_20C0D8D38();
  v3 = v2[1];
  v4 = (unint64_t)v2[2];
  if ((unint64_t)v3 >= v4)
  {
    v6 = ((char *)v3 - (_BYTE *)*v2) >> 3;
    if ((unint64_t)(v6 + 1) >> 61)
      sub_20BDDF694();
    v7 = v4 - (_QWORD)*v2;
    v8 = v7 >> 2;
    if (v7 >> 2 <= (unint64_t)(v6 + 1))
      v8 = v6 + 1;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    if (v9)
      v10 = (char *)sub_20BDDF6A8((uint64_t)(v2 + 2), v9);
    else
      v10 = 0;
    v11 = &v10[8 * v6];
    v12 = &v10[8 * v9];
    *(_QWORD *)v11 = a1;
    v5 = v11 + 8;
    v14 = (char *)*v2;
    v13 = (char *)v2[1];
    if (v13 != *v2)
    {
      do
      {
        v15 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        *((_QWORD *)v11 - 1) = v15;
        v11 -= 8;
      }
      while (v13 != v14);
      v13 = (char *)*v2;
    }
    *v2 = v11;
    v2[1] = v5;
    v2[2] = v12;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v3 = a1;
    v5 = v3 + 1;
  }
  v2[1] = v5;
}

uint64_t sub_20C0D8D38()
{
  uint64_t result;
  _QWORD *v2;
  _QWORD *v3;
  void *v5;

  if (!atomic_load((unint64_t *)&pxrInternal__aapl__pxrReserved__::Tf_ExportedStackedStorage<pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler,false>::value))
  {
    v2 = operator new(0x20uLL);
    v3 = v2;
    v2[1] = 0;
    v2[2] = 0;
    *v2 = 0;
    *((_BYTE *)v2 + 24) = 0;
    while (!__ldaxr((unint64_t *)&pxrInternal__aapl__pxrReserved__::Tf_ExportedStackedStorage<pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler,false>::value))
    {
      if (!__stlxr((unint64_t)v2, (unint64_t *)&pxrInternal__aapl__pxrReserved__::Tf_ExportedStackedStorage<pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler,false>::value))goto LABEL_2;
    }
    __clrex();
    v5 = (void *)*v2;
    if (*v3)
    {
      v3[1] = v5;
      operator delete(v5);
    }
    operator delete(v3);
  }
LABEL_2:
  result = pxrInternal__aapl__pxrReserved__::Tf_ExportedStackedStorage<pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler,false>::value;
  if (!*(_BYTE *)(pxrInternal__aapl__pxrReserved__::Tf_ExportedStackedStorage<pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler,false>::value
                 + 24))
    *(_BYTE *)(pxrInternal__aapl__pxrReserved__::Tf_ExportedStackedStorage<pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler,false>::value
             + 24) = 1;
  return result;
}

uint64_t sub_20C0D8DC4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  char *v6;
  _QWORD *v7;
  _QWORD v8[2];
  char v9;
  _QWORD v10[4];
  char v11;
  int v12;

  v2 = (_QWORD *)sub_20C0D8D38();
  v3 = v2[1];
  if (*v2 == v3)
    v4 = 0;
  else
    v4 = *(_QWORD *)(v3 - 8);
  if (v4 != a1)
  {
    v10[0] = "tf/stacked.h";
    v10[1] = "_Pop";
    v10[2] = 206;
    v10[3] = "static void pxrInternal__aapl__pxrReserved__::TfStacked<pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler"
             ", false, pxrInternal__aapl__pxrReserved__::Tf_ExportedStackedStorage<SdfCleanupEnabler, false>>::_Pop(const"
             " Derived *) [Derived = pxrInternal__aapl__pxrReserved__::SdfCleanupEnabler, PerThread = false, Holder = pxr"
             "Internal__aapl__pxrReserved__::Tf_ExportedStackedStorage<SdfCleanupEnabler, false>]";
    v11 = 0;
    v12 = 4;
    pxrInternal__aapl__pxrReserved__::ArchGetDemangled((pxrInternal__aapl__pxrReserved__ *)(0x800000020CAB4549 & 0x7FFFFFFFFFFFFFFFLL), (uint64_t)v8);
    if (v9 >= 0)
      v7 = v8;
    else
      v7 = (_QWORD *)v8[0];
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v10, (pxrInternal__aapl__pxrReserved__ *)"Destroyed %s out of stack order.", v6, v7);
  }
  result = sub_20C0D8D38();
  *(_QWORD *)(result + 8) -= 8;
  return result;
}

void sub_20C0D8E90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  JUMPOUT(0x20C0D8E0CLL);
}

void sub_20C0D8EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfCopySpec(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, int *a5, const char *a6)
{
  uint64_t (*v12)(uint64_t *);
  char v13;
  uint64_t (*v14)(uint64_t *);
  char v15;
  int IsPrimVariantSelectionPath;
  int IsPropertyPath;
  int IsTargetPath;
  int IsMapperPath;
  int IsMapperArgPath;
  int IsExpressionPath;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  int SpecType;
  int v27;
  int v28;
  _BOOL4 v29;
  _QWORD *v30;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  unsigned int *v32;
  unsigned int v33;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t i;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  void ***v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v55;
  _QWORD *v56;
  const char *Text;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v58;
  uint64_t Identifier;
  const char *v60;
  uint64_t *v61[3];
  int v62;
  const pxrInternal__aapl__pxrReserved__::TfToken *v63[3];
  _QWORD v64[3];
  const pxrInternal__aapl__pxrReserved__::TfToken *v65[3];
  uint64_t *v66[3];
  char v67[8];
  int v68;
  _QWORD *v69;
  _QWORD *v70;
  int v71;
  int v72;
  int v73;
  _QWORD v74[4];
  unint64_t v75;
  uint64_t v76;
  _BYTE v77[16];
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  const char *v81;
  int *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v12 = sub_20BFD2F78(a1);
  if (!(v13 & 1 | (unint64_t)v12) || (v14 = sub_20BFD2F78(a3), !(v15 & 1 | (unint64_t)v14)))
  {
    v78 = (unint64_t)"sdf/copyUtils.cpp";
    v79 = (unint64_t)"SdfCopySpec";
    v80 = 629;
    v81 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHand"
          "le &, const SdfPath &, const SdfShouldCopyValueFn &, const SdfShouldCopyChildrenFn &)";
    LOBYTE(v82) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v78, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid layer handle");
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2)
    || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4))
  {
    v78 = (unint64_t)"sdf/copyUtils.cpp";
    v79 = (unint64_t)"SdfCopySpec";
    v80 = 634;
    v81 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHand"
          "le &, const SdfPath &, const SdfShouldCopyValueFn &, const SdfShouldCopyChildrenFn &)";
    LOBYTE(v82) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v78, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid empty path");
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a4)
      && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a4) & 1) == 0)
    {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  IsPrimVariantSelectionPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a2);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a4))
  {
    if ((IsPrimVariantSelectionPath & 1) == 0)
      goto LABEL_20;
  }
  else if (IsPrimVariantSelectionPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a4))
  {
LABEL_20:
    v78 = (unint64_t)"sdf/copyUtils.cpp";
    v79 = (unint64_t)"SdfCopySpec";
    v80 = 648;
    v81 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHand"
          "le &, const SdfPath &, const SdfShouldCopyValueFn &, const SdfShouldCopyChildrenFn &)";
    LOBYTE(v82) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v78, 1, (pxrInternal__aapl__pxrReserved__ *)"Incompatible source and destination paths");
    return 0;
  }
LABEL_15:
  IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2);
  if (IsPropertyPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a4))
    goto LABEL_20;
  IsTargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a2);
  if (IsTargetPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a4))
    goto LABEL_20;
  IsMapperPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a2);
  if (IsMapperPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a4))
    goto LABEL_20;
  IsMapperArgPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(a2);
  if (IsMapperArgPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(a4))
    goto LABEL_20;
  IsExpressionPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a2);
  if (IsExpressionPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a4))
    goto LABEL_20;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a4))
  {
    v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v24, a4) & 1) == 0)
    {
      v78 = (unint64_t)"sdf/copyUtils.cpp";
      v79 = (unint64_t)"SdfCopySpec";
      v80 = 655;
      v81 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHa"
            "ndle &, const SdfPath &, const SdfShouldCopyValueFn &, const SdfShouldCopyChildrenFn &)";
      LOBYTE(v82) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v78, 1, (pxrInternal__aapl__pxrReserved__ *)"Spec does not exist at destination target path");
      return 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v77);
  sub_20C028354(&v78, a2, a4);
  sub_20C0D98E0((uint64_t)v74, &v78);
  sub_20C0D9B18(&v78);
  v22 = 1;
  if (!v76)
    goto LABEL_89;
  while (1)
  {
    sub_20C0D9B58(&v72, (_DWORD *)(*(_QWORD *)(v74[1] + ((v75 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v75));
    sub_20C0D9BA4((uint64_t)v74);
    if (!sub_20C0D98C4(&v72))
      break;
    sub_20C0D9C20(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v73);
LABEL_82:
    sub_20C0D9B18(&v72);
    if (!v76)
    {
      v22 = 1;
      goto LABEL_89;
    }
  }
  v71 = 0;
  v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  SpecType = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v72);
  v71 = SpecType;
  if (SpecType)
  {
    sub_20C0DA284((uint64_t)v67, &v73, SpecType);
    memset(v66, 0, sizeof(v66));
    memset(v65, 0, sizeof(v65));
    sub_20C0DA2D0(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v73, (uint64_t)v66, (uint64_t)v65);
    memset(v64, 0, sizeof(v64));
    memset(v63, 0, sizeof(v63));
    sub_20C0DA2D0(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v72, (uint64_t)v64, (uint64_t)v63);
    v78 = (unint64_t)&v71;
    v79 = (unint64_t)a1;
    v80 = (uint64_t)&v72;
    v81 = (const char *)a3;
    v82 = a5;
    v83 = v67;
    sub_20C0DA490((uint64_t)v64, v66, (uint64_t)&v78);
    v27 = v71;
    if (v71 == 6)
    {
      v28 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v73);
      v27 = v71;
    }
    else
    {
      v28 = 0;
    }
    v29 = v27 == 10
       && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v73);
    if ((v28 | v29) == 1)
    {
      v30 = sub_20C0DA698(v69, v70);
      sub_20C0DA650((uint64_t)&v69, v30, v70);
      if (v28)
      {
        v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v31)
          v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v86 = (char *)&off_24C527CC0 + 3;
        LODWORD(v85) = 1;
        sub_20C0DE1A4((uint64_t *)&v78, (uint64_t *)v31 + 39, &v85);
        sub_20C0DA7C4((uint64_t *)&v69, &v78);
        sub_20BF4C2D8((uint64_t)&v79);
        if ((v78 & 7) != 0)
        {
          v32 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        sub_20BF4C2D8((uint64_t)&v85);
        v68 = 10;
      }
      else if (v29)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v72, &v62);
        v85 = 0;
        v86 = 0;
        v87 = 0;
        memset(v61, 0, sizeof(v61));
        v34 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v34)
          v34 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v35 = *((_QWORD *)v34 + 39);
        v78 = v35;
        if ((v35 & 7) != 0)
        {
          v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 2, v36));
          if ((v37 & 1) == 0)
            v78 &= 0xFFFFFFFFFFFFFFF8;
        }
        v38 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v38)
          v38 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v39 = *((_QWORD *)v38 + 56);
        v79 = v39;
        if ((v39 & 7) != 0)
        {
          v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 2, v40));
          if ((v41 & 1) == 0)
            v79 &= 0xFFFFFFFFFFFFFFF8;
        }
        for (i = 0; i != 16; i += 8)
        {
          v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)&v78 + i), 0))sub_20C0DA818((uint64_t)&v85, (uint64_t *)((char *)&v78 + i));
          v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v44, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v73, (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)&v78 + i), 0))sub_20C0DA818((uint64_t)v61, (uint64_t *)((char *)&v78 + i));
        }
        v45 = (void ***)&v80;
        do
        {
          v47 = (uint64_t)*--v45;
          v46 = v47;
          if ((v47 & 7) != 0)
          {
            v48 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
            do
              v49 = __ldxr(v48);
            while (__stlxr(v49 - 2, v48));
          }
        }
        while (v45 != (void ***)&v78);
        v78 = (unint64_t)&v71;
        v79 = (unint64_t)a1;
        v80 = (uint64_t)&v62;
        v81 = (const char *)a3;
        v82 = &v72;
        v83 = (char *)a5;
        v84 = v67;
        sub_20C0DA888((uint64_t)&v85, v61, (uint64_t)&v78);
        v68 = 6;
        v78 = (unint64_t)v61;
        sub_20BEEB2B8((void ***)&v78);
        v78 = (unint64_t)&v85;
        sub_20BEEB2B8((void ***)&v78);
        sub_20BFD1A18(&v62);
      }
    }
    sub_20C0DAA58(a3, (uint64_t)v67);
    v50 = v70;
    if (v69 != v70)
    {
      v51 = v69 + 1;
      do
      {
        if (sub_20C0DAE5C((pxrInternal__aapl__pxrReserved__::VtValue *)v51))
        {
          v52 = v51[1];
          if ((v52 & 4) != 0)
            v53 = (*(uint64_t (**)(uint64_t *))((v52 & 0xFFFFFFFFFFFFFFF8) + 168))(v51);
          else
            v53 = *v51;
          v54 = *(_QWORD *)(v53 + 24);
          if (!v54)
            sub_20BE9E974();
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v54 + 48))(v54, a3, v67);
        }
        else
        {
          v55 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
          pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v55, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v67, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v51 - 1), (const pxrInternal__aapl__pxrReserved__::VtValue *)v51);
        }
        v56 = v51 + 2;
        v51 += 3;
      }
      while (v56 != v50);
    }
    v78 = (unint64_t)a1;
    v79 = (unint64_t)&v72;
    v80 = (uint64_t)a3;
    v81 = a6;
    v82 = (int *)v74;
    sub_20C0DAED4(v63, v65, (uint64_t)&v78);
    v78 = (unint64_t)v63;
    sub_20BEEB2B8((void ***)&v78);
    v78 = (unint64_t)v64;
    sub_20BEEB2B8((void ***)&v78);
    v78 = (unint64_t)v65;
    sub_20BEEB2B8((void ***)&v78);
    v78 = (unint64_t)v66;
    sub_20BEEB2B8((void ***)&v78);
    sub_20C0DB02C((uint64_t)v67);
    goto LABEL_82;
  }
  v78 = (unint64_t)"sdf/copyUtils.cpp";
  v79 = (unint64_t)"SdfCopySpec";
  v80 = 681;
  v81 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle"
        " &, const SdfPath &, const SdfShouldCopyValueFn &, const SdfShouldCopyChildrenFn &)";
  LOBYTE(v82) = 0;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v72);
  v58 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v58);
  if (*(char *)(Identifier + 23) >= 0)
    v60 = (const char *)Identifier;
  else
    v60 = *(const char **)Identifier;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v78, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot copy unknown spec at <%s> from layer <%s>", Text, v60);
  sub_20C0D9B18(&v72);
  v22 = 0;
LABEL_89:
  sub_20C0DB074(v74);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v77);
  return v22;
}

{
  uint64_t (*v12)(uint64_t *);
  char v13;
  uint64_t (*v14)(uint64_t *);
  char v15;
  int IsPrimVariantSelectionPath;
  int IsPropertyPath;
  int IsTargetPath;
  int IsMapperPath;
  int IsMapperArgPath;
  int IsExpressionPath;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  int SpecType;
  int v27;
  int v28;
  _BOOL4 v29;
  _QWORD *v30;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v31;
  unsigned int *v32;
  unsigned int v33;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v34;
  unint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v38;
  unint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t i;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v43;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v44;
  void ***v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v55;
  _QWORD *v56;
  const char *Text;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v58;
  uint64_t Identifier;
  const char *v60;
  uint64_t *v61[3];
  int v62;
  const pxrInternal__aapl__pxrReserved__::TfToken *v63[3];
  _QWORD v64[3];
  const pxrInternal__aapl__pxrReserved__::TfToken *v65[3];
  uint64_t *v66[3];
  char v67[8];
  int v68;
  _QWORD *v69;
  _QWORD *v70;
  int v71;
  int v72;
  int v73;
  _QWORD v74[4];
  unint64_t v75;
  uint64_t v76;
  _BYTE v77[16];
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  const char *v81;
  int *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v12 = sub_20BFD2F78(a1);
  if (!(v13 & 1 | (unint64_t)v12) || (v14 = sub_20BFD2F78(a3), !(v15 & 1 | (unint64_t)v14)))
  {
    v78 = (unint64_t)"sdf/copyUtils.cpp";
    v79 = (unint64_t)"SdfCopySpec";
    v80 = 812;
    v81 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHand"
          "le &, const SdfPath &, const SdfShouldCopyValueFnStandard &, const SdfShouldCopyChildrenFnStandard &)";
    LOBYTE(v82) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v78, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid layer handle");
    return 0;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2)
    || !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a4))
  {
    v78 = (unint64_t)"sdf/copyUtils.cpp";
    v79 = (unint64_t)"SdfCopySpec";
    v80 = 817;
    v81 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHand"
          "le &, const SdfPath &, const SdfShouldCopyValueFnStandard &, const SdfShouldCopyChildrenFnStandard &)";
    LOBYTE(v82) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v78, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid empty path");
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a2))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a4)
      && (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a4) & 1) == 0)
    {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
  IsPrimVariantSelectionPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a2);
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsoluteRootOrPrimPath(a4))
  {
    if ((IsPrimVariantSelectionPath & 1) == 0)
      goto LABEL_20;
  }
  else if (IsPrimVariantSelectionPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a4))
  {
LABEL_20:
    v78 = (unint64_t)"sdf/copyUtils.cpp";
    v79 = (unint64_t)"SdfCopySpec";
    v80 = 831;
    v81 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHand"
          "le &, const SdfPath &, const SdfShouldCopyValueFnStandard &, const SdfShouldCopyChildrenFnStandard &)";
    LOBYTE(v82) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v78, 1, (pxrInternal__aapl__pxrReserved__ *)"Incompatible source and destination paths");
    return 0;
  }
LABEL_15:
  IsPropertyPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a2);
  if (IsPropertyPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(a4))
    goto LABEL_20;
  IsTargetPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a2);
  if (IsTargetPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a4))
    goto LABEL_20;
  IsMapperPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a2);
  if (IsMapperPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperPath(a4))
    goto LABEL_20;
  IsMapperArgPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(a2);
  if (IsMapperArgPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsMapperArgPath(a4))
    goto LABEL_20;
  IsExpressionPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a2);
  if (IsExpressionPath != pxrInternal__aapl__pxrReserved__::SdfPath::IsExpressionPath(a4))
    goto LABEL_20;
  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsTargetPath(a4))
  {
    v24 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v24, a4) & 1) == 0)
    {
      v78 = (unint64_t)"sdf/copyUtils.cpp";
      v79 = (unint64_t)"SdfCopySpec";
      v80 = 838;
      v81 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHa"
            "ndle &, const SdfPath &, const SdfShouldCopyValueFnStandard &, const SdfShouldCopyChildrenFnStandard &)";
      LOBYTE(v82) = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v78, 1, (pxrInternal__aapl__pxrReserved__ *)"Spec does not exist at destination target path");
      return 0;
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v77);
  sub_20C028354(&v78, a2, a4);
  sub_20C0D98E0((uint64_t)v74, &v78);
  sub_20C0D9B18(&v78);
  v22 = 1;
  if (!v76)
    goto LABEL_89;
  while (1)
  {
    sub_20C0D9B58(&v72, (_DWORD *)(*(_QWORD *)(v74[1] + ((v75 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v75));
    sub_20C0D9BA4((uint64_t)v74);
    if (!sub_20C0D98C4(&v72))
      break;
    sub_20C0D9C20(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v73);
LABEL_82:
    sub_20C0D9B18(&v72);
    if (!v76)
    {
      v22 = 1;
      goto LABEL_89;
    }
  }
  v71 = 0;
  v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  SpecType = pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v72);
  v71 = SpecType;
  if (SpecType)
  {
    sub_20C0DA284((uint64_t)v67, &v73, SpecType);
    memset(v66, 0, sizeof(v66));
    memset(v65, 0, sizeof(v65));
    sub_20C0DA2D0(a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v73, (uint64_t)v66, (uint64_t)v65);
    memset(v64, 0, sizeof(v64));
    memset(v63, 0, sizeof(v63));
    sub_20C0DA2D0(a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v72, (uint64_t)v64, (uint64_t)v63);
    v78 = (unint64_t)&v71;
    v79 = (unint64_t)a1;
    v80 = (uint64_t)&v72;
    v81 = (const char *)a3;
    v82 = a5;
    v83 = v67;
    sub_20C0DBB80((uint64_t)v64, v66, (uint64_t)&v78);
    v27 = v71;
    if (v71 == 6)
    {
      v28 = pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v73);
      v27 = v71;
    }
    else
    {
      v28 = 0;
    }
    v29 = v27 == 10
       && pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v73);
    if ((v28 | v29) == 1)
    {
      v30 = sub_20C0DA698(v69, v70);
      sub_20C0DA650((uint64_t)&v69, v30, v70);
      if (v28)
      {
        v31 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v31)
          v31 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v86 = (char *)&off_24C527CC0 + 3;
        LODWORD(v85) = 1;
        sub_20C0DE1A4((uint64_t *)&v78, (uint64_t *)v31 + 39, &v85);
        sub_20C0DA7C4((uint64_t *)&v69, &v78);
        sub_20BF4C2D8((uint64_t)&v79);
        if ((v78 & 7) != 0)
        {
          v32 = (unsigned int *)(v78 & 0xFFFFFFFFFFFFFFF8);
          do
            v33 = __ldxr(v32);
          while (__stlxr(v33 - 2, v32));
        }
        sub_20BF4C2D8((uint64_t)&v85);
        v68 = 10;
      }
      else if (v29)
      {
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v72, &v62);
        v85 = 0;
        v86 = 0;
        v87 = 0;
        memset(v61, 0, sizeof(v61));
        v34 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v34)
          v34 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v35 = *((_QWORD *)v34 + 39);
        v78 = v35;
        if ((v35 & 7) != 0)
        {
          v36 = (unsigned int *)(v35 & 0xFFFFFFFFFFFFFFF8);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 2, v36));
          if ((v37 & 1) == 0)
            v78 &= 0xFFFFFFFFFFFFFFF8;
        }
        v38 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v38)
          v38 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        v39 = *((_QWORD *)v38 + 56);
        v79 = v39;
        if ((v39 & 7) != 0)
        {
          v40 = (unsigned int *)(v39 & 0xFFFFFFFFFFFFFFF8);
          do
            v41 = __ldxr(v40);
          while (__stxr(v41 + 2, v40));
          if ((v41 & 1) == 0)
            v79 &= 0xFFFFFFFFFFFFFFF8;
        }
        for (i = 0; i != 16; i += 8)
        {
          v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v43, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v62, (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)&v78 + i), 0))sub_20C0DA818((uint64_t)&v85, (uint64_t *)((char *)&v78 + i));
          v44 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
          if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v44, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v73, (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)&v78 + i), 0))sub_20C0DA818((uint64_t)v61, (uint64_t *)((char *)&v78 + i));
        }
        v45 = (void ***)&v80;
        do
        {
          v47 = (uint64_t)*--v45;
          v46 = v47;
          if ((v47 & 7) != 0)
          {
            v48 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
            do
              v49 = __ldxr(v48);
            while (__stlxr(v49 - 2, v48));
          }
        }
        while (v45 != (void ***)&v78);
        v78 = (unint64_t)&v71;
        v79 = (unint64_t)a1;
        v80 = (uint64_t)&v62;
        v81 = (const char *)a3;
        v82 = &v72;
        v83 = (char *)a5;
        v84 = v67;
        sub_20C0DBD40((uint64_t)&v85, v61, (uint64_t)&v78);
        v68 = 6;
        v78 = (unint64_t)v61;
        sub_20BEEB2B8((void ***)&v78);
        v78 = (unint64_t)&v85;
        sub_20BEEB2B8((void ***)&v78);
        sub_20BFD1A18(&v62);
      }
    }
    sub_20C0DAA58(a3, (uint64_t)v67);
    v50 = v70;
    if (v69 != v70)
    {
      v51 = v69 + 1;
      do
      {
        if (sub_20C0DAE5C((pxrInternal__aapl__pxrReserved__::VtValue *)v51))
        {
          v52 = v51[1];
          if ((v52 & 4) != 0)
            v53 = (*(uint64_t (**)(uint64_t *))((v52 & 0xFFFFFFFFFFFFFFF8) + 168))(v51);
          else
            v53 = *v51;
          v54 = *(_QWORD *)(v53 + 24);
          if (!v54)
            sub_20BE9E974();
          (*(void (**)(uint64_t, uint64_t *, char *))(*(_QWORD *)v54 + 48))(v54, a3, v67);
        }
        else
        {
          v55 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
          pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v55, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v67, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v51 - 1), (const pxrInternal__aapl__pxrReserved__::VtValue *)v51);
        }
        v56 = v51 + 2;
        v51 += 3;
      }
      while (v56 != v50);
    }
    v78 = (unint64_t)a1;
    v79 = (unint64_t)&v72;
    v80 = (uint64_t)a3;
    v81 = a6;
    v82 = (int *)v74;
    sub_20C0DBF10(v63, v65, (uint64_t)&v78);
    v78 = (unint64_t)v63;
    sub_20BEEB2B8((void ***)&v78);
    v78 = (unint64_t)v64;
    sub_20BEEB2B8((void ***)&v78);
    v78 = (unint64_t)v65;
    sub_20BEEB2B8((void ***)&v78);
    v78 = (unint64_t)v66;
    sub_20BEEB2B8((void ***)&v78);
    sub_20C0DB02C((uint64_t)v67);
    goto LABEL_82;
  }
  v78 = (unint64_t)"sdf/copyUtils.cpp";
  v79 = (unint64_t)"SdfCopySpec";
  v80 = 864;
  v81 = "BOOL pxrInternal__aapl__pxrReserved__::SdfCopySpec(const SdfLayerHandle &, const SdfPath &, const SdfLayerHandle"
        " &, const SdfPath &, const SdfShouldCopyValueFnStandard &, const SdfShouldCopyChildrenFnStandard &)";
  LOBYTE(v82) = 0;
  Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText((pxrInternal__aapl__pxrReserved__::SdfPath *)&v72);
  v58 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  Identifier = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(v58);
  if (*(char *)(Identifier + 23) >= 0)
    v60 = (const char *)Identifier;
  else
    v60 = *(const char **)Identifier;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v78, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot copy unknown spec at <%s> from layer <%s>", Text, v60);
  sub_20C0D9B18(&v72);
  v22 = 0;
LABEL_89:
  sub_20C0DB074(v74);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v77);
  return v22;
}

void sub_20C0D9720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, int a18, void ****a19, uint64_t a20,uint64_t a21,void ***a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;

  v41 = *(_QWORD *)(v39 - 176);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  *(_QWORD *)(v39 - 184) = &a15;
  sub_20BEEB2B8((void ***)(v39 - 184));
  a15 = (void **)(v39 - 120);
  sub_20BEEB2B8(&a15);
  sub_20BFD1A18(&a18);
  *(_QWORD *)(v39 - 120) = &a19;
  sub_20BEEB2B8((void ***)(v39 - 120));
  a19 = &a22;
  sub_20BEEB2B8((void ***)&a19);
  a22 = &a25;
  sub_20BEEB2B8((void ***)&a22);
  a25 = (void **)&a28;
  sub_20BEEB2B8(&a25);
  sub_20C0DB02C((uint64_t)&a31);
  sub_20C0D9B18(&a37);
  sub_20C0DB074(&a39);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v39 - 192));
  _Unwind_Resume(a1);
}

BOOL sub_20C0D98C4(_DWORD *a1)
{
  return !pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a1);
}

uint64_t sub_20C0D98E0(uint64_t a1, _DWORD *a2)
{
  uint64_t v3;
  _QWORD *i;
  void *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  void *v26;
  char *v27;
  char *v28;
  __int128 v29;
  uint64_t v30;

  v3 = a1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v30 = a1 + 24;
  v27 = (char *)operator new(8uLL);
  v28 = v27;
  *(_QWORD *)&v29 = v27;
  *((_QWORD *)&v29 + 1) = v27 + 8;
  v26 = operator new(0x1000uLL);
  sub_20C0DE414((uint64_t)&v27, &v26);
  for (i = *(_QWORD **)(v3 + 16); i != *(_QWORD **)(v3 + 8); sub_20C0DE534((void **)&v27, i))
    --i;
  v5 = *(void **)v3;
  v6 = v28;
  *(_QWORD *)v3 = v27;
  *(_QWORD *)(v3 + 8) = v6;
  v7 = (char *)v29;
  *(_OWORD *)(v3 + 16) = v29;
  if (v5)
  {
    operator delete(v5);
    v6 = *(char **)(v3 + 8);
    v8 = *(char **)(v3 + 16);
  }
  else
  {
    v8 = v7;
  }
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(_QWORD *)(v3 + 32) + v9;
  v11 = &v6[8 * (v10 >> 8)];
  v12 = *(char **)v11;
  v13 = *(_QWORD *)v11 + 16 * v10;
  if (v8 == v6)
    v14 = 0;
  else
    v14 = (char *)v13;
  v15 = (v14 - v12) >> 4;
  if (v14 - v12 < -15)
  {
    v19 = 254 - v15;
    v17 = &v11[-8 * (v19 >> 8)];
    v18 = *(_QWORD *)v17 + 16 * ~(_BYTE)v19;
  }
  else
  {
    v16 = v15 + 1;
    v17 = &v11[8 * (v16 >> 8)];
    v18 = *(_QWORD *)v17 + 16 * v16;
  }
  if (v14 != (char *)v18)
  {
    do
    {
      v20 = v12 + 4096;
      if (v11 == v17)
        v21 = (char *)v18;
      else
        v21 = v20;
      if (v14 == v21)
      {
        v21 = v14;
      }
      else
      {
        v22 = v14;
        do
        {
          sub_20BFD6E54(v22, a2);
          sub_20BFD6EA4((_DWORD *)v22 + 1, a2 + 1);
          sub_20BFD6E54((_DWORD *)v22 + 2, a2 + 2);
          sub_20BFD6EA4((_DWORD *)v22 + 3, a2 + 3);
          v22 += 16;
        }
        while (v22 != v21);
        v3 = a1;
        v9 = *(_QWORD *)(a1 + 40);
      }
      v9 += (v21 - v14) >> 4;
      *(_QWORD *)(v3 + 40) = v9;
      if (v11 == v17)
        break;
      v23 = (char *)*((_QWORD *)v11 + 1);
      v11 += 8;
      v12 = v23;
      v14 = v23;
    }
    while (v23 != (char *)v18);
  }
  return v3;
}

void sub_20C0D9ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14)
{
  sub_20BE97BCC(a10);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0D9B18(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_20BFD265C(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

_DWORD *sub_20C0D9B58(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54(a1, a2);
  sub_20BFD6EA4(v4 + 1, a2 + 1);
  sub_20BFD6E54(a1 + 2, a2 + 2);
  sub_20BFD6EA4(a1 + 3, a2 + 3);
  return a1;
}

void sub_20C0D9BA4(uint64_t a1)
{
  int64x2_t v2;

  sub_20C0DE660((_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((*(_QWORD *)(a1 + 32) >> 5) & 0x7FFFFFFFFFFFFF8))
                         + 16 * *(_QWORD *)(a1 + 32)));
  v2 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_20CAB4590);
  *(int64x2_t *)(a1 + 32) = v2;
  if (v2.i64[0] >= 0x200uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
}

_DWORD *sub_20C0D9C20(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  _DWORD *result;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int *v15;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int *v20;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int *v25;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v26;
  uint64_t v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int *v30;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v31;
  uint64_t v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int *v35;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int *v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int v51;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  result = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(v4, a2);
  switch((int)result)
  {
    case 1:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v50);
      NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v7 = *(_QWORD *)NameToken;
      if ((*(_QWORD *)NameToken & 7) != 0)
      {
        v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 2, v8));
        if ((v9 & 1) == 0)
          v7 &= 0xFFFFFFFFFFFFFFF8;
      }
      v10 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::RemoveChild(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
      if ((v7 & 7) != 0)
      {
        do
          v41 = __ldxr(v10);
        while (__stlxr(v41 - 2, v10));
      }
      goto LABEL_81;
    case 2:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v50);
      sub_20C0D2A04(a2, &v48);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::RemoveChild(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v48);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
      sub_20BFD265C(&v48);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
      goto LABEL_82;
    case 3:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v50);
      v11 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v12 = *(_QWORD *)v11;
      if ((*(_QWORD *)v11 & 7) != 0)
      {
        v13 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 2, v13));
        if ((v14 & 1) == 0)
          v12 &= 0xFFFFFFFFFFFFFFF8;
      }
      v15 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      if ((v12 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v11);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::RemoveChild(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
      if ((v12 & 7) != 0)
      {
        do
          v42 = __ldxr(v15);
        while (__stlxr(v42 - 2, v15));
      }
      goto LABEL_81;
    case 4:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v50);
      sub_20C0B7F40(a2, &v48);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::RemoveChild(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v48);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
      sub_20BFD265C(&v48);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
      goto LABEL_82;
    case 5:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v50);
      v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v27 = *(_QWORD *)v26;
      if ((*(_QWORD *)v26 & 7) != 0)
      {
        v28 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 2, v28));
        if ((v29 & 1) == 0)
          v27 &= 0xFFFFFFFFFFFFFFF8;
      }
      v30 = (unsigned int *)(v27 & 0xFFFFFFFFFFFFFFF8);
      if ((v27 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v26);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::RemoveChild(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
      if ((v27 & 7) != 0)
      {
        do
          v45 = __ldxr(v30);
        while (__stlxr(v45 - 2, v30));
      }
      goto LABEL_81;
    case 6:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v50);
      v16 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v17 = *(_QWORD *)v16;
      if ((*(_QWORD *)v16 & 7) != 0)
      {
        v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 2, v18));
        if ((v19 & 1) == 0)
          v17 &= 0xFFFFFFFFFFFFFFF8;
      }
      v20 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
      if ((v17 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::RemoveChild(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
      if ((v17 & 7) != 0)
      {
        do
          v43 = __ldxr(v20);
        while (__stlxr(v43 - 2, v20));
      }
      goto LABEL_81;
    case 8:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v50);
      v21 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v22 = *(_QWORD *)v21;
      if ((*(_QWORD *)v21 & 7) != 0)
      {
        v23 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 2, v23));
        if ((v24 & 1) == 0)
          v22 &= 0xFFFFFFFFFFFFFFF8;
      }
      v25 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
      if ((v22 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v21);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::RemoveChild(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
      if ((v22 & 7) != 0)
      {
        do
          v44 = __ldxr(v25);
        while (__stlxr(v44 - 2, v25));
      }
      goto LABEL_81;
    case 9:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v50);
      sub_20C0D2A04(a2, &v48);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::RemoveChild(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v50, &v48);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v49);
      sub_20BFD265C(&v48);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
      goto LABEL_82;
    case 10:
      sub_20C0B2FEC(a2, &v50);
      v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v32 = *(_QWORD *)v31;
      if ((*(_QWORD *)v31 & 7) != 0)
      {
        v33 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v34 = __ldxr(v33);
        while (__stxr(v34 + 2, v33));
        if ((v34 & 1) == 0)
          v32 &= 0xFFFFFFFFFFFFFFF8;
      }
      v35 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
      if ((v32 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v31);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::RemoveChild(a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v50);
      if ((v32 & 7) != 0)
      {
        do
          v46 = __ldxr(v35);
        while (__stlxr(v46 - 2, v35));
      }
      goto LABEL_81;
    case 11:
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v50);
      v36 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken(a2);
      v37 = *(_QWORD *)v36;
      if ((*(_QWORD *)v36 & 7) != 0)
      {
        v38 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 2, v38));
        if ((v39 & 1) == 0)
          v37 &= 0xFFFFFFFFFFFFFFF8;
      }
      v40 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
      if ((v37 & 0xFFFFFFFFFFFFFFF8) == 0)
        pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v36);
      pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::RemoveChild(a1, (pxrInternal__aapl__pxrReserved__::TfToken *)&v50);
      if ((v37 & 7) != 0)
      {
        do
          v47 = __ldxr(v40);
        while (__stlxr(v47 - 2, v40));
      }
LABEL_81:
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v51);
LABEL_82:
      result = sub_20BFD265C(&v50);
      break;
    default:
      return result;
  }
  return result;
}

void sub_20C0DA13C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0DA284(uint64_t a1, _DWORD *a2, int a3)
{
  _DWORD *v6;

  v6 = sub_20BFD6E54((_DWORD *)a1, a2);
  sub_20BFD6EA4(v6 + 1, a2 + 1);
  *(_DWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_20C0DA2D0(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *Schema;
  pxrInternal__aapl__pxrReserved__::SdfLayer **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  char *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  char v30;
  void **v31;

  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  Schema = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(v8);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer **)sub_20BFCF650(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(v10, a2, v29);
  v11 = (uint64_t *)v29[0];
  v12 = (uint64_t *)v29[1];
  while (v11 != v12)
  {
    if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::HoldsChildren(Schema, (const pxrInternal__aapl__pxrReserved__::TfToken *)v11))
    {
      v13 = *(uint64_t **)(a4 + 8);
      if ((unint64_t)v13 >= *(_QWORD *)(a4 + 16))
      {
        v17 = sub_20BFCA068((char **)a4, v11);
      }
      else
      {
        v14 = *v11;
        *v13 = *v11;
        if ((v14 & 7) != 0)
        {
          v15 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 2, v15));
          if ((v16 & 1) == 0)
            *v13 &= 0xFFFFFFFFFFFFFFF8;
        }
        v17 = (char *)(v13 + 1);
      }
      *(_QWORD *)(a4 + 8) = v17;
    }
    else
    {
      v18 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v18 >= *(_QWORD *)(a3 + 16))
      {
        v22 = sub_20BFCA068((char **)a3, v11);
      }
      else
      {
        v19 = *v11;
        *v18 = *v11;
        if ((v19 & 7) != 0)
        {
          v20 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
          do
            v21 = __ldxr(v20);
          while (__stxr(v21 + 2, v20));
          if ((v21 & 1) == 0)
            *v18 &= 0xFFFFFFFFFFFFFFF8;
        }
        v22 = (char *)(v18 + 1);
      }
      *(_QWORD *)(a3 + 8) = v22;
    }
    ++v11;
  }
  v23 = *(uint64_t **)(a3 + 8);
  v24 = 126 - 2 * __clz(((uint64_t)v23 - *(_QWORD *)a3) >> 3);
  if (v23 == *(uint64_t **)a3)
    v25 = 0;
  else
    v25 = v24;
  sub_20C0DD334(*(_QWORD *)a3, v23, (uint64_t)&v30, v25, 1);
  v26 = *(uint64_t **)(a4 + 8);
  v27 = 126 - 2 * __clz(((uint64_t)v26 - *(_QWORD *)a4) >> 3);
  if (v26 == *(uint64_t **)a4)
    v28 = 0;
  else
    v28 = v27;
  sub_20C0DD334(*(_QWORD *)a4, v26, (uint64_t)&v30, v28, 1);
  v31 = (void **)v29;
  sub_20BEEB2B8(&v31);
}

void sub_20C0DA470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_20BEEB2B8(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0DA490(uint64_t result, uint64_t **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  _BOOL4 v8;
  unint64_t v10;
  unint64_t v11;

  v4 = *(uint64_t **)result;
  v5 = *(uint64_t **)(result + 8);
  v6 = *a2;
  v7 = a2[1];
  v8 = *(_QWORD *)result != (_QWORD)v5;
  if (*(uint64_t **)result != v5 && v6 != v7)
  {
    while (1)
    {
      v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
      v11 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (v10 != v11)
        break;
      result = sub_20C0DE6A0(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16) + 8, 1, *(_QWORD *)(a3 + 32), (uint64_t *)(*(_QWORD *)(a3 + 40) + 16));
      ++v6;
LABEL_14:
      v8 = v4 != v5;
      if (v4 == v5 || v6 == v7)
        goto LABEL_20;
    }
    if (v10 >= v11)
    {
      while (v6 != v7)
      {
        if ((*v6 & 0xFFFFFFFFFFFFFFF8) >= (*v4 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_14;
        result = sub_20C0DE6A0(**(_DWORD **)a3, v6++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 0, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16) + 8, 1, *(_QWORD *)(a3 + 32), (uint64_t *)(*(_QWORD *)(a3 + 40) + 16));
      }
      v6 = v7;
    }
    else
    {
      while (v4 != v5)
      {
        if ((*v4 & 0xFFFFFFFFFFFFFFF8) >= (*v6 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_14;
        result = sub_20C0DE6A0(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16) + 8, 0, *(_QWORD *)(a3 + 32), (uint64_t *)(*(_QWORD *)(a3 + 40) + 16));
      }
      v4 = v5;
    }
    v8 = v4 != v5;
  }
LABEL_20:
  if (v4 == v5)
  {
    v4 = v6;
    v5 = v7;
  }
  for (; v4 != v5; ++v4)
    result = sub_20C0DE6A0(**(_DWORD **)a3, v4, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), v8, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16) + 8, !v8, *(_QWORD *)(a3 + 32), (uint64_t *)(*(_QWORD *)(a3 + 40) + 16));
  return result;
}

_QWORD *sub_20C0DA650(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;

  if (a2 != a3)
  {
    sub_20C0DEC2C(a3, *(_QWORD **)(a1 + 8), a2);
    sub_20C0DE370(a1, v5);
  }
  return a2;
}

_QWORD *sub_20C0DA698(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  _QWORD *i;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;

  if (a1 == a2)
    return a2;
  v3 = a1;
  while (1)
  {
    v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v4)
      v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v4 + 39) & 0xFFFFFFFFFFFFFFF8))
      break;
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v5)
      v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if ((*v3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v5 + 56) & 0xFFFFFFFFFFFFFFF8))
      break;
    v3 += 3;
    if (v3 == a2)
      return a2;
  }
  if (v3 != a2)
  {
    for (i = v3 + 3; i != a2; i += 3)
    {
      v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v8)
        v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if ((*i & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v8 + 39) & 0xFFFFFFFFFFFFFFF8))
      {
        v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v9)
          v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if ((*i & 0xFFFFFFFFFFFFFFF8) != (*((_QWORD *)v9 + 56) & 0xFFFFFFFFFFFFFFF8))
        {
          sub_20C0DEBCC(v3, i);
          v3 += 3;
        }
      }
    }
  }
  return v3;
}

uint64_t sub_20C0DA7C4(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t result;

  v3 = (_QWORD *)a1[1];
  if ((unint64_t)v3 >= a1[2])
  {
    result = sub_20C0DEE4C(a1, a2);
    v4 = (_QWORD *)result;
  }
  else
  {
    *v3 = *a2;
    v4 = v3 + 3;
    *a2 = 0;
    result = (uint64_t)sub_20BF4C200(v3 + 1, a2 + 1);
  }
  a1[1] = (uint64_t)v4;
  return result;
}

char *sub_20C0DA818(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  char *result;

  v3 = *(uint64_t **)(a1 + 8);
  if ((unint64_t)v3 >= *(_QWORD *)(a1 + 16))
  {
    result = sub_20BFCA068((char **)a1, a2);
  }
  else
  {
    v4 = *a2;
    *v3 = *a2;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stxr(v6 + 2, v5));
      if ((v6 & 1) == 0)
        *v3 &= 0xFFFFFFFFFFFFFFF8;
    }
    result = (char *)(v3 + 1);
  }
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_20C0DA888(uint64_t result, uint64_t **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  _BOOL4 v8;
  unint64_t v10;
  unint64_t v11;

  v4 = *(uint64_t **)result;
  v5 = *(uint64_t **)(result + 8);
  v6 = *a2;
  v7 = a2[1];
  v8 = *(_QWORD *)result != (_QWORD)v5;
  if (*(uint64_t **)result != v5 && v6 != v7)
  {
    while (1)
    {
      v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
      v11 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (v10 != v11)
        break;
      result = sub_20C0DE6A0(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32) + 8, 1, *(_QWORD *)(a3 + 40), (uint64_t *)(*(_QWORD *)(a3 + 48) + 16));
      ++v6;
LABEL_14:
      v8 = v4 != v5;
      if (v4 == v5 || v6 == v7)
        goto LABEL_20;
    }
    if (v10 >= v11)
    {
      while (v6 != v7)
      {
        if ((*v6 & 0xFFFFFFFFFFFFFFF8) >= (*v4 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_14;
        result = sub_20C0DE6A0(**(_DWORD **)a3, v6++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 0, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32) + 8, 1, *(_QWORD *)(a3 + 40), (uint64_t *)(*(_QWORD *)(a3 + 48) + 16));
      }
      v6 = v7;
    }
    else
    {
      while (v4 != v5)
      {
        if ((*v4 & 0xFFFFFFFFFFFFFFF8) >= (*v6 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_14;
        result = sub_20C0DE6A0(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32) + 8, 0, *(_QWORD *)(a3 + 40), (uint64_t *)(*(_QWORD *)(a3 + 48) + 16));
      }
      v4 = v5;
    }
    v8 = v4 != v5;
  }
LABEL_20:
  if (v4 == v5)
  {
    v4 = v6;
    v5 = v7;
  }
  for (; v4 != v5; ++v4)
    result = sub_20C0DE6A0(**(_DWORD **)a3, v4, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), v8, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32) + 8, !v8, *(_QWORD *)(a3 + 40), (uint64_t *)(*(_QWORD *)(a3 + 48) + 16));
  return result;
}

uint64_t sub_20C0DAA58(uint64_t *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t result;
  _QWORD *v6;
  _QWORD *v7;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  _BOOL8 v18;
  _BOOL8 v19;
  _BOOL4 v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  result = pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(v4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
  if ((result & 1) == 0)
  {
    switch(*(_DWORD *)(a2 + 8))
    {
      case 1:
        v6 = *(_QWORD **)(a2 + 16);
        v7 = *(_QWORD **)(a2 + 24);
        if (v6 == v7)
        {
LABEL_36:
          v18 = 1;
        }
        else
        {
          while (1)
          {
            v8 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v8)
              v8 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if ((*v6 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v8 + 8) & 0xFFFFFFFFFFFFFFF8))
              break;
            v6 += 3;
            if (v6 == v7)
              goto LABEL_36;
          }
          v18 = *(_BYTE *)sub_20BFB0910((pxrInternal__aapl__pxrReserved__::VtValue *)(v6 + 1)) == 0;
        }
        result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CreateSpec((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, *(unsigned int *)(a2 + 8), v18);
        break;
      case 2:
        result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy>::CreateSpec((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, 2, 1);
        break;
      case 3:
        result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy>::CreateSpec((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, 3, 1);
        break;
      case 4:
        result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy>::CreateSpec((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, 4, 1);
        break;
      case 5:
        result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy>::CreateSpec((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, 5, 1);
        break;
      case 6:
        v24 = 0;
        v9 = *(_QWORD **)(a2 + 16);
        v10 = *(_QWORD **)(a2 + 24);
        if (v9 == v10)
        {
          v20 = 1;
          v11 = 1;
        }
        else
        {
          v11 = 1;
          do
          {
            if (v9[2])
            {
              v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if (!v12)
                v12 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
              if ((*v9 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v12 + 56) & 0xFFFFFFFFFFFFFFF8))
              {
                v14 = (_QWORD *)sub_20BFB46E8((pxrInternal__aapl__pxrReserved__::VtValue *)(v9 + 1));
                sub_20BF32220(&v24, v14);
              }
              else
              {
                v13 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if (!v13)
                  v13 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
                if ((*v9 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v13 + 39) & 0xFFFFFFFFFFFFFFF8))
                  v11 = *(_DWORD *)sub_20C0DE204((pxrInternal__aapl__pxrReserved__::VtValue *)(v9 + 1));
              }
            }
            v9 += 3;
          }
          while (v9 != v10);
          v20 = v24 == 0;
        }
        v21 = v11 == 1 && v20;
        result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CreateSpec((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, 6, v21);
        if ((v24 & 7) != 0)
        {
          v22 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
          do
            v23 = __ldxr(v22);
          while (__stlxr(v23 - 2, v22));
        }
        break;
      case 8:
        v15 = *(_QWORD **)(a2 + 16);
        v16 = *(_QWORD **)(a2 + 24);
        if (v15 == v16)
        {
LABEL_37:
          v19 = 1;
        }
        else
        {
          while (1)
          {
            v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if (!v17)
              v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
            if ((*v15 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 8) & 0xFFFFFFFFFFFFFFF8))
              break;
            v15 += 3;
            if (v15 == v16)
              goto LABEL_37;
          }
          v19 = *(_BYTE *)sub_20BFB0910((pxrInternal__aapl__pxrReserved__::VtValue *)(v15 + 1)) == 0;
        }
        result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::CreateSpec((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, *(unsigned int *)(a2 + 8), v19);
        break;
      case 9:
        result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy>::CreateSpec((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, 9, 1);
        break;
      case 0xA:
        result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy>::CreateSpec((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, 10, 1);
        break;
      case 0xB:
        result = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::CreateSpec((uint64_t)a1, (pxrInternal__aapl__pxrReserved__::SdfPath *)a2, 11, 1);
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_20C0DAE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v10;
  unsigned int v11;

  if ((a10 & 7) != 0)
  {
    v10 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20C0DAE5C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB45CELL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C527D78);
}

void sub_20C0DAED4(const pxrInternal__aapl__pxrReserved__::TfToken **a1, const pxrInternal__aapl__pxrReserved__::TfToken **a2, uint64_t a3)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  char v8;
  unint64_t v10;
  unint64_t v11;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = a2[1];
  v8 = *a1 != v5;
  if (*a1 != v5 && v6 != v7)
  {
    while (1)
    {
      v10 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
      v11 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
      if (v10 != v11)
        break;
      sub_20C0DEF54(a3, v4, 1, 1);
      v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8);
      v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v6 + 8);
LABEL_14:
      v8 = v4 != v5;
      if (v4 == v5 || v6 == v7)
        goto LABEL_20;
    }
    if (v10 >= v11)
    {
      while (v6 != v7)
      {
        if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) >= (*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_14;
        sub_20C0DEF54(a3, v6, 0, 1);
        v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v6 + 8);
      }
      v6 = v7;
    }
    else
    {
      while (v4 != v5)
      {
        if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) >= (*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_14;
        sub_20C0DEF54(a3, v4, 1, 0);
        v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8);
      }
      v4 = v5;
    }
    v8 = v4 != v5;
  }
LABEL_20:
  if (v4 == v5)
  {
    v4 = v6;
    v5 = v7;
  }
  for (; v4 != v5; v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8))
    sub_20C0DEF54(a3, v4, v8, v8 ^ 1);
}

_DWORD *sub_20C0DB02C(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 16);
  sub_20C0DE330(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C0DB074(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 >> 8];
    v6 = (char *)*v5 + 16 * v4;
    v7 = *(uint64_t *)((char *)v2 + (((a1[5] + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
       + 16 * (*((_BYTE *)a1 + 40) + v4);
    if (v6 != (char *)v7)
    {
      do
      {
        sub_20C0DE660(v6);
        v6 += 16;
        if (v6 - (_BYTE *)*v5 == 4096)
        {
          v8 = (char *)v5[1];
          ++v5;
          v6 = v8;
        }
      }
      while (v6 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  a1[5] = 0;
  v9 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v9 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v10 = v9 >> 3;
  if (v10 == 1)
  {
    v11 = 128;
  }
  else
  {
    if (v10 != 2)
      goto LABEL_16;
    v11 = 256;
  }
  a1[4] = v11;
LABEL_16:
  while (v2 != v3)
  {
    v12 = *v2++;
    operator delete(v12);
  }
  return sub_20BE97BCC((uint64_t)a1);
}

void sub_20C0DB9DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, int a18, void ****a19, uint64_t a20,uint64_t a21,void ***a22,uint64_t a23,uint64_t a24,void **a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,uint64_t a38,uint64_t a39)
{
  uint64_t v39;
  uint64_t v41;
  unsigned int *v42;
  unsigned int v43;

  v41 = *(_QWORD *)(v39 - 176);
  if ((v41 & 7) != 0)
  {
    v42 = (unsigned int *)(v41 & 0xFFFFFFFFFFFFFFF8);
    do
      v43 = __ldxr(v42);
    while (__stlxr(v43 - 2, v42));
  }
  *(_QWORD *)(v39 - 184) = &a15;
  sub_20BEEB2B8((void ***)(v39 - 184));
  a15 = (void **)(v39 - 120);
  sub_20BEEB2B8(&a15);
  sub_20BFD1A18(&a18);
  *(_QWORD *)(v39 - 120) = &a19;
  sub_20BEEB2B8((void ***)(v39 - 120));
  a19 = &a22;
  sub_20BEEB2B8((void ***)&a19);
  a22 = &a25;
  sub_20BEEB2B8((void ***)&a22);
  a25 = (void **)&a28;
  sub_20BEEB2B8(&a25);
  sub_20C0DB02C((uint64_t)&a31);
  sub_20C0D9B18(&a37);
  sub_20C0DB074(&a39);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)(v39 - 192));
  _Unwind_Resume(a1);
}

uint64_t sub_20C0DBB80(uint64_t result, uint64_t **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  _BOOL4 v8;
  unint64_t v10;
  unint64_t v11;

  v4 = *(uint64_t **)result;
  v5 = *(uint64_t **)(result + 8);
  v6 = *a2;
  v7 = a2[1];
  v8 = *(_QWORD *)result != (_QWORD)v5;
  if (*(uint64_t **)result != v5 && v6 != v7)
  {
    while (1)
    {
      v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
      v11 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (v10 != v11)
        break;
      result = sub_20C0E200C(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16) + 8, 1, *(_QWORD *)(a3 + 32), (uint64_t *)(*(_QWORD *)(a3 + 40) + 16));
      ++v6;
LABEL_14:
      v8 = v4 != v5;
      if (v4 == v5 || v6 == v7)
        goto LABEL_20;
    }
    if (v10 >= v11)
    {
      while (v6 != v7)
      {
        if ((*v6 & 0xFFFFFFFFFFFFFFF8) >= (*v4 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_14;
        result = sub_20C0E200C(**(_DWORD **)a3, v6++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 0, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16) + 8, 1, *(_QWORD *)(a3 + 32), (uint64_t *)(*(_QWORD *)(a3 + 40) + 16));
      }
      v6 = v7;
    }
    else
    {
      while (v4 != v5)
      {
        if ((*v4 & 0xFFFFFFFFFFFFFFF8) >= (*v6 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_14;
        result = sub_20C0E200C(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16) + 8, 0, *(_QWORD *)(a3 + 32), (uint64_t *)(*(_QWORD *)(a3 + 40) + 16));
      }
      v4 = v5;
    }
    v8 = v4 != v5;
  }
LABEL_20:
  if (v4 == v5)
  {
    v4 = v6;
    v5 = v7;
  }
  for (; v4 != v5; ++v4)
    result = sub_20C0E200C(**(_DWORD **)a3, v4, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), v8, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 16) + 8, !v8, *(_QWORD *)(a3 + 32), (uint64_t *)(*(_QWORD *)(a3 + 40) + 16));
  return result;
}

uint64_t sub_20C0DBD40(uint64_t result, uint64_t **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  _BOOL4 v8;
  unint64_t v10;
  unint64_t v11;

  v4 = *(uint64_t **)result;
  v5 = *(uint64_t **)(result + 8);
  v6 = *a2;
  v7 = a2[1];
  v8 = *(_QWORD *)result != (_QWORD)v5;
  if (*(uint64_t **)result != v5 && v6 != v7)
  {
    while (1)
    {
      v10 = *v4 & 0xFFFFFFFFFFFFFFF8;
      v11 = *v6 & 0xFFFFFFFFFFFFFFF8;
      if (v10 != v11)
        break;
      result = sub_20C0E200C(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32) + 8, 1, *(_QWORD *)(a3 + 40), (uint64_t *)(*(_QWORD *)(a3 + 48) + 16));
      ++v6;
LABEL_14:
      v8 = v4 != v5;
      if (v4 == v5 || v6 == v7)
        goto LABEL_20;
    }
    if (v10 >= v11)
    {
      while (v6 != v7)
      {
        if ((*v6 & 0xFFFFFFFFFFFFFFF8) >= (*v4 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_14;
        result = sub_20C0E200C(**(_DWORD **)a3, v6++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 0, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32) + 8, 1, *(_QWORD *)(a3 + 40), (uint64_t *)(*(_QWORD *)(a3 + 48) + 16));
      }
      v6 = v7;
    }
    else
    {
      while (v4 != v5)
      {
        if ((*v4 & 0xFFFFFFFFFFFFFFF8) >= (*v6 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_14;
        result = sub_20C0E200C(**(_DWORD **)a3, v4++, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), 1, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32) + 8, 0, *(_QWORD *)(a3 + 40), (uint64_t *)(*(_QWORD *)(a3 + 48) + 16));
      }
      v4 = v5;
    }
    v8 = v4 != v5;
  }
LABEL_20:
  if (v4 == v5)
  {
    v4 = v6;
    v5 = v7;
  }
  for (; v4 != v5; ++v4)
    result = sub_20C0E200C(**(_DWORD **)a3, v4, *(uint64_t **)(a3 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a3 + 16), v8, *(_QWORD *)(a3 + 24), *(_QWORD *)(a3 + 32) + 8, !v8, *(_QWORD *)(a3 + 40), (uint64_t *)(*(_QWORD *)(a3 + 48) + 16));
  return result;
}

void sub_20C0DBF10(const pxrInternal__aapl__pxrReserved__::TfToken **a1, const pxrInternal__aapl__pxrReserved__::TfToken **a2, uint64_t a3)
{
  const pxrInternal__aapl__pxrReserved__::TfToken *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  char v8;
  unint64_t v10;
  unint64_t v11;

  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = a2[1];
  v8 = *a1 != v5;
  if (*a1 != v5 && v6 != v7)
  {
    while (1)
    {
      v10 = *(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8;
      v11 = *(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8;
      if (v10 != v11)
        break;
      sub_20C0E2158(a3, v4, 1, 1);
      v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8);
      v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v6 + 8);
LABEL_14:
      v8 = v4 != v5;
      if (v4 == v5 || v6 == v7)
        goto LABEL_20;
    }
    if (v10 >= v11)
    {
      while (v6 != v7)
      {
        if ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) >= (*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_14;
        sub_20C0E2158(a3, v6, 0, 1);
        v6 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v6 + 8);
      }
      v6 = v7;
    }
    else
    {
      while (v4 != v5)
      {
        if ((*(_QWORD *)v4 & 0xFFFFFFFFFFFFFFF8) >= (*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_14;
        sub_20C0E2158(a3, v4, 1, 0);
        v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8);
      }
      v4 = v5;
    }
    v8 = v4 != v5;
  }
LABEL_20:
  if (v4 == v5)
  {
    v4 = v6;
    v5 = v7;
  }
  for (; v4 != v5; v4 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v4 + 8))
    sub_20C0E2158(a3, v4, v8, v8 ^ 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfShouldCopyValue(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, int a7, uint64_t a8, uint64_t a9, uint64_t a10, _BYTE *a11)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v18;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v19;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v20;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v21;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v22;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v23;
  __int128 *v24;
  uint64_t *v25;
  __int128 *v26;
  __int128 *v27;
  BOOL v28;
  _QWORD *v29;
  int HasField;
  int v31;
  uint64_t (***v32)();
  uint64_t v33;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v35;
  uint64_t **v36;
  uint64_t (***v37)();
  uint64_t v38;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v39;
  uint64_t **v40;
  uint64_t (***v41)();
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55[4];
  uint64_t (**v56)();
  __int128 *v57;
  int *v58;
  uint64_t **v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (!a7)
    return 1;
  v16 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v16)
    v16 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 7) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_33;
  v17 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v17)
    v17 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 53) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_33;
  v18 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v18)
    v18 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v18 + 24) & 0xFFFFFFFFFFFFFFF8))
    goto LABEL_33;
  v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v19)
    v19 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v19 + 38) & 0xFFFFFFFFFFFFFFF8))
  {
LABEL_33:
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)&v48);
    v29 = (_QWORD *)sub_20BFCF650(a5);
    v58 = (int *)&stru_24C5249B8;
    LOWORD(v59) = 0;
    v56 = (uint64_t (**)())&unk_24C527D98;
    v57 = &v48;
    HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v29, a6, a4, (uint64_t (***)(_QWORD, uint64_t))&v56);
    if ((_BYTE)v59)
      v31 = 0;
    else
      v31 = HasField;
    if (v31 != 1)
      goto LABEL_43;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1, &v56);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, v55);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    sub_20BFD265C(&v56);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v56);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v46);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v56 + 1);
    sub_20BFD265C(&v56);
    v56 = &off_24C527DD0;
    v57 = (__int128 *)v55;
    v58 = &v46;
    v59 = (uint64_t **)&v56;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::ModifyOperations(&v48, (uint64_t)&v56, 0);
    v32 = (uint64_t (***)())v59;
    if (v59 == (uint64_t **)&v56)
    {
      v33 = 4;
      v32 = &v56;
    }
    else
    {
      if (!v59)
      {
LABEL_42:
        sub_20C02842C((char *)&v48, (pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
        sub_20C0DE3D8(a11, &v56);
        sub_20BF4C2D8((uint64_t)&v56);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v47);
        sub_20BFD265C(&v46);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v55[1]);
        sub_20BFD265C(v55);
LABEL_43:
        v56 = (uint64_t (**)())&v54;
        sub_20BFD6F90((void ***)&v56);
        v56 = (uint64_t (**)())&v53;
        sub_20BFD6F90((void ***)&v56);
        v56 = (uint64_t (**)())&v52;
        sub_20BFD6F90((void ***)&v56);
        v56 = (uint64_t (**)())&v51;
        sub_20BFD6F90((void ***)&v56);
        v56 = (uint64_t (**)())&v50;
        sub_20BFD6F90((void ***)&v56);
        v56 = (uint64_t (**)())&v48 + 1;
        sub_20BFD6F90((void ***)&v56);
        return 1;
      }
      v33 = 5;
    }
    (*v32)[v33]();
    goto LABEL_42;
  }
  v20 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v20)
    v20 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v20 + 35) & 0xFFFFFFFFFFFFFFF8))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)&v48);
    v35 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a5);
    if (!sub_20C0DCA40(v35, a6, a4, (uint64_t (**)(_QWORD, uint64_t))&v48))
    {
LABEL_56:
      sub_20C029B80((void **)&v48);
      return 1;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1, &v56);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, v55);
    sub_20BFD1A18(&v56);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v56);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v46);
    sub_20BFD1A18(&v56);
    v36 = (uint64_t **)operator new(0x20uLL);
    *v36 = (uint64_t *)&unk_24C527E88;
    v36[1] = (uint64_t *)sub_20C0DCA94;
    v36[2] = (uint64_t *)v55;
    v36[3] = (uint64_t *)&v46;
    v59 = v36;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::ModifyOperations(&v48, (uint64_t)&v56, 0);
    v37 = (uint64_t (***)())v59;
    if (v59 == (uint64_t **)&v56)
    {
      v38 = 4;
      v37 = &v56;
    }
    else
    {
      if (!v59)
      {
LABEL_55:
        sub_20C029C08((char *)&v48, (pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
        sub_20C0DE3D8(a11, &v56);
        sub_20BF4C2D8((uint64_t)&v56);
        sub_20BFD1A18(&v46);
        sub_20BFD1A18(v55);
        goto LABEL_56;
      }
      v38 = 5;
    }
    (*v37)[v38]();
    goto LABEL_55;
  }
  v21 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v21)
    v21 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v21 + 30) & 0xFFFFFFFFFFFFFFF8))
  {
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)&v48);
    v39 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a5);
    if (!sub_20C0DCB98(v39, a6, a4, (uint64_t (**)(_QWORD, uint64_t))&v48))
    {
LABEL_60:
      sub_20C02C9C4((void **)&v48);
      return 1;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1, &v56);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, v55);
    sub_20BFD1A18(&v56);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v56);
    pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v46);
    sub_20BFD1A18(&v56);
    v40 = (uint64_t **)operator new(0x20uLL);
    *v40 = (uint64_t *)&unk_24C527F68;
    v40[1] = (uint64_t *)sub_20C0DCBEC;
    v40[2] = (uint64_t *)v55;
    v40[3] = (uint64_t *)&v46;
    v59 = v40;
    pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::ModifyOperations(&v48, (uint64_t)&v56, 0);
    v41 = (uint64_t (***)())v59;
    if (v59 == (uint64_t **)&v56)
    {
      v42 = 4;
      v41 = &v56;
    }
    else
    {
      if (!v59)
      {
LABEL_59:
        sub_20C02CA4C((char *)&v48, (pxrInternal__aapl__pxrReserved__::VtValue *)&v56);
        sub_20C0DE3D8(a11, &v56);
        sub_20BF4C2D8((uint64_t)&v56);
        sub_20BFD1A18(&v46);
        sub_20BFD1A18(v55);
        goto LABEL_60;
      }
      v42 = 5;
    }
    (*v41)[v42]();
    goto LABEL_59;
  }
  v22 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v22)
    v22 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if ((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v22 + 36) & 0xFFFFFFFFFFFFFFF8))
  {
    *((_QWORD *)&v48 + 1) = 0;
    v49 = 0;
    *(_QWORD *)&v48 = (char *)&v48 + 8;
    v23 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a5);
    if (sub_20C0DCD68(v23, a6, a4, (uint64_t (**)(_QWORD, uint64_t))&v48))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1, &v56);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v46);
      sub_20BFD1A18(&v56);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v56);
      pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v56, &v45);
      sub_20BFD1A18(&v56);
      v57 = 0;
      v58 = 0;
      v56 = (uint64_t (**)())&v57;
      v24 = (__int128 *)v48;
      if ((__int128 *)v48 != (__int128 *)((char *)&v48 + 8))
      {
        do
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v44, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, 1);
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v43, (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v24 + 36), (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v46, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v45, 1);
          *(_QWORD *)v55 = &v44;
          v25 = sub_20C0E4490((uint64_t **)&v56, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v44, (uint64_t)&unk_20CAC184C, (_DWORD **)v55);
          sub_20C01A074((int *)v25 + 9, &v43);
          sub_20C01A0C8((int *)v25 + 10, (_DWORD *)&v43 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v43 + 1);
          sub_20BFD265C(&v43);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
          sub_20BFD265C(&v44);
          v26 = (__int128 *)*((_QWORD *)v24 + 1);
          if (v26)
          {
            do
            {
              v27 = v26;
              v26 = *(__int128 **)v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              v27 = (__int128 *)*((_QWORD *)v24 + 2);
              v28 = *(_QWORD *)v27 == (_QWORD)v24;
              v24 = v27;
            }
            while (!v28);
          }
          v24 = v27;
        }
        while (v27 != (__int128 *)((char *)&v48 + 8));
      }
      sub_20C0DCDBC((uint64_t)&v56, (pxrInternal__aapl__pxrReserved__::VtValue *)v55);
      sub_20C0DE3D8(a11, v55);
      sub_20BF4C2D8((uint64_t)v55);
      sub_20BFE4CE8((uint64_t)&v56, v57);
      sub_20BFD1A18(&v45);
      sub_20BFD1A18(&v46);
    }
    sub_20BFE4CE8((uint64_t)&v48, *((_QWORD **)&v48 + 1));
  }
  return 1;
}

void sub_20C0DC7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, int a13, int a14, int a15, char a16, _QWORD *a17)
{
  uint64_t v17;

  sub_20BF4C2D8(v17 - 136);
  sub_20BFE4CE8(v17 - 120, *(_QWORD **)(v17 - 112));
  sub_20BFD1A18(&a12);
  sub_20BFD1A18(&a14);
  sub_20BFE4CE8((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0DCA40(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C524CE0;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C527E50;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

char *sub_20C0DCA94@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  uint64_t v11;

  v6 = *(unsigned __int8 *)(a1 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  if (v6)
    return sub_20C029E64((char *)a4, (__int128 *)a1);
  v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24);
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 24))
    || pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24)))
  {
    return sub_20C029E64((char *)a4, (__int128 *)a1);
  }
  sub_20C029E64((char *)a4, (__int128 *)a1);
  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v11, v9, a2, a3, 1);
  sub_20C01A074((int *)(a4 + 24), &v11);
  sub_20C01A0C8((int *)(a4 + 28), (_DWORD *)&v11 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v11 + 1);
  return (char *)sub_20BFD265C(&v11);
}

void sub_20C0DCB80(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C029F94(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0DCB98(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C524CD0;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C527F30;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

_DWORD *sub_20C0DCBEC@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfPath *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfPath *v9;
  int IsRootPrimPath;
  _DWORD *result;
  uint64_t v12;

  v5 = a4;
  v6 = *(unsigned __int8 *)(a1 + 23);
  LOBYTE(a4) = v6;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
  {
    v9 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24);
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 24)))
    {
      IsRootPrimPath = pxrInternal__aapl__pxrReserved__::SdfPath::IsRootPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a1 + 24));
      LODWORD(a4) = *(char *)(a1 + 23);
      if (!IsRootPrimPath)
      {
        if ((a4 & 0x80000000) != 0)
        {
          sub_20BDDBFAC((_BYTE *)v5, *(void **)a1, *(_QWORD *)(a1 + 8));
        }
        else
        {
          *(_OWORD *)v5 = *(_OWORD *)a1;
          *(_QWORD *)(v5 + 16) = *(_QWORD *)(a1 + 16);
        }
        sub_20BFD6E54((_DWORD *)(v5 + 24), (_DWORD *)(a1 + 24));
        sub_20BFD6EA4((_DWORD *)(v5 + 28), (_DWORD *)(a1 + 28));
        *(_OWORD *)(v5 + 32) = *(_OWORD *)(a1 + 32);
        pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v12, v9, a2, a3, 1);
        sub_20C01A074((int *)(v5 + 24), &v12);
        sub_20C01A0C8((int *)(v5 + 28), (_DWORD *)&v12 + 1);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v12 + 1);
        return sub_20BFD265C(&v12);
      }
    }
    else
    {
      LOBYTE(a4) = *(_BYTE *)(a1 + 23);
    }
  }
  if ((a4 & 0x80) != 0)
  {
    sub_20BDDBFAC((_BYTE *)v5, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v5 = *(_OWORD *)a1;
    *(_QWORD *)(v5 + 16) = *(_QWORD *)(a1 + 16);
  }
  sub_20BFD6E54((_DWORD *)(v5 + 24), (_DWORD *)(a1 + 24));
  result = sub_20BFD6EA4((_DWORD *)(v5 + 28), (_DWORD *)(a1 + 28));
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(a1 + 32);
  return result;
}

void sub_20C0DCD50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C02CDE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0DCD68(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (**a4)(_QWORD, uint64_t))
{
  uint64_t result;
  uint64_t (**v5[3])(_QWORD, uint64_t);
  __int16 v6;

  if (!a4)
    return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, 0);
  v5[2] = (uint64_t (**)(_QWORD, uint64_t))&stru_24C528000;
  v6 = 0;
  v5[0] = (uint64_t (**)(_QWORD, uint64_t))&unk_24C528020;
  v5[1] = a4;
  LODWORD(result) = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(a1, a2, a3, v5);
  if ((_BYTE)v6)
    return 0;
  else
    return result;
}

uint64_t *sub_20C0DCDBC@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((_QWORD *)a2 + 1) = 0;
  return sub_20C0E458C(a2, a1);
}

void sub_20C0DCDE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfShouldCopyChildren(pxrInternal__aapl__pxrReserved__::SdfPath *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t *a4, pxrInternal__aapl__pxrReserved__::SdfPath *a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, _BYTE *a10, _BYTE *a11)
{
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v18;
  _QWORD *v19;
  int HasField;
  int v21;
  pxrInternal__aapl__pxrReserved__::SdfPath *v22;
  pxrInternal__aapl__pxrReserved__::SdfPath *i;
  int *v24;
  int v26;
  int v27;
  int v28;
  int v29;
  pxrInternal__aapl__pxrReserved__::SdfPath *v30;
  pxrInternal__aapl__pxrReserved__::SdfPath *v31;
  uint64_t v32;
  pxrInternal__aapl__pxrReserved__::SdfPath **v33;
  std::type_info **v34;
  std::type_info *v35;
  __int16 v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  if (a6)
  {
    v16 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v16)
      v16 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_11;
    v17 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v17)
      v17 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 6) & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_11;
    v18 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v18)
      v18 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if ((*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v18 + 3) & 0xFFFFFFFFFFFFFFF8))
    {
LABEL_11:
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v19 = (_QWORD *)sub_20BFCF650(a4);
      v35 = &stru_24C5269C8;
      v36 = 0;
      v33 = (pxrInternal__aapl__pxrReserved__::SdfPath **)&unk_24C528110;
      v34 = (std::type_info **)&v30;
      HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(v19, a5, a3, (uint64_t (***)(_QWORD, uint64_t))&v33);
      if ((_BYTE)v36)
        v21 = 0;
      else
        v21 = HasField;
      if (v21 == 1)
      {
        v34 = &off_24C526910;
        sub_20C030C78(&v33, (_DWORD **)&v30);
        sub_20C0DE3D8(a10, &v33);
        sub_20BF4C2D8((uint64_t)&v33);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a1, &v33);
        pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, &v28);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
        sub_20BFD265C(&v33);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetPrimPath(a2, &v33);
        pxrInternal__aapl__pxrReserved__::SdfPath::StripAllVariantSelections((pxrInternal__aapl__pxrReserved__::SdfPath *)&v33, &v26);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
        sub_20BFD265C(&v33);
        v22 = v30;
        for (i = v31; v22 != i; v22 = (pxrInternal__aapl__pxrReserved__::SdfPath *)(v24 + 1))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix((uint64_t *)&v33, v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v28, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v26, 1);
          sub_20BFD3EBC((int *)v22, (int *)&v33);
          v24 = (int *)((char *)v22 + 4);
          sub_20BFD3F10(v24, (int *)&v33 + 1);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
          sub_20BFD265C(&v33);
        }
        sub_20C0DD144((uint64_t *)&v30, (pxrInternal__aapl__pxrReserved__::VtValue *)&v33);
        sub_20C0DE3D8(a11, &v33);
        sub_20BF4C2D8((uint64_t)&v33);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v27);
        sub_20BFD265C(&v26);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v29);
        sub_20BFD265C(&v28);
      }
      v33 = &v30;
      sub_20BFD6F90((void ***)&v33);
    }
  }
  return 1;
}

void sub_20C0DD0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C0DD144@<X0>(uint64_t *a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((_QWORD *)a2 + 1) = 0;
  return sub_20C0E4C5C(a2, a1);
}

void sub_20C0DD170(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfCopySpec(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4)
{
  int *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  char v16[24];
  char *v17;
  int v18[6];
  int *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v8 = (int *)operator new(0x20uLL);
  *(_QWORD *)v8 = &unk_24C528148;
  *((_QWORD *)v8 + 1) = pxrInternal__aapl__pxrReserved__::SdfShouldCopyValue;
  *((_QWORD *)v8 + 2) = a2;
  *((_QWORD *)v8 + 3) = a4;
  v19 = v8;
  v9 = (char *)operator new(0x20uLL);
  *(_QWORD *)v9 = &unk_24C5281F0;
  *((_QWORD *)v9 + 1) = pxrInternal__aapl__pxrReserved__::SdfShouldCopyChildren;
  *((_QWORD *)v9 + 2) = a2;
  *((_QWORD *)v9 + 3) = a4;
  v17 = v9;
  v10 = pxrInternal__aapl__pxrReserved__::SdfCopySpec(a1, a2, a3, a4, v18, v16);
  v11 = v17;
  if (v17 == v16)
  {
    v12 = 4;
    v11 = v16;
  }
  else
  {
    if (!v17)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_6:
  v13 = v19;
  if (v19 == v18)
  {
    v14 = 4;
    v13 = v18;
    goto LABEL_10;
  }
  if (v19)
  {
    v14 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v13 + 8 * v14))();
  }
  return v10;
}

void sub_20C0DD2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0DD334(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if ((v20 & 0xFFFFFFFFFFFFFFF8) < (*v9 & 0xFFFFFFFFFFFFFFF8))
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return sub_20C0DD794(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return sub_20C0DDC18(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return sub_20C0DDCB0(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_20C0DD674(v9, a2);
          else
            return (uint64_t)sub_20C0DD718(v9, a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_20C0DD794(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_20C0DD794(v9, &v9[v13 >> 1], a2 - 1);
            sub_20C0DD794(v9 + 1, v15 - 1, a2 - 2);
            sub_20C0DD794(v9 + 2, &v9[v14 + 1], a2 - 3);
            sub_20C0DD794(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if ((*(v9 - 1) & 0xFFFFFFFFFFFFFFF8) >= (*v9 & 0xFFFFFFFFFFFFFFF8))
          {
            result = (uint64_t)sub_20C0DD834(v9, a2);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = sub_20C0DD940(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = sub_20C0DDA4C(v9, v17);
          v9 = v17 + 1;
          result = sub_20C0DDA4C(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = sub_20C0DD334(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_20C0DDD74(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t *sub_20C0DD674(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  unsigned int *v10;
  unsigned int v11;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v6 = *v4;
        v5 = v4[1];
        v4 = v2;
        if ((v5 & 0xFFFFFFFFFFFFFFF8) < (v6 & 0xFFFFFFFFFFFFFFF8))
        {
          *v2 = 0;
          v7 = v3;
          while (1)
          {
            v8 = (uint64_t *)((char *)result + v7);
            *v8 = 0;
            v8[1] = v6;
            if (!v7)
              break;
            v6 = *(v8 - 1);
            v7 -= 8;
            if ((v5 & 0xFFFFFFFFFFFFFFF8) >= (v6 & 0xFFFFFFFFFFFFFFF8))
            {
              v9 = (uint64_t *)((char *)result + v7 + 8);
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          if ((*v9 & 7) != 0)
          {
            v10 = (unsigned int *)(*v9 & 0xFFFFFFFFFFFFFFF8);
            do
              v11 = __ldxr(v10);
            while (__stlxr(v11 - 2, v10));
          }
          *v9 = v5;
        }
        v2 = v4 + 1;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

_QWORD *sub_20C0DD718(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  unsigned int *v6;
  unsigned int v7;

  if (result != a2)
  {
    while (result + 1 != a2)
    {
      v3 = *result;
      v2 = result[1];
      ++result;
      if ((v2 & 0xFFFFFFFFFFFFFFF8) < (v3 & 0xFFFFFFFFFFFFFFF8))
      {
        *result = 0;
        v4 = result;
        do
        {
          v5 = v4;
          *v4 = v3;
          *--v4 = 0;
          v3 = *(v5 - 2);
        }
        while ((v2 & 0xFFFFFFFFFFFFFFF8) < (v3 & 0xFFFFFFFFFFFFFFF8));
        if ((*v4 & 7) != 0)
        {
          v6 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
          do
            v7 = __ldxr(v6);
          while (__stlxr(v7 - 2, v6));
        }
        *v4 = v2;
      }
    }
  }
  return result;
}

uint64_t sub_20C0DD794(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *a2 & 0xFFFFFFFFFFFFFFF8;
  v5 = *a1;
  v6 = *a1 & 0xFFFFFFFFFFFFFFF8;
  v7 = *a3;
  v8 = *a3 & 0xFFFFFFFFFFFFFFF8;
  if (v4 < v6)
  {
    if (v8 < v4)
    {
      *a1 = v7;
      *a3 = v5;
      return 1;
    }
    *a1 = v3;
    *a2 = v5;
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) >= v6)
      return 1;
    *a2 = *a3;
    *a3 = v5;
    return 2;
  }
  if (v8 < v4)
  {
    *a2 = v7;
    *a3 = v3;
    v9 = *a1;
    if ((*a2 & 0xFFFFFFFFFFFFFFF8) >= (*a1 & 0xFFFFFFFFFFFFFFF8))
      return 1;
    *a1 = *a2;
    *a2 = v9;
    return 2;
  }
  return 0;
}

uint64_t *sub_20C0DD834(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;

  v2 = result;
  v3 = *result;
  *result = 0;
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  if ((v3 & 0xFFFFFFFFFFFFFFF8) >= (*(a2 - 1) & 0xFFFFFFFFFFFFFFF8))
  {
    v6 = result + 1;
    do
    {
      result = v6;
      if (v6 >= a2)
        break;
      ++v6;
    }
    while (v4 >= (*result & 0xFFFFFFFFFFFFFFF8));
  }
  else
  {
    do
    {
      v5 = result[1];
      ++result;
    }
    while (v4 >= (v5 & 0xFFFFFFFFFFFFFFF8));
  }
  if (result < a2)
  {
    do
      v7 = *--a2;
    while (v4 < (v7 & 0xFFFFFFFFFFFFFFF8));
  }
  if (result < a2)
  {
    v8 = *result;
    v9 = *a2;
    do
    {
      *result = v9;
      *a2 = v8;
      do
      {
        v10 = result[1];
        ++result;
        v8 = v10;
      }
      while (v4 >= (v10 & 0xFFFFFFFFFFFFFFF8));
      do
      {
        v11 = *--a2;
        v9 = v11;
      }
      while (v4 < (v11 & 0xFFFFFFFFFFFFFFF8));
    }
    while (result < a2);
  }
  v12 = *v2;
  v13 = *v2 & 7;
  if (result - 1 == v2)
  {
    if (v13)
    {
      v16 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v17 = __ldxr(v16);
      while (__stlxr(v17 - 2, v16));
    }
  }
  else
  {
    if (v13)
    {
      v14 = (unsigned int *)(v12 & 0xFFFFFFFFFFFFFFF8);
      do
        v15 = __ldxr(v14);
      while (__stlxr(v15 - 2, v14));
    }
    *v2 = *(result - 1);
  }
  *(result - 1) = v3;
  return result;
}

uint64_t *sub_20C0DD940(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;

  v2 = 0;
  v3 = *a1;
  *a1 = 0;
  v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  do
    v5 = a1[++v2];
  while ((v5 & 0xFFFFFFFFFFFFFFF8) < v4);
  v6 = &a1[v2];
  v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= a2)
        break;
      v9 = *--a2;
    }
    while ((v9 & 0xFFFFFFFFFFFFFFF8) >= v4);
  }
  else
  {
    do
      v8 = *--a2;
    while ((v8 & 0xFFFFFFFFFFFFFFF8) >= v4);
  }
  if (v6 < a2)
  {
    v10 = *a2;
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      *v11 = v10;
      *v12 = v5;
      do
      {
        v13 = v11[1];
        ++v11;
        v5 = v13;
      }
      while ((v13 & 0xFFFFFFFFFFFFFFF8) < v4);
      do
      {
        v14 = *--v12;
        v10 = v14;
      }
      while ((v14 & 0xFFFFFFFFFFFFFFF8) >= v4);
    }
    while (v11 < v12);
    v7 = v11 - 1;
  }
  v15 = *a1;
  v16 = *a1 & 7;
  if (v7 == a1)
  {
    if (v16)
    {
      v19 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v20 = __ldxr(v19);
      while (__stlxr(v20 - 2, v19));
    }
  }
  else
  {
    if (v16)
    {
      v17 = (unsigned int *)(v15 & 0xFFFFFFFFFFFFFFF8);
      do
        v18 = __ldxr(v17);
      while (__stlxr(v18 - 2, v17));
    }
    *a1 = *v7;
  }
  *v7 = v3;
  return v7;
}

BOOL sub_20C0DDA4C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int *v18;
  unsigned int v19;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if ((v6 & 0xFFFFFFFFFFFFFFF8) < (*a1 & 0xFFFFFFFFFFFFFFF8))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_20C0DD794(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_20C0DDC18(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_20C0DDCB0(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_20C0DD794(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      break;
  }
  while (1)
  {
    v11 = *v9;
    v12 = *v9 & 0xFFFFFFFFFFFFFFF8;
    v13 = *v8;
    if (v12 < (*v8 & 0xFFFFFFFFFFFFFFF8))
    {
      *v9 = 0;
      v14 = v9;
      while (1)
      {
        v15 = v8;
        if (v8 != v14)
        {
          if ((*v14 & 7) != 0)
          {
            v16 = (unsigned int *)(*v14 & 0xFFFFFFFFFFFFFFF8);
            do
              v17 = __ldxr(v16);
            while (__stlxr(v17 - 2, v16));
            v13 = *v8;
          }
          *v14 = v13;
          *v8 = 0;
        }
        if (v8 == a1)
          break;
        --v8;
        v13 = *(v15 - 1);
        v14 = v15;
        if (v12 >= (v13 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_18;
      }
      v15 = a1;
LABEL_18:
      if ((*v15 & 7) != 0)
      {
        v18 = (unsigned int *)(*v15 & 0xFFFFFFFFFFFFFFF8);
        do
          v19 = __ldxr(v18);
        while (__stlxr(v19 - 2, v18));
      }
      *v15 = v11;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9++;
    if (v9 == a2)
      return 1;
  }
}

uint64_t sub_20C0DDC18(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_20C0DD794(a1, a2, a3);
  v9 = *a3;
  if ((*a4 & 0xFFFFFFFFFFFFFFF8) < (*a3 & 0xFFFFFFFFFFFFFFF8))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if ((*a3 & 0xFFFFFFFFFFFFFFF8) < (*a2 & 0xFFFFFFFFFFFFFFF8))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if ((*a2 & 0xFFFFFFFFFFFFFFF8) < (*a1 & 0xFFFFFFFFFFFFFFF8))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_20C0DDCB0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_20C0DDC18(a1, a2, a3, a4);
  v11 = *a4;
  if ((*a5 & 0xFFFFFFFFFFFFFFF8) < (*a4 & 0xFFFFFFFFFFFFFFF8))
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if ((*a4 & 0xFFFFFFFFFFFFFFF8) < (*a3 & 0xFFFFFFFFFFFFFFF8))
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if ((*a3 & 0xFFFFFFFFFFFFFFF8) < (*a2 & 0xFFFFFFFFFFFFFFF8))
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if ((*a2 & 0xFFFFFFFFFFFFFFF8) < (*a1 & 0xFFFFFFFFFFFFFFF8))
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_20C0DDD74(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int *v23;
  unsigned int v24;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        sub_20C0DDF1C((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if ((*v14 & 0xFFFFFFFFFFFFFFF8) < (*a1 & 0xFFFFFFFFFFFFFFF8))
        {
          *v14 = *a1;
          *a1 = v15;
          sub_20C0DDF1C((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = *a1;
        *a1 = 0;
        v18 = sub_20C0DE054(a1, a4, v16);
        --v6;
        v19 = *v18;
        v20 = *v18 & 7;
        if (v18 == v6)
        {
          if (v20)
          {
            v23 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
            do
              v24 = __ldxr(v23);
            while (__stlxr(v24 - 2, v23));
          }
          *v18 = v17;
        }
        else
        {
          if (v20)
          {
            v21 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
            do
              v22 = __ldxr(v21);
            while (__stlxr(v22 - 2, v21));
          }
          *v18 = *v6;
          *v6 = v17;
          sub_20C0DE0F4((uint64_t)a1, (uint64_t)(v18 + 1), a4, v18 + 1 - a1);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_20C0DDF1C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;

  if (a3 >= 2)
  {
    v4 = (unint64_t)(a3 - 2) >> 1;
    if (v4 >= ((uint64_t)a4 - result) >> 3)
    {
      v5 = ((uint64_t)a4 - result) >> 2;
      v6 = v5 + 1;
      v7 = (uint64_t *)(result + 8 * (v5 + 1));
      v8 = v5 + 2;
      if (v5 + 2 >= a3)
      {
        v9 = *v7;
      }
      else
      {
        v9 = *v7;
        if ((*v7 & 0xFFFFFFFFFFFFFFF8) < (v7[1] & 0xFFFFFFFFFFFFFFF8))
        {
          v9 = v7[1];
          ++v7;
          v6 = v8;
        }
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      v11 = *a4;
      v12 = *a4 & 0xFFFFFFFFFFFFFFF8;
      if (v10 >= v12)
      {
        *a4 = 0;
        do
        {
          v13 = v7;
          if (v7 != a4)
          {
            if ((*a4 & 7) != 0)
            {
              v14 = (unsigned int *)(*a4 & 0xFFFFFFFFFFFFFFF8);
              do
                v15 = __ldxr(v14);
              while (__stlxr(v15 - 2, v14));
            }
            *a4 = *v13;
            *v13 = 0;
          }
          if (v4 < v6)
            break;
          v16 = (2 * v6) | 1;
          v7 = (uint64_t *)(result + 8 * v16);
          v6 = 2 * v6 + 2;
          if (v6 >= a3)
          {
            v17 = *v7;
            v6 = v16;
          }
          else
          {
            v17 = *v7;
            if ((*v7 & 0xFFFFFFFFFFFFFFF8) >= (v7[1] & 0xFFFFFFFFFFFFFFF8))
            {
              v6 = v16;
            }
            else
            {
              v17 = v7[1];
              ++v7;
            }
          }
          a4 = v13;
        }
        while ((v17 & 0xFFFFFFFFFFFFFFF8) >= v12);
        if ((*v13 & 7) != 0)
        {
          v18 = (unsigned int *)(*v13 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stlxr(v19 - 2, v18));
        }
        *v13 = v11;
      }
    }
  }
  return result;
}

_QWORD *sub_20C0DE054(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = &a1[v3 + 1];
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    if (v7 + 2 < a3 && (*v6 & 0xFFFFFFFFFFFFFFF8) < (v6[1] & 0xFFFFFFFFFFFFFFF8))
    {
      ++v6;
      v3 = v7 + 2;
    }
    if (v6 != a1)
    {
      if ((*a1 & 7) != 0)
      {
        v8 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
        do
          v9 = __ldxr(v8);
        while (__stlxr(v9 - 2, v8));
      }
      *a1 = *v6;
      *v6 = 0;
    }
    a1 = v6;
  }
  while (v3 <= v5);
  return v6;
}

uint64_t sub_20C0DE0F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (_QWORD *)(result + 8 * (v4 >> 1));
    v9 = *(_QWORD *)(a2 - 8);
    v7 = (_QWORD *)(a2 - 8);
    v8 = v9;
    v10 = v9 & 0xFFFFFFFFFFFFFFF8;
    if ((*v6 & 0xFFFFFFFFFFFFFFF8) < (v9 & 0xFFFFFFFFFFFFFFF8))
    {
      *v7 = 0;
      do
      {
        v11 = v6;
        if (v6 != v7)
        {
          if ((*v7 & 7) != 0)
          {
            v12 = (unsigned int *)(*v7 & 0xFFFFFFFFFFFFFFF8);
            do
              v13 = __ldxr(v12);
            while (__stlxr(v13 - 2, v12));
          }
          *v7 = *v11;
          *v11 = 0;
        }
        if (!v5)
          break;
        v5 = (v5 - 1) >> 1;
        v6 = (_QWORD *)(result + 8 * v5);
        v7 = v11;
      }
      while ((*v6 & 0xFFFFFFFFFFFFFFF8) < v10);
      if ((*v11 & 7) != 0)
      {
        v14 = (unsigned int *)(*v11 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
      *v11 = v8;
    }
  }
  return result;
}

uint64_t *sub_20C0DE1A4(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v4 = *a2;
  *a1 = *a2;
  if ((v4 & 7) != 0)
  {
    v5 = (unsigned int *)(v4 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 2, v5));
    if ((v6 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BF4C200(a1 + 1, a3);
  return a1;
}

uint64_t sub_20C0DE204(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;
  uint64_t result;

  if ((sub_20C0DE26C(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C0DE2E4, (uint64_t)&stru_24C527CB0);
  v2 = *((_QWORD *)a1 + 1);
  result = (uint64_t)a1;
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  return result;
}

uint64_t sub_20C0DE26C(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CABC3EELL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C527CB0);
}

_DWORD *sub_20C0DE2E4@<X0>(_QWORD *a1@<X8>)
{
  _DWORD *result;

  result = operator new(4uLL);
  *result = 0;
  *a1 = result;
  a1[1] = sub_20C0DE324;
  a1[2] = &stru_24C527CB0;
  return result;
}

void sub_20C0DE324(void *__p)
{
  if (__p)
    operator delete(__p);
}

void sub_20C0DE330(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C0DE370((uint64_t)v2, (uint64_t)*v2);
    operator delete(**a1);
  }
}

uint64_t sub_20C0DE370(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v3 = result;
  for (i = *(_QWORD *)(result + 8); i != a2; i -= 24)
  {
    result = sub_20BF4C2D8(i - 16);
    v6 = *(_QWORD *)(i - 24);
    v5 = v6;
    if ((v6 & 7) != 0)
    {
      v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
      do
        v8 = __ldxr(v7);
      while (__stlxr(v8 - 2, v7));
    }
  }
  *(_QWORD *)(v3 + 8) = a2;
  return result;
}

_QWORD *sub_20C0DE3D8(_BYTE *a1, _QWORD *a2)
{
  _QWORD *v3;
  int v4;
  _QWORD *result;

  v4 = *a1;
  v3 = a1 + 8;
  if (v4)
    return sub_20BF4B5D8(v3, a2);
  result = sub_20BF4C200(v3, a2);
  *a1 = 1;
  return result;
}

void sub_20C0DE414(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v4 = *(char **)(a1 + 16);
  if (v4 == *(char **)(a1 + 24))
  {
    v6 = *(char **)a1;
    v5 = *(char **)(a1 + 8);
    if ((unint64_t)v5 <= *(_QWORD *)a1)
    {
      if (v4 == v6)
        v14 = 1;
      else
        v14 = (v4 - v6) >> 2;
      if (v14 >> 61)
        sub_20BDDF5B4();
      v15 = (char *)operator new(8 * v14);
      v16 = &v15[8 * (v14 >> 2)];
      v18 = v4 - v5;
      v17 = v4 == v5;
      v4 = v16;
      if (!v17)
      {
        v4 = &v16[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = &v15[8 * (v14 >> 2)];
        do
        {
          v21 = *(_QWORD *)v5;
          v5 += 8;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *(_QWORD *)a1 = v15;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = &v15[8 * v14];
      if (v6)
      {
        operator delete(v6);
        v4 = *(char **)(a1 + 16);
      }
    }
    else
    {
      v7 = (uint64_t)&v5[-*(_QWORD *)a1] >> 3;
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = -(v8 >> 1);
      v10 = v8 >> 1;
      v11 = &v5[-8 * v10];
      v12 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v10], *(const void **)(a1 + 8), v4 - v5);
        v4 = *(char **)(a1 + 8);
      }
      v13 = &v4[8 * v9];
      v4 = &v11[v12];
      *(_QWORD *)(a1 + 8) = v13;
      *(_QWORD *)(a1 + 16) = &v11[v12];
    }
  }
  *(_QWORD *)v4 = *a2;
  *(_QWORD *)(a1 + 16) += 8;
}

void sub_20C0DE534(void **a1, _QWORD *a2)
{
  _QWORD *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;

  v4 = a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - (_BYTE *)v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v15 = 1;
      else
        v15 = v14;
      if (v15 >> 61)
        sub_20BDDF5B4();
      v16 = (char *)operator new(8 * v15);
      v5 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
      v17 = v5;
      v18 = v7 - (_BYTE *)v4;
      if (v7 != (_BYTE *)v4)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = &v16[(2 * v15 + 6) & 0xFFFFFFFFFFFFFFF8];
        v21 = v4;
        do
        {
          v22 = *v21++;
          *(_QWORD *)v20 = v22;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      *a1 = v16;
      a1[1] = v5;
      a1[2] = v17;
      a1[3] = &v16[8 * v15];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - (_BYTE *)v4)];
      if (v7 != (_BYTE *)v4)
      {
        memmove(&v11[-(v7 - (_BYTE *)v4)], v4, v7 - (_BYTE *)v4);
        v4 = a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

_DWORD *sub_20C0DE660(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 3);
  sub_20BFD265C(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

uint64_t sub_20C0DE6A0(int a1, uint64_t *a2, uint64_t *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  _QWORD v15[2];
  char v16;
  _QWORD v17[3];

  v17[2] = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  result = sub_20C0DE7F4(a9, a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5);
  if ((_DWORD)result)
  {
    v15[1] = 0;
    sub_20C0DE848(a10, a2, v15);
    sub_20BF4C2D8((uint64_t)v15);
    if (v16)
    {
      result = (uint64_t)sub_20BFD3C3C(v17, (_QWORD *)(a10[1] - 16));
    }
    else
    {
      v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v14, a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      sub_20BFD3C3C(v15, (_QWORD *)(a10[1] - 16));
      result = sub_20BF4C2D8((uint64_t)v15);
    }
  }
  if (v16)
    return sub_20BF4C2D8((uint64_t)v17);
  return result;
}

void sub_20C0DE7C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14)
{
  if (a13)
    sub_20BF4C2D8((uint64_t)&a14);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0DE7F4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  char v8;
  int v9;

  v9 = a2;
  v8 = a6;
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
    sub_20BE9E974();
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)v6 + 48))(v6, &v9, a3, a4, a5, &v8);
}

uint64_t sub_20C0DE848(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 3);
    if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_20BDDF694();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    v13 = 2 * v12;
    if (2 * v12 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x555555555555555)
      v14 = 0xAAAAAAAAAAAAAAALL;
    else
      v14 = v13;
    v21 = v6;
    if (v14)
      v15 = (char *)sub_20BDE4FF4(v6, v14);
    else
      v15 = 0;
    v17 = v15;
    v18 = (uint64_t *)&v15[24 * v11];
    v20 = &v15[24 * v14];
    sub_20C0DE1A4(v18, a2, a3);
    v19 = v18 + 3;
    sub_20C0DE978(a1, &v17);
    v10 = a1[1];
    sub_20C0DEB28((uint64_t)&v17);
  }
  else
  {
    sub_20C0DE1A4(*(uint64_t **)(v6 - 8), a2, a3);
    v10 = v9 + 24;
    a1[1] = v9 + 24;
  }
  a1[1] = v10;
  return v10 - 24;
}

void sub_20C0DE964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0DEB28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0DE978(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_20C0DE9EC((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_20C0DE9EC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(v9 - 3);
      v9 -= 3;
      *(_QWORD *)(v7 - 24) = v10;
      *v9 = 0;
      sub_20BF4C200((_QWORD *)(v7 - 16), v9 + 1);
      v7 = *((_QWORD *)&v16 + 1) - 24;
      *((_QWORD *)&v16 + 1) -= 24;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  sub_20C0DEA98((uint64_t)v13);
  return v11;
}

uint64_t sub_20C0DEA98(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C0DEACC(a1);
  return a1;
}

uint64_t sub_20C0DEACC(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  unsigned int *v3;
  unsigned int v4;

  v1 = *(_QWORD **)(*(_QWORD *)(result + 16) + 8);
  v2 = *(_QWORD **)(*(_QWORD *)(result + 8) + 8);
  while (v1 != v2)
  {
    result = sub_20BF4C2D8((uint64_t)(v1 + 1));
    if ((*v1 & 7) != 0)
    {
      v3 = (unsigned int *)(*v1 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    v1 += 3;
  }
  return result;
}

uint64_t sub_20C0DEB28(uint64_t a1)
{
  sub_20C0DEB5C(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20C0DEB5C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v2 = *(_QWORD *)(result + 16);
  if (v2 != a2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(v4 + 16) = v2 - 24;
      result = sub_20BF4C2D8(v2 - 16);
      v5 = *(_QWORD *)(v2 - 24);
      if ((v5 & 7) != 0)
      {
        v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
        do
          v7 = __ldxr(v6);
        while (__stlxr(v7 - 2, v6));
      }
      v2 = *(_QWORD *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

_QWORD *sub_20C0DEBCC(_QWORD *a1, _QWORD *a2)
{
  unsigned int *v3;
  unsigned int v4;

  if (a2 != a1)
  {
    if ((*a1 & 7) != 0)
    {
      v3 = (unsigned int *)(*a1 & 0xFFFFFFFFFFFFFFF8);
      do
        v4 = __ldxr(v3);
      while (__stlxr(v4 - 2, v3));
    }
    *a1 = *a2;
    *a2 = 0;
  }
  sub_20BF4B5D8(a1 + 1, a2 + 1);
  return a1;
}

_QWORD *sub_20C0DEC2C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_20C0DEBCC(a3, v4);
      v4 += 3;
      a3 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

_DWORD *sub_20C0DEC88(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_20C0DEC98(_DWORD *result, _DWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t sub_20C0DECA4()
{
  return 1;
}

unint64_t sub_20C0DECAC(unsigned int *a1)
{
  return bswap64(0x9E3779B97F4A7C55 * *a1);
}

BOOL sub_20C0DECCC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

BOOL sub_20C0DECE0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_20C0DECF8()
{
  return 0;
}

void *sub_20C0DED08()
{
  return &unk_24C527CB0;
}

uint64_t sub_20C0DED14()
{
  return 0;
}

uint64_t sub_20C0DED1C()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C0DED28()
{
  return 0;
}

uint64_t sub_20C0DED30()
{
  return 0;
}

BOOL sub_20C0DED38(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CABC3EELL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C0DED70(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527CB0, a2, a3);
}

void *sub_20C0DED90()
{
  return &unk_24C527CB0;
}

_DWORD *sub_20C0DEDA0@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = (char *)&off_24C527CC0 + 3;
  *(_DWORD *)a2 = *result;
  return result;
}

_QWORD *sub_20C0DEDBC(unsigned int *a1, _QWORD *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  void *__p[2];
  unsigned __int8 v8;

  pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&stru_24C527CB0, *a1, (uint64_t)__p);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_20BDDC1C8(a2, (uint64_t)v3, v4);
  if ((char)v8 < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_20C0DEE30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0DEE4C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)sub_20BDE4FF4(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[24 * v9];
  *(_QWORD *)v11 = *a2;
  *a2 = 0;
  sub_20BF4C200((_QWORD *)v11 + 1, a2 + 1);
  v14[2] = v11 + 24;
  sub_20C0DE978(a1, v14);
  v12 = a1[1];
  sub_20C0DEB28((uint64_t)v14);
  return v12;
}

void sub_20C0DEF40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0DEB28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C0DEF54(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, char a3, char a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v13;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v14;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v18;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v19;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v20;
  unint64_t v21;
  const char *v22;
  _QWORD v23[4];
  char v24;
  uint64_t v25;
  _BYTE v26[16];
  _BYTE v27[8];
  char **v28[3];

  v28[2] = *(char ***)MEMORY[0x24BDAC8D0];
  v7 = *(uint64_t **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v9 = *(uint64_t **)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)(a1 + 32);
  v27[0] = 0;
  LOBYTE(v25) = 0;
  if ((sub_20C0DF460(v8, (uint64_t)a2, (uint64_t)v7, v6, a3, (uint64_t)v9, v6 + 8, a4, (uint64_t)v27, (uint64_t)&v25) & 1) != 0)
  {
    if (!v27[0] || !(_BYTE)v25)
    {
      v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v7);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v23);
      sub_20C0DE3D8(v27, v23);
      sub_20BF4C2D8((uint64_t)v23);
      sub_20C0E1BBC(&v25, (uint64_t)v27);
    }
    v12 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v12)
      v12 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8))
    {
      sub_20C0DF4AC(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
    }
    else
    {
      v13 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if (!v13)
        v13 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v13 + 3) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C0DF918(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
      }
      else
      {
        v14 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v14)
          v14 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 2) & 0xFFFFFFFFFFFFFFF8))
        {
          sub_20C0DFD84(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
        }
        else
        {
          v15 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v15)
            v15 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFF8))
          {
            sub_20C0E01D4(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
          }
          else
          {
            v16 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
            if (!v16)
              v16 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
            if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 6) & 0xFFFFFFFFFFFFFFF8))
            {
              sub_20C0E0610(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
            }
            else
            {
              v17 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
              if (!v17)
                v17 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
              if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 7) & 0xFFFFFFFFFFFFFFF8))
              {
                sub_20C0E0A7C(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
              }
              else
              {
                v18 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v18)
                  v18 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFFFF8))
                {
                  sub_20C0E0ECC(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::TfToken *)v6, v9, (pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 8), a4, v10);
                }
                else
                {
                  v19 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                  if (!v19)
                    v19 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v19 + 5) & 0xFFFFFFFFFFFFFFF8))
                  {
                    sub_20C0E131C(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
                  }
                  else
                  {
                    v20 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                    if (!v20)
                      v20 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                    v21 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
                    if (v21 == (*((_QWORD *)v20 + 4) & 0xFFFFFFFFFFFFFFF8))
                    {
                      sub_20C0E176C(a2, v28, (pxrInternal__aapl__pxrReserved__::VtValue *)v26, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
                    }
                    else
                    {
                      v23[0] = "sdf/copyUtils.cpp";
                      v23[1] = "_ProcessChildField";
                      v23[2] = 261;
                      v23[3] = "void pxrInternal__aapl__pxrReserved__::_ProcessChildField(const TfToken &, const SdfLayer"
                               "Handle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, const Sdf"
                               "ShouldCopyChildrenFn &, _CopyStack *)";
                      v24 = 0;
                      if (v21)
                      {
                        v22 = (const char *)(v21 + 16);
                        if (*(char *)(v21 + 39) < 0)
                          v22 = *(const char **)v22;
                      }
                      else
                      {
                        v22 = "";
                      }
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown child field '%s'", v22);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ((_BYTE)v25)
    sub_20BF4C2D8((uint64_t)v26);
  if (v27[0])
    sub_20BF4C2D8((uint64_t)v28);
}

void sub_20C0DF410(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  if (a16)
    sub_20BF4C2D8((uint64_t)&a17);
  if (a19)
    sub_20BF4C2D8((uint64_t)&a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0DF460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  char v12;
  char v13;

  v13 = a5;
  v12 = a8;
  v10 = *(_QWORD *)(a1 + 24);
  if (!v10)
    sub_20BE9E974();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, char *, uint64_t *, uint64_t *))(*(_QWORD *)v10 + 48))(v10, a2, a3, a4, &v13, a6, a7, &v12, &a9, &a10);
}

void sub_20C0DF4AC(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, _QWORD *a8)
{
  char v16;
  char v17;
  char **v18;
  char **v19;
  uint64_t v20;
  char **v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  uint64_t v26;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v27;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v28;
  char *v29;
  char *v30;
  uint64_t *v31;
  char v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  char **v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if ((sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (v39 = (char **)"sdf/copyUtils.cpp",
        v40 = "_ProcessChildren",
        v41 = 122,
        v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]",
        v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    v16 = sub_20C030FCC(a3);
    v17 = *((_QWORD *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (v34 = "sdf/copyUtils.cpp",
          v35 = "_ProcessChildren",
          v36 = 124,
          v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]",
          v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0)
          v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        else
          v19 = *a2;
      }
      else
      {
        v19 = &v34;
      }
      v20 = *((_QWORD *)a3 + 1);
      v31 = a5;
      v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0)
          v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 168))(a3);
        else
          v21 = *(char ***)a3;
      }
      else
      {
        v21 = &v34;
      }
      v22 = *v19;
      if (v19[1] != *v19)
      {
        v23 = 0;
        v24 = 0;
        do
        {
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v22[v23])
            && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&(*v21)[v23]))
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&(*v19)[v23], &v39);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&(*v21)[v23], &v44);
            sub_20C0E1C24(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_20BFD265C(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_20BFD265C(&v39);
          }
          ++v24;
          v22 = *v19;
          v23 += 8;
        }
        while (v24 < (v19[1] - *v19) >> 3);
      }
      if ((v32 & 1) != 0)
      {
        v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v31);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v25, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (v39 = (char **)"sdf/copyUtils.cpp",
              v40 = "_ProcessChildren",
              v41 = 153,
              v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_AttributeConnectionChildPolicy]",
              v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          v26 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          v27 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)v26;
          v28 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(v26 + 8);
          if (*(const pxrInternal__aapl__pxrReserved__::SdfPath **)v26 != v28)
          {
            do
            {
              v30 = *v21;
              v29 = v21[1];
              if (*v21 != v29)
              {
                while (*(_QWORD *)v30 != *(_QWORD *)v27)
                {
                  v30 += 8;
                  if (v30 == v29)
                  {
                    v30 = v21[1];
                    break;
                  }
                }
              }
              if (v30 == v29)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a6, v27, &v39);
                v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_20C0E1C24(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_20BFD265C(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_20BFD265C(&v39);
              }
              v27 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8);
            }
            while (v27 != v28);
          }
        }
        sub_20BF4C2D8((uint64_t)&v44);
      }
      v39 = &v34;
      sub_20BFD6F90((void ***)&v39);
    }
  }
}

void sub_20C0DF86C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  sub_20BF4C2D8((uint64_t)&a22);
  a22 = (void **)&a12;
  sub_20BFD6F90(&a22);
  _Unwind_Resume(a1);
}

void sub_20C0DF918(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, _QWORD *a8)
{
  char v16;
  char v17;
  char **v18;
  char **v19;
  uint64_t v20;
  char **v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  uint64_t v26;
  pxrInternal__aapl__pxrReserved__::SdfPath *v27;
  pxrInternal__aapl__pxrReserved__::SdfPath *v28;
  char *v29;
  char *v30;
  uint64_t *v31;
  char v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  char **v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if ((sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (v39 = (char **)"sdf/copyUtils.cpp",
        v40 = "_ProcessChildren",
        v41 = 122,
        v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]",
        v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    v16 = sub_20C030FCC(a3);
    v17 = *((_QWORD *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (v34 = "sdf/copyUtils.cpp",
          v35 = "_ProcessChildren",
          v36 = 124,
          v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]",
          v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0)
          v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        else
          v19 = *a2;
      }
      else
      {
        v19 = &v34;
      }
      v20 = *((_QWORD *)a3 + 1);
      v31 = a5;
      v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0)
          v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 168))(a3);
        else
          v21 = *(char ***)a3;
      }
      else
      {
        v21 = &v34;
      }
      v22 = *v19;
      if (v19[1] != *v19)
      {
        v23 = 0;
        v24 = 0;
        do
        {
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v22[v23])
            && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&(*v21)[v23]))
          {
            sub_20C0AF418(a4, (pxrInternal__aapl__pxrReserved__::SdfPath *)&(*v19)[v23], &v39);
            sub_20C0AF418(a6, (pxrInternal__aapl__pxrReserved__::SdfPath *)&(*v21)[v23], &v44);
            sub_20C0E1C24(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_20BFD265C(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_20BFD265C(&v39);
          }
          ++v24;
          v22 = *v19;
          v23 += 8;
        }
        while (v24 < (v19[1] - *v19) >> 3);
      }
      if ((v32 & 1) != 0)
      {
        v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v31);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v25, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (v39 = (char **)"sdf/copyUtils.cpp",
              v40 = "_ProcessChildren",
              v41 = 153,
              v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperChildPolicy]",
              v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          v26 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          v27 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)v26;
          v28 = *(pxrInternal__aapl__pxrReserved__::SdfPath **)(v26 + 8);
          if (*(pxrInternal__aapl__pxrReserved__::SdfPath **)v26 != v28)
          {
            do
            {
              v30 = *v21;
              v29 = v21[1];
              if (*v21 != v29)
              {
                while (*(_QWORD *)v30 != *(_QWORD *)v27)
                {
                  v30 += 8;
                  if (v30 == v29)
                  {
                    v30 = v21[1];
                    break;
                  }
                }
              }
              if (v30 == v29)
              {
                sub_20C0AF418(a6, v27, &v39);
                v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_20C0E1C24(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_20BFD265C(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_20BFD265C(&v39);
              }
              v27 = (pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8);
            }
            while (v27 != v28);
          }
        }
        sub_20BF4C2D8((uint64_t)&v44);
      }
      v39 = &v34;
      sub_20BFD6F90((void ***)&v39);
    }
  }
}

void sub_20C0DFCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  sub_20BF4C2D8((uint64_t)&a22);
  a22 = (void **)&a12;
  sub_20BFD6F90(&a22);
  _Unwind_Resume(a1);
}

void sub_20C0DFD84(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, _QWORD *a8)
{
  char v16;
  char v17;
  char **v18;
  char **v19;
  uint64_t v20;
  char **v21;
  char *v22;
  char *v23;
  unint64_t v24;
  const pxrInternal__aapl__pxrReserved__::TfToken *v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  uint64_t v27;
  const pxrInternal__aapl__pxrReserved__::TfToken *v28;
  const pxrInternal__aapl__pxrReserved__::TfToken *v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  char **v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (v39 = (char **)"sdf/copyUtils.cpp",
        v40 = "_ProcessChildren",
        v41 = 122,
        v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]",
        v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    v16 = sub_20BFD222C(a3);
    v17 = *((_QWORD *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (v34 = "sdf/copyUtils.cpp",
          v35 = "_ProcessChildren",
          v36 = 124,
          v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]",
          v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0)
          v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        else
          v19 = *a2;
      }
      else
      {
        v19 = &v34;
      }
      v20 = *((_QWORD *)a3 + 1);
      v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0)
          v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 168))(a3);
        else
          v21 = *(char ***)a3;
      }
      else
      {
        v21 = &v34;
      }
      v23 = *v19;
      v22 = v19[1];
      if (v22 != *v19)
      {
        v24 = 0;
        do
        {
          v25 = (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23[8 * v24];
          if (*(_QWORD *)v25 && *(_QWORD *)&(*v21)[8 * v24])
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(a4, v25, &v39);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(a6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&(*v21)[8 * v24], &v44);
            sub_20C0E1C24(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_20BFD265C(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_20BFD265C(&v39);
            v23 = *v19;
            v22 = v19[1];
          }
          ++v24;
        }
        while (v24 < (v22 - v23) >> 3);
      }
      if ((v32 & 1) != 0)
      {
        v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a5);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v26, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (v39 = (char **)"sdf/copyUtils.cpp",
              v40 = "_ProcessChildren",
              v41 = 153,
              v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_MapperArgChildPolicy]",
              v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          v27 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          v28 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)v27;
          v29 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(v27 + 8);
          if (*(const pxrInternal__aapl__pxrReserved__::TfToken **)v27 != v29)
          {
            do
            {
              v31 = *v21;
              v30 = v21[1];
              if (*v21 != v30)
              {
                while ((*(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8))
                {
                  v31 += 8;
                  if (v31 == v30)
                  {
                    v31 = v21[1];
                    break;
                  }
                }
              }
              if (v31 == v30)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(a6, v28, &v39);
                v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_20C0E1C24(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_20BFD265C(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_20BFD265C(&v39);
              }
              v28 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v28 + 8);
            }
            while (v28 != v29);
          }
        }
        sub_20BF4C2D8((uint64_t)&v44);
      }
      v39 = &v34;
      sub_20BEEB2B8((void ***)&v39);
    }
  }
}

void sub_20C0E0134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  sub_20BF4C2D8((uint64_t)&a22);
  a22 = (void **)&a12;
  sub_20BEEB2B8(&a22);
  _Unwind_Resume(a1);
}

void sub_20C0E01D4(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, _QWORD *a8)
{
  char v16;
  char v17;
  char **v18;
  char **v19;
  uint64_t v20;
  char **v21;
  char *v22;
  char *v23;
  unint64_t v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  char v36;
  char **v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (v37 = (char **)"sdf/copyUtils.cpp",
        v38 = "_ProcessChildren",
        v39 = 122,
        v40 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]",
        v41 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    v16 = sub_20BFD222C(a3);
    v17 = *((_QWORD *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (v32 = "sdf/copyUtils.cpp",
          v33 = "_ProcessChildren",
          v34 = 124,
          v35 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]",
          v36 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v32, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      v32 = 0;
      v33 = 0;
      v34 = 0;
      v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0)
          v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        else
          v19 = *a2;
      }
      else
      {
        v19 = &v32;
      }
      v20 = *((_QWORD *)a3 + 1);
      if (v20)
      {
        if ((v20 & 4) != 0)
          v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 168))(a3);
        else
          v21 = *(char ***)a3;
      }
      else
      {
        v21 = &v32;
      }
      v23 = *v19;
      v22 = v19[1];
      if (v22 != *v19)
      {
        v24 = 0;
        do
        {
          if (*(_QWORD *)&v23[8 * v24] && *(_QWORD *)&(*v21)[8 * v24])
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a4, &v37);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a6, &v42);
            sub_20C0E1C24(a8, &v37, &v42);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
            sub_20BFD265C(&v42);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
            sub_20BFD265C(&v37);
            v23 = *v19;
            v22 = v19[1];
          }
          ++v24;
        }
        while (v24 < (v22 - v23) >> 3);
      }
      if ((a7 & 1) != 0)
      {
        v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a5);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v25, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v42);
        if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v42) & 1) != 0
          || (v37 = (char **)"sdf/copyUtils.cpp",
              v38 = "_ProcessChildren",
              v39 = 153,
              v40 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_ExpressionChildPolicy]",
              v41 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v37, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          v26 = (v43 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v43 & 0xFFFFFFFFFFFFFFF8) + 168))(&v42) : v42;
          v27 = *(_QWORD **)v26;
          v28 = *(_QWORD **)(v26 + 8);
          if (*(_QWORD **)v26 != v28)
          {
            do
            {
              v30 = *v21;
              v29 = v21[1];
              if (*v21 != v29)
              {
                while ((*(_QWORD *)v30 & 0xFFFFFFFFFFFFFFF8) != (*v27 & 0xFFFFFFFFFFFFFFF8))
                {
                  v30 += 8;
                  if (v30 == v29)
                  {
                    v30 = v21[1];
                    break;
                  }
                }
              }
              if (v30 == v29)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a6, &v37);
                v31 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v31);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v31 + 1);
                sub_20C0E1C24(a8, &v31, &v37);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v31 + 1);
                sub_20BFD265C(&v31);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
                sub_20BFD265C(&v37);
              }
              ++v27;
            }
            while (v27 != v28);
          }
        }
        sub_20BF4C2D8((uint64_t)&v42);
      }
      v37 = &v32;
      sub_20BEEB2B8((void ***)&v37);
    }
  }
}

void sub_20C0E0570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  sub_20BF4C2D8((uint64_t)&a22);
  a22 = (void **)&a12;
  sub_20BEEB2B8(&a22);
  _Unwind_Resume(a1);
}

void sub_20C0E0610(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, _QWORD *a8)
{
  char v16;
  char v17;
  char **v18;
  char **v19;
  uint64_t v20;
  char **v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v25;
  uint64_t v26;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v27;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v28;
  char *v29;
  char *v30;
  uint64_t *v31;
  char v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  char **v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if ((sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (v39 = (char **)"sdf/copyUtils.cpp",
        v40 = "_ProcessChildren",
        v41 = 122,
        v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]",
        v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    v16 = sub_20C030FCC(a3);
    v17 = *((_QWORD *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (v34 = "sdf/copyUtils.cpp",
          v35 = "_ProcessChildren",
          v36 = 124,
          v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]",
          v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0)
          v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        else
          v19 = *a2;
      }
      else
      {
        v19 = &v34;
      }
      v20 = *((_QWORD *)a3 + 1);
      v31 = a5;
      v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0)
          v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 168))(a3);
        else
          v21 = *(char ***)a3;
      }
      else
      {
        v21 = &v34;
      }
      v22 = *v19;
      if (v19[1] != *v19)
      {
        v23 = 0;
        v24 = 0;
        do
        {
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v22[v23])
            && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&(*v21)[v23]))
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a4, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&(*v19)[v23], &v39);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&(*v21)[v23], &v44);
            sub_20C0E1C24(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_20BFD265C(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_20BFD265C(&v39);
          }
          ++v24;
          v22 = *v19;
          v23 += 8;
        }
        while (v24 < (v19[1] - *v19) >> 3);
      }
      if ((v32 & 1) != 0)
      {
        v25 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v31);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v25, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (v39 = (char **)"sdf/copyUtils.cpp",
              v40 = "_ProcessChildren",
              v41 = 153,
              v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_RelationshipTargetChildPolicy]",
              v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          v26 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          v27 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)v26;
          v28 = *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(v26 + 8);
          if (*(const pxrInternal__aapl__pxrReserved__::SdfPath **)v26 != v28)
          {
            do
            {
              v30 = *v21;
              v29 = v21[1];
              if (*v21 != v29)
              {
                while (*(_QWORD *)v30 != *(_QWORD *)v27)
                {
                  v30 += 8;
                  if (v30 == v29)
                  {
                    v30 = v21[1];
                    break;
                  }
                }
              }
              if (v30 == v29)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a6, v27, &v39);
                v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_20C0E1C24(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_20BFD265C(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_20BFD265C(&v39);
              }
              v27 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v27 + 8);
            }
            while (v27 != v28);
          }
        }
        sub_20BF4C2D8((uint64_t)&v44);
      }
      v39 = &v34;
      sub_20BFD6F90((void ***)&v39);
    }
  }
}

void sub_20C0E09D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  sub_20BF4C2D8((uint64_t)&a22);
  a22 = (void **)&a12;
  sub_20BFD6F90(&a22);
  _Unwind_Resume(a1);
}

void sub_20C0E0A7C(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, _QWORD *a8)
{
  char v16;
  char v17;
  char **v18;
  char **v19;
  uint64_t v20;
  char **v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  char **v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (v39 = (char **)"sdf/copyUtils.cpp",
        v40 = "_ProcessChildren",
        v41 = 122,
        v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]",
        v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    v16 = sub_20BFD222C(a3);
    v17 = *((_QWORD *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (v34 = "sdf/copyUtils.cpp",
          v35 = "_ProcessChildren",
          v36 = 124,
          v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]",
          v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0)
          v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        else
          v19 = *a2;
      }
      else
      {
        v19 = &v34;
      }
      v20 = *((_QWORD *)a3 + 1);
      v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0)
          v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 168))(a3);
        else
          v21 = *(char ***)a3;
      }
      else
      {
        v21 = &v34;
      }
      v23 = *v19;
      v22 = v19[1];
      if (v22 != *v19)
      {
        v24 = 0;
        do
        {
          v25 = &v23[8 * v24];
          if (*(_QWORD *)v25 && *(_QWORD *)&(*v21)[8 * v24])
          {
            sub_20C0B2C10(a4, v25, &v39);
            sub_20C0B2C10(a6, &(*v21)[8 * v24], &v44);
            sub_20C0E1C24(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_20BFD265C(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_20BFD265C(&v39);
            v23 = *v19;
            v22 = v19[1];
          }
          ++v24;
        }
        while (v24 < (v22 - v23) >> 3);
      }
      if ((v32 & 1) != 0)
      {
        v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a5);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v26, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (v39 = (char **)"sdf/copyUtils.cpp",
              v40 = "_ProcessChildren",
              v41 = 153,
              v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantChildPolicy]",
              v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          v27 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          v28 = *(_QWORD **)v27;
          v29 = *(_QWORD **)(v27 + 8);
          if (*(_QWORD **)v27 != v29)
          {
            do
            {
              v31 = *v21;
              v30 = v21[1];
              if (*v21 != v30)
              {
                while ((*(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF8) != (*v28 & 0xFFFFFFFFFFFFFFF8))
                {
                  v31 += 8;
                  if (v31 == v30)
                  {
                    v31 = v21[1];
                    break;
                  }
                }
              }
              if (v31 == v30)
              {
                sub_20C0B2C10(a6, v28, &v39);
                v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_20C0E1C24(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_20BFD265C(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_20BFD265C(&v39);
              }
              ++v28;
            }
            while (v28 != v29);
          }
        }
        sub_20BF4C2D8((uint64_t)&v44);
      }
      v39 = &v34;
      sub_20BEEB2B8((void ***)&v39);
    }
  }
}

void sub_20C0E0E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  sub_20BF4C2D8((uint64_t)&a22);
  a22 = (void **)&a12;
  sub_20BEEB2B8(&a22);
  _Unwind_Resume(a1);
}

void sub_20C0E0ECC(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::TfToken *a6, char a7, _QWORD *a8)
{
  char v16;
  char v17;
  char **v18;
  char **v19;
  uint64_t v20;
  char **v21;
  char *v22;
  char *v23;
  unint64_t v24;
  char *v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  char **v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (v39 = (char **)"sdf/copyUtils.cpp",
        v40 = "_ProcessChildren",
        v41 = 122,
        v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]",
        v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    v16 = sub_20BFD222C(a3);
    v17 = *((_QWORD *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (v34 = "sdf/copyUtils.cpp",
          v35 = "_ProcessChildren",
          v36 = 124,
          v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]",
          v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0)
          v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        else
          v19 = *a2;
      }
      else
      {
        v19 = &v34;
      }
      v20 = *((_QWORD *)a3 + 1);
      v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0)
          v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 168))(a3);
        else
          v21 = *(char ***)a3;
      }
      else
      {
        v21 = &v34;
      }
      v23 = *v19;
      v22 = v19[1];
      if (v22 != *v19)
      {
        v24 = 0;
        do
        {
          v25 = &v23[8 * v24];
          if (*(_QWORD *)v25 && *(_QWORD *)&(*v21)[8 * v24])
          {
            sub_20C0B394C(a4, v25, &v39);
            sub_20C0B394C(a6, &(*v21)[8 * v24], &v44);
            sub_20C0E1C24(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_20BFD265C(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_20BFD265C(&v39);
            v23 = *v19;
            v22 = v19[1];
          }
          ++v24;
        }
        while (v24 < (v22 - v23) >> 3);
      }
      if ((v32 & 1) != 0)
      {
        v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a5);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v26, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (v39 = (char **)"sdf/copyUtils.cpp",
              v40 = "_ProcessChildren",
              v41 = 153,
              v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy]",
              v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          v27 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          v28 = *(_QWORD **)v27;
          v29 = *(_QWORD **)(v27 + 8);
          if (*(_QWORD **)v27 != v29)
          {
            do
            {
              v31 = *v21;
              v30 = v21[1];
              if (*v21 != v30)
              {
                while ((*(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF8) != (*v28 & 0xFFFFFFFFFFFFFFF8))
                {
                  v31 += 8;
                  if (v31 == v30)
                  {
                    v31 = v21[1];
                    break;
                  }
                }
              }
              if (v31 == v30)
              {
                sub_20C0B394C(a6, v28, &v39);
                v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_20C0E1C24(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_20BFD265C(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_20BFD265C(&v39);
              }
              ++v28;
            }
            while (v28 != v29);
          }
        }
        sub_20BF4C2D8((uint64_t)&v44);
      }
      v39 = &v34;
      sub_20BEEB2B8((void ***)&v39);
    }
  }
}

void sub_20C0E127C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  sub_20BF4C2D8((uint64_t)&a22);
  a22 = (void **)&a12;
  sub_20BEEB2B8(&a22);
  _Unwind_Resume(a1);
}

void sub_20C0E131C(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, _QWORD *a8)
{
  char v16;
  char v17;
  char **v18;
  char **v19;
  uint64_t v20;
  char **v21;
  char *v22;
  char *v23;
  unint64_t v24;
  const pxrInternal__aapl__pxrReserved__::TfToken *v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  uint64_t v27;
  const pxrInternal__aapl__pxrReserved__::TfToken *v28;
  const pxrInternal__aapl__pxrReserved__::TfToken *v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  char **v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (v39 = (char **)"sdf/copyUtils.cpp",
        v40 = "_ProcessChildren",
        v41 = 122,
        v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]",
        v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    v16 = sub_20BFD222C(a3);
    v17 = *((_QWORD *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (v34 = "sdf/copyUtils.cpp",
          v35 = "_ProcessChildren",
          v36 = 124,
          v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]",
          v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0)
          v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        else
          v19 = *a2;
      }
      else
      {
        v19 = &v34;
      }
      v20 = *((_QWORD *)a3 + 1);
      v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0)
          v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 168))(a3);
        else
          v21 = *(char ***)a3;
      }
      else
      {
        v21 = &v34;
      }
      v23 = *v19;
      v22 = v19[1];
      if (v22 != *v19)
      {
        v24 = 0;
        do
        {
          v25 = (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23[8 * v24];
          if (*(_QWORD *)v25 && *(_QWORD *)&(*v21)[8 * v24])
          {
            sub_20C0AE7F4(a4, v25, (int *)&v39);
            sub_20C0AE7F4(a6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&(*v21)[8 * v24], (int *)&v44);
            sub_20C0E1C24(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_20BFD265C(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_20BFD265C(&v39);
            v23 = *v19;
            v22 = v19[1];
          }
          ++v24;
        }
        while (v24 < (v22 - v23) >> 3);
      }
      if ((v32 & 1) != 0)
      {
        v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a5);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v26, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (v39 = (char **)"sdf/copyUtils.cpp",
              v40 = "_ProcessChildren",
              v41 = 153,
              v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy]",
              v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          v27 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          v28 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)v27;
          v29 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(v27 + 8);
          if (*(const pxrInternal__aapl__pxrReserved__::TfToken **)v27 != v29)
          {
            do
            {
              v31 = *v21;
              v30 = v21[1];
              if (*v21 != v30)
              {
                while ((*(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8))
                {
                  v31 += 8;
                  if (v31 == v30)
                  {
                    v31 = v21[1];
                    break;
                  }
                }
              }
              if (v31 == v30)
              {
                sub_20C0AE7F4(a6, v28, (int *)&v39);
                v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_20C0E1C24(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_20BFD265C(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_20BFD265C(&v39);
              }
              v28 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v28 + 8);
            }
            while (v28 != v29);
          }
        }
        sub_20BF4C2D8((uint64_t)&v44);
      }
      v39 = &v34;
      sub_20BEEB2B8((void ***)&v39);
    }
  }
}

void sub_20C0E16CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  sub_20BF4C2D8((uint64_t)&a22);
  a22 = (void **)&a12;
  sub_20BEEB2B8(&a22);
  _Unwind_Resume(a1);
}

void sub_20C0E176C(const pxrInternal__aapl__pxrReserved__::TfToken *a1, char ***a2, pxrInternal__aapl__pxrReserved__::VtValue *a3, pxrInternal__aapl__pxrReserved__::SdfPath *a4, uint64_t *a5, pxrInternal__aapl__pxrReserved__::SdfPath *a6, char a7, _QWORD *a8)
{
  char v16;
  char v17;
  char **v18;
  char **v19;
  uint64_t v20;
  char **v21;
  char *v22;
  char *v23;
  unint64_t v24;
  const pxrInternal__aapl__pxrReserved__::TfToken *v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  uint64_t v27;
  const pxrInternal__aapl__pxrReserved__::TfToken *v28;
  const pxrInternal__aapl__pxrReserved__::TfToken *v29;
  char *v30;
  char *v31;
  char v32;
  uint64_t v33;
  char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  char v38;
  char **v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)a2) & 1) != 0
    || !a2[1]
    || (v39 = (char **)"sdf/copyUtils.cpp",
        v40 = "_ProcessChildren",
        v41 = 122,
        v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue &,"
              " const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopyStack "
              "*) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]",
        v43 = 0,
        pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "srcChildrenValue.IsHolding<ChildrenVector>() || srcChildrenValue.IsEmpty()", 0)))
  {
    v16 = sub_20BFD222C(a3);
    v17 = *((_QWORD *)a3 + 1) ? v16 : 1;
    if ((v17 & 1) != 0
      || (v34 = "sdf/copyUtils.cpp",
          v35 = "_ProcessChildren",
          v36 = 124,
          v37 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtValue "
                "&, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, _CopySt"
                "ack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]",
          v38 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v34, "dstChildrenValue.IsHolding<ChildrenVector>() || dstChildrenValue.IsEmpty()", 0) & 1) != 0))
    {
      v34 = 0;
      v35 = 0;
      v36 = 0;
      v18 = a2[1];
      if (v18)
      {
        if ((v18 & 4) != 0)
          v19 = (char **)(*(uint64_t (**)(char ***))(((unint64_t)v18 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
        else
          v19 = *a2;
      }
      else
      {
        v19 = &v34;
      }
      v20 = *((_QWORD *)a3 + 1);
      v32 = a7;
      if (v20)
      {
        if ((v20 & 4) != 0)
          v21 = (char **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v20 & 0xFFFFFFFFFFFFFFF8)
                                                                                                + 168))(a3);
        else
          v21 = *(char ***)a3;
      }
      else
      {
        v21 = &v34;
      }
      v23 = *v19;
      v22 = v19[1];
      if (v22 != *v19)
      {
        v24 = 0;
        do
        {
          v25 = (const pxrInternal__aapl__pxrReserved__::TfToken *)&v23[8 * v24];
          if (*(_QWORD *)v25 && *(_QWORD *)&(*v21)[8 * v24])
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a4, v25, &v39);
            pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a6, (const pxrInternal__aapl__pxrReserved__::TfToken *)&(*v21)[8 * v24], &v44);
            sub_20C0E1C24(a8, &v39, &v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v44 + 1);
            sub_20BFD265C(&v44);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
            sub_20BFD265C(&v39);
            v23 = *v19;
            v22 = v19[1];
          }
          ++v24;
        }
        while (v24 < (v22 - v23) >> 3);
      }
      if ((v32 & 1) != 0)
      {
        v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a5);
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v26, a6, a1, (pxrInternal__aapl__pxrReserved__::VtValue *)&v44);
        if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v44) & 1) != 0
          || (v39 = (char **)"sdf/copyUtils.cpp",
              v40 = "_ProcessChildren",
              v41 = 153,
              v42 = "void pxrInternal__aapl__pxrReserved__::_ProcessChildren(const TfToken &, const VtValue &, const VtVa"
                    "lue &, const SdfLayerHandle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL,"
                    " _CopyStack *) [ChildPolicy = pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy]",
              v43 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v39, "oldDstChildrenValue.IsHolding<ChildrenVector>()", 0) & 1) != 0))
        {
          v27 = (v45 & 4) != 0 ? (*(uint64_t (**)(uint64_t *))((v45 & 0xFFFFFFFFFFFFFFF8) + 168))(&v44) : v44;
          v28 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)v27;
          v29 = *(const pxrInternal__aapl__pxrReserved__::TfToken **)(v27 + 8);
          if (*(const pxrInternal__aapl__pxrReserved__::TfToken **)v27 != v29)
          {
            do
            {
              v31 = *v21;
              v30 = v21[1];
              if (*v21 != v30)
              {
                while ((*(_QWORD *)v31 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8))
                {
                  v31 += 8;
                  if (v31 == v30)
                  {
                    v31 = v21[1];
                    break;
                  }
                }
              }
              if (v31 == v30)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a6, v28, &v39);
                v33 = 0;
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v33 + 1);
                sub_20C0E1C24(a8, &v33, &v39);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v33 + 1);
                sub_20BFD265C(&v33);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v39 + 1);
                sub_20BFD265C(&v39);
              }
              v28 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v28 + 8);
            }
            while (v28 != v29);
          }
        }
        sub_20BF4C2D8((uint64_t)&v44);
      }
      v39 = &v34;
      sub_20BEEB2B8((void ***)&v39);
    }
  }
}

void sub_20C0E1B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  sub_20BF4C2D8((uint64_t)&a22);
  a22 = (void **)&a12;
  sub_20BEEB2B8(&a22);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0E1BBC(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;

  v2 = result;
  if (*(_BYTE *)result)
  {
    if (*(_BYTE *)a2)
    {
      return sub_20BF4A9BC(result + 1, (_QWORD *)(a2 + 8));
    }
    else
    {
      result = (_QWORD *)sub_20BF4C2D8((uint64_t)(result + 1));
      *v2 = 0;
    }
  }
  else if (*(_BYTE *)a2)
  {
    result = sub_20BF4C6D0(result + 1, (_QWORD *)(a2 + 8));
    *v2 = 1;
  }
  return result;
}

_DWORD *sub_20C0E1C24(_QWORD *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _DWORD *result;

  v6 = a1[1];
  v7 = a1[2];
  v8 = 32 * (v7 - v6) - 1;
  if (v7 == v6)
    v8 = 0;
  if (v8 == a1[5] + a1[4])
  {
    sub_20C0E1CC4((uint64_t)a1);
    v6 = a1[1];
    v7 = a1[2];
  }
  if (v7 == v6)
  {
    v10 = 0;
  }
  else
  {
    v9 = a1[5] + a1[4];
    v10 = (_DWORD *)(*(_QWORD *)(v6 + ((v9 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v9);
  }
  result = sub_20C028354(v10, a2, a3);
  ++a1[5];
  return result;
}

void sub_20C0E1CC4(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *i;
  char *v29;
  __int128 v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_44:
      *(_QWORD *)v6 = v8;
      goto LABEL_45;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v31 = 1;
      else
        v31 = (v6 - v10) >> 2;
      if (!(v31 >> 61))
      {
        v32 = (char *)operator new(8 * v31);
        v33 = &v32[8 * (v31 >> 2)];
        v34 = &v32[8 * v31];
        v36 = v6 - v7;
        v35 = v6 == v7;
        v6 = v33;
        if (!v35)
        {
          v6 = &v33[v36 & 0xFFFFFFFFFFFFFFF8];
          v37 = 8 * (v36 >> 3);
          v38 = &v32[8 * (v31 >> 2)];
          do
          {
            v39 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v38 = v39;
            v38 += 8;
            v37 -= 8;
          }
          while (v37);
        }
        goto LABEL_30;
      }
LABEL_56:
      sub_20BDDF5B4();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_44;
  }
  v18 = *(char **)(a1 + 8);
  v19 = *(char **)(a1 + 16);
  v20 = *(char **)a1;
  v21 = (v19 - v18) >> 3;
  v22 = *(char **)(a1 + 24);
  v23 = (uint64_t)&v22[-*(_QWORD *)a1];
  if (v21 < v23 >> 3)
  {
    v24 = operator new(0x1000uLL);
    v25 = v24;
    if (v22 != v19)
    {
      *(_QWORD *)v19 = v24;
LABEL_45:
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    if (v18 == v20)
    {
      if (v19 == v18)
        v41 = 1;
      else
        v41 = (v22 - v18) >> 2;
      if (v41 >> 61)
        goto LABEL_56;
      v42 = (char *)operator new(8 * v41);
      v40 = &v42[(2 * v41 + 6) & 0xFFFFFFFFFFFFFFF8];
      v43 = v40;
      if (v19 != v18)
      {
        v44 = 8 * v21;
        v45 = &v42[(2 * v41 + 6) & 0xFFFFFFFFFFFFFFF8];
        v46 = v18;
        v43 = &v40[8 * v21];
        do
        {
          v47 = *(_QWORD *)v46;
          v46 += 8;
          *(_QWORD *)v45 = v47;
          v45 += 8;
          v44 -= 8;
        }
        while (v44);
      }
      *(_QWORD *)a1 = v42;
      *(_QWORD *)(a1 + 8) = v40;
      *(_QWORD *)(a1 + 16) = v43;
      *(_QWORD *)(a1 + 24) = &v42[8 * v41];
      if (v18)
      {
        operator delete(v18);
        v40 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v40 = v18;
    }
    *((_QWORD *)v40 - 1) = v25;
    v7 = *(char **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v7 - 8;
    v8 = *((_QWORD *)v7 - 1);
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_44;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v48 = 1;
      else
        v48 = (v6 - v10) >> 2;
      if (!(v48 >> 61))
      {
        v32 = (char *)operator new(8 * v48);
        v33 = &v32[8 * (v48 >> 2)];
        v34 = &v32[8 * v48];
        v49 = v6 - v7;
        v35 = v6 == v7;
        v6 = v33;
        if (!v35)
        {
          v6 = &v33[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = 8 * (v49 >> 3);
          v51 = &v32[8 * (v48 >> 2)];
          do
          {
            v52 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v52;
            v51 += 8;
            v50 -= 8;
          }
          while (v50);
        }
LABEL_30:
        *(_QWORD *)a1 = v32;
        *(_QWORD *)(a1 + 8) = v33;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v34;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_44;
      }
      goto LABEL_56;
    }
    goto LABEL_5;
  }
  v26 = v23 >> 2;
  if (v22 == v20)
    v27 = 1;
  else
    v27 = v26;
  v56 = a1 + 24;
  if (v27 >> 61)
    goto LABEL_56;
  *(_QWORD *)&v54 = operator new(8 * v27);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v21;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v27;
  v53 = operator new(0x1000uLL);
  sub_20C0DE414((uint64_t)&v54, &v53);
  for (i = *(_QWORD **)(a1 + 16); i != *(_QWORD **)(a1 + 8); sub_20C0DE534((void **)&v54, i))
    --i;
  v29 = *(char **)a1;
  v30 = v55;
  *(_OWORD *)a1 = v54;
  *(_OWORD *)(a1 + 16) = v30;
  if (v29)
    operator delete(v29);
}

void sub_20C0E1FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p)
{
  void *v11;

  operator delete(v11);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0E200C(int a1, uint64_t *a2, uint64_t *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *a10)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v14;
  _QWORD v15[2];
  _QWORD v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  LOBYTE(v16[0]) = 0;
  v17 = 0;
  result = sub_20C0DE7F4(a9, a1, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, a5);
  if ((_DWORD)result)
  {
    v15[1] = 0;
    sub_20C0DE848(a10, a2, v15);
    sub_20BF4C2D8((uint64_t)v15);
    if (v17)
    {
      result = (uint64_t)sub_20BFD3C3C(v16, (_QWORD *)(a10[1] - 16));
    }
    else
    {
      v14 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a3);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v14, a4, (const pxrInternal__aapl__pxrReserved__::TfToken *)a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v15);
      sub_20BFD3C3C(v15, (_QWORD *)(a10[1] - 16));
      result = sub_20BF4C2D8((uint64_t)v15);
    }
  }
  if (v17)
    return sub_20BF4C2D8((uint64_t)v16);
  return result;
}

void sub_20C0E2128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  if (a15)
    sub_20BF4C2D8((uint64_t)&a13);
  _Unwind_Resume(exception_object);
}

void sub_20C0E2158(uint64_t a1, const pxrInternal__aapl__pxrReserved__::TfToken *a2, char a3, char a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v13;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v14;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v16;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v17;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v18;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v19;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v20;
  unint64_t v21;
  const char *v22;
  _QWORD v23[4];
  char v24;
  _QWORD v25[2];
  char v26;
  char **v27[2];
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v7 = *(uint64_t **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v9 = *(uint64_t **)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD **)(a1 + 32);
  LOBYTE(v27[0]) = 0;
  v28 = 0;
  LOBYTE(v25[0]) = 0;
  v26 = 0;
  if ((sub_20C0DF460(v8, (uint64_t)a2, (uint64_t)v7, v6, a3, (uint64_t)v9, v6 + 8, a4, (uint64_t)v27, (uint64_t)v25) & 1) != 0)
  {
    if (!v28 || !v26)
    {
      v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v7);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v6, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v23);
      sub_20C0E2644((uint64_t)v27, v23);
      sub_20BF4C2D8((uint64_t)v23);
      sub_20C0E2688(v25, (uint64_t)v27);
    }
    v12 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v12)
      v12 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8))
    {
      sub_20C0DF4AC(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
    }
    else
    {
      v13 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if (!v13)
        v13 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v13 + 3) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C0DF918(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
      }
      else
      {
        v14 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v14)
          v14 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v14 + 2) & 0xFFFFFFFFFFFFFFF8))
        {
          sub_20C0DFD84(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
        }
        else
        {
          v15 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v15)
            v15 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 1) & 0xFFFFFFFFFFFFFFF8))
          {
            sub_20C0E01D4(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
          }
          else
          {
            v16 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
            if (!v16)
              v16 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
            if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v16 + 6) & 0xFFFFFFFFFFFFFFF8))
            {
              sub_20C0E0610(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
            }
            else
            {
              v17 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
              if (!v17)
                v17 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
              if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v17 + 7) & 0xFFFFFFFFFFFFFFF8))
              {
                sub_20C0E0A7C(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
              }
              else
              {
                v18 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v18)
                  v18 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v18 + 8) & 0xFFFFFFFFFFFFFFF8))
                {
                  sub_20C0E0ECC(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::TfToken *)v6, v9, (pxrInternal__aapl__pxrReserved__::TfToken *)(v6 + 8), a4, v10);
                }
                else
                {
                  v19 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                  if (!v19)
                    v19 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                  if ((*(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v19 + 5) & 0xFFFFFFFFFFFFFFF8))
                  {
                    sub_20C0E131C(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
                  }
                  else
                  {
                    v20 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                    if (!v20)
                      v20 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                    v21 = *(_QWORD *)a2 & 0xFFFFFFFFFFFFFFF8;
                    if (v21 == (*((_QWORD *)v20 + 4) & 0xFFFFFFFFFFFFFFF8))
                    {
                      sub_20C0E176C(a2, v27, (pxrInternal__aapl__pxrReserved__::VtValue *)v25, (pxrInternal__aapl__pxrReserved__::SdfPath *)v6, v9, (pxrInternal__aapl__pxrReserved__::SdfPath *)(v6 + 8), a4, v10);
                    }
                    else
                    {
                      v23[0] = "sdf/copyUtils.cpp";
                      v23[1] = "_ProcessChildField";
                      v23[2] = 352;
                      v23[3] = "void pxrInternal__aapl__pxrReserved__::_ProcessChildField(const TfToken &, const SdfLayer"
                               "Handle &, const SdfPath &, BOOL, const SdfLayerHandle &, const SdfPath &, BOOL, const Sdf"
                               "ShouldCopyChildrenFnStandard &, _CopyStack *)";
                      v24 = 0;
                      if (v21)
                      {
                        v22 = (const char *)(v21 + 16);
                        if (*(char *)(v21 + 39) < 0)
                          v22 = *(const char **)v22;
                      }
                      else
                      {
                        v22 = "";
                      }
                      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v23, 1, (pxrInternal__aapl__pxrReserved__ *)"Unknown child field '%s'", v22);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (v26)
    sub_20BF4C2D8((uint64_t)v25);
  if (v28)
    sub_20BF4C2D8((uint64_t)v27);
}

void sub_20C0E25FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a18)
    sub_20BF4C2D8((uint64_t)&a16);
  if (a24)
    sub_20BF4C2D8((uint64_t)&a20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0E2644(uint64_t a1, _QWORD *a2)
{
  if (*(_BYTE *)(a1 + 16))
  {
    sub_20BF4B5D8((_QWORD *)a1, a2);
  }
  else
  {
    sub_20BF4C200((_QWORD *)a1, a2);
    *(_BYTE *)(a1 + 16) = 1;
  }
  return a1;
}

_QWORD *sub_20C0E2688(_QWORD *result, uint64_t a2)
{
  if (*((unsigned __int8 *)result + 16) == *(unsigned __int8 *)(a2 + 16))
  {
    if (*((_BYTE *)result + 16))
      return sub_20BF4A9BC(result, (_QWORD *)a2);
  }
  else if (*((_BYTE *)result + 16))
  {
    result = (_QWORD *)sub_20BF4C2D8((uint64_t)result);
    *((_BYTE *)result + 16) = 0;
  }
  else
  {
    result = sub_20BF4C6D0(result, (_QWORD *)a2);
    *((_BYTE *)result + 16) = 1;
  }
  return result;
}

uint64_t sub_20C0E26D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (sub_20BFD6B4C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C0E2900(*(_BYTE **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C0E2750(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6[8];
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void **v19;

  if (sub_20BFD6B4C((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    sub_20C0E2B00(a2, v6);
    v4 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)v4 = v6[0];
    sub_20BFD7014((_QWORD *)(v4 + 8));
    *(_OWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 24) = v8;
    v7 = 0uLL;
    v8 = 0;
    sub_20BFD7014((_QWORD *)(v4 + 32));
    *(_OWORD *)(v4 + 32) = v9;
    *(_QWORD *)(v4 + 48) = v10;
    v9 = 0uLL;
    v10 = 0;
    sub_20BFD7014((_QWORD *)(v4 + 56));
    *(_OWORD *)(v4 + 56) = v11;
    *(_QWORD *)(v4 + 72) = v12;
    v11 = 0uLL;
    v12 = 0;
    sub_20BFD7014((_QWORD *)(v4 + 80));
    *(_OWORD *)(v4 + 80) = v13;
    *(_QWORD *)(v4 + 96) = v14;
    v13 = 0uLL;
    v14 = 0;
    sub_20BFD7014((_QWORD *)(v4 + 104));
    *(_OWORD *)(v4 + 104) = v15;
    *(_QWORD *)(v4 + 120) = v16;
    v15 = 0uLL;
    v16 = 0;
    sub_20BFD7014((_QWORD *)(v4 + 128));
    *(_OWORD *)(v4 + 128) = v17;
    *(_QWORD *)(v4 + 144) = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = (void **)&v17;
    sub_20BFD6F90(&v19);
    v19 = (void **)&v15;
    sub_20BFD6F90(&v19);
    v19 = (void **)&v13;
    sub_20BFD6F90(&v19);
    v19 = (void **)&v11;
    sub_20BFD6F90(&v19);
    v19 = (void **)&v9;
    sub_20BFD6F90(&v19);
    v19 = (void **)&v7;
    sub_20BFD6F90(&v19);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

_BYTE *sub_20C0E2900(_BYTE *a1, uint64_t a2)
{
  *a1 = *(_BYTE *)a2;
  if (a1 != (_BYTE *)a2)
  {
    sub_20C0E29B0((uint64_t)(a1 + 8), *(_DWORD **)(a2 + 8), *(_DWORD **)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
    sub_20C0E29B0((uint64_t)(a1 + 32), *(_DWORD **)(a2 + 32), *(_DWORD **)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3);
    sub_20C0E29B0((uint64_t)(a1 + 56), *(_DWORD **)(a2 + 56), *(_DWORD **)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3);
    sub_20C0E29B0((uint64_t)(a1 + 80), *(_DWORD **)(a2 + 80), *(_DWORD **)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3);
    sub_20C0E29B0((uint64_t)(a1 + 104), *(_DWORD **)(a2 + 104), *(_DWORD **)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3);
    sub_20C0E29B0((uint64_t)(a1 + 128), *(_DWORD **)(a2 + 128), *(_DWORD **)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3);
  }
  return a1;
}

_DWORD *sub_20C0E29B0(uint64_t a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *result;
  unint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  char v19;
  char v20;

  v8 = a1 + 16;
  v9 = *(int **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
  {
    sub_20BFD7014((_QWORD *)a1);
    if (a4 >> 61)
      sub_20BDDF694();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    sub_20BDDF654((_QWORD *)a1, v12);
    result = sub_20BFD6DBC(v8, a2, a3, *(_DWORD **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3;
  if (v14 < a4)
  {
    v15 = &a2[2 * v14];
    sub_20C031408((uint64_t)&v19, a2, v15, v9);
    result = sub_20BFD6DBC(v8, v15, a3, *(_DWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = sub_20C031408((uint64_t)&v20, a2, a3, v9);
  v17 = v16;
  v18 = *(_DWORD **)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v18 -= 2;
      result = sub_20BFD6F64(v8, v18);
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
  return result;
}

void sub_20C0E2AF0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C0E2AF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20C0E2B00@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  char *v4;
  char *result;
  uint64_t v6;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::SdfListOp((uint64_t)a2);
  v4 = (char *)sub_20C029AF0(a1);
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPath>::Swap(v4, a2);
  v6 = a1[1];
  if (v6 && (a1[1] & 3) != 3)
    result = (char *)(*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C0E2B60(_Unwind_Exception *a1)
{
  void **v1;

  sub_20BFD6A50(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C0E2B7C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24C527DD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_20C0E2BB4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C527DD0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

_DWORD *sub_20C0E2BD4@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v5, a2, *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 8), *(const pxrInternal__aapl__pxrReserved__::SdfPath **)(a1 + 16), 1);
  sub_20BFD38A4((_DWORD *)a3, &v5);
  sub_20BFD38DC((_DWORD *)(a3 + 4), (_DWORD *)&v5 + 1);
  *(_BYTE *)(a3 + 8) = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v5 + 1);
  return sub_20BFD265C(&v5);
}

uint64_t sub_20C0E2C54(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C527E30))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C0E2C90()
{
  return &unk_24C527E30;
}

uint64_t sub_20C0E2C9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (sub_20BFE4618((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C0E2ECC(*(_BYTE **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C0E2D1C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6[8];
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void **v19;

  if (sub_20BFE4618((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    sub_20C0E3244(a2, v6);
    v4 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)v4 = v6[0];
    sub_20C0E314C((void **)(v4 + 8));
    *(_OWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 24) = v8;
    v7 = 0uLL;
    v8 = 0;
    sub_20C0E314C((void **)(v4 + 32));
    *(_OWORD *)(v4 + 32) = v9;
    *(_QWORD *)(v4 + 48) = v10;
    v9 = 0uLL;
    v10 = 0;
    sub_20C0E314C((void **)(v4 + 56));
    *(_OWORD *)(v4 + 56) = v11;
    *(_QWORD *)(v4 + 72) = v12;
    v11 = 0uLL;
    v12 = 0;
    sub_20C0E314C((void **)(v4 + 80));
    *(_OWORD *)(v4 + 80) = v13;
    *(_QWORD *)(v4 + 96) = v14;
    v13 = 0uLL;
    v14 = 0;
    sub_20C0E314C((void **)(v4 + 104));
    *(_OWORD *)(v4 + 104) = v15;
    *(_QWORD *)(v4 + 120) = v16;
    v15 = 0uLL;
    v16 = 0;
    sub_20C0E314C((void **)(v4 + 128));
    *(_OWORD *)(v4 + 128) = v17;
    *(_QWORD *)(v4 + 144) = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = (void **)&v17;
    sub_20C021740(&v19);
    v19 = (void **)&v15;
    sub_20C021740(&v19);
    v19 = (void **)&v13;
    sub_20C021740(&v19);
    v19 = (void **)&v11;
    sub_20C021740(&v19);
    v19 = (void **)&v9;
    sub_20C021740(&v19);
    v19 = (void **)&v7;
    sub_20C021740(&v19);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

_BYTE *sub_20C0E2ECC(_BYTE *a1, uint64_t a2)
{
  *a1 = *(_BYTE *)a2;
  if (a1 != (_BYTE *)a2)
  {
    sub_20C0E2FAC((uint64_t)(a1 + 8), *(__int128 **)(a2 + 8), *(__int128 **)(a2 + 16), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
    sub_20C0E2FAC((uint64_t)(a1 + 32), *(__int128 **)(a2 + 32), *(__int128 **)(a2 + 40), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
    sub_20C0E2FAC((uint64_t)(a1 + 56), *(__int128 **)(a2 + 56), *(__int128 **)(a2 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 3));
    sub_20C0E2FAC((uint64_t)(a1 + 80), *(__int128 **)(a2 + 80), *(__int128 **)(a2 + 88), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3));
    sub_20C0E2FAC((uint64_t)(a1 + 104), *(__int128 **)(a2 + 104), *(__int128 **)(a2 + 112), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
    sub_20C0E2FAC((uint64_t)(a1 + 128), *(__int128 **)(a2 + 128), *(__int128 **)(a2 + 136), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 3));
  }
  return a1;
}

void sub_20C0E2FAC(uint64_t a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_20C0E314C((void **)a1);
    if (a4 > 0x492492492492492)
      sub_20BDDF694();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)) >= 0x249249249249249)
      v11 = 0x492492492492492;
    else
      v11 = v10;
    sub_20BE1B554((_QWORD *)a1, v11);
    v12 = sub_20C029DC4(v8, a2, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    sub_20C0E31B8((int)&v17, (std::string *)a2, v13, v9);
    v12 = sub_20C029DC4(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20C0E31B8((int)&v18, (std::string *)a2, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 56;
      sub_20C0217C4(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_20C0E313C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C0E3144(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C0E314C(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        sub_20C0217C4((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_20C0E31B8(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    sub_20C01A074((int *)&this[1], &v5[1]);
    sub_20C01A0C8((int *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)v5[1].__r_.__value_.__r.__words + 1);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = *(_OWORD *)&v5[1].__r_.__value_.__r.__words[1];
    pxrInternal__aapl__pxrReserved__::VtDictionary::operator=((const void ****)&this[2], (const void ****)&v5[2]);
    this = (std::string *)((char *)this + 56);
    v5 = (std::string *)((char *)v5 + 56);
  }
  while (v5 != v6);
  return v6;
}

char *sub_20C0E3244@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  char *v4;
  char *result;
  uint64_t v6;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::SdfListOp((uint64_t)a2);
  v4 = (char *)sub_20C02C934(a1);
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfReference>::Swap(v4, a2);
  v6 = a1[1];
  if (v6 && (a1[1] & 3) != 3)
    result = (char *)(*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C0E32A4(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C029B80(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C0E32C0(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C527E88;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C0E3304(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C527E88;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C0E3330(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_20C0E3380(a1 + 8, a2, a3);
}

uint64_t sub_20C0E3338(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C527F08))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C0E3374()
{
  return &unk_24C527F08;
}

void sub_20C0E3380(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  char v5;
  int v6;
  _DWORD v7[5];
  _QWORD **v8;

  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, _QWORD))a1)(__p, a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_20C0E33FC(a3, (__int128 *)__p);
  sub_20BF49F14(&v8, 0);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v7);
  sub_20BFD265C(&v6);
  if (v5 < 0)
    operator delete(__p[0]);
}

uint64_t sub_20C0E33FC(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_QWORD *)a2 + 1) = 0;
  *((_QWORD *)a2 + 2) = 0;
  *(_QWORD *)a2 = 0;
  sub_20BFD38A4((_DWORD *)(a1 + 24), (_DWORD *)a2 + 6);
  sub_20BFD38DC((_DWORD *)(a1 + 28), (_DWORD *)a2 + 7);
  *(_OWORD *)(a1 + 32) = a2[2];
  v5 = *((_QWORD *)a2 + 6);
  *((_QWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = 1;
  return a1;
}

uint64_t sub_20C0E3464(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  if (sub_20BFE45A0((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    sub_20C0E3694(*(_BYTE **)(a1 + 8), v5);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C0E34E4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t result;
  char v6[8];
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void **v19;

  if (sub_20BFE45A0((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    sub_20C0E39D8(a2, v6);
    v4 = *(_QWORD *)(a1 + 8);
    *(_BYTE *)v4 = v6[0];
    sub_20C0E38EC((void **)(v4 + 8));
    *(_OWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 24) = v8;
    v7 = 0uLL;
    v8 = 0;
    sub_20C0E38EC((void **)(v4 + 32));
    *(_OWORD *)(v4 + 32) = v9;
    *(_QWORD *)(v4 + 48) = v10;
    v9 = 0uLL;
    v10 = 0;
    sub_20C0E38EC((void **)(v4 + 56));
    *(_OWORD *)(v4 + 56) = v11;
    *(_QWORD *)(v4 + 72) = v12;
    v11 = 0uLL;
    v12 = 0;
    sub_20C0E38EC((void **)(v4 + 80));
    *(_OWORD *)(v4 + 80) = v13;
    *(_QWORD *)(v4 + 96) = v14;
    v13 = 0uLL;
    v14 = 0;
    sub_20C0E38EC((void **)(v4 + 104));
    *(_OWORD *)(v4 + 104) = v15;
    *(_QWORD *)(v4 + 120) = v16;
    v15 = 0uLL;
    v16 = 0;
    sub_20C0E38EC((void **)(v4 + 128));
    *(_OWORD *)(v4 + 128) = v17;
    *(_QWORD *)(v4 + 144) = v18;
    v17 = 0uLL;
    v18 = 0;
    v19 = (void **)&v17;
    sub_20C021818(&v19);
    v19 = (void **)&v15;
    sub_20C021818(&v19);
    v19 = (void **)&v13;
    sub_20C021818(&v19);
    v19 = (void **)&v11;
    sub_20C021818(&v19);
    v19 = (void **)&v9;
    sub_20C021818(&v19);
    v19 = (void **)&v7;
    sub_20C021818(&v19);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

_BYTE *sub_20C0E3694(_BYTE *a1, uint64_t a2)
{
  *a1 = *(_BYTE *)a2;
  if (a1 != (_BYTE *)a2)
  {
    sub_20C0E376C((uint64_t)(a1 + 8), *(std::string **)(a2 + 8), *(std::string **)(a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 4));
    sub_20C0E376C((uint64_t)(a1 + 32), *(std::string **)(a2 + 32), *(std::string **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 4));
    sub_20C0E376C((uint64_t)(a1 + 56), *(std::string **)(a2 + 56), *(std::string **)(a2 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 4));
    sub_20C0E376C((uint64_t)(a1 + 80), *(std::string **)(a2 + 80), *(std::string **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 4));
    sub_20C0E376C((uint64_t)(a1 + 104), *(std::string **)(a2 + 104), *(std::string **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 4));
    sub_20C0E376C((uint64_t)(a1 + 128), *(std::string **)(a2 + 128), *(std::string **)(a2 + 136), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 4));
  }
  return a1;
}

void sub_20C0E376C(uint64_t a1, std::string *a2, std::string *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    sub_20C0E38EC((void **)a1);
    if (a4 > 0x555555555555555)
      sub_20BDDF694();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    sub_20C02CC00((_QWORD *)a1, v11);
    v12 = sub_20C02CC50(v8, (uint64_t)a2, (uint64_t)a3, *(__n128 **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = (std::string *)((char *)a2 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4));
    sub_20C0E3958((int)&v17, a2, v13, v9);
    v12 = sub_20C02CC50(v8, (uint64_t)v13, (uint64_t)a3, *(__n128 **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_20C0E3958((int)&v18, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 48;
      sub_20C02189C(v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_20C0E38DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C0E38E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20C0E38EC(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 48;
        sub_20C02189C((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_20C0E3958(int a1, std::string *__str, std::string *a3, std::string *this)
{
  std::string *v5;
  std::string *v6;

  v5 = __str;
  if (__str == a3)
    return __str;
  v6 = a3;
  do
  {
    std::string::operator=(this, v5);
    sub_20C01A074((int *)&this[1], &v5[1]);
    sub_20C01A0C8((int *)this[1].__r_.__value_.__r.__words + 1, (_DWORD *)v5[1].__r_.__value_.__r.__words + 1);
    *(_OWORD *)&this[1].__r_.__value_.__r.__words[1] = *(_OWORD *)&v5[1].__r_.__value_.__r.__words[1];
    this += 2;
    v5 += 2;
  }
  while (v5 != v6);
  return v6;
}

char *sub_20C0E39D8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  char *v4;
  char *result;
  uint64_t v6;

  pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::SdfListOp((uint64_t)a2);
  v4 = (char *)sub_20C02F3E8(a1);
  result = pxrInternal__aapl__pxrReserved__::SdfListOp<pxrInternal__aapl__pxrReserved__::SdfPayload>::Swap(v4, a2);
  v6 = a1[1];
  if (v6 && (a1[1] & 3) != 3)
    result = (char *)(*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C0E3A38(_Unwind_Exception *a1)
{
  void **v1;

  sub_20C02C9C4(v1);
  _Unwind_Resume(a1);
}

__n128 sub_20C0E3A54(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C527F68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C0E3A98(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C527F68;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_20C0E3AC4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_20C0E3B14(a1 + 8, a2, a3);
}

uint64_t sub_20C0E3ACC(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C527FE8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C0E3B08()
{
  return &unk_24C527FE8;
}

void sub_20C0E3B14(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v5;
  int v6;
  int v7;
  __int128 v8;

  (*(void (**)(void **__return_ptr, uint64_t, _QWORD, _QWORD))a1)(__p, a2, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  *(_OWORD *)a3 = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 16) = v5;
  __p[1] = 0;
  v5 = 0;
  __p[0] = 0;
  sub_20BFD38A4((_DWORD *)(a3 + 24), &v6);
  sub_20BFD38DC((_DWORD *)(a3 + 28), &v7);
  *(_OWORD *)(a3 + 32) = v8;
  *(_BYTE *)(a3 + 48) = 1;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v7);
  sub_20BFD265C(&v6);
  if (SHIBYTE(v5) < 0)
    operator delete(__p[0]);
}

uint64_t sub_20C0E3BC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t result;

  if (sub_20C0E3D20((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    v4 = a2[1];
    if ((v4 & 4) != 0)
      v5 = (*(uint64_t (**)(uint64_t *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
    else
      v5 = *a2;
    v6 = *(uint64_t ***)(a1 + 8);
    if (v6 != (uint64_t **)v5)
      sub_20C0E3D98(v6, *(_QWORD **)v5, (_QWORD *)(v5 + 8));
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C0E3C54(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;

  if (sub_20C0E3D20((pxrInternal__aapl__pxrReserved__::VtValue *)a2))
  {
    sub_20C0E4118(a2, &v10);
    v4 = *(_QWORD *)(a1 + 8);
    v5 = v4 + 8;
    sub_20BFE4CE8(v4, *(_QWORD **)(v4 + 8));
    *(_QWORD *)v4 = v10;
    v6 = v11;
    *(_QWORD *)(v4 + 8) = v11;
    v7 = v12;
    *(_QWORD *)(v4 + 16) = v12;
    if (v7)
    {
      v8 = 0;
      v6[2] = v5;
      v10 = &v11;
      v11 = 0;
      v12 = 0;
    }
    else
    {
      *(_QWORD *)v4 = v5;
      v8 = v11;
    }
    sub_20BFE4CE8((uint64_t)&v10, v8);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8((pxrInternal__aapl__pxrReserved__::VtValue *)a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C0E3D20(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAB4DEALL & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C528000);
}

uint64_t **sub_20C0E3D98(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;
  int *v17[2];

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = sub_20BDFC6B0((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v17[0] = (int *)v8 + 7;
          v17[1] = (int *)v8 + 9;
          sub_20C0E3F8C(v17, (_DWORD *)v9 + 7);
          sub_20C0E3F08(v5, v16);
          v16 = v15;
          if (v15)
            v15 = sub_20BDFC6B0((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          v8 = v16;
          if (v16)
            v11 = a2 == a3;
          else
            v11 = 1;
          v9 = a2;
        }
        while (!v11);
      }
    }
    result = (uint64_t **)sub_20C0E3FEC((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)sub_20C0E4040((uint64_t)v5, (_DWORD *)a2 + 7);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_20C0E3EF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0E3FEC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0E3F08(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;

  v5 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v5 = (uint64_t **)v4;
        if (!sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)a2 + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28)))break;
        v4 = *v5;
        v6 = v5;
        if (!*v5)
          goto LABEL_8;
      }
      v4 = v5[1];
    }
    while (v4);
    v6 = v5 + 1;
  }
  else
  {
    v6 = a1 + 1;
  }
LABEL_8:
  sub_20BDDE1B4(a1, (uint64_t)v5, v6, a2);
  return a2;
}

int **sub_20C0E3F8C(int **a1, _DWORD *a2)
{
  int *v4;
  int *v5;

  v4 = *a1;
  sub_20C01A074(*a1, a2);
  sub_20C01A0C8(v4 + 1, a2 + 1);
  v5 = a1[1];
  sub_20C01A074(v5, a2 + 2);
  sub_20C01A0C8(v5 + 1, a2 + 3);
  return a1;
}

uint64_t sub_20C0E3FEC(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  sub_20BFE4CE8(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_20BFE4CE8(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *sub_20C0E4040(uint64_t a1, _DWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t *v9[2];
  char v10;

  v4 = (uint64_t *)(a1 + 8);
  v9[0] = (uint64_t *)operator new(0x30uLL);
  v9[1] = v4;
  sub_20C0D9B58((_DWORD *)v9[0] + 7, a2);
  v10 = 1;
  v5 = *(_QWORD *)(a1 + 8);
  if (v5)
  {
    do
    {
      while (1)
      {
        v4 = (uint64_t *)v5;
        if (!sub_20BFD758C((pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v9[0] + 28), (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v5 + 28)))break;
        v5 = *v4;
        v6 = (uint64_t **)v4;
        if (!*v4)
          goto LABEL_8;
      }
      v5 = v4[1];
    }
    while (v5);
    v6 = (uint64_t **)(v4 + 1);
  }
  else
  {
    v6 = (uint64_t **)v4;
  }
LABEL_8:
  v7 = v9[0];
  sub_20BDDE1B4((uint64_t **)a1, (uint64_t)v4, v6, v9[0]);
  v9[0] = 0;
  sub_20BFE4C64((uint64_t)v9, 0);
  return v7;
}

void sub_20C0E4100(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFE4C64((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0E4118@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t *result;
  uint64_t v6;
  BOOL v7;

  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  v4 = (uint64_t *)sub_20C0E4190(a1);
  result = sub_20BF07C64(v4, (uint64_t)a2);
  v6 = a1[1];
  if (v6)
    v7 = (a1[1] & 3) == 3;
  else
    v7 = 1;
  if (!v7)
    result = (uint64_t *)(*(uint64_t (**)(uint64_t *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C0E4178(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFE4CE8(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20C0E4190(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C0E4220(a1);
}

uint64_t sub_20C0E4220(uint64_t *a1)
{
  unsigned int v2;
  char *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;

  v2 = atomic_load((unsigned int *)(*a1 + 24));
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x20uLL);
    sub_20C0E4308((uint64_t *)v3, *a1);
    v4 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)v3 + 6);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = (unsigned int *)*a1;
    *a1 = (uint64_t)v3;
    sub_20C0E42B0(&v7);
  }
  return *a1;
}

void sub_20C0E429C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned int **sub_20C0E42B0(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2 + 6;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BFE4CE8((uint64_t)v2, *((_QWORD **)v2 + 1));
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t *sub_20C0E4308(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20C0E435C(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_20C0E4344(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFE4CE8(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0E435C(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20C0E43E0(v5, v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)((char *)v4 + 28), (_DWORD *)v4 + 7);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20C0E43E0(uint64_t **a1, _QWORD *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, _DWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = sub_20BFD7378(a1, a2, &v13, &v12, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    sub_20C0D9B58((_DWORD *)v7 + 7, a4);
    v11 = 1;
    sub_20BDDE1B4(a1, v13, v8, v7);
    v10[0] = 0;
    sub_20BFE4C64((uint64_t)v10, 0);
  }
  return v7;
}

uint64_t *sub_20C0E4490(uint64_t **a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, _DWORD **a4)
{
  void **v6;
  uint64_t *v7;
  uint64_t **v8;
  _QWORD v10[2];
  char v11;
  uint64_t v12;

  v6 = (void **)sub_20BFD74FC((uint64_t)a1, &v12, a2);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    v10[1] = a1 + 1;
    sub_20C0E453C((_DWORD *)v7 + 7, *a4);
    v11 = 1;
    sub_20BDDE1B4(a1, v12, v8, v7);
    v10[0] = 0;
    sub_20BFE4C64((uint64_t)v10, 0);
  }
  return v7;
}

_DWORD *sub_20C0E453C(_DWORD *a1, _DWORD *a2)
{
  _DWORD *v4;

  v4 = sub_20BFD6E54(a1, a2);
  sub_20BFD6EA4(v4 + 1, a2 + 1);
  *((_QWORD *)a1 + 1) = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(a1 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(a1 + 3);
  return a1;
}

uint64_t *sub_20C0E458C(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD **v6;
  _QWORD *v7[2];

  if ((sub_20C0E3D20(a1) & 1) == 0)
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = v7;
    sub_20C0E460C(a1, (uint64_t)&v6);
    sub_20BFE4CE8((uint64_t)&v6, v7[0]);
  }
  v4 = (uint64_t *)sub_20C0E4190((uint64_t *)a1);
  return sub_20BF07C64(v4, a2);
}

void sub_20C0E45F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20BFE4CE8((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0E460C(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C528048;
  sub_20C0E4994(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C0E469C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C0E46D8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

unsigned int **sub_20C0E4700(unsigned int **a1, unsigned int **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C0E42B0(a1);
}

uint64_t sub_20C0E4710()
{
  return 1;
}

unint64_t sub_20C0E4718(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v1 = *a1;
  v3 = 0;
  v4 = 0;
  sub_20C0E484C((uint64_t)&v3, *(_QWORD **)v1, (_QWORD *)(v1 + 8));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_20C0E4764(_QWORD **a1, _QWORD **a2)
{
  return sub_20C0E48D4(*a1, *a2);
}

uint64_t sub_20C0E4770(_QWORD **a1, _QWORD *a2)
{
  return sub_20C0E48D4(*a1, a2);
}

uint64_t sub_20C0E477C()
{
  return 0;
}

_QWORD *sub_20C0E4788(uint64_t **a1, _QWORD *a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1, a3);
}

void *sub_20C0E4798()
{
  return &unk_24C528000;
}

uint64_t sub_20C0E47A4()
{
  return 0;
}

uint64_t sub_20C0E47AC()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C0E47B8()
{
  return 0;
}

uint64_t sub_20C0E47C0()
{
  return 0;
}

BOOL sub_20C0E47C8(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAB4DEALL & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C0E4800(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C528000, a2, a3);
}

void *sub_20C0E4820()
{
  return &unk_24C528000;
}

uint64_t sub_20C0E482C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t *sub_20C0E4834@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C528048;
  return sub_20C0E4994(a2, v2);
}

uint64_t sub_20C0E484C(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    do
    {
      v6 = (_QWORD *)v4[1];
      v7 = v4;
      if (v6)
      {
        do
        {
          v8 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v7[2];
          v9 = *v8 == (_QWORD)v7;
          v7 = v8;
        }
        while (!v9);
      }
      sub_20BFD84AC(v5, (unsigned int *)v4 + 7);
      result = sub_20BFD84AC(v5, (unsigned int *)v4 + 9);
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t sub_20C0E48D4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;

  if (a1[2] != a2[2])
    return 0;
  v4 = (_QWORD *)*a1;
  v2 = a1 + 1;
  v3 = v4;
  if (v4 == v2)
    return 1;
  v5 = (_QWORD *)*a2;
  do
  {
    v6 = *(_QWORD *)((char *)v3 + 28) == *(_QWORD *)((char *)v5 + 28)
      && *(_QWORD *)((char *)v3 + 36) == *(_QWORD *)((char *)v5 + 36);
    v7 = v6;
    if (!v6)
      break;
    v8 = (_QWORD *)v3[1];
    v9 = v3;
    if (v8)
    {
      do
      {
        v3 = v8;
        v8 = (_QWORD *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        v3 = (_QWORD *)v9[2];
        v6 = *v3 == (_QWORD)v9;
        v9 = v3;
      }
      while (!v6);
    }
    v10 = (_QWORD *)v5[1];
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (_QWORD *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (_QWORD *)v5[2];
        v6 = *v11 == (_QWORD)v5;
        v5 = v11;
      }
      while (!v6);
    }
    v5 = v11;
  }
  while (v3 != v2);
  return v7;
}

uint64_t *sub_20C0E4994(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (char *)operator new(0x20uLL);
  result = sub_20C0E4308((uint64_t *)v4, a2);
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)v4 + 6);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C0E49EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0E4A00(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v4;
  _DWORD **v5;
  uint64_t result;

  if (sub_20C030FCC(a2))
  {
    v4 = *((_QWORD *)a2 + 1);
    if ((v4 & 4) != 0)
      v5 = (_DWORD **)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8)
                                                                                             + 168))(a2);
    else
      v5 = *(_DWORD ***)a2;
    if (*(_DWORD ***)(a1 + 8) != v5)
      sub_20C0E29B0(*(_QWORD *)(a1 + 8), *v5, v5[1], ((char *)v5[1] - (char *)*v5) >> 3);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C0E4A94(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  _QWORD *v4;
  uint64_t result;
  __int128 v6;
  uint64_t v7;
  void **v8;

  if (sub_20C030FCC(a2))
  {
    sub_20C0E4B34(a2, &v6);
    v4 = *(_QWORD **)(a1 + 8);
    sub_20BFD7014(v4);
    *(_OWORD *)v4 = v6;
    v4[2] = v7;
    v6 = 0uLL;
    v7 = 0;
    v8 = (void **)&v6;
    sub_20BFD6F90(&v8);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t *sub_20C0E4B34@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = (uint64_t *)sub_20C0E4BCC(a1);
  v5 = *result;
  *result = 0;
  *a2 = v5;
  v6 = result[1];
  result[1] = 0;
  a2[1] = v6;
  v7 = result[2];
  result[2] = 0;
  a2[2] = v7;
  v8 = a1[1];
  if (v8 && (a1[1] & 3) != 3)
    result = (uint64_t *)(*(uint64_t (**)(_QWORD *))((v8 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

void sub_20C0E4BB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0E4BCC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C030BD4((uint64_t)a1);
}

uint64_t *sub_20C0E4C5C(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t *a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8[3];
  void **v9;

  if ((sub_20C030FCC(a1) & 1) == 0)
  {
    memset(v8, 0, sizeof(v8));
    sub_20C0E4D08(a1, v8);
    v9 = (void **)v8;
    sub_20BFD6F90(&v9);
  }
  result = (uint64_t *)sub_20C0E4BCC(a1);
  v5 = *result;
  *result = *a2;
  *a2 = v5;
  v6 = result[1];
  result[1] = a2[1];
  a2[1] = v6;
  v7 = result[2];
  result[2] = a2[2];
  a2[2] = v7;
  return result;
}

void sub_20C0E4CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD6F90((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0E4D08(_QWORD *a1, _DWORD **a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C526910;
  sub_20C030C78(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C0E4D98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 sub_20C0E4DDC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C528148;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C0E4E20(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C528148;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C0E4E4C(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, uint64_t a8, char *a9, _QWORD *a10)
{
  char v11;

  v11 = *a9;
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *a2, a3, a4, a5, *a6, a7, a8, v11, *a10);
}

uint64_t sub_20C0E4EB0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5281C8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C0E4EEC()
{
  return &unk_24C5281C8;
}

__n128 sub_20C0E4F00(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_24C5281F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_20C0E4F44(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_24C5281F0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_20C0E4F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, uint64_t a7, char *a8, _QWORD *a9, _QWORD *a10)
{
  char v11;

  v11 = *a8;
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, char, _QWORD, _QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2, a3, a4, *a5, a6, a7, v11, *a9, *a10);
}

uint64_t sub_20C0E4FD0(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C528270))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C0E500C()
{
  return &unk_24C528270;
}

void pxrInternal__aapl__pxrReserved__::SdfData::~SdfData(unsigned int **this)
{
  char *v2;
  const void *v3;

  *this = (unsigned int *)off_24C528298;
  v2 = (char *)(this + 3);
  sub_20C0E505C((uint64_t)(this + 3));
  sub_20C0E6A40((uint64_t)v2);
  pxrInternal__aapl__pxrReserved__::SdfAbstractData::~SdfAbstractData(this, v3);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::SdfData::~SdfData(this);
  operator delete(v1);
}

uint64_t sub_20C0E505C(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__ *v1;
  _OWORD v3[2];
  int v4;

  memset(v3, 0, sizeof(v3));
  v4 = 1065353216;
  sub_20BFDC9B4((uint64_t)v3, a1);
  if ((pxrInternal__aapl__pxrReserved__::Work_ShouldSynchronizeAsyncDestroyCalls(v1) & 1) == 0)
    sub_20C0E6E10((uint64_t)v3);
  return sub_20C0E6A40((uint64_t)v3);
}

void sub_20C0E50B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C0E6A40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::StreamsData(pxrInternal__aapl__pxrReserved__::SdfData *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::IsDetached(pxrInternal__aapl__pxrReserved__::SdfData *this)
{
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfData::HasSpec(uint64_t a1, unsigned int *a2)
{
  return sub_20C0E70D0((_QWORD *)(a1 + 24), a2) != 0;
}

void pxrInternal__aapl__pxrReserved__::SdfData::EraseSpec(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  const char *Text;
  const char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)((char *)this + 24);
  v4 = sub_20C0AD934((_QWORD *)this + 3, (unsigned int *)a2);
  if (v4
    || (LOBYTE(v10) = 0,
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2),
        v8 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No spec to erase at <%s>", v6, v7, Text, "sdf/data.cpp", "EraseSpec", 63, "virtual void pxrInternal__aapl__pxrReserved__::SdfData::EraseSpec(const SdfPath &)", v10), (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v9, "i != _data.end()", v8) & 1) != 0))
  {
    sub_20BEB587C(v3, v4, (uint64_t)&v9);
    sub_20C0E71AC((uint64_t)&v9, 0);
  }
}

void pxrInternal__aapl__pxrReserved__::SdfData::MoveSpec(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  _QWORD *v5;
  uint64_t **v6;
  char v7;
  char v8;
  uint64_t *String;
  const char *v10;
  char *v11;
  uint64_t *v12;
  char *v13;
  int v14;
  _DWORD v15[3];
  uint64_t v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  char v21;
  void **v22;

  v5 = (_QWORD *)((char *)this + 24);
  v6 = (uint64_t **)sub_20C0AD934((_QWORD *)this + 3, (unsigned int *)a2);
  if (v6)
    goto LABEL_2;
  v17 = "sdf/data.cpp";
  v18 = "MoveSpec";
  v19 = 75;
  v20 = "virtual void pxrInternal__aapl__pxrReserved__::SdfData::MoveSpec(const SdfPath &, const SdfPath &)";
  v21 = 0;
  String = pxrInternal__aapl__pxrReserved__::SdfPath::GetString(a2);
  v12 = *((char *)String + 23) >= 0 ? String : (uint64_t *)*String;
  v13 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No spec to move at <%s>", v10, v11, v12);
  if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "old != _data.end()", v13) & 1) != 0)
  {
LABEL_2:
    sub_20C0E6AFC((uint64_t)&v14, a3, v6 + 3);
    sub_20C0E6DB4((uint64_t)&v17, (uint64_t)&v14);
    sub_20C0E71F0((uint64_t)v5, (unsigned int *)&v17, (uint64_t)&v17);
    v8 = v7;
    v22 = (void **)&v19;
    sub_20C0DE330(&v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_20BFD265C(&v17);
    v22 = (void **)&v16;
    sub_20C0DE330(&v22);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v15);
    sub_20BFD265C(&v14);
    if ((v8 & 1) != 0
      || (v17 = "sdf/data.cpp",
          v18 = "MoveSpec",
          v19 = 79,
          v20 = "virtual void pxrInternal__aapl__pxrReserved__::SdfData::MoveSpec(const SdfPath &, const SdfPath &)",
          v21 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v17, "inserted", 0) & 1) != 0))
    {
      sub_20BEB587C(v5, v6, (uint64_t)&v17);
      sub_20C0E71AC((uint64_t)&v17, 0);
    }
  }
}

void sub_20C0E5358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  sub_20C0E5374((uint64_t)va1);
  sub_20C0E53BC((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0E5374(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 16);
  sub_20C0DE330(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

_DWORD *sub_20C0E53BC(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 16);
  sub_20C0DE330(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfData::GetSpecType(uint64_t a1, unsigned int *a2)
{
  _QWORD *result;

  result = sub_20C0E70D0((_QWORD *)(a1 + 24), a2);
  if (result)
    return (_QWORD *)*((unsigned int *)result + 6);
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::CreateSpec(uint64_t a1, _DWORD *a2, int a3)
{
  uint64_t result;
  _DWORD *v7[4];
  char v8;

  if (a3
    || (v7[0] = "sdf/data.cpp",
        v7[1] = "CreateSpec",
        v7[2] = (_DWORD *)98,
        v7[3] = "virtual void pxrInternal__aapl__pxrReserved__::SdfData::CreateSpec(const SdfPath &, SdfSpecType)",
        v8 = 0,
        result = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v7, "specType != SdfSpecTypeUnknown", 0), (result & 1) != 0))
  {
    v7[0] = a2;
    result = (uint64_t)sub_20C0E7548(a1 + 24, a2, (uint64_t)&unk_20CAC184C, v7);
    *(_DWORD *)(result + 24) = a3;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::_VisitSpecs(uint64_t this, pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a2, char *a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v6 = *(_QWORD *)(this + 40);
  v7 = 0;
  if (v6)
  {
    v4 = this;
    do
    {
      v5 = sub_20C0E5534(&v6, (uint64_t)a2, a3);
      this = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *, uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4, *v5 + 16);
      if (!(_DWORD)this)
        break;
      this = sub_20C0E55AC((uint64_t)&v6);
    }
    while (v6 != v7);
  }
  return this;
}

_QWORD *sub_20C0E5534(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__::TfHashMap<pxr"
            "Internal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfData::_SpecData, pxrInternal__a"
            "apl__pxrReserved__::SdfPath::Hash>>::operator->() [T = const pxrInternal__aapl__pxrReserved__::TfHashMap<pxr"
            "Internal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfData::_SpecData, pxrInternal__a"
            "apl__pxrReserved__::SdfPath::Hash>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

uint64_t sub_20C0E55AC(uint64_t a1)
{
  _QWORD v3[4];
  char v4;

  if (*(_QWORD *)a1 == *(_QWORD *)(a1 + 8))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator++";
    v3[2] = 250;
    v3[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const pxrInternal__aapl__pxrReserved__:"
            ":TfHashMap<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfData::_SpecData, "
            "pxrInternal__aapl__pxrReserved__::SdfPath::Hash>>::operator++() [T = const pxrInternal__aapl__pxrReserved__:"
            ":TfHashMap<pxrInternal__aapl__pxrReserved__::SdfPath, pxrInternal__aapl__pxrReserved__::SdfData::_SpecData, "
            "pxrInternal__aapl__pxrReserved__::SdfPath::Hash>, Reverse = false]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v3, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)a1 = **(_QWORD **)a1;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::Has(uint64_t a1, unsigned int *a2, _QWORD *a3, uint64_t (***a4)(_QWORD, uint64_t))
{
  uint64_t result;

  result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue(a1, a2, a3);
  if (result)
  {
    if (a4)
      return (**a4)(a4, result);
    else
      return 1;
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  _QWORD *result;
  _QWORD *v5;
  _QWORD *v6;

  result = sub_20C0E70D0((_QWORD *)(a1 + 24), a2);
  if (result)
  {
    v5 = (_QWORD *)result[4];
    v6 = (_QWORD *)result[5];
    if (v5 == v6)
    {
      return 0;
    }
    else
    {
      while ((*v5 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v5 += 3;
        if (v5 == v6)
          return 0;
      }
      return v5 + 1;
    }
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfData::Has(uint64_t a1, unsigned int *a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *FieldValue;
  _QWORD *v6;

  FieldValue = pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue(a1, a2, a3);
  v6 = FieldValue;
  if (a4 && FieldValue)
    sub_20BF4A9BC(a4, FieldValue);
  return v6 != 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::HasSpecAndField(uint64_t a1, unsigned int *a2, _QWORD *a3, uint64_t (***a4)(_QWORD, uint64_t), _DWORD *a5)
{
  uint64_t result;

  result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfData::_GetSpecTypeAndFieldValue(a1, a2, a3, a5);
  if (result)
  {
    if (a4)
      return (**a4)(a4, result);
    else
      return 1;
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfData::_GetSpecTypeAndFieldValue(uint64_t a1, unsigned int *a2, _QWORD *a3, _DWORD *a4)
{
  _QWORD *result;
  _QWORD *v7;
  _QWORD *v8;

  result = sub_20C0E70D0((_QWORD *)(a1 + 24), a2);
  if (result)
  {
    *a4 = *((_DWORD *)result + 6);
    v7 = (_QWORD *)result[4];
    v8 = (_QWORD *)result[5];
    if (v7 == v8)
    {
      return 0;
    }
    else
    {
      while ((*v7 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v7 += 3;
        if (v7 == v8)
          return 0;
      }
      return v7 + 1;
    }
  }
  else
  {
    *a4 = 0;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfData::HasSpecAndField(uint64_t a1, unsigned int *a2, _QWORD *a3, _QWORD *a4, _DWORD *a5)
{
  _QWORD *SpecTypeAndFieldValue;
  _QWORD *v7;

  SpecTypeAndFieldValue = pxrInternal__aapl__pxrReserved__::SdfData::_GetSpecTypeAndFieldValue(a1, a2, a3, a5);
  v7 = SpecTypeAndFieldValue;
  if (a4 && SpecTypeAndFieldValue)
    sub_20BF4A9BC(a4, SpecTypeAndFieldValue);
  return v7 != 0;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfData::_GetMutableFieldValue(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_20C0AD934((_QWORD *)(a1 + 24), a2);
  if (result)
  {
    v5 = result[4];
    v6 = result[5] - v5;
    if (v6)
    {
      v7 = v6 / 24;
      for (result = (_QWORD *)(v5 + 8); (*(result - 1) & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8); result += 3)
      {
        if (!--v7)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfData::Get@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;

  result = pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue(a1, a2, a3);
  if (result)
    return sub_20BF4C6D0(a4, result);
  a4[1] = 0;
  return result;
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfData::Set(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  _QWORD *result;
  uint64_t v10;
  int v11;

  sub_20BEB59B0((uint64_t)&v10, (uint64_t)"Sdf", (uint64_t)"SdfData::Set");
  if (*((_QWORD *)a4 + 1))
  {
    result = pxrInternal__aapl__pxrReserved__::SdfData::_GetOrCreateFieldValue(this, a2, a3);
    if (result)
      result = sub_20BF4A9BC(result, a4);
  }
  else
  {
    result = (_QWORD *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfData *, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)this + 168))(this, a2, a3);
  }
  while (v11--)
    result = (_QWORD *)pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v10);
  return result;
}

void sub_20C0E597C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfData::_GetOrCreateFieldValue(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t v11;
  const char *Text;
  const char *v14;
  char *v15;
  unint64_t v16;
  const char *v17;
  char *v18;
  uint64_t *v19[4];
  char v20;

  v5 = sub_20C0AD934((_QWORD *)this + 3, (unsigned int *)a2);
  if (!v5)
  {
    v19[0] = (uint64_t *)"sdf/data.cpp";
    v19[1] = (uint64_t *)"_GetOrCreateFieldValue";
    v19[2] = (uint64_t *)265;
    v19[3] = (uint64_t *)"VtValue *pxrInternal__aapl__pxrReserved__::SdfData::_GetOrCreateFieldValue(const SdfPath &, const TfToken &)";
    v20 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    v16 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      v17 = (const char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0)
        v17 = *(const char **)v17;
    }
    else
    {
      v17 = "";
    }
    v18 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"No spec at <%s> when trying to set field '%s'", v14, v15, Text, v17);
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v19, "i != _data.end()", v18) & 1) == 0)
      return 0;
  }
  v7 = (_QWORD *)v5[4];
  v6 = (_QWORD *)v5[5];
  if (v7 == v6)
  {
LABEL_5:
    v19[0] = (uint64_t *)a3;
    if ((unint64_t)v6 >= v5[6])
    {
      v11 = sub_20C0E782C(v5 + 4, (uint64_t)&unk_20CAC184C, v19);
    }
    else
    {
      v8 = *(_QWORD *)a3;
      *v6 = *(_QWORD *)a3;
      if ((v8 & 7) != 0)
      {
        v9 = (unsigned int *)(v8 & 0xFFFFFFFFFFFFFFF8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 2, v9));
        if ((v10 & 1) == 0)
          *v6 &= 0xFFFFFFFFFFFFFFF8;
      }
      v6[2] = 0;
      v11 = (uint64_t)(v6 + 3);
    }
    v5[5] = v11;
    return (_QWORD *)(v11 - 16);
  }
  else
  {
    while ((*v7 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8))
    {
      v7 += 3;
      if (v7 == v6)
        goto LABEL_5;
    }
    return v7 + 1;
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::Set(pxrInternal__aapl__pxrReserved__::SdfData *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (***a4)(_QWORD))
{
  uint64_t result;
  uint64_t v10;
  int v11;

  sub_20BEB59B0((uint64_t)&v10, (uint64_t)"Sdf", (uint64_t)"SdfData::Set");
  result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfData::_GetOrCreateFieldValue(a1, a2, a3);
  if (result)
    result = (**a4)(a4);
  while (v11--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v10);
  return result;
}

void sub_20C0E5B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20BEB24F4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfData::Erase(uint64_t a1, unsigned int *a2, _QWORD *a3)
{
  _QWORD *result;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_20C0AD934((_QWORD *)(a1 + 24), a2);
  if (result)
  {
    v6 = (char *)result[4];
    v5 = (char *)result[5];
    v7 = (uint64_t)(result + 4);
    if (v5 != v6)
    {
      v8 = (v5 - v6) / 24;
      while ((*(_QWORD *)v6 & 0xFFFFFFFFFFFFFFF8) != (*a3 & 0xFFFFFFFFFFFFFFF8))
      {
        v6 += 24;
        if (!--v8)
          return result;
      }
      sub_20C0DEC2C((_QWORD *)v6 + 3, v5, v6);
      return (_QWORD *)sub_20C0DE370(v7, v9);
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfData::List(pxrInternal__aapl__pxrReserved__::SdfData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = sub_20C0E70D0((_QWORD *)this + 3, (unsigned int *)a2);
  v5 = v4;
  if (v4)
  {
    v7 = v4[4];
    v6 = v4[5];
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
    sub_20C0E5D00((uint64_t)a3, v8);
    if (v6 != v7)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        sub_20BF32220((_QWORD *)(*a3 + v9), (_QWORD *)(v5[4] + v10));
        v10 += 24;
        v9 += 8;
        --v8;
      }
      while (v8);
    }
  }
}

void sub_20C0E5CE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_20C0E5D00(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (v2 - *(_QWORD *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3)
    {
      v4 = *(_QWORD *)a1 + 8 * a2;
      while (v2 != v4)
      {
        v6 = *(_QWORD *)(v2 - 8);
        v2 -= 8;
        v5 = v6;
        if ((v6 & 7) != 0)
        {
          v7 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
          do
            v8 = __ldxr(v7);
          while (__stlxr(v8 - 2, v7));
        }
      }
      *(_QWORD *)(a1 + 8) = v4;
    }
  }
  else
  {
    sub_20C0E7964((char **)a1, a2 - v3);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::ListAllTimeSamples@<X0>(uint64_t this@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  _QWORD *v6;
  double *v7;
  double v8[2];
  uint64_t v9;
  uint64_t v10;

  v4 = this;
  a4[2] = 0;
  a4[1] = 0;
  *a4 = (uint64_t)(a4 + 1);
  v9 = *(_QWORD *)(this + 40);
  v10 = 0;
  while (v9 != v10)
  {
    v6 = sub_20C0E5534(&v9, a2, a3);
    (*(void (**)(double **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 248))(&v7, v4, *v6 + 16);
    sub_20C0E5E30(a4, v7, v8);
    sub_20BE6100C((uint64_t)&v7, *(_QWORD **)&v8[0]);
    this = sub_20C0E55AC((uint64_t)&v9);
  }
  return this;
}

void sub_20C0E5E00(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BE6100C(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0E5E30(uint64_t *result, double *a2, double *a3)
{
  double *v4;
  uint64_t **v5;
  double *v6;
  double *v7;
  double *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (double *)(result + 1);
    do
    {
      result = sub_20C0E7A88(v5, v6, v4 + 4, (uint64_t *)v4 + 4);
      v7 = (double *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (double *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::ListTimeSamplesForPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfData *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  if (!atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens))
    sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  (*(void (**)(_QWORD **__return_ptr, pxrInternal__aapl__pxrReserved__::SdfData *, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)this + 136))(&v14, this, a2);
  if (sub_20BFEB19C((pxrInternal__aapl__pxrReserved__::VtValue *)&v14))
  {
    if ((v15 & 4) != 0)
      v9 = (_QWORD *)(*(uint64_t (**)(_QWORD **))((v15 & 0xFFFFFFFFFFFFFFF8) + 168))(&v14);
    else
      v9 = v14;
    v12 = (_QWORD *)*v9;
    v13 = v9 + 1;
    while (v12 != v13)
    {
      v10 = sub_20C0E6000(&v12, v7, v8);
      sub_20C6CC72C((uint64_t **)a3, (double *)(*v10 + 32), (uint64_t *)(*v10 + 32));
      sub_20C0E6078(&v12);
    }
  }
  return sub_20BF4C2D8((uint64_t)&v14);
}

void sub_20C0E5FD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BE6100C(v4, *(_QWORD **)(v4 + 8));
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0E6000(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<double, pxrInternal__aapl__pxrReserved"
            "__::VtValue>>::operator->() [T = const std::map<double, pxrInternal__aapl__pxrReserved__::VtValue>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C0E6078(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<double, pxrInternal__aap"
            "l__pxrReserved__::VtValue>>::operator++() [T = const std::map<double, pxrInternal__aapl__pxrReserved__::VtVa"
            "lue>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfData::GetBracketingTimeSamples(pxrInternal__aapl__pxrReserved__::SdfData *this, double a2, double *a3, double *a4)
{
  uint64_t v7;
  double v8;
  double *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD **v13;
  BOOL v14;
  _QWORD *v15;
  double v16;
  double *v17;
  double *v18;
  _BOOL8 v19;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 240))(&v21);
  v7 = v23;
  if (v23)
  {
    v8 = *(double *)(v21 + 32);
    if (v8 < a2)
    {
      v9 = (double *)&v22;
      v10 = v22;
      if (v22)
      {
        v11 = v22;
        do
        {
          v12 = v11;
          v11 = (_QWORD *)v11[1];
        }
        while (v11);
      }
      else
      {
        v13 = &v22;
        do
        {
          v12 = v13[2];
          v14 = *v12 == (_QWORD)v13;
          v13 = (_QWORD **)v12;
        }
        while (v14);
      }
      if (*((double *)v12 + 4) > a2)
      {
        if (v22)
        {
          do
          {
            v15 = v10 + 1;
            if (*((double *)v10 + 4) >= a2)
            {
              v15 = v10;
              v9 = (double *)v10;
            }
            v10 = (_QWORD *)*v15;
          }
          while (*v15);
        }
        v8 = v9[4];
        *a4 = v8;
        if (v8 != a2)
        {
          v16 = *v9;
          if (*(_QWORD *)v9)
          {
            do
            {
              v17 = *(double **)&v16;
              v16 = *(double *)(*(_QWORD *)&v16 + 8);
            }
            while (v16 != 0.0);
          }
          else
          {
            do
            {
              v17 = (double *)*((_QWORD *)v9 + 2);
              v14 = *(_QWORD *)v17 == (_QWORD)v9;
              v9 = v17;
            }
            while (v14);
          }
          v8 = v17[4];
        }
        goto LABEL_26;
      }
      if (v22)
      {
        do
        {
          v18 = (double *)v10;
          v10 = (_QWORD *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          v18 = (double *)*((_QWORD *)v9 + 2);
          v14 = *(_QWORD *)v18 == (_QWORD)v9;
          v9 = v18;
        }
        while (v14);
      }
      v8 = v18[4];
    }
    *a4 = v8;
LABEL_26:
    *a3 = v8;
  }
  v19 = v7 != 0;
  sub_20BE6100C((uint64_t)&v21, v22);
  return v19;
}

pxrInternal__aapl__pxrReserved__::VtValue *pxrInternal__aapl__pxrReserved__::SdfData::GetNumTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *result;
  pxrInternal__aapl__pxrReserved__::VtValue *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v4)
    v4 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  result = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue((uint64_t)this, (unsigned int *)a2, v4);
  if (result)
  {
    v6 = result;
    if (sub_20BFEB19C(result))
    {
      v7 = *((_QWORD *)v6 + 1);
      if ((v7 & 4) != 0)
        v8 = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v7 & 0xFFFFFFFFFFFFFFF8) + 168))(v6);
      else
        v8 = *(_QWORD *)v6;
      return *(pxrInternal__aapl__pxrReserved__::VtValue **)(v8 + 16);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::GetBracketingTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  double *v14;
  double v15;
  double *v16;
  double *v17;
  double *v18;
  double *v19;
  double *v20;
  double *v21;
  BOOL v22;
  double **v23;
  double v24;
  double *v25;
  double *v26;

  v10 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v10)
    v10 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue((uint64_t)this, (unsigned int *)a2, v10);
  if (result)
  {
    v12 = result;
    result = sub_20BFEB19C((pxrInternal__aapl__pxrReserved__::VtValue *)result);
    if ((_DWORD)result)
    {
      v13 = *(_QWORD *)(v12 + 8);
      if ((v13 & 4) != 0)
        v14 = (double *)(*(uint64_t (**)(uint64_t))((v13 & 0xFFFFFFFFFFFFFFF8) + 168))(v12);
      else
        v14 = *(double **)v12;
      if (!*((_QWORD *)v14 + 2))
        return 0;
      v15 = *(double *)(*(_QWORD *)v14 + 32);
      if (v15 < a3)
      {
        v18 = (double *)*((_QWORD *)v14 + 1);
        v16 = v14 + 1;
        v17 = v18;
        if (v18)
        {
          v19 = v17;
          do
          {
            v20 = v19;
            v19 = (double *)*((_QWORD *)v19 + 1);
          }
          while (v19);
        }
        else
        {
          v21 = v16;
          do
          {
            v20 = (double *)*((_QWORD *)v21 + 2);
            v22 = *(_QWORD *)v20 == (_QWORD)v21;
            v21 = v20;
          }
          while (v22);
        }
        if (v20[4] > a3)
        {
          if (v17)
          {
            do
            {
              v23 = (double **)(v17 + 1);
              if (v17[4] >= a3)
              {
                v23 = (double **)v17;
                v16 = v17;
              }
              v17 = *v23;
            }
            while (*v23);
          }
          v15 = v16[4];
          *a5 = v15;
          if (v15 != a3)
          {
            v24 = *v16;
            if (*(_QWORD *)v16)
            {
              do
              {
                v25 = *(double **)&v24;
                v24 = *(double *)(*(_QWORD *)&v24 + 8);
              }
              while (v24 != 0.0);
            }
            else
            {
              do
              {
                v25 = (double *)*((_QWORD *)v16 + 2);
                v22 = *(_QWORD *)v25 == (_QWORD)v16;
                v16 = v25;
              }
              while (v22);
            }
            v15 = v25[4];
          }
          goto LABEL_33;
        }
        if (v17)
        {
          do
          {
            v26 = v17;
            v17 = (double *)*((_QWORD *)v17 + 1);
          }
          while (v17);
        }
        else
        {
          do
          {
            v26 = (double *)*((_QWORD *)v16 + 2);
            v22 = *(_QWORD *)v26 == (_QWORD)v16;
            v16 = v26;
          }
          while (v22);
        }
        v15 = v26[4];
      }
      *a5 = v15;
LABEL_33:
      *a4 = v15;
      return 1;
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::QueryTimeSample(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v8 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v8)
    v8 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue((uint64_t)this, (unsigned int *)a2, v8);
  if (result)
  {
    v10 = (uint64_t *)result;
    result = sub_20BFEB19C((pxrInternal__aapl__pxrReserved__::VtValue *)result);
    if ((_DWORD)result)
    {
      v11 = v10[1];
      if ((v11 & 4) != 0)
        v12 = (*(uint64_t (**)(uint64_t *))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(v10);
      else
        v12 = *v10;
      v15 = *(_QWORD *)(v12 + 8);
      v13 = v12 + 8;
      v14 = v15;
      if (!v15)
        return 0;
      v16 = v13;
      do
      {
        v17 = (uint64_t *)(v14 + 8);
        if (*(double *)(v14 + 32) >= a3)
        {
          v17 = (uint64_t *)v14;
          v16 = v14;
        }
        v14 = *v17;
      }
      while (*v17);
      if (v16 == v13 || *(double *)(v16 + 32) > a3)
      {
        return 0;
      }
      else
      {
        if (a4)
          sub_20BF4A9BC(a4, (_QWORD *)(v16 + 40));
        return 1;
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfData::QueryTimeSample(uint64_t a1, unsigned int *a2, uint64_t (***a3)(_QWORD, uint64_t), double a4)
{
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v8;
  uint64_t result;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v8 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v8)
    v8 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfData::_GetFieldValue(a1, a2, v8);
  if (result)
  {
    v10 = (uint64_t *)result;
    result = sub_20BFEB19C((pxrInternal__aapl__pxrReserved__::VtValue *)result);
    if ((_DWORD)result)
    {
      v11 = v10[1];
      if ((v11 & 4) != 0)
        v12 = (*(uint64_t (**)(uint64_t *))((v11 & 0xFFFFFFFFFFFFFFF8) + 168))(v10);
      else
        v12 = *v10;
      v15 = *(_QWORD *)(v12 + 8);
      v13 = v12 + 8;
      v14 = v15;
      if (!v15)
        return 0;
      v16 = v13;
      do
      {
        v17 = (uint64_t *)(v14 + 8);
        if (*(double *)(v14 + 32) >= a4)
        {
          v17 = (uint64_t *)v14;
          v16 = v14;
        }
        v14 = *v17;
      }
      while (*v17);
      if (v16 == v13 || *(double *)(v16 + 32) > a4)
      {
        return 0;
      }
      else if (a3)
      {
        return (**a3)(a3, v16 + 40);
      }
      else
      {
        return 1;
      }
    }
  }
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfData::SetTimeSample(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v7;
  pxrInternal__aapl__pxrReserved__::VtValue *MutableFieldValue;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v12;
  uint64_t *v13;
  _QWORD *v14[2];
  double v15;
  uint64_t *v16[3];

  v16[2] = *(uint64_t **)MEMORY[0x24BDAC8D0];
  v15 = a3;
  if (*((_QWORD *)a4 + 1))
  {
    v14[0] = 0;
    v14[1] = 0;
    v13 = (uint64_t *)v14;
    v7 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
    if (!v7)
      v7 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
    MutableFieldValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfData::_GetMutableFieldValue((uint64_t)this, (unsigned int *)a2, v7);
    v9 = (uint64_t *)MutableFieldValue;
    if (MutableFieldValue && sub_20BFEB19C(MutableFieldValue))
    {
      v10 = (uint64_t *)sub_20C0E7B94(v9);
      sub_20BF07C64(v10, (uint64_t)&v13);
    }
    v16[0] = (uint64_t *)&v15;
    v11 = sub_20C0E7D0C(&v13, &v15, (uint64_t)&unk_20CAC184C, v16);
    sub_20BF4A9BC(v11 + 5, a4);
    if (v9)
    {
      sub_20C0E686C((pxrInternal__aapl__pxrReserved__::VtValue *)v9, (uint64_t)&v13);
    }
    else
    {
      v12 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
      if (!v12)
        v12 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
      sub_20C0E68EC((uint64_t)&v13, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
      (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfData *, const pxrInternal__aapl__pxrReserved__::SdfPath *, pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *, uint64_t **))(*(_QWORD *)this + 152))(this, a2, v12, v16);
      sub_20BF4C2D8((uint64_t)v16);
    }
    sub_20BFED2B4((uint64_t)&v13, v14[0]);
  }
  else
  {
    (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfData *, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)this + 304))(this, a2);
  }
}

void sub_20C0E6840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  sub_20BF4C2D8((uint64_t)&a14);
  sub_20BFED2B4((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0E686C(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD **v6;
  _QWORD *v7[2];

  if ((sub_20BFEB19C(a1) & 1) == 0)
  {
    v7[0] = 0;
    v7[1] = 0;
    v6 = v7;
    sub_20C0E7DF0(a1, (uint64_t)&v6);
    sub_20BFED2B4((uint64_t)&v6, v7[0]);
  }
  v4 = (uint64_t *)sub_20C0E7B94((uint64_t *)a1);
  return sub_20BF07C64(v4, a2);
}

void sub_20C0E68D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  sub_20BFED2B4((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0E68EC@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::VtValue *a2@<X8>)
{
  *((_QWORD *)a2 + 1) = 0;
  return sub_20C0E686C(a2, a1);
}

void sub_20C0E6918(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfData::EraseTimeSample(pxrInternal__aapl__pxrReserved__::SdfData *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3)
{
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v5;
  pxrInternal__aapl__pxrReserved__::VtValue *MutableFieldValue;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD **v11;
  _QWORD *v12;
  uint64_t v13;
  double v14;

  v14 = a3;
  v12 = 0;
  v13 = 0;
  v11 = &v12;
  v5 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  if (!v5)
    v5 = sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
  MutableFieldValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfData::_GetMutableFieldValue((uint64_t)this, (unsigned int *)a2, v5);
  v7 = (uint64_t *)MutableFieldValue;
  if (MutableFieldValue && sub_20BFEB19C(MutableFieldValue))
  {
    v8 = (uint64_t *)sub_20C0E7B94(v7);
    sub_20BF07C64(v8, (uint64_t)&v11);
    sub_20C0E8230((uint64_t)&v11, &v14);
    if (v13)
    {
      v9 = (uint64_t *)sub_20C0E7B94(v7);
      sub_20BF07C64(v9, (uint64_t)&v11);
    }
    else
    {
      if (!atomic_load(&pxrInternal__aapl__pxrReserved__::SdfDataTokens))
        sub_20C0E7B0C(&pxrInternal__aapl__pxrReserved__::SdfDataTokens);
      (*(void (**)(pxrInternal__aapl__pxrReserved__::SdfData *, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)this + 168))(this, a2);
    }
  }
  sub_20BFED2B4((uint64_t)&v11, v12);
}

void sub_20C0E6A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  sub_20BFED2B4((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0E6A40(uint64_t a1)
{
  void *v2;

  sub_20C0E6A78(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_20C0E6A78(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_20C0E6AB4((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

_DWORD *sub_20C0E6AB4(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 16);
  sub_20C0DE330(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 4));
  return sub_20BFD265C((_DWORD *)a1);
}

uint64_t sub_20C0E6AFC(uint64_t a1, _DWORD *a2, uint64_t **a3)
{
  _DWORD *v6;
  int v7;

  v6 = sub_20BFD6E54((_DWORD *)a1, a2);
  sub_20BFD6EA4(v6 + 1, a2 + 1);
  v7 = *(_DWORD *)a3;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v7;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_20C0E6B80((uint64_t *)(a1 + 16), a3[1], a3[2], 0xAAAAAAAAAAAAAAABLL * (a3[2] - a3[1]));
  return a1;
}

void sub_20C0E6B6C(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0E6B80(uint64_t *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t *v6;

  if (a4)
  {
    v6 = result;
    sub_20BDE4FA4(result, a4);
    result = sub_20C0E6C04((uint64_t)(v6 + 2), a2, a3, (uint64_t *)v6[1]);
    v6[1] = (uint64_t)result;
  }
  return result;
}

void sub_20C0E6BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_20C0DE330(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0E6C04(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t *v6;
  _QWORD v8[3];
  char v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_20C0E6CA4(v4, v6);
      v6 += 3;
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_20C0E6D28((uint64_t)v8);
  return v4;
}

void sub_20C0E6C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C0E6D28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0E6CA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  v3 = *a2;
  *a1 = *a2;
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      *a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BF4C6D0(a1 + 1, a2 + 1);
  return a1;
}

uint64_t sub_20C0E6D28(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_20C0E6D5C(a1);
  return a1;
}

uint64_t sub_20C0E6D5C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;

  v1 = **(_QWORD **)(result + 16);
  v2 = **(_QWORD **)(result + 8);
  while (v1 != v2)
  {
    result = sub_20BF4C2D8(v1 - 16);
    v4 = *(_QWORD *)(v1 - 24);
    v1 -= 24;
    v3 = v4;
    if ((v4 & 7) != 0)
    {
      v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
  }
  return result;
}

uint64_t sub_20C0E6DB4(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;

  v4 = sub_20BFD38A4((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD38DC(v4 + 1, (_DWORD *)(a2 + 4));
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  return a1;
}

uint64_t sub_20C0E6E10(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__ *v1;
  _BOOL8 HasConcurrency;
  uint64_t DetachedDispatcher;
  unint64_t v4;
  pxrInternal__aapl__pxrReserved__ *v5;
  _OWORD v7[2];
  int v8;

  memset(v7, 0, sizeof(v7));
  v8 = 1065353216;
  sub_20BFDC9B4((uint64_t)v7, a1);
  HasConcurrency = pxrInternal__aapl__pxrReserved__::WorkHasConcurrency(v1);
  if (HasConcurrency)
  {
    DetachedDispatcher = pxrInternal__aapl__pxrReserved__::Work_GetDetachedDispatcher((pxrInternal__aapl__pxrReserved__ *)HasConcurrency);
    v4 = sub_20C0E6F40(DetachedDispatcher, (uint64_t)v7);
    v5 = (pxrInternal__aapl__pxrReserved__ *)(***(uint64_t (****)(_QWORD, unint64_t, uint64_t))(v4 - 40))(*(_QWORD *)(v4 - 40), v4, v4 - 8);
    pxrInternal__aapl__pxrReserved__::Work_EnsureDetachedTaskProgress(v5);
  }
  else
  {
    sub_20C0E6EA4();
  }
  return sub_20C0E6A40((uint64_t)v7);
}

void sub_20C0E6E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C0E6A40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20C0E6EA4()
{
  unint64_t *Instance;
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  char v4;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v1 = sub_20BEC5244(&v3, 0);
  v4 = 0;
  v2 = (_QWORD *)sub_20BEB5B80(Instance + 19, &v4);
  if (v2 != v1)
    pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(Instance, v1, v2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v3);
}

void sub_20C0E6F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_20C0E6F40(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[2];

  v4 = *(_QWORD *)(a1 + 256);
  v7[0] = 0;
  v7[1] = v4;
  v5 = tbb::internal::allocate_additional_child_of_proxy::allocate((tbb::internal::allocate_additional_child_of_proxy *)v7, 0x38uLL);
  *(_BYTE *)(v5 - 11) = 1;
  *(_QWORD *)v5 = &unk_24C528400;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 8) = 0u;
  *(_DWORD *)(v5 + 40) = 1065353216;
  sub_20BFDC9B4(v5 + 8, a2);
  *(_QWORD *)(v5 + 48) = a1 + 264;
  return v5;
}

_QWORD *sub_20C0E6FC8(_QWORD *a1)
{
  *a1 = &unk_24C528400;
  sub_20C0E6A40((uint64_t)(a1 + 1));
  return a1;
}

void sub_20C0E6FFC(_QWORD *a1)
{
  *a1 = &unk_24C528400;
  sub_20C0E6A40((uint64_t)(a1 + 1));
  operator delete(a1);
}

uint64_t sub_20C0E7030(uint64_t a1)
{
  unint64_t *Instance;
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;

  pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  sub_20C0E6EA4();
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
  v3 = v6;
  v4 = atomic_load(Instance + 18);
  if (v3 < v4
    && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
  {
    pxrInternal__aapl__pxrReserved__::WorkDispatcher::_TransportErrors(&v6, *(_QWORD *)(a1 + 48));
  }
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v6);
  return 0;
}

void sub_20C0E70BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0E70D0(_QWORD *a1, unsigned int *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  unint64_t v8;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = v3;
    if (v3 >= *(_QWORD *)&v2)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = v3 & (*(_QWORD *)&v2 - 1);
  }
  v6 = *(_QWORD **)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  result = (_QWORD *)*v6;
  if (*v6)
  {
    do
    {
      v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == *(_QWORD *)a2)
          return result;
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(_QWORD *)&v2)
            v8 %= *(_QWORD *)&v2;
        }
        else
        {
          v8 &= *(_QWORD *)&v2 - 1;
        }
        if (v8 != v5)
          return 0;
      }
      result = (_QWORD *)*result;
    }
    while (result);
  }
  return result;
}

void sub_20C0E71AC(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C0E6AB4((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *sub_20C0E71F0(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v20[3];

  v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = v5;
      if (v5 >= v6)
        v3 = v5 % v6;
    }
    else
    {
      v3 = v5 & (v6 - 1);
    }
    v8 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      v9 = (_QWORD *)*v8;
      if (*v8)
      {
        do
        {
          v10 = v9[1];
          if (v10 == v5)
          {
            if (v9[2] == *(_QWORD *)a2)
              return v9;
          }
          else
          {
            if (v7.u32[0] > 1uLL)
            {
              if (v10 >= v6)
                v10 %= v6;
            }
            else
            {
              v10 &= v6 - 1;
            }
            if (v10 != v3)
              break;
          }
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
    }
  }
  sub_20C0E745C(a1, v5, a3, (uint64_t)v20);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    sub_20BDEC6E0(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v5 >= v6)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v20[0] = *v17;
    *v17 = v20[0];
  }
  else
  {
    *(_QWORD *)v20[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v20[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v20[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v20[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v20[0];
    }
  }
  v9 = (_QWORD *)v20[0];
  v20[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C0E71AC((uint64_t)v20, 0);
  return v9;
}

void sub_20C0E7444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0E71AC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0E745C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_20C0E74D0((uint64_t)(v8 + 2), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_20C0E74B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C0E71AC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0E74D0(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;

  v4 = sub_20BFD6E54((_DWORD *)a1, (_DWORD *)a2);
  sub_20BFD6EA4(v4 + 1, (_DWORD *)(a2 + 4));
  v5 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  sub_20C0E6B80((uint64_t *)(a1 + 16), *(uint64_t **)(a2 + 16), *(uint64_t **)(a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3));
  return a1;
}

void sub_20C0E7534(_Unwind_Exception *a1)
{
  _DWORD *v1;

  sub_20BFD1A18(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0E7548(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD v21[3];

  v6 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v4 = v6;
      if (v6 >= v7)
        v4 = v6 % v7;
    }
    else
    {
      v4 = v6 & (v7 - 1);
    }
    v9 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
    if (v9)
    {
      v10 = (_QWORD *)*v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (v10[2] == *(_QWORD *)a2)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v4)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  sub_20C0E77B4(a1, v6, a4, (uint64_t)v21);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_20BDEC6E0(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v4 = v6 % v7;
      else
        v4 = v6;
    }
    else
    {
      v4 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v18)
  {
    *(_QWORD *)v21[0] = *v18;
    *v18 = v21[0];
  }
  else
  {
    *(_QWORD *)v21[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v21[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v21[0])
    {
      v19 = *(_QWORD *)(*(_QWORD *)v21[0] + 8);
      if ((v7 & (v7 - 1)) != 0)
      {
        if (v19 >= v7)
          v19 %= v7;
      }
      else
      {
        v19 &= v7 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v19) = v21[0];
    }
  }
  v10 = (_QWORD *)v21[0];
  v21[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_20C0E71AC((uint64_t)v21, 0);
  return v10;
}

void sub_20C0E779C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0E71AC((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0E77B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  _DWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x38uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *v8 = 0;
  v8[1] = a2;
  v9 = *a3;
  sub_20BFD6E54((_DWORD *)v8 + 4, v9);
  result = sub_20BFD6EA4((_DWORD *)v8 + 5, v9 + 1);
  *((_DWORD *)v8 + 6) = 0;
  v8[5] = 0;
  v8[6] = 0;
  v8[4] = 0;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

uint64_t sub_20C0E782C(uint64_t *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v18[5];

  v4 = *a1;
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20BDDF694();
  v8 = (uint64_t)(a1 + 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3);
  if (2 * v9 > v6)
    v6 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v6;
  v18[4] = a1 + 2;
  if (v10)
    v11 = sub_20BDE4FF4(v8, v10);
  else
    v11 = 0;
  v12 = &v11[3 * v5];
  v18[0] = v11;
  v18[1] = v12;
  v18[3] = &v11[3 * v10];
  v13 = **a3;
  *v12 = v13;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *v12 &= 0xFFFFFFFFFFFFFFF8;
  }
  v11[3 * v5 + 2] = 0;
  v18[2] = v12 + 3;
  sub_20C0DE978(a1, v18);
  v16 = a1[1];
  sub_20C0DEB28((uint64_t)v18);
  return v16;
}

void sub_20C0E7950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C0DEB28((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20C0E7964(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  char *v20;
  uint64_t v21;
  __int128 v22;
  char *v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_20BDDF694();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    v24 = v4;
    if (v13)
    {
      v14 = (char *)sub_20BDDF6A8(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    v23 = v16;
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    *((_QWORD *)&v22 + 1) = v17;
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
        *(_QWORD *)v7 = 0;
      }
      while (v7 != v8);
      v17 = (char *)*((_QWORD *)&v22 + 1);
      v16 = v23;
    }
    v19 = *(_OWORD *)a1;
    *a1 = v15;
    a1[1] = v17;
    v22 = v19;
    v20 = a1[2];
    a1[2] = v16;
    v23 = v20;
    v21 = v19;
    sub_20BF1EE98((uint64_t)&v21);
  }
}

uint64_t *sub_20C0E7A88(uint64_t **a1, double *a2, double *a3, uint64_t *a4)
{
  double *v6;
  uint64_t *v7;
  uint64_t **v8;
  double v10;
  double *v11;

  v6 = sub_20BFED064(a1, a2, &v11, &v10, a3);
  v7 = *(uint64_t **)v6;
  if (!*(_QWORD *)v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    sub_20BDDE1B4(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *sub_20C0E7B0C(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C0E7B54();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType::~SdfDataTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *sub_20C0E7B54()
{
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::SdfDataTokens_StaticTokenType::SdfDataTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C0E7B80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0E7B94(uint64_t *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, uint64_t *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return sub_20C0E7C24(a1);
}

uint64_t sub_20C0E7C24(uint64_t *a1)
{
  unsigned int v2;
  char *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v7;

  v2 = atomic_load((unsigned int *)(*a1 + 24));
  if (v2 != 1)
  {
    v3 = (char *)operator new(0x20uLL);
    sub_20BFECEF8((uint64_t *)v3, *a1);
    v4 = (unsigned int *)(v3 + 24);
    atomic_store(0, (unsigned int *)v3 + 6);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
    v7 = (unsigned int *)*a1;
    *a1 = (uint64_t)v3;
    sub_20C0E7CB4(&v7);
  }
  return *a1;
}

void sub_20C0E7CA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned int **sub_20C0E7CB4(unsigned int **a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (*a1)
  {
    v3 = v2 + 6;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      __dmb(9u);
      sub_20BFED2B4((uint64_t)v2, *((_QWORD **)v2 + 1));
      operator delete(v2);
    }
  }
  return a1;
}

uint64_t *sub_20C0E7D0C(uint64_t **a1, double *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  double v10;
  double v11;
  uint64_t *v12;
  _QWORD v14[2];
  char v15;

  v7 = a1 + 1;
  v6 = a1[1];
  v8 = a1 + 1;
  v9 = a1 + 1;
  if (v6)
  {
    v10 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v11 = *((double *)v6 + 4);
        if (v10 >= v11)
          break;
        v6 = (uint64_t *)*v6;
        v8 = v9;
        if (!*v9)
          goto LABEL_9;
      }
      if (v11 >= v10)
        break;
      v6 = (uint64_t *)v6[1];
      if (!v6)
      {
        v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v12 = (uint64_t *)operator new(0x38uLL);
    v14[1] = v7;
    v12[4] = **a4;
    v12[6] = 0;
    v15 = 1;
    sub_20BDDE1B4(a1, (uint64_t)v9, v8, v12);
    v14[0] = 0;
    sub_20BFED270((uint64_t)v14, 0);
    return v12;
  }
  return (uint64_t *)v9;
}

_QWORD *sub_20C0E7DF0(_QWORD *a1, uint64_t a2)
{
  _BYTE v5[8];
  uint64_t v6;
  uint64_t v7;

  v7 = *MEMORY[0x24BDAC8D0];
  sub_20BF4C144((uint64_t)v5, (uint64_t)a1);
  a1[1] = &off_24C528438;
  sub_20C0E81C4(a1, a2);
  if (v6)
    (*(void (**)(_BYTE *))(v6 + 32))(v5);
  return a1;
}

void sub_20C0E7E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C0E7EBC(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  v2 = *result;
  *a2 = *result;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 24);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

unsigned int **sub_20C0E7EE4(unsigned int **a1, unsigned int **a2)
{
  *a2 = *a1;
  *a1 = 0;
  return sub_20C0E7CB4(a1);
}

uint64_t sub_20C0E7EF4()
{
  return 1;
}

unint64_t sub_20C0E7EFC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;

  v1 = *a1;
  v3 = 0;
  v4 = 0;
  sub_20C0E8030((uint64_t)&v3, *(_QWORD **)v1, (_QWORD *)(v1 + 8));
  return bswap64(0x9E3779B97F4A7C55 * v3);
}

uint64_t sub_20C0E7F48(_QWORD **a1, _QWORD **a2, char *a3)
{
  return sub_20C0E80EC(*a1, *a2, a3);
}

uint64_t sub_20C0E7F54(_QWORD **a1, _QWORD *a2, char *a3)
{
  return sub_20C0E80EC(*a1, a2, a3);
}

uint64_t sub_20C0E7F60()
{
  return 0;
}

uint64_t sub_20C0E7F6C(uint64_t **a1, uint64_t a2, char *a3)
{
  return pxrInternal__aapl__pxrReserved__::operator<<(a2, *a1, a3);
}

void *sub_20C0E7F7C()
{
  return &unk_24C524D90;
}

uint64_t sub_20C0E7F88()
{
  return 0;
}

uint64_t sub_20C0E7F90()
{
  return MEMORY[0x24BEDB7C8];
}

uint64_t sub_20C0E7F9C()
{
  return 0;
}

uint64_t sub_20C0E7FA4()
{
  return 0;
}

BOOL sub_20C0E7FAC(uint64_t a1, uint64_t a2)
{
  return strcmp((const char *)(0x800000020CAC1980 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL)) == 0;
}

uint64_t sub_20C0E7FE4(uint64_t a1, const std::type_info *a2, char *a3)
{
  return *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524D90, a2, a3);
}

void *sub_20C0E8004()
{
  return &unk_24C524D90;
}

uint64_t sub_20C0E8010(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t *sub_20C0E8018@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *a1;
  a2[1] = &off_24C528438;
  return sub_20C0E81C4(a2, v2);
}

uint64_t sub_20C0E8030(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a2 != a3)
  {
    v4 = result;
    do
    {
      v5 = (_QWORD *)a2[1];
      v6 = a2;
      if (v5)
      {
        do
        {
          v7 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v6[2];
          v8 = *v7 == (_QWORD)v6;
          v6 = v7;
        }
        while (!v8);
      }
      result = sub_20C0E80A8(v4, (double *)a2 + 4);
      a2 = v7;
    }
    while (v7 != a3);
  }
  return result;
}

uint64_t sub_20C0E80A8(uint64_t a1, double *a2)
{
  double v2;
  double v3;

  v2 = *a2;
  if (*a2 == 0.0)
    v2 = 0.0;
  v3 = v2;
  if (*(_BYTE *)(a1 + 8))
    *(_QWORD *)&v3 = *(_QWORD *)&v2
                   + ((*(_QWORD *)a1
                     + *(_QWORD *)&v2
                     + (*(_QWORD *)a1 + *(_QWORD *)&v2) * (*(_QWORD *)a1 + *(_QWORD *)&v2)) >> 1);
  else
    *(_BYTE *)(a1 + 8) = 1;
  *(double *)a1 = v3;
  return sub_20BF4CF7C(a1, (pxrInternal__aapl__pxrReserved__::VtValue *)(a2 + 1));
}

uint64_t sub_20C0E80EC(_QWORD *a1, _QWORD *a2, char *a3)
{
  double *v3;
  double *v4;
  _QWORD *v5;
  uint64_t result;
  double *v7;
  double *v8;
  BOOL v9;
  _QWORD *v10;
  _QWORD *v11;

  if (a1[2] == a2[2])
  {
    v3 = (double *)(a1 + 1);
    v4 = (double *)*a1;
    if ((_QWORD *)*a1 == a1 + 1)
      return 1;
    v5 = (_QWORD *)*a2;
    while (v4[4] == *((double *)v5 + 4))
    {
      result = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)(v4 + 5), (std::type_info *)(v5 + 5), a3);
      if (!(_DWORD)result)
        return result;
      v7 = (double *)*((_QWORD *)v4 + 1);
      v8 = v4;
      if (v7)
      {
        do
        {
          v4 = v7;
          v7 = *(double **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v4 = (double *)*((_QWORD *)v8 + 2);
          v9 = *(_QWORD *)v4 == (_QWORD)v8;
          v8 = v4;
        }
        while (!v9);
      }
      v10 = (_QWORD *)v5[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v5[2];
          v9 = *v11 == (_QWORD)v5;
          v5 = v11;
        }
        while (!v9);
      }
      v5 = v11;
      if (v4 == v3)
        return 1;
    }
  }
  return 0;
}

uint64_t *sub_20C0E81C4(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t *result;
  unsigned int *v6;
  unsigned int v7;

  v4 = (char *)operator new(0x20uLL);
  result = sub_20BFECEF8((uint64_t *)v4, a2);
  v6 = (unsigned int *)(v4 + 24);
  atomic_store(0, (unsigned int *)v4 + 6);
  *a1 = v4;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  return result;
}

void sub_20C0E821C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0E8230(uint64_t a1, double *a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t *v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = (uint64_t *)(v2 + 8);
    if (*(double *)(v2 + 32) >= v3)
    {
      v5 = (uint64_t *)v2;
      v4 = v2;
    }
    v2 = *v5;
  }
  while (*v5);
  if (v4 == a1 + 8 || v3 < *(double *)(v4 + 32))
    return 0;
  sub_20BE10B80((uint64_t **)a1, (uint64_t *)v4);
  sub_20BF4C2D8(v4 + 40);
  operator delete((void *)v4);
  return 1;
}

BOOL pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(pxrInternal__aapl__pxrReserved__::Sdf_Identity **this, const pxrInternal__aapl__pxrReserved__::SdfSpec *a2, const std::type_info *a3)
{
  char SpecType;

  SpecType = pxrInternal__aapl__pxrReserved__::SdfSpec::GetSpecType(this);
  return pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(SpecType, a2);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfCreateHandle<pxrInternal__aapl__pxrReserved__::SdfLayer>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_20C0E82E8(a2, a1);
}

_QWORD *sub_20C0E82E8(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v12;

  *a1 = a2;
  a1[1] = 0;
  if (a2)
  {
    sub_20BEB5AD8((unint64_t *)(a2 + 16), &v12);
    v3 = (unsigned int *)a1[1];
    a1[1] = v12;
    v12 = 0;
    if (v3)
    {
      v4 = v3 + 2;
      do
      {
        v5 = __ldxr(v4);
        v6 = v5 - 1;
      }
      while (__stlxr(v6, v4));
      if (!v6)
        (*(void (**)(unsigned int *))(*(_QWORD *)v3 + 8))(v3);
      v7 = v12;
      if (v12)
      {
        v8 = (unsigned int *)(v12 + 8);
        do
        {
          v9 = __ldxr(v8);
          v10 = v9 - 1;
        }
        while (__stlxr(v10, v8));
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      }
    }
  }
  return a1;
}

void sub_20C0E8388(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B0D8(v3);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType::~SdfFileFormatTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType *this)
{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

{
  unsigned int *v2;
  unsigned int v3;
  void **v4;

  v4 = (void **)((char *)this + 8);
  sub_20BEEB2B8(&v4);
  if ((*(_QWORD *)this & 7) != 0)
  {
    v2 = (unsigned int *)(*(_QWORD *)this & 0xFFFFFFFFFFFFFFF8);
    do
      v3 = __ldxr(v2);
    while (__stlxr(v3 - 2, v2));
  }
}

pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType *pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType::SdfFileFormatTokens_StaticTokenType(pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType *this)
{
  uint64_t *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;

  v2 = (uint64_t *)pxrInternal__aapl__pxrReserved__::TfToken::TfToken(this, "target", 0);
  v3 = *v2;
  if ((*v2 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 2, v4));
    if ((v5 & 1) == 0)
      v3 &= 0xFFFFFFFFFFFFFFF8;
  }
  v2[1] = 0;
  v2[2] = 0;
  v2[3] = 0;
  v6 = operator new(8uLL);
  *((_QWORD *)this + 1) = v6;
  *((_QWORD *)this + 2) = v6;
  *v6 = v3;
  v7 = v6 + 1;
  *((_QWORD *)this + 3) = v6 + 1;
  if ((v3 & 7) != 0)
  {
    v8 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 2, v8));
    if ((v9 & 1) == 0)
      *v6 &= 0xFFFFFFFFFFFFFFF8;
    *((_QWORD *)this + 2) = v7;
    do
      v10 = __ldxr(v8);
    while (__stlxr(v10 - 2, v8));
  }
  else
  {
    *((_QWORD *)this + 2) = v7;
  }
  return this;
}

void sub_20C0E8530(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v13;
  unsigned int v14;

  v11 = v10;
  sub_20BEEB2B8(&a9);
  if ((v11 & 7) != 0)
  {
    v13 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
    do
      v14 = __ldxr(v13);
    while (__stlxr(v14 - 2, v13));
  }
  sub_20C96B3E4(v9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  char *v12;
  char *v13;
  char *v14;
  char **v15;
  char v16;
  void *__p[2];
  uint64_t v18;
  __int128 v19;

  *(_QWORD *)&v19 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a5 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    v18 = *(_QWORD *)(a5 + 16);
  }
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = &v12;
  v16 = 0;
  v12 = (char *)operator new(0x18uLL);
  v13 = v12;
  v14 = v12 + 24;
  v13 = sub_20BFB76A8((uint64_t)&v14, (__int128 *)__p, &v19, v12);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(a1, a2, a3, a4, (__int128 **)&v12, a6);
  v15 = &v12;
  sub_20BDE5038((void ***)&v15);
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20C0E8698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, __int128 **a5, uint64_t a6)
{
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *v19;
  unsigned int *v20;
  uint64_t v21;
  unsigned int v22;
  unint64_t v24;

  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_24C528500;
  *(_QWORD *)(a1 + 24) = a6;
  v10 = *a2;
  *(_QWORD *)(a1 + 32) = *a2;
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 2, v11));
    if ((v12 & 1) == 0)
      *(_QWORD *)(a1 + 32) &= 0xFFFFFFFFFFFFFFF8;
  }
  v13 = *a4;
  *(_QWORD *)(a1 + 40) = *a4;
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 2, v14));
    if ((v15 & 1) == 0)
      *(_QWORD *)(a1 + 40) &= 0xFFFFFFFFFFFFFFF8;
  }
  if ((*a2 & 0xFFFFFFFFFFFFFFF8) == 0)
    pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)a1);
  std::operator+<char>();
  v16 = *a3;
  *(_QWORD *)(a1 + 72) = *a3;
  if ((v16 & 7) != 0)
  {
    v17 = (unsigned int *)(v16 & 0xFFFFFFFFFFFFFFF8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 2, v17));
    if ((v18 & 1) == 0)
      *(_QWORD *)(a1 + 72) &= 0xFFFFFFFFFFFFFFF8;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  sub_20BE78B98((char *)(a1 + 80), *a5, a5[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a5[1] - (char *)*a5) >> 3));
  v19 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load(&qword_254985AE0);
  if (!v19)
    v19 = sub_20C0EA1B0(&qword_254985AE0);
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::GetPrimaryFormatForExtension((uint64_t)v19, (unsigned __int8 *)*a5, (unsigned int **)&v24);
  v20 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
  v21 = *a2;
  if ((v24 & 7) != 0)
  {
    do
      v22 = __ldxr(v20);
    while (__stlxr(v22 - 2, v20));
  }
  *(_BYTE *)(a1 + 104) = v20 == (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void sub_20C0E8898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  unsigned int **v3;
  void **v4;
  const void *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  va_list va;

  va_start(va, a2);
  sub_20BDE5038((void ***)va);
  v7 = *(_QWORD *)(v2 + 72);
  if ((v7 & 7) != 0)
  {
    v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
    do
      v9 = __ldxr(v8);
    while (__stlxr(v9 - 2, v8));
  }
  if (*(char *)(v2 + 71) < 0)
    operator delete(*v4);
  v10 = *(_QWORD *)(v2 + 40);
  if ((v10 & 7) != 0)
  {
    v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  v13 = *(_QWORD *)(v2 + 32);
  if ((v13 & 7) != 0)
  {
    v14 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  sub_20BEBCE60(v3, v6);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)v2);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  unint64_t Instance;
  char *v11;
  char *v12;
  char *v13;
  char **v14;
  char v15;
  void *__p[2];
  uint64_t v17;
  __int128 v18;

  *(_QWORD *)&v18 = *MEMORY[0x24BDAC8D0];
  if (*(char *)(a5 + 23) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a5;
    v17 = *(_QWORD *)(a5 + 16);
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = &v11;
  v15 = 0;
  v11 = (char *)operator new(0x18uLL);
  v12 = v11;
  v13 = v11 + 24;
  v12 = sub_20BFB76A8((uint64_t)&v13, (__int128 *)__p, &v18, v11);
  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(a1, a2, a3, a4, (__int128 **)&v11, Instance);
  v14 = &v11;
  sub_20BDE5038((void ***)&v14);
  if (SHIBYTE(v17) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20C0E8A74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, __int128 **a5)
{
  unint64_t Instance;

  Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  if (!Instance)
    Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::SdfSchema>::_instance);
  return pxrInternal__aapl__pxrReserved__::SdfFileFormat::SdfFileFormat(a1, a2, a3, a4, a5, Instance);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::~SdfFileFormat(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  const void *v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int v11;
  void **v12;

  *(_QWORD *)this = off_24C528500;
  v12 = (void **)((char *)this + 80);
  sub_20BDE5038(&v12);
  v3 = *((_QWORD *)this + 9);
  if ((v3 & 7) != 0)
  {
    v4 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v5 = __ldxr(v4);
    while (__stlxr(v5 - 2, v4));
  }
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  v6 = *((_QWORD *)this + 5);
  if ((v6 & 7) != 0)
  {
    v7 = (unsigned int *)(v6 & 0xFFFFFFFFFFFFFFF8);
    do
      v8 = __ldxr(v7);
    while (__stlxr(v8 - 2, v7));
  }
  v9 = *((_QWORD *)this + 4);
  if ((v9 & 7) != 0)
  {
    v10 = (unsigned int *)(v9 & 0xFFFFFFFFFFFFFFF8);
    do
      v11 = __ldxr(v10);
    while (__stlxr(v11 - 2, v10));
  }
  sub_20BEBCE60((unsigned int **)this + 2, v2);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetDefaultFileFormatArguments(_QWORD *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::SdfFileFormat::_InitDetachedData@<X0>(_QWORD *a1@<X8>)
{
  char *v2;
  _DWORD *v3;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v5;

  v2 = (char *)operator new(0x40uLL);
  *((_DWORD *)v2 + 2) = 1;
  *((_QWORD *)v2 + 2) = 0;
  *(_QWORD *)v2 = off_24C528298;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  *((_DWORD *)v2 + 14) = 1065353216;
  v3 = (_DWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v2);
  pxrInternal__aapl__pxrReserved__::SdfData::CreateSpec((uint64_t)v2, v3, 7);
  *a1 = v2;
  v5 = 0;
  return sub_20C0218E4(&v5);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::SdfFileFormat::InitDetachedData@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v3;
  uint64_t v4;
  _QWORD v6[4];
  char v7;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v8;

  (*(void (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **__return_ptr))(*(_QWORD *)a1 + 128))(&v8);
  v3 = v8;
  if (v8)
  {
    v4 = sub_20C0A683C((uint64_t *)&v8);
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4))
    {
      v6[0] = "sdf/fileFormat.cpp";
      v6[1] = "InitDetachedData";
      v6[2] = 148;
      v6[3] = "SdfAbstractDataRefPtr pxrInternal__aapl__pxrReserved__::SdfFileFormat::InitDetachedData(const FileFormatAr"
              "guments &) const";
      v7 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v6, 1, (pxrInternal__aapl__pxrReserved__ *)"File format did not return detached data object.");
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::_InitDetachedData(a2);
      return sub_20C0EA270(&v8);
    }
    v3 = v8;
  }
  *a2 = v3;
  v8 = 0;
  return sub_20C0EA270(&v8);
}

void sub_20C0E8D40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v1 - 24));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::NewLayer@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  *a2 = result;
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::ShouldSkipAnonymousReload(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfFileFormat *))(*(_QWORD *)this + 112))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::ShouldReadAnonymousLayers(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::SdfFileFormat *))(*(_QWORD *)this + 120))(this);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetSchema(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return *((_QWORD *)this + 3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (uint64_t)this + 32;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetTarget(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (uint64_t)this + 40;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileCookie(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (uint64_t)this + 48;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetVersionString(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (uint64_t)this + 72;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::IsPrimaryFormatForExtensions(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return *((unsigned __int8 *)this + 104);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileExtensions(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return (uint64_t)this + 80;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPrimaryFileExtension(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  unsigned __int8 v2;
  uint64_t *result;
  _QWORD v4[4];
  char v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254985B00);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254985B00))
  {
    qword_254985AE8 = 0;
    unk_254985AF0 = 0;
    qword_254985AF8 = 0;
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254985AE8, &dword_20BDBC000);
    __cxa_guard_release(&qword_254985B00);
  }
  result = (uint64_t *)*((_QWORD *)this + 10);
  if (result == *((uint64_t **)this + 11))
  {
    v4[0] = "sdf/fileFormat.cpp";
    v4[1] = "GetPrimaryFileExtension";
    v4[2] = 223;
    v4[3] = "const std::string &pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPrimaryFileExtension() const";
    v5 = 0;
    if (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v4, "!_extensions.empty()", 0))
      return (uint64_t *)*((_QWORD *)this + 10);
    else
      return &qword_254985AE8;
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::IsSupportedExtension(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  void *__p[2];
  unsigned __int8 v7;

  pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileExtension(a2, (uint64_t)__p);
  v3 = v7;
  if ((v7 & 0x80u) != 0)
    v3 = (unint64_t)__p[1];
  if (!v3)
  {
    v4 = 0;
    if ((v7 & 0x80) == 0)
      return v4 != 0;
    goto LABEL_5;
  }
  v4 = sub_20C0EA29C(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), (unsigned __int8 **)__p);
  if ((v7 & 0x80) != 0)
LABEL_5:
    operator delete(__p[0]);
  return v4 != 0;
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFileExtension(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unint64_t v6;
  void **p_p;
  unint64_t v8;
  void *__p;
  unint64_t v10;
  unsigned __int8 v11;

  if (*(char *)(a1 + 23) < 0)
  {
    if (!*(_QWORD *)(a1 + 8))
    {
      sub_20BDDBFAC((_BYTE *)a2, *(void **)a1, 0);
      return;
    }
  }
  else if (!*(_BYTE *)(a1 + 23))
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
    return;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_GetExtension((const std::string *)a1);
  v4 = v11;
  v5 = v11;
  if ((v11 & 0x80u) == 0)
    v6 = v11;
  else
    v6 = v10;
  if (v6)
    p_p = &__p;
  else
    p_p = (void **)a1;
  if (!v6)
    v4 = *(_BYTE *)(a1 + 23);
  if ((v4 & 0x80) == 0)
  {
    *(_OWORD *)a2 = *(_OWORD *)p_p;
    *(_QWORD *)(a2 + 16) = p_p[2];
    if ((v5 & 0x80) == 0)
      return;
    goto LABEL_15;
  }
  if (v6)
    v8 = v10;
  else
    v8 = *(_QWORD *)(a1 + 8);
  sub_20BDDBFAC((_BYTE *)a2, *p_p, v8);
  if ((v11 & 0x80) != 0)
LABEL_15:
    operator delete(__p);
}

void sub_20C0E901C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::IsPackage(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPackageRootLayerPath(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::WriteToFile()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::ReadDetached(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, unsigned __int8 *a3)
{
  uint64_t result;
  uint64_t v6;
  char v7;
  const char *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned __int8 *Identifier;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  int v23;
  const char *p_p;
  int v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  void *__p;
  char v32;
  void *v33;
  char v34;
  char *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  char v39;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
  if (!(_DWORD)result)
    return result;
  pxrInternal__aapl__pxrReserved__::SdfLayer::_GetData(a2, (uint64_t *)&v35);
  v6 = sub_20C0A6678((uint64_t *)&v35);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
  v8 = v36;
  if (v36)
  {
    v9 = (unsigned int *)(v36 + 8);
    do
    {
      v10 = __ldxr(v9);
      v11 = v10 - 1;
    }
    while (__stlxr(v11, v9));
    if (!v11)
      (*(void (**)(const char *))(*(_QWORD *)v8 + 8))(v8);
  }
  if ((v7 & 1) != 0)
    return 1;
  v35 = "sdf/fileFormat.cpp";
  v36 = "ReadDetached";
  v37 = 272;
  v38 = "BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::ReadDetached(SdfLayer *, const std::string &, BOOL) const";
  v39 = 0;
  Identifier = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(a2);
  v13 = Identifier[23];
  v14 = *((_QWORD *)Identifier + 1);
  if ((v13 & 0x80u) == 0)
    v15 = Identifier[23];
  else
    v15 = *((_QWORD *)Identifier + 1);
  v16 = a3[23];
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = *((_QWORD *)a3 + 1);
  if (v15 != v16)
  {
LABEL_23:
    if (!v16)
      goto LABEL_24;
LABEL_33:
    v26 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(a2);
    if (*(char *)(v26 + 23) >= 0)
      v29 = v26;
    else
      v29 = *(_QWORD *)v26;
    if ((a3[23] & 0x80u) == 0)
      v30 = a3;
    else
      v30 = *(unsigned __int8 **)a3;
    pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"@%s@ (%s)", v27, v28, v29, v30);
    v25 = 0;
    if (v32 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v23 = 1;
    goto LABEL_43;
  }
  if (v17 >= 0)
    v18 = a3;
  else
    v18 = *(unsigned __int8 **)a3;
  if ((v13 & 0x80) != 0)
  {
    if (memcmp(*(const void **)Identifier, v18, v14) && v14)
      goto LABEL_33;
  }
  else if (Identifier[23])
  {
    while (*Identifier == *v18)
    {
      ++Identifier;
      ++v18;
      if (!--v13)
        goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_24:
  v19 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(a2);
  if (*(char *)(v19 + 23) >= 0)
    v22 = v19;
  else
    v22 = *(_QWORD *)v19;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"@%s@", v20, v21, v22);
  v23 = 0;
  if (v34 >= 0)
    p_p = (const char *)&v33;
  else
    p_p = (const char *)v33;
  v25 = 1;
LABEL_43:
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v35, 1, (pxrInternal__aapl__pxrReserved__ *)"File format did not return detached layer when reading layer %s.", p_p);
  if (v23 && v32 < 0)
    operator delete(__p);
  if (v25)
  {
    if (v34 < 0)
      operator delete(v33);
  }
  return 0;
}

void sub_20C0E9288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ReadDetached(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char *v8;
  std::mutex *v9;
  uint64_t *v10;
  char v11;
  char v12;
  unint64_t v13;
  const char *v14;
  unsigned __int8 *Identifier;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int8 *v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  int v27;
  void *p_p;
  int v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void *__p;
  char v38;
  void *v39;
  char v40;
  _QWORD v41[4];
  char v42;
  char v43;

  v43 = 0;
  v7 = pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ReadAndCopyLayerDataToMemory(a1, a2, a3, a4, &v43);
  if ((_DWORD)v7 && v43)
  {
    v8 = (char *)atomic_load(&qword_254985B08);
    if (!v8)
    {
      v8 = (char *)operator new(0x58uLL);
      *((_QWORD *)v8 + 2) = 0;
      *((_QWORD *)v8 + 1) = 0;
      *((_QWORD *)v8 + 3) = 850045863;
      *(_QWORD *)v8 = v8 + 8;
      *((_OWORD *)v8 + 2) = 0u;
      *((_OWORD *)v8 + 3) = 0u;
      *((_OWORD *)v8 + 4) = 0u;
      *((_QWORD *)v8 + 10) = 0;
      while (!__ldaxr(&qword_254985B08))
      {
        if (!__stlxr((unint64_t)v8, &qword_254985B08))
          goto LABEL_4;
      }
      __clrex();
      std::mutex::~mutex((std::mutex *)(v8 + 24));
      sub_20BF2B200((uint64_t)v8, *((_QWORD **)v8 + 1));
      operator delete(v8);
      v8 = (char *)atomic_load(&qword_254985B08);
    }
LABEL_4:
    v9 = (std::mutex *)(v8 + 24);
    std::mutex::lock((std::mutex *)(v8 + 24));
    v10 = (uint64_t *)(a1 + 32);
    sub_20C0D7FB4((uint64_t **)v8, v10, v10);
    v12 = v11;
    std::mutex::unlock(v9);
    if ((v12 & 1) != 0)
    {
      v41[0] = "sdf/fileFormat.cpp";
      v41[1] = "_ReadDetached";
      v41[2] = 329;
      v41[3] = "virtual BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ReadDetached(SdfLayer *, const std::string &, BOOL) const";
      v42 = 0;
      v13 = *v10 & 0xFFFFFFFFFFFFFFF8;
      if (v13)
      {
        v14 = (const char *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0)
          v14 = *(const char **)v14;
      }
      else
      {
        v14 = "";
      }
      Identifier = (unsigned __int8 *)pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(a2);
      v16 = Identifier[23];
      v17 = *((_QWORD *)Identifier + 1);
      if ((v16 & 0x80u) == 0)
        v18 = Identifier[23];
      else
        v18 = *((_QWORD *)Identifier + 1);
      v19 = *(unsigned __int8 *)(a3 + 23);
      v20 = (char)v19;
      if ((v19 & 0x80u) != 0)
        v19 = *(_QWORD *)(a3 + 8);
      if (v18 != v19)
        goto LABEL_23;
      if (v20 >= 0)
        v21 = (unsigned __int8 *)a3;
      else
        v21 = *(unsigned __int8 **)a3;
      if ((v16 & 0x80) != 0)
      {
        if (memcmp(*(const void **)Identifier, v21, v17) && v17)
          goto LABEL_33;
      }
      else if (Identifier[23])
      {
        while (*Identifier == *v21)
        {
          ++Identifier;
          ++v21;
          if (!--v16)
            goto LABEL_24;
        }
LABEL_23:
        if (!v19)
          goto LABEL_24;
LABEL_33:
        v30 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(a2);
        if (*(char *)(v30 + 23) >= 0)
          v33 = v30;
        else
          v33 = *(_QWORD *)v30;
        if (*(char *)(a3 + 23) >= 0)
          v34 = a3;
        else
          v34 = *(_QWORD *)a3;
        pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"@%s@ (%s)", v31, v32, v33, v34);
        v29 = 0;
        if (v38 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        v27 = 1;
        goto LABEL_43;
      }
LABEL_24:
      v22 = pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(a2);
      if (*(char *)(v22 + 23) >= 0)
        v25 = v22;
      else
        v25 = *(_QWORD *)v22;
      pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"@%s@", v23, v24, v25);
      v27 = 0;
      if (v40 >= 0)
        p_p = &v39;
      else
        p_p = v39;
      v29 = 1;
LABEL_43:
      pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)v41, (pxrInternal__aapl__pxrReserved__ *)"File format plugin '%s' did not produce a detached layer when requested. Layer data has been copied to produce a detached layer, which may impact performance. The file format should be updated to avoid this issue. This was first encountered whenreading %s", v26, v14, p_p);
      if (v27 && v38 < 0)
        operator delete(__p);
      if (v29 && v40 < 0)
        operator delete(v39);
    }
  }
  return v7;
}

void sub_20C0E95A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ReadAndCopyLayerDataToMemory(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfLayer *a2, uint64_t a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v7;
  uint64_t (*v8)(uint64_t *);
  char v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v18;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v19;
  uint64_t v20;
  uint64_t v21;

  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  if ((_DWORD)v7)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_GetData(a2, &v20);
    v8 = sub_20C0E9774(&v20);
    if (v9 & 1 | (unint64_t)v8
      && (v10 = sub_20C0A6678(&v20), ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10) & 1) == 0))
    {
      v11 = (char *)operator new(0x40uLL);
      *((_DWORD *)v11 + 2) = 1;
      *((_QWORD *)v11 + 2) = 0;
      *(_QWORD *)v11 = off_24C528298;
      *(_OWORD *)(v11 + 24) = 0u;
      *(_OWORD *)(v11 + 40) = 0u;
      *((_DWORD *)v11 + 14) = 1065353216;
      v18 = 0;
      v19 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v11;
      sub_20C0218E4(&v18);
      v12 = sub_20C0A683C((uint64_t *)&v19);
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 16))(v12, &v20);
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(a2, (uint64_t *)&v19, 1);
      if (a5)
        *a5 = 1;
      sub_20C0EA270(&v19);
    }
    else if (a5)
    {
      *a5 = 0;
    }
    v13 = v21;
    if (v21)
    {
      v14 = (unsigned int *)(v21 + 8);
      do
      {
        v15 = __ldxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
  return v7;
}

void sub_20C0E9728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, unsigned int *a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  if (a12)
  {
    v13 = a12 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t (*sub_20C0E9774(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return sub_20C0EA364;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, uint64_t *a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(a1, a2, 1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::ReadFromString()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::WriteToStream()
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::WriteToString()
{
  return 0;
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetExternalAssetDependencies(_QWORD *a1@<X8>)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = a1 + 1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::SupportsReading(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *v2;
  uint64_t *PrimaryFileExtension;
  uint64_t v4;
  uint64_t *EmptyString;

  v2 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load(&qword_254985AE0);
  if (!v2)
    v2 = sub_20C0EA1B0(&qword_254985AE0);
  PrimaryFileExtension = pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPrimaryFileExtension(this);
  v4 = (uint64_t)PrimaryFileExtension;
  if ((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)PrimaryFileExtension);
  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsReading((uint64_t)v2, v4, (uint64_t)EmptyString);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::SupportsWriting(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *v2;
  uint64_t *PrimaryFileExtension;
  uint64_t v4;
  uint64_t *EmptyString;

  v2 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load(&qword_254985AE0);
  if (!v2)
    v2 = sub_20C0EA1B0(&qword_254985AE0);
  PrimaryFileExtension = pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPrimaryFileExtension(this);
  v4 = (uint64_t)PrimaryFileExtension;
  if ((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)PrimaryFileExtension);
  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsWriting((uint64_t)v2, v4, (uint64_t)EmptyString);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::SupportsEditing(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *v2;
  uint64_t *PrimaryFileExtension;
  uint64_t v4;
  uint64_t *EmptyString;

  v2 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load(&qword_254985AE0);
  if (!v2)
    v2 = sub_20C0EA1B0(&qword_254985AE0);
  PrimaryFileExtension = pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPrimaryFileExtension(this);
  v4 = (uint64_t)PrimaryFileExtension;
  if ((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*((_QWORD *)this + 5) & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)PrimaryFileExtension);
  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsEditing((uint64_t)v2, v4, (uint64_t)EmptyString);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindAllFileFormatExtensions@<X0>(uint64_t a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *v3;

  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load(&qword_254985AE0);
  if (!v3)
    v3 = sub_20C0EA1B0(&qword_254985AE0);
  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindAllFileFormatExtensions(v3, a1);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindAllDerivedFileFormatExtensions(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *v5;

  v5 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load(&qword_254985AE0);
  if (!v5)
    v5 = sub_20C0EA1B0(&qword_254985AE0);
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindAllDerivedFileFormatExtensions(v5, this, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::FormatSupportsReading(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load(&qword_254985AE0);
  if (!v4)
    v4 = sub_20C0EA1B0(&qword_254985AE0);
  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsReading((uint64_t)v4, a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::FormatSupportsWriting(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load(&qword_254985AE0);
  if (!v4)
    v4 = sub_20C0EA1B0(&qword_254985AE0);
  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsWriting((uint64_t)v4, a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfFileFormat::FormatSupportsEditing(uint64_t a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load(&qword_254985AE0);
  if (!v4)
    v4 = sub_20C0EA1B0(&qword_254985AE0);
  return pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FormatSupportsEditing((uint64_t)v4, a1, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this@<X0>, uint64_t *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *v5;

  v5 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load(&qword_254985AE0);
  if (!v5)
    v5 = sub_20C0EA1B0(&qword_254985AE0);
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindById(v5, this, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *v6;

  v6 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load(&qword_254985AE0);
  if (!v6)
    v6 = sub_20C0EA1B0(&qword_254985AE0);
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::FindByExtension((uint64_t)v6, a1, a2, a3);
}

void pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  unsigned __int8 *v7;
  std::string *v8;
  std::string *v9;
  __int128 v10;
  uint64_t (*v11)(uint64_t *);
  char v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  std::string v17;
  void *__p;
  std::string *v19;
  uint64_t v20;

  v6 = (_QWORD *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  if (!v6)
    v6 = (_QWORD *)sub_20C0EA3A4(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
  v7 = (unsigned __int8 *)sub_20C0E9D5C(a2, v6);
  if (v7)
  {
    pxrInternal__aapl__pxrReserved__::TfStringTokenize(v7, ",", &__p);
    v8 = (std::string *)__p;
    v9 = v19;
    if (__p == v19)
    {
LABEL_18:
      v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      sub_20BDE5038((void ***)&v17);
      *a3 = 0;
      a3[1] = 0;
      return;
    }
    while (1)
    {
      pxrInternal__aapl__pxrReserved__::TfStringTrim(" \n\t\r", v8, &v17);
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
        operator delete(v8->__r_.__value_.__l.__data_);
      v10 = *(_OWORD *)&v17.__r_.__value_.__l.__data_;
      v8->__r_.__value_.__r.__words[2] = v17.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
      {
        if (!v8->__r_.__value_.__l.__size_)
          goto LABEL_17;
      }
      else if (!*((_BYTE *)&v8->__r_.__value_.__s + 23))
      {
        goto LABEL_17;
      }
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension(a1, (uint64_t)v8, a3);
      v11 = sub_20C0E9DAC(a3);
      if (v12 & 1 | (unint64_t)v11)
      {
        v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        sub_20BDE5038((void ***)&v17);
        return;
      }
      v13 = (unsigned int *)a3[1];
      if (v13)
      {
        v14 = v13 + 2;
        do
        {
          v15 = __ldxr(v14);
          v16 = v15 - 1;
        }
        while (__stlxr(v16, v14));
        if (!v16)
          (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 8))(v13);
      }
LABEL_17:
      if (++v8 == v9)
        goto LABEL_18;
    }
  }
  __p = 0;
  v19 = 0;
  v20 = 0;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension(a1, (uint64_t)&__p, a3);
  if (SHIBYTE(v20) < 0)
    operator delete(__p);
}

void sub_20C0E9CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0E9D5C(pxrInternal__aapl__pxrReserved__::TfToken *a1, _QWORD *a2)
{
  uint64_t *EmptyString;
  uint64_t v4;

  if ((*a2 & 0xFFFFFFFFFFFFFFF8) != 0)
    EmptyString = (uint64_t *)((*a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  else
    EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(a1);
  v4 = sub_20BDEEBA4((uint64_t)a1, (const void **)EmptyString);
  if ((pxrInternal__aapl__pxrReserved__::TfToken *)((char *)a1 + 8) == (pxrInternal__aapl__pxrReserved__::TfToken *)v4)
    return 0;
  else
    return v4 + 56;
}

uint64_t (*sub_20C0E9DAC(_QWORD *a1))(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  BOOL v5;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14);
  if (*a1)
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
    return 0;
  else
    return sub_20C0EA46C;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ShouldSkipAnonymousReload(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::_ShouldReadAnonymousLayers(pxrInternal__aapl__pxrReserved__::SdfFileFormat *this)
{
  return 0;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfFileFormat::_SetLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this, uint64_t *a2, char a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;

  if (*((_BYTE *)this + 466))
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_GetData(this, (uint64_t *)&v23);
    v6 = sub_20C0A683C(a2);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    v8 = sub_20C0A6678((uint64_t *)&v23);
    if (v7 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
      goto LABEL_9;
    v9 = sub_20C0A683C(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 32))(v9);
    v11 = sub_20C0A6678((uint64_t *)&v23);
    if (v10 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11))
      goto LABEL_9;
    if (!*a2 || !v24 || (v12 = *(_QWORD *)(*(_QWORD *)*a2 - 8), !*(_BYTE *)(sub_20BEB47BC(&v24) + 14)) || !v23)
      __cxa_bad_typeid();
    if (!strcmp((const char *)(*(_QWORD *)(v12 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(*(_QWORD *)(*v23 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL)))
    {
      sub_20C0EA4AC(&v21, a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData((uint64_t)this, &v21, 0);
      v17 = v22;
      if (v22)
      {
        v18 = (unsigned int *)(v22 + 8);
        do
        {
          v19 = __ldxr(v18);
          v20 = v19 - 1;
        }
        while (__stlxr(v20, v18));
        if (!v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      }
    }
    else
    {
LABEL_9:
      pxrInternal__aapl__pxrReserved__::SdfLayer::_AdoptData((uint64_t)this, a2);
    }
    result = v24;
    if (v24)
    {
      v14 = (unsigned int *)(v24 + 8);
      do
      {
        v15 = __ldxr(v14);
        v16 = v15 - 1;
      }
      while (__stlxr(v16, v14));
      if (!v16)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
  }
  else
  {
    result = pxrInternal__aapl__pxrReserved__::SdfLayer::_SwapData((uint64_t)this, a2);
  }
  *((_BYTE *)this + 516) = a3;
  return result;
}

void sub_20C0E9FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10, uint64_t a11, unsigned int *a12)
{
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;

  if (a10)
  {
    v13 = a10 + 2;
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
  }
  if (a12)
  {
    v16 = a12 + 2;
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)a12 + 8))(a12);
  }
  _Unwind_Resume(exception_object);
}

void *pxrInternal__aapl__pxrReserved__::SdfFileFormat::_InstantiateNewLayer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v11;

  v11 = operator new(0x208uLL);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SdfLayer(v11, a2, a3, a4, a5, a6, 0);
  return v11;
}

void sub_20C0EA090(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C0EA0B0()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C0EA16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *sub_20C0EA1B0(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *result;
  void *v4;

  result = sub_20C0EA1F8();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C0EA238((std::mutex *)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *sub_20C0EA1F8()
{
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry *)operator new(0xC0uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_FileFormatRegistry::Sdf_FileFormatRegistry(v0);
  return v0;
}

void sub_20C0EA224(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0EA238(std::mutex *a1)
{
  std::mutex::~mutex(a1 + 2);
  sub_20BFDBBBC((uint64_t)&a1[1].__m_.__opaque[8]);
  sub_20BFBE3F8((uint64_t)&a1->__m_.__opaque[32]);
  return sub_20BFDBB28((uint64_t)a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C0EA270(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

uint64_t sub_20C0EA29C(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = 0;
    v6 = *((_BYTE *)a3 + 23);
    if (v6 >= 0)
      v7 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v7 = a3[1];
    if (v6 >= 0)
      v8 = (unsigned __int8 *)a3;
    else
      v8 = *a3;
    while (1)
    {
      v9 = *(unsigned __int8 *)(v4 + 23);
      if ((v9 & 0x80u) == 0)
        v10 = (unsigned __int8 *)*(unsigned __int8 *)(v4 + 23);
      else
        v10 = *(unsigned __int8 **)(v4 + 8);
      if (v10 != v7)
        goto LABEL_20;
      if ((v9 & 0x80) == 0)
        break;
      if (!memcmp(*(const void **)v4, v8, *(_QWORD *)(v4 + 8)))
        goto LABEL_19;
LABEL_20:
      v4 += 24;
      if (v4 == a2)
        return v5;
    }
    if (*(_BYTE *)(v4 + 23))
    {
      v11 = 0;
      while (*(unsigned __int8 *)(v4 + v11) == v8[v11])
      {
        if (v9 == ++v11)
          goto LABEL_19;
      }
      goto LABEL_20;
    }
LABEL_19:
    ++v5;
    goto LABEL_20;
  }
  return 0;
}

uint64_t sub_20C0EA364(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(sub_20BEB47BC(v2) + 14))
    return *a1;
  return 0;
}

unint64_t sub_20C0EA3A4(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType *v2;
  pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType *v3;
  unsigned int *v5;
  unsigned int v6;
  void **v8;

  v2 = sub_20C0EA42C();
  v3 = v2;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  if (v2)
  {
    v8 = (void **)((char *)v2 + 8);
    sub_20BEEB2B8(&v8);
    if ((*(_QWORD *)v3 & 7) != 0)
    {
      v5 = (unsigned int *)(*(_QWORD *)v3 & 0xFFFFFFFFFFFFFFF8);
      do
        v6 = __ldxr(v5);
      while (__stlxr(v6 - 2, v5));
    }
    operator delete(v3);
  }
  return atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType *sub_20C0EA42C()
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType *)operator new(0x20uLL);
  pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens_StaticTokenType::SdfFileFormatTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C0EA458(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0EA46C(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3)
    return 0;
  if (*(_BYTE *)(sub_20BEB47BC(v2) + 14))
    return *a1;
  return 0;
}

uint64_t *sub_20C0EA4AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_20BEB5AD8((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_20C0EA550(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B340(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::Sdf_Identity::GetLayer(pxrInternal__aapl__pxrReserved__::Sdf_Identity *this)
{
  uint64_t v1;
  unsigned __int8 v3;

  v1 = *((_QWORD *)this + 2);
  if (v1)
    return (uint64_t *)(v1 + 80);
  v3 = atomic_load((unsigned __int8 *)&qword_254985B20);
  if ((v3 & 1) != 0)
    return &qword_254985B10;
  if (__cxa_guard_acquire(&qword_254985B20))
  {
    qword_254985B10 = 0;
    *(_QWORD *)algn_254985B18 = 0;
    __cxa_atexit((void (*)(void *))sub_20C0EA5F0, &qword_254985B10, &dword_20BDBC000);
    __cxa_guard_release(&qword_254985B20);
  }
  return &qword_254985B10;
}

uint64_t sub_20C0EA5F0(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_DWORD *pxrInternal__aapl__pxrReserved__::Sdf_Identity::_Forget(pxrInternal__aapl__pxrReserved__::Sdf_Identity *this)
{
  _DWORD *result;
  uint64_t v3;

  v3 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle((_DWORD *)&v3 + 1);
  sub_20BFD3EBC((int *)this + 1, (int *)&v3);
  sub_20BFD3F10((int *)this + 2, (int *)&v3 + 1);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v3 + 1);
  result = sub_20BFD265C(&v3);
  *((_QWORD *)this + 2) = 0;
  return result;
}

void pxrInternal__aapl__pxrReserved__::Sdf_Identity::_UnregisterOrDelete(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    sub_20C0EA708(a1);
  }
  else if (a2)
  {
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 2);
    sub_20BFD265C(a2 + 1);
    operator delete(a2);
  }
}

uint64_t sub_20C0EA708(uint64_t result)
{
  uint64_t v1;
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 *v8;
  int v9;
  uint64_t v10;
  uint64_t v12;
  _DWORD *v13;
  _BYTE *v14;
  _BYTE *v15;

  v1 = result;
  v2 = (unint64_t *)(result + 96);
  do
  {
    v3 = __ldaxr(v2);
    v4 = v3 + 1;
  }
  while (__stlxr(v4, v2));
  if (v4 >= *(_QWORD *)(result + 104))
  {
    atomic_store(0, (unint64_t *)(result + 96));
    result = sub_20BEB3FEC((uint64_t)&v15, result + 112);
    v5 = *(_QWORD *)(v1 + 32);
    v6 = *(_QWORD *)(v1 + 40);
    v7 = 0;
    if (v6)
    {
      v8 = (__int16 *)(v5 + 4);
      while (1)
      {
        v9 = *v8;
        v8 += 12;
        if (v9 != -1)
          break;
        if (v6 == ++v7)
          goto LABEL_20;
      }
    }
    if (v7 != v6)
    {
      v10 = v5 + 24 * v7;
      do
      {
        if (atomic_load(*(unsigned int **)(v10 + 16)))
        {
          v12 = v10 + 24;
          do
          {
            v10 = v12;
            if (*(_BYTE *)(v12 - 18))
              break;
            v12 += 24;
          }
          while (*(__int16 *)(v10 + 4) == -1);
        }
        else
        {
          v13 = *(_DWORD **)(v10 + 16);
          if (v13)
          {
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v13 + 2);
            sub_20BFD265C(v13 + 1);
            operator delete(v13);
          }
          result = sub_20C0EACE0(v1, v10);
          v10 = result;
        }
      }
      while (v10 != *(_QWORD *)(v1 + 32) + 24 * *(_QWORD *)(v1 + 40));
    }
LABEL_20:
    v14 = v15;
    if (v15)
    {
      __dmb(0xBu);
      *v14 = 0;
    }
  }
  return result;
}

void sub_20C0EA828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _BYTE *a9)
{
  if (a9)
  {
    __dmb(0xBu);
    *a9 = 0;
  }
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Sdf_IdentityRegistry(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  void *v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = operator new(0x78uLL);
  sub_20C0EAEC0((uint64_t)v7, a2);
  a1[2] = v7;
  return a1;
}

void sub_20C0EA8A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;

  operator delete(v2);
  v4 = *(unsigned int **)(v1 + 8);
  if (v4)
  {
    v5 = v4 + 2;
    do
    {
      v6 = __ldxr(v5);
      v7 = v6 - 1;
    }
    while (__stlxr(v7, v5));
    if (!v7)
      (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::~Sdf_IdentityRegistry(pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry *this)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  sub_20C0EBB18((uint64_t *)this + 2, 0);
  v2 = (unsigned int *)*((_QWORD *)this + 1);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify@<X0>(uint64_t **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, unsigned int **a3@<X8>)
{
  return sub_20C0EA950(this[2], (unsigned int *)a2, a3);
}

uint64_t sub_20C0EA950@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, unsigned int **a3@<X8>)
{
  uint64_t result;
  unsigned int *v7;
  unsigned int v8;
  _DWORD *v9;
  unint64_t v10;
  unsigned int v11;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _DWORD *v17;

  sub_20BEB3FEC((uint64_t)&v16, (uint64_t)(a1 + 14));
  result = sub_20C0EB230(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  if (a1[4] + 24 * a1[5] == result)
  {
    sub_20BEB59B0((uint64_t)&v14, (uint64_t)"Sdf", (uint64_t)"Sdf_IdentityRegistry::Identify");
    v9 = operator new(0x18uLL);
    *v9 = 0;
    sub_20BFD6E54(v9 + 1, a2);
    sub_20BFD6EA4(v9 + 2, a2 + 1);
    *((_QWORD *)v9 + 2) = a1;
    v17 = a2;
    result = sub_20C0EB298(a1, a2, (uint64_t)&unk_20CAC184C, &v17);
    *(_QWORD *)(result + 16) = v9;
    v10 = (unint64_t)a1[6] >> 3;
    if (v10 <= 1)
      v10 = 1;
    a1[13] = v10;
    *a3 = v9;
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 + 1, v9));
    while (v15--)
      result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v14);
  }
  else
  {
    v7 = *(unsigned int **)(result + 16);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 + 1, v7));
    *a3 = v7;
  }
  v13 = v16;
  if (v16)
  {
    __dmb(0xBu);
    *v13 = 0;
  }
  return result;
}

void sub_20C0EAABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _BYTE *a11)
{
  if (a11)
  {
    __dmb(0xBu);
    *a11 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::MoveIdentity(uint64_t **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  return sub_20C0EAAF8(this[2], (unsigned int *)a2, a3);
}

uint64_t sub_20C0EAAF8(uint64_t *a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v7;
  char v8;
  char v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  char v18;
  _BYTE *v19;

  sub_20BEB3FEC((uint64_t)&v19, (uint64_t)(a1 + 14));
  result = sub_20C0EB230(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  if (a1[4] + 24 * a1[5] == result)
    goto LABEL_6;
  sub_20BFD6E54(&v14, a3);
  sub_20BFD6EA4((_DWORD *)&v14 + 1, a3 + 1);
  v15 = 0;
  v7 = sub_20C0EB96C(a1, (unsigned int *)&v14, (uint64_t)&v14);
  v9 = v8;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v14 + 1);
  sub_20BFD265C(&v14);
  if (!v9)
  {
    v10 = *(pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v7 + 16);
    if (!v10)
    {
      v14 = "sdf/identity.cpp";
      v15 = "MoveIdentity";
      v16 = 127;
      v17 = "void pxrInternal__aapl__pxrReserved__::Sdf_IdRegistryImpl::MoveIdentity(const SdfPath &, const SdfPath &)";
      v18 = 0;
      if (!pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v14, "newIdStatus.first->second", 0))goto LABEL_5;
      v10 = *(pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v7 + 16);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Identity::_Forget(v10);
  }
LABEL_5:
  v11 = sub_20C0EB230(a1, a2, bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1))));
  v12 = *(_QWORD *)(v11 + 16);
  *(_QWORD *)(v7 + 16) = v12;
  sub_20C01A074((int *)(v12 + 4), a3);
  sub_20C01A0C8((int *)(v12 + 8), a3 + 1);
  result = sub_20C0EACE0((uint64_t)a1, v11);
LABEL_6:
  v13 = v19;
  if (v19)
  {
    __dmb(0xBu);
    *v13 = 0;
  }
  return result;
}

void sub_20C0EACA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _BYTE *a15)
{
  if (a15)
  {
    __dmb(0xBu);
    *a15 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::_UnregisterOrDelete(pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry *this)
{
  return sub_20C0EA708(*((_QWORD *)this + 2));
}

uint64_t sub_20C0EACE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 *v4;
  uint64_t v5;
  int v6;

  v2 = a2;
  sub_20C0EAD40((_DWORD *)a1, a2);
  if (*(__int16 *)(v2 + 4) == -1)
  {
    v4 = (__int16 *)(v2 + 28);
    v5 = v2 + 24;
    do
    {
      v2 = v5;
      if (*((_BYTE *)v4 - 22))
        break;
      v6 = *v4;
      v4 += 12;
      v5 += 24;
    }
    while (v6 == -1);
  }
  *(_BYTE *)(a1 + 73) = 1;
  return v2;
}

_DWORD *sub_20C0EAD40(_DWORD *result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;
  int *v8;
  __int16 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _WORD *v13;
  int v14;

  v3 = result;
  if (*(__int16 *)(a2 + 4) != -1)
  {
    result = sub_20C0EAE68(a2);
    *(_WORD *)(a2 + 4) = -1;
  }
  --v3[6];
  v4 = v3[4];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v4) >> 3);
  v6 = (v5 + 1) & *v3;
  v7 = *(__int16 *)(v4 + 24 * v6 + 4);
  if (v7 >= 1)
  {
    do
    {
      v8 = (int *)(v4 + 24 * v6);
      v9 = v7 - 1;
      v10 = v4 + 24 * v5;
      v11 = *v8;
      sub_20BFD38A4((_DWORD *)(v10 + 8), v8 + 2);
      result = sub_20BFD38DC((_DWORD *)(v10 + 12), v8 + 3);
      *(_QWORD *)(v10 + 16) = *((_QWORD *)v8 + 2);
      *(_DWORD *)v10 = v11;
      *(_WORD *)(v10 + 4) = v9;
      v4 = v3[4];
      v12 = v4 + 24 * v6;
      v14 = *(__int16 *)(v12 + 4);
      v13 = (_WORD *)(v12 + 4);
      if (v14 != -1)
      {
        result = sub_20C0EAE68(v4 + 24 * v6);
        *v13 = -1;
        v4 = v3[4];
      }
      v5 = v6;
      v6 = *v3 & (v6 + 1);
      v7 = *(__int16 *)(v4 + 24 * v6 + 4);
    }
    while (v7 > 0);
  }
  return result;
}

_DWORD *sub_20C0EAE68(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  return sub_20BFD265C((_DWORD *)(a1 + 8));
}

_DWORD *sub_20C0EAE94(_DWORD *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a1 + 1);
  return sub_20BFD265C(a1);
}

double sub_20C0EAEC0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  double result;

  v3 = sub_20C0EAF30(a1, 0, 0.0, 0.5);
  v4 = a2[1];
  *(_QWORD *)(v3 + 80) = *a2;
  *(_QWORD *)(v3 + 88) = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0.0;
  *(_OWORD *)(v3 + 96) = xmmword_20CA59F70;
  *(_BYTE *)(v3 + 112) = 0;
  return result;
}

uint64_t sub_20C0EAF30(uint64_t a1, unint64_t a2, float a3, float a4)
{
  int *v7;
  unint64_t v8;
  float v9;
  std::logic_error *exception;
  unint64_t v12;

  v12 = a2;
  sub_20BED1408((unint64_t *)a1, (uint64_t *)&v12);
  if (v12 >= 0xAAAAAAAAAAAAAABLL)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20BDCAFB8(exception, "The map exceeds its maximum bucket count.");
    __cxa_throw(exception, (struct type_info *)off_24C514D60, MEMORY[0x24BEDAAF0]);
  }
  sub_20C0EB0C8((_QWORD *)(a1 + 8), v12);
  v7 = *(int **)(a1 + 8);
  if (v7 == *(int **)(a1 + 16))
    v7 = sub_20C0EB050();
  v8 = v12;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 72) = 0;
  if (v8)
    *(_BYTE *)(*(_QWORD *)(a1 + 16) - 18) = 1;
  v9 = fminf(fmaxf(a4, 0.2), 0.95);
  *(float *)(a1 + 64) = fminf(fmaxf(a3, 0.0), 0.15);
  *(float *)(a1 + 68) = v9;
  *(_QWORD *)(a1 + 56) = (unint64_t)(float)(v9 * (float)v8);
  return a1;
}

void sub_20C0EB03C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

int *sub_20C0EB050()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25473B498);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_25473B498))
  {
    dword_25473B480 = 0;
    word_25473B484 = -1;
    byte_25473B486 = 1;
    __cxa_atexit((void (*)(void *))sub_20C0EB1F4, &dword_25473B480, &dword_20BDBC000);
    __cxa_guard_release(&qword_25473B498);
  }
  return &dword_25473B480;
}

_QWORD *sub_20C0EB0C8(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_20BDE4FA4(a1, a2);
    v4 = a1[1];
    v5 = v4 + 24 * a2;
    do
    {
      *(_DWORD *)v4 = 0;
      *(_WORD *)(v4 + 4) = -1;
      *(_BYTE *)(v4 + 6) = 0;
      v4 += 24;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_20C0EB13C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20C0EB150(&a9);
  _Unwind_Resume(a1);
}

void sub_20C0EB150(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_20C0EB190(v2);
    operator delete(**a1);
  }
}

_QWORD *sub_20C0EB190(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;

  v1 = result;
  v3 = *result;
  v2 = result[1];
  if (v2 != *result)
  {
    v4 = v2 - 24;
    do
    {
      if (*(__int16 *)(v4 + 4) != -1)
      {
        result = sub_20C0EAE68(v4);
        *(_WORD *)(v4 + 4) = -1;
      }
      v5 = v4 == v3;
      v4 -= 24;
    }
    while (!v5);
  }
  v1[1] = v3;
  return result;
}

uint64_t sub_20C0EB1F4(uint64_t a1)
{
  if (*(__int16 *)(a1 + 4) != -1)
  {
    sub_20C0EAE68(a1);
    *(_WORD *)(a1 + 4) = -1;
  }
  return a1;
}

uint64_t sub_20C0EB230(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = a1[4];
  v4 = *a1 & a3;
  if (*(__int16 *)(v3 + 24 * v4 + 4) < 0)
  {
LABEL_5:
    v4 = a1[5];
  }
  else
  {
    LOWORD(v5) = 0;
    while (*(_QWORD *)(v3 + 24 * v4 + 8) != *a2)
    {
      v5 = (__int16)(v5 + 1);
      v4 = (v4 + 1) & *a1;
      if (v5 > *(__int16 *)(v3 + 24 * v4 + 4))
        goto LABEL_5;
    }
  }
  return v3 + 24 * v4;
}

uint64_t sub_20C0EB298(uint64_t *a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  _DWORD *v16;

  v7 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v8 = a1[4];
  v9 = v7 & *a1;
  if (*(__int16 *)(v8 + 24 * v9 + 4) < 0)
  {
    LOWORD(v10) = 0;
LABEL_7:
    v11 = sub_20C0EB45C((uint64_t)a1);
    v12 = a1[4];
    if ((v11 & 1) != 0)
    {
      v9 = v7 & *a1;
      if (*(__int16 *)(v12 + 24 * v9 + 4) < 0)
      {
        LOWORD(v10) = 0;
        v13 = *(unsigned __int16 *)(v12 + 24 * v9 + 4);
      }
      else
      {
        LOWORD(v10) = 0;
        do
        {
          v10 = (__int16)(v10 + 1);
          v9 = (v9 + 1) & *a1;
        }
        while (v10 <= *(__int16 *)(v12 + 24 * v9 + 4));
        v13 = *(unsigned __int16 *)(v12 + 24 * v9 + 4);
      }
    }
    else
    {
      v13 = *(unsigned __int16 *)(v12 + 24 * v9 + 4);
    }
    if (v13 == 0xFFFF)
    {
      v15 = v12 + 24 * v9;
      v16 = *a4;
      sub_20BFD6E54((_DWORD *)(v15 + 8), v16);
      sub_20BFD6EA4((_DWORD *)(v15 + 12), v16 + 1);
      *(_QWORD *)(v15 + 16) = 0;
      *(_DWORD *)v15 = v7;
      *(_WORD *)(v15 + 4) = v10;
    }
    else
    {
      sub_20C0EB520(a1, v9, v10, v7, a3, a4);
    }
    ++a1[6];
    return a1[4] + 24 * v9;
  }
  else
  {
    LOWORD(v10) = 0;
    while (*(_QWORD *)(v8 + 24 * v9 + 8) != *(_QWORD *)a2)
    {
      v10 = (__int16)(v10 + 1);
      v9 = (v9 + 1) & *a1;
      if (v10 > *(__int16 *)(v8 + 24 * v9 + 4))
        goto LABEL_7;
    }
    return v8 + 24 * v9;
  }
}

uint64_t sub_20C0EB45C(uint64_t a1)
{
  unint64_t v2;
  float v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  float v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if (*(_BYTE *)(a1 + 72) || (v2 = *(_QWORD *)(a1 + 48), v2 >= *(_QWORD *)(a1 + 56)))
  {
    v6 = sub_20BED1164((_QWORD *)a1);
    sub_20C0EB5C8(a1, v6);
    *(_BYTE *)(a1 + 72) = 0;
    return 1;
  }
  if (*(_BYTE *)(a1 + 73))
  {
    *(_BYTE *)(a1 + 73) = 0;
    v3 = *(float *)(a1 + 64);
    if (v3 != 0.0)
    {
      v4 = *(_QWORD *)(a1 + 40);
      v5 = v4 ? (float)v2 / (float)v4 : 0.0;
      if (v5 < v3)
      {
        v8 = *(float *)(a1 + 68);
        v9 = vcvtps_u32_f32((float)(v2 + 1) / v8);
        v10 = vcvtps_u32_f32((float)v2 / v8);
        if (v10 <= v9)
          v11 = v9;
        else
          v11 = v10;
        sub_20C0EB5C8(a1, v11);
        return 1;
      }
    }
  }
  return 0;
}

_DWORD *sub_20C0EB520(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5, _DWORD **a6)
{
  uint64_t v10;
  int v12;
  int v13;
  uint64_t v14;

  v10 = (uint64_t)*a6;
  sub_20BFD6E54(&v12, *a6);
  sub_20BFD6EA4(&v13, (_DWORD *)(v10 + 4));
  v14 = 0;
  sub_20C0EB7E8(a1, a2, a3, a4, (uint64_t)&v12);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v13);
  return sub_20BFD265C(&v12);
}

void sub_20C0EB5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  sub_20C0EAE94(&a9);
  _Unwind_Resume(a1);
}

void sub_20C0EB5C8(uint64_t a1, unint64_t a2)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int *v5;
  unint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  _QWORD v10[9];
  void **v11;

  sub_20C0EAF30((uint64_t)&v9, a2, *(float *)(a1 + 64), *(float *)(a1 + 68));
  v3 = *(unsigned int **)(a1 + 8);
  v4 = *(unsigned int **)(a1 + 16);
  if (v3 != v4)
  {
    v5 = v3 + 2;
    v6 = (unint64_t)(v10[4] - 1) >> 32;
    do
    {
      if (*((__int16 *)v5 - 2) != -1)
      {
        if (v6)
          v7 = bswap64(0x9E3779B97F4A7C55* (v5[1]+ ((v5[1] + (unint64_t)*v5 + (v5[1] + (unint64_t)*v5) * (v5[1] + (unint64_t)*v5)) >> 1)));
        else
          v7 = *(v5 - 2);
        sub_20C0EB6E0(&v9, v9 & v7, 0, v7, (uint64_t)v5);
      }
      v8 = v5 + 4;
      v5 += 6;
    }
    while (v8 != v4);
  }
  v10[5] = *(_QWORD *)(a1 + 48);
  sub_20BED1250(&v9, (uint64_t *)a1);
  v11 = (void **)v10;
  sub_20C0EB150(&v11);
}

void sub_20C0EB6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;

  *(_QWORD *)(v11 - 56) = &a11;
  sub_20C0EB150((void ***)(v11 - 56));
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0EB6E0(_QWORD *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5)
{
  uint64_t v10;
  int *v11;
  int v12;
  _WORD *v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  _DWORD *result;
  int *v20;

  v20 = (int *)(a5 + 4);
  while (1)
  {
    v10 = a1[4];
    v11 = (int *)(v10 + 24 * a2);
    v13 = v11 + 1;
    v12 = *((__int16 *)v11 + 2);
    if (v12 >= a3)
      goto LABEL_5;
    v14 = v10 + 24 * a2;
    v15 = (int *)(v14 + 12);
    v16 = (_QWORD *)(v14 + 16);
    if (v12 == -1)
      break;
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a5, (int *)(v14 + 8));
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v20, v15);
    v17 = *(_QWORD *)(a5 + 8);
    *(_QWORD *)(a5 + 8) = *v16;
    *v16 = v17;
    LOWORD(v17) = *v13;
    *v13 = a3;
    v18 = *v11;
    *v11 = a4;
    a3 = v17;
    a4 = v18;
LABEL_5:
    ++a3;
    a2 = *a1 & (a2 + 1);
  }
  sub_20BFD38A4((_DWORD *)(v14 + 8), (_DWORD *)a5);
  result = sub_20BFD38DC(v15, v20);
  *v16 = *(_QWORD *)(a5 + 8);
  *v11 = a4;
  *v13 = a3;
  return result;
}

_DWORD *sub_20C0EB7E8(uint64_t *a1, uint64_t a2, __int16 a3, int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  int *v17;
  int v18;
  __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  _DWORD *result;
  int *v26;

  v10 = a1[4] + 24 * a2;
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a5, (int *)(v10 + 8));
  v26 = (int *)(a5 + 4);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap((int *)(a5 + 4), (int *)(v10 + 12));
  v11 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a5 + 8) = *(_QWORD *)(v10 + 16);
  *(_QWORD *)(v10 + 16) = v11;
  LOWORD(v11) = *(_WORD *)(v10 + 4);
  *(_WORD *)(v10 + 4) = a3;
  v12 = *(_DWORD *)v10;
  *(_DWORD *)v10 = a4;
  v13 = *a1;
  v14 = *a1 & (a2 + 1);
  v15 = v11 + 1;
  v16 = a1[4];
  v17 = (int *)(v16 + 24 * v14);
  v19 = (__int16 *)(v17 + 1);
  v18 = *((unsigned __int16 *)v17 + 2);
  if (v18 != 0xFFFF)
  {
    do
    {
      if (v15 > (__int16)v18)
      {
        if (v15 >= 4096)
          *((_BYTE *)a1 + 72) = 1;
        v20 = v16 + 24 * v14;
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::swap((int *)a5, (int *)(v20 + 8));
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::swap(v26, (int *)(v20 + 12));
        v21 = *(_QWORD *)(a5 + 8);
        *(_QWORD *)(a5 + 8) = *(_QWORD *)(v20 + 16);
        *(_QWORD *)(v20 + 16) = v21;
        v22 = *v19;
        *v19 = v15;
        v23 = *v17;
        *v17 = v12;
        v13 = *a1;
        v16 = a1[4];
        v15 = v22;
        v12 = v23;
      }
      v14 = v13 & (v14 + 1);
      ++v15;
      v17 = (int *)(v16 + 24 * v14);
      v19 = (__int16 *)(v17 + 1);
      LOWORD(v18) = *((_WORD *)v17 + 2);
    }
    while ((unsigned __int16)v18 != 0xFFFF);
  }
  v24 = v16 + 24 * v14;
  sub_20BFD38A4((_DWORD *)(v24 + 8), (_DWORD *)a5);
  result = sub_20BFD38DC((_DWORD *)(v24 + 12), v26);
  *(_QWORD *)(v24 + 16) = *(_QWORD *)(a5 + 8);
  *v17 = v12;
  *v19 = v15;
  return result;
}

uint64_t sub_20C0EB96C(uint64_t *a1, unsigned int *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  int v11;
  uint64_t v13;

  v5 = bswap64(0x9E3779B97F4A7C55* (a2[1]+ ((a2[1] + (unint64_t)*a2 + (a2[1] + (unint64_t)*a2) * (a2[1] + (unint64_t)*a2)) >> 1)));
  v6 = a1[4];
  v7 = v5 & *a1;
  if (*(__int16 *)(v6 + 24 * v7 + 4) < 0)
  {
    LOWORD(v8) = 0;
LABEL_7:
    v9 = sub_20C0EB45C((uint64_t)a1);
    v10 = a1[4];
    if ((v9 & 1) != 0)
    {
      v7 = v5 & *a1;
      if (*(__int16 *)(v10 + 24 * v7 + 4) < 0)
      {
        LOWORD(v8) = 0;
        v11 = *(unsigned __int16 *)(v10 + 24 * v7 + 4);
      }
      else
      {
        LOWORD(v8) = 0;
        do
        {
          v8 = (__int16)(v8 + 1);
          v7 = (v7 + 1) & *a1;
        }
        while (v8 <= *(__int16 *)(v10 + 24 * v7 + 4));
        v11 = *(unsigned __int16 *)(v10 + 24 * v7 + 4);
      }
    }
    else
    {
      v11 = *(unsigned __int16 *)(v10 + 24 * v7 + 4);
    }
    if (v11 == 0xFFFF)
    {
      v13 = v10 + 24 * v7;
      sub_20BFD38A4((_DWORD *)(v13 + 8), (_DWORD *)a3);
      sub_20BFD38DC((_DWORD *)(v13 + 12), (_DWORD *)(a3 + 4));
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(a3 + 8);
      *(_DWORD *)v13 = v5;
      *(_WORD *)(v13 + 4) = v8;
    }
    else
    {
      sub_20C0EB7E8(a1, v7, v8, v5, a3);
    }
    ++a1[6];
    return a1[4] + 24 * v7;
  }
  else
  {
    LOWORD(v8) = 0;
    while (*(_QWORD *)(v6 + 24 * v7 + 8) != *(_QWORD *)a2)
    {
      v8 = (__int16)(v8 + 1);
      v7 = (v7 + 1) & *a1;
      if (v8 > *(__int16 *)(v6 + 24 * v7 + 4))
        goto LABEL_7;
    }
    return v6 + 24 * v7;
  }
}

void sub_20C0EBB18(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    v4 = (void *)sub_20C0EBB44(v3);
    operator delete(v4);
  }
}

uint64_t sub_20C0EBB44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int16 *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  void **v16[2];

  sub_20BEB3FEC((uint64_t)v16, a1 + 112);
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = 0;
  if (v3)
  {
    v5 = (__int16 *)(v2 + 4);
    while (1)
    {
      v6 = *v5;
      v5 += 12;
      if (v6 != -1)
        break;
      if (v3 == ++v4)
        goto LABEL_12;
    }
  }
  if (v4 != v3)
  {
    v7 = v2 + 24 * v3;
    v8 = v2 + 24 * v4;
    do
    {
      pxrInternal__aapl__pxrReserved__::Sdf_Identity::_Forget(*(pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(v8 + 16));
      v9 = v8 + 24;
      do
      {
        v8 = v9;
        if (*(_BYTE *)(v9 - 18))
          break;
        v9 += 24;
      }
      while (*(__int16 *)(v8 + 4) == -1);
    }
    while (v8 != v7);
  }
LABEL_12:
  v10 = v16[0];
  if (v16[0])
  {
    __dmb(0xBu);
    *(_BYTE *)v10 = 0;
  }
  v11 = *(unsigned int **)(a1 + 88);
  if (v11)
  {
    v12 = v11 + 2;
    do
    {
      v13 = __ldxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v11 + 8))(v11);
  }
  v16[0] = (void **)(a1 + 8);
  sub_20C0EB150(v16);
  return a1;
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>(_QWORD *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::VtValue *a3, int a4, double a5)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *v9;
  unint64_t *Instance;
  uint64_t v12;
  _QWORD v13[4];
  char v14;

  if (a4
    && (a1[15]
     || (v13[0] = "sdf/layer.cpp",
         v13[1] = "_PrimSetTimeSample",
         v13[2] = 1424,
         v13[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample(const SdfPath &, double, const T &"
                  ", BOOL) [T = pxrInternal__aapl__pxrReserved__::VtValue]",
         v14 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "_stateDelegate", 0) & 1) != 0)))
  {
    v9 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_20C0EBD60(a1 + 15);
    return (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetTimeSample(v9, a2, a5, a3);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeAttributeTimeSamples(Instance, a1 + 3, a2);
    v12 = sub_20C0A683C(a1 + 14);
    (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::VtValue *, double))(*(_QWORD *)v12 + 296))(v12, a2, a3, a5);
    return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
  }
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8SdfLayer18_PrimSetTimeSampleINS_7VtValueEEEvRKNS_7SdfPathEdRKT_b(a1, a2, a3, a4, a5);
}

void sub_20C0EBD48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0EBD60(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase>::"
            "operator->() const [U = pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAB5CBELL & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(_QWORD *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t (***a3)(_QWORD, uint64_t), int a4, double a5)
{
  uint64_t *v9;
  unint64_t *Instance;
  uint64_t v12;
  _BYTE v13[8];
  _QWORD v14[4];
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (a4
    && (a1[15]
     || (v14[0] = "sdf/layer.cpp",
         v14[1] = "_PrimSetTimeSample",
         v14[2] = 1424,
         v14[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample(const SdfPath &, double, const T &"
                  ", BOOL) [T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]",
         v15 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v14, "_stateDelegate", 0) & 1) != 0)))
  {
    v9 = (uint64_t *)sub_20C0EBD60(a1 + 15);
    return (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetTimeSample(v9, (uint64_t)a2, (uint64_t)a3, a5);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeAttributeTimeSamples(Instance, a1 + 3, a2);
    sub_20C0EBF5C(a3, (uint64_t)v14);
    v12 = sub_20C0A683C(a1 + 14);
    (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, _QWORD *, double))(*(_QWORD *)v12 + 296))(v12, a2, v14, a5);
    sub_20BF4C2D8((uint64_t)v14);
    return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
  }
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8SdfLayer18_PrimSetTimeSampleINS_25SdfAbstractDataConstValueEEEvRKNS_7SdfPathEdRKT_b(a1, a2, a3, a4, a5);
}

void sub_20C0EBF2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0EBF5C@<X0>(uint64_t (***a1)(_QWORD, uint64_t)@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _QWORD v3[4];
  char v4;

  *(_QWORD *)(a2 + 8) = 0;
  result = (**a1)(a1, a2);
  if ((result & 1) == 0)
  {
    v3[0] = "sdf/layer.cpp";
    v3[1] = "_GetVtValue";
    v3[2] = 1414;
    v3[3] = "VtValue pxrInternal__aapl__pxrReserved__::_GetVtValue(const SdfAbstractDataConstValue &)";
    v4 = 0;
    return pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v3, "v.GetValue(&value)", 0);
  }
  return result;
}

void sub_20C0EBFD8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4, pxrInternal__aapl__pxrReserved__::VtValue *a5, int a6)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *v11;
  unint64_t *Instance;
  uint64_t v14;
  _BYTE v15[8];
  _QWORD v16[4];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (a6
    && (a1[15]
     || (v16[0] = "sdf/layer.cpp",
         v16[1] = "_PrimSetField",
         v16[2] = 4178,
         v16[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField(const SdfPath &, const TfToken &, const"
                  " T &, VtValue *, BOOL) [T = pxrInternal__aapl__pxrReserved__::VtValue]",
         v17 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v16, "_stateDelegate", 0) & 1) != 0)))
  {
    v11 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_20C0EBD60(a1 + 15);
    return pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetField(v11, a2, a3, a4, a5);
  }
  else
  {
    if (a5)
      sub_20BF4C200(v16, a5);
    else
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v15);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(Instance, a1 + 3, a2, (uint64_t *)a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v16, a4);
    v14 = sub_20C0A683C(a1 + 14);
    (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::VtValue *))(*(_QWORD *)v14 + 152))(v14, a2, a3, a4);
    sub_20BFD2190(v15);
    return sub_20BF4C2D8((uint64_t)v16);
  }
}

void sub_20C0EC164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetField@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, pxrInternal__aapl__pxrReserved__::VtValue *a4@<X8>)
{
  *((_QWORD *)a4 + 1) = 0;
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, a2, a3, a4);
}

void sub_20C0EC1B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(pxrInternal__aapl__pxrReserved__::SdfLayer *this, pxrInternal__aapl__pxrReserved__::SdfPath *a2, pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (***a4)(_QWORD, uint64_t), _QWORD *a5, int a6)
{
  uint64_t *v11;
  unint64_t *Instance;
  uint64_t v14;
  _BYTE v15[8];
  _BYTE v16[16];
  _QWORD v17[4];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a6
    && (*((_QWORD *)this + 15)
     || (v17[0] = "sdf/layer.cpp",
         v17[1] = "_PrimSetField",
         v17[2] = 4178,
         v17[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField(const SdfPath &, const TfToken &, const"
                  " T &, VtValue *, BOOL) [T = pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue]",
         v18 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v17, "_stateDelegate", 0) & 1) != 0)))
  {
    v11 = (uint64_t *)sub_20C0EBD60((uint64_t *)this + 15);
    return pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetField(v11, a2, a3);
  }
  else
  {
    if (a5)
      sub_20BF4C200(v17, a5);
    else
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(this, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v17);
    sub_20C0EBF5C(a4, (uint64_t)v16);
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v15);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(Instance, (uint64_t *)this + 3, a2, (uint64_t *)a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v17, (pxrInternal__aapl__pxrReserved__::VtValue *)v16);
    v14 = sub_20C0A683C((uint64_t *)this + 14);
    (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, pxrInternal__aapl__pxrReserved__::TfToken *, uint64_t (***)(_QWORD, uint64_t)))(*(_QWORD *)v14 + 160))(v14, a2, a3, a4);
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v15);
    sub_20BF4C2D8((uint64_t)v16);
    return sub_20BF4C2D8((uint64_t)v17);
  }
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8SdfLayer13_PrimSetFieldINS_25SdfAbstractDataConstValueEEEvRKNS_7SdfPathERKNS_7TfTokenERKT_PNS_7VtValueEb(this, a2, a3, a4, a5, a6);
}

void sub_20C0EC354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20BF4C2D8((uint64_t)va);
  sub_20BF4C2D8((uint64_t)va1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, int a5)
{
  uint64_t *v10;
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  const char *v25;
  char v26;
  char **v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, 0) & 1) != 0)
  {
    if (!a5)
      goto LABEL_7;
    v10 = a1 + 15;
    if (a1[15]
      || (v22 = "sdf/layer.cpp",
          v23 = "_PrimPushChild",
          v24 = 4216,
          v25 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild(const SdfPath &, const TfToken &, const "
                "T &, BOOL) [T = pxrInternal__aapl__pxrReserved__::TfToken]",
          v26 = 0,
          v12 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v22, "_stateDelegate", 0),
          v10 = a1 + 15,
          (v12 & 1) != 0))
    {
      v11 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_20C0EBD60(v10);
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PushChild(v11, a2, a3, a4);
    }
    else
    {
LABEL_7:
      v13 = a1 + 14;
      v14 = sub_20C0A683C(v13);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v14 + 136))(v28, v14, a2, a3);
      v15 = sub_20C0A683C(v13);
      (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v15 + 168))(v15, a2, a3);
      v22 = 0;
      v23 = 0;
      v24 = 0;
      if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)v28))
        sub_20C0EC740((pxrInternal__aapl__pxrReserved__::VtValue *)v28, (uint64_t **)&v22);
      v16 = v23;
      if ((unint64_t)v23 >= v24)
      {
        v20 = sub_20BFCA068(&v22, (uint64_t *)a4);
      }
      else
      {
        v17 = *(_QWORD *)a4;
        *(_QWORD *)v23 = *(_QWORD *)a4;
        if ((v17 & 7) != 0)
        {
          v18 = (unsigned int *)(v17 & 0xFFFFFFFFFFFFFFF8);
          do
            v19 = __ldxr(v18);
          while (__stxr(v19 + 2, v18));
          if ((v19 & 1) == 0)
            *(_QWORD *)v16 &= 0xFFFFFFFFFFFFFFF8;
        }
        v20 = v16 + 8;
      }
      v23 = v20;
      sub_20C0EC740((pxrInternal__aapl__pxrReserved__::VtValue *)v28, (uint64_t **)&v22);
      v21 = sub_20C0A683C(v13);
      (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, _QWORD *))(*(_QWORD *)v21 + 152))(v21, a2, a3, v28);
      v27 = &v22;
      sub_20BEEB2B8((void ***)&v27);
      sub_20BF4C2D8((uint64_t)v28);
    }
  }
  else
  {
    sub_20C105A88(&v22, 1uLL, (uint64_t *)a4);
    v28[1] = &off_24C526790;
    sub_20C030230(v28, (uint64_t **)&v22);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>(a1, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v28, 0, 1);
    sub_20BF4C2D8((uint64_t)v28);
    v27 = &v22;
    sub_20BEEB2B8((void ***)&v27);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__8SdfLayer14_PrimPushChildINS_7TfTokenEEEvRKNS_7SdfPathERKS2_RKT_b(a1, a2, a3, a4, a5);
}

void sub_20C0EC5DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v10;
  _QWORD *v11;
  _QWORD *v12;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *FieldDefinition;
  _QWORD *FallbackValue;
  unsigned int v15;

  v15 = 0;
  v8 = sub_20C0A683C((uint64_t *)this + 14);
  if (((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, pxrInternal__aapl__pxrReserved__::VtValue *, unsigned int *))(*(_QWORD *)v8 + 128))(v8, a2, a3, a4, &v15) & 1) != 0)return 1;
  if (v15)
  {
    v10 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)*((_QWORD *)this + 10);
    v11 = (_QWORD *)*((_QWORD *)v10 + 116);
    v12 = (_QWORD *)*((_QWORD *)v10 + 117);
    if (v11 != v12)
    {
      while ((*v11 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v11 == v12)
          return 0;
      }
      if (*((_BYTE *)v10 + 72 * v15 + 120)
        && pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)v10 + 72 * v15 + 56), a3))
      {
        FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v10, a3);
        if (a4 && FieldDefinition)
        {
          FallbackValue = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
          sub_20BF4A9BC(a4, FallbackValue);
          return 1;
        }
        if (FieldDefinition)
          return 1;
      }
    }
  }
  return 0;
}

uint64_t **sub_20C0EC740(pxrInternal__aapl__pxrReserved__::VtValue *a1, uint64_t **a2)
{
  uint64_t **result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8[3];
  void **v9;

  if ((sub_20BFD222C(a1) & 1) == 0)
  {
    memset(v8, 0, sizeof(v8));
    sub_20C105B3C(a1, v8);
    v9 = (void **)v8;
    sub_20BEEB2B8(&v9);
  }
  result = sub_20C105C08((uint64_t ***)a1);
  v5 = *result;
  *result = *a2;
  *a2 = v5;
  v6 = result[1];
  result[1] = a2[1];
  a2[1] = v6;
  v7 = result[2];
  result[2] = a2[2];
  a2[2] = v7;
  return result;
}

void sub_20C0EC7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, int a5)
{
  uint64_t *v10;
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *v11;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  const char *v22;
  char v23;
  char **v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, 0) & 1) != 0)
  {
    if (!a5)
      goto LABEL_7;
    v10 = a1 + 15;
    if (a1[15]
      || (v19 = "sdf/layer.cpp",
          v20 = "_PrimPushChild",
          v21 = 4216,
          v22 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPushChild(const SdfPath &, const TfToken &, const "
                "T &, BOOL) [T = pxrInternal__aapl__pxrReserved__::SdfPath]",
          v23 = 0,
          v12 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v19, "_stateDelegate", 0),
          v10 = a1 + 15,
          (v12 & 1) != 0))
    {
      v11 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_20C0EBD60(v10);
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PushChild(v11, a2, a3, a4);
    }
    else
    {
LABEL_7:
      v13 = a1 + 14;
      v14 = sub_20C0A683C(v13);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v14 + 136))(v25, v14, a2, a3);
      v15 = sub_20C0A683C(v13);
      (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v15 + 168))(v15, a2, a3);
      v19 = 0;
      v20 = 0;
      v21 = 0;
      if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)v25))
        sub_20C0E4C5C((pxrInternal__aapl__pxrReserved__::VtValue *)v25, (uint64_t *)&v19);
      v16 = v20;
      if ((unint64_t)v20 >= v21)
      {
        v17 = (char *)sub_20BFD7890((uint64_t *)&v19, a4);
      }
      else
      {
        sub_20BFD6E54(v20, a4);
        sub_20BFD6EA4((_DWORD *)v16 + 1, (_DWORD *)a4 + 1);
        v17 = v16 + 8;
      }
      v20 = v17;
      sub_20C0E4C5C((pxrInternal__aapl__pxrReserved__::VtValue *)v25, (uint64_t *)&v19);
      v18 = sub_20C0A683C(v13);
      (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, _QWORD *))(*(_QWORD *)v18 + 152))(v18, a2, a3, v25);
      v24 = &v19;
      sub_20BFD6F90((void ***)&v24);
      sub_20BF4C2D8((uint64_t)v25);
    }
  }
  else
  {
    sub_20C105C98(&v19, 1uLL, a4);
    v25[1] = &off_24C526910;
    sub_20C030C78(v25, (_DWORD **)&v19);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>(a1, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)v25, 0, 1);
    sub_20BF4C2D8((uint64_t)v25);
    v24 = &v19;
    sub_20BFD6F90((void ***)&v24);
  }
}

{
  __ZN32pxrInternal__aapl__pxrReserved__8SdfLayer14_PrimPushChildINS_7SdfPathEEEvRKS2_RKNS_7TfTokenERKT_b(a1, a2, a3, a4, a5);
}

void sub_20C0ECA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild<pxrInternal__aapl__pxrReserved__::TfToken>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  uint64_t v7;
  uint64_t **v8;
  void ***v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *v13;
  unsigned int *v14;
  unsigned int v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  unint64_t v27;
  const char *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  char v36;
  unint64_t *v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if (a4
    && (*(_QWORD *)(a1 + 120)
     || (v32 = (unint64_t)"sdf/layer.cpp",
         v33 = "_PrimPopChild",
         v34 = 4262,
         v35 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T"
               " = pxrInternal__aapl__pxrReserved__::TfToken]",
         v36 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v32, "_stateDelegate", 0) & 1) != 0)))
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v7 = sub_20C0A683C((uint64_t *)(a1 + 112));
    (*(void (**)(unint64_t **__return_ptr, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v7 + 136))(&v37, v7, a2, a3);
    if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v37))
    {
      if ((v38 & 4) != 0)
        v8 = (uint64_t **)(*(uint64_t (**)(unint64_t **))((v38 & 0xFFFFFFFFFFFFFFF8) + 168))(&v37);
      else
        v8 = (uint64_t **)v37;
    }
    else
    {
      v8 = (uint64_t **)&v32;
    }
    v29 = 0;
    v30 = 0;
    v31 = 0;
    sub_20BFE538C(&v29, *v8, v8[1], v8[1] - *v8);
    v9 = (void ***)sub_20BF4C2D8((uint64_t)&v37);
    v37 = &v32;
    sub_20BEEB2B8(v9);
    if (v29 == v30)
    {
      v32 = (unint64_t)"sdf/layer.cpp";
      v33 = "_PrimPopChild";
      v34 = 4269;
      v35 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T = "
            "pxrInternal__aapl__pxrReserved__::TfToken]";
      v36 = 0;
      v16 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v16)
      {
        v17 = (const char *)(v16 + 16);
        if (*(char *)(v16 + 39) < 0)
          v17 = *(const char **)v17;
      }
      else
      {
        v17 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfLayer::_PrimPopChild failed: field %s is empty vector", v17);
    }
    else
    {
      v10 = *(v30 - 1);
      v32 = v10;
      if ((v10 & 7) != 0)
      {
        v11 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v12 = __ldxr(v11);
        while (__stxr(v12 + 2, v11));
        if ((v12 & 1) == 0)
          v32 = (unint64_t)v11;
      }
      v13 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_20C0EBD60((uint64_t *)(a1 + 120));
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PopChild(v13, a2, a3, (const pxrInternal__aapl__pxrReserved__::TfToken *)&v32);
      if ((v32 & 7) != 0)
      {
        v14 = (unsigned int *)(v32 & 0xFFFFFFFFFFFFFFF8);
        do
          v15 = __ldxr(v14);
        while (__stlxr(v15 - 2, v14));
      }
    }
    v32 = (unint64_t)&v29;
    sub_20BEEB2B8((void ***)&v32);
  }
  else
  {
    v18 = sub_20C0A683C((uint64_t *)(a1 + 112));
    (*(void (**)(unint64_t **__return_ptr, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v18 + 136))(&v37, v18, a2, a3);
    v19 = sub_20C0A683C((uint64_t *)(a1 + 112));
    (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v19 + 168))(v19, a2, a3);
    if ((sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v37) & 1) != 0)
    {
      v29 = 0;
      v30 = 0;
      v31 = 0;
      sub_20C0EC740((pxrInternal__aapl__pxrReserved__::VtValue *)&v37, &v29);
      if (v29 == v30)
      {
        v32 = (unint64_t)"sdf/layer.cpp";
        v33 = "_PrimPopChild";
        v34 = 4286;
        v35 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T "
              "= pxrInternal__aapl__pxrReserved__::TfToken]";
        v36 = 0;
        v27 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
        if (v27)
        {
          v28 = (const char *)(v27 + 16);
          if (*(char *)(v27 + 39) < 0)
            v28 = *(const char **)v28;
        }
        else
        {
          v28 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfLayer::_PrimPopChild failed: %s is empty", v28);
      }
      else
      {
        v20 = v30 - 1;
        v21 = *(v30 - 1);
        if ((v21 & 7) != 0)
        {
          v22 = (unsigned int *)(v21 & 0xFFFFFFFFFFFFFFF8);
          do
            v23 = __ldxr(v22);
          while (__stlxr(v23 - 2, v22));
        }
        v30 = v20;
        sub_20C0EC740((pxrInternal__aapl__pxrReserved__::VtValue *)&v37, &v29);
        v24 = sub_20C0A683C((uint64_t *)(a1 + 112));
        (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, unint64_t **))(*(_QWORD *)v24 + 152))(v24, a2, a3, &v37);
      }
      v32 = (unint64_t)&v29;
      sub_20BEEB2B8((void ***)&v32);
    }
    else
    {
      v32 = (unint64_t)"sdf/layer.cpp";
      v33 = "_PrimPopChild";
      v34 = 4279;
      v35 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T = "
            "pxrInternal__aapl__pxrReserved__::TfToken]";
      v36 = 0;
      v25 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v25)
      {
        v26 = (const char *)(v25 + 16);
        if (*(char *)(v25 + 39) < 0)
          v26 = *(const char **)v26;
      }
      else
      {
        v26 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfLayer::_PrimPopChild failed: field %s is non-vector", v26);
    }
    sub_20BF4C2D8((uint64_t)&v37);
  }
}

void sub_20C0ECE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;

  a14 = (void **)&a11;
  sub_20BEEB2B8(&a14);
  sub_20BF4C2D8(v14 - 56);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild<pxrInternal__aapl__pxrReserved__::SdfPath>(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, int a4)
{
  uint64_t *v7;
  uint64_t v8;
  void ***v9;
  void ***v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *v12;
  unint64_t v13;
  const char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const char *v21;
  unint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  char v31;
  void ***v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  if (a4
    && ((v7 = (uint64_t *)(a1 + 120), *(_QWORD *)(a1 + 120))
     || (v27 = (void **)"sdf/layer.cpp",
         v28 = "_PrimPopChild",
         v29 = 4262,
         v30 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T"
               " = pxrInternal__aapl__pxrReserved__::SdfPath]",
         v31 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v27, "_stateDelegate", 0) & 1) != 0)))
  {
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v8 = sub_20C0A683C((uint64_t *)(a1 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v8 + 136))(&v32, v8, a2, a3);
    if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v32))
    {
      if ((v33 & 4) != 0)
        v9 = (void ***)(*(uint64_t (**)(void ****))((v33 & 0xFFFFFFFFFFFFFFF8) + 168))(&v32);
      else
        v9 = v32;
    }
    else
    {
      v9 = &v27;
    }
    v24 = 0;
    v25 = 0;
    v26 = 0;
    sub_20BFD6D38(&v24, *v9, v9[1], v9[1] - *v9);
    v10 = (void ***)sub_20BF4C2D8((uint64_t)&v32);
    v32 = &v27;
    sub_20BFD6F90(v10);
    v11 = v25;
    if (v24 == v25)
    {
      v27 = (void **)"sdf/layer.cpp";
      v28 = "_PrimPopChild";
      v29 = 4269;
      v30 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T = "
            "pxrInternal__aapl__pxrReserved__::SdfPath]";
      v31 = 0;
      v13 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v13)
      {
        v14 = (const char *)(v13 + 16);
        if (*(char *)(v13 + 39) < 0)
          v14 = *(const char **)v14;
      }
      else
      {
        v14 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfLayer::_PrimPopChild failed: field %s is empty vector", v14);
    }
    else
    {
      sub_20BFD6E54(&v27, (_DWORD *)(v25 - 8));
      sub_20BFD6EA4((_DWORD *)&v27 + 1, (_DWORD *)(v11 - 4));
      v12 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_20C0EBD60(v7);
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::PopChild(v12, a2, a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v27);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v27 + 1);
      sub_20BFD265C(&v27);
    }
    v27 = (void **)&v24;
    sub_20BFD6F90(&v27);
  }
  else
  {
    v15 = (uint64_t *)(a1 + 112);
    v16 = sub_20C0A683C((uint64_t *)(a1 + 112));
    (*(void (**)(void ****__return_ptr, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v16 + 136))(&v32, v16, a2, a3);
    v17 = sub_20C0A683C((uint64_t *)(a1 + 112));
    (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *))(*(_QWORD *)v17 + 168))(v17, a2, a3);
    if ((sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v32) & 1) != 0)
    {
      v24 = 0;
      v25 = 0;
      v26 = 0;
      sub_20C0E4C5C((pxrInternal__aapl__pxrReserved__::VtValue *)&v32, &v24);
      if (v24 == v25)
      {
        v27 = (void **)"sdf/layer.cpp";
        v28 = "_PrimPopChild";
        v29 = 4286;
        v30 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T "
              "= pxrInternal__aapl__pxrReserved__::SdfPath]";
        v31 = 0;
        v22 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
        if (v22)
        {
          v23 = (const char *)(v22 + 16);
          if (*(char *)(v22 + 39) < 0)
            v23 = *(const char **)v23;
        }
        else
        {
          v23 = "";
        }
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfLayer::_PrimPopChild failed: %s is empty", v23);
      }
      else
      {
        v18 = v25 - 8;
        sub_20BFD6F64((uint64_t)&v26, (_DWORD *)(v25 - 8));
        v25 = v18;
        sub_20C0E4C5C((pxrInternal__aapl__pxrReserved__::VtValue *)&v32, &v24);
        v19 = sub_20C0A683C(v15);
        (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, void ****))(*(_QWORD *)v19 + 152))(v19, a2, a3, &v32);
      }
      v27 = (void **)&v24;
      sub_20BFD6F90(&v27);
    }
    else
    {
      v27 = (void **)"sdf/layer.cpp";
      v28 = "_PrimPopChild";
      v29 = 4279;
      v30 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimPopChild(const SdfPath &, const TfToken &, BOOL) [T = "
            "pxrInternal__aapl__pxrReserved__::SdfPath]";
      v31 = 0;
      v20 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v20)
      {
        v21 = (const char *)(v20 + 16);
        if (*(char *)(v20 + 39) < 0)
          v21 = *(const char **)v21;
      }
      else
      {
        v21 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 1, (pxrInternal__aapl__pxrReserved__ *)"SdfLayer::_PrimPopChild failed: field %s is non-vector", v21);
    }
    sub_20BF4C2D8((uint64_t)&v32);
  }
}

void sub_20C0ED2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  uint64_t v14;

  a14 = (void **)&a11;
  sub_20BFD6F90(&a14);
  sub_20BF4C2D8(v14 - 72);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::VtValue>(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5, pxrInternal__aapl__pxrReserved__::VtValue *a6, int a7)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *v13;
  uint64_t v15;
  unint64_t *Instance;
  _BYTE v17[8];
  _BYTE v18[16];
  _QWORD v19[4];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a7
    && (a1[15]
     || (v19[0] = "sdf/layer.cpp",
         v19[1] = "_PrimSetFieldDictValueByKey",
         v19[2] = 4308,
         v19[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey(const SdfPath &, const Tf"
                  "Token &, const TfToken &, const T &, VtValue *, BOOL) [T = pxrInternal__aapl__pxrReserved__::VtValue]",
         v20 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v19, "_stateDelegate", 0) & 1) != 0)))
  {
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_20C0EBD60(a1 + 15);
    return (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetFieldDictValueByKey(v13, a2, a3, a4, a5, a6);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v19);
    v15 = sub_20C0A683C(a1 + 14);
    (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::VtValue *))(*(_QWORD *)v15 + 208))(v15, a2, a3, a4, a5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(Instance, a1 + 3, a2, (uint64_t *)a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v19, (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
    sub_20BF4C2D8((uint64_t)v18);
    sub_20BF4C2D8((uint64_t)v19);
    return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  }
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8SdfLayer27_PrimSetFieldDictValueByKeyINS_7VtValueEEEvRKNS_7SdfPathERKNS_7TfTokenES8_RKT_PS2_b(a1, a2, a3, a4, a5, a6, a7);
}

void sub_20C0ED4CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20BF4C2D8((uint64_t)va1);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t *v13;
  uint64_t v15;
  unint64_t *Instance;
  _BYTE v17[8];
  _BYTE v18[16];
  _QWORD v19[4];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  if (a7
    && (a1[15]
     || (v19[0] = "sdf/layer.cpp",
         v19[1] = "_PrimSetFieldDictValueByKey",
         v19[2] = 4308,
         v19[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey(const SdfPath &, const Tf"
                  "Token &, const TfToken &, const T &, VtValue *, BOOL) [T = pxrInternal__aapl__pxrReserved__::SdfAbstra"
                  "ctDataConstValue]",
         v20 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v19, "_stateDelegate", 0) & 1) != 0)))
  {
    v13 = (uint64_t *)sub_20C0EBD60(a1 + 15);
    return (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::SetFieldDictValueByKey(v13, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v19);
    v15 = sub_20C0A683C(a1 + 14);
    (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, uint64_t, uint64_t))(*(_QWORD *)v15 + 216))(v15, a2, a3, a4, a5);
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeField(Instance, a1 + 3, a2, (uint64_t *)a3, (pxrInternal__aapl__pxrReserved__::VtValue *)v19, (pxrInternal__aapl__pxrReserved__::VtValue *)v18);
    sub_20BF4C2D8((uint64_t)v18);
    sub_20BF4C2D8((uint64_t)v19);
    return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v17);
  }
}

{
  return __ZN32pxrInternal__aapl__pxrReserved__8SdfLayer27_PrimSetFieldDictValueByKeyINS_25SdfAbstractDataConstValueEEEvRKNS_7SdfPathERKNS_7TfTokenES8_RKT_PNS_7VtValueEb(a1, a2, a3, a4, a5, a6, a7);
}

void sub_20C0ED69C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20BF4C2D8((uint64_t)va1);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

void sub_20C0ED6DC()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_VALIDATE_AUTHORING))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::SDF_LAYER_VALIDATE_AUTHORING);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_VALIDATE_AUTHORING);
  }
}

void sub_20C0ED720()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_INCLUDE_DETACHED))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::SDF_LAYER_INCLUDE_DETACHED);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_INCLUDE_DETACHED);
  }
}

void sub_20C0ED764()
{
  if (!atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_EXCLUDE_DETACHED))
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::SDF_LAYER_EXCLUDE_DETACHED);
    atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_EXCLUDE_DETACHED);
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SdfLayer(uint64_t a1, uint64_t *a2, uint64_t a3, char *a4, __int128 *a5, const void ***a6, char a7)
{
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v17;
  void *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  _QWORD *v22;
  BOOL v23;
  _BYTE *v24;
  const char *v25;
  char *v26;
  void *v27;
  char *v28;
  void *__p[2];
  uint64_t v31;
  void *__dst[2];
  uint64_t v33;

  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_24C528618;
  sub_20C0E82E8((_QWORD *)(a1 + 24), a1);
  *(_QWORD *)(a1 + 40) = *a2;
  v14 = a2[1];
  *(_QWORD *)(a1 + 48) = v14;
  if (v14)
  {
    v15 = (unsigned int *)(v14 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  sub_20BDEBF8C((uint64_t *)(a1 + 56), a6);
  v17 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(a2);
  *(_QWORD *)(a1 + 80) = pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetSchema(v17);
  sub_20C0E82E8(__dst, a1);
  pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Sdf_IdentityRegistry(a1 + 88, __dst);
  v18 = __dst[1];
  if (__dst[1])
  {
    v19 = (unsigned int *)((char *)__dst[1] + 8);
    do
    {
      v20 = __ldxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
  }
  sub_20C0EDBEC(a2, (const std::string *)a3, (uint64_t)a6, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 112));
  pxrInternal__aapl__pxrReserved__::SdfSimpleLayerStateDelegate::New(__dst);
  *(void **)(a1 + 120) = __dst[0];
  __dst[0] = 0;
  sub_20C102F9C((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__dst);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::WorkDispatcher((pxrInternal__aapl__pxrReserved__::WorkDispatcher *)(a1 + 128));
  *(_WORD *)(a1 + 465) = 0;
  *(_BYTE *)(a1 + 467) = 0;
  v22 = operator new(0xA0uLL);
  v22[19] = 0;
  *(_OWORD *)v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  *((_OWORD *)v22 + 2) = 0u;
  *((_OWORD *)v22 + 3) = 0u;
  *((_OWORD *)v22 + 4) = 0u;
  *((_OWORD *)v22 + 5) = 0u;
  *((_OWORD *)v22 + 6) = 0u;
  *((_OWORD *)v22 + 7) = 0u;
  *((_OWORD *)v22 + 8) = 0u;
  *(_QWORD *)(a1 + 472) = v22;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_WORD *)(a1 + 513) = 257;
  if ((a7 & 1) != 0)
  {
    v23 = 1;
  }
  else
  {
    v24 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_VALIDATE_AUTHORING);
    if (!v24)
    {
      pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<BOOL>((uint64_t)&pxrInternal__aapl__pxrReserved__::SDF_LAYER_VALIDATE_AUTHORING);
      v24 = (_BYTE *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_VALIDATE_AUTHORING);
    }
    v23 = *v24 != 0;
  }
  *(_BYTE *)(a1 + 515) = v23;
  *(_BYTE *)(a1 + 516) = 0;
  if (sub_20BFCE180(3))
  {
    if (*(char *)(a3 + 23) >= 0)
      v27 = (void *)a3;
    else
      v27 = *(void **)a3;
    if (a4[23] >= 0)
      v28 = a4;
    else
      v28 = *(char **)a4;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::SdfLayer('%s', '%s')\n", v25, v26, v27, v28, a1 + 56);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(a3))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_ComputeAnonLayerIdentifier(a3, a1, (uint64_t)__dst);
  }
  else if (*(char *)(a3 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a3;
    v33 = *(_QWORD *)(a3 + 16);
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 464));
  __p[0] = 0;
  __p[1] = 0;
  v31 = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayer::_InitializeFromIdentifier(a1, (uint64_t)__dst, (void **)a4, (uint64_t *)__p, a5);
  if (SHIBYTE(v31) < 0)
    operator delete(__p[0]);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1);
  if (SHIBYTE(v33) < 0)
    operator delete(__dst[0]);
  return a1;
}

void sub_20C0EDA74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  unsigned int **v24;
  pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry *v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v26;
  pxrInternal__aapl__pxrReserved__::WorkDispatcher *v27;
  uint64_t v29;
  const void *v30;
  unsigned int *v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int *v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int v38;

  sub_20BF49F14((_QWORD ***)(v23 + 496), 0);
  sub_20BF4C2D8(v23 + 480);
  v29 = *(_QWORD *)(v23 + 472);
  *(_QWORD *)(v23 + 472) = 0;
  if (v29)
    sub_20C102FF4(v23 + 472, v29);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher(v27);
  sub_20C102FC8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v23 + 120));
  sub_20C0EA270(v26);
  pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::~Sdf_IdentityRegistry(v25);
  sub_20BDE9D48(a11, *(_QWORD **)(v23 + 64));
  v31 = *(unsigned int **)(v23 + 48);
  if (v31)
  {
    v32 = v31 + 2;
    do
    {
      v33 = __ldxr(v32);
      v34 = v33 - 1;
    }
    while (__stlxr(v34, v32));
    if (!v34)
      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
  }
  v35 = *(unsigned int **)(v23 + 32);
  if (v35)
  {
    v36 = v35 + 2;
    do
    {
      v37 = __ldxr(v36);
      v38 = v37 - 1;
    }
    while (__stlxr(v38, v36));
    if (!v38)
      (*(void (**)(unsigned int *))(*(_QWORD *)v35 + 8))(v35);
  }
  sub_20BEBCE60(v24, v30);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase((pxrInternal__aapl__pxrReserved__::TfRefBase *)v23);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C0EDBEC@<X0>(uint64_t *a1@<X0>, const std::string *a2@<X1>, uint64_t a3@<X2>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a4@<X8>)
{
  _BOOL4 IsIncludedByDetachedLayerRules;
  uint64_t v8;

  IsIncludedByDetachedLayerRules = pxrInternal__aapl__pxrReserved__::SdfLayer::IsIncludedByDetachedLayerRules(a2);
  v8 = sub_20BFCF6F4(a1);
  if (IsIncludedByDetachedLayerRules)
    return pxrInternal__aapl__pxrReserved__::SdfFileFormat::InitDetachedData(v8, a4);
  else
    return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 40))(v8, a3);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_InitializeFromIdentifier(uint64_t a1, uint64_t a2, void **a3, uint64_t *a4, __int128 *a5)
{
  std::string *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  std::string::size_type size;
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  std::string::size_type v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;
  std::string *p_dst;
  unint64_t *Instance;
  unint64_t *v20;
  uint64_t v21;
  _QWORD v22[4];
  char v23;
  void *__p[2];
  uint64_t v25;
  std::string __dst;
  uint64_t v27;

  v6 = pxrInternal__aapl__pxrReserved__::Sdf_ComputeAssetInfoFromIdentifier(a2, a3, a5, a4);
  v27 = (uint64_t)v6;
  if (v6)
  {
    if ((pxrInternal__aapl__pxrReserved__::operator==((unsigned __int8 *)v6, *(unsigned __int8 **)(a1 + 472)) & 1) != 0)
    {
LABEL_47:
      v21 = v27;
      v27 = 0;
      if (v21)
        sub_20C102FF4((uint64_t)&v27, v21);
      return;
    }
    v7 = *(_QWORD *)(a1 + 472);
    if (*(char *)(v7 + 23) < 0)
    {
      sub_20BDDBFAC(&__dst, *(void **)v7, *(_QWORD *)(v7 + 8));
      v7 = *(_QWORD *)(a1 + 472);
    }
    else
    {
      v8 = *(_OWORD *)v7;
      __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v8;
    }
    if (*(char *)(v7 + 47) < 0)
    {
      sub_20BDDBFAC(__p, *(void **)(v7 + 24), *(_QWORD *)(v7 + 32));
      v7 = *(_QWORD *)(a1 + 472);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v7 + 24);
      v25 = *(_QWORD *)(v7 + 40);
    }
    *(_QWORD *)(a1 + 472) = v27;
    v27 = v7;
    if (*(_QWORD *)(a1 + 120)
      || (v22[0] = "sdf/layer.cpp",
          v22[1] = "_InitializeFromIdentifier",
          v22[2] = 1480,
          v22[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_InitializeFromIdentifier(const string &, const stri"
                   "ng &, const string &, const ArAssetInfo &)",
          v23 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v22, "_stateDelegate", 0) & 1) != 0))
    {
      v9 = sub_20C0EBD60((uint64_t *)(a1 + 120));
      pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::_SetLayer(v9, a1 + 24);
    }
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __dst.__r_.__value_.__l.__size_;
    v11 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load(&qword_254985B38);
    if (!size)
    {
      if (!v11)
        v11 = sub_20C10317C(&qword_254985B38);
      pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Insert(v11, (uint64_t *)(a1 + 24), *(_QWORD *)(a1 + 472));
      goto LABEL_43;
    }
    if (!v11)
      v11 = sub_20C10317C(&qword_254985B38);
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Update(v11, (uint64_t *)(a1 + 24), v27, *(_QWORD *)(a1 + 472));
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v22);
    v12 = *(unsigned __int8 **)(a1 + 472);
    v13 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      v14 = __dst.__r_.__value_.__l.__size_;
    v15 = (unsigned __int8 *)v12[23];
    v16 = (char)v15;
    if ((char)v15 < 0)
      v15 = (unsigned __int8 *)*((_QWORD *)v12 + 1);
    if ((unsigned __int8 *)v14 != v15)
      goto LABEL_35;
    if (v16 >= 0)
      v17 = *(unsigned __int8 **)(a1 + 472);
    else
      v17 = *(unsigned __int8 **)v12;
    if ((*((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__dst.__r_.__value_.__l.__data_, v17, __dst.__r_.__value_.__l.__size_))
      {
LABEL_35:
        Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
        if (!Instance)
          Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
        pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeLayerIdentifier(Instance, (uint64_t *)(a1 + 24), &__dst);
        v12 = *(unsigned __int8 **)(a1 + 472);
      }
    }
    else if (*((_BYTE *)&__dst.__r_.__value_.__s + 23))
    {
      p_dst = &__dst;
      while (p_dst->__r_.__value_.__s.__data_[0] == *v17)
      {
        p_dst = (std::string *)((char *)p_dst + 1);
        ++v17;
        if (!--v13)
          goto LABEL_38;
      }
      goto LABEL_35;
    }
LABEL_38:
    if (sub_20C0F2904((unsigned __int8 *)__p, v12 + 24))
    {
      v20 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
      if (!v20)
        v20 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
      pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeLayerResolvedPath(v20, (uint64_t *)(a1 + 24));
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v22);
LABEL_43:
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    goto LABEL_47;
  }
}

void sub_20C0EDEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v22;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 - 41) < 0)
    operator delete(*(void **)(v20 - 64));
  v22 = *(_QWORD *)(v20 - 40);
  *(_QWORD *)(v20 - 40) = 0;
  if (v22)
    sub_20C102FF4(v20 - 40, v22);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD v4[4];
  char v5;

  v2 = (uint64_t *)((char *)this + 120);
  if (*((_QWORD *)this + 15)
    || (v4[0] = "sdf/layer.cpp",
        v4[1] = "_MarkCurrentStateAsClean",
        v4[2] = 3028,
        v4[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean() const",
        v5 = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v4, "_stateDelegate", 0) & 1) != 0))
  {
    v3 = sub_20C0EBD60(v2);
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdateLastDirtinessState(this))
  {
    v4[0] = &unk_24C529600;
    sub_20BFD0074(v4, (uint64_t *)this + 3);
    pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged::~LayerDirtinessChanged((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged *)v4);
  }
}

void sub_20C0EE020(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged::~LayerDirtinessChanged((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDirtinessChanged *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::~SdfLayer(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const char *v2;
  char *v3;
  uint64_t *v4;
  char *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v9;
  uint64_t **v10;
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  void *__p[2];
  char v24;
  __int16 v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v26;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v27;

  *(_QWORD *)this = off_24C528618;
  if (sub_20BFCE180(3))
  {
    v4 = (uint64_t *)*((_QWORD *)this + 59);
    if (*((char *)v4 + 23) < 0)
      v4 = (uint64_t *)*v4;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::~SdfLayer('%s')\n", v2, v3, v4);
  }
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_GetMutedPath(this, (uint64_t)__p);
    v26 = 0;
    v5 = (char *)atomic_load(&qword_254985B28);
    if (!v5)
      v5 = sub_20BF4742C(&qword_254985B28);
    std::mutex::lock((std::mutex *)v5);
    v6 = atomic_load(&qword_254985B30);
    if (!v6)
      v6 = sub_20C10308C(&qword_254985B30);
    v7 = (uint64_t *)sub_20BDEEBA4(v6, (const void **)__p);
    v8 = atomic_load(&qword_254985B30);
    if (!v8)
      v8 = sub_20C10308C(&qword_254985B30);
    if ((uint64_t *)(v8 + 8) != v7)
    {
      v9 = v26;
      v26 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v7[7];
      v27 = 0;
      v7[7] = (uint64_t)v9;
      sub_20BF1D8F4((_DWORD)v7 + 56, 0);
      sub_20C0EA270(&v27);
      v10 = (uint64_t **)atomic_load(&qword_254985B30);
      if (!v10)
        v10 = (uint64_t **)sub_20C10308C(&qword_254985B30);
      sub_20BE10B80(v10, v7);
      sub_20C103140((uint64_t)(v7 + 4));
      operator delete(v7);
    }
    std::mutex::unlock((std::mutex *)v5);
    sub_20C0EA270(&v26);
    if (v24 < 0)
      operator delete(__p[0]);
  }
  sub_20C0EE45C();
  __p[0] = 0;
  v25 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)__p, (unint64_t *)&qword_254985B50, 1);
  v11 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load(&qword_254985B38);
  if (!v11)
    v11 = sub_20C10317C(&qword_254985B38);
  v12 = sub_20BFCF650((uint64_t *)this + 3);
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Erase(v11, (uint64_t *)this + 3, *(_QWORD *)(v12 + 472));
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)__p);
  sub_20BF49F14((_QWORD ***)this + 62, 0);
  sub_20BF4C2D8((uint64_t)this + 480);
  v13 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v13)
    sub_20C102FF4((uint64_t)this + 472, v13);
  pxrInternal__aapl__pxrReserved__::WorkDispatcher::~WorkDispatcher((pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)this + 128));
  sub_20C102FC8((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 15);
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)this + 14);
  pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::~Sdf_IdentityRegistry((pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)this + 88));
  sub_20BDE9D48((uint64_t)this + 56, *((_QWORD **)this + 8));
  v15 = (unsigned int *)*((_QWORD *)this + 6);
  if (v15)
  {
    v16 = v15 + 2;
    do
    {
      v17 = __ldxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 8))(v15);
  }
  v19 = (unsigned int *)*((_QWORD *)this + 4);
  if (v19)
  {
    v20 = v19 + 2;
    do
    {
      v21 = __ldxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(unsigned int *))(*(_QWORD *)v19 + 8))(v19);
  }
  sub_20BEBCE60((unsigned int **)this + 2, v14);
  pxrInternal__aapl__pxrReserved__::TfRefBase::~TfRefBase(this);
}

{
  void *v1;

  pxrInternal__aapl__pxrReserved__::SdfLayer::~SdfLayer(this);
  operator delete(v1);
}

void sub_20C0EE2DC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_20BDC12F4(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetIdentifier(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((_QWORD *)this + 59);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  unint64_t v2;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  void *__p[2];
  char v8;

  v2 = atomic_load(&qword_25473B500);
  if (*((_QWORD *)this + 63) != v2)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_GetMutedPath(this, (uint64_t)__p);
    v4 = (char *)atomic_load(&qword_254985B28);
    if (!v4)
      v4 = sub_20BF4742C(&qword_254985B28);
    std::mutex::lock((std::mutex *)v4);
    v5 = atomic_load(&qword_25473B500);
    *((_QWORD *)this + 63) = v5;
    v6 = atomic_load(&qword_254985B48);
    if (!v6)
      v6 = sub_20C1047AC(&qword_254985B48);
    *((_BYTE *)this + 512) = sub_20BDDDEF8(v6, (const void **)__p) != 0;
    std::mutex::unlock((std::mutex *)v4);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return *((unsigned __int8 *)this + 512);
}

void sub_20C0EE3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::mutex *v15;

  std::mutex::unlock(v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *pxrInternal__aapl__pxrReserved__::SdfLayer::_GetMutedPath@<X0>(_QWORD *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  __int128 v7;

  v2 = this[59];
  v3 = (__int128 *)(v2 + 120);
  if (*(char *)(v2 + 143) < 0)
    v4 = *(_QWORD *)(v2 + 128);
  else
    v4 = *(unsigned __int8 *)(v2 + 143);
  v5 = v4 == 0;
  v6 = 120;
  if (v5)
  {
    v6 = 0;
    v3 = (__int128 *)this[59];
  }
  if (*((char *)v3 + 23) < 0)
    return sub_20BDDBFAC((_BYTE *)a2, *(void **)(v2 + v6), *((_QWORD *)v3 + 1));
  v7 = *v3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)v3 + 2);
  *(_OWORD *)a2 = v7;
  return this;
}

void sub_20C0EE45C()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_254985B58);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_254985B58))
    {
      __dmb(0xBu);
      qword_254985B50 = 0;
      __cxa_guard_release(&qword_254985B58);
    }
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormat(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return (uint64_t)this + 40;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileFormatArguments(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return (uint64_t)this + 56;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNewWithFormat@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;

  v3 = sub_20BFCF6F4(a1);
  return pxrInternal__aapl__pxrReserved__::SdfFileFormat::NewLayer(v3, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_FinishInitialization(pxrInternal__aapl__pxrReserved__::SdfLayer *this, __int16 a2)
{
  *(_WORD *)((char *)this + 465) = a2 | 0x100;
  atomic_store(1u, (unsigned __int8 *)this + 464);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_WaitForInitializationAndCheckIfSuccessful(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  unsigned __int8 v2;

  while (1)
  {
    v2 = atomic_load((unsigned __int8 *)this + 464);
    if ((v2 & 1) != 0)
      break;
    sched_yield();
  }
  if (!*((_BYTE *)this + 466))
    sub_20C10199C();
  return *((unsigned __int8 *)this + 465);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous@<X0>(const std::string *a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t *a3@<X8>)
{
  std::string::size_type size;
  unsigned int *v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t (*v15)(uint64_t *);
  char v16;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v17;
  unsigned int *v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t (*v26)(uint64_t *);
  char v27;
  uint64_t result;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  __int128 v32;
  uint64_t v33;
  const char *v34;
  char v35;
  std::string __p;
  __int128 v37;

  v37 = 0uLL;
  pxrInternal__aapl__pxrReserved__::TfStringGetSuffix(a1, 46, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size)
  {
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)&__p, a2, (uint64_t *)&v32);
    v7 = (unsigned int *)*((_QWORD *)&v37 + 1);
    v37 = v32;
    *((_QWORD *)&v32 + 1) = 0;
    if (v7)
    {
      v8 = v7 + 2;
      do
      {
        v9 = __ldxr(v8);
        v10 = v9 - 1;
      }
      while (__stlxr(v10, v8));
      if (!v10)
        (*(void (**)(unsigned int *))(*(_QWORD *)v7 + 8))(v7);
      v11 = *((_QWORD *)&v32 + 1);
      *(_QWORD *)&v32 = 0;
      if (*((_QWORD *)&v32 + 1))
      {
        v12 = (unsigned int *)(*((_QWORD *)&v32 + 1) + 8);
        do
        {
          v13 = __ldxr(v12);
          v14 = v13 - 1;
        }
        while (__stlxr(v14, v12));
        if (!v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      }
    }
  }
  v15 = sub_20C0E9DAC(&v37);
  if (!(v16 & 1 | (unint64_t)v15))
  {
    v17 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
    if (!v17)
      v17 = sub_20C103260(&pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens);
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindById(v17, (uint64_t *)&v32);
    v18 = (unsigned int *)*((_QWORD *)&v37 + 1);
    v37 = v32;
    *((_QWORD *)&v32 + 1) = 0;
    if (v18)
    {
      v19 = v18 + 2;
      do
      {
        v20 = __ldxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(unsigned int *))(*(_QWORD *)v18 + 8))(v18);
      v22 = *((_QWORD *)&v32 + 1);
      *(_QWORD *)&v32 = 0;
      if (*((_QWORD *)&v32 + 1))
      {
        v23 = (unsigned int *)(*((_QWORD *)&v32 + 1) + 8);
        do
        {
          v24 = __ldxr(v23);
          v25 = v24 - 1;
        }
        while (__stlxr(v25, v23));
        if (!v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
      }
    }
  }
  v26 = sub_20C0E9DAC(&v37);
  if (v27 & 1 | (unint64_t)v26)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateAnonymousWithFormat((uint64_t *)&v37, (uint64_t)a1, a3);
  }
  else
  {
    *(_QWORD *)&v32 = "sdf/layer.cpp";
    *((_QWORD *)&v32 + 1) = "CreateAnonymous";
    v33 = 359;
    v34 = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(const string &, const FileFo"
          "rmatArguments &)";
    v35 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v32, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot determine file format for anonymous SdfLayer");
    *a3 = 0;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  result = *((_QWORD *)&v37 + 1);
  if (*((_QWORD *)&v37 + 1))
  {
    v29 = (unsigned int *)(*((_QWORD *)&v37 + 1) + 8);
    do
    {
      v30 = __ldxr(v29);
      v31 = v30 - 1;
    }
    while (__stlxr(v31, v29));
    if (!v31)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C0EE7AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int v24;

  if (a19 < 0)
    operator delete(__p);
  v21 = *(unsigned int **)(v19 - 40);
  if (v21)
  {
    v22 = v21 + 2;
    do
    {
      v23 = __ldxr(v22);
      v24 = v23 - 1;
    }
    while (__stlxr(v24, v22));
    if (!v24)
      (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
  }
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateAnonymousWithFormat(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  std::string v12;
  _QWORD v13[3];
  __int16 v14;
  void *v15[2];
  void *v16[2];
  __int128 v17;
  void *__p[2];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = sub_20BFCF6F4(a1);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6))
  {
    v15[0] = "sdf/layer.cpp";
    v15[1] = "_CreateAnonymousWithFormat";
    v16[0] = (void *)387;
    v16[1] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateAnonymousWithFormat(const SdfFileF"
             "ormatConstPtr &, const std::string &, const FileFormatArguments &)";
    LOBYTE(v17) = 0;
    v7 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(a1);
    v8 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v7) & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create anonymous layer: creating package %s layer is not allowed through this API.", v9);
    *a3 = 0;
  }
  else
  {
    sub_20C0EE45C();
    v13[0] = 0;
    v14 = 0;
    tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v13, (unint64_t *)&qword_254985B50, 1);
    pxrInternal__aapl__pxrReserved__::Sdf_GetAnonLayerIdentifierTemplate(a2, &v12);
    v20 = 0;
    *(_OWORD *)__p = 0u;
    v19 = 0u;
    *(_OWORD *)v16 = 0u;
    v17 = 0u;
    *(_OWORD *)v15 = 0u;
    v10 = sub_20BFCF6F4(a1);
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::NewLayer(v10, a3);
    sub_20BF4C2D8((uint64_t)&v19 + 8);
    if (SBYTE7(v19) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v17) < 0)
      operator delete(v16[1]);
    if (SHIBYTE(v16[0]) < 0)
      operator delete(v15[0]);
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    v11 = sub_20C0EEAF8(a3);
    *(_WORD *)(v11 + 465) = 257;
    atomic_store(1u, (unsigned __int8 *)(v11 + 464));
    sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v13);
  }
}

void sub_20C0EE9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v27;

  sub_20C103234(v27);
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&a23);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  _QWORD v8[4];
  char v9;

  v6 = sub_20C0E9DAC(a2);
  if (v7 & 1 | (unint64_t)v6)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateAnonymousWithFormat(a2, a1, a3);
  }
  else
  {
    v8[0] = "sdf/layer.cpp";
    v8[1] = "CreateAnonymous";
    v8[2] = 372;
    v8[3] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous(const string &, const SdfF"
            "ileFormatConstPtr &, const FileFormatArguments &)";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v8, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid file format for anonymous SdfLayer");
    *a3 = 0;
  }
}

uint64_t sub_20C0EEAF8(uint64_t *a1)
{
  uint64_t result;
  char *v2;
  _QWORD v3[4];
  char v4;

  result = *a1;
  if (!result)
  {
    v2 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", 47);
    v3[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/refPtr.h", (uint64_t)v2, 0x2Fu);
    v3[1] = "operator->";
    v3[2] = 953;
    v3[3] = "T *pxrInternal__aapl__pxrReserved__::TfRefPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>::operator->() cons"
            "t [T = pxrInternal__aapl__pxrReserved__::SdfLayer]";
    v4 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v3, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAF6144 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::IsAnonymous(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(*((_QWORD *)this + 59));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  const char *v7;
  char *v8;
  void **v9;
  uint64_t result;
  unsigned int *v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  char v17;

  if (sub_20BFCE180(3))
  {
    v6 = *(char *)(a1 + 23) >= 0 ? a1 : *(_QWORD *)a1;
    sub_20C0EECC0(a2);
    v9 = v17 >= 0 ? &__p : (void **)__p;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::CreateNew('%s', '%s')\n", v7, v8, v6, v9);
    if (v17 < 0)
      operator delete(__p);
  }
  v14 = 0;
  v15 = 0;
  pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(&v14, a1, a2, 1, a3);
  result = v15;
  if (v15)
  {
    v11 = (unsigned int *)(v15 + 8);
    do
    {
      v12 = __ldxr(v11);
      v13 = v12 - 1;
    }
    while (__stlxr(v13, v11));
    if (!v13)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C0EEC70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0EECC0(_QWORD *a1)
{
  _QWORD v3[11];
  char v4;
  uint64_t v5;

  sub_20BDDE5E0((uint64_t)v3);
  sub_20C1032E8(v3, a1);
  std::stringbuf::str();
  v3[0] = *MEMORY[0x24BEDB800];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB800] + 24);
  v3[1] = MEMORY[0x24BEDB848] + 16;
  if (v4 < 0)
    operator delete((void *)v3[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x212B92EB0](&v5);
}

void sub_20C0EED74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BDDE6CC((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(uint64_t *a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  uint64_t NewLayerWithIdentifier;
  uint64_t *Resolver;
  unint64_t *Instance;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  __int128 *v18;
  __int128 v19;
  unint64_t *v20;
  _QWORD *v21;
  _QWORD *v22;
  std::string::size_type size;
  uint64_t (*v24)(uint64_t *);
  char v25;
  unsigned int *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t (*v34)(uint64_t *);
  char v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v39;
  unint64_t v40;
  const char *v41;
  const char *v42;
  std::string *v43;
  std::string *p_p;
  std::string *v45;
  pxrInternal__aapl__pxrReserved__::TfToken *v46;
  uint64_t *EmptyString;
  uint64_t v48;
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *v49;
  uint64_t (*v50)(uint64_t *);
  char v51;
  uint64_t v52;
  _QWORD *v53;
  unsigned int *v54;
  unsigned int v55;
  unsigned int v56;
  unint64_t v57;
  std::string *v58;
  uint64_t v59;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v60;
  char v61;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v62;
  uint64_t v63;
  std::string v64;
  __int16 v65;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v66;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v67;
  _QWORD *v68;
  unint64_t v69;
  _QWORD *v70;
  std::string v71;
  std::string __p;
  std::string v73;
  _BYTE __str[32];
  __int128 v75;
  void *v76[2];
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  _QWORD v84[3];

  v84[2] = *MEMORY[0x24BDAC8D0];
  memset(&v73, 0, sizeof(v73));
  NewLayerWithIdentifier = pxrInternal__aapl__pxrReserved__::Sdf_CanCreateNewLayerWithIdentifier(a2, (uint64_t)&v73);
  if ((NewLayerWithIdentifier & 1) != 0)
  {
    Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)NewLayerWithIdentifier);
    v79 = 0u;
    v80 = 0u;
    v81 = 0u;
    v82 = 0u;
    v84[1] = 0;
    v83 = 0;
    memset(&__p, 0, sizeof(__p));
    memset(&v71, 0, sizeof(v71));
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v69);
    memset(&v64, 0, sizeof(v64));
    pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifierForNewAsset((uint64_t)Resolver);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    __p = *(std::string *)__str;
    __str[23] = 0;
    __str[0] = 0;
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    pxrInternal__aapl__pxrReserved__::ArResolver::ResolveForNewAsset((uint64_t)Resolver);
    std::string::operator=(&v71, (const std::string *)__str);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v13 = v69;
    v14 = atomic_load(Instance + 18);
    if (v13 < v14
      && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v69, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
    {
      memset(__str, 0, 24);
      v15 = sub_20BEC5244(&v69, 0);
      v16 = sub_20BEDAF68();
      if (v15 != (_QWORD *)v16)
      {
        v17 = *(_QWORD *)&__str[8];
        do
        {
          v18 = (__int128 *)(v15 + 7);
          if (v17 >= *(_QWORD *)&__str[16])
          {
            v17 = sub_20BE4EE50((uint64_t *)__str, v18);
          }
          else
          {
            if (*((char *)v15 + 79) < 0)
            {
              sub_20BDDBFAC((_BYTE *)v17, (void *)v15[7], v15[8]);
            }
            else
            {
              v19 = *v18;
              *(_QWORD *)(v17 + 16) = v15[9];
              *(_OWORD *)v17 = v19;
            }
            v17 += 24;
          }
          *(_QWORD *)&__str[8] = v17;
          v15 = (_QWORD *)v15[1];
        }
        while (v15 != (_QWORD *)v16);
      }
      pxrInternal__aapl__pxrReserved__::TfStringJoin(", ", (std::string **)__str, &v64);
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v73.__r_.__value_.__l.__data_);
      v73 = v64;
      v20 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      if (!v20)
        v20 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
      v21 = sub_20BEC5244(&v69, 0);
      LOBYTE(v67) = 0;
      v22 = (_QWORD *)sub_20BEB5B80(v20 + 19, &v67);
      if (v22 != v21)
        pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr::EraseRange(v20, v21, v22);
      v64.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      sub_20BDE5038((void ***)&v64);
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v69);
    size = HIBYTE(v71.__r_.__value_.__r.__words[2]);
    if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v71.__r_.__value_.__l.__size_;
    if (!size)
    {
      *(_QWORD *)__str = "sdf/layer.cpp";
      *(_QWORD *)&__str[8] = "_CreateNew";
      *(_QWORD *)&__str[16] = 566;
      *(_QWORD *)&__str[24] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(SdfFileFormat"
                              "ConstPtr, const string &, const FileFormatArguments &, BOOL)";
      LOBYTE(v75) = 0;
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v73.__r_.__value_.__l.__size_)
          v45 = (std::string *)v73.__r_.__value_.__r.__words[0];
        else
          v45 = (std::string *)"failed to compute path for new layer";
      }
      else
      {
        v45 = &v73;
        if (!*((_BYTE *)&v73.__r_.__value_.__s + 23))
          v45 = (std::string *)"failed to compute path for new layer";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__str, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create new layer '%s': %s", (const char *)p_p, (const char *)v45);
      goto LABEL_96;
    }
    v24 = sub_20C0E9DAC(a1);
    if (!(v25 & 1 | (unint64_t)v24))
    {
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)&v71, a3, (uint64_t *)__str);
      v26 = (unsigned int *)a1[1];
      *(_OWORD *)a1 = *(_OWORD *)__str;
      *(_QWORD *)&__str[8] = 0;
      if (v26)
      {
        v27 = v26 + 2;
        do
        {
          v28 = __ldxr(v27);
          v29 = v28 - 1;
        }
        while (__stlxr(v29, v27));
        if (!v29)
          (*(void (**)(unsigned int *))(*(_QWORD *)v26 + 8))(v26);
        v30 = *(_QWORD *)&__str[8];
        *(_QWORD *)__str = 0;
        if (*(_QWORD *)&__str[8])
        {
          v31 = (unsigned int *)(*(_QWORD *)&__str[8] + 8);
          do
          {
            v32 = __ldxr(v31);
            v33 = v32 - 1;
          }
          while (__stlxr(v33, v31));
          if (!v33)
            (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        }
      }
      v34 = sub_20C0E9DAC(a1);
      if (!(v35 & 1 | (unint64_t)v34))
      {
        *(_QWORD *)__str = "sdf/layer.cpp";
        *(_QWORD *)&__str[8] = "_CreateNew";
        *(_QWORD *)&__str[16] = 575;
        *(_QWORD *)&__str[24] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(SdfFileForm"
                                "atConstPtr, const string &, const FileFormatArguments &, BOOL)";
        LOBYTE(v75) = 0;
        if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__str, "fileFormat", 0) & 1) == 0)
        {
LABEL_96:
          *a5 = 0;
LABEL_110:
          if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v71.__r_.__value_.__l.__data_);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_20BF4C2D8((uint64_t)v84);
          if (SHIBYTE(v83) < 0)
            operator delete((void *)v82);
          if (SHIBYTE(v81) < 0)
            operator delete(*((void **)&v80 + 1));
          if (SBYTE7(v80) < 0)
            operator delete((void *)v79);
          goto LABEL_120;
        }
      }
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_IsPackageOrPackagedLayer(a1, a2))
    {
      *(_QWORD *)__str = "sdf/layer.cpp";
      *(_QWORD *)&__str[8] = "_CreateNew";
      *(_QWORD *)&__str[16] = 586;
      *(_QWORD *)&__str[24] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(SdfFileFormat"
                              "ConstPtr, const string &, const FileFormatArguments &, BOOL)";
      LOBYTE(v75) = 0;
      if (*(char *)(a2 + 23) >= 0)
        v36 = (const char *)a2;
      else
        v36 = *(const char **)a2;
      v37 = sub_20BFCF6F4(a1);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
        v38 = "package";
      else
        v38 = "packaged";
      v39 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(a1);
      v40 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v39) & 0xFFFFFFFFFFFFFFF8;
      if (v40)
      {
        v41 = (const char *)(v40 + 16);
        if (*(char *)(v40 + 39) < 0)
          v41 = *(const char **)v41;
      }
      else
      {
        v41 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__str, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create new layer '%s': creating %s %s layer is not allowed through this API.", v36, v38, v41);
      goto LABEL_96;
    }
    sub_20BDEBF8C((uint64_t *)&v69, (const void ***)a3);
    sub_20C0EFA10(&__p, a1, (uint64_t)&v69);
    v46 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if (!v46)
      v46 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EA3A4(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if ((*(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v46 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v46);
    v48 = sub_20BDEEBA4((uint64_t)&v69, (const void **)EmptyString);
    if (&v70 != (_QWORD **)v48)
    {
      sub_20BDEC2F8(__str, (__int128 *)(v48 + 32));
      sub_20C103414((uint64_t)&v67, (const void **)__str, 1);
      pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((uint64_t)&__p, &v67, &v64);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p = v64;
      *((_BYTE *)&v64.__r_.__value_.__s + 23) = 0;
      v64.__r_.__value_.__s.__data_[0] = 0;
      sub_20BDE9D48((uint64_t)&v67, v68);
      if (SHIBYTE(v75) < 0)
        operator delete(*(void **)&__str[24]);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
    }
    v66 = 0;
    sub_20C0EE45C();
    v64.__r_.__value_.__r.__words[0] = 0;
    v65 = 0;
    tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)&v64, (unint64_t *)&qword_254985B50, 1);
    v49 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load(&qword_254985B38);
    if (!v49)
      v49 = sub_20C10317C(&qword_254985B38);
    memset(__str, 0, 24);
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Find(v49, (uint64_t)&__p, (void **)__str, (uint64_t *)&v67);
    v50 = sub_20BFD2F78(&v67);
    v52 = v51 & 1;
    v53 = v68;
    if (v68)
    {
      v54 = (unsigned int *)(v68 + 1);
      do
      {
        v55 = __ldxr(v54);
        v56 = v55 - 1;
      }
      while (__stlxr(v56, v54));
      if (!v56)
        (*(void (**)(_QWORD *))(*v53 + 8))(v53);
    }
    v57 = v52 | (unint64_t)v50;
    if ((__str[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)__str);
      if (v57)
        goto LABEL_90;
    }
    else if (v57)
    {
LABEL_90:
      *(_QWORD *)__str = "sdf/layer.cpp";
      *(_QWORD *)&__str[8] = "_CreateNew";
      *(_QWORD *)&__str[16] = 617;
      *(_QWORD *)&__str[24] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(SdfFileFormat"
                              "ConstPtr, const string &, const FileFormatArguments &, BOOL)";
      LOBYTE(v75) = 0;
      v58 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__str, 1, (pxrInternal__aapl__pxrReserved__ *)"A layer already exists with identifier '%s'", (const char *)v58);
      goto LABEL_93;
    }
    v78 = 0;
    *(_OWORD *)v76 = 0u;
    v77 = 0u;
    v75 = 0u;
    memset(__str, 0, sizeof(__str));
    v59 = sub_20BFCF6F4(a1);
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::NewLayer(v59, (uint64_t *)&v67);
    v60 = v66;
    v66 = v67;
    v67 = 0;
    sub_20BF1D8F4((int)&v66, v60);
    sub_20C103234(&v67);
    sub_20BF4C2D8((uint64_t)&v77 + 8);
    if (SBYTE7(v77) < 0)
      operator delete(v76[0]);
    if (SHIBYTE(v75) < 0)
      operator delete(*(void **)&__str[24]);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    if (!v66)
    {
      *(_QWORD *)__str = "sdf/layer.cpp";
      *(_QWORD *)&__str[8] = "_CreateNew";
      *(_QWORD *)&__str[16] = 624;
      *(_QWORD *)&__str[24] = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(SdfFileFormat"
                              "ConstPtr, const string &, const FileFormatArguments &, BOOL)";
      LOBYTE(v75) = 0;
      if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)__str, "layer", 0) & 1) == 0)
        goto LABEL_93;
    }
    if (a4)
    {
      v61 = *(_BYTE *)(sub_20C0EEAF8((uint64_t *)&v66) + 516);
      v62 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v66);
      if ((pxrInternal__aapl__pxrReserved__::SdfLayer::_Save(v62, 1) & 1) == 0)
      {
LABEL_93:
        *a5 = 0;
        sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&v64);
LABEL_109:
        sub_20C103234(&v66);
        sub_20BDE9D48((uint64_t)&v69, v70);
        goto LABEL_110;
      }
      *(_BYTE *)(sub_20C0EEAF8((uint64_t *)&v66) + 516) = v61;
    }
    v63 = sub_20C0EEAF8((uint64_t *)&v66);
    *(_WORD *)(v63 + 465) = 257;
    atomic_store(1u, (unsigned __int8 *)(v63 + 464));
    sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&v64);
    *a5 = v66;
    v66 = 0;
    goto LABEL_109;
  }
  *(_QWORD *)&v79 = "sdf/layer.cpp";
  *((_QWORD *)&v79 + 1) = "_CreateNew";
  *(_QWORD *)&v80 = 536;
  *((_QWORD *)&v80 + 1) = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(SdfFileFormatCons"
                          "tPtr, const string &, const FileFormatArguments &, BOOL)";
  LOBYTE(v81) = 0;
  if (*(char *)(a2 + 23) >= 0)
    v42 = (const char *)a2;
  else
    v42 = *(const char **)a2;
  v43 = &v73;
  if ((v73.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v43 = (std::string *)v73.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v79, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create new layer '%s': %s", v42, (const char *)v43);
  *a5 = 0;
LABEL_120:
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
}

void sub_20C0EF6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,_QWORD *a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&a13);
  sub_20C103234(&a20);
  sub_20BDE9D48((uint64_t)&a26, a27);
  if (a34 < 0)
    operator delete(__p);
  if (a40 < 0)
    operator delete(a35);
  sub_20BFC37A8(v54 - 176);
  if (a47 < 0)
    operator delete(a42);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CreateNew@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, _QWORD *a4@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  void *p_p;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  uint64_t result;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  void *__p;
  char v25;

  if (sub_20BFCE180(3))
  {
    v8 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(a1);
    v9 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v8) & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
      v10 = (const char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0)
        v10 = *(const char **)v10;
    }
    else
    {
      v10 = "";
    }
    if (*(char *)(a2 + 23) >= 0)
      v11 = a2;
    else
      v11 = *(_QWORD *)a2;
    sub_20C0EECC0(a3);
    if (v25 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::CreateNew('%s', '%s', '%s')\n", v12, v13, v10, v11, p_p);
    if (v25 < 0)
      operator delete(__p);
  }
  v15 = a1[1];
  v22 = *a1;
  v23 = v15;
  if (v15)
  {
    v16 = (unsigned int *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(&v22, a2, a3, 1, a4);
  result = v23;
  if (v23)
  {
    v19 = (unsigned int *)(v23 + 8);
    do
    {
      v20 = __ldxr(v19);
      v21 = v20 - 1;
    }
    while (__stlxr(v21, v19));
    if (!v21)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C0EF9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0EFA10(const std::string *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t *EmptyString;
  uint64_t v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v12;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v13;
  pxrInternal__aapl__pxrReserved__::TfToken *Target;
  const std::string *v15;
  pxrInternal__aapl__pxrReserved__::TfToken *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const void **v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  _QWORD **v36;
  _QWORD **v37;
  _QWORD **v38;
  _QWORD *v39;
  char v40;

  v6 = sub_20C0E9DAC(a2);
  if (v7 & 1 | (unint64_t)v6)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if (!v8)
      v8 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EA3A4(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if ((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) != 0)
      EmptyString = (uint64_t *)((*(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v8);
    v10 = sub_20BDEEBA4(a3, (const void **)EmptyString);
    if (a3 + 8 != v10)
    {
      v11 = v10;
      v12 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(a2);
      if (pxrInternal__aapl__pxrReserved__::SdfFileFormat::IsPrimaryFormatForExtensions(v12))
      {
        sub_20BE10B80((uint64_t **)a3, (uint64_t *)v11);
        sub_20BDDE3E4(v11 + 32);
        operator delete((void *)v11);
      }
      else
      {
        v13 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(a2);
        Target = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetTarget(v13);
        if ((*(_QWORD *)Target & 0xFFFFFFFFFFFFFFF8) != 0)
          v15 = (const std::string *)((*(_QWORD *)Target & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          v15 = (const std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(Target);
        std::string::operator=((std::string *)(v11 + 56), v15);
      }
    }
    if (*(_QWORD *)(a3 + 16))
    {
      v18 = sub_20BFCF6F4(a2);
      (*(void (**)(_QWORD ***__return_ptr))(*(_QWORD *)v18 + 32))(&v38);
      v36 = v38;
      v37 = &v39;
      while (1)
      {
        if (v36 == v37)
        {
          sub_20BDE9D48((uint64_t)&v38, v39);
          return a3;
        }
        v21 = sub_20C0F0534(&v36, v19, v20);
        v24 = sub_20BDEEBA4(a3, (const void **)(*v21 + 32));
        if (a3 + 8 != v24)
        {
          v25 = *sub_20C0F0534(&v36, v22, v23);
          v26 = *(unsigned __int8 *)(v24 + 79);
          if ((v26 & 0x80u) == 0)
            v27 = *(unsigned __int8 *)(v24 + 79);
          else
            v27 = *(_QWORD *)(v24 + 64);
          v28 = *(unsigned __int8 *)(v25 + 79);
          v29 = (char)v28;
          if ((v28 & 0x80u) != 0)
            v28 = *(_QWORD *)(v25 + 64);
          if (v27 == v28)
          {
            v30 = (const void **)(v24 + 56);
            v33 = *(unsigned __int8 **)(v25 + 56);
            v31 = (unsigned __int8 *)(v25 + 56);
            v32 = v33;
            if (v29 >= 0)
              v34 = v31;
            else
              v34 = v32;
            if ((v26 & 0x80) != 0)
            {
              if (memcmp(*v30, v34, *(_QWORD *)(v24 + 64)))
                goto LABEL_42;
LABEL_41:
              sub_20BE10B80((uint64_t **)a3, (uint64_t *)v24);
              sub_20BDDE3E4(v24 + 32);
              operator delete((void *)v24);
              goto LABEL_42;
            }
            if (!*(_BYTE *)(v24 + 79))
              goto LABEL_41;
            while (*(unsigned __int8 *)v30 == *v34)
            {
              v30 = (const void **)((char *)v30 + 1);
              ++v34;
              if (!--v26)
                goto LABEL_41;
            }
          }
        }
LABEL_42:
        sub_20C0F05AC(&v36);
      }
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::Sdf_GetExtension(a1);
    if (v40 < 0)
    {
      operator delete(v38);
      if (v39)
        return a3;
    }
    else if (v40)
    {
      return a3;
    }
    v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if (!v16)
      v16 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C0EA3A4(&pxrInternal__aapl__pxrReserved__::SdfFileFormatTokens);
    if ((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) != 0)
      v17 = (uint64_t *)((*(_QWORD *)v16 & 0xFFFFFFFFFFFFFFF8) + 16);
    else
      v17 = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v16);
    sub_20BE9DD48((uint64_t **)a3, (const void **)v17);
  }
  return a3;
}

void sub_20C0EFC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  sub_20BDE9D48((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_Save(pxrInternal__aapl__pxrReserved__::SdfLayer *this, char a2)
{
  const char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int v12;
  char v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  uint64_t v22;
  const char *v23;
  char v24;
  void *v25[2];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    __p[0] = "sdf/layer.cpp";
    __p[1] = "_Save";
    v22 = 4842;
    v23 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_Save(BOOL) const";
    v24 = 0;
    v4 = (const char *)*((_QWORD *)this + 59);
    if (v4[23] < 0)
      v4 = *(const char **)v4;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot save muted layer @%s@", v4);
    return 0;
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(*((_QWORD *)this + 59)))
  {
    __p[0] = "sdf/layer.cpp";
    __p[1] = "_Save";
    v22 = 4848;
    v23 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_Save(BOOL) const";
    v24 = 0;
    v5 = (const char *)*((_QWORD *)this + 59);
    if (v5[23] < 0)
      v5 = *(const char **)v5;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot save anonymous layer @%s@", v5);
    return 0;
  }
  v8 = *((_QWORD *)this + 59);
  if (*(char *)(v8 + 47) < 0)
  {
    sub_20BDDBFAC(__p, *(void **)(v8 + 24), *(_QWORD *)(v8 + 32));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v8 + 24);
    v22 = *(_QWORD *)(v8 + 40);
  }
  v9 = (void *)HIBYTE(v22);
  if (v22 < 0)
    v9 = __p[1];
  if (v9)
  {
    if ((a2 & 1) == 0
      && (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(this) & 1) == 0
      && pxrInternal__aapl__pxrReserved__::TfPathExists((const char *)__p, 0))
    {
      goto LABEL_31;
    }
    v25[0] = 0;
    v25[1] = 0;
    v26 = 0;
    v10 = *((_QWORD *)this + 6);
    v19 = *((_QWORD *)this + 5);
    v20 = v10;
    if (v10)
    {
      v11 = (unsigned int *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(this, (const char *)__p, (char *)v25, &v19, (uint64_t)this + 56);
    v14 = v20;
    if (v20)
    {
      v15 = (unsigned int *)(v20 + 8);
      do
      {
        v16 = __ldxr(v15);
        v17 = v16 - 1;
      }
      while (__stlxr(v17, v15));
      if (!v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    }
    if (SHIBYTE(v26) < 0)
    {
      operator delete(v25[0]);
      if ((v13 & 1) != 0)
        goto LABEL_30;
    }
    else if ((v13 & 1) != 0)
    {
LABEL_30:
      *((_BYTE *)this + 516) = 1;
      pxrInternal__aapl__pxrReserved__::Sdf_ComputeLayerModificationTimestamp(this, v25);
      sub_20BF4B5D8((_QWORD *)this + 60, v25);
      v18 = (_QWORD *)sub_20BF4C2D8((uint64_t)v25);
      v25[0] = &unk_24C5295C8;
      sub_20BFD0074(v18, (uint64_t *)this + 3);
      pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidSaveLayerToFile::~LayerDidSaveLayerToFile((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidSaveLayerToFile *)v25);
LABEL_31:
      v6 = 1;
      goto LABEL_34;
    }
  }
  v6 = 0;
LABEL_34:
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_20C0EFF24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidSaveLayerToFile::~LayerDidSaveLayerToFile((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerDidSaveLayerToFile *)(v18 - 48));
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::New@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  uint64_t result;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a1[1];
  v11 = *a1;
  v12 = v4;
  if (v4)
  {
    v5 = (unsigned int *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateNew(&v11, a2, a3, 0, a4);
  result = v12;
  if (v12)
  {
    v8 = (unsigned int *)(v12 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C0EFFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B408(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_ComputeInfoToFindOrOpenLayer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::string::size_type size;
  _BOOL8 IsAnonLayerIdentifier;
  uint64_t v8;
  char *v9;
  BOOL v10;
  std::string::size_type v11;
  std::string::size_type v12;
  int v13;
  uint64_t v14;
  uint64_t *Resolver;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  void *v20;
  std::string::size_type v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  void *v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  std::string::size_type v30;
  __int128 v31;
  void **v32;
  uint64_t v33;
  uint64_t v34;
  std::string::size_type v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  std::string::size_type v39;
  void *v41[2];
  uint64_t v42;
  _DWORD v43[2];
  uint64_t *v44;
  _QWORD *v45;
  uint64_t v46;
  std::string __p;
  std::string __dst;
  __int128 v49;
  _OWORD v50[2];
  __int128 v51;
  std::string::size_type v52;
  _QWORD v53[3];

  v53[2] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return 0;
  memset(&__p, 0, sizeof(__p));
  v45 = 0;
  v46 = 0;
  v44 = (uint64_t *)&v45;
  if (pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier((const std::string *)a1, (__int128 *)&__p, (uint64_t)&v44))
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (size)
    {
      v49 = 0u;
      memset(v50, 0, sizeof(v50));
      v51 = 0u;
      v53[1] = 0;
      v52 = 0;
      memset(v43, 0, 7);
      IsAnonLayerIdentifier = pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier((uint64_t)&__p);
      v10 = IsAnonLayerIdentifier;
      if (IsAnonLayerIdentifier)
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
      }
      else
      {
        Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsAnonLayerIdentifier);
        v41[0] = 0;
        v41[1] = 0;
        v42 = 0;
        pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifier((uint64_t)Resolver);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = __dst;
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
        __dst.__r_.__value_.__s.__data_[0] = 0;
        if (SHIBYTE(v42) < 0)
          operator delete(v41[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_ResolvePath((pxrInternal__aapl__pxrReserved__ *)&__p);
        v12 = __dst.__r_.__value_.__l.__size_;
        v11 = __dst.__r_.__value_.__r.__words[0];
        v43[0] = __dst.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)v43 + 3) = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3);
        v13 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      }
      if (v46)
      {
        __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)a2;
        __dst.__r_.__value_.__l.__size_ = a2 + 8;
        while (__dst.__r_.__value_.__r.__words[0] != __dst.__r_.__value_.__l.__size_)
        {
          v16 = *sub_20C0F0534(&__dst, v8, v9);
          v41[0] = (void *)(*sub_20C0F0534(&__dst, v17, v18) + 32);
          v19 = sub_20BDDDFDC(&v44, (const void **)v41[0], (uint64_t)&unk_20CAC184C, (__int128 **)v41);
          std::string::operator=((std::string *)(v19 + 7), (const std::string *)(v16 + 56));
          sub_20C0F05AC(&__dst);
        }
      }
      else if (&v44 != (uint64_t **)a2)
      {
        sub_20BDFC4AC(&v44, *(__int128 **)a2, (__int128 *)(a2 + 8));
      }
      if ((v13 & 0x80) != 0)
      {
        v20 = (void *)v11;
        v21 = v12;
        if (v12)
          goto LABEL_30;
      }
      else if (v13)
      {
        __dst.__r_.__value_.__r.__words[0] = v11;
        __dst.__r_.__value_.__l.__size_ = v12;
        LODWORD(__dst.__r_.__value_.__r.__words[2]) = v43[0];
        *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v43 + 3);
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13;
LABEL_31:
        pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)&__dst, (pxrInternal__aapl__pxrReserved__::TfToken *)&v44, (uint64_t *)v41);
        v22 = *(unsigned int **)(a3 + 8);
        *(_OWORD *)a3 = *(_OWORD *)v41;
        v41[1] = 0;
        if (v22)
        {
          v23 = v22 + 2;
          do
          {
            v24 = __ldxr(v23);
            v25 = v24 - 1;
          }
          while (__stlxr(v25, v23));
          if (!v25)
            (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
          v26 = v41[1];
          v41[0] = 0;
          if (v41[1])
          {
            v27 = (unsigned int *)((char *)v41[1] + 8);
            do
            {
              v28 = __ldxr(v27);
              v29 = v28 - 1;
            }
            while (__stlxr(v29, v27));
            if (!v29)
              (*(void (**)(void *))(*(_QWORD *)v26 + 8))(v26);
          }
        }
        else
        {
          v41[0] = 0;
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        sub_20C0EFA10(&__p, (uint64_t *)a3, (uint64_t)&v44);
        sub_20BF07C64((uint64_t *)(a3 + 16), (uint64_t)&v44);
        *(_BYTE *)(a3 + 40) = v10;
        v30 = *(_QWORD *)(a3 + 64);
        v31 = *(_OWORD *)(a3 + 48);
        *(std::string *)(a3 + 48) = __p;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v31;
        __p.__r_.__value_.__r.__words[2] = v30;
        if (*(char *)(a3 + 95) < 0)
          operator delete(*(void **)(a3 + 72));
        *(_QWORD *)(a3 + 72) = v11;
        *(_QWORD *)(a3 + 80) = v12;
        *(_DWORD *)(a3 + 88) = v43[0];
        *(_DWORD *)(a3 + 91) = *(_DWORD *)((char *)v43 + 3);
        *(_BYTE *)(a3 + 95) = v13;
        pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier(a3 + 48, (_QWORD *)(a3 + 16), &__dst);
        v32 = (void **)(a3 + 96);
        if (*(char *)(a3 + 119) < 0)
          operator delete(*v32);
        *(_OWORD *)v32 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        *(_QWORD *)(a3 + 112) = *((_QWORD *)&__dst.__r_.__value_.__l + 2);
        v33 = *(_QWORD *)(a3 + 136);
        v34 = *((_QWORD *)&v50[1] + 1);
        *(_QWORD *)(a3 + 136) = *(_QWORD *)&v50[0];
        v35 = *(_QWORD *)(a3 + 160);
        *(_QWORD *)(a3 + 160) = v34;
        v36 = *(_OWORD *)(a3 + 120);
        *(_OWORD *)(a3 + 120) = v49;
        v49 = v36;
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)(a3 + 144);
        v37 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        __dst.__r_.__value_.__r.__words[2] = v35;
        *(_OWORD *)(a3 + 144) = *(_OWORD *)((char *)v50 + 8);
        *(_QWORD *)&v50[0] = v33;
        *((_QWORD *)&v50[1] + 1) = v35;
        *(_OWORD *)((char *)v50 + 8) = v37;
        __dst = *(std::string *)(a3 + 168);
        v38 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
        v39 = __dst.__r_.__value_.__r.__words[2];
        *(_OWORD *)(a3 + 168) = v51;
        *(_QWORD *)(a3 + 184) = v52;
        v52 = v39;
        v51 = v38;
        sub_20BFD3C3C((_QWORD *)(a3 + 192), v53);
        sub_20BF4C2D8((uint64_t)v53);
        if (SHIBYTE(v52) < 0)
          operator delete((void *)v51);
        if (SHIBYTE(v50[1]) < 0)
          operator delete(*((void **)&v50[0] + 1));
        if (SBYTE7(v50[0]) < 0)
          operator delete((void *)v49);
        v14 = 1;
        goto LABEL_54;
      }
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        __dst = __p;
        goto LABEL_31;
      }
      v21 = __p.__r_.__value_.__l.__size_;
      v20 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_30:
      sub_20BDDBFAC(&__dst, v20, v21);
      goto LABEL_31;
    }
  }
  v14 = 0;
LABEL_54:
  sub_20BDE9D48((uint64_t)&v44, v45);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v14;
}

void sub_20C0F04AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, _QWORD *a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  void *v40;
  char v41;
  uint64_t v42;

  if (v41 < 0)
    operator delete(v40);
  sub_20BFC37A8(v42 - 176);
  sub_20BDE9D48((uint64_t)&a17, a18);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0F0534(_QWORD *result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*result == result[1])
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<std::string, std::string>>::operator->"
            "() [T = const std::map<std::string, std::string>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

_QWORD *sub_20C0F05AC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::map<std::string, std::string"
            ">>::operator++() [T = const std::map<std::string, std::string>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  const char *v7;
  char *v8;
  void **v9;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v10;
  uint64_t (**v11)(_QWORD);
  uint64_t (*v12)(uint64_t *);
  char v13;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v14;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v15;
  uint64_t v16;
  _QWORD v18[2];
  _QWORD v19[3];
  __int16 v20;
  uint64_t (**v21[2])(_QWORD);
  uint64_t v22;
  void *__p[2];
  _QWORD *v24;
  _QWORD v25[2];
  char v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _BYTE v30[104];
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (sub_20BFCE180(3))
  {
    v6 = *(char *)(a1 + 23) >= 0 ? a1 : *(_QWORD *)a1;
    sub_20C0EECC0(a2);
    v9 = SHIBYTE(v24) >= 0 ? __p : (void **)__p[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::FindOrOpen('%s', '%s')\n", v7, v8, v6, v9);
    if (SHIBYTE(v24) < 0)
      operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  v25[0] = 0;
  v25[1] = 0;
  v24 = v25;
  v26 = 0;
  v31 = 0;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  memset(v30, 0, 96);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::_ComputeInfoToFindOrOpenLayer(a1, (uint64_t)a2, (uint64_t)__p) & 1) != 0)
  {
    sub_20C0EE45C();
    v19[0] = 0;
    v20 = 0;
    tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v19, (unint64_t *)&qword_254985B50, 0);
    sub_20C0F08EC((uint64_t)v30, (void **)&v28 + 1, (tbb::queuing_rw_mutex::scoped_lock *)v19, 1, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v21);
    if (v21[0])
    {
      v10 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)v21);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::_WaitForInitializationAndCheckIfSuccessful(v10))
      {
        v11 = v21[0];
        v21[0] = 0;
      }
      else
      {
        v11 = 0;
      }
      *a3 = v11;
      v15 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v21;
      goto LABEL_25;
    }
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v21);
    if (v26)
    {
      v12 = sub_20C0E9DAC(__p);
      if (!(v13 & 1 | (unint64_t)v12)
        || (v14 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4((uint64_t *)__p),
            (pxrInternal__aapl__pxrReserved__::SdfFileFormat::ShouldReadAnonymousLayers(v14) & 1) == 0))
      {
LABEL_18:
        *a3 = 0;
LABEL_26:
        sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v19);
        return sub_20C102178((uint64_t)__p);
      }
    }
    else
    {
      v16 = HIBYTE(v29);
      if (v29 < 0)
        v16 = v29;
      if (!v16)
        goto LABEL_18;
    }
    v18[0] = v19;
    v18[1] = __p;
    v21[0] = (uint64_t (**)(_QWORD))off_24C528670;
    v21[1] = (uint64_t (**)(_QWORD))v18;
    tbb::interface7::internal::isolate_within_arena(v21, 0);
    v15 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v22;
    *a3 = v22;
    v22 = 0;
    v21[0] = (uint64_t (**)(_QWORD))off_24C528670;
LABEL_25:
    sub_20C103234(v15);
    goto LABEL_26;
  }
  *a3 = 0;
  return sub_20C102178((uint64_t)__p);
}

void sub_20C0F0880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(v25 + 16));
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&a13);
  sub_20C102178((uint64_t)&__p);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C0F08EC@<X0>(uint64_t a1@<X0>, void **a2@<X1>, tbb::queuing_rw_mutex::scoped_lock *a3@<X2>, int a4@<W3>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a5@<X8>)
{
  char v5;
  int v10;
  char v11;
  int v12;
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *v13;
  uint64_t (*v14)(uint64_t *);
  char v15;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v16;
  int v17;
  uint64_t (*v18)(uint64_t *);
  char v19;
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *v20;
  uint64_t v21;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **result;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v26;
  uint64_t v27;
  uint64_t v28;

  v5 = a4;
  v10 = 0;
  v11 = 0;
  *a5 = 0;
  v12 = a4 ^ 1;
  do
  {
    v13 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load(&qword_254985B38);
    if (!v13)
      v13 = sub_20C10317C(&qword_254985B38);
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Find(v13, a1, a2, &v27);
    v14 = sub_20BFD2F78(&v27);
    if (!(v15 & 1 | (unint64_t)v14))
    {
      if (((v10 | v12) & 1) == 0 && !tbb::queuing_rw_mutex::scoped_lock::upgrade_to_writer(a3))
      {
LABEL_17:
        v10 = 1;
        v17 = 2;
        goto LABEL_18;
      }
      goto LABEL_16;
    }
    sub_20C103494((uint64_t)&v27, &v26);
    v16 = *a5;
    *a5 = v26;
    v26 = 0;
    sub_20BF1D8F4((int)a5, v16);
    sub_20C103234(&v26);
    if (!*a5)
    {
      if ((v10 & 1) == 0 && !tbb::queuing_rw_mutex::scoped_lock::upgrade_to_writer(a3))
        goto LABEL_17;
      v18 = sub_20BFD2F78(&v27);
      if (v19 & 1 | (unint64_t)v18)
      {
        v20 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load(&qword_254985B38);
        if (!v20)
          v20 = sub_20C10317C(&qword_254985B38);
        v21 = sub_20BFCF650(&v27);
        pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Erase(v20, &v27, *(_QWORD *)(v21 + 472));
      }
LABEL_16:
      v17 = 0;
      goto LABEL_18;
    }
    tbb::queuing_rw_mutex::scoped_lock::release((uint64_t)a3);
    v17 = 1;
    v11 = 1;
LABEL_18:
    result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v28;
    if (v28)
    {
      v23 = (unsigned int *)(v28 + 8);
      do
      {
        v24 = __ldxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
        result = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(*((uint64_t (**)(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **))*result
                                                                                       + 1))(result);
    }
  }
  while (v17 == 2);
  if (v17)
  {
    if ((v11 & 1) == 0)
      return sub_20C103234(a5);
  }
  else if ((v5 & 1) == 0)
  {
    return (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)tbb::queuing_rw_mutex::scoped_lock::release((uint64_t)a3);
  }
  return result;
}

void sub_20C0F0AAC(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;

  sub_20C103234(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpenRelativeToLayer(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t (*v8)(uint64_t *);
  char v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  const char *v13;
  char v14;

  v8 = sub_20BFD2F78(a1);
  if (!(v9 & 1 | (unint64_t)v8))
  {
    __p[0] = "sdf/layer.cpp";
    __p[1] = "FindOrOpenRelativeToLayer";
    v12 = 868;
    v13 = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpenRelativeToLayer(const SdfLayerHand"
          "le &, const string &, const FileFormatArguments &)";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Anchor layer is invalid");
LABEL_8:
    *a4 = 0;
    return;
  }
  v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
    goto LABEL_8;
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(a1, a2, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::FindOrOpen((uint64_t)__p, a3, a4);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

void sub_20C0F0BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::OpenAsAnonymous@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__ *a2@<X1>, uint64_t a3@<X2>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a4@<X8>)
{
  char v7;
  uint64_t (*v8)(uint64_t *);
  char v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;
  uint64_t v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  _QWORD **v18;
  _QWORD *v19[2];
  void *v20;
  uint64_t v21;
  uint64_t v22;
  std::string v23;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v24;
  _QWORD v25[2];
  __int16 v26;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v27;
  void *v28[2];
  __int128 v29;
  __int128 v30;
  __int128 __p;
  __int128 v32;
  uint64_t v33;
  uint64_t v34[3];
  _QWORD v35[2];
  char v36;
  __int128 v37;
  _QWORD v38[4];
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v34[0] = 0;
  v34[1] = 0;
  v35[0] = 0;
  v35[1] = 0;
  v34[2] = (uint64_t)v35;
  v36 = 0;
  v45 = 0;
  v37 = 0u;
  memset(v38, 0, sizeof(v38));
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v28[1] = 0;
  *(_QWORD *)&v29 = 0;
  v28[0] = &v28[1];
  v7 = pxrInternal__aapl__pxrReserved__::SdfLayer::_ComputeInfoToFindOrOpenLayer(a1, (uint64_t)v28, (uint64_t)v34);
  sub_20BDE9D48((uint64_t)v28, (_QWORD *)v28[1]);
  if ((v7 & 1) == 0)
  {
LABEL_18:
    *a4 = 0;
    return sub_20C102178((uint64_t)v34);
  }
  v8 = sub_20C0E9DAC(v34);
  if (!(v9 & 1 | (unint64_t)v8))
  {
    v28[0] = "sdf/layer.cpp";
    v28[1] = "OpenAsAnonymous";
    *(_QWORD *)&v29 = 903;
    *((_QWORD *)&v29 + 1) = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::OpenAsAnonymous(const std:"
                            ":string &, BOOL, const std::string &)";
    LOBYTE(v30) = 0;
    v15 = (const char *)&v39;
    if (SBYTE7(v40) < 0)
      v15 = (const char *)v39;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot determine file format for @%s@", v15);
    goto LABEL_18;
  }
  v27 = 0;
  sub_20C0EE45C();
  v25[0] = 0;
  v26 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v25, (unint64_t *)&qword_254985B50, 1);
  pxrInternal__aapl__pxrReserved__::Sdf_GetAnonLayerIdentifierTemplate(a3, &v23);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v33 = 0;
  __p = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  *(_OWORD *)v28 = 0u;
  v19[0] = 0;
  v19[1] = 0;
  v18 = v19;
  v10 = sub_20BFCF6F4(v34);
  pxrInternal__aapl__pxrReserved__::SdfFileFormat::NewLayer(v10, (uint64_t *)&v24);
  v11 = v27;
  v27 = v24;
  v24 = 0;
  sub_20BF1D8F4((int)&v27, v11);
  sub_20C103234(&v24);
  sub_20BDE9D48((uint64_t)&v18, v19[0]);
  sub_20BF4C2D8((uint64_t)&v32 + 8);
  if (SBYTE7(v32) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v30) < 0)
    operator delete(*((void **)&v29 + 1));
  if (SBYTE7(v29) < 0)
    operator delete(v28[0]);
  if (SHIBYTE(v22) < 0)
    operator delete(v20);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v25);
  v12 = sub_20C0EEAF8((uint64_t *)&v27);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::_Read(v12, (uint64_t)&v39, (std::string *)&v38[1], a2) & 1) != 0)
  {
    v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v27);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean(v13);
    v14 = sub_20C0EEAF8((uint64_t *)&v27);
    *(_WORD *)(v14 + 465) = 257;
    atomic_store(1u, (unsigned __int8 *)(v14 + 464));
    *a4 = v27;
    v27 = 0;
  }
  else
  {
    v16 = sub_20C0EEAF8((uint64_t *)&v27);
    *(_WORD *)(v16 + 465) = 256;
    atomic_store(1u, (unsigned __int8 *)(v16 + 464));
    *a4 = 0;
  }
  sub_20C103234(&v27);
  return sub_20C102178((uint64_t)v34);
}

void sub_20C0F0F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  sub_20C102178((uint64_t)&a48);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_Read(uint64_t a1, uint64_t a2, std::string *a3, pxrInternal__aapl__pxrReserved__ *a4)
{
  unsigned __int8 v8;
  _QWORD *v9;
  _BOOL4 v10;
  const char *v11;
  char *v12;
  std::string *v13;
  int v14;
  const char *v15;
  pxrInternal__aapl__pxrReserved__ *v16;
  int v17;
  std::string *v18;
  pxrInternal__aapl__pxrReserved__ *v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v28;
  uint64_t v29;
  uint64_t Detached;
  const char *v31;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v32;
  unint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int v43;
  void *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  char v49;
  void *v50;
  uint64_t v51;
  char v52;
  void *__p[2];
  uint64_t v54;
  std::string v55;
  _QWORD *v56;
  int v57;

  v8 = atomic_load(pxrInternal__aapl__pxrReserved__::TfMallocTag::_isInitialized);
  if ((v8 & 1) != 0)
  {
    v9 = pxrInternal__aapl__pxrReserved__::TfMallocTag::_Begin("SdfLayer::_Read", 0, (char *)a3);
    v10 = v9 != 0;
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  v56 = v9;
  v57 = v10;
  memset(&v55, 0, sizeof(v55));
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(a2))
  {
    __p[0] = 0;
    __p[1] = 0;
    v54 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier((const std::string *)a2, (uint64_t)&v55, (uint64_t)__p);
    if (SHIBYTE(v54) < 0)
      operator delete(__p[0]);
  }
  else
  {
    std::string::operator=(&v55, a3);
  }
  v13 = &v55;
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = (std::string *)v55.__r_.__value_.__r.__words[0];
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Loading layer '%s'", v11, v12, v13);
  v45 = "sdf/layer.cpp";
  v46 = "_Read";
  v47 = 1119;
  v48 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_Read(const string &, const ArResolvedPath &, BOOL)";
  v49 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(__p, &v50, &v45);
  if (v52 < 0)
    operator delete(v50);
  if (sub_20BFCE180(3))
  {
    v14 = *(char *)(a2 + 23);
    v15 = *(const char **)a2;
    v16 = a4;
    v17 = SHIBYTE(a3->__r_.__value_.__r.__words[2]);
    v18 = (std::string *)a3->__r_.__value_.__r.__words[0];
    v19 = v16;
    pxrInternal__aapl__pxrReserved__::TfStringify(v16, &v45);
    v22 = (uint64_t)(v17 >= 0 ? a3 : v18);
    v23 = v14 >= 0 ? a2 : (uint64_t)v15;
    v24 = v47 >= 0 ? &v45 : (void **)v45;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::_Read('%s', '%s', metadataOnly=%s)\n", v20, v21, v23, v22, v24);
    a4 = v19;
    if (SHIBYTE(v47) < 0)
      operator delete(v45);
  }
  v25 = *(_QWORD *)(a1 + 48);
  v50 = *(void **)(a1 + 40);
  v51 = v25;
  if (v25)
  {
    v26 = (unsigned int *)(v25 + 8);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4((uint64_t *)&v50);
  if (pxrInternal__aapl__pxrReserved__::SdfFileFormat::SupportsReading(v28))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsIncludedByDetachedLayerRules((const std::string *)a2))
    {
      v29 = sub_20BFCF6F4((uint64_t *)&v50);
      Detached = pxrInternal__aapl__pxrReserved__::SdfFileFormat::ReadDetached(v29, (pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, (unsigned __int8 *)&v55);
    }
    else
    {
      v35 = sub_20BFCF6F4((uint64_t *)&v50);
      Detached = (*(uint64_t (**)(uint64_t, uint64_t, std::string *, pxrInternal__aapl__pxrReserved__ *))(*(_QWORD *)v35 + 56))(v35, a1, &v55, a4);
    }
    v36 = Detached;
  }
  else
  {
    v45 = "sdf/layer.cpp";
    v46 = "_Read";
    v47 = 1130;
    v48 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_Read(const string &, const ArResolvedPath &, BOOL)";
    v49 = 0;
    if (*(char *)(a2 + 23) >= 0)
      v31 = (const char *)a2;
    else
      v31 = *(const char **)a2;
    v32 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4((uint64_t *)&v50);
    v33 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v32) & 0xFFFFFFFFFFFFFFF8;
    if (v33)
    {
      v34 = (const char *)(v33 + 16);
      if (*(char *)(v33 + 39) < 0)
        v34 = *(const char **)v34;
    }
    else
    {
      v34 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v45, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot read layer @%s@: %s file format does notsupport reading", v31, v34);
    v36 = 0;
  }
  v37 = v51;
  if (v51)
  {
    v38 = (unsigned int *)(v51 + 8);
    do
    {
      v39 = __ldxr(v38);
      v40 = v39 - 1;
    }
    while (__stlxr(v40, v38));
    if (!v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  }
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)__p);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  v41 = v57--;
  if (v41)
  {
    v42 = (uint64_t)v56;
    v43 = v41 - 2;
    do
    {
      pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v42);
      v57 = v43--;
    }
    while (v43 != -2);
  }
  return v36;
}

void sub_20C0F12EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a18 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a27);
  if (*(char *)(v32 - 105) < 0)
    operator delete(*(void **)(v32 - 128));
  sub_20BEB24F4(v32 - 104);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSchema(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((_QWORD *)this + 10);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(pxrInternal__aapl__pxrReserved__::SdfLayer *this, uint64_t a2)
{
  __int128 *v4;
  __int128 v5;
  void *v6;
  _BOOL4 IsAnonLayerIdentifier;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v10;
  char *v11;
  std::string::size_type v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  char v17;
  _QWORD **v18;
  uint64_t v19;
  std::string::size_type size;
  int v21;
  _QWORD **v22;
  unint64_t *Instance;
  void **v24;
  unint64_t *v25;
  _QWORD **v27;
  std::string __p;
  void *v29[2];
  uint64_t v30;
  _BYTE v31[8];
  void *__dst[2];
  uint64_t v33;
  std::string v34;
  const char *v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v4 = (__int128 *)*((_QWORD *)this + 59);
  if (*((char *)v4 + 23) < 0)
  {
    sub_20BDDBFAC(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v33 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = (void *)HIBYTE(v33);
  if (v33 < 0)
    v6 = __dst[1];
  if (!v6)
  {
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/layer.cpp";
    v34.__r_.__value_.__l.__size_ = (std::string::size_type)"_Reload";
    v34.__r_.__value_.__r.__words[2] = 944;
    v35 = "SdfLayer::_ReloadResult pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(BOOL)";
    v36 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't reload a layer with no identifier");
    a2 = 0;
    goto LABEL_69;
  }
  IsAnonLayerIdentifier = pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(*((_QWORD *)this + 59));
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v31);
  if (IsAnonLayerIdentifier)
  {
    v8 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4((uint64_t *)this + 5);
    if ((pxrInternal__aapl__pxrReserved__::SdfFileFormat::ShouldSkipAnonymousReload(v8) & 1) != 0)
      goto LABEL_12;
  }
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this) & 1) == 0)
  {
    if (!IsAnonLayerIdentifier)
    {
      v16 = *((_QWORD *)this + 59);
      if (*(char *)(v16 + 47) < 0)
      {
        sub_20BDDBFAC(v29, *(void **)(v16 + 24), *(_QWORD *)(v16 + 32));
      }
      else
      {
        *(_OWORD *)v29 = *(_OWORD *)(v16 + 24);
        v30 = *(_QWORD *)(v16 + 40);
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::UpdateAssetInfo(this);
      v19 = *((_QWORD *)this + 59);
      if (*(char *)(v19 + 47) < 0)
        sub_20BDDBFAC(&__p, *(void **)(v19 + 24), *(_QWORD *)(v19 + 32));
      else
        __p = *(std::string *)(v19 + 24);
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = __p.__r_.__value_.__l.__size_;
      if (size)
      {
        if (*((_QWORD *)this + 61))
        {
          pxrInternal__aapl__pxrReserved__::Sdf_ComputeLayerModificationTimestamp(this, &v34);
          pxrInternal__aapl__pxrReserved__::Sdf_ComputeExternalAssetModificationTimestamps(this, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&v27);
          if ((a2 & 1) == 0
            && (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(this) & 1) == 0
            && sub_20BF772F0((unsigned __int8 *)&__p, (unsigned __int8 *)v29)
            && sub_20C0F276C((pxrInternal__aapl__pxrReserved__::VtValue *)&v34, (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)this + 480))&& (sub_20C0F2808((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v27, (uint64_t *)this + 62) & 1) != 0)
          {
            v21 = 1;
            a2 = 2;
          }
          else if (pxrInternal__aapl__pxrReserved__::SdfLayer::_Read((uint64_t)this, *((_QWORD *)this + 59), &__p, 0))
          {
            sub_20BFD3C3C((_QWORD *)this + 60, &v34);
            v22 = v27;
            v27 = 0;
            sub_20BF49F14((_QWORD ***)this + 62, v22);
            if (sub_20C0F2904((unsigned __int8 *)&__p, (unsigned __int8 *)v29))
            {
              Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
              if (!Instance)
                Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
              pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidChangeLayerResolvedPath(Instance, (uint64_t *)this + 3);
            }
            v21 = 0;
          }
          else
          {
            a2 = 0;
            v21 = 1;
          }
          sub_20BF49F14(&v27, 0);
          sub_20BF4C2D8((uint64_t)&v34);
        }
        else
        {
          v21 = 1;
          a2 = 2;
        }
      }
      else
      {
        v34.__r_.__value_.__r.__words[0] = (std::string::size_type)"sdf/layer.cpp";
        v34.__r_.__value_.__l.__size_ = (std::string::size_type)"_Reload";
        v34.__r_.__value_.__r.__words[2] = 998;
        v35 = "SdfLayer::_ReloadResult pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(BOOL)";
        v36 = 0;
        v24 = __dst;
        if (v33 < 0)
          v24 = (void **)__dst[0];
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v34, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot determine resolved path for '%s', skipping reload.", (const char *)v24);
        a2 = 0;
        v21 = 1;
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30) < 0)
        operator delete(v29[0]);
      if (v21)
        goto LABEL_68;
      goto LABEL_65;
    }
    v10 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4((uint64_t *)this + 5);
    if ((pxrInternal__aapl__pxrReserved__::SdfFileFormat::ShouldReadAnonymousLayers(v10) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_ComputeExternalAssetModificationTimestamps(this, (pxrInternal__aapl__pxrReserved__::VtDictionary *)v29);
      if ((a2 & 1) == 0
        && (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(this) & 1) == 0
        && (pxrInternal__aapl__pxrReserved__::operator==((_QWORD **)v29, (uint64_t *)this + 62, v11) & 1) != 0)
      {
        a2 = 2;
LABEL_57:
        sub_20BF49F14((_QWORD ***)v29, 0);
        goto LABEL_68;
      }
      memset(&v34, 0, sizeof(v34));
      v17 = pxrInternal__aapl__pxrReserved__::SdfLayer::_Read((uint64_t)this, (uint64_t)__dst, &v34, 0);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if ((v17 & 1) == 0)
      {
        a2 = 0;
        goto LABEL_57;
      }
      v18 = (_QWORD **)v29[0];
      v29[0] = 0;
      sub_20BF49F14((_QWORD ***)this + 62, v18);
      sub_20BF49F14((_QWORD ***)v29, 0);
LABEL_65:
      pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean(this);
      v25 = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
      if (!v25)
        v25 = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
      pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidReloadLayerContent(v25, (uint64_t *)this + 3);
      a2 = 1;
      goto LABEL_68;
    }
  }
  sub_20C0EDBEC((uint64_t *)this + 5, *((const std::string **)this + 59), (uint64_t)this + 56, (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v29);
  v9 = sub_20C0A683C((uint64_t *)this + 14);
  if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v9 + 48))(v9, v29) & 1) == 0)
  {
    sub_20C0EA4AC((uint64_t *)&v34, (uint64_t *)v29);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData((uint64_t)this, (uint64_t *)&v34, 0);
    v12 = v34.__r_.__value_.__l.__size_;
    if (v34.__r_.__value_.__l.__size_)
    {
      v13 = (unsigned int *)(v34.__r_.__value_.__l.__size_ + 8);
      do
      {
        v14 = __ldxr(v13);
        v15 = v14 - 1;
      }
      while (__stlxr(v15, v13));
      if (!v15)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v12 + 8))(v12);
    }
    sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v29);
    goto LABEL_65;
  }
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)v29);
LABEL_12:
  a2 = 2;
LABEL_68:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v31);
LABEL_69:
  if (SHIBYTE(v33) < 0)
    operator delete(__dst[0]);
  return a2;
}

void sub_20C0F1860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a24);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateData@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2@<X8>)
{
  return sub_20C0EDBEC((uint64_t *)this + 5, *((const std::string **)this + 59), (uint64_t)this + 56, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v9;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;
  pxrInternal__aapl__pxrReserved__::SdfAbstractData *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *v19;
  const pxrInternal__aapl__pxrReserved__::TfToken *v20;
  uint64_t v21;
  char *v22;
  const pxrInternal__aapl__pxrReserved__::TfToken *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _BOOL4 IsInertSubtree;
  const char *v29;
  pxrInternal__aapl__pxrReserved__::SdfAbstractData *v30;
  uint64_t i;
  _DWORD *v32;
  uint64_t v33;
  char *v34;
  pxrInternal__aapl__pxrReserved__::SdfPath *v35;
  uint64_t v36;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v37;
  void **v38;
  uint64_t v39;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v40;
  void **v41;
  int v42;
  uint64_t v43;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int *v47;
  unsigned int v48;
  _BOOL8 v49;
  unsigned int *v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  pxrInternal__aapl__pxrReserved__::SdfAbstractData *v58;
  char *v59;
  unint64_t v60;
  const char *v61;
  const char *v62;
  char *v63;
  void *v64;
  _OWORD *v65;
  __int128 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void **v70;
  void **v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  char *v75;
  BOOL v76;
  const char *v77;
  std::string *p_p;
  uint64_t v79;
  std::string __p;
  char v81[8];
  _BYTE v82[96];
  void **v83;
  const char *v84;
  std::string::size_type v85;
  char *v86;
  _QWORD *v87;
  void *v88;
  uint64_t v89;
  _BYTE v90[3];
  char v91;
  uint64_t (**v92)();
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v93;
  uint64_t v94;
  char *v95;
  _QWORD *v96;
  unint64_t v97;
  __int128 v98;
  _QWORD v99[4];

  v99[2] = *MEMORY[0x24BDAC8D0];
  v92 = (uint64_t (**)())"sdf/layer.cpp";
  v93 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"_SetData";
  v94 = 3900;
  v95 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(const SdfAbstractDataPtr &, const SdfSchemaBase *)";
  LOBYTE(v96) = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v82, "Setting layer data", &v92);
  v6 = sub_20C0FDDC4(a2);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6))
  {
    v92 = (uint64_t (**)())"sdf/layer.cpp";
    v93 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"_SetData";
    v94 = 3903;
    v95 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(const SdfAbstractDataPtr &, const SdfSchemaBase *)";
    LOBYTE(v96) = 0;
    pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v92, "!newData->IsEmpty()", 0);
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v81);
  if (a3 && *(_QWORD *)(a1 + 80) != a3)
  {
    v79 = a3;
    v7 = 1;
LABEL_13:
    v92 = off_24C5286E8;
    v10 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a2[1];
    if (v10)
    {
      if (*(_BYTE *)(sub_20BEB47BC(a2 + 1) + 14))
        v10 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
      else
        v10 = 0;
    }
    v93 = v10;
    sub_20BF1DD04((uint64_t *)&v93);
    v95 = 0;
    v96 = 0;
    v94 = (uint64_t)&v95;
    v11 = (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)sub_20C0A683C((uint64_t *)(a1 + 112));
    pxrInternal__aapl__pxrReserved__::SdfAbstractData::VisitSpecs(v11, (pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v92);
    v83 = (void **)&v95;
    v84 = (const char *)&v95;
    v85 = v94;
    v86 = (char *)v94;
    while (v84 != v86)
    {
      v14 = sub_20C0FDE68((uint64_t)&v83, v12, v13);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)(a1 + 80), *(const pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)(a1 + 112), (const pxrInternal__aapl__pxrReserved__::SdfAbstractData *)v14, &v98);
      v15 = sub_20C0A683C((uint64_t *)(a1 + 112));
      v18 = *(_QWORD *)(a1 + 80)
          + 72 * (*(unsigned int (**)(uint64_t, char *))(*(_QWORD *)v15 + 96))(v15, v14);
      if (*(_BYTE *)(v18 + 120))
        v19 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)(v18 + 56);
      else
        v19 = 0;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v98;
      while (__p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
      {
        v20 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B14((uint64_t *)&__p, v16, v17);
        if ((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField(v19, v20) & 1) == 0)
        {
          v23 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B14((uint64_t *)&__p, v21, v22);
          v89 = 0;
          pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>((uint64_t *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v14, v23, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v88, 0, 1);
          sub_20BF4C2D8((uint64_t)&v88);
        }
        sub_20C023C08(&__p);
      }
      v24 = sub_20C0FDE68((uint64_t)&v83, v16, v17);
      v27 = sub_20C0FDE68((uint64_t)&v83, v25, v26);
      IsInertSubtree = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInertSubtree((pxrInternal__aapl__pxrReserved__::SdfLayer **)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v27);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimDeleteSpec((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v24, IsInertSubtree, 1);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
      sub_20BEEB2B8((void ***)&__p);
      sub_20C0FE6F8((uint64_t)&v83);
    }
    v92 = off_24C5286E8;
    sub_20BFD7C28((uint64_t)&v94, v95);
    sub_20C0EA270(&v93);
    pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v92);
    v29 = *(const char **)(a1 + 112);
    v83 = (void **)off_24C528730;
    v84 = v29;
    v86 = 0;
    v87 = 0;
    v85 = (std::string::size_type)&v86;
    v30 = (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)sub_20C0FDDC4(a2);
    pxrInternal__aapl__pxrReserved__::SdfAbstractData::VisitSpecs(v30, (pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v83);
    for (i = 0; i != 12; ++i)
    {
      v32 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&(&v92)[i]);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(v32 + 1);
    }
    __p.__r_.__value_.__r.__words[0] = v85;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v86;
    while (1)
    {
      if (__p.__r_.__value_.__r.__words[0] == __p.__r_.__value_.__l.__size_)
      {
        if ((v7 & 1) != 0)
        {
          v98 = 0uLL;
          v99[0] = 0;
          __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
          sub_20BDE5038((void ***)&__p);
        }
        v56 = 12;
        v57 = v79;
        do
        {
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v90[v56 * 8]);
          sub_20BFD265C(&(&v92)[--v56]);
        }
        while (v56 * 8);
        v83 = (void **)off_24C528730;
        sub_20BFD7C28((uint64_t)&v85, v86);
        pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v83);
        if (!v79)
          v57 = *(_QWORD *)(a1 + 80);
        v92 = off_24C528778;
        v93 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a1;
        v96 = 0;
        v97 = 0;
        v94 = v57;
        v95 = (char *)&v96;
        v58 = (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)sub_20C0FDDC4(a2);
        pxrInternal__aapl__pxrReserved__::SdfAbstractData::VisitSpecs(v58, (pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v92);
        if (v97)
        {
          v98 = 0uLL;
          v99[0] = 0;
          sub_20BE71C2C((uint64_t *)&v98, v97);
          v59 = v95;
          if (v95 != (char *)&v96)
          {
            do
            {
              v60 = *((_QWORD *)v59 + 4) & 0xFFFFFFFFFFFFFFF8;
              if (v60)
              {
                v61 = (const char *)(v60 + 16);
                if (*(char *)(v60 + 39) < 0)
                  v61 = *(const char **)v61;
              }
              else
              {
                v61 = "";
              }
              pxrInternal__aapl__pxrReserved__::SdfPath::GetAsString((pxrInternal__aapl__pxrReserved__::SdfPath *)(v59 + 40), (uint64_t)&v88);
              if (v91 >= 0)
                v64 = &v88;
              else
                v64 = v88;
              pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"'%s' first seen at <%s>", v62, v63, v61, v64);
              v65 = (_OWORD *)*((_QWORD *)&v98 + 1);
              if (*((_QWORD *)&v98 + 1) >= v99[0])
              {
                v67 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v98 + 1) - v98) >> 3);
                v68 = v67 + 1;
                if (v67 + 1 > 0xAAAAAAAAAAAAAAALL)
                  sub_20BDDF694();
                if (0x5555555555555556 * ((uint64_t)(v99[0] - v98) >> 3) > v68)
                  v68 = 0x5555555555555556 * ((uint64_t)(v99[0] - v98) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v99[0] - v98) >> 3) >= 0x555555555555555)
                  v69 = 0xAAAAAAAAAAAAAAALL;
                else
                  v69 = v68;
                v87 = v99;
                if (v69)
                  v70 = (void **)sub_20BDE4FF4((uint64_t)v99, v69);
                else
                  v70 = 0;
                v71 = &v70[3 * v67];
                v83 = v70;
                v84 = (const char *)v71;
                v86 = (char *)&v70[3 * v69];
                v72 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v71[2] = (void *)__p.__r_.__value_.__r.__words[2];
                *(_OWORD *)v71 = v72;
                memset(&__p, 0, sizeof(__p));
                v85 = (std::string::size_type)(v71 + 3);
                sub_20BDF34C0((uint64_t *)&v98, &v83);
                v73 = *((_QWORD *)&v98 + 1);
                sub_20BDF3648((uint64_t)&v83);
                *((_QWORD *)&v98 + 1) = v73;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
              }
              else
              {
                v66 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(_QWORD *)(*((_QWORD *)&v98 + 1) + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
                *v65 = v66;
                memset(&__p, 0, sizeof(__p));
                *((_QWORD *)&v98 + 1) = (char *)v65 + 24;
              }
              if (v91 < 0)
                operator delete(v88);
              v74 = (char *)*((_QWORD *)v59 + 1);
              if (v74)
              {
                do
                {
                  v75 = v74;
                  v74 = *(char **)v74;
                }
                while (v74);
              }
              else
              {
                do
                {
                  v75 = (char *)*((_QWORD *)v59 + 2);
                  v76 = *(_QWORD *)v75 == (_QWORD)v59;
                  v59 = v75;
                }
                while (!v76);
              }
              v59 = v75;
            }
            while (v75 != (char *)&v96);
          }
          v83 = (void **)"sdf/layer.cpp";
          v84 = "_SetData";
          v85 = 4158;
          v86 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(const SdfAbstractDataPtr &, const SdfSchemaBase *)";
          LOBYTE(v87) = 0;
          v88 = &unk_24C528BB8;
          LODWORD(v89) = 0;
          v77 = *(const char **)(a1 + 472);
          if (v77[23] < 0)
            v77 = *(const char **)v77;
          pxrInternal__aapl__pxrReserved__::TfStringJoin("; ", (std::string **)&v98, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v83, (uint64_t *)&v88, (pxrInternal__aapl__pxrReserved__ *)"Omitted unrecognized fields setting data on @%s@: %s", v77, (const char *)p_p);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v83 = (void **)&v98;
          sub_20BDE5038(&v83);
        }
        v92 = off_24C528778;
        sub_20C102F0C((uint64_t)&v95, v96);
        pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)&v92);
        goto LABEL_118;
      }
      v35 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20C0FE7DC(&__p, v33, v34);
      if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath(v35))
      {
        v36 = sub_20C0FDDC4(a2);
        v37 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v37)
          v37 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        LODWORD(v88) = 1;
        (*(void (**)(__int128 *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)v36 + 136))(&v98, v36, v35, (uint64_t)v37 + 312);
        if (sub_20C0DE26C((pxrInternal__aapl__pxrReserved__::VtValue *)&v98))
        {
          if ((BYTE8(v98) & 4) != 0)
            v38 = (void **)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&v98 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v98);
          else
            v38 = (void **)&v98;
        }
        else
        {
          v38 = &v88;
        }
        v42 = *(_DWORD *)v38;
        sub_20BF4C2D8((uint64_t)&v98);
        if (v42 != 1)
        {
LABEL_57:
          v49 = 0;
          goto LABEL_64;
        }
        v43 = sub_20C0FDDC4(a2);
        v44 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v44)
          v44 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        (*(void (**)(__int128 *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)v43 + 136))(&v98, v43, v35, (uint64_t)v44 + 448);
        if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&v98))
        {
          if ((BYTE8(v98) & 4) != 0)
            v45 = (uint64_t *)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&v98 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v98);
          else
            v45 = (uint64_t *)&v98;
          v46 = *v45;
          if ((*v45 & 7) != 0)
          {
            v47 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
            do
              v48 = __ldxr(v47);
            while (__stxr(v48 + 2, v47));
            if ((v48 & 1) == 0)
              v46 &= 0xFFFFFFFFFFFFFFF8;
          }
        }
        else
        {
          v46 = 0;
        }
        sub_20BF4C2D8((uint64_t)&v98);
        v49 = v46 == 0;
        if ((v46 & 7) != 0)
        {
          v50 = (unsigned int *)(v46 & 0xFFFFFFFFFFFFFFF8);
          do
            v51 = __ldxr(v50);
          while (__stlxr(v51 - 2, v50));
        }
      }
      else
      {
        if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPropertyPath(v35))
          goto LABEL_57;
        v39 = sub_20C0FDDC4(a2);
        v40 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        if (!v40)
          v40 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
        LOBYTE(v88) = 0;
        (*(void (**)(__int128 *__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)v39 + 136))(&v98, v39, v35, (uint64_t)v40 + 64);
        if (sub_20BFB1AC0((pxrInternal__aapl__pxrReserved__::VtValue *)&v98))
        {
          if ((BYTE8(v98) & 4) != 0)
            v41 = (void **)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&v98 + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&v98);
          else
            v41 = (void **)&v98;
        }
        else
        {
          v41 = &v88;
        }
        v49 = *(_BYTE *)v41 == 0;
        sub_20BF4C2D8((uint64_t)&v98);
      }
LABEL_64:
      v52 = sub_20C0FDDC4(a2);
      v53 = (*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v52 + 96))(v52, v35);
      if (v7 && !*(_BYTE *)(*(_QWORD *)(a1 + 80) + 72 * v53 + 120))
      {
        v54 = v53;
        v55 = (int *)&(&v92)[v53];
        if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v55))
        {
          sub_20C01A074(v55, v35);
          sub_20C01A0C8((int *)&(&v92)[v54] + 1, (_DWORD *)v35 + 1);
        }
      }
      else
      {
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimCreateSpec((uint64_t *)a1, v35, v53, v49, 1);
      }
      sub_20C0FE970(&__p);
    }
  }
  v8 = sub_20C0A683C((uint64_t *)(a1 + 112));
  if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8))
  {
    v79 = a3;
    v7 = 0;
    goto LABEL_13;
  }
  v9 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a2[1];
  if (v9)
  {
    if (*(_BYTE *)(sub_20BEB47BC(a2 + 1) + 14))
      v9 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)*a2;
    else
      v9 = 0;
  }
  v92 = (uint64_t (**)())v9;
  sub_20BF1DD04((uint64_t *)&v92);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_AdoptData(a1, (uint64_t *)&v92);
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v92);
LABEL_118:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v81);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v82);
}

void sub_20C0F231C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a21);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t *v1;
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *v2;
  uint64_t result;
  int v4;
  _QWORD v5[4];
  char v6;

  v1 = (uint64_t *)((char *)this + 120);
  if (*((_QWORD *)this + 15)
    || (v5[0] = "sdf/layer.cpp",
        v5[1] = "IsDirty",
        v5[2] = 2981,
        v5[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty() const",
        v6 = 0,
        v4 = pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v5, "_stateDelegate", 0),
        result = 0,
        v4))
  {
    v2 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_20C0EBD60(v1);
    return pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::IsDirty(v2);
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetResolvedPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((_QWORD *)this + 59) + 24;
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::UpdateAssetInfo(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const char *v2;
  char *v3;
  uint64_t *v4;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *v6;
  uint64_t v7;
  void *v8;
  void *v10[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  _QWORD v14[3];
  __int16 v15;
  _BYTE v16[8];
  void *v17[2];
  void *v18[2];
  __int128 v19;
  __int128 __p;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (sub_20BFCE180(3))
  {
    v4 = (uint64_t *)*((_QWORD *)this + 59);
    if (*((char *)v4 + 23) < 0)
      v4 = (uint64_t *)*v4;
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::UpdateAssetInfo('%s')\n", v2, v3, v4);
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
  v5 = *((_QWORD *)this + 59);
  if (*(char *)(v5 + 119) < 0)
  {
    if (*(_QWORD *)(v5 + 104))
      goto LABEL_7;
  }
  else if (*(_BYTE *)(v5 + 119))
  {
LABEL_7:
    v6 = (pxrInternal__aapl__pxrReserved__::ArResolverContextBinder *)operator new(0x30uLL);
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::ArResolverContextBinder(v6, (const pxrInternal__aapl__pxrReserved__::ArResolverContext *)(v5 + 48));
    goto LABEL_10;
  }
  v6 = 0;
LABEL_10:
  sub_20C0EE45C();
  v14[0] = 0;
  v15 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v14, (unint64_t *)&qword_254985B50, 1);
  v7 = *((_QWORD *)this + 59);
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  v22 = 0;
  __p = 0u;
  v21 = 0u;
  *(_OWORD *)v18 = 0u;
  v19 = 0u;
  *(_OWORD *)v17 = 0u;
  pxrInternal__aapl__pxrReserved__::SdfLayer::_InitializeFromIdentifier((uint64_t)this, v7, v12, (uint64_t *)v10, (__int128 *)v17);
  sub_20BF4C2D8((uint64_t)&v21 + 8);
  if (SBYTE7(v21) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[1]);
  if (SHIBYTE(v18[0]) < 0)
    operator delete(v17[0]);
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v14);
  if (v6)
  {
    pxrInternal__aapl__pxrReserved__::ArResolverContextBinder::~ArResolverContextBinder(v6);
    operator delete(v8);
  }
  return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v16);
}

void sub_20C0F26F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;

  operator delete(v30);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0F276C(pxrInternal__aapl__pxrReserved__::VtValue *a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v3 = (uint64_t)a1;
  result = sub_20C102238(a1);
  if ((_DWORD)result)
  {
    result = sub_20C102238(a2);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(v3 + 8);
      if ((v5 & 4) != 0)
        v3 = (*(uint64_t (**)(uint64_t))((v5 & 0xFFFFFFFFFFFFFFF8) + 168))(v3);
      v6 = *((_QWORD *)a2 + 1);
      if ((v6 & 4) != 0)
        a2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v6 & 0xFFFFFFFFFFFFFFF8) + 168))(a2);
      return *(double *)v3 == *(double *)a2;
    }
  }
  return result;
}

uint64_t sub_20C0F2808(pxrInternal__aapl__pxrReserved__::VtDictionary *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;

  v4 = pxrInternal__aapl__pxrReserved__::VtDictionary::size(a1);
  if (v4 == pxrInternal__aapl__pxrReserved__::VtDictionary::size((pxrInternal__aapl__pxrReserved__::VtDictionary *)a2))
  {
    v5 = pxrInternal__aapl__pxrReserved__::VtDictionary::begin(a1);
    v7 = v6;
    v25 = v5;
    v26 = v6;
    v8 = pxrInternal__aapl__pxrReserved__::VtDictionary::end(a1);
    if (v9)
      v10 = v5 == v8;
    else
      v10 = 1;
    v11 = v10 && v7 == v9;
    v12 = v11;
    if (!v11)
    {
      v13 = v8;
      v14 = v9;
      do
      {
        v15 = pxrInternal__aapl__pxrReserved__::VtDictionary::find(a2, (const void **)(v5 + 32));
        v17 = v16;
        v18 = pxrInternal__aapl__pxrReserved__::VtDictionary::end((pxrInternal__aapl__pxrReserved__::VtDictionary *)a2);
        if (v17 == v19 && (!v17 || v15 == v18))
          break;
        if (!sub_20C0F276C((pxrInternal__aapl__pxrReserved__::VtValue *)(v5 + 56), (pxrInternal__aapl__pxrReserved__::VtValue *)(v15 + 56)))break;
        sub_20BF4D2AC(&v25, v20, v21);
        v5 = v25;
        v22 = !v14 || v25 == v13;
        v23 = v22 && v26 == v14;
        v12 = v23;
      }
      while (!v23);
    }
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

BOOL sub_20C0F2904(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  BOOL v10;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 1;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) != 0;
  if (a1[23])
  {
    v6 = v2 - 1;
    do
    {
      v8 = *a1++;
      v7 = v8;
      v9 = *a2++;
      v10 = v7 == v9;
      v2 = v7 != v9;
      v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::Reload(pxrInternal__aapl__pxrReserved__::SdfLayer *this, uint64_t a2)
{
  return pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(this, a2) == 1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ReloadLayers(uint64_t a1, const char *a2, char *a3)
{
  uint64_t v5;
  char *v6;
  char v7;
  _QWORD *v8;
  uint64_t (*v9)(uint64_t *);
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  uint64_t *v18;
  _BYTE v20[8];
  char *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  char v25;
  void *__p;
  void *v27;
  char v28;
  _BYTE v29[96];

  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Reloading %zu layer(s)", a2, a3, *(_QWORD *)(a1 + 16));
  v21 = "sdf/layer.cpp";
  v22 = "ReloadLayers";
  v23 = 1062;
  v24 = "static BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::ReloadLayers(const set<SdfLayerHandle> &, BOOL)";
  v25 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v29, &__p, &v21);
  if (v28 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
  __p = *(void **)a1;
  v27 = (void *)(a1 + 8);
  v7 = 1;
  while (__p != v27)
  {
    v8 = (_QWORD *)sub_20C0F2B4C(&__p, v5, v6);
    v9 = sub_20BFD2F78(v8);
    if (v10 & 1 | (unint64_t)v9)
    {
      v12 = (uint64_t *)sub_20C0F2B4C(&__p, v10, v11);
      v13 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v12);
      if (!pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(v13, (uint64_t)a2))
      {
        v21 = "sdf/layer.cpp";
        v22 = "ReloadLayers";
        v23 = 1072;
        v24 = "static BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::ReloadLayers(const set<SdfLayerHandle> &, BOOL)";
        v25 = 0;
        v16 = (uint64_t *)sub_20C0F2B4C(&__p, v14, v15);
        v18 = *(uint64_t **)(sub_20BFCF650(v16) + 472);
        if (*((char *)v18 + 23) < 0)
          v18 = (uint64_t *)*v18;
        pxrInternal__aapl__pxrReserved__::Tf_PostWarningHelper((uint64_t)&v21, (pxrInternal__aapl__pxrReserved__ *)"Unable to re-read @%s@", v17, v18);
        v7 = 0;
      }
    }
    sub_20C0F2BC8(&__p);
  }
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v20);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v29);
  return v7 & 1;
}

void sub_20C0F2B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0F2B4C(_QWORD *a1, uint64_t a2, char *a3)
{
  _QWORD v4[4];
  char v5;
  int v6;

  if (*a1 == a1[1])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator*";
    v4[2] = 271;
    v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrReserved__::TfWe"
            "akPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator*() [T = const std::set<pxrInternal__aapl__pxrR"
            "eserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return *a1 + 32;
}

void sub_20C0F2BC0()
{
  JUMPOUT(0x20C0F2B68);
}

_QWORD *sub_20C0F2BC8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<const std::set<pxrInternal__aapl__pxrRe"
            "served__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>>::operator++() [T = const std::set<pxrInter"
            "nal__aapl__pxrReserved__::TfWeakPtr<pxrInternal__aapl__pxrReserved__::SdfLayer>>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Import(uint64_t a1, pxrInternal__aapl__pxrReserved__ *a2)
{
  std::string::size_type size;
  uint64_t v5;
  std::string __p;

  pxrInternal__aapl__pxrReserved__::Sdf_ResolvePath(a2);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (!size)
  {
    v5 = 0;
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      return v5;
    goto LABEL_5;
  }
  v5 = pxrInternal__aapl__pxrReserved__::SdfLayer::_Read(a1, (uint64_t)a2, &__p, 0);
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
LABEL_5:
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_20C0F2CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ImportFromString(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_20BFCF6F4((uint64_t *)(a1 + 40));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 72))(v4, a1, a2);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::IsIncludedByDetachedLayerRules(const std::string *a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)atomic_load(&qword_254985B40);
  if (!v2)
    v2 = (uint64_t *)sub_20C1044E0();
  return pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::IsIncluded(v2, a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::SdfLayer::Find@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v5;
  _QWORD v6[3];
  __int16 v7;

  v6[0] = 0;
  v7 = 0;
  sub_20C0F2E00(a1, a2, (tbb::queuing_rw_mutex::scoped_lock *)v6, 0, (uint64_t *)&v5);
  sub_20C1034E8(a3, (uint64_t *)&v5);
  sub_20C103234(&v5);
  return sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v6);
}

void sub_20C0F2DDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *);
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)va);
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0F2E00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, tbb::queuing_rw_mutex::scoped_lock *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;
  _QWORD v11[3];
  _QWORD v12[2];
  char v13;
  __int128 v14;
  _OWORD v15[2];
  _OWORD v16[6];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v11[0] = 0;
  v11[1] = 0;
  v12[0] = 0;
  v12[1] = 0;
  v11[2] = v12;
  v13 = 0;
  v17 = 0;
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  memset(v16, 0, sizeof(v16));
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::_ComputeInfoToFindOrOpenLayer(a1, a2, (uint64_t)v11) & 1) == 0)
    goto LABEL_6;
  sub_20C0EE45C();
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)a3, (unint64_t *)&qword_254985B50, 0);
  sub_20C0F08EC((uint64_t)v16, (void **)v15 + 1, a3, a4, &v10);
  if (!v10)
  {
    sub_20C103234(&v10);
LABEL_6:
    *a5 = 0;
    return sub_20C102178((uint64_t)v11);
  }
  v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v10);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_WaitForInitializationAndCheckIfSuccessful(v8))
  {
    *a5 = (uint64_t)v10;
    sub_20BF1DD04(a5);
  }
  else
  {
    *a5 = 0;
  }
  sub_20C103234(&v10);
  return sub_20C102178((uint64_t)v11);
}

void sub_20C0F2F30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20C102178((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::FindRelativeToLayer(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t (*v8)(uint64_t *);
  char v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  const char *v13;
  char v14;

  v8 = sub_20BFD2F78(a1);
  if (!(v9 & 1 | (unint64_t)v8))
  {
    __p[0] = "sdf/layer.cpp";
    __p[1] = "FindRelativeToLayer";
    v12 = 1186;
    v13 = "static SdfLayerHandle pxrInternal__aapl__pxrReserved__::SdfLayer::FindRelativeToLayer(const SdfLayerHandle &, "
          "const string &, const FileFormatArguments &)";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Anchor layer is invalid");
LABEL_8:
    *a4 = 0;
    a4[1] = 0;
    return;
  }
  v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
    goto LABEL_8;
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(a1, a2, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::Find((uint64_t)__p, a3, a4);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

void sub_20C0F302C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ListAllTimeSamples(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v1;

  v1 = sub_20C0A683C((uint64_t *)this + 14);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 240))(v1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ListTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3;

  v3 = sub_20C0A683C((uint64_t *)this + 14);
  return (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v3 + 248))(v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamples(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2, double *a3, double *a4)
{
  uint64_t v7;

  v7 = sub_20C0A683C((uint64_t *)this + 14);
  return (*(uint64_t (**)(uint64_t, double *, double *, double))(*(_QWORD *)v7 + 256))(v7, a3, a4, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3;

  v3 = sub_20C0A683C((uint64_t *)this + 14);
  return (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v3 + 264))(v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetBracketingTimeSamplesForPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, double *a4, double *a5)
{
  uint64_t v9;

  v9 = sub_20C0A683C((uint64_t *)this + 14);
  return (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, double *, double *, double))(*(_QWORD *)v9 + 272))(v9, a2, a4, a5, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  uint64_t v7;

  v7 = sub_20C0A683C((uint64_t *)this + 14);
  return (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, pxrInternal__aapl__pxrReserved__::VtValue *, double))(*(_QWORD *)v7 + 280))(v7, a2, a4, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::QueryTimeSample(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7;

  v7 = sub_20C0A683C((uint64_t *)(a1 + 112));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v7 + 288))(v7, a2, a3, a4);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  const char *v8;
  const char *v9;
  char *v10;
  const std::type_info *v11;
  char *v12;
  const pxrInternal__aapl__pxrReserved__::VtValue *Typeid;
  const char *Text;
  uint64_t TypeName;
  const char *p_p;
  const char *v17;
  void *__p;
  char v19;
  char *v20;
  char *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  char v25;
  _QWORD v26[3];

  v26[2] = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    if (sub_20C0AA3E8(a4))
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>(this, a2, a4, 1, a3);
    }
    else
    {
      v10 = sub_20C0F34D0((uint64_t)this, a2);
      v20 = v10;
      pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v21);
      if (v21 != v10)
      {
        if (v10 == (char *)pxrInternal__aapl__pxrReserved__::VtValue::GetType(a4, v11, v12))
        {
          pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>(this, a2, a4, 1, a3);
        }
        else
        {
          Typeid = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v20);
          pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid(a4, Typeid, v26);
          if (v26[1])
          {
            pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>(this, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v26, 1, a3);
          }
          else
          {
            v21 = "sdf/layer.cpp";
            v22 = "SetTimeSample";
            v23 = 1318;
            v24 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(const SdfPath &, double, const VtValue &)";
            v25 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
            sub_20BF834B0((uint64_t)a4);
            TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v20);
            p_p = (const char *)&__p;
            if (v19 < 0)
              p_p = (const char *)__p;
            if (*(char *)(TypeName + 23) >= 0)
              v17 = (const char *)TypeName;
            else
              v17 = *(const char **)TypeName;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set time sample on <%s> to %s: expected a value of type \"%s\"", Text, p_p, v17);
            if (v19 < 0)
              operator delete(__p);
          }
          sub_20BF4C2D8((uint64_t)v26);
        }
      }
    }
  }
  else
  {
    v21 = "sdf/layer.cpp";
    v22 = "SetTimeSample";
    v23 = 1291;
    v24 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(const SdfPath &, double, const VtValue &)";
    v25 = 0;
    v8 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    v9 = (const char *)*((_QWORD *)this + 59);
    if (v9[23] < 0)
      v9 = *(const char **)v9;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v21, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set time sample on <%s>.  Layer @%s@ is not editable.", v8, v9);
  }
}

void sub_20C0F346C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  sub_20BF4C2D8(v18 - 72);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToEdit(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  if (*((_BYTE *)this + 513))
    return pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this) ^ 1;
  else
    return 0;
}

char *sub_20C0F34D0(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  int v5;
  int v6;
  unsigned __int8 v8;
  uint64_t v9;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v10;
  int HasField;
  int v12;
  const char *Text;
  unsigned int *v14;
  unsigned int v15;
  const std::type_info *v17;
  char *v18;
  uint64_t v19;
  char *Type;
  const char *v21;
  uint64_t v22;
  const char *v23;
  char v24;
  char *v25;

  v4 = sub_20C0A683C((uint64_t *)(a1 + 112));
  v5 = (*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v4 + 96))(v4, a2);
  v6 = v5;
  if (v5 != 8 && v5 != 1)
  {
    Type = "sdf/layer.cpp";
    v21 = "_GetExpectedTimeSampleValueType";
    if (v5)
    {
      v22 = 1261;
      v23 = "TfType pxrInternal__aapl__pxrReserved__::_GetExpectedTimeSampleValueType(const SdfLayer &, const SdfPath &)";
      v24 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set time sample at <%s> because spec is not an attribute or relationship");
    }
    else
    {
      v22 = 1254;
      v23 = "TfType pxrInternal__aapl__pxrReserved__::_GetExpectedTimeSampleValueType(const SdfLayer &, const SdfPath &)";
      v24 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set time sample at <%s> since spec does not exist");
    }
    pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v25);
    return v25;
  }
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v25);
  v19 = 0;
  if (v6 == 8)
  {
    v8 = atomic_load((unsigned __int8 *)&qword_254985B68);
    if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_254985B68))
    {
      qword_254985B60 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C524BC8, v17, v18);
      __cxa_guard_release(&qword_254985B68);
    }
    v9 = qword_254985B60;
  }
  else
  {
    v10 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v10)
      v10 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v22 = (uint64_t)&stru_24C51BCE0;
    LOWORD(v23) = 0;
    Type = (char *)&unk_24C5286B0;
    v21 = (const char *)&v19;
    HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((_QWORD *)a1, a2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v10 + 448), (uint64_t (***)(_QWORD, uint64_t))&Type);
    if ((_BYTE)v23)
      v12 = 0;
    else
      v12 = HasField;
    if (v12 != 1)
      goto LABEL_19;
    Type = (char *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FindType(*(unint64_t ****)(a1 + 80), (const pxrInternal__aapl__pxrReserved__::TfToken *)&v19);
    v9 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfValueTypeName::GetType((pxrInternal__aapl__pxrReserved__::SdfValueTypeName *)&Type);
  }
  v25 = (char *)v9;
LABEL_19:
  pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&Type);
  if (v25 == Type)
  {
    Type = "sdf/layer.cpp";
    v21 = "_GetExpectedTimeSampleValueType";
    v22 = 1277;
    v23 = "TfType pxrInternal__aapl__pxrReserved__::_GetExpectedTimeSampleValueType(const SdfLayer &, const SdfPath &)";
    v24 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&Type, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot determine value type for <%s>", Text);
  }
  if ((v19 & 7) != 0)
  {
    v14 = (unsigned int *)(v19 & 0xFFFFFFFFFFFFFFF8);
    do
      v15 = __ldxr(v14);
    while (__stlxr(v15 - 2, v14));
  }
  return v25;
}

void sub_20C0F3724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  unsigned int *v11;
  unsigned int v12;

  __cxa_guard_abort(&qword_254985B68);
  if ((a10 & 7) != 0)
  {
    v11 = (unsigned int *)(a10 & 0xFFFFFFFFFFFFFFF8);
    do
      v12 = __ldxr(v11);
    while (__stlxr(v12 - 2, v11));
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, double a4)
{
  const char *v8;
  const char *v9;
  uint64_t v10;
  unsigned __int8 v11;
  unint64_t Typeid;
  uint64_t v13;
  unint64_t v14;
  const pxrInternal__aapl__pxrReserved__::VtValue *v15;
  const char *Text;
  uint64_t TypeName;
  const char *p_p;
  const char *v19;
  const std::type_info *v20;
  char *v21;
  void *__p;
  char v23;
  char *v24;
  char *v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  char v29;
  _QWORD v30[2];
  _BYTE v31[8];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    v10 = *(_QWORD *)(a3 + 16);
    v11 = atomic_load((unsigned __int8 *)&qword_254985B78);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_254985B78))
    {
      qword_254985B70 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::TfType::_FindByTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527B78, v20, v21);
      __cxa_guard_release(&qword_254985B78);
    }
    Typeid = pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&qword_254985B70);
    if (sub_20BDE150C(v10, Typeid))
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(this, a2, (uint64_t (***)(_QWORD, uint64_t))a3, 1, a4);
    }
    else
    {
      v24 = sub_20C0F34D0((uint64_t)this, a2);
      pxrInternal__aapl__pxrReserved__::TfType::TfType((pxrInternal__aapl__pxrReserved__::TfType *)&v25);
      if (v24 != v25)
      {
        v13 = *(_QWORD *)(a3 + 16);
        v14 = pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v24);
        if (!strcmp((const char *)(*(_QWORD *)(v13 + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(*(_QWORD *)(v14 + 8) & 0x7FFFFFFFFFFFFFFFLL)))
        {
          pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>(this, a2, (uint64_t (***)(_QWORD, uint64_t))a3, 1, a4);
        }
        else
        {
          v32 = 0;
          (**(void (***)(uint64_t, _BYTE *))a3)(a3, v31);
          v15 = (const pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::TfType::GetTypeid((pxrInternal__aapl__pxrReserved__::TfType *)&v24);
          pxrInternal__aapl__pxrReserved__::VtValue::CastToTypeid((pxrInternal__aapl__pxrReserved__::VtValue *)v31, v15, v30);
          if (v30[1])
          {
            pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>(this, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)v30, 1, a4);
          }
          else
          {
            v25 = "sdf/layer.cpp";
            v26 = "SetTimeSample";
            v27 = 1374;
            v28 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(const SdfPath &, double, const SdfAbstr"
                  "actDataConstValue &)";
            v29 = 0;
            Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
            sub_20BF834B0((uint64_t)v31);
            TypeName = pxrInternal__aapl__pxrReserved__::TfType::GetTypeName((pxrInternal__aapl__pxrReserved__::TfType *)&v24);
            p_p = (const char *)&__p;
            if (v23 < 0)
              p_p = (const char *)__p;
            if (*(char *)(TypeName + 23) >= 0)
              v19 = (const char *)TypeName;
            else
              v19 = *(const char **)TypeName;
            pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Can't set time sample on <%s> to %s: expected a value of type \"%s\"", Text, p_p, v19);
            if (v23 < 0)
              operator delete(__p);
          }
          sub_20BF4C2D8((uint64_t)v30);
          sub_20BF4C2D8((uint64_t)v31);
        }
      }
    }
  }
  else
  {
    v25 = "sdf/layer.cpp";
    v26 = "SetTimeSample";
    v27 = 1345;
    v28 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeSample(const SdfPath &, double, const SdfAbstractDataConstValue &)";
    v29 = 0;
    v8 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    v9 = (const char *)*((_QWORD *)this + 59);
    if (v9[23] < 0)
      v9 = *(const char **)v9;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set time sample on <%s>.  Layer @%s@ is not editable.", v8, v9);
  }
}

void sub_20C0F3A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  __cxa_guard_abort(&qword_254985B78);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseTimeSample(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, double a3)
{
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *Text;
  char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  char v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    v8 = sub_20C0A683C((uint64_t *)this + 14);
    if (((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v8 + 72))(v8, a2) & 1) != 0)
    {
      v9 = sub_20C0A683C((uint64_t *)this + 14);
      if ((*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, _QWORD, double))(*(_QWORD *)v9 + 280))(v9, a2, 0, a3))
      {
        v12 = 0;
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetTimeSample<pxrInternal__aapl__pxrReserved__::VtValue>(this, a2, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v11, 1, a3);
        sub_20BF4C2D8((uint64_t)&v11);
      }
    }
    else
    {
      v11 = "sdf/layer.cpp";
      v12 = "EraseTimeSample";
      v13 = 1394;
      v14 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseTimeSample(const SdfPath &, double)";
      v15 = 0;
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot SetTimeSample at <%s> since spec does not exist", Text);
    }
  }
  else
  {
    v11 = "sdf/layer.cpp";
    v12 = "EraseTimeSample";
    v13 = 1389;
    v14 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseTimeSample(const SdfPath &, double)";
    v15 = 0;
    v6 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    v7 = (const char *)*((_QWORD *)this + 59);
    if (v7[23] < 0)
      v7 = *(const char **)v7;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v11, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set time sample on <%s>.  Layer @%s@ is not editable.", v6, v7);
  }
}

void sub_20C0F3C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3;

  v3 = sub_20C0A683C((uint64_t *)this + 14);
  return (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v3 + 72))(v3, a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetColorConfiguration@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0F3CE0(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 24), a2);
}

uint64_t sub_20C0F3CE0@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  _BYTE v16[8];
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v17 = 0;
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, v6, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v16) & 1) != 0)
  {
    v7 = sub_20C1035A4((pxrInternal__aapl__pxrReserved__::VtValue *)v16);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a3, *(void **)v7, *(_QWORD *)(v7 + 8));
    }
    else
    {
      v9 = *(_OWORD *)v7;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)a3 = v9;
    }
    v13 = a3 + 24;
    if (*(char *)(v8 + 47) < 0)
    {
LABEL_12:
      sub_20BDDBFAC((_BYTE *)v13, *(void **)(v8 + 24), *(_QWORD *)(v8 + 32));
      return sub_20BF4C2D8((uint64_t)v16);
    }
  }
  else
  {
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(a1[10], a2);
    v11 = sub_20C1035A4(Fallback);
    v8 = v11;
    if (*(char *)(v11 + 23) < 0)
    {
      sub_20BDDBFAC((_BYTE *)a3, *(void **)v11, *(_QWORD *)(v11 + 8));
    }
    else
    {
      v12 = *(_OWORD *)v11;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(v11 + 16);
      *(_OWORD *)a3 = v12;
    }
    v13 = a3 + 24;
    if (*(char *)(v8 + 47) < 0)
      goto LABEL_12;
  }
  v14 = *(_OWORD *)(v8 + 24);
  *(_QWORD *)(v13 + 16) = *(_QWORD *)(v8 + 40);
  *(_OWORD *)v13 = v14;
  return sub_20BF4C2D8((uint64_t)v16);
}

void sub_20C0F3E1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 23) < 0)
    operator delete(*(void **)v2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetColorConfiguration(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfAssetPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *p_p;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  void *v7[2];
  uint64_t v8;
  __int128 __p;
  uint64_t v10;
  char *v11[3];

  v11[2] = *(char **)MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC(v7, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v8 = *((_QWORD *)a2 + 2);
  }
  p_p = (pxrInternal__aapl__pxrReserved__::SdfPath *)&__p;
  if (*((char *)a2 + 47) < 0)
  {
    p_p = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDDBFAC(&__p, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    __p = *(_OWORD *)((char *)a2 + 24);
    v10 = *((_QWORD *)a2 + 5);
  }
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(p_p);
  v11[1] = (char *)&off_24C5255B8;
  sub_20C00A0DC(v11, (__int128 *)v7);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 24), (const pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  sub_20BF4C2D8((uint64_t)v11);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
}

void sub_20C0F3F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasColorConfiguration(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 24), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearColorConfiguration(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 24));
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *FieldDefinition;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *v13;
  std::type_info *FallbackValue;
  char *v15;
  unint64_t v16;
  const char *v17;
  const char *Text;
  const char *v19;
  char *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 513) || pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    v20 = "sdf/layer.cpp";
    v21 = "EraseField";
    v22 = 3814;
    v23 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(const SdfPath &, const TfToken &)";
    v24 = 0;
    v16 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v16)
    {
      v17 = (const char *)(v16 + 16);
      if (*(char *)(v16 + 39) < 0)
        v17 = *(const char **)v17;
    }
    else
    {
      v17 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    v19 = (const char *)*((_QWORD *)this + 59);
    if (v19[23] < 0)
      v19 = *(const char **)v19;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v20, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot erase %s on <%s>. Layer @%s@ is not editable.", v17, Text, v19);
  }
  else
  {
    v6 = sub_20C0A683C((uint64_t *)this + 14);
    if ((*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, _QWORD))(*(_QWORD *)v6 + 112))(v6, a2, a3, 0))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)*((_QWORD *)this + 10);
      v8 = (_QWORD *)*((_QWORD *)v7 + 116);
      v9 = (_QWORD *)*((_QWORD *)v7 + 117);
      if (v8 == v9)
        goto LABEL_7;
      while ((*v8 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8))
      {
        if (++v8 == v9)
          goto LABEL_7;
      }
      v10 = sub_20C0A683C((uint64_t *)this + 14);
      v11 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v10 + 96))(v10, a2);
      if (!*((_BYTE *)v7 + 72 * v11 + 120)
        || !pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)v7 + 72 * v11 + 56), a3)|| (FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v7, a3)) == 0|| (v13 = FieldDefinition, pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(this, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v20), FallbackValue = (std::type_info *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(v13), LOBYTE(v13) = pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v20, FallbackValue, v15), sub_20BF4C2D8((uint64_t)&v20), (v13 & 1) == 0))
      {
LABEL_7:
        v21 = 0;
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>((uint64_t *)this, a2, a3, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v20, 0, 1);
        sub_20BF4C2D8((uint64_t)&v20);
      }
    }
  }
}

void sub_20C0F4288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetColorManagementSystem@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0F42F4(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 32), a2);
}

uint64_t sub_20C0F42F4@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, unsigned int **a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  unsigned int **v12;
  unsigned int *v13;
  char v15[8];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v16 = 0;
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, v6, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v15) & 1) != 0)
  {
    v7 = (unsigned int **)sub_20BFB46E8((pxrInternal__aapl__pxrReserved__::VtValue *)v15);
    v8 = *v7;
    *a3 = *v7;
    if ((v8 & 7) == 0)
      return sub_20BF4C2D8((uint64_t)v15);
    v9 = (unsigned int *)((unint64_t)v8 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
  }
  else
  {
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(a1[10], a2);
    v12 = (unsigned int **)sub_20BFB46E8(Fallback);
    v13 = *v12;
    *a3 = *v12;
    if ((v13 & 7) == 0)
      return sub_20BF4C2D8((uint64_t)v15);
    v9 = (unsigned int *)((unint64_t)v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
  }
  if ((v10 & 1) == 0)
    *a3 = v9;
  return sub_20BF4C2D8((uint64_t)v15);
}

void sub_20C0F43E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetColorManagementSystem(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v3;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  _QWORD v14[3];

  v3 = this;
  v14[2] = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    this = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v4 = this;
  }
  v5 = *(_QWORD *)a2;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v14[0] = v5;
  v14[1] = (char *)&off_24C5207B8 + 1;
  if ((v5 & 7) != 0)
  {
    v9 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v14[0] = v5 & 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v3, v8, (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v4 + 32), (const pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  result = sub_20BF4C2D8((uint64_t)v14);
  if ((v5 & 7) != 0)
  {
    v12 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return result;
}

void sub_20C0F4510(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  if (v2)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasColorManagementSystem(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 32), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearColorManagementSystem(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 32));
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetComment(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v3;
  unint64_t v4;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  void *__p[2];
  uint64_t v7;
  unsigned int *v8[3];

  v3 = a1;
  v8[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    a1 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v4 = (unint64_t)a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  v8[1] = (unsigned int *)&off_24C520700;
  sub_20BF77444(v8, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v3, v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 48), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_20BF4C2D8((uint64_t)v8);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20C0F46E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetComment@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0F4760(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 48), a2);
}

uint64_t sub_20C0F4760@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **a1@<X0>, const pxrInternal__aapl__pxrReserved__::TfToken *a2@<X1>, uint64_t a3@<X8>)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  __int128 v9;
  _BYTE v11[8];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a1);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, v6, a2, (pxrInternal__aapl__pxrReserved__::VtValue *)v11) & 1) != 0)
  {
    v7 = sub_20BFB2D9C((pxrInternal__aapl__pxrReserved__::VtValue *)v11);
  }
  else
  {
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(a1[10], a2);
    v7 = sub_20BFB2D9C(Fallback);
  }
  if (*(char *)(v7 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a3, *(void **)v7, *(_QWORD *)(v7 + 8));
  }
  else
  {
    v9 = *(_OWORD *)v7;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(v7 + 16);
    *(_OWORD *)a3 = v9;
  }
  return sub_20BF4C2D8((uint64_t)v11);
}

void sub_20C0F482C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetDefaultPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v3;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v8;
  unsigned int *v9;
  unsigned int v10;
  uint64_t result;
  unsigned int *v12;
  unsigned int v13;
  _QWORD v14[3];

  v3 = this;
  v14[2] = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    this = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v4 = this;
  }
  v5 = *(_QWORD *)a2;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      v5 &= 0xFFFFFFFFFFFFFFF8;
  }
  v8 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v14[0] = v5;
  v14[1] = (char *)&off_24C5207B8 + 1;
  if ((v5 & 7) != 0)
  {
    v9 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 2, v9));
    if ((v10 & 1) == 0)
      v14[0] = v5 & 0xFFFFFFFFFFFFFFF8;
  }
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v3, v8, (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v4 + 96), (const pxrInternal__aapl__pxrReserved__::VtValue *)v14);
  result = sub_20BF4C2D8((uint64_t)v14);
  if ((v5 & 7) != 0)
  {
    v12 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v13 = __ldxr(v12);
    while (__stlxr(v13 - 2, v12));
  }
  return result;
}

void sub_20C0F4954(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v5;
  unsigned int v6;
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  if (v2)
  {
    v5 = (unsigned int *)(v3 & 0xFFFFFFFFFFFFFFF8);
    do
      v6 = __ldxr(v5);
    while (__stlxr(v6 - 2, v5));
  }
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetDefaultPrim@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, unsigned int **a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0F42F4(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 96), a2);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearDefaultPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 96));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasDefaultPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 96), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetDocumentation(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v3;
  unint64_t v4;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  void *__p[2];
  uint64_t v7;
  unsigned int *v8[3];

  v3 = a1;
  v8[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    a1 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v4 = (unint64_t)a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  v8[1] = (unsigned int *)&off_24C520700;
  sub_20BF77444(v8, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v3, v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 136), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_20BF4C2D8((uint64_t)v8);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20C0F4B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetDocumentation@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0F4760(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 136), a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 320);
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v8[1] = &unk_24C52064B;
  *(double *)v8 = a2;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, v5, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_20BF4C2D8((uint64_t)v8);
}

void sub_20C0F4CA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfLayer::GetStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v1;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  const pxrInternal__aapl__pxrReserved__::TfToken *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  double v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v1 = this;
  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  v9 = 0;
  v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v2 + 320);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v1, v3, v4, (pxrInternal__aapl__pxrReserved__::VtValue *)v8) & 1) != 0)Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)v8;
  else
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v1[10], v4);
  v6 = *(double *)sub_20BF78F24(Fallback);
  sub_20BF4C2D8((uint64_t)v8);
  return v6;
}

void sub_20C0F4D80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 320), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearStartTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 320));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 144);
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v8[1] = &unk_24C52064B;
  *(double *)v8 = a2;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, v5, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_20BF4C2D8((uint64_t)v8);
}

void sub_20C0F4EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfLayer::GetEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v1;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  const pxrInternal__aapl__pxrReserved__::TfToken *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  double v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v1 = this;
  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  v9 = 0;
  v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v2 + 144);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v1, v3, v4, (pxrInternal__aapl__pxrReserved__::VtValue *)v8) & 1) != 0)Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)v8;
  else
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v1[10], v4);
  v6 = *(double *)sub_20BF78F24(Fallback);
  sub_20BF4C2D8((uint64_t)v8);
  return v6;
}

void sub_20C0F4FC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 144), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearEndTimeCode(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 144));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 440);
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v8[1] = &unk_24C52064B;
  *(double *)v8 = a2;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, v5, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_20BF4C2D8((uint64_t)v8);
}

void sub_20C0F5134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfLayer::GetTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;
  double FramesPerSecond;
  _BYTE v6[8];
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v7 = 0;
  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 440), (pxrInternal__aapl__pxrReserved__::VtValue *)v6))FramesPerSecond = *(double *)sub_20BF78F24((pxrInternal__aapl__pxrReserved__::VtValue *)v6);
  else
    FramesPerSecond = pxrInternal__aapl__pxrReserved__::SdfLayer::GetFramesPerSecond((pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)this);
  sub_20BF4C2D8((uint64_t)v6);
  return FramesPerSecond;
}

void sub_20C0F520C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfLayer::GetFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v1;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  const pxrInternal__aapl__pxrReserved__::TfToken *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  double v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v1 = this;
  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  v9 = 0;
  v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v2 + 168);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v1, v3, v4, (pxrInternal__aapl__pxrReserved__::VtValue *)v8) & 1) != 0)Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)v8;
  else
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v1[10], v4);
  v6 = *(double *)sub_20BF78F24(Fallback);
  sub_20BF4C2D8((uint64_t)v8);
  return v6;
}

void sub_20C0F52E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 440), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearTimeCodesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 440));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this, double a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _QWORD v8[3];

  v8[2] = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 168);
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v8[1] = &unk_24C52064B;
  *(double *)v8 = a2;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, v5, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_20BF4C2D8((uint64_t)v8);
}

void sub_20C0F5454(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 168), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearFramesPerSecond(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 168));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetFramePrecision(pxrInternal__aapl__pxrReserved__::SdfLayer *this, int a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  int v8;
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 160);
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v9 = &unk_24C52008B;
  v8 = a2;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, v5, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v8);
  return sub_20BF4C2D8((uint64_t)&v8);
}

void sub_20C0F55C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetFramePrecision(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v1;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  const pxrInternal__aapl__pxrReserved__::TfToken *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  uint64_t v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v1 = this;
  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  v9 = 0;
  v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v2 + 160);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v1, v3, v4, (pxrInternal__aapl__pxrReserved__::VtValue *)v8) & 1) != 0)Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)v8;
  else
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v1[10], v4);
  v6 = *(unsigned int *)sub_20BFB1BA8(Fallback);
  sub_20BF4C2D8((uint64_t)v8);
  return v6;
}

void sub_20C0F5694(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasFramePrecision(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 160), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearFramePrecision(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 160));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetOwner@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0F4760(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 232), a2);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetOwner(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v3;
  unint64_t v4;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  void *__p[2];
  uint64_t v7;
  unsigned int *v8[3];

  v3 = a1;
  v8[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    a1 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v4 = (unint64_t)a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  v8[1] = (unsigned int *)&off_24C520700;
  sub_20BF77444(v8, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v3, v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 232), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_20BF4C2D8((uint64_t)v8);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20C0F588C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 232), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 232));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSessionOwner@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, uint64_t a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;

  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return sub_20C0F4760(this, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 296), a2);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetSessionOwner(pxrInternal__aapl__pxrReserved__::SdfPath *a1, uint64_t a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v3;
  unint64_t v4;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  void *__p[2];
  uint64_t v7;
  unsigned int *v8[3];

  v3 = a1;
  v8[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v4 = atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    a1 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v4 = (unint64_t)a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    a1 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BDDBFAC(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(a1);
  v8[1] = (unsigned int *)&off_24C520700;
  sub_20BF77444(v8, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(v3, v5, (const pxrInternal__aapl__pxrReserved__::TfToken *)(v4 + 296), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_20BF4C2D8((uint64_t)v8);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_20C0F5AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasSessionOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 296), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearSessionOwner(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 296));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetHasOwnedSubLayers(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v1;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v2;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v3;
  const pxrInternal__aapl__pxrReserved__::TfToken *v4;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  uint64_t v6;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;

  v1 = this;
  v10 = *MEMORY[0x24BDAC8D0];
  v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v2)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v2 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  v9 = 0;
  v3 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v2 + 184);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v1, v3, v4, (pxrInternal__aapl__pxrReserved__::VtValue *)v8) & 1) != 0)Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)v8;
  else
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v1[10], v4);
  v6 = *(unsigned __int8 *)sub_20BFB0910(Fallback);
  sub_20BF4C2D8((uint64_t)v8);
  return v6;
}

void sub_20C0F5C3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetHasOwnedSubLayers(pxrInternal__aapl__pxrReserved__::SdfLayer *this, char a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  const pxrInternal__aapl__pxrReserved__::TfToken *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _BYTE v8[8];
  void *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 184);
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v4);
  v9 = &unk_24C51FCF3;
  v8[0] = a2;
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, v5, (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  return sub_20BF4C2D8((uint64_t)v8);
}

void sub_20C0F5D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetCustomLayerData@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v2;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v8;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;

  v2 = this;
  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  v11 = 0;
  v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v4 + 80);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v2, v5, v6, (pxrInternal__aapl__pxrReserved__::VtValue *)v10) & 1) != 0)Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)v10;
  else
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v2[10], v6);
  v8 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_20BF4D3FC(Fallback);
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v8);
  return sub_20BF4C2D8((uint64_t)v10);
}

void sub_20C0F5DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetCustomLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _QWORD **v7;
  unsigned int *v8[3];

  v8[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v7, a2);
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  v8[1] = (unsigned int *)&off_24C51D8C8;
  sub_20BF4D058(v8, (const void ****)&v7);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 80), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_20BF4C2D8((uint64_t)v8);
  sub_20BF49F14(&v7, 0);
}

void sub_20C0F5ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD **a9, char a10)
{
  sub_20BF4C2D8((uint64_t)&a10);
  sub_20BF49F14(&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasCustomLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 80), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearCustomLayerData(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 80));
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetExpressionVariables@<X0>(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **this@<X0>, pxrInternal__aapl__pxrReserved__::VtDictionary *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase **v2;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v4;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  const pxrInternal__aapl__pxrReserved__::TfToken *v6;
  pxrInternal__aapl__pxrReserved__::VtValue *Fallback;
  const pxrInternal__aapl__pxrReserved__::VtDictionary *v8;
  _BYTE v10[8];
  uint64_t v11;
  uint64_t v12;

  v2 = this;
  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
  {
    this = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v4 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)this;
  }
  v11 = 0;
  v5 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)this);
  v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)((char *)v4 + 152);
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::HasField((pxrInternal__aapl__pxrReserved__::SdfLayer *)v2, v5, v6, (pxrInternal__aapl__pxrReserved__::VtValue *)v10) & 1) != 0)Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)v10;
  else
    Fallback = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFallback(v2[10], v6);
  v8 = (const pxrInternal__aapl__pxrReserved__::VtDictionary *)sub_20BF4D3FC(Fallback);
  pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary(a2, v8);
  return sub_20BF4C2D8((uint64_t)v10);
}

void sub_20C0F6074(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetExpressionVariables(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::VtDictionary *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v4;
  pxrInternal__aapl__pxrReserved__::SdfPath *v5;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v6;
  _QWORD **v7;
  unsigned int *v8[3];

  v8[2] = *(unsigned int **)MEMORY[0x24BDAC8D0];
  v4 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v4)
    v4 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::VtDictionary::VtDictionary((pxrInternal__aapl__pxrReserved__::VtDictionary *)&v7, a2);
  v6 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v5);
  v8[1] = (unsigned int *)&off_24C51D8C8;
  sub_20BF4D058(v8, (const void ****)&v7);
  pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v6, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v4 + 152), (const pxrInternal__aapl__pxrReserved__::VtValue *)v8);
  sub_20BF4C2D8((uint64_t)v8);
  sub_20BF49F14(&v7, 0);
}

void sub_20C0F615C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD **a9, char a10)
{
  sub_20BF4C2D8((uint64_t)&a10);
  sub_20BF49F14(&a9, 0);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasExpressionVariables(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 152), 0);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ClearExpressionVariables(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  const pxrInternal__aapl__pxrReserved__::SdfPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v3;

  v2 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v3 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v3)
    v3 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, v2, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v3 + 152));
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t **v3;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;

  v3 = (uint64_t **)((char *)this + 88);
  v4 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v3, v4, &v7);
  v5 = v7;
  *a2 = v7;
  if (v5)
  {
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 + 1, v5));
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v7);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrims(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t **v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v4;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v4);
  v3 = (uint64_t **)sub_20C0B0CA4(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C0F62D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetRootPrims(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, __int128 *a2)
{
  uint64_t **v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v4;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, &v4);
  v3 = (uint64_t **)sub_20C0B0CA4(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetNameChildren(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C0F632C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::InsertRootPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, int a3)
{
  uint64_t **v5;
  _BOOL8 inserted;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v8;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, &v8);
  v5 = (uint64_t **)sub_20C0B0CA4(&v8);
  inserted = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::InsertNameChild(v5, a2, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
  return inserted;
}

void sub_20C0F6394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveRootPrim(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  uint64_t **v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v4;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, &v4);
  v3 = (uint64_t **)sub_20C0B0CA4(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveNameChild(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C0F63EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrimOrder(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int **v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v4;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v4);
  v3 = (unsigned int **)sub_20C0B0CA4(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildrenOrder(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C0F6444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetRootPrimOrder(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, _QWORD *a2)
{
  unsigned int **v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v4;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, &v4);
  v3 = (unsigned int **)sub_20C0B0CA4(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::SetNameChildrenOrder(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C0F649C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::InsertInRootPrimOrder(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2, uint64_t a3)
{
  unsigned int **v5;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v6;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v6);
  v5 = (unsigned int **)sub_20C0B0CA4(&v6);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::InsertInNameChildrenOrder(v5, a2, a3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
}

void sub_20C0F64FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromRootPrimOrder(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  unsigned int **v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v4;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v4);
  v3 = (unsigned int **)sub_20C0B0CA4(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveFromNameChildrenOrder(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C0F6554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromRootPrimOrderByIndex(pxrInternal__aapl__pxrReserved__::SdfLayer *this, int a2)
{
  unsigned int **v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v4;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v4);
  v3 = (unsigned int **)sub_20C0B0CA4(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveFromNameChildrenOrderByIndex(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C0F65AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ApplyRootPrimOrder(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, uint64_t a2)
{
  unsigned int **v3;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v4;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, &v4);
  v3 = (unsigned int **)sub_20C0B0CA4(&v4);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::ApplyNameChildrenOrder(v3, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v4);
}

void sub_20C0F6604(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;

  v3 = (char *)this + 24;
  v4 = (std::__shared_weak_count_vtbl *)operator new(0x48uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_SubLayerListEditor::Sdf_SubLayerListEditor(v4, v3);
  v5 = (std::__shared_weak_count *)operator new(0x20uLL);
  v6 = v5;
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C5287C0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = v4;
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v5;
  do
    v8 = __ldxr(p_shared_owners);
  while (__stxr(v8 + 1, p_shared_owners));
  *(_DWORD *)(a2 + 16) = 3;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_20C0F66D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerPaths(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v6;
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(a1, (uint64_t)&v6);
  sub_20C0F6780(&v6, a2);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C0F676C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

unsigned int *sub_20C0F6780(unsigned int *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v4 = *(_QWORD *)a1;
  if (v4)
  {
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 112))(v4, a1[4]);
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[1] - *v5) >> 3);
  }
  else
  {
    v6 = 0;
  }
  sub_20C103764(a1, 0, v6, a2);
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetNumSubLayerPaths(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  unint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  _BYTE v6[8];
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(this, (uint64_t)v6);
  v1 = sub_20BFD19BC((uint64_t)v6);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20C0F685C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::InsertSubLayerPath(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, __int128 *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;
  std::__shared_weak_count *v9;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(a1, (uint64_t)&v8);
  if (a3 == -1)
    a3 = sub_20BFD19BC((uint64_t)&v8);
  sub_20C0F6910(&v8, a3, a2);
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20C0F68FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C0F6910(unsigned int *a1, int a2, __int128 *a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD v8[3];
  void **v9;

  if (a2 == -1)
  {
    v5 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      v6 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v5 + 112))(v5, a1[4]);
      a2 = -1431655765 * ((v6[1] - *v6) >> 3);
    }
    else
    {
      a2 = 0;
    }
  }
  v7 = a2;
  sub_20BED7D38(v8, 1uLL, a3);
  sub_20C103764(a1, v7, 0, v8);
  v9 = (void **)v8;
  sub_20BDE5038(&v9);
}

void sub_20C0F69B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BDE5038((void ***)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveSubLayerPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this, int a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unsigned int v6;
  std::__shared_weak_count *v7;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(this, (uint64_t)&v6);
  sub_20C0F6A54(&v6, a2);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20C0F6A40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)va);
  _Unwind_Resume(a1);
}

void sub_20C0F6A54(unsigned int *a1, uint64_t a2)
{
  _QWORD v2[3];
  void **v3;

  memset(v2, 0, sizeof(v2));
  sub_20C103764(a1, a2, 1, v2);
  v3 = (void **)v2;
  sub_20BDE5038(&v3);
}

void sub_20C0F6A98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BDE5038(&a12);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffsets(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v5;
  uint64_t v6;
  void **v7;
  void *__p[3];
  void **v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v4 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v5)
    v5 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  memset(__p, 0, sizeof(__p));
  v6 = sub_20C0A683C((uint64_t *)this + 14);
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 136))(&v9, v6, v4, (uint64_t)v5 + 368);
  if (sub_20BFD4578((pxrInternal__aapl__pxrReserved__::VtValue *)&v9))
  {
    if ((v10 & 4) != 0)
      v7 = (void **)(*(uint64_t (**)(void ***))((v10 & 0xFFFFFFFFFFFFFFF8) + 168))(&v9);
    else
      v7 = v9;
  }
  else
  {
    v7 = __p;
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_20BFD45F0(a2, *v7, (uint64_t)v7[1], ((_BYTE *)v7[1] - (_BYTE *)*v7) >> 4);
  sub_20BF4C2D8((uint64_t)&v9);
  if (__p[0])
    operator delete(__p[0]);
}

void sub_20C0F6BC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, char a12)
{
  sub_20BF4C2D8((uint64_t)&a12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

double pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffset(pxrInternal__aapl__pxrReserved__::SdfLayer *this, unsigned int a2)
{
  _BYTE *v3;
  _QWORD v5[4];
  char v6;
  void *__p;
  _BYTE *v8;
  __int128 v9;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffsets(this, &__p);
  if ((a2 & 0x80000000) == 0)
  {
    v3 = __p;
    if (a2 < (unint64_t)((v8 - (_BYTE *)__p) >> 4))
    {
      v9 = *((_OWORD *)__p + a2);
LABEL_5:
      v8 = v3;
      operator delete(v3);
      return *(double *)&v9;
    }
  }
  v5[0] = "sdf/layer.cpp";
  v5[1] = "GetSubLayerOffset";
  v5[2] = 1993;
  v5[3] = "SdfLayerOffset pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerOffset(int) const";
  v6 = 0;
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v5, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid sublayer index");
  pxrInternal__aapl__pxrReserved__::SdfLayerOffset::SdfLayerOffset((double *)&v9, 0.0, 1.0);
  v3 = __p;
  if (__p)
    goto LABEL_5;
  return *(double *)&v9;
}

void sub_20C0F6CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerOffset(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfLayerOffset *a2, unsigned int a3)
{
  uint64_t v6;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v7;
  uint64_t v8;
  void **p_p;
  pxrInternal__aapl__pxrReserved__::SdfPath *v10;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v12;
  void *v13;
  _BYTE *v14;
  uint64_t v15;
  void *__p;
  const char *v17;
  uint64_t v18;
  const char *v19;
  char v20;
  void **v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v6 = pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this);
  v7 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  if (!v7)
    v7 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
  __p = 0;
  v17 = 0;
  v18 = 0;
  v8 = sub_20C0A683C((uint64_t *)this + 14);
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 136))(&v21, v8, v6, (uint64_t)v7 + 368);
  if (sub_20BFD4578((pxrInternal__aapl__pxrReserved__::VtValue *)&v21))
  {
    if ((v22 & 4) != 0)
      p_p = (void **)(*(uint64_t (**)(void ***))((v22 & 0xFFFFFFFFFFFFFFF8) + 168))(&v21);
    else
      p_p = v21;
  }
  else
  {
    p_p = &__p;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_20BFD45F0(&v13, *p_p, (uint64_t)p_p[1], ((_BYTE *)p_p[1] - (_BYTE *)*p_p) >> 4);
  sub_20BF4C2D8((uint64_t)&v21);
  v10 = (pxrInternal__aapl__pxrReserved__::SdfPath *)__p;
  if (__p)
    operator delete(__p);
  if ((a3 & 0x80000000) != 0 || a3 >= (unint64_t)((v14 - (_BYTE *)v13) >> 4))
  {
    __p = "sdf/layer.cpp";
    v17 = "SetSubLayerOffset";
    v18 = 2005;
    v19 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetSubLayerOffset(const SdfLayerOffset &, int)";
    v20 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid sublayer index");
  }
  else
  {
    *((_OWORD *)v13 + a3) = *(_OWORD *)a2;
    v11 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(v10);
    v12 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v12)
      v12 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    v17 = (const char *)&off_24C526368;
    sub_20C020690(&__p, (uint64_t)&v13);
    pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(this, v11, (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)((char *)v12 + 368), (const pxrInternal__aapl__pxrReserved__::VtValue *)&__p);
    sub_20BF4C2D8((uint64_t)&__p);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
}

void sub_20C0F6EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::VtValue *a4)
{
  char *v8;
  unint64_t v9;
  const char *v10;
  unint64_t v11;
  const char *v12;
  const char *Text;
  const char *v14;
  const char *v15;
  const char *v16;
  void *v17;
  int v18;
  std::type_info v19;
  uint64_t v20;
  const char *v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (*((_QWORD *)a4 + 1))
  {
    if (!*((_BYTE *)this + 513) || pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
    {
      v19.__vftable = (std::type_info_vtbl *)"sdf/layer.cpp";
      v19.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"SetField";
      v20 = 3702;
      v21 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(const SdfPath &, const TfToken &, const VtValue &)";
      v22 = 0;
      v9 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v9)
      {
        v10 = (const char *)(v9 + 16);
        if (*(char *)(v9 + 39) < 0)
          v10 = *(const char **)v10;
      }
      else
      {
        v10 = "";
      }
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v14 = (const char *)*((_QWORD *)this + 59);
      if (v14[23] < 0)
        v14 = *(const char **)v14;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s on <%s>. Layer @%s@ is not editable.", v10, Text, v14);
    }
    else if (!*((_BYTE *)this + 515) || (sub_20C0FD3C4((uint64_t)this, (uint64_t)a2, a3) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(this, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
      if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(a4, &v19, v8) & 1) == 0)
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>((uint64_t *)this, a2, a3, a4, (pxrInternal__aapl__pxrReserved__::VtValue *)&v19, 1);
      sub_20BF4C2D8((uint64_t)&v19);
    }
    else
    {
      v19.__vftable = (std::type_info_vtbl *)"sdf/layer.cpp";
      v19.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"SetField";
      v20 = 3711;
      v21 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(const SdfPath &, const TfToken &, const VtValue &)";
      v22 = 0;
      v17 = &unk_24C528BB8;
      v18 = 0;
      v11 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v11)
      {
        v12 = (const char *)(v11 + 16);
        if (*(char *)(v11 + 39) < 0)
          v12 = *(const char **)v12;
      }
      else
      {
        v12 = "";
      }
      v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v16 = (const char *)*((_QWORD *)this + 59);
      if (v16[23] < 0)
        v16 = *(const char **)v16;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, (uint64_t *)&v17, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s on <%s>. Field is not valid for layer @%s@.", v12, v15, v16);
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField(this, a2, a3);
  }
}

void sub_20C0F7138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_CanGetSpecAtPath(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, int *a3, _DWORD *a4)
{
  _BOOL8 result;
  pxrInternal__aapl__pxrReserved__::SdfPath *IsAbsolutePath;
  uint64_t v10;
  int v11;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v12;
  int v13;
  int v14;

  result = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2);
  if (result)
  {
    IsAbsolutePath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::IsAbsolutePath(a2);
    if (!(_DWORD)IsAbsolutePath
      || (IsAbsolutePath = (pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::ContainsTargetPath(a2),
          (_DWORD)IsAbsolutePath))
    {
      v12 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(IsAbsolutePath);
      pxrInternal__aapl__pxrReserved__::SdfPath::MakeAbsolutePath(a2, v12, &v13);
      sub_20BFD3EBC(a3, &v13);
      sub_20BFD3F10(a3 + 1, &v14);
      sub_20BFD1A18(&v13);
    }
    else
    {
      a3 = (int *)a2;
    }
    v10 = sub_20C0A683C((uint64_t *)(a1 + 112));
    v11 = (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v10 + 96))(v10, a3);
    *a4 = v11;
    return v11 != 0;
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetSpecType(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v3;

  v3 = sub_20C0A683C((uint64_t *)this + 14);
  return (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v3 + 96))(v3, a2);
}

_DWORD *pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  _BOOL4 v6;
  uint64_t **v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v16);
  v14 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_CanGetSpecAtPath((uint64_t)this, a2, &v15, &v14))
  {
    v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    v7 = (uint64_t **)((char *)this + 88);
    if (v6)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v13);
      v11 = v13;
      *a3 = v13;
      if (v11)
      {
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, a2, &v13);
      v8 = v13;
      *a3 = v13;
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_20BFD265C(&v15);
}

void sub_20C0F7348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  if (*(_QWORD *)a2 == *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath(this))
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, a3);
  else
    sub_20C0F73D0((uint64_t)this, a2, a3);
}

_DWORD *sub_20C0F73D0@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  _BOOL4 v6;
  uint64_t **v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v16);
  v14 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_CanGetSpecAtPath(a1, a2, &v15, &v14)
    && pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(v14, (pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C527C50))
  {
    v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    v7 = (uint64_t **)(a1 + 88);
    if (v6)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v13);
      v11 = v13;
      *a3 = v13;
      if (v11)
      {
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, a2, &v13);
      v8 = v13;
      *a3 = v13;
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_20BFD265C(&v15);
}

void sub_20C0F74DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0F7504@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  _BOOL4 v6;
  uint64_t **v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v16);
  v14 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_CanGetSpecAtPath(a1, a2, &v15, &v14)
    && pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(v14, (pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527B00))
  {
    v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    v7 = (uint64_t **)(a1 + 88);
    if (v6)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v13);
      v11 = v13;
      *a3 = v13;
      if (v11)
      {
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, a2, &v13);
      v8 = v13;
      *a3 = v13;
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_20BFD265C(&v15);
}

void sub_20C0F7610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0F7638@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  _BOOL4 v6;
  uint64_t **v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v16);
  v14 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_CanGetSpecAtPath(a1, a2, &v15, &v14)
    && pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(v14, (pxrInternal__aapl__pxrReserved__::TfType *)&stru_24C527B18))
  {
    v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    v7 = (uint64_t **)(a1 + 88);
    if (v6)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v13);
      v11 = v13;
      *a3 = v13;
      if (v11)
      {
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, a2, &v13);
      v8 = v13;
      *a3 = v13;
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_20BFD265C(&v15);
}

void sub_20C0F7744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0F776C@<X0>(uint64_t a1@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  _BOOL4 v6;
  uint64_t **v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v11;
  unsigned int v12;
  unsigned int *v13;
  int v14;
  int v15;
  int v16;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::Handle(&v15);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::Handle(&v16);
  v14 = 0;
  if (pxrInternal__aapl__pxrReserved__::SdfLayer::_CanGetSpecAtPath(a1, a2, &v15, &v14)
    && pxrInternal__aapl__pxrReserved__::Sdf_SpecType::CanCast(v14, (pxrInternal__aapl__pxrReserved__::TfType *)&unk_24C527C68))
  {
    v6 = pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(&v15);
    v7 = (uint64_t **)(a1 + 88);
    if (v6)
    {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v15, &v13);
      v11 = v13;
      *a3 = v13;
      if (v11)
      {
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::Identify(v7, a2, &v13);
      v8 = v13;
      *a3 = v13;
      if (v8)
      {
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 + 1, v8));
      }
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v13);
  }
  else
  {
    *a3 = 0;
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  return sub_20BFD265C(&v15);
}

void sub_20C0F7878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToSave(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  if (!*((_BYTE *)this + 514)
    || pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(*((_QWORD *)this + 59))
    || (pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this) & 1) != 0)
  {
    return 0;
  }
  else
  {
    return pxrInternal__aapl__pxrReserved__::Sdf_CanWriteLayerToPath((pxrInternal__aapl__pxrReserved__ *)(*((_QWORD *)this + 59) + 24));
  }
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetPermissionToEdit(uint64_t this, char a2)
{
  *(_BYTE *)(this + 513) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::SetPermissionToSave(uint64_t this, char a2)
{
  *(_BYTE *)(this + 514) = a2;
  return this;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::CanApply(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  _QWORD *v15;
  _BOOL4 v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6)
  {
    v8 = (unsigned int *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = operator new(0x20uLL);
  *v10 = &unk_24C528820;
  v10[1] = sub_20C0F7B4C;
  v10[2] = v7;
  v10[3] = v6;
  v25 = v10;
  v12 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  if (v11)
  {
    v13 = (unsigned int *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = operator new(0x20uLL);
  *v15 = &unk_24C5288E0;
  v15[1] = sub_20C0F7BAC;
  v15[2] = v12;
  v15[3] = v11;
  v23 = v15;
  v16 = pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::Process(a2, 0, (uint64_t)v24, (uint64_t)v22, a3, 0);
  v17 = v23;
  if (v23 == v22)
  {
    v18 = 4;
    v17 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_12;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_12:
  v19 = v25;
  if (v25 == v24)
  {
    v20 = 4;
    v19 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_17;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_17:
  if (v16)
    return 2;
  else
    return 0;
}

void sub_20C0F7A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v19 + 8 * v20))(v19);
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(char *))(*(_QWORD *)v21 + 8 * v22))(v21);
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0F7B4C(uint64_t *a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v3;
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v6;

  v3 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetObjectAtPath(v3, a2, &v6);
  v4 = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v6) ^ 1;
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v6);
  return v4;
}

void sub_20C0F7B98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20C0F7BAC(uint64_t *a1, int *a2, _BOOL8 CanMoveChildForBatchNamespaceEdit)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer *v6;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v9;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v10;
  uint64_t v11;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v12;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v13;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v16;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v17;

  if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 2))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2), &v17);
      v6 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(a1);
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v6, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v16);
      NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2));
      CanMoveChildForBatchNamespaceEdit = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CanMoveChildForBatchNamespaceEdit(a1, (pxrInternal__aapl__pxrReserved__::TfToken *)&v17, &v16, NameToken, a2[4], CanMoveChildForBatchNamespaceEdit);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v17);
      v9 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      CanMoveChildForBatchNamespaceEdit = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::CanRemoveChildForBatchNamespaceEdit(a1, (uint64_t)&v17, v9, CanMoveChildForBatchNamespaceEdit);
      pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    }
    goto LABEL_15;
  }
  if (!pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 2))
  {
    if (pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2))
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v17);
      v10 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      CanMoveChildForBatchNamespaceEdit = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CanRemoveChildForBatchNamespaceEdit(a1, (uint64_t)&v17, v10, CanMoveChildForBatchNamespaceEdit);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v17);
      v13 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)a2);
      CanMoveChildForBatchNamespaceEdit = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CanRemoveChildForBatchNamespaceEdit(a1, (uint64_t)&v17, v13, CanMoveChildForBatchNamespaceEdit);
    }
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    goto LABEL_15;
  }
  if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2)))
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2), &v17);
    v11 = sub_20BFCF650(a1);
    sub_20C0F7504(v11, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v16);
    v12 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2));
    CanMoveChildForBatchNamespaceEdit = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::CanMoveChildForBatchNamespaceEdit(a1, (pxrInternal__aapl__pxrReserved__::TfToken *)&v17, &v16, v12, a2[4], CanMoveChildForBatchNamespaceEdit);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
LABEL_15:
    sub_20BFD265C(&v17);
    return CanMoveChildForBatchNamespaceEdit;
  }
  v8 = sub_20BFCF650(a1);
  sub_20C0F7638(v8, (const pxrInternal__aapl__pxrReserved__::SdfPath *)a2, &v17);
  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v17) & 1) != 0)
  {
    if (CanMoveChildForBatchNamespaceEdit)
    {
      MEMORY[0x212B929D0](CanMoveChildForBatchNamespaceEdit, "Object is not an attribute");
      CanMoveChildForBatchNamespaceEdit = 0;
    }
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2), &v16);
    v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(a2 + 2));
    CanMoveChildForBatchNamespaceEdit = pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::CanMoveChildForBatchNamespaceEdit(a1, (pxrInternal__aapl__pxrReserved__::TfToken *)&v16, &v17, v15, a2[4], CanMoveChildForBatchNamespaceEdit);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
    sub_20BFD265C(&v16);
  }
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v17);
  return CanMoveChildForBatchNamespaceEdit;
}

void sub_20C0F7E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::Apply(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit *a2)
{
  _BOOL8 v4;
  uint64_t *v5;
  uint64_t v6;
  void **v7;
  unsigned int *v8;
  unsigned int v9;
  void ***v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int *v15;
  int *v16;
  uint64_t v17;
  void ***v18;
  uint64_t v19;
  int *v20;
  int *v21;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v22;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *NameToken;
  void *v24;
  uint64_t v25;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v26;
  void *v27;
  pxrInternal__aapl__pxrReserved__::TfToken *v28;
  pxrInternal__aapl__pxrReserved__::TfToken *v29;
  uint64_t v30;
  pxrInternal__aapl__pxrReserved__::SdfPathTokens_StaticTokenType *v31;
  pxrInternal__aapl__pxrReserved__::TfToken *v32;
  int *v33;
  char v35[8];
  int *v36;
  int *v37;
  uint64_t v38;
  int v39;
  _DWORD v40[5];
  int *v41;
  void **v42[3];
  void ***v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 513) || (pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this) & 1) != 0)
    return 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v7 = (void **)*((_QWORD *)this + 3);
  v6 = *((_QWORD *)this + 4);
  v5 = (uint64_t *)((char *)this + 24);
  if (v6)
  {
    v8 = (unsigned int *)(v6 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (void ***)operator new(0x20uLL);
  *v10 = (void **)&unk_24C528988;
  v10[1] = (void **)sub_20C0F7B4C;
  v10[2] = v7;
  v10[3] = (void **)v6;
  v43 = v10;
  v12 = *((_QWORD *)this + 3);
  v11 = *((_QWORD *)this + 4);
  if (v11)
  {
    v13 = (unsigned int *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = (int *)operator new(0x20uLL);
  *(_QWORD *)v15 = &unk_24C528A10;
  *((_QWORD *)v15 + 1) = sub_20C0F7BAC;
  *((_QWORD *)v15 + 2) = v12;
  *((_QWORD *)v15 + 3) = v11;
  v41 = v15;
  v4 = pxrInternal__aapl__pxrReserved__::SdfBatchNamespaceEdit::Process((uint64_t)a2, (uint64_t *)&v36, (uint64_t)v42, (uint64_t)&v39, 0, 0);
  v16 = v41;
  if (v41 == &v39)
  {
    v17 = 4;
    v16 = &v39;
  }
  else
  {
    if (!v41)
      goto LABEL_15;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_15:
  v18 = v43;
  if (v43 == v42)
  {
    v19 = 4;
    v18 = v42;
    goto LABEL_19;
  }
  if (v43)
  {
    v19 = 5;
LABEL_19:
    ((void (*)(void))(*v18)[v19])();
  }
  if (v4)
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v35);
    v20 = v37;
    if (v36 != v37)
    {
      v21 = v36 + 2;
      do
      {
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 2)))
        {
          if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v21))
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v21, &v39);
            v22 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(v5);
            pxrInternal__aapl__pxrReserved__::SdfLayer::GetPrimAtPath(v22, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 2), v42);
            NameToken = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v21);
            pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::MoveChildForBatchNamespaceEdit(v5, (pxrInternal__aapl__pxrReserved__::TfToken *)&v39, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v42, NameToken, v21[2]);
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v24, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v42);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v40);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 2), &v39);
            v28 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 2));
            if ((*(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8) == 0)
              pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v28);
            pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::RemoveChild(v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v40);
          }
        }
        else if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(v21))
        {
          if (pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath((pxrInternal__aapl__pxrReserved__::SdfPath *)v21))
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v21, &v39);
            v25 = sub_20BFCF650(v5);
            sub_20C0F7638(v25, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 2), v42);
            v26 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v21);
            pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::MoveChildForBatchNamespaceEdit(v5, (pxrInternal__aapl__pxrReserved__::TfToken *)&v39, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v42, v26, v21[2]);
          }
          else
          {
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v21, &v39);
            v30 = sub_20BFCF650(v5);
            sub_20C0F7504(v30, (const pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 2), v42);
            v31 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)v21);
            pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::MoveChildForBatchNamespaceEdit(v5, (pxrInternal__aapl__pxrReserved__::TfToken *)&v39, (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v42, v31, v21[2]);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(v27, (pxrInternal__aapl__pxrReserved__::SdfSpec *)v42);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v40);
        }
        else if (pxrInternal__aapl__pxrReserved__::SdfPath::IsRelationalAttributePath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 2)))
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 2), &v39);
          v29 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 2));
          if ((*(_QWORD *)v29 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v29);
          pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::RemoveChild(v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v40);
        }
        else
        {
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 2), &v39);
          v32 = pxrInternal__aapl__pxrReserved__::SdfPath::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPath *)(v21 - 2));
          if ((*(_QWORD *)v32 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v32);
          pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_PropertyChildPolicy>::RemoveChild(v5, (pxrInternal__aapl__pxrReserved__::SdfPath *)&v39);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(v40);
        }
        sub_20BFD265C(&v39);
        v33 = v21 + 3;
        v21 += 5;
      }
      while (v33 != v20);
    }
    sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v35);
  }
  v42[0] = (void **)&v36;
  sub_20C103D8C(v42);
  return v4;
}

void sub_20C0F82A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a11;
  sub_20C103D8C(&a18);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::ScheduleRemoveIfInert(pxrInternal__aapl__pxrReserved__::SdfLayer *this, unsigned int **a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *Instance;

  Instance = (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!Instance)
    Instance = (pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  return pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::RemoveSpecIfInert(Instance, a2);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveIfInert(pxrInternal__aapl__pxrReserved__::SdfLayer *this, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  const std::type_info *v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  const std::type_info *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  unsigned int *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v19;
  unsigned int *v20;
  unsigned int v21;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v23;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v24;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v25;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v26;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v27;

  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2) & 1) == 0)
  {
    v5 = *a2;
    v26 = v5;
    if (v5)
    {
      do
        v6 = __ldaxr((unsigned int *)v5);
      while (__stlxr(v6 + 1, (unsigned int *)v5));
    }
    if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v26, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_24C527C50, v4))
    {
      v7 = (unsigned int *)v26;
      v27 = v26;
      if (v26)
      {
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 + 1, v7));
        v9 = (unsigned int *)v27;
        v25 = v27;
        if (v27)
        {
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 + 1, v9));
        }
      }
      else
      {
        v25 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v27);
    }
    else
    {
      v25 = 0;
    }
    if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v25) & 1) != 0)
    {
      if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v26, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_24C527B00, v11))
      {
        v12 = (unsigned int *)v26;
        v27 = v26;
        if (v26)
        {
          do
            v13 = __ldaxr(v12);
          while (__stlxr(v13 + 1, v12));
          v14 = (unsigned int *)v27;
          v23 = v27;
          if (v27)
          {
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 + 1, v14));
          }
        }
        else
        {
          v23 = 0;
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v27);
      }
      else
      {
        v23 = 0;
      }
      if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v23) & 1) == 0)
      {
        v20 = (unsigned int *)v23;
        v22 = v23;
        if (v23)
        {
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 + 1, v20));
        }
        pxrInternal__aapl__pxrReserved__::SdfLayer::RemovePropertyIfHasOnlyRequiredFields((uint64_t)this, &v22);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v22);
      }
      v19 = &v23;
    }
    else
    {
      v16 = sub_20C0B0CA4(&v25);
      if (!pxrInternal__aapl__pxrReserved__::SdfSpec::IsInert(v16, 0))
      {
LABEL_33:
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v25);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v26);
        return;
      }
      v17 = (unsigned int *)v25;
      v24 = v25;
      if (v25)
      {
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 + 1, v17));
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::RemovePrimIfInert((uint64_t)this, &v24);
      v19 = &v24;
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v19);
    goto LABEL_33;
  }
}

void sub_20C0F85F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, int a13, char a14)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a10);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a12);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a14);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemovePrimIfInert(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v4;
  unsigned int v5;
  _BOOL4 v6;
  uint64_t v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v10;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v11;

  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2) & 1) == 0)
  {
    v4 = *a2;
    v11 = v4;
    if (v4)
    {
      do
        v5 = __ldaxr((unsigned int *)v4);
      while (__stlxr(v5 + 1, (unsigned int *)v4));
    }
    v6 = pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertDFS(a1, &v11);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v11);
    if (v6)
    {
      v8 = *a2;
      v10 = v8;
      if (v8)
      {
        do
          v9 = __ldaxr((unsigned int *)v8);
        while (__stlxr(v9 + 1, (unsigned int *)v8));
      }
      pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertToRootmost(v7, &v10);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v10);
    }
  }
}

void sub_20C0F86DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemovePropertyIfHasOnlyRequiredFields(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  uint64_t **v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;
  const std::type_info *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int *v9;
  unsigned int v10;
  const std::type_info *v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int *v14;
  unsigned int v15;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v20;
  const std::type_info *v21;
  unsigned int *v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v26;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v27;
  pxrInternal__aapl__pxrReserved__::TfToken *v28;
  unsigned int *v29;
  unsigned int v30;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v31;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v32;
  pxrInternal__aapl__pxrReserved__::TfToken *NameToken;
  unsigned int *v34;
  unsigned int v35;
  unint64_t v36;
  unint64_t v37;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v38;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v39;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v40;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v41;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v42;

  if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2) & 1) == 0)
  {
    v4 = (uint64_t **)sub_20BFE6874(a2);
    if (pxrInternal__aapl__pxrReserved__::SdfPropertySpec::HasOnlyRequiredFields(v4))
    {
      v5 = sub_20BFE6874(a2);
      pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetOwner((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v5, &v40);
      if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(&v40, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_24C527C50, v6))
      {
        v7 = (unsigned int *)v40;
        v42 = v40;
        if (v40)
        {
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 + 1, v7));
          v9 = (unsigned int *)v42;
          v41 = v42;
          if (v42)
          {
            do
              v10 = __ldaxr(v9);
            while (__stlxr(v10 + 1, v9));
          }
        }
        else
        {
          v41 = 0;
        }
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v42);
      }
      else
      {
        v41 = 0;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v40);
      if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v41) & 1) != 0)
      {
        if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(a2, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_24C527B18, v11))
        {
          v42 = *a2;
          v12 = (unsigned int *)v42;
          if (v42)
          {
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 + 1, v12));
            v14 = (unsigned int *)v42;
            v40 = v42;
            if (v42)
            {
              do
                v15 = __ldaxr(v14);
              while (__stlxr(v15 + 1, v14));
            }
          }
          else
          {
            v40 = 0;
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v42);
        }
        else
        {
          v40 = 0;
        }
        if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v40) & 1) != 0)
        {
          if (pxrInternal__aapl__pxrReserved__::Sdf_CanCastToType(a2, (const pxrInternal__aapl__pxrReserved__::SdfSpec *)&unk_24C527C68, v21))
          {
            v42 = *a2;
            v22 = (unsigned int *)v42;
            if (v42)
            {
              do
                v23 = __ldaxr(v22);
              while (__stlxr(v23 + 1, v22));
              v24 = (unsigned int *)v42;
              v38 = v42;
              if (v42)
              {
                do
                  v25 = __ldaxr(v24);
                while (__stlxr(v25 + 1, v24));
              }
            }
            else
            {
              v38 = 0;
            }
            pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v42);
          }
          else
          {
            v38 = 0;
          }
          if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(&v38) & 1) == 0)
          {
            v31 = sub_20C0B22EC(&v38);
            pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v31, &v37);
            pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v37, &v42);
            v32 = sub_20C0B22EC(&v38);
            NameToken = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v32, (unsigned int **)&v36);
            if ((v36 & 0xFFFFFFFFFFFFFFF8) == 0)
              pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(NameToken);
            pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_RelationshipChildPolicy>::RemoveChild((uint64_t *)(a1 + 24), (pxrInternal__aapl__pxrReserved__::SdfPath *)&v42);
            if ((v36 & 7) != 0)
            {
              v34 = (unsigned int *)(v36 & 0xFFFFFFFFFFFFFFF8);
              do
                v35 = __ldxr(v34);
              while (__stlxr(v35 - 2, v34));
            }
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
            sub_20BFD265C(&v42);
            pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v37 + 1);
            sub_20BFD265C(&v37);
          }
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v38);
        }
        else
        {
          v26 = sub_20C0AEAB8(&v40);
          pxrInternal__aapl__pxrReserved__::SdfSpec::GetPath((pxrInternal__aapl__pxrReserved__::SdfSpec *)v26, &v38);
          pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath((pxrInternal__aapl__pxrReserved__::SdfPath *)&v38, &v42);
          v27 = sub_20C0AEAB8(&v40);
          v28 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfPropertySpec::GetNameToken((pxrInternal__aapl__pxrReserved__::SdfPropertySpec *)v27, (unsigned int **)&v37);
          if ((v37 & 0xFFFFFFFFFFFFFFF8) == 0)
            pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v28);
          pxrInternal__aapl__pxrReserved__::Sdf_ChildrenUtils<pxrInternal__aapl__pxrReserved__::Sdf_AttributeChildPolicy>::RemoveChild((uint64_t *)(a1 + 24), (pxrInternal__aapl__pxrReserved__::SdfPath *)&v42);
          if ((v37 & 7) != 0)
          {
            v29 = (unsigned int *)(v37 & 0xFFFFFFFFFFFFFFF8);
            do
              v30 = __ldxr(v29);
            while (__stlxr(v30 - 2, v29));
          }
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v42 + 1);
          sub_20BFD265C(&v42);
          pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v38 + 1);
          sub_20BFD265C(&v38);
        }
        v20 = &v40;
      }
      else
      {
        v16 = sub_20C0B0CA4(&v41);
        v17 = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveProperty(v16, a2);
        v18 = (unsigned int *)v41;
        v39 = v41;
        if (v41)
        {
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
        }
        pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertToRootmost(v17, &v39);
        v20 = &v39;
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v20);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v41);
    }
  }
}

void sub_20C0F8A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  sub_20BFD1A18((uint64_t *)va);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)(v3 - 32));
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertDFS(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v4;
  uint64_t **v6;
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v10;
  int Specifier;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  char *v15;
  uint64_t **v16;
  uint64_t v17;
  char *v18;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v19;
  uint64_t **v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  char *v26;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v27;
  uint64_t **v28;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v29;
  uint64_t v30;
  __int128 j;
  void *__p[2];
  char v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int *v36;
  __int128 i;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];
  uint64_t v41;
  void *v42;
  char v43;
  unsigned int *v44[12];
  char v45;
  unsigned int *v46;
  __int128 v47;
  unint64_t v48;

  v4 = sub_20C0B0CA4(a2);
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsInert(v4, 0))
    return 1;
  v47 = 0uLL;
  v48 = 0;
  v6 = (uint64_t **)sub_20C0B0CA4(a2);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren(v6, (uint64_t)v44);
  sub_20C10429C((uint64_t)&i, (uint64_t)v44);
  sub_20BFE6A54((uint64_t)v44);
  while (*((_QWORD *)&i + 1) != v39)
  {
    sub_20C0F8FF8((uint64_t)&i, v7, v44);
    v8 = v44[0];
    v46 = v44[0];
    if (v44[0])
    {
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 + 1, v8));
    }
    if (pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertDFS(a1, &v46))
    {
      v10 = sub_20C0B0CA4((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v44);
      Specifier = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(v10);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v46);
      if (Specifier == 1)
      {
        v12 = *((_QWORD *)&v47 + 1);
        if (*((_QWORD *)&v47 + 1) >= v48)
        {
          v15 = sub_20C0D7E80((unsigned int ***)&v47, v44);
        }
        else
        {
          v13 = v44[0];
          **((_QWORD **)&v47 + 1) = v44[0];
          if (v13)
          {
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 + 1, v13));
          }
          v15 = (char *)(v12 + 8);
        }
        *((_QWORD *)&v47 + 1) = v15;
      }
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v46);
    }
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v44);
    sub_20C0F9084((uint64_t)&i);
  }
  sub_20BFE6A54((uint64_t)v40);
  for (i = v47; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C0C3154(&i))
  {
    v16 = (uint64_t **)sub_20C0B0CA4(a2);
    v19 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0C30D8((uint64_t *)&i, v17, v18);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveNameChild(v16, v19);
  }
  v20 = (uint64_t **)sub_20C0B0CA4(a2);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSets(v20, (uint64_t)v44);
  sub_20C104310((uint64_t)&i, (uint64_t)v44);
  while (v38 != v40[1])
  {
    v23 = sub_20C0F9104((uint64_t)&i, v21, v22);
    sub_20C0F9180(v23, (uint64_t)__p);
    sub_20BFE6CE8(v34, v35, &v36);
    if (v33 < 0)
      operator delete(__p[0]);
    v24 = (uint64_t **)sub_20C0B3C54((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v36);
    pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetVariantList(v24, __p);
    for (j = *(_OWORD *)__p; (_QWORD)j != *((_QWORD *)&j + 1); sub_20C0D8A34(&j))
    {
      v27 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)sub_20C0D89B8((uint64_t *)&j, v25, v26);
      v28 = (uint64_t **)sub_20BFE8634(v27);
      pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetPrimSpec(v28, &v30);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertDFS(a1, &v30);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v30);
    }
    *(_QWORD *)&j = __p;
    sub_20BFE69E4((void ***)&j);
    pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v36);
    sub_20C0F9250((uint64_t)&i);
  }
  if (v43 < 0)
    operator delete(v42);
  sub_20BFE6D38((uint64_t)&v41);
  if (v45 < 0)
    operator delete(v44[10]);
  sub_20BFE6D38((uint64_t)v44);
  *(_QWORD *)&i = &v47;
  sub_20BFE69E4((void ***)&i);
  v29 = sub_20C0B0CA4(a2);
  return pxrInternal__aapl__pxrReserved__::SdfSpec::IsInert(v29, 0);
}

void sub_20C0F8DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24)
{
  uint64_t v24;

  sub_20BFE6BD4(v24 - 184);
  a24 = v24 - 64;
  sub_20BFE69E4((void ***)&a24);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertToRootmost(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2)
{
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v4;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int *v8;

  result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2);
  if ((result & 1) == 0)
  {
    do
    {
      v4 = sub_20C0B0CA4(a2);
      result = pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetSpecifier(v4);
      if ((_DWORD)result != 1)
        break;
      v5 = sub_20C0B0CA4(a2);
      result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsInert(v5, 0);
      if (!(_DWORD)result)
        break;
      v6 = (uint64_t **)sub_20C0B0CA4(a2);
      pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetRealNameParent(v6, &v8);
      if ((pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v8) & 1) == 0)
      {
        v7 = (uint64_t **)sub_20C0B0CA4((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v8);
        pxrInternal__aapl__pxrReserved__::SdfPrimSpec::RemoveNameChild(v7, a2);
      }
      pxrInternal__aapl__pxrReserved__::SdfSpec::operator=((unsigned int **)a2, &v8);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
      result = pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant(a2);
    }
    while (!(_DWORD)result);
  }
  return result;
}

void sub_20C0F8F6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)va);
  _Unwind_Resume(a1);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveInertSceneDescription(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v3;
  _BYTE v4[8];

  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v4);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v3);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_RemoveInertDFS((uint64_t)this, &v3);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v3);
  return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v4);
}

void sub_20C0F8FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a10);
  _Unwind_Resume(a1);
}

void sub_20C0F8FF8(uint64_t a1@<X0>, char *a2@<X2>, unsigned int **a3@<X8>)
{
  uint64_t v3;
  _QWORD v4[4];
  char v5;
  int v6;

  v3 = *(_QWORD *)(a1 + 8);
  if (v3 == *(_QWORD *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator*";
    v4[2] = 271;
    v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfChildrenView<pxr"
            "Internal__aapl__pxrReserved__::Sdf_PrimChildPolicy>>::operator*() [T = pxrInternal__aapl__pxrReserved__::Sdf"
            "ChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a2);
  }
  sub_20BFE6B84(*(uint64_t **)a1, v3, a3);
}

void sub_20C0F907C()
{
  JUMPOUT(0x20C0F9020);
}

uint64_t sub_20C0F9084(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 == *(_QWORD *)(a1 + 24))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfCh"
            "ildrenView<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>>::operator++() [T = pxrInternal__aapl__pxr"
            "Reserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>, Reverse = false]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v2 + 1;
  }
  return a1;
}

uint64_t sub_20C0F9104(uint64_t result, uint64_t a2, char *a3)
{
  _QWORD v3[4];
  char v4;
  int v5;

  if (*(_QWORD *)(result + 16) == *(_QWORD *)(result + 40))
  {
    v3[0] = "tf/iterator.h";
    v3[1] = "operator->";
    v3[2] = 287;
    v3[3] = "Iterator &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfChildrenProxy<px"
            "rInternal__aapl__pxrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>"
            ">>::operator->() [T = pxrInternal__aapl__pxrReserved__::SdfChildrenProxy<pxrInternal__aapl__pxrReserved__::S"
            "dfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>>, Reverse = false]";
    v4 = 0;
    v5 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v3, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return result;
}

void sub_20C0F9180(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  void *__p[2];
  uint64_t v6;
  _BYTE v7[24];
  __int128 v8;

  v3 = *(_QWORD *)a1;
  v8 = *(_OWORD *)(a1 + 8);
  sub_20BFE6C88(v3, (uint64_t)&v8, __p);
  *(_QWORD *)v7 = v3;
  *(_OWORD *)&v7[8] = v8;
  if (SHIBYTE(v6) < 0)
  {
    sub_20BDDBFAC((_BYTE *)a2, __p[0], (unint64_t)__p[1]);
    v4 = SHIBYTE(v6);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v7;
    *(_QWORD *)(a2 + 40) = *(_QWORD *)&v7[16];
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 16) = v6;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v7;
    *(_QWORD *)(a2 + 40) = *(_QWORD *)&v7[16];
  }
}

void sub_20C0F9234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0F9250(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[4];
  char v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a1 + 40))
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator++";
    v4[2] = 250;
    v4[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<pxrInternal__aapl__pxrReserved__::SdfCh"
            "ildrenProxy<pxrInternal__aapl__pxrReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantS"
            "etChildPolicy>>>::operator++() [T = pxrInternal__aapl__pxrReserved__::SdfChildrenProxy<pxrInternal__aapl__px"
            "rReserved__::SdfChildrenView<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>>, Reverse = false]";
    v5 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v4, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    *(_QWORD *)(a1 + 16) = v2 + 1;
  }
  return a1;
}

uint64_t sub_20C0F92D0(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  sub_20BFE6D38(a1 + 48);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier(uint64_t a1, const std::string *a2)
{
  const char *v4;
  char *v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  BOOL v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t NewLayerWithIdentifier;
  uint64_t *Resolver;
  uint64_t v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  void **v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t *v27;
  void *v28;
  void *v29[2];
  uint64_t v30;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v31;
  void *v32[2];
  uint64_t v33;
  __int16 v34;
  char v35[8];
  void *__dst[2];
  uint64_t v37;
  std::string v38;
  void *v39[2];
  uint64_t v40;
  unsigned __int8 *v41;
  _QWORD *v42;
  uint64_t v43;
  __int128 __p;
  uint64_t v45;
  unsigned __int8 *v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  void *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  if (sub_20BFCE180(3))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = (uint64_t *)a2;
    else
      v6 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::SetIdentifier('%s')\n", v4, v5, v6);
  }
  v49 = 0uLL;
  v50 = 0;
  v47 = 0;
  v48 = 0;
  v46 = (unsigned __int8 *)&v47;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(*(const std::string **)(a1 + 472), &v49, (uint64_t)&v46) & 1) != 0
    || (*(_QWORD *)&v51 = "sdf/layer.cpp",
        *((_QWORD *)&v51 + 1) = "SetIdentifier",
        *(_QWORD *)&v52 = 2482,
        *((_QWORD *)&v52 + 1) = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier(const string &)",
        LOBYTE(v53) = 0,
        (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v51, "Sdf_SplitIdentifier( GetIdentifier(), &oldLayerPath, &oldArguments)", 0) & 1) != 0))
  {
    __p = 0uLL;
    v45 = 0;
    v42 = 0;
    v43 = 0;
    v41 = (unsigned __int8 *)&v42;
    if ((pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(a2, &__p, (uint64_t)&v41) & 1) != 0)
    {
      if (v48 != v43)
      {
LABEL_34:
        *(_QWORD *)&v51 = "sdf/layer.cpp";
        *((_QWORD *)&v51 + 1) = "SetIdentifier";
        *(_QWORD *)&v52 = 2497;
        *((_QWORD *)&v52 + 1) = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier(const string &)";
        LOBYTE(v53) = 0;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = (const char *)a2;
        else
          v18 = (const char *)a2->__r_.__value_.__r.__words[0];
        v19 = *(const char **)(a1 + 472);
        if (v19[23] < 0)
          v19 = *(const char **)v19;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 1, (pxrInternal__aapl__pxrReserved__ *)"Identifier '%s' contains arguments that differ from the layer's current arguments ('%s').", v18, v19);
        goto LABEL_77;
      }
      v7 = v46;
      if (v46 != (unsigned __int8 *)&v47)
      {
        v8 = v41;
        while ((sub_20BF77F70((uint64_t)&v51, v7 + 32, v8 + 32) & 1) != 0)
        {
          v9 = (unsigned __int8 *)*((_QWORD *)v7 + 1);
          v10 = v7;
          if (v9)
          {
            do
            {
              v7 = v9;
              v9 = *(unsigned __int8 **)v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v7 = (unsigned __int8 *)*((_QWORD *)v10 + 2);
              v11 = *(_QWORD *)v7 == (_QWORD)v10;
              v10 = v7;
            }
            while (!v11);
          }
          v12 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = *(unsigned __int8 **)v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
              v11 = *(_QWORD *)v13 == (_QWORD)v8;
              v8 = v13;
            }
            while (!v11);
          }
          v8 = v13;
          if (v7 == (unsigned __int8 *)&v47)
            goto LABEL_23;
        }
        goto LABEL_34;
      }
LABEL_23:
      v39[0] = 0;
      v39[1] = 0;
      v40 = 0;
      NewLayerWithIdentifier = pxrInternal__aapl__pxrReserved__::Sdf_CanCreateNewLayerWithIdentifier((uint64_t)&__p, (uint64_t)v39);
      if ((NewLayerWithIdentifier & 1) != 0)
      {
        Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)NewLayerWithIdentifier);
        v32[0] = 0;
        v32[1] = 0;
        v33 = 0;
        pxrInternal__aapl__pxrReserved__::ArResolver::CreateIdentifierForNewAsset((uint64_t)Resolver);
        if (SHIBYTE(v45) < 0)
          operator delete((void *)__p);
        __p = v51;
        v45 = v52;
        BYTE7(v52) = 0;
        LOBYTE(v51) = 0;
        if (SHIBYTE(v33) < 0)
          operator delete(v32[0]);
        pxrInternal__aapl__pxrReserved__::Sdf_CreateIdentifier((uint64_t)&__p, &v41, &v38);
        v16 = *(_QWORD *)(a1 + 472);
        if (*(char *)(v16 + 47) < 0)
        {
          sub_20BDDBFAC(__dst, *(void **)(v16 + 24), *(_QWORD *)(v16 + 32));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(v16 + 24);
          v37 = *(_QWORD *)(v16 + 40);
        }
        pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v35);
        v32[0] = 0;
        v34 = 0;
        *((_QWORD *)&v51 + 1) = 0;
        *(_QWORD *)&v52 = 0;
        *(_QWORD *)&v51 = (char *)&v51 + 8;
        sub_20C0F2E00((uint64_t)&v38, (uint64_t)&v51, (tbb::queuing_rw_mutex::scoped_lock *)v32, 1, (uint64_t *)&v31);
        sub_20BDE9D48((uint64_t)&v51, *((_QWORD **)&v51 + 1));
        if (!v31 || v31 == (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)a1)
        {
          v57 = 0;
          v58 = 0;
          v59 = 0;
          v29[0] = 0;
          v29[1] = 0;
          v30 = 0;
          v56 = 0;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v51 = 0u;
          pxrInternal__aapl__pxrReserved__::SdfLayer::_InitializeFromIdentifier(a1, (uint64_t)&v38, &v57, (uint64_t *)v29, &v51);
          sub_20BF4C2D8((uint64_t)&v55 + 8);
          if (SBYTE7(v55) < 0)
            operator delete((void *)v54);
          if (SHIBYTE(v53) < 0)
            operator delete(*((void **)&v52 + 1));
          if (SBYTE7(v52) < 0)
            operator delete((void *)v51);
          if (SHIBYTE(v30) < 0)
            operator delete(v29[0]);
          if (SHIBYTE(v59) < 0)
            operator delete(v57);
          sub_20C103234(&v31);
          sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v32);
          v25 = *(_QWORD *)(a1 + 472);
          if (*(char *)(v25 + 47) < 0)
          {
            sub_20BDDBFAC(&v51, *(void **)(v25 + 24), *(_QWORD *)(v25 + 32));
          }
          else
          {
            v51 = *(_OWORD *)(v25 + 24);
            *(_QWORD *)&v52 = *(_QWORD *)(v25 + 40);
          }
          v26 = sub_20C0F2904((unsigned __int8 *)__dst, (unsigned __int8 *)&v51);
          if (v26)
          {
            v27 = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)v26);
            pxrInternal__aapl__pxrReserved__::ArResolver::GetModificationTimestamp((uint64_t)v27);
            v58 = (char *)&off_24C524518 + 1;
            v57 = v28;
            sub_20BF4B5D8((_QWORD *)(a1 + 480), &v57);
            sub_20BF4C2D8((uint64_t)&v57);
          }
          if (SBYTE7(v52) < 0)
            operator delete((void *)v51);
        }
        else
        {
          *(_QWORD *)&v51 = "sdf/layer.cpp";
          *((_QWORD *)&v51 + 1) = "SetIdentifier";
          *(_QWORD *)&v52 = 2540;
          *((_QWORD *)&v52 + 1) = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier(const string &)";
          LOBYTE(v53) = 0;
          v22 = *(const char **)(sub_20C0EEAF8((uint64_t *)&v31) + 472);
          if (v22[23] < 0)
            v22 = *(const char **)v22;
          v23 = *(_QWORD *)(sub_20C0EEAF8((uint64_t *)&v31) + 472);
          v24 = (const char *)(v23 + 24);
          if (*(char *)(v23 + 47) < 0)
            v24 = *(const char **)v24;
          pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 1, (pxrInternal__aapl__pxrReserved__ *)"Layer with identifier '%s' and resolved path '%s' exists.", v22, v24);
          sub_20C103234(&v31);
          sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v32);
        }
        sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v35);
        if (SHIBYTE(v37) < 0)
          operator delete(__dst[0]);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
      }
      else
      {
        *(_QWORD *)&v51 = "sdf/layer.cpp";
        *((_QWORD *)&v51 + 1) = "SetIdentifier";
        *(_QWORD *)&v52 = 2504;
        *((_QWORD *)&v52 + 1) = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier(const string &)";
        LOBYTE(v53) = 0;
        if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v20 = (const char *)a2;
        else
          v20 = (const char *)a2->__r_.__value_.__r.__words[0];
        v21 = v39;
        if (v40 < 0)
          v21 = (void **)v39[0];
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot change identifier to '%s': %s", v20, (const char *)v21);
      }
      if (SHIBYTE(v40) < 0)
        operator delete(v39[0]);
    }
    else
    {
      *(_QWORD *)&v51 = "sdf/layer.cpp";
      *((_QWORD *)&v51 + 1) = "SetIdentifier";
      *(_QWORD *)&v52 = 2489;
      *((_QWORD *)&v52 + 1) = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetIdentifier(const string &)";
      LOBYTE(v53) = 0;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = (const char *)a2;
      else
        v17 = (const char *)a2->__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v51, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid identifier '%s'", v17);
    }
LABEL_77:
    sub_20BDE9D48((uint64_t)&v41, v42);
    if (SHIBYTE(v45) < 0)
      operator delete((void *)__p);
  }
  sub_20BDE9D48((uint64_t)&v46, v47);
  if (SHIBYTE(v50) < 0)
    operator delete((void *)v49);
}

void sub_20C0F999C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45,_QWORD *a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,char a55,_QWORD *a56)
{
  uint64_t v56;

  if (*(char *)(v56 - 169) < 0)
    operator delete(*(void **)(v56 - 192));
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a26);
  if (a32 < 0)
    operator delete(__p);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  sub_20BDE9D48((uint64_t)&a45, a46);
  if (a53 < 0)
    operator delete(a48);
  sub_20BDE9D48((uint64_t)&a55, a56);
  if (*(char *)(v56 - 193) < 0)
    operator delete(*(void **)(v56 - 216));
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetAssetName(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((_QWORD *)this + 59) + 96;
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetDisplayName(const std::string **this@<X0>, std::string *a2@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_GetLayerDisplayName(this[59], a2);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetRealPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((_QWORD *)this + 59) + 24;
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetFileExtension(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v5;
  const std::string *PrimaryFileExtension;

  pxrInternal__aapl__pxrReserved__::Sdf_GetExtension((const std::string *)(*((_QWORD *)this + 59) + 24));
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    v5 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4((uint64_t *)this + 5);
    PrimaryFileExtension = (const std::string *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetPrimaryFileExtension(v5);
    std::string::operator=((std::string *)a2, PrimaryFileExtension);
  }
}

void sub_20C0F9B68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetRepositoryPath(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((_QWORD *)this + 59) + 120;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetVersion(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((_QWORD *)this + 59) + 72;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetAssetInfo(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((_QWORD *)this + 59) + 144;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetHints(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  if ((pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(this) & 1) != 0)
    return 1;
  else
    return *((unsigned __int8 *)this + 516);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetMetadata(pxrInternal__aapl__pxrReserved__::SdfLayer **this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  const pxrInternal__aapl__pxrReserved__::SdfAbstractData *v5;
  uint64_t v6;
  const pxrInternal__aapl__pxrReserved__::TfToken *v7;
  const pxrInternal__aapl__pxrReserved__::TfToken *v8;
  uint64_t v9;
  _QWORD v10[4];
  void **v11[3];

  v11[2] = *(void ***)MEMORY[0x24BDAC8D0];
  v4 = (char *)operator new(0x40uLL);
  *((_DWORD *)v4 + 2) = 1;
  *((_QWORD *)v4 + 2) = 0;
  *(_QWORD *)v4 = off_24C528298;
  *(_OWORD *)(v4 + 24) = 0u;
  *(_OWORD *)(v4 + 40) = 0u;
  *((_DWORD *)v4 + 14) = 1065353216;
  *a2 = (uint64_t)v4;
  v5 = (const pxrInternal__aapl__pxrReserved__::SdfAbstractData *)pxrInternal__aapl__pxrReserved__::SdfPath::AbsoluteRootPath((pxrInternal__aapl__pxrReserved__::SdfPath *)v4);
  v6 = sub_20C026788(a2);
  (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *, uint64_t))(*(_QWORD *)v6 + 64))(v6, v5, 7);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(this[10], this[14], v5, v10);
  v7 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v10[0];
  v8 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v10[1];
  while (v7 != v8)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetField((pxrInternal__aapl__pxrReserved__::SdfLayer *)this, v5, v7, (pxrInternal__aapl__pxrReserved__::VtValue *)v11);
    v9 = sub_20C026788(a2);
    (*(void (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *, const pxrInternal__aapl__pxrReserved__::TfToken *, void ***))(*(_QWORD *)v9 + 152))(v9, v5, v7, v11);
    sub_20BF4C2D8((uint64_t)v11);
    v7 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v7 + 8);
  }
  v11[0] = (void **)v10;
  sub_20BEEB2B8(v11);
}

void sub_20C0F9D10(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v1;

  sub_20C0218E4(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::ListFields(pxrInternal__aapl__pxrReserved__::SdfLayer **this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, _QWORD *a3@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(this[10], this[14], a2, a3);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ComputeAbsolutePath@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(unsigned __int8 *)(a2 + 23);
  v6 = v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
    goto LABEL_6;
  v7 = result;
  result = pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(a2);
  if ((_DWORD)result)
  {
    v6 = *(_BYTE *)(a2 + 23);
LABEL_6:
    if (v6 < 0)
      return (uint64_t)sub_20BDDBFAC((_BYTE *)a3, *(void **)a2, *(_QWORD *)(a2 + 8));
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
    return result;
  }
  pxrInternal__aapl__pxrReserved__::SdfCreateHandle<pxrInternal__aapl__pxrReserved__::SdfLayer>(v7, &v11);
  pxrInternal__aapl__pxrReserved__::SdfComputeAssetPathRelativeToLayer(&v11, a2, a3);
  result = v12;
  if (v12)
  {
    v8 = (unsigned int *)(v12 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C0F9E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B408(a10);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::Include(uint64_t a1, uint64_t a2)
{
  const void **v3;
  unint64_t v4;
  uint64_t v5;
  void **v6;
  char v8;
  char v9;

  sub_20BFB74E8((uint64_t *)a1, *(std::string **)(a1 + 8), *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v3 = *(const void ***)(a1 + 8);
  v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)a1) >> 3));
  if (v3 == *(const void ***)a1)
    v5 = 0;
  else
    v5 = v4;
  sub_20BEDAFAC(*(_QWORD *)a1, v3, (uint64_t)&v8, v5, 1);
  v6 = sub_20C104400(*(unsigned __int8 **)a1, *(unsigned __int8 **)(a1 + 8), (uint64_t)&v9);
  sub_20C0F9EEC(a1, (uint64_t)v6, *(__int128 **)(a1 + 8));
  return a1;
}

uint64_t sub_20C0F9EEC(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if ((__int128 *)a2 != a3)
  {
    sub_20C07F91C((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::Exclude(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  const void **v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  char v10;
  char v11;

  v3 = a1 + 24;
  sub_20BFB74E8((uint64_t *)(a1 + 24), *(std::string **)(a1 + 32), *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(const void ***)(a1 + 32);
  v6 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - v4) >> 3));
  if (v5 == (const void **)v4)
    v7 = 0;
  else
    v7 = v6;
  sub_20BEDAFAC(v4, v5, (uint64_t)&v10, v7, 1);
  v8 = sub_20C104400(*(unsigned __int8 **)(a1 + 24), *(unsigned __int8 **)(a1 + 32), (uint64_t)&v11);
  sub_20C0F9EEC(v3, (uint64_t)v8, *(__int128 **)(a1 + 32));
  return a1;
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::IsIncluded(uint64_t *a1, const std::string *a2)
{
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *__p[2];
  uint64_t v14;
  void *v15[2];
  uint64_t v16;

  if (!*((_BYTE *)a1 + 48) && *a1 == a1[1] || pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier((uint64_t)a2))
    return 0;
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  if ((pxrInternal__aapl__pxrReserved__::Sdf_SplitIdentifier(a2, (uint64_t)v15, (uint64_t)__p) & 1) == 0)
    goto LABEL_23;
  if (*((_BYTE *)a1 + 48))
    goto LABEL_7;
  v9 = *a1;
  v10 = a1[1];
  if (*a1 == v10)
    goto LABEL_23;
  while (1)
  {
    v11 = *(char *)(v9 + 23) >= 0 ? (char *)v9 : *(char **)v9;
    if (pxrInternal__aapl__pxrReserved__::TfStringContains((char **)v15, v11))
      break;
    v9 += 24;
    if (v9 == v10)
    {
      v9 = v10;
      break;
    }
  }
  if (v9 != a1[1])
  {
LABEL_7:
    v5 = a1[3];
    v6 = a1[4];
    if (v5 == v6)
    {
      v8 = a1[3];
    }
    else
    {
      while (1)
      {
        v7 = *(char *)(v5 + 23) >= 0 ? (char *)v5 : *(char **)v5;
        if (pxrInternal__aapl__pxrReserved__::TfStringContains((char **)v15, v7))
          break;
        v5 += 24;
        if (v5 == v6)
        {
          v5 = v6;
          break;
        }
      }
      v8 = v5;
      v5 = a1[4];
    }
    v4 = v8 == v5;
  }
  else
  {
LABEL_23:
    v4 = 0;
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  return v4;
}

void sub_20C0FA15C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetDetachedLayerRules(uint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  void **v4;
  uint64_t v5;
  _BOOL4 IsIncluded;
  uint64_t v7;
  _BOOL4 v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  int IsDetached;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v11;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v12;
  void **v13;
  void **v14;
  BOOL v15;
  void **v16;
  _QWORD *v17[2];
  char v18[8];
  uint64_t v19[3];
  _QWORD v20[3];
  char v21;
  _BYTE v22[16];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load(&qword_254985B40);
  if (!v2)
    v2 = sub_20C1044E0();
  memset(v19, 0, sizeof(v19));
  sub_20BE78B98((char *)v19, *(__int128 **)v2, *(__int128 **)(v2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 8) - *(_QWORD *)v2) >> 3));
  memset(v20, 0, sizeof(v20));
  sub_20BE78B98((char *)v20, *(__int128 **)(v2 + 24), *(__int128 **)(v2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24)) >> 3));
  v21 = *(_BYTE *)(v2 + 48);
  v3 = atomic_load(&qword_254985B40);
  if (!v3)
    v3 = sub_20C1044E0();
  if (v3 != a1)
  {
    sub_20BE75818(v3, *(std::string **)a1, *(__int128 **)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3));
    sub_20BE75818(v3 + 24, *(std::string **)(a1 + 24), *(__int128 **)(a1 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
  }
  *(_BYTE *)(v3 + 48) = *(_BYTE *)(a1 + 48);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v22);
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v18);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetLoadedLayers((uint64_t)&v16);
  v4 = v16;
  if (v16 != (void **)v17)
  {
    do
    {
      v5 = sub_20BFCF650((uint64_t *)v4 + 4);
      IsIncluded = pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::IsIncluded(v19, *(const std::string **)(v5 + 472));
      v7 = sub_20BFCF650((uint64_t *)v4 + 4);
      v8 = pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::IsIncluded((uint64_t *)a1, *(const std::string **)(v7 + 472));
      v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v4 + 4);
      IsDetached = pxrInternal__aapl__pxrReserved__::SdfLayer::IsDetached(v9);
      if (((IsIncluded | IsDetached | !v8) & 1) == 0)
      {
        v11 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v4 + 4);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(v11, 1);
      }
      if (IsIncluded && !v8 && ((IsDetached ^ 1) & 1) == 0)
      {
        v12 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)v4 + 4);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(v12, 1);
      }
      v13 = (void **)v4[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (void **)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (void **)v4[2];
          v15 = *v14 == v4;
          v4 = v14;
        }
        while (!v15);
      }
      v4 = v14;
    }
    while (v14 != (void **)v17);
  }
  sub_20BFF29AC((uint64_t)&v16, v17[0]);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v18);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)v22);
  v16 = (void **)v20;
  sub_20BDE5038(&v16);
  v16 = (void **)v19;
  sub_20BDE5038(&v16);
}

void sub_20C0FA3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  void *v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, void *);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  v14 = va_arg(va2, _QWORD);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  pxrInternal__aapl__pxrReserved__::ArResolverScopedCache::~ArResolverScopedCache((pxrInternal__aapl__pxrReserved__::ArResolverScopedCache *)va2);
  sub_20C0FA578((void **)va1);
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::SdfLayer::GetLoadedLayers@<X0>(uint64_t a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *v3;
  _QWORD v5[3];
  __int16 v6;

  sub_20C0EE45C();
  v5[0] = 0;
  v6 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v5, (unint64_t *)&qword_254985B50, 0);
  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load(&qword_254985B38);
  if (!v3)
    v3 = sub_20C10317C(&qword_254985B38);
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::GetLayers(v3, a1);
  return sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v5);
}

void sub_20C0FA4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)&a9);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::IsDetached(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;

  sub_20C104A6C(&v8, (uint64_t *)this + 14);
  v1 = sub_20C0A6678(&v8);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  v3 = v9;
  if (v9)
  {
    v4 = (unsigned int *)(v9 + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return v2;
}

void sub_20C0FA560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B408(a10);
  _Unwind_Resume(exception_object);
}

void **sub_20C0FA578(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  sub_20BDE5038(&v3);
  v3 = a1;
  sub_20BDE5038(&v3);
  return a1;
}

unint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetDetachedLayerRules(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  unint64_t result;

  result = atomic_load(&qword_254985B40);
  if (!result)
    return sub_20C1044E0();
  return result;
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetMutedLayers(uint64_t *a1@<X8>)
{
  char *v3;
  const void ***v4;

  v3 = (char *)atomic_load(&qword_254985B28);
  if (!v3)
    v3 = sub_20BF4742C(&qword_254985B28);
  std::mutex::lock((std::mutex *)v3);
  v4 = (const void ***)atomic_load(&qword_254985B48);
  if (!v4)
    v4 = (const void ***)sub_20C1047AC(&qword_254985B48);
  sub_20C104818(a1, v4);
  std::mutex::unlock((std::mutex *)v3);
}

void sub_20C0FA64C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetMuted(pxrInternal__aapl__pxrReserved__::SdfLayer *this, int a2)
{
  void *__p[2];
  char v5;

  if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this) != a2)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::_GetMutedPath(this, (uint64_t)__p);
    if (a2)
      pxrInternal__aapl__pxrReserved__::SdfLayer::AddToMutedLayers((const void **)__p);
    else
      pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromMutedLayers((const void **)__p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
}

void sub_20C0FA6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::AddToMutedLayers(const void **a1)
{
  char *v2;
  unint64_t v3;
  uint64_t **v4;
  char v5;
  char v6;
  uint64_t (*v7)(uint64_t *);
  char v8;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v20;
  uint64_t v21;
  char *v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t **v38;
  uint64_t *v39;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v40;
  uint64_t v41;
  char *v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v46;
  uint64_t v47;
  unsigned int *v48;
  unsigned int v49;
  unsigned int v50;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  const char *v55;
  char v56;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v57;
  uint64_t v58;
  uint64_t v59;

  v2 = (char *)atomic_load(&qword_254985B28);
  if (!v2)
    v2 = sub_20BF4742C(&qword_254985B28);
  std::mutex::lock((std::mutex *)v2);
  do
    v3 = __ldaxr(&qword_25473B500);
  while (__stlxr(v3 + 1, &qword_25473B500));
  v4 = (uint64_t **)atomic_load(&qword_254985B48);
  if (!v4)
    v4 = (uint64_t **)sub_20C1047AC(&qword_254985B48);
  sub_20BE74FC0(v4, a1, (uint64_t)a1);
  v6 = v5;
  std::mutex::unlock((std::mutex *)v2);
  if ((v6 & 1) != 0)
  {
    v53 = 0;
    v54 = 0;
    v52 = (char *)&v53;
    pxrInternal__aapl__pxrReserved__::SdfLayer::Find((uint64_t)a1, (uint64_t)&v52, &v58);
    sub_20BDE9D48((uint64_t)&v52, v53);
    v7 = sub_20BFD2F78(&v58);
    if (v8 & 1 | (unint64_t)v7)
    {
      v9 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v58);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v9))
      {
        v10 = sub_20BFCF650(&v58);
        sub_20C0EDBEC((uint64_t *)(v10 + 40), *(const std::string **)(v10 + 472), v10 + 56, &v57);
        v11 = sub_20BFCF650(&v58);
        v12 = sub_20C0A683C((uint64_t *)(v11 + 112));
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12))
        {
          v13 = (char *)atomic_load(&qword_254985B28);
          if (!v13)
            v13 = sub_20BF4742C(&qword_254985B28);
          std::mutex::lock((std::mutex *)v13);
          v14 = atomic_load(&qword_254985B30);
          if (!v14)
            v14 = sub_20C10308C(&qword_254985B30);
          v15 = sub_20BDEEBA4(v14, a1);
          v16 = atomic_load(&qword_254985B30);
          if (!v16)
            v16 = sub_20C10308C(&qword_254985B30);
          if (v16 + 8 != v15)
          {
            v52 = "sdf/layer.cpp";
            v53 = "AddToMutedLayers";
            v54 = 2881;
            v55 = "static void pxrInternal__aapl__pxrReserved__::SdfLayer::AddToMutedLayers(const string &)";
            v56 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v52, "(*_mutedLayerData).find(path) == (*_mutedLayerData).end()", 0);
          }
          v17 = sub_20BFCF650(&v58);
          v18 = (uint64_t **)atomic_load(&qword_254985B30);
          if (!v18)
            v18 = (uint64_t **)sub_20C10308C(&qword_254985B30);
          v52 = (char *)a1;
          v19 = sub_20C1048F0(v18, a1, (uint64_t)&unk_20CAC184C, (__int128 **)&v52);
          v20 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v19[7];
          v19 += 7;
          *v19 = *(_QWORD *)(v17 + 112);
          sub_20BF1DD04((uint64_t *)(v17 + 112));
          sub_20BF1D8F4((int)v19, v20);
          std::mutex::unlock((std::mutex *)v13);
          v21 = sub_20BFCF650(&v58);
          sub_20C0EA4AC((uint64_t *)&v52, (uint64_t *)&v57);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(v21, (uint64_t *)&v52, 0);
          v22 = v53;
          if (v53)
          {
            v23 = (unsigned int *)(v53 + 8);
            do
            {
              v24 = __ldxr(v23);
              v25 = v24 - 1;
            }
            while (__stlxr(v25, v23));
            if (!v25)
              (*(void (**)(char *))(*(_QWORD *)v22 + 8))(v22);
          }
        }
        else
        {
          v27 = sub_20BFCF650(&v58);
          sub_20C0EDBEC((uint64_t *)(v27 + 40), *(const std::string **)(v27 + 472), v27 + 56, &v51);
          v28 = sub_20C0A683C((uint64_t *)&v51);
          v29 = sub_20BFCF650(&v58);
          sub_20C104A6C((uint64_t *)&v52, (uint64_t *)(v29 + 112));
          (*(void (**)(uint64_t, char **))(*(_QWORD *)v28 + 16))(v28, &v52);
          v30 = v53;
          if (v53)
          {
            v31 = (unsigned int *)(v53 + 8);
            do
            {
              v32 = __ldxr(v31);
              v33 = v32 - 1;
            }
            while (__stlxr(v33, v31));
            if (!v33)
              (*(void (**)(char *))(*(_QWORD *)v30 + 8))(v30);
          }
          v34 = (char *)atomic_load(&qword_254985B28);
          if (!v34)
            v34 = sub_20BF4742C(&qword_254985B28);
          std::mutex::lock((std::mutex *)v34);
          v35 = atomic_load(&qword_254985B30);
          if (!v35)
            v35 = sub_20C10308C(&qword_254985B30);
          v36 = sub_20BDEEBA4(v35, a1);
          v37 = atomic_load(&qword_254985B30);
          if (!v37)
            v37 = sub_20C10308C(&qword_254985B30);
          if (v37 + 8 != v36)
          {
            v52 = "sdf/layer.cpp";
            v53 = "AddToMutedLayers";
            v54 = 2895;
            v55 = "static void pxrInternal__aapl__pxrReserved__::SdfLayer::AddToMutedLayers(const string &)";
            v56 = 0;
            pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v52, "(*_mutedLayerData).find(path) == (*_mutedLayerData).end()", 0);
          }
          v38 = (uint64_t **)atomic_load(&qword_254985B30);
          if (!v38)
            v38 = (uint64_t **)sub_20C10308C(&qword_254985B30);
          v52 = (char *)a1;
          v39 = sub_20C1048F0(v38, a1, (uint64_t)&unk_20CAC184C, (__int128 **)&v52);
          v40 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v39[7];
          v39[7] = (uint64_t)v51;
          v51 = v40;
          v52 = 0;
          sub_20BF1D8F4((int)&v51, 0);
          sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v52);
          std::mutex::unlock((std::mutex *)v34);
          v41 = sub_20BFCF650(&v58);
          sub_20C0EA4AC((uint64_t *)&v52, (uint64_t *)&v57);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(v41, (uint64_t *)&v52, 0);
          v42 = v53;
          if (v53)
          {
            v43 = (unsigned int *)(v53 + 8);
            do
            {
              v44 = __ldxr(v43);
              v45 = v44 - 1;
            }
            while (__stlxr(v45, v43));
            if (!v45)
              (*(void (**)(char *))(*(_QWORD *)v42 + 8))(v42);
          }
          sub_20C0EA270(&v51);
        }
        v46 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v58);
        if ((pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v46) & 1) == 0)
        {
          v52 = "sdf/layer.cpp";
          v53 = "AddToMutedLayers";
          v54 = 2902;
          v55 = "static void pxrInternal__aapl__pxrReserved__::SdfLayer::AddToMutedLayers(const string &)";
          v56 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v52, "layer->IsDirty()", 0);
        }
        sub_20C0EA270(&v57);
      }
      else
      {
        v26 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v58);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(v26, 1);
      }
    }
    v47 = v59;
    if (v59)
    {
      v48 = (unsigned int *)(v59 + 8);
      do
      {
        v49 = __ldxr(v48);
        v50 = v49 - 1;
      }
      while (__stlxr(v50, v48));
      if (!v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
    }
    sub_20C102510((uint64_t)&v52, (__int128 *)a1, 1);
    pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&v52);
    pxrInternal__aapl__pxrReserved__::SdfNotice::LayerMutenessChanged::~LayerMutenessChanged((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerMutenessChanged *)&v52);
  }
}

void sub_20C0FAC54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a15, uint64_t a16, uint64_t a17)
{
  std::mutex *v17;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;

  std::mutex::unlock(v17);
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&a9);
  sub_20C0EA270(&a15);
  v19 = a17;
  if (a17)
  {
    v20 = (unsigned int *)(a17 + 8);
    do
    {
      v21 = __ldxr(v20);
      v22 = v21 - 1;
    }
    while (__stlxr(v22, v20));
    if (!v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromMutedLayers(const void **a1)
{
  char *v2;
  unint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t *);
  char v7;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v8;
  char *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v13;
  uint64_t **v14;
  uint64_t v15;
  char *v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v20;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  unsigned int v25;
  char **v26;
  char *v27;
  uint64_t v28;
  const char *v29;
  char v30;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v31;
  uint64_t v32;
  uint64_t v33;

  v2 = (char *)atomic_load(&qword_254985B28);
  if (!v2)
    v2 = sub_20BF4742C(&qword_254985B28);
  std::mutex::lock((std::mutex *)v2);
  do
    v3 = __ldaxr(&qword_25473B500);
  while (__stlxr(v3 + 1, &qword_25473B500));
  v4 = (uint64_t **)atomic_load(&qword_254985B48);
  if (!v4)
    v4 = (uint64_t **)sub_20C1047AC(&qword_254985B48);
  v5 = sub_20BE9DDA0(v4, a1);
  std::mutex::unlock((std::mutex *)v2);
  if (v5)
  {
    v27 = 0;
    v28 = 0;
    v26 = &v27;
    pxrInternal__aapl__pxrReserved__::SdfLayer::Find((uint64_t)a1, (uint64_t)&v26, &v32);
    sub_20BDE9D48((uint64_t)&v26, v27);
    v6 = sub_20BFD2F78(&v32);
    if (v7 & 1 | (unint64_t)v6)
    {
      v8 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v32);
      if (pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v8))
      {
        v31 = 0;
        v9 = (char *)atomic_load(&qword_254985B28);
        if (!v9)
          v9 = sub_20BF4742C(&qword_254985B28);
        std::mutex::lock((std::mutex *)v9);
        v10 = atomic_load(&qword_254985B30);
        if (!v10)
          v10 = sub_20C10308C(&qword_254985B30);
        v11 = (uint64_t *)sub_20BDEEBA4(v10, a1);
        v12 = atomic_load(&qword_254985B30);
        if (!v12)
          v12 = sub_20C10308C(&qword_254985B30);
        if ((uint64_t *)(v12 + 8) != v11
          || (v26 = (char **)"sdf/layer.cpp",
              v27 = "RemoveFromMutedLayers",
              v28 = 2931,
              v29 = "static void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromMutedLayers(const string &)",
              v30 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "i != _mutedLayerData->end()", 0) & 1) != 0))
        {
          v13 = v31;
          v31 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)v11[7];
          v11[7] = (uint64_t)v13;
          v26 = 0;
          sub_20BF1D8F4((_DWORD)v11 + 56, 0);
          sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&v26);
          v14 = (uint64_t **)atomic_load(&qword_254985B30);
          if (!v14)
            v14 = (uint64_t **)sub_20C10308C(&qword_254985B30);
          sub_20BE10B80(v14, v11);
          sub_20C103140((uint64_t)(v11 + 4));
          operator delete(v11);
        }
        std::mutex::unlock((std::mutex *)v9);
        if (v31
          || (v26 = (char **)"sdf/layer.cpp",
              v27 = "RemoveFromMutedLayers",
              v28 = 2936,
              v29 = "static void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromMutedLayers(const string &)",
              v30 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "mutedData", 0) & 1) != 0))
        {
          v15 = sub_20BFCF650(&v32);
          sub_20C0EA4AC((uint64_t *)&v26, (uint64_t *)&v31);
          pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData(v15, (uint64_t *)&v26, 0);
          v16 = v27;
          if (v27)
          {
            v17 = (unsigned int *)(v27 + 8);
            do
            {
              v18 = __ldxr(v17);
              v19 = v18 - 1;
            }
            while (__stlxr(v19, v17));
            if (!v19)
              (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
          }
        }
        v20 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v32);
        if ((pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(v20) & 1) == 0)
        {
          v26 = (char **)"sdf/layer.cpp";
          v27 = "RemoveFromMutedLayers";
          v28 = 2943;
          v29 = "static void pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveFromMutedLayers(const string &)";
          v30 = 0;
          pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v26, "layer->IsDirty()", 0);
        }
        sub_20C0EA270(&v31);
      }
      else
      {
        v21 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650(&v32);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_Reload(v21, 1);
      }
    }
    v22 = v33;
    if (v33)
    {
      v23 = (unsigned int *)(v33 + 8);
      do
      {
        v24 = __ldxr(v23);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v23));
      if (!v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    }
    sub_20C102510((uint64_t)&v26, (__int128 *)a1, 0);
    pxrInternal__aapl__pxrReserved__::TfNotice::Send((pxrInternal__aapl__pxrReserved__::TfNotice *)&v26);
    pxrInternal__aapl__pxrReserved__::SdfNotice::LayerMutenessChanged::~LayerMutenessChanged((pxrInternal__aapl__pxrReserved__::SdfNotice::LayerMutenessChanged *)&v26);
  }
}

void sub_20C0FB154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a14, uint64_t a15, uint64_t a16)
{
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;

  sub_20C0EA270(&a14);
  v17 = a16;
  if (a16)
  {
    v18 = (unsigned int *)(a16 + 8);
    do
    {
      v19 = __ldxr(v18);
      v20 = v19 - 1;
    }
    while (__stlxr(v20, v18));
    if (!v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(const void **a1)
{
  char *v2;
  unint64_t v3;
  _BOOL8 v4;

  v2 = (char *)atomic_load(&qword_254985B28);
  if (!v2)
    v2 = sub_20BF4742C(&qword_254985B28);
  std::mutex::lock((std::mutex *)v2);
  v3 = atomic_load(&qword_254985B48);
  if (!v3)
    v3 = sub_20C1047AC(&qword_254985B48);
  v4 = sub_20BDDDEF8(v3, a1) != 0;
  std::mutex::unlock((std::mutex *)v2);
  return v4;
}

void sub_20C0FB2C0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_ShouldNotify(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  return *((_BYTE *)this + 466) && *((_BYTE *)this + 465) != 0;
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::Clear(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2;
  int v3;
  const char *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;

  if (*((_BYTE *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    v2 = sub_20C0A683C((uint64_t *)this + 14);
    v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
    sub_20C0EDBEC((uint64_t *)this + 5, *((const std::string **)this + 59), (uint64_t)this + 56, &v9);
    sub_20C0EA4AC((uint64_t *)&v10, (uint64_t *)&v9);
    pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData((uint64_t)this, (uint64_t *)&v10, 0);
    v4 = v11;
    if (v11)
    {
      v5 = (unsigned int *)(v11 + 8);
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(const char *))(*(_QWORD *)v4 + 8))(v4);
    }
    sub_20C0EA270(&v9);
    if (v3)
    {
      v8 = sub_20C0EBD60((uint64_t *)this + 15);
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
    }
  }
  else
  {
    v10 = "sdf/layer.cpp";
    v11 = "Clear";
    v12 = 2965;
    v13 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::Clear()";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Clear: Permission denied.");
  }
}

void sub_20C0FB400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;

  v12 = a11;
  if (a11)
  {
    v13 = (unsigned int *)(a11 + 8);
    do
    {
      v14 = __ldxr(v13);
      v15 = v14 - 1;
    }
    while (__stlxr(v15, v13));
    if (!v15)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  sub_20C0EA270(&a9);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdateLastDirtinessState(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  int IsDirty;
  int v3;

  IsDirty = pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(this);
  v3 = *((unsigned __int8 *)this + 467);
  if (v3 != IsDirty)
    *((_BYTE *)this + 467) = pxrInternal__aapl__pxrReserved__::SdfLayer::IsDirty(this);
  return v3 != IsDirty;
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfLayer::GetStateDelegate@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, uint64_t *a2@<X8>)
{
  return sub_20C104B28(a2, (uint64_t *)this + 15);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetStateDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t *v4;
  uint64_t v5;
  const char *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void (*v14)(void);
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;

  if (*a2)
  {
    v4 = (uint64_t *)(a1 + 120);
    v5 = sub_20C0EBD60((uint64_t *)(a1 + 120));
    v15 = 0;
    v16 = 0;
    pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::_SetLayer(v5, (uint64_t)&v15);
    v6 = v16;
    if (v16)
    {
      v7 = (unsigned int *)(v16 + 8);
      do
      {
        v8 = __ldxr(v7);
        v9 = v8 - 1;
      }
      while (__stlxr(v9, v7));
      if (!v9)
        (*(void (**)(const char *))(*(_QWORD *)v6 + 8))(v6);
    }
    v10 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 120);
    *(_QWORD *)(a1 + 120) = *a2;
    sub_20BF1DD04(a2);
    sub_20BF1D8F4((int)v4, v10);
    v11 = sub_20C0EBD60(v4);
    pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::_SetLayer(v11, a1 + 24);
    v12 = *(unsigned __int8 *)(a1 + 467);
    v13 = *(_QWORD *)sub_20C0EBD60(v4);
    if (v12)
      v14 = *(void (**)(void))(v13 + 32);
    else
      v14 = *(void (**)(void))(v13 + 24);
    v14();
  }
  else
  {
    v15 = "sdf/layer.cpp";
    v16 = "SetStateDelegate";
    v17 = 3009;
    v18 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetStateDelegate(const SdfLayerStateDelegateBaseRefPtr &)";
    v19 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Invalid layer state delegate");
  }
}

void sub_20C0FB5B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    sub_20C96B408(a11);
  _Unwind_Resume(exception_object);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::IsEmpty(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  _BOOL8 v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  _BYTE v12[8];
  std::__shared_weak_count *v13;
  _BYTE v14[80];

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrims(this, (uint64_t)v14);
  if (sub_20BFE52EC((uint64_t)v14))
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetRootPrimOrder(this, (uint64_t)v12);
    if (sub_20C104BE4((uint64_t)v12))
    {
      v2 = 0;
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(this, (uint64_t)&v10);
      v2 = sub_20BFD19BC((uint64_t)&v10) == 0;
      v7 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    v3 = v13;
    if (v13)
    {
      v4 = (unint64_t *)&v13->__shared_owners_;
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  else
  {
    v2 = 0;
  }
  sub_20BFE6A54((uint64_t)v14);
  return v2;
}

void sub_20C0FB6C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a12);
  sub_20BFE6A54((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::StreamsData(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;

  sub_20C104A6C(&v8, (uint64_t *)this + 14);
  v1 = sub_20C0A6678(&v8);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  v3 = v9;
  if (v9)
  {
    v4 = (unsigned int *)(v9 + 8);
    do
    {
      v5 = __ldxr(v4);
      v6 = v5 - 1;
    }
    while (__stlxr(v6, v4));
    if (!v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return v2;
}

void sub_20C0FB778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    sub_20C96B408(a10);
  _Unwind_Resume(exception_object);
}

uint64_t *pxrInternal__aapl__pxrReserved__::SdfLayer::_GetData@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, uint64_t *a2@<X8>)
{
  return sub_20C104A6C(a2, (uint64_t *)this + 14);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(pxrInternal__aapl__pxrReserved__::SdfLayer *this, uint64_t *a2)
{
  std::string *p_p;
  _BOOL4 v5;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v11;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  unsigned int *v21;
  unsigned int v22;
  unsigned int v23;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v24;
  uint64_t v25;
  std::string __p;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  char v31;

  if (*((_BYTE *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    if (*((_BYTE *)this + 466))
      v5 = *((_BYTE *)this + 465) != 0;
    else
      v5 = 0;
    v6 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)((char *)this + 112);
    v7 = sub_20C0A683C((uint64_t *)this + 14);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
    v9 = v8;
    __p.__r_.__value_.__r.__words[0] = 0;
    if (!v5 || v8)
    {
      sub_20C0EDBEC((uint64_t *)this + 5, *((const std::string **)this + 59), (uint64_t)this + 56, &v27);
      v12 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
      v27 = 0;
      sub_20BF1D8F4((int)&__p, v12);
      sub_20C0EA270(&v27);
      v13 = sub_20C0A683C((uint64_t *)&__p);
      v14 = sub_20BFCF650(a2);
      sub_20C104A6C((uint64_t *)&v27, (uint64_t *)(v14 + 112));
      (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **))(*(_QWORD *)v13 + 16))(v13, &v27);
      v15 = v28;
      if (v28)
      {
        v16 = (unsigned int *)(v28 + 8);
        do
        {
          v17 = __ldxr(v16);
          v18 = v17 - 1;
        }
        while (__stlxr(v18, v16));
        if (!v18)
          (*(void (**)(const char *))(*(_QWORD *)v15 + 8))(v15);
      }
    }
    else
    {
      v10 = sub_20BFCF650(a2);
      v11 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)__p.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v10 + 112);
      sub_20BF1DD04((uint64_t *)(v10 + 112));
      sub_20BF1D8F4((int)&__p, v11);
    }
    if (v5)
    {
      sub_20C0EA4AC((uint64_t *)&v27, (uint64_t *)&__p);
      v19 = sub_20BFCF650(a2);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_SetData((uint64_t)this, (uint64_t *)&v27, *(_QWORD *)(v19 + 80));
      v20 = v28;
      if (v28)
      {
        v21 = (unsigned int *)(v28 + 8);
        do
        {
          v22 = __ldxr(v21);
          v23 = v22 - 1;
        }
        while (__stlxr(v23, v21));
        if (!v23)
          (*(void (**)(const char *))(*(_QWORD *)v20 + 8))(v20);
      }
    }
    else
    {
      v24 = *v6;
      *v6 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)__p.__r_.__value_.__r.__words[0];
      sub_20BF1DD04((uint64_t *)&__p);
      sub_20BF1D8F4((_DWORD)this + 112, v24);
    }
    *((_BYTE *)this + 516) = *(_BYTE *)(sub_20BFCF650(a2) + 516);
    if (v9)
    {
      v25 = sub_20C0EBD60((uint64_t *)this + 15);
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 32))(v25);
    }
    sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
  }
  else
  {
    v27 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)"sdf/layer.cpp";
    v28 = "TransferContent";
    v29 = 3065;
    v30 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(const SdfLayerHandle &)";
    v31 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_GetLayerDisplayName(*((const std::string **)this + 59), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v27, 3, (pxrInternal__aapl__pxrReserved__ *)"TransferContent of '%s': Permission denied.", (const char *)p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_20C0FBA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18)
{
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)&__p);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::GetCompositionAssetDependencies(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, uint64_t **a2@<X8>)
{
  _BYTE *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  _BYTE v12[8];
  std::__shared_weak_count *v13;

  pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(this, (uint64_t)v12);
  if (sub_20C1038CC((uint64_t)v12))
    v4 = v12;
  else
    v4 = 0;
  *((_QWORD *)&v10 + 1) = v4;
  v11 = 0;
  sub_20C0FBCF8((uint64_t)v12, (uint64_t)&v9);
  sub_20C104CA8(a2, &v10, &v9);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(this, &v8);
  sub_20C0FBD6C(&v8, a2);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v8);
  v5 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_20C0FBB7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;

  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  sub_20BDECAB8(v16, *(char **)(v16 + 8));
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a16);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::UpdateCompositionAssetDependency(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity *v14;
  _BYTE v15[8];
  std::__shared_weak_count *v16;

  if (*(char *)(a2 + 23) >= 0)
    v3 = *(unsigned __int8 *)(a2 + 23);
  else
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetSubLayerPaths(a1, (uint64_t)v15);
    v7 = sub_20C0FC1CC((uint64_t)v15, (unsigned __int8 **)a2);
    v8 = v7;
    if (v7 == -1)
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(a1, &v14);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdatePrimCompositionDependencyPaths((uint64_t)a1, &v14, a2, (__int128 *)a3);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v14);
    }
    else
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::RemoveSubLayerPath(a1, v7);
      v9 = *(unsigned __int8 *)(a3 + 23);
      if ((v9 & 0x80u) != 0)
        v9 = *(_QWORD *)(a3 + 8);
      if (v9)
        pxrInternal__aapl__pxrReserved__::SdfLayer::InsertSubLayerPath(a1, (__int128 *)a3, v8);
    }
    v10 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  return v3 != 0;
}

void sub_20C0FBCD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&a9);
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0FBCF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;

  v4 = sub_20C1038CC(a1);
  result = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD))(*result + 112))(result, *(unsigned int *)(a1 + 16));
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(result[1] - *result) >> 3);
  }
  else
  {
    v6 = 0;
  }
  if (v4)
    v7 = a1;
  else
    v7 = 0;
  *(_QWORD *)(a2 + 8) = v7;
  *(_QWORD *)(a2 + 16) = v6;
  return result;
}

uint64_t sub_20C0FBD6C(pxrInternal__aapl__pxrReserved__::Sdf_Identity **a1, uint64_t **a2)
{
  uint64_t **v4;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v5;
  BOOL v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int **v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  const void **v15;
  const void **v16;
  unsigned int **v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const void **v21;
  const void **v22;
  uint64_t **v23;
  uint64_t *v24;
  uint64_t Size;
  uint64_t i;
  uint64_t **v27;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v28;
  uint64_t v29;
  uint64_t **v30;
  uint64_t **v31;
  uint64_t v32;
  uint64_t j;
  uint64_t *v35;
  uint64_t v36;
  unsigned int *v37;
  void *__p;
  std::__shared_weak_count *v39;
  char v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  const void **v44;
  uint64_t v45;
  void *v46;
  char v47;
  void **v48;

  v4 = (uint64_t **)sub_20C0B0CA4(a1);
  pxrInternal__aapl__pxrReserved__::SdfSpec::GetLayer(v4, (uint64_t *)&v44);
  v5 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20BFCF650((uint64_t *)&v44);
  pxrInternal__aapl__pxrReserved__::SdfLayer::GetPseudoRoot(v5, &__p);
  v6 = pxrInternal__aapl__pxrReserved__::SdfSpec::operator==(a1, &__p);
  pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
  v7 = v45;
  if (v45)
  {
    v8 = (unsigned int *)(v45 + 8);
    do
    {
      v9 = __ldxr(v8);
      v10 = v9 - 1;
    }
    while (__stlxr(v10, v8));
    if (!v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (!v6)
  {
    v11 = (unsigned int **)sub_20C0B0CA4(a1);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v11, &__p);
    sub_20C102584((uint64_t *)&__p, &v44);
    v12 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v44;
    v16 = (const void **)v45;
    while (v15 != v16)
    {
      sub_20BE74FC0(a2, v15, (uint64_t)v15);
      v15 += 7;
    }
    __p = &v44;
    sub_20C021740((void ***)&__p);
    v17 = (unsigned int **)sub_20C0B0CA4(a1);
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(v17, &__p);
    sub_20C1026F8((uint64_t *)&__p, &v44);
    v18 = v39;
    if (v39)
    {
      v19 = (unint64_t *)&v39->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v44;
    v22 = (const void **)v45;
    while (v21 != v22)
    {
      sub_20BE74FC0(a2, v21, (uint64_t)v21);
      v21 += 6;
    }
    __p = &v44;
    sub_20C021818((void ***)&__p);
    v23 = (uint64_t **)sub_20C0B0CA4(a1);
    v24 = (uint64_t *)&v44;
    pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSets(v23, (uint64_t)&v44);
    if (!sub_20BFE6C04((uint64_t)&v44))
      v24 = 0;
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)&v44);
    sub_20BFE6C04((uint64_t)&v44);
    Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)&v44);
    pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)&v44);
    if (Size)
    {
      for (i = 0; i != Size; ++i)
      {
        v35 = (uint64_t *)&v44;
        v36 = i;
        sub_20BFE6C88((uint64_t)v24, (uint64_t)&v35, &__p);
        v41 = v24;
        v42 = v35;
        v43 = v36;
        sub_20BFE6CE8(v35, v36, &v37);
        v27 = (uint64_t **)sub_20C0B3C54((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v37);
        pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetVariantList(v27, &v35);
        v28 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v35;
        v29 = v36;
        while (v28 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v29)
        {
          v30 = (uint64_t **)sub_20BFE8634(v28);
          pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetPrimSpec(v30, &v48);
          sub_20C0FBD6C(&v48, a2);
          pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v48);
          ++v28;
        }
        v48 = (void **)&v35;
        sub_20BFE69E4(&v48);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v37);
        if (v40 < 0)
          operator delete(__p);
      }
    }
    if (v47 < 0)
      operator delete(v46);
    sub_20BFE6D38((uint64_t)&v44);
  }
  v31 = (uint64_t **)sub_20C0B0CA4(a1);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren(v31, (uint64_t)&v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)&v44);
  v32 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)&v44);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)&v44);
  if (v32)
  {
    for (j = 0; j != v32; ++j)
    {
      sub_20BFE6B84((uint64_t *)&v44, j, (unsigned int **)&__p);
      sub_20C0FBD6C(&__p, a2);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&__p);
    }
  }
  return sub_20BFE6A54((uint64_t)&v44);
}

void sub_20C0FC0A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24)
{
  pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource::~PcpExpressionVariablesSource((pxrInternal__aapl__pxrReserved__::PcpExpressionVariablesSource *)&__p);
  _Unwind_Resume(a1);
}

unint64_t sub_20C0FC1CC(uint64_t a1, unsigned __int8 **a2)
{
  if (sub_20BFD4668(a1))
    return sub_20C104F4C(*(_QWORD *)a1, *(unsigned int *)(a1 + 16), a2);
  else
    return -1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdatePrimCompositionDependencyPaths(uint64_t a1, pxrInternal__aapl__pxrReserved__::Sdf_Identity **a2, uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  unsigned int **v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int **v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t **v17;
  char **v18;
  uint64_t Size;
  uint64_t i;
  uint64_t **v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v23;
  uint64_t **v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t j;
  pxrInternal__aapl__pxrReserved__::Sdf_Identity **v29;
  void *__p[2];
  char v31;
  char **v32;
  unsigned int *v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  unsigned int *v37;
  char *v38;
  const char *v39;
  uint64_t v40;
  const char *v41;
  char v42;
  int v43;
  void *v44;
  char v45;
  void (*v46)(unsigned __int8 *@<X0>, uint64_t@<X1>, unsigned __int8 *@<X2>, uint64_t@<X8>);
  void *v47;
  char v48;
  void *v49;
  char v50;
  void (*v51)(unsigned __int8 *@<X0>, uint64_t@<X1>, unsigned __int8 *@<X2>, char *@<X8>);
  void *v52;
  char v53;
  void *v54;
  char v55;
  void **v56[2];

  v4 = *(unsigned __int8 *)(a3 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a3 + 8);
  if (!v4)
  {
    v38 = "sdf/layer.cpp";
    v39 = "_UpdatePrimCompositionDependencyPaths";
    v40 = 3233;
    v41 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdatePrimCompositionDependencyPaths(const SdfPrimSpecHandle"
          " &, const string &, const string &)";
    v42 = 0;
    v43 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticLiteHelper *)&v38, (pxrInternal__aapl__pxrReserved__ *)"Failed axiom: ' %s '", (char *)a3, "!oldLayerPath.empty()");
  }
  v9 = (unsigned int **)sub_20C0B0CA4(a2);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetReferenceList(v9, &v38);
  v51 = sub_20C105054;
  sub_20C104FC0((char *)&v52, (__int128 *)a3, a4);
  sub_20C0FC69C((uint64_t *)&v38, (uint64_t *)&v51);
  if (v55 < 0)
    operator delete(v54);
  if (v53 < 0)
    operator delete(v52);
  v10 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v11 = (unint64_t *)(v39 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (unsigned int **)sub_20C0B0CA4(a2);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetPayloadList(v13, &v38);
  v46 = sub_20C105558;
  sub_20C104FC0((char *)&v47, (__int128 *)a3, a4);
  sub_20C0FC868((uint64_t *)&v38, (uint64_t *)&v46);
  if (v50 < 0)
    operator delete(v49);
  if (v48 < 0)
    operator delete(v47);
  v14 = (std::__shared_weak_count *)v39;
  if (v39)
  {
    v15 = (unint64_t *)(v39 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = (uint64_t **)sub_20C0B0CA4(a2);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetVariantSets(v17, (uint64_t)&v38);
  if (sub_20BFE6C04((uint64_t)&v38))
    v18 = &v38;
  else
    v18 = 0;
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)&v38);
  v29 = a2;
  sub_20BFE6C04((uint64_t)&v38);
  Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)&v38);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize((uint64_t)&v38);
  if (Size)
  {
    for (i = 0; i != Size; ++i)
    {
      v35 = (unsigned int *)&v38;
      v36 = i;
      sub_20BFE6C88((uint64_t)v18, (uint64_t)&v35, __p);
      v32 = v18;
      v33 = v35;
      v34 = v36;
      sub_20BFE6CE8((uint64_t *)v35, v36, &v37);
      v21 = (uint64_t **)sub_20C0B3C54((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)&v37);
      pxrInternal__aapl__pxrReserved__::SdfVariantSetSpec::GetVariantList(v21, &v35);
      v23 = (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v35;
      v22 = v36;
      while (v23 != (pxrInternal__aapl__pxrReserved__::Sdf_Identity **)v22)
      {
        v24 = (uint64_t **)sub_20BFE8634(v23);
        pxrInternal__aapl__pxrReserved__::SdfVariantSpec::GetPrimSpec(v24, v56);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdatePrimCompositionDependencyPaths(a1, v56, a3, a4);
        pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)v56);
        ++v23;
      }
      v56[0] = (void **)&v35;
      sub_20BFE69E4(v56);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v37);
      if (v31 < 0)
        operator delete(__p[0]);
    }
  }
  v25 = (uint64_t **)sub_20C0B0CA4(v29);
  pxrInternal__aapl__pxrReserved__::SdfPrimSpec::GetNameChildren(v25, (uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)__p);
  v26 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)__p);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize((uint64_t)__p);
  if (v26)
  {
    for (j = 0; j != v26; ++j)
    {
      sub_20BFE6B84((uint64_t *)__p, j, &v35);
      pxrInternal__aapl__pxrReserved__::SdfLayer::_UpdatePrimCompositionDependencyPaths(a1, &v35, a3, a4);
      pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec((pxrInternal__aapl__pxrReserved__::SdfSpec *)&v35);
    }
  }
  sub_20BFE6A54((uint64_t)__p);
  if (v45 < 0)
    operator delete(v44);
  return sub_20BFE6D38((uint64_t)&v38);
}

void sub_20C0FC58C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,int a28,__int16 a29,char a30,char a31)
{
  sub_20BFE6A54((uint64_t)&__p);
  sub_20BFE6BD4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetExternalAssetDependencies(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  uint64_t v2;

  v2 = sub_20BFCF6F4((uint64_t *)this + 5);
  return (*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfLayer *))(*(_QWORD *)v2 + 96))(v2, this);
}

void sub_20C0FC69C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!sub_20C10525C((uint64_t)a1))
    return;
  v4 = *a1;
  v8 = *a2;
  sub_20C1052D0((char *)&v9, (__int128 *)(a2 + 1));
  v14 = 0;
  v5 = (char *)operator new(0x40uLL);
  *(_QWORD *)v5 = &unk_24C528A98;
  *((_QWORD *)v5 + 1) = v8;
  *((_QWORD *)v5 + 4) = v10;
  *((_OWORD *)v5 + 1) = v9;
  v9 = 0uLL;
  v10 = 0;
  *((_QWORD *)v5 + 7) = v12;
  *(_OWORD *)(v5 + 40) = *(_OWORD *)__p;
  __p[1] = 0;
  v12 = 0;
  __p[0] = 0;
  v14 = v5;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 64))(v4, v13);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
    goto LABEL_6;
  }
  if (v14)
  {
    v7 = 5;
LABEL_6:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)v9);
}

void sub_20C0FC7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  sub_20C0FC828((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0FC828(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20C0FC868(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (!sub_20C105864((uint64_t)a1))
    return;
  v4 = *a1;
  v8 = *a2;
  sub_20C1052D0((char *)&v9, (__int128 *)(a2 + 1));
  v14 = 0;
  v5 = (char *)operator new(0x40uLL);
  *(_QWORD *)v5 = &unk_24C528B30;
  *((_QWORD *)v5 + 1) = v8;
  *((_QWORD *)v5 + 4) = v10;
  *((_OWORD *)v5 + 1) = v9;
  v9 = 0uLL;
  v10 = 0;
  *((_QWORD *)v5 + 7) = v12;
  *(_OWORD *)(v5 + 40) = *(_OWORD *)__p;
  __p[1] = 0;
  v12 = 0;
  __p[0] = 0;
  v14 = v5;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 64))(v4, v13);
  v6 = v14;
  if (v14 == v13)
  {
    v7 = 4;
    v6 = v13;
    goto LABEL_6;
  }
  if (v14)
  {
    v7 = 5;
LABEL_6:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v10) < 0)
    operator delete((void *)v9);
}

void sub_20C0FC9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  sub_20C0FC828((uint64_t)&a9);
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *pxrInternal__aapl__pxrReserved__::SdfLayer::DumpLayerInfo(pxrInternal__aapl__pxrReserved__::SdfLayer *this)
{
  _QWORD *v1;
  const std::locale::facet *v2;
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD v7[3];
  __int16 v8;
  std::locale v9;

  sub_20C0EE45C();
  v7[0] = 0;
  v8 = 0;
  tbb::queuing_rw_mutex::scoped_lock::acquire((unint64_t)v7, (unint64_t *)&qword_254985B50, 0);
  v1 = sub_20BDDC1C8(MEMORY[0x24BEDB310], (uint64_t)"Layer Registry Dump:", 20);
  std::ios_base::getloc((const std::ios_base *)((char *)v1 + *(_QWORD *)(*v1 - 24)));
  v2 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v9);
  std::ostream::put();
  std::ostream::flush();
  v3 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load(&qword_254985B38);
  if (!v3)
    v3 = sub_20C10317C(&qword_254985B38);
  v4 = pxrInternal__aapl__pxrReserved__::operator<<(v1, v3);
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet(&v9, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale(&v9);
  std::ostream::put();
  std::ostream::flush();
  return sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)v7);
}

void sub_20C0FCB30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::locale::~locale((std::locale *)(v2 - 24));
  sub_20C101968((tbb::queuing_rw_mutex::scoped_lock *)va);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::WriteDataFile(uint64_t a1)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v5;
  _BYTE v6[408];
  _QWORD v7[20];

  v7[19] = *MEMORY[0x24BDAC8D0];
  sub_20BE81108(&v5);
  v2 = sub_20C0A683C((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 56))(v2, &v5);
  v3 = *(_DWORD *)&v6[*(_QWORD *)(v5 - 24) + 24] == 0;
  v5 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)&v6[*(_QWORD *)(v5 - 24) - 8] = *(_QWORD *)(MEMORY[0x24BEDB7E8] + 24);
  MEMORY[0x212B92AB4](v6);
  std::ostream::~ostream();
  MEMORY[0x212B92EB0](v7);
  return v3;
}

void sub_20C0FCC3C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20C0FCC58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x24BEDB7E8];
  v3 = *MEMORY[0x24BEDB7E8];
  *a1 = *MEMORY[0x24BEDB7E8];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x212B92AB4](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x212B92EB0](a1 + 52);
  return a1;
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a2@<X1>, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *a3@<X2>, _QWORD *a4@<X8>)
{
  unsigned int v9;
  unsigned int v10;
  _QWORD *RequiredFields;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  BOOL v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  const char *Text;
  _QWORD v28[4];
  char v29;

  (*(void (**)(_QWORD *__return_ptr, const pxrInternal__aapl__pxrReserved__::SdfSchemaBase *, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *))(*(_QWORD *)a2 + 176))(a4, a2, a3);
  v9 = (*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::SdfSchemaBase *, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *))(*(_QWORD *)a2 + 96))(a2, a3);
  v10 = v9;
  if (v9 >= 0xC)
  {
    v28[0] = "sdf/layer.cpp";
    v28[1] = "_ListFields";
    v28[2] = 3446;
    v28[3] = "static vector<TfToken> pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(const SdfSchemaBase &, const"
             " SdfAbstractData &, const SdfPath &)";
    v29 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v28, 1, (pxrInternal__aapl__pxrReserved__ *)"Illegal SpecType int(specType)==<%i> on path <%s>. ", v10, Text);
  }
  else if (v9)
  {
    RequiredFields = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetRequiredFields((uint64_t)this, v9);
    v12 = RequiredFields[1] - *RequiredFields;
    if (v12)
    {
      v13 = 0;
      v14 = v12 >> 3;
      v16 = (char *)*a4;
      v15 = (char *)a4[1];
      v17 = (v12 >> 3) + ((uint64_t)&v15[-*a4] >> 3) > (unint64_t)((uint64_t)(a4[2] - *a4) >> 3);
      v18 = v15;
      do
      {
        v19 = (uint64_t *)(*RequiredFields + 8 * v13);
        v20 = v18;
        if (v16 != v18)
        {
          v20 = v16;
          while ((*(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8) != (*v19 & 0xFFFFFFFFFFFFFFF8))
          {
            v20 += 8;
            if (v20 == v18)
            {
              v20 = v18;
              break;
            }
          }
        }
        if (v20 == v18)
        {
          v21 = a4[2];
          if (v17)
          {
            v22 = (uint64_t)&v15[-*a4] >> 3;
            if (v22 == (uint64_t)(v21 - *a4) >> 3)
            {
              sub_20BFC9A6C((char **)a4, v14 - v13 + v22);
              v17 = 0;
              v23 = v18 - v16;
              v16 = (char *)*a4;
              v15 = (char *)a4[1];
              v18 = (char *)(*a4 + v23);
              v21 = a4[2];
            }
            else
            {
              v17 = 1;
            }
          }
          else
          {
            v17 = 0;
          }
          if ((unint64_t)v15 >= v21)
          {
            v15 = sub_20BFCA068((char **)a4, v19);
          }
          else
          {
            v24 = *v19;
            *(_QWORD *)v15 = *v19;
            if ((v24 & 7) != 0)
            {
              v25 = (unsigned int *)(v24 & 0xFFFFFFFFFFFFFFF8);
              do
                v26 = __ldxr(v25);
              while (__stxr(v26 + 2, v25));
              if ((v26 & 1) == 0)
                *(_QWORD *)v15 &= 0xFFFFFFFFFFFFFFF8;
            }
            v15 += 8;
          }
          a4[1] = v15;
        }
        ++v13;
      }
      while (v13 != v14);
    }
  }
}

void sub_20C0FCEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BEEB2B8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(_QWORD *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (***a4)(_QWORD, uint64_t))
{
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t FallbackValue;
  unint64_t v15;
  const char *v16;
  const char *Text;
  const char *v18;
  _QWORD v19[4];
  char v20;
  unsigned int v21;

  v21 = 0;
  v8 = sub_20C0A683C(a1 + 14);
  if (((*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, uint64_t (***)(_QWORD, uint64_t), unsigned int *))(*(_QWORD *)v8 + 120))(v8, a2, a3, a4, &v21) & 1) != 0)return 1;
  v10 = v21;
  if (v21 >= 0xC)
  {
    v19[0] = "sdf/layer.cpp";
    v19[1] = "HasField";
    v19[2] = 3586;
    v19[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(const SdfPath &, const TfToken &, SdfAbstractDataValue *) const";
    v20 = 0;
    v15 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v15)
    {
      v16 = (const char *)(v15 + 16);
      if (*(char *)(v15 + 39) < 0)
        v16 = *(const char **)v16;
    }
    else
    {
      v16 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    v18 = (const char *)a1[59];
    if (v18[23] < 0)
      v18 = *(const char **)v18;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Illegal SpecType int(specType)==<%i> for field:%s on path <%s>. SpecType is not valid for layer @%s@.", v10, v16, Text, v18);
    return 0;
  }
  if (!v21)
    return 0;
  v11 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)a1[10];
  v12 = (_QWORD *)*((_QWORD *)v11 + 116);
  v13 = (_QWORD *)*((_QWORD *)v11 + 117);
  if (v12 == v13)
    return 0;
  while ((*v12 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8))
  {
    if (++v12 == v13)
      return 0;
  }
  if (!*((_BYTE *)v11 + 72 * v21 + 120))
    return 0;
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)v11 + 72 * v21 + 56), a3);
  if ((_DWORD)result)
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v11, a3);
    if (result)
    {
      if (!a4)
        return 1;
      FallbackValue = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)result);
      return (**a4)(a4, FallbackValue);
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasFieldDictKey(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::VtValue *FallbackValue;
  uint64_t v19;
  uint64_t *v20;
  std::string *v21;

  v10 = (uint64_t *)((char *)this + 112);
  v11 = sub_20C0A683C((uint64_t *)this + 14);
  if (((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::TfToken *, pxrInternal__aapl__pxrReserved__::VtValue *))(*(_QWORD *)v11 + 192))(v11, a2, a3, a4, a5) & 1) != 0)return 1;
  v13 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)*((_QWORD *)this + 10);
  v14 = (_QWORD *)*((_QWORD *)v13 + 116);
  v15 = (_QWORD *)*((_QWORD *)v13 + 117);
  if (v14 == v15)
    return 0;
  while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8))
  {
    if (++v14 == v15)
      return 0;
  }
  v16 = sub_20C0A683C(v10);
  v17 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v16 + 96))(v16, a2);
  if (!*((_BYTE *)v13 + 72 * v17 + 120))
    return 0;
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)v13 + 72 * v17 + 56), a3);
  if ((_DWORD)result)
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v13, a3);
    if (result)
    {
      FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)result);
      result = sub_20BF4A73C(FallbackValue);
      if ((_DWORD)result)
      {
        v19 = *((_QWORD *)FallbackValue + 1);
        if ((v19 & 4) != 0)
        {
          result = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v19 & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 168))(FallbackValue);
          v20 = (uint64_t *)result;
        }
        else
        {
          v20 = *(uint64_t **)FallbackValue;
        }
        v21 = (*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) != 0
            ? (std::string *)((*(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8) + 16)
            : (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        result = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(v20, v21, ":");
        if (result)
        {
          if (a5)
            sub_20BF4A9BC(a5, (_QWORD *)result);
          return 1;
        }
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::HasFieldDictKey(uint64_t a1, uint64_t a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, _QWORD *a4, uint64_t (***a5)(_QWORD, uint64_t))
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  pxrInternal__aapl__pxrReserved__::VtValue *FallbackValue;
  uint64_t v19;
  uint64_t *v20;
  std::string *v21;

  v10 = (uint64_t *)(a1 + 112);
  v11 = sub_20C0A683C((uint64_t *)(a1 + 112));
  if (((*(uint64_t (**)(uint64_t, uint64_t, const pxrInternal__aapl__pxrReserved__::TfToken *, _QWORD *, uint64_t (***)(_QWORD, uint64_t)))(*(_QWORD *)v11 + 184))(v11, a2, a3, a4, a5) & 1) != 0)return 1;
  v13 = *(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)(a1 + 80);
  v14 = (_QWORD *)*((_QWORD *)v13 + 116);
  v15 = (_QWORD *)*((_QWORD *)v13 + 117);
  if (v14 == v15)
    return 0;
  while ((*v14 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8))
  {
    if (++v14 == v15)
      return 0;
  }
  v16 = sub_20C0A683C(v10);
  v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 96))(v16, a2);
  if (!*((_BYTE *)v13 + 72 * v17 + 120))
    return 0;
  result = pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)v13 + 72 * v17 + 56), a3);
  if ((_DWORD)result)
  {
    result = (uint64_t)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v13, a3);
    if (result)
    {
      FallbackValue = (pxrInternal__aapl__pxrReserved__::VtValue *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue((pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)result);
      result = sub_20BF4A73C(FallbackValue);
      if ((_DWORD)result)
      {
        v19 = *((_QWORD *)FallbackValue + 1);
        if ((v19 & 4) != 0)
        {
          result = (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v19 & 0xFFFFFFFFFFFFFFF8)
                                                                                          + 168))(FallbackValue);
          v20 = (uint64_t *)result;
        }
        else
        {
          v20 = *(uint64_t **)FallbackValue;
        }
        v21 = (*a4 & 0xFFFFFFFFFFFFFFF8) != 0
            ? (std::string *)((*a4 & 0xFFFFFFFFFFFFFFF8) + 16)
            : (std::string *)pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString((pxrInternal__aapl__pxrReserved__::TfToken *)result);
        result = pxrInternal__aapl__pxrReserved__::VtDictionary::GetValueAtPath(v20, v21, ":");
        if (result)
        {
          if (!a5)
            return 1;
          return (**a5)(a5, result);
        }
      }
    }
  }
  return result;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::GetFieldDictValueByKey@<X0>(pxrInternal__aapl__pxrReserved__::SdfLayer *this@<X0>, const pxrInternal__aapl__pxrReserved__::SdfPath *a2@<X1>, const pxrInternal__aapl__pxrReserved__::TfToken *a3@<X2>, const pxrInternal__aapl__pxrReserved__::TfToken *a4@<X3>, pxrInternal__aapl__pxrReserved__::VtValue *a5@<X8>)
{
  *((_QWORD *)a5 + 1) = 0;
  return pxrInternal__aapl__pxrReserved__::SdfLayer::HasFieldDictKey(this, a2, a3, a4, a5);
}

void sub_20C0FD3B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BF4C2D8(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0FD3C4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;

  v5 = *(_QWORD *)(a1 + 80);
  v6 = sub_20C0A683C((uint64_t *)(a1 + 112));
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a2);
  return pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(v5, a3, v7);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, uint64_t (***a4)(_QWORD, uint64_t))
{
  int v8;
  unint64_t v9;
  const char *v10;
  unint64_t v11;
  const char *v12;
  const char *Text;
  const char *v14;
  const char *v15;
  const char *v16;
  void *v17;
  int v18;
  char *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v20 = 0;
  v8 = (*a4)[1](a4, (uint64_t)&v19);
  sub_20BF4C2D8((uint64_t)&v19);
  if (v8)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::EraseField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3);
  }
  else if (!*(_BYTE *)(a1 + 513)
         || pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1))
  {
    v19 = "sdf/layer.cpp";
    v20 = "SetField";
    v21 = 3730;
    v22 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(const SdfPath &, const TfToken &, const SdfAbstractD"
          "ataConstValue &)";
    v23 = 0;
    v9 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v9)
    {
      v10 = (const char *)(v9 + 16);
      if (*(char *)(v9 + 39) < 0)
        v10 = *(const char **)v10;
    }
    else
    {
      v10 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    v14 = *(const char **)(a1 + 472);
    if (v14[23] < 0)
      v14 = *(const char **)v14;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s on <%s>. Layer @%s@ is not editable.", v10, Text, v14);
  }
  else if (!*(_BYTE *)(a1 + 515) || (sub_20C0FD3C4(a1, (uint64_t)a2, a3) & 1) != 0)
  {
    pxrInternal__aapl__pxrReserved__::SdfLayer::GetField((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, (pxrInternal__aapl__pxrReserved__::VtValue *)&v19);
    if (((*a4)[1](a4, (uint64_t)&v19) & 1) == 0)
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, a4, &v19, 1);
    sub_20BF4C2D8((uint64_t)&v19);
  }
  else
  {
    v19 = "sdf/layer.cpp";
    v20 = "SetField";
    v21 = 3739;
    v22 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetField(const SdfPath &, const TfToken &, const SdfAbstractD"
          "ataConstValue &)";
    v23 = 0;
    v17 = &unk_24C528BB8;
    v18 = 0;
    v11 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v11)
    {
      v12 = (const char *)(v11 + 16);
      if (*(char *)(v11 + 39) < 0)
        v12 = *(const char **)v12;
    }
    else
    {
      v12 = "";
    }
    v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    v16 = *(const char **)(a1 + 472);
    if (v16[23] < 0)
      v16 = *(const char **)v16;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v19, (uint64_t *)&v17, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s on <%s>. Field is not valid for layer @%s@.", v12, v15, v16);
  }
}

void sub_20C0FD65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(const char **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, const pxrInternal__aapl__pxrReserved__::VtValue *a5)
{
  unint64_t v10;
  const char *v11;
  char *v12;
  unint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  unint64_t v17;
  const char *v18;
  unint64_t v19;
  const char *v20;
  const char *Text;
  const char *v22;
  void *v23;
  int v24;
  std::type_info v25;
  uint64_t v26;
  const char *v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 513)
    && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted((pxrInternal__aapl__pxrReserved__::SdfLayer *)this))
  {
    if (!*((_BYTE *)this + 515) || (sub_20C0FD3C4((uint64_t)this, (uint64_t)a2, a3) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetFieldDictValueByKey((pxrInternal__aapl__pxrReserved__::SdfLayer *)this, a2, a3, a4, (pxrInternal__aapl__pxrReserved__::VtValue *)&v25);
      if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==(a5, &v25, v12) & 1) == 0)
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::VtValue>((uint64_t *)this, a2, a3, a4, a5, (pxrInternal__aapl__pxrReserved__::VtValue *)&v25, 1);
      sub_20BF4C2D8((uint64_t)&v25);
    }
    else
    {
      v25.__vftable = (std::type_info_vtbl *)"sdf/layer.cpp";
      v25.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"SetFieldDictValueByKey";
      v26 = 3767;
      v27 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(const SdfPath &, const TfToken &, co"
            "nst TfToken &, const VtValue &)";
      v28 = 0;
      v23 = &unk_24C528BB8;
      v24 = 0;
      v17 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v17)
      {
        v18 = (const char *)(v17 + 16);
        if (*(char *)(v17 + 39) < 0)
          v18 = *(const char **)v18;
      }
      else
      {
        v18 = "";
      }
      v19 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
      if (v19)
      {
        v20 = (const char *)(v19 + 16);
        if (*(char *)(v19 + 39) < 0)
          v20 = *(const char **)v20;
      }
      else
      {
        v20 = "";
      }
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v22 = this[59];
      if (v22[23] < 0)
        v22 = *(const char **)v22;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, (uint64_t *)&v23, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s:%s on <%s>. Field is not valid for layer @%s@.", v18, v20, Text, v22);
    }
  }
  else
  {
    v25.__vftable = (std::type_info_vtbl *)"sdf/layer.cpp";
    v25.__type_name = (std::__type_info_implementations::__non_unique_arm_rtti_bit_impl::__type_name_t)"SetFieldDictValueByKey";
    v26 = 3758;
    v27 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(const SdfPath &, const TfToken &, cons"
          "t TfToken &, const VtValue &)";
    v28 = 0;
    v10 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0)
        v11 = *(const char **)v11;
    }
    else
    {
      v11 = "";
    }
    v13 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (v13)
    {
      v14 = (const char *)(v13 + 16);
      if (*(char *)(v13 + 39) < 0)
        v14 = *(const char **)v14;
    }
    else
    {
      v14 = "";
    }
    v15 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    v16 = this[59];
    if (v16[23] < 0)
      v16 = *(const char **)v16;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v25, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s:%s on <%s>. Layer @%s@ is not editable.", v11, v14, v15, v16);
  }
}

void sub_20C0FD8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(const char **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4, uint64_t a5)
{
  unint64_t v10;
  const char *v11;
  unint64_t v12;
  const char *v13;
  const char *v14;
  const char *v15;
  unint64_t v16;
  const char *v17;
  unint64_t v18;
  const char *v19;
  const char *Text;
  const char *v21;
  void *v22;
  int v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 513)
    && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted((pxrInternal__aapl__pxrReserved__::SdfLayer *)this))
  {
    if (!*((_BYTE *)this + 515) || (sub_20C0FD3C4((uint64_t)this, (uint64_t)a2, a3) & 1) != 0)
    {
      pxrInternal__aapl__pxrReserved__::SdfLayer::GetFieldDictValueByKey((pxrInternal__aapl__pxrReserved__::SdfLayer *)this, a2, a3, a4, (pxrInternal__aapl__pxrReserved__::VtValue *)&v24);
      if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)a5 + 8))(a5, &v24) & 1) == 0)
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::SdfAbstractDataConstValue>((uint64_t *)this, a2, a3, (uint64_t)a4, a5, (uint64_t)&v24, 1);
      sub_20BF4C2D8((uint64_t)&v24);
    }
    else
    {
      v24 = "sdf/layer.cpp";
      v25 = "SetFieldDictValueByKey";
      v26 = 3797;
      v27 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(const SdfPath &, const TfToken &, co"
            "nst TfToken &, const SdfAbstractDataConstValue &)";
      v28 = 0;
      v22 = &unk_24C528BB8;
      v23 = 0;
      v16 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
      if (v16)
      {
        v17 = (const char *)(v16 + 16);
        if (*(char *)(v16 + 39) < 0)
          v17 = *(const char **)v17;
      }
      else
      {
        v17 = "";
      }
      v18 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
      if (v18)
      {
        v19 = (const char *)(v18 + 16);
        if (*(char *)(v18 + 39) < 0)
          v19 = *(const char **)v19;
      }
      else
      {
        v19 = "";
      }
      Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      v21 = this[59];
      if (v21[23] < 0)
        v21 = *(const char **)v21;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, (uint64_t *)&v22, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s:%s on <%s>. Field is not valid for layer @%s@.", v17, v19, Text, v21);
    }
  }
  else
  {
    v24 = "sdf/layer.cpp";
    v25 = "SetFieldDictValueByKey";
    v26 = 3788;
    v27 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::SetFieldDictValueByKey(const SdfPath &, const TfToken &, cons"
          "t TfToken &, const SdfAbstractDataConstValue &)";
    v28 = 0;
    v10 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v10)
    {
      v11 = (const char *)(v10 + 16);
      if (*(char *)(v10 + 39) < 0)
        v11 = *(const char **)v11;
    }
    else
    {
      v11 = "";
    }
    v12 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (v12)
    {
      v13 = (const char *)(v12 + 16);
      if (*(char *)(v12 + 39) < 0)
        v13 = *(const char **)v13;
    }
    else
    {
      v13 = "";
    }
    v14 = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    v15 = this[59];
    if (v15[23] < 0)
      v15 = *(const char **)v15;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v24, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot set %s:%s on <%s>. Layer @%s@ is not editable.", v11, v13, v14, v15);
  }
}

void sub_20C0FDB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseFieldDictValueByKey(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::TfToken *a3, const pxrInternal__aapl__pxrReserved__::TfToken *a4)
{
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  const char *Text;
  const char *v14;
  char *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    v10 = sub_20C0A683C((uint64_t *)this + 14);
    if ((*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::TfToken *, const pxrInternal__aapl__pxrReserved__::TfToken *, _QWORD))(*(_QWORD *)v10 + 192))(v10, a2, a3, a4, 0))
    {
      v16 = 0;
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetFieldDictValueByKey<pxrInternal__aapl__pxrReserved__::VtValue>((uint64_t *)this, a2, a3, a4, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v15, 0, 1);
      sub_20BF4C2D8((uint64_t)&v15);
    }
  }
  else
  {
    v15 = "sdf/layer.cpp";
    v16 = "EraseFieldDictValueByKey";
    v17 = 3850;
    v18 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::EraseFieldDictValueByKey(const SdfPath &, const TfToken &, const TfToken &)";
    v19 = 0;
    v8 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
    if (v8)
    {
      v9 = (const char *)(v8 + 16);
      if (*(char *)(v8 + 39) < 0)
        v9 = *(const char **)v9;
    }
    else
    {
      v9 = "";
    }
    v11 = *(_QWORD *)a4 & 0xFFFFFFFFFFFFFFF8;
    if (v11)
    {
      v12 = (const char *)(v11 + 16);
      if (*(char *)(v11 + 39) < 0)
        v12 = *(const char **)v12;
    }
    else
    {
      v12 = "";
    }
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    v14 = (const char *)*((_QWORD *)this + 59);
    if (v14[23] < 0)
      v14 = *(const char **)v14;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v15, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot erase %s:%s on <%s>. Layer @%s@ is not editable.", v9, v12, Text, v14);
  }
}

void sub_20C0FDCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20BF4C2D8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_SwapData(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 112);
  *(_QWORD *)(result + 112) = *a2;
  *a2 = v2;
  return result;
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_AdoptData(uint64_t a1, uint64_t *a2)
{
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v4;
  unint64_t *Instance;
  _BYTE v7[8];

  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v7);
  v4 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 112);
  *(_QWORD *)(a1 + 112) = *a2;
  sub_20BF1DD04(a2);
  sub_20BF1D8F4(a1 + 112, v4);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidReplaceLayerContent(Instance, (uint64_t *)(a1 + 24));
  return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v7);
}

void sub_20C0FDDB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0FDDC4(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  int v4;
  uint64_t result;
  BOOL v6;
  char *v7;
  _QWORD v8[4];
  char v9;

  v3 = a1[1];
  v2 = a1 + 1;
  if (!v3
    || ((v4 = *(unsigned __int8 *)(sub_20BEB47BC(v2) + 14), result = *a1, v4) ? (v6 = result == 0) : (v6 = 1), v6))
  {
    v7 = j__strrchr("/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", 47);
    v8[0] = sub_20BEB23F8((unint64_t)"/Library/Caches/com.apple.xbs/Sources/USDLib/USD/pxr/base/tf/weakPtrFacade.h", (uint64_t)v7, 0x2Fu);
    v8[1] = "operator->";
    v8[2] = 216;
    v8[3] = "DataType *pxrInternal__aapl__pxrReserved__::TfWeakPtrFacade<pxrInternal__aapl__pxrReserved__::TfWeakPtr, pxr"
            "Internal__aapl__pxrReserved__::SdfAbstractData>::operator->() const [PtrTemplate = pxrInternal__aapl__pxrRes"
            "erved__::TfWeakPtr, Type = pxrInternal__aapl__pxrReserved__::SdfAbstractData]";
    v9 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostNullSmartPtrDereferenceFatalError((uint64_t)v8, (pxrInternal__aapl__pxrReserved__ *)(0x800000020CAB6BA3 & 0x7FFFFFFFFFFFFFFFLL));
  }
  return result;
}

char *sub_20C0FDE68(uint64_t a1, uint64_t a2, char *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  _QWORD v8[4];
  char v9;
  int v10;

  v3 = *(_QWORD **)(a1 + 8);
  if (v3 == *(_QWORD **)(a1 + 24))
  {
    v8[0] = "tf/iterator.h";
    v8[1] = "operator*";
    v8[2] = 271;
    v8[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, "
            "true>::operator*() [T = std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = true]";
    v9 = 0;
    v10 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v8, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  v4 = (_QWORD *)*v3;
  if (*v3)
  {
    do
    {
      v5 = v4;
      v4 = (_QWORD *)v4[1];
    }
    while (v4);
  }
  else
  {
    do
    {
      v5 = (_QWORD *)v3[2];
      v6 = *v5 == (_QWORD)v3;
      v3 = v5;
    }
    while (v6);
  }
  return (char *)v5 + 28;
}

void sub_20C0FDF0C()
{
  JUMPOUT(0x20C0FDE88);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimDeleteSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3, int a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *v7;
  unint64_t *Instance;
  uint64_t v10;
  char **v11;
  uint64_t v12;
  _BYTE v13[8];
  char *v14;
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  char **v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    if (*((_QWORD *)this + 15)
      || (v14 = "sdf/layer.cpp",
          v15 = (uint64_t (*)(uint64_t))"_PrimDeleteSpec",
          v16 = 4539,
          v17 = (char **)"void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimDeleteSpec(const SdfPath &, BOOL, BOOL)",
          v18 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v14, "_stateDelegate", 0) & 1) != 0))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_20C0EBD60((uint64_t *)this + 15);
      return pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::DeleteSpec(v7, a2, a3);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidRemoveSpec(Instance, (uint64_t *)this + 3, a2, a3);
  v10 = *((_QWORD *)this + 14);
  v14 = (char *)&unk_24C528D00;
  v15 = sub_20C100A08;
  v16 = v10;
  v17 = &v14;
  pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse((uint64_t)this, a2, (uint64_t)&v14);
  v11 = v17;
  if (v17 == &v14)
  {
    v12 = 4;
    v11 = &v14;
    goto LABEL_11;
  }
  if (v17)
  {
    v12 = 5;
LABEL_11:
    (*(void (**)(void))&(*v11)[8 * v12])();
  }
  return sub_20BFD2190(v13);
}

void sub_20C0FE078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, int a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)&a10);
  _Unwind_Resume(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInertSubtree(pxrInternal__aapl__pxrReserved__::SdfLayer **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  _BOOL8 result;
  uint64_t v5;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  int HasField;
  int v17;
  const pxrInternal__aapl__pxrReserved__::TfToken *v18;
  const pxrInternal__aapl__pxrReserved__::TfToken *v19;
  char IsInertSubtree;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int v25;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v26;
  int v27;
  int v28;
  const pxrInternal__aapl__pxrReserved__::TfToken *v29;
  const pxrInternal__aapl__pxrReserved__::TfToken *v30;
  BOOL IsInert;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v32;
  pxrInternal__aapl__pxrReserved__::TfToken *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *EmptyString;
  char v38;
  char v39;
  int v40;
  int v41;
  void *v42[2];
  std::type_info *v43;
  void *v44[2];
  std::type_info *v45;
  void *__p;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];

  v51[1] = *MEMORY[0x24BDAC8D0];
  result = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInert(this, a2, 1, 1);
  if (result)
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimVariantSelectionPath(a2))
      goto LABEL_10;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(a2, (uint64_t)v44);
    if ((v48 & 0x80u) == 0)
      v5 = v48;
    else
      v5 = v47;
    if ((char)v48 < 0)
      operator delete(__p);
    if (SHIBYTE(v45) < 0)
    {
      operator delete(v44[0]);
      if (v5)
      {
LABEL_10:
        if (pxrInternal__aapl__pxrReserved__::SdfPath::IsPrimOrPrimVariantSelectionPath(a2))
        {
          v6 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v6)
            v6 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          v7 = *((_QWORD *)v6 + 4);
          v49 = v7;
          if ((v7 & 7) != 0)
          {
            v8 = (unsigned int *)(v7 & 0xFFFFFFFFFFFFFFF8);
            do
              v9 = __ldxr(v8);
            while (__stxr(v9 + 2, v8));
            if ((v9 & 1) == 0)
              v49 &= 0xFFFFFFFFFFFFFFF8;
          }
          v10 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v10)
            v10 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          v11 = *((_QWORD *)v10 + 8);
          v50 = v11;
          if ((v11 & 7) != 0)
          {
            v12 = (unsigned int *)(v11 & 0xFFFFFFFFFFFFFFF8);
            do
              v13 = __ldxr(v12);
            while (__stxr(v13 + 2, v12));
            if ((v13 & 1) == 0)
              v50 &= 0xFFFFFFFFFFFFFFF8;
          }
          v14 = 0;
          v15 = v51;
          do
          {
            v42[0] = 0;
            v42[1] = 0;
            v43 = 0;
            v44[0] = &unk_24C528DB0;
            v44[1] = v42;
            v45 = &stru_24C51BCF0;
            LOWORD(__p) = 0;
            HasField = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, a2, (const pxrInternal__aapl__pxrReserved__::TfToken *)(&v49 + v14), (uint64_t (***)(_QWORD, uint64_t))v44);
            if ((_BYTE)__p)
              v17 = 0;
            else
              v17 = HasField;
            if (v17 == 1)
            {
              v18 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v42[0];
              v19 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v42[1];
              while (v18 != v19)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, v18, v44);
                IsInertSubtree = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInertSubtree((pxrInternal__aapl__pxrReserved__::SdfLayer *)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v44);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v44 + 1);
                sub_20BFD265C(v44);
                if ((IsInertSubtree & 1) == 0)
                {
                  v44[0] = v42;
                  sub_20BEEB2B8((void ***)v44);
                  v21 = 0;
                  goto LABEL_37;
                }
                v18 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v18 + 8);
              }
            }
            v44[0] = v42;
            sub_20BEEB2B8((void ***)v44);
            ++v14;
          }
          while (v14 != 2);
          v21 = 1;
          do
          {
LABEL_37:
            v23 = *--v15;
            v22 = v23;
            if ((v23 & 7) != 0)
            {
              v24 = (unsigned int *)(v22 & 0xFFFFFFFFFFFFFFF8);
              do
                v25 = __ldxr(v24);
              while (__stlxr(v25 - 2, v24));
            }
          }
          while (v15 != &v49);
          if ((v21 & 1) == 0)
            return 0;
          v42[0] = 0;
          v42[1] = 0;
          v43 = 0;
          v26 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v26)
            v26 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          v45 = &stru_24C51BCF0;
          LOWORD(__p) = 0;
          v44[0] = &unk_24C528DB0;
          v44[1] = v42;
          v27 = pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, a2, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v26 + 40), (uint64_t (***)(_QWORD, uint64_t))v44);
          if ((_BYTE)__p)
            v28 = 0;
          else
            v28 = v27;
          if (v28 == 1)
          {
            v29 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v42[0];
            v30 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v42[1];
            if (v42[0] != v42[1])
            {
              while (1)
              {
                pxrInternal__aapl__pxrReserved__::SdfPath::AppendProperty(a2, v29, (int *)v44);
                IsInert = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInert(this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v44, 0, 1);
                pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v44 + 1);
                sub_20BFD265C(v44);
                if (!IsInert)
                  break;
                v29 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v29 + 8);
                if (v29 == v30)
                  goto LABEL_51;
              }
              v44[0] = v42;
              sub_20BEEB2B8((void ***)v44);
              return 0;
            }
          }
LABEL_51:
          v44[0] = v42;
          sub_20BEEB2B8((void ***)v44);
        }
        return 1;
      }
    }
    else if (v5)
    {
      goto LABEL_10;
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetVariantSelection(a2, (uint64_t)v44);
    *(_OWORD *)v42 = *(_OWORD *)v44;
    v43 = v45;
    v44[0] = 0;
    v44[1] = 0;
    v45 = 0;
    if ((char)v48 < 0)
    {
      operator delete(__p);
      if (SHIBYTE(v45) < 0)
        operator delete(v44[0]);
    }
    pxrInternal__aapl__pxrReserved__::SdfPath::GetParentPath(a2, &v40);
    v49 = 0;
    v50 = 0;
    v51[0] = 0;
    v32 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v32)
      v32 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    v45 = &stru_24C51BCF0;
    LOWORD(__p) = 0;
    v44[0] = &unk_24C528DB0;
    v44[1] = &v49;
    v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)pxrInternal__aapl__pxrReserved__::SdfLayer::HasField(this, a2, (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)((char *)v32 + 56), (uint64_t (***)(_QWORD, uint64_t))v44);
    if ((_BYTE)__p)
      v34 = 0;
    else
      v34 = (int)v33;
    if (v34 != 1 || (v35 = v50, v49 == v50))
    {
      v38 = 1;
    }
    else
    {
      v36 = v49 + 8;
      do
      {
        if ((*(_QWORD *)(v36 - 8) & 0xFFFFFFFFFFFFFFF8) != 0)
          EmptyString = (uint64_t *)((*(_QWORD *)(v36 - 8) & 0xFFFFFFFFFFFFFFF8) + 16);
        else
          EmptyString = pxrInternal__aapl__pxrReserved__::TfToken::_GetEmptyString(v33);
        pxrInternal__aapl__pxrReserved__::SdfPath::AppendVariantSelection(&v40, (uint64_t)v42, (uint64_t)EmptyString, v44);
        v38 = pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInertSubtree((pxrInternal__aapl__pxrReserved__::SdfLayer *)this, (const pxrInternal__aapl__pxrReserved__::SdfPath *)v44);
        pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)v44 + 1);
        v33 = (pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFD265C(v44);
        if (v36 == v35)
          v39 = 0;
        else
          v39 = v38;
        v36 += 8;
      }
      while ((v39 & 1) != 0);
    }
    v44[0] = &v49;
    sub_20BEEB2B8((void ***)v44);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v41);
    sub_20BFD265C(&v40);
    if (SHIBYTE(v43) < 0)
    {
      operator delete(v42[0]);
      if ((v38 & 1) != 0)
        return 1;
    }
    else if ((v38 & 1) != 0)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

void sub_20C0FE5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  unsigned int *v24;
  unsigned int v25;

  if ((a24 & 7) != 0)
  {
    v24 = (unsigned int *)(a24 & 0xFFFFFFFFFFFFFFF8);
    do
      v25 = __ldxr(v24);
    while (__stlxr(v25 - 2, v24));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C0FE6F8(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = *(_QWORD **)(a1 + 8);
  if (v2 == *(_QWORD **)(a1 + 24))
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::set<pxrInternal__aapl__pxrReserved"
            "__::SdfPath>, true>::operator++() [T = std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = true]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)*v2;
    if (*v2)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)v3[1];
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_20C0FE7A0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C5286E8;
  sub_20BFD7C28(a1 + 16, *(_QWORD **)(a1 + 24));
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)a1);
}

uint64_t sub_20C0FE7DC(_QWORD *a1, uint64_t a2, char *a3)
{
  _QWORD v4[4];
  char v5;
  int v6;

  if (*a1 == a1[1])
  {
    v4[0] = "tf/iterator.h";
    v4[1] = "operator*";
    v4[2] = 271;
    v4[3] = "Reference pxrInternal__aapl__pxrReserved__::TfIterator<std::set<pxrInternal__aapl__pxrReserved__::SdfPath>>:"
            ":operator*() [T = std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v5 = 0;
    v6 = 4;
    pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper::IssueFatalError((pxrInternal__aapl__pxrReserved__::Tf_DiagnosticHelper *)v4, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted", a3);
  }
  return *a1 + 28;
}

void sub_20C0FE850()
{
  JUMPOUT(0x20C0FE7F8);
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimCreateSpec(uint64_t *a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t *v9;
  unint64_t *Instance;
  uint64_t v12;
  _QWORD v13[4];
  char v14;

  if (a5
    && (a1[15]
     || (v13[0] = "sdf/layer.cpp",
         v13[1] = "_PrimCreateSpec",
         v13[2] = 4558,
         v13[3] = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimCreateSpec(const SdfPath &, SdfSpecType, BOOL, BOOL)",
         v14 = 0,
         (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v13, "_stateDelegate", 0) & 1) != 0)))
  {
    v9 = (uint64_t *)sub_20C0EBD60(a1 + 15);
    return (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::CreateSpec(v9, (uint64_t)a2, a3, a4);
  }
  else
  {
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidAddSpec(Instance, a1 + 3, a2, a4);
    v12 = sub_20C0A683C(a1 + 14);
    (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)v12 + 64))(v12, a2, a3);
    return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v13);
  }
}

void sub_20C0FE95C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C0FE970(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;
  _QWORD v7[4];
  char v8;

  v2 = (_QWORD *)*a1;
  if (*a1 == a1[1])
  {
    v7[0] = "tf/iterator.h";
    v7[1] = "operator++";
    v7[2] = 250;
    v7[3] = "TfIterator<T, Reverse> &pxrInternal__aapl__pxrReserved__::TfIterator<std::set<pxrInternal__aapl__pxrReserved"
            "__::SdfPath>>::operator++() [T = std::set<pxrInternal__aapl__pxrReserved__::SdfPath>, Reverse = false]";
    v8 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v7, 1, (pxrInternal__aapl__pxrReserved__ *)"iterator exhausted");
  }
  else
  {
    v3 = (_QWORD *)v2[1];
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = (_QWORD *)*v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (_QWORD *)v2[2];
        v5 = *v4 == (_QWORD)v2;
        v2 = v4;
      }
      while (!v5);
    }
    *a1 = v4;
  }
  return a1;
}

void sub_20C0FEA14(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a1)
{
  *(_QWORD *)a1 = off_24C528730;
  sub_20BFD7C28((uint64_t)a1 + 16, *((_QWORD **)a1 + 3));
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor(a1);
}

void sub_20C0FEA48(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a1)
{
  *(_QWORD *)a1 = off_24C528778;
  sub_20C102F0C((uint64_t)a1 + 24, *((_QWORD **)a1 + 4));
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;

  if (*((_BYTE *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    if (pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a2)
      && pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPrimTag,24u,8u,16384u>::Handle::operator BOOL(a3))
    {
      if (pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a2, a3)
        || pxrInternal__aapl__pxrReserved__::SdfPath::HasPrefix(a3, a2))
      {
        v10 = "sdf/layer.cpp";
        v11 = "_MoveSpec";
        v12 = 4359;
        v13 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(const SdfPath &, const SdfPath &)";
        v14 = 0;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
        pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot move <%s> to <%s>. Source and destination must not overlap");
      }
      else
      {
        v8 = sub_20C0A683C((uint64_t *)this + 14);
        if ((*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v8 + 72))(v8, a2))
        {
          v9 = sub_20C0A683C((uint64_t *)this + 14);
          if (((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v9 + 72))(v9, a3) & 1) == 0)
          {
            v6 = 1;
            pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimMoveSpec(this, a2, a3, 1);
            return v6;
          }
        }
      }
    }
    else
    {
      v10 = "sdf/layer.cpp";
      v11 = "_MoveSpec";
      v12 = 4352;
      v13 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(const SdfPath &, const SdfPath &)";
      v14 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot move <%s> to <%s>. Source and destination must be non-empty paths");
    }
  }
  else
  {
    v10 = "sdf/layer.cpp";
    v11 = "_MoveSpec";
    v12 = 4345;
    v13 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_MoveSpec(const SdfPath &, const SdfPath &)";
    v14 = 0;
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a3);
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot move <%s> to <%s>. Layer @%s@ is not editable.");
  }
  return 0;
}

pxrInternal__aapl__pxrReserved__::SdfChangeBlock *pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimMoveSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, const pxrInternal__aapl__pxrReserved__::SdfPath *a3, int a4)
{
  pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *v7;
  unint64_t *Instance;
  const char *v10;
  uint64_t v11;
  char *v12;
  _DWORD *(*v13)(uint64_t *, uint64_t **, pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::SdfPath *, const pxrInternal__aapl__pxrReserved__::SdfPath *);
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v14[2];
  int v15;
  int v16;
  int v17;
  int v18;
  _BYTE v19[15];
  _QWORD v20[3];
  const char *v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  if (a4)
  {
    if (*((_QWORD *)this + 15)
      || (v20[0] = "sdf/layer.cpp",
          v20[1] = "_PrimMoveSpec",
          v20[2] = 4395,
          v21 = "void pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimMoveSpec(const SdfPath &, const SdfPath &, BOOL)",
          v22 = 0,
          (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)v20, "_stateDelegate", 0) & 1) != 0))
    {
      v7 = (pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase *)sub_20C0EBD60((uint64_t *)this + 15);
      return (pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)pxrInternal__aapl__pxrReserved__::SdfLayerStateDelegateBase::MoveSpec(v7, a2, a3);
    }
  }
  pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
  Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  if (!Instance)
    Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
  pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager::DidMoveSpec(Instance, (uint64_t *)this + 3, a2, a3);
  v12 = (char *)this + 88;
  v13 = sub_20C0FF208;
  sub_20C105D40((uint64_t)v14, (_QWORD *)this + 14, &v12, MEMORY[0x24BEDAD88], a2, a3);
  sub_20C105DB8((uint64_t)v20, (uint64_t *)&v13);
  pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse((uint64_t)this, a2, (uint64_t)v20);
  v10 = v21;
  if (v21 == (const char *)v20)
  {
    v11 = 4;
    v10 = (const char *)v20;
    goto LABEL_11;
  }
  if (v21)
  {
    v11 = 5;
LABEL_11:
    (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
  }
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v18);
  sub_20BFD265C(&v17);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(&v16);
  sub_20BFD265C(&v15);
  sub_20C0EA270(v14);
  return sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v19);
}

void sub_20C0FEE20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2)
    sub_20BDC12F4(exception_object);
  _Unwind_Resume(exception_object);
}

void pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfAbstractData *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v39;
  _QWORD *v40;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v41;
  uint64_t v42;
  __int128 i;
  _OWORD v44[2];

  pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)(a1 + 80), *(const pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)(a1 + 112), a2, v44);
  for (i = v44[0]; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
  {
    v10 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v6, v7);
    v11 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if (!v11)
      v11 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
    if ((*v10 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v11 + 4) & 0xFFFFFFFFFFFFFFF8))
    {
      sub_20C0FF734(a1, a2);
    }
    else
    {
      v14 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v8, v9);
      v15 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if (!v15)
        v15 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
      if ((*v14 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v15 + 5) & 0xFFFFFFFFFFFFFFF8))
      {
        sub_20C0FF94C(a1, a2);
      }
      else
      {
        v18 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v12, v13);
        v19 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if (!v19)
          v19 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
        if ((*v18 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v19 + 3) & 0xFFFFFFFFFFFFFFF8))
        {
          sub_20C0FFB64(a1, a2);
        }
        else
        {
          v22 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v16, v17);
          v23 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if (!v23)
            v23 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
          if ((*v22 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v23 + 2) & 0xFFFFFFFFFFFFFFF8))
          {
            sub_20C0FFD7C(a1, a2);
          }
          else
          {
            v26 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v20, v21);
            v27 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
            if (!v27)
              v27 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
            if ((*v26 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v27 + 7) & 0xFFFFFFFFFFFFFFF8))
            {
              sub_20C0FFF94(a1, a2);
            }
            else
            {
              v30 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v24, v25);
              v31 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
              if (!v31)
                v31 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
              if ((*v30 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v31 + 8) & 0xFFFFFFFFFFFFFFF8))
              {
                sub_20C1001AC(a1, a2);
              }
              else
              {
                v34 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v28, v29);
                v35 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v35)
                  v35 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if ((*v34 & 0xFFFFFFFFFFFFFFF8) == (*(_QWORD *)v35 & 0xFFFFFFFFFFFFFFF8))
                {
                  sub_20C1003C4(a1, a2);
                }
                else
                {
                  v38 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v32, v33);
                  v39 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                  if (!v39)
                    v39 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                  if ((*v38 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v39 + 6) & 0xFFFFFFFFFFFFFFF8))
                  {
                    sub_20C1005DC(a1, a2);
                  }
                  else
                  {
                    v40 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v36, v37);
                    v41 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                    if (!v41)
                      v41 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                    if ((*v40 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v41 + 1) & 0xFFFFFFFFFFFFFFF8))
                      sub_20C1007F4(a1, a2);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  v42 = *(_QWORD *)(a3 + 24);
  if (!v42)
    sub_20BE9E974();
  (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfAbstractData *))(*(_QWORD *)v42 + 48))(v42, a2);
  *(_QWORD *)&i = v44;
  sub_20BEEB2B8((void ***)&i);
}

void sub_20C0FF1E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  a9 = (void **)&a11;
  sub_20BEEB2B8(&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20C0FF208(uint64_t *a1, uint64_t **a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3, const pxrInternal__aapl__pxrReserved__::SdfPath *a4, const pxrInternal__aapl__pxrReserved__::SdfPath *a5)
{
  uint64_t v8;
  uint64_t v10;

  pxrInternal__aapl__pxrReserved__::SdfPath::ReplacePrefix(&v10, a3, a4, a5, 0);
  v8 = sub_20C0A683C(a1);
  (*(void (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t *))(*(_QWORD *)v8 + 88))(v8, a3, &v10);
  pxrInternal__aapl__pxrReserved__::Sdf_IdentityRegistry::MoveIdentity(a2, a3, (const pxrInternal__aapl__pxrReserved__::SdfPath *)&v10);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v10 + 1);
  return sub_20BFD265C(&v10);
}

void sub_20C0FF298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20BFD1A18((int *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20C0FF2AC(uint64_t a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 36));
  sub_20BFD265C((_DWORD *)(a1 + 32));
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 28));
  sub_20BFD265C((_DWORD *)(a1 + 24));
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  return a1;
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *this, pxrInternal__aapl__pxrReserved__::SdfPath *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;
  const char *Text;
  void **v12;
  const char *v13;
  void *__p[2];
  char v15;
  void *v16;
  int v17;
  char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  char v22;

  if ((_DWORD)a3)
  {
    if (*((_BYTE *)this + 513) && !pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
    {
      if (*((_BYTE *)this + 515) && !*(_BYTE *)(*((_QWORD *)this + 10) + 72 * a3 + 120))
      {
        v18 = "sdf/layer.cpp";
        v19 = "_CreateSpec";
        v20 = 4436;
        v21 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(const SdfPath &, SdfSpecType, BOOL)";
        v22 = 0;
        v16 = &unk_24C528BB8;
        v17 = 1;
        Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
        pxrInternal__aapl__pxrReserved__::TfEnum::GetName((uint64_t)&unk_24C524D70, a3, (uint64_t)__p);
        if (v15 >= 0)
          v12 = __p;
        else
          v12 = (void **)__p[0];
        v13 = (const char *)*((_QWORD *)this + 59);
        if (v13[23] < 0)
          v13 = *(const char **)v13;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, (uint64_t *)&v16, (pxrInternal__aapl__pxrReserved__ *)"Cannot create spec at <%s>. %s is not a valid spec type for layer @%s@", Text, (const char *)v12, v13);
        if (v15 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v10 = sub_20C0A683C((uint64_t *)this + 14);
        if (!(*(unsigned int (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v10 + 72))(v10, a2))
        {
          v8 = 1;
          pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimCreateSpec((uint64_t *)this, a2, a3, a4, 1);
          return v8;
        }
        v18 = "sdf/layer.cpp";
        v19 = "_CreateSpec";
        v20 = 4443;
        v21 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(const SdfPath &, SdfSpecType, BOOL)";
        v22 = 0;
        pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create spec <%s> because it already exists in @%s@");
      }
    }
    else
    {
      v18 = "sdf/layer.cpp";
      v19 = "_CreateSpec";
      v20 = 4427;
      v21 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_CreateSpec(const SdfPath &, SdfSpecType, BOOL)";
      v22 = 0;
      pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v18, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot create spec at <%s>. Layer @%s@ is not editable.");
    }
  }
  return 0;
}

void sub_20C0FF514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(pxrInternal__aapl__pxrReserved__::SdfLayer *this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  const char *Text;
  const char *v5;
  uint64_t v6;
  uint64_t v8;
  unint64_t Instance;
  char **v10;
  uint64_t v11;
  _BYTE v12[8];
  char *v13;
  const char *v14;
  uint64_t v15;
  char **v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 513) || pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(this))
  {
    v13 = "sdf/layer.cpp";
    v14 = "_DeleteSpec";
    v15 = 4458;
    v16 = (char **)"BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_DeleteSpec(const SdfPath &)";
    v17 = 0;
    Text = pxrInternal__aapl__pxrReserved__::SdfPath::GetText(a2);
    v5 = (const char *)*((_QWORD *)this + 59);
    if (v5[23] < 0)
      v5 = *(const char **)v5;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v13, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot delete <%s>. Layer @%s@ is not editable", Text, v5);
    return 0;
  }
  v8 = sub_20C0A683C((uint64_t *)this + 14);
  if ((*(unsigned int (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v8 + 72))(v8, a2))
  {
    if (!pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInertSubtree((pxrInternal__aapl__pxrReserved__::SdfLayer **)this, a2))
    {
      v6 = 1;
      pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimDeleteSpec(this, a2, 0, 1);
      return v6;
    }
    pxrInternal__aapl__pxrReserved__::SdfChangeBlock::SdfChangeBlock((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)v12);
    Instance = atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    if (!Instance)
      Instance = pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::Sdf_ChangeManager>::_instance);
    v13 = (char *)&off_24C528C80;
    v14 = (const char *)this;
    v15 = Instance;
    v16 = &v13;
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse((uint64_t)this, a2, (uint64_t)&v13);
    v10 = v16;
    if (v16 == &v13)
    {
      v11 = 4;
      v10 = &v13;
    }
    else
    {
      if (!v16)
      {
LABEL_18:
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimDeleteSpec(this, a2, 1, 1);
        sub_20BFD2190(v12);
        return 1;
      }
      v11 = 5;
    }
    (*(void (**)(void))&(*v10)[8 * v11])();
    goto LABEL_18;
  }
  return 0;
}

void sub_20C0FF6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20BFD2190((pxrInternal__aapl__pxrReserved__::SdfChangeBlock *)va);
  _Unwind_Resume(a1);
}

void sub_20C0FF734(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  uint64_t **v5;
  void ***v6;
  uint64_t v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  __int128 i;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20C0C19F0((unsigned int **)&v14);
  i = 0uLL;
  v13 = 0;
  v4 = sub_20C0A683C((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v4 + 136))(&v17, v4, a2, &v14);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v17))
  {
    if ((v18 & 4) != 0)
      v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(&v17);
    else
      v5 = v17;
  }
  else
  {
    v5 = (uint64_t **)&i;
  }
  v15 = 0uLL;
  v16 = 0;
  sub_20BFE538C(&v15, *v5, v5[1], v5[1] - *v5);
  v6 = (void ***)sub_20BF4C2D8((uint64_t)&v17);
  v17 = (uint64_t **)&i;
  sub_20BEEB2B8(v6);
  if ((v14 & 7) != 0)
  {
    v9 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  for (i = v15; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
  {
    v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B14((uint64_t *)&i, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendChild(a2, v11, &v17);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_20BFD265C(&v17);
  }
  *(_QWORD *)&i = &v15;
  sub_20BEEB2B8((void ***)&i);
}

void sub_20C0FF8BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

void sub_20C0FF94C(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  uint64_t **v5;
  void ***v6;
  uint64_t v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  __int128 i;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20C0B438C((unsigned int **)&v14);
  i = 0uLL;
  v13 = 0;
  v4 = sub_20C0A683C((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v4 + 136))(&v17, v4, a2, &v14);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v17))
  {
    if ((v18 & 4) != 0)
      v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(&v17);
    else
      v5 = v17;
  }
  else
  {
    v5 = (uint64_t **)&i;
  }
  v15 = 0uLL;
  v16 = 0;
  sub_20BFE538C(&v15, *v5, v5[1], v5[1] - *v5);
  v6 = (void ***)sub_20BF4C2D8((uint64_t)&v17);
  v17 = (uint64_t **)&i;
  sub_20BEEB2B8(v6);
  if ((v14 & 7) != 0)
  {
    v9 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  for (i = v15; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
  {
    v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B14((uint64_t *)&i, v7, v8);
    sub_20C0AE7F4(a2, v11, (int *)&v17);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_20BFD265C(&v17);
  }
  *(_QWORD *)&i = &v15;
  sub_20BEEB2B8((void ***)&i);
}

void sub_20C0FFAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

void sub_20C0FFB64(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  __int128 *v5;
  void ***v6;
  uint64_t v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  __int128 i;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20C0B7ED8((unsigned int **)&v14);
  i = 0uLL;
  v13 = 0;
  v4 = sub_20C0A683C((uint64_t *)(a1 + 112));
  (*(void (**)(__int128 **__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v4 + 136))(&v17, v4, a2, &v14);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v17))
  {
    if ((v18 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(&v17);
    else
      v5 = v17;
  }
  else
  {
    v5 = &i;
  }
  v15 = 0uLL;
  v16 = 0;
  sub_20BFD6D38(&v15, *(_DWORD **)v5, *((_DWORD **)v5 + 1), (uint64_t)(*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 3);
  v6 = (void ***)sub_20BF4C2D8((uint64_t)&v17);
  v17 = &i;
  sub_20BFD6F90(v6);
  if ((v14 & 7) != 0)
  {
    v9 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  for (i = v15; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFD7240(&i))
  {
    v11 = (pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&i, v7, v8);
    sub_20C0AF418(a2, v11, &v17);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_20BFD265C(&v17);
  }
  *(_QWORD *)&i = &v15;
  sub_20BFD6F90((void ***)&i);
}

void sub_20C0FFCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

void sub_20C0FFD7C(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  uint64_t **v5;
  void ***v6;
  uint64_t v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  __int128 i;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20C0BAE84((unsigned int **)&v14);
  i = 0uLL;
  v13 = 0;
  v4 = sub_20C0A683C((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v4 + 136))(&v17, v4, a2, &v14);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v17))
  {
    if ((v18 & 4) != 0)
      v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(&v17);
    else
      v5 = v17;
  }
  else
  {
    v5 = (uint64_t **)&i;
  }
  v15 = 0uLL;
  v16 = 0;
  sub_20BFE538C(&v15, *v5, v5[1], v5[1] - *v5);
  v6 = (void ***)sub_20BF4C2D8((uint64_t)&v17);
  v17 = (uint64_t **)&i;
  sub_20BEEB2B8(v6);
  if ((v14 & 7) != 0)
  {
    v9 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  for (i = v15; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
  {
    v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20C023B14((uint64_t *)&i, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendMapperArg(a2, v11, &v17);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_20BFD265C(&v17);
  }
  *(_QWORD *)&i = &v15;
  sub_20BEEB2B8((void ***)&i);
}

void sub_20C0FFF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

void sub_20C0FFF94(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  uint64_t **v5;
  void ***v6;
  uint64_t v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  __int128 i;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20C0CBC94((unsigned int **)&v14);
  i = 0uLL;
  v13 = 0;
  v4 = sub_20C0A683C((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v4 + 136))(&v17, v4, a2, &v14);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v17))
  {
    if ((v18 & 4) != 0)
      v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(&v17);
    else
      v5 = v17;
  }
  else
  {
    v5 = (uint64_t **)&i;
  }
  v15 = 0uLL;
  v16 = 0;
  sub_20BFE538C(&v15, *v5, v5[1], v5[1] - *v5);
  v6 = (void ***)sub_20BF4C2D8((uint64_t)&v17);
  v17 = (uint64_t **)&i;
  sub_20BEEB2B8(v6);
  if ((v14 & 7) != 0)
  {
    v9 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  for (i = v15; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
  {
    v11 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v7, v8);
    sub_20C0B2C10(a2, v11, &v17);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_20BFD265C(&v17);
  }
  *(_QWORD *)&i = &v15;
  sub_20BEEB2B8((void ***)&i);
}

void sub_20C10011C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

void sub_20C1001AC(uint64_t a1, pxrInternal__aapl__pxrReserved__::TfToken *a2)
{
  uint64_t v4;
  uint64_t **v5;
  void ***v6;
  uint64_t v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  _QWORD *v11;
  __int128 i;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20C0CF33C((unsigned int **)&v14);
  i = 0uLL;
  v13 = 0;
  v4 = sub_20C0A683C((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::TfToken *, unint64_t *))(*(_QWORD *)v4 + 136))(&v17, v4, a2, &v14);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v17))
  {
    if ((v18 & 4) != 0)
      v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(&v17);
    else
      v5 = v17;
  }
  else
  {
    v5 = (uint64_t **)&i;
  }
  v15 = 0uLL;
  v16 = 0;
  sub_20BFE538C(&v15, *v5, v5[1], v5[1] - *v5);
  v6 = (void ***)sub_20BF4C2D8((uint64_t)&v17);
  v17 = (uint64_t **)&i;
  sub_20BEEB2B8(v6);
  if ((v14 & 7) != 0)
  {
    v9 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  for (i = v15; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
  {
    v11 = (_QWORD *)sub_20C023B14((uint64_t *)&i, v7, v8);
    sub_20C0B394C(a2, v11, &v17);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_20BFD265C(&v17);
  }
  *(_QWORD *)&i = &v15;
  sub_20BEEB2B8((void ***)&i);
}

void sub_20C100334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

void sub_20C1003C4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  __int128 *v5;
  void ***v6;
  uint64_t v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  __int128 i;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20C0D535C((unsigned int **)&v14);
  i = 0uLL;
  v13 = 0;
  v4 = sub_20C0A683C((uint64_t *)(a1 + 112));
  (*(void (**)(__int128 **__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v4 + 136))(&v17, v4, a2, &v14);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v17))
  {
    if ((v18 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(&v17);
    else
      v5 = v17;
  }
  else
  {
    v5 = &i;
  }
  v15 = 0uLL;
  v16 = 0;
  sub_20BFD6D38(&v15, *(_DWORD **)v5, *((_DWORD **)v5 + 1), (uint64_t)(*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 3);
  v6 = (void ***)sub_20BF4C2D8((uint64_t)&v17);
  v17 = &i;
  sub_20BFD6F90(v6);
  if ((v14 & 7) != 0)
  {
    v9 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  for (i = v15; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFD7240(&i))
  {
    v11 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&i, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, v11, &v17);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_20BFD265C(&v17);
  }
  *(_QWORD *)&i = &v15;
  sub_20BFD6F90((void ***)&i);
}

void sub_20C10054C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

void sub_20C1005DC(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  __int128 *v5;
  void ***v6;
  uint64_t v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  const pxrInternal__aapl__pxrReserved__::SdfPath *v11;
  __int128 i;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  sub_20C0D299C((unsigned int **)&v14);
  i = 0uLL;
  v13 = 0;
  v4 = sub_20C0A683C((uint64_t *)(a1 + 112));
  (*(void (**)(__int128 **__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v4 + 136))(&v17, v4, a2, &v14);
  if (sub_20C030FCC((pxrInternal__aapl__pxrReserved__::VtValue *)&v17))
  {
    if ((v18 & 4) != 0)
      v5 = (__int128 *)(*(uint64_t (**)(__int128 **))((v18 & 0xFFFFFFFFFFFFFFF8) + 168))(&v17);
    else
      v5 = v17;
  }
  else
  {
    v5 = &i;
  }
  v15 = 0uLL;
  v16 = 0;
  sub_20BFD6D38(&v15, *(_DWORD **)v5, *((_DWORD **)v5 + 1), (uint64_t)(*((_QWORD *)v5 + 1) - *(_QWORD *)v5) >> 3);
  v6 = (void ***)sub_20BF4C2D8((uint64_t)&v17);
  v17 = &i;
  sub_20BFD6F90(v6);
  if ((v14 & 7) != 0)
  {
    v9 = (unsigned int *)(v14 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  for (i = v15; (_QWORD)i != *((_QWORD *)&i + 1); sub_20BFD7240(&i))
  {
    v11 = (const pxrInternal__aapl__pxrReserved__::SdfPath *)sub_20BFD71C4((uint64_t *)&i, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendTarget(a2, v11, &v17);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v17);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v17 + 1);
    sub_20BFD265C(&v17);
  }
  *(_QWORD *)&i = &v15;
  sub_20BFD6F90((void ***)&i);
}

void sub_20C100764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

void sub_20C1007F4(uint64_t a1, pxrInternal__aapl__pxrReserved__::SdfPath *a2)
{
  uint64_t v4;
  uint64_t **v5;
  void ***v6;
  uint64_t v7;
  char *v8;
  unsigned int *v9;
  unsigned int v10;
  __int128 i;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  sub_20C0BE47C((unsigned int **)&v13);
  i = 0uLL;
  v12 = 0;
  v4 = sub_20C0A683C((uint64_t *)(a1 + 112));
  (*(void (**)(uint64_t ***__return_ptr, uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *, unint64_t *))(*(_QWORD *)v4 + 136))(&v16, v4, a2, &v13);
  if (sub_20BFD222C((pxrInternal__aapl__pxrReserved__::VtValue *)&v16))
  {
    if ((v17 & 4) != 0)
      v5 = (uint64_t **)(*(uint64_t (**)(uint64_t ***))((v17 & 0xFFFFFFFFFFFFFFF8) + 168))(&v16);
    else
      v5 = v16;
  }
  else
  {
    v5 = (uint64_t **)&i;
  }
  v14 = 0uLL;
  v15 = 0;
  sub_20BFE538C(&v14, *v5, v5[1], v5[1] - *v5);
  v6 = (void ***)sub_20BF4C2D8((uint64_t)&v16);
  v16 = (uint64_t **)&i;
  sub_20BEEB2B8(v6);
  if ((v13 & 7) != 0)
  {
    v9 = (unsigned int *)(v13 & 0xFFFFFFFFFFFFFFF8);
    do
      v10 = __ldxr(v9);
    while (__stlxr(v10 - 2, v9));
  }
  for (i = v14; (_QWORD)i != *((_QWORD *)&i + 1); sub_20C023C08(&i))
  {
    sub_20C023B14((uint64_t *)&i, v7, v8);
    pxrInternal__aapl__pxrReserved__::SdfPath::AppendExpression(a2, &v16);
    pxrInternal__aapl__pxrReserved__::SdfLayer::Traverse(a1, (pxrInternal__aapl__pxrReserved__::SdfAbstractData *)&v16);
    pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)&v16 + 1);
    sub_20BFD265C(&v16);
  }
  *(_QWORD *)&i = &v14;
  sub_20BEEB2B8((void ***)&i);
}

void sub_20C100978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C100A08(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
}

BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInert(pxrInternal__aapl__pxrReserved__::SdfLayer **this, const pxrInternal__aapl__pxrReserved__::SdfPath *a2, int a3, char a4)
{
  uint64_t *v8;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v9;
  uint64_t v10;
  int *v11;
  _BOOL8 v12;
  int v13;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unsigned int v18;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v19;
  uint64_t v20;
  int *v21;
  int v22;
  pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *v32;
  int v33;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v42;
  _QWORD *v43;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *v48;
  const pxrInternal__aapl__pxrReserved__::TfToken *v49;
  __int128 v50;
  int v51;
  __int128 i;
  uint64_t v53;
  const char *v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v8 = (uint64_t *)(this + 14);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(this[10], this[14], a2, &v50);
  if ((_QWORD)v50 == *((_QWORD *)&v50 + 1))
  {
    v12 = 1;
  }
  else
  {
    v9 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    if (!v9)
      v9 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
    LOBYTE(v51) = 0;
    v10 = sub_20C0A683C(v8);
    (*(void (**)(__int128 *__return_ptr, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)v10 + 136))(&i, v10, a2, (uint64_t)v9 + 64);
    if (sub_20BFB1AC0((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
    {
      if ((BYTE8(i) & 4) != 0)
        v11 = (int *)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
      else
        v11 = (int *)&i;
    }
    else
    {
      v11 = &v51;
    }
    v13 = *(unsigned __int8 *)v11;
    sub_20BF4C2D8((uint64_t)&i);
    if (v13)
      goto LABEL_10;
    v15 = sub_20C0A683C(v8);
    v18 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v15 + 96))(v15, a2);
    if (v18 == 6)
    {
      v19 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v19)
        v19 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v51 = 1;
      v20 = sub_20C0A683C(v8);
      (*(void (**)(__int128 *__return_ptr, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)v20 + 136))(&i, v20, a2, (uint64_t)v19 + 312);
      if (sub_20C0DE26C((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
        v21 = (BYTE8(i) & 4) != 0
            ? (int *)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i)
            : (int *)&i;
      else
        v21 = &v51;
      v22 = *v21;
      sub_20BF4C2D8((uint64_t)&i);
      if (v22 != 1)
        goto LABEL_10;
      v23 = (pxrInternal__aapl__pxrReserved__::SdfFieldKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      if (!v23)
        v23 = sub_20BFD40E4(&pxrInternal__aapl__pxrReserved__::SdfFieldKeys);
      v24 = sub_20C0A683C(v8);
      (*(void (**)(__int128 *__return_ptr, uint64_t, const pxrInternal__aapl__pxrReserved__::SdfPath *, uint64_t))(*(_QWORD *)v24 + 136))(&i, v24, a2, (uint64_t)v23 + 448);
      if (sub_20BFB5E50((pxrInternal__aapl__pxrReserved__::VtValue *)&i))
      {
        if ((BYTE8(i) & 4) != 0)
          v25 = (uint64_t *)(*(uint64_t (**)(__int128 *))((*((_QWORD *)&i + 1) & 0xFFFFFFFFFFFFFFF8) + 168))(&i);
        else
          v25 = (uint64_t *)&i;
        v26 = *v25;
        if ((*v25 & 7) != 0)
        {
          v27 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 2, v27));
          if ((v28 & 1) == 0)
            v26 &= 0xFFFFFFFFFFFFFFF8;
        }
      }
      else
      {
        v26 = 0;
      }
      sub_20BF4C2D8((uint64_t)&i);
      if ((v26 & 7) != 0)
      {
        v29 = (unsigned int *)(v26 & 0xFFFFFFFFFFFFFFF8);
        do
          v30 = __ldxr(v29);
        while (__stlxr(v30 - 2, v29));
      }
      if (v26)
      {
LABEL_10:
        v12 = 0;
        goto LABEL_11;
      }
    }
    if ((a4 & 1) != 0 || (v12 = 0, v18 != 1) && v18 != 8)
    {
      v12 = 0;
      if (v18 <= 0xB && ((1 << v18) & 0xD42) != 0)
      {
        v31 = (uint64_t)this[10] + 72 * v18;
        v32 = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition *)(v31 + 56);
        v33 = *(unsigned __int8 *)(v31 + 120);
        if (v33)
          v34 = v32;
        else
          v34 = 0;
        if (v33
          || (*(_QWORD *)&i = "sdf/layer.cpp",
              *((_QWORD *)&i + 1) = "_IsInert",
              v53 = 4623,
              v54 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_IsInert(const SdfPath &, BOOL, BOOL) const",
              v55 = 0,
              (pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&i, "specDefinition", 0) & 1) != 0))
        {
          for (i = v50; ; sub_20BFEF824(&i))
          {
            v12 = i == *((_QWORD *)&i + 1);
            if ((_QWORD)i == *((_QWORD *)&i + 1))
              goto LABEL_11;
            if (a3)
            {
              if (v18 == 6)
              {
                v37 = (_QWORD *)sub_20BFEF7A8((uint64_t *)&i, v16, v17);
                v38 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v38)
                  v38 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if ((*v37 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v38 + 4) & 0xFFFFFFFFFFFFFFF8))
                  continue;
                v41 = (_QWORD *)sub_20BFEF7A8((uint64_t *)&i, v35, v36);
                v42 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v42)
                  v42 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if ((*v41 & 0xFFFFFFFFFFFFFFF8) == (*((_QWORD *)v42 + 5) & 0xFFFFFFFFFFFFFFF8))
                  continue;
                v43 = (_QWORD *)sub_20BFEF7A8((uint64_t *)&i, v39, v40);
                v44 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v44)
                  v44 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                v45 = *v43 & 0xFFFFFFFFFFFFFFF8;
                v46 = *((_QWORD *)v44 + 8);
                goto LABEL_62;
              }
              if (v18 == 11)
              {
                v47 = (_QWORD *)sub_20BFEF7A8((uint64_t *)&i, v16, v17);
                v48 = (pxrInternal__aapl__pxrReserved__::SdfChildrenKeys_StaticTokenType *)atomic_load(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                if (!v48)
                  v48 = sub_20BFD416C(&pxrInternal__aapl__pxrReserved__::SdfChildrenKeys);
                v45 = *v47 & 0xFFFFFFFFFFFFFFF8;
                v46 = *((_QWORD *)v48 + 7);
LABEL_62:
                if (v45 == (v46 & 0xFFFFFFFFFFFFFFF8))
                  continue;
              }
            }
            v49 = (const pxrInternal__aapl__pxrReserved__::TfToken *)sub_20BFEF7A8((uint64_t *)&i, v16, v17);
            if (!pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField(v34, v49))goto LABEL_11;
          }
        }
        goto LABEL_10;
      }
    }
  }
LABEL_11:
  *(_QWORD *)&i = &v50;
  sub_20BEEB2B8((void ***)&i);
  return v12;
}

void sub_20C100E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_20BEEB2B8(&a12);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString(uint64_t a1, const char *a2, char *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  char v13;
  void *__p;
  char v15;
  _BYTE v16[96];

  v5 = *(uint64_t **)(a1 + 472);
  if (*((char *)v5 + 23) < 0)
    v5 = (uint64_t *)*v5;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Writing layer @%s@", a2, a3, v5);
  v9 = "sdf/layer.cpp";
  v10 = "ExportToString";
  v11 = 4720;
  v12 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::ExportToString(std::string *) const";
  v13 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v16, &__p, &v9);
  if (v15 < 0)
    operator delete(__p);
  v6 = sub_20BFCF6F4((uint64_t *)(a1 + 40));
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, void **))(*(_QWORD *)v6 + 88))(v6, a1, a2, &v9);
  if (SHIBYTE(v11) < 0)
    operator delete(v9);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v16);
  return v7;
}

void sub_20C100FCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  if (a16 < 0)
    operator delete(__p);
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a25);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(pxrInternal__aapl__pxrReserved__::SdfLayer *a1, const char *a2, char *a3, uint64_t *a4, uint64_t a5)
{
  std::string *v8;
  uint64_t *v10;
  uint64_t v11;
  std::string::size_type size;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  std::string *v20;
  uint64_t (*v21)(uint64_t *);
  char v22;
  const char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t (*v32)(uint64_t *);
  char v33;
  uint64_t v34;
  const char *v35;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v36;
  unint64_t v37;
  const char *v38;
  uint64_t (*v39)(uint64_t *);
  char v40;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v41;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v42;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v43;
  const char *v44;
  unsigned int *v45;
  unsigned int v46;
  unsigned int v47;
  unint64_t *Instance;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::string::size_type v54;
  uint64_t v55;
  int v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  unsigned __int8 *v60;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v61;
  unint64_t v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  const char *v67;
  const char *v68;
  __int128 v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  char v74;
  void *__p[2];
  uint64_t v76;
  _BYTE v77[96];

  v8 = (std::string *)a2;
  v10 = (uint64_t *)*((_QWORD *)a1 + 59);
  if (*((char *)v10 + 23) < 0)
    v10 = (uint64_t *)*v10;
  pxrInternal__aapl__pxrReserved__::TfStringPrintf((pxrInternal__aapl__pxrReserved__ *)"Writing layer @%s@", a2, a3, v10);
  v70 = "sdf/layer.cpp";
  v71 = "_WriteToFile";
  v72 = 4733;
  v73 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatConst"
        "Ptr, const FileFormatArguments &) const";
  v74 = 0;
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::TfScopeDescription(v77, __p, &v70);
  if (SHIBYTE(v76) < 0)
    operator delete(__p[0]);
  v11 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  if ((v11 & 0x80u) == 0)
    size = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  else
    size = v8->__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_95;
  v13 = *((_QWORD *)a1 + 59);
  v14 = *(unsigned __int8 *)(v13 + 47);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(v13 + 32);
  if (size == v14)
  {
    v18 = *(unsigned __int8 **)(v13 + 24);
    v16 = (unsigned __int8 *)(v13 + 24);
    v17 = v18;
    if (v15 >= 0)
      v19 = v16;
    else
      v19 = v17;
    if ((v11 & 0x80) != 0)
    {
      if (memcmp(v8->__r_.__value_.__l.__data_, v19, v8->__r_.__value_.__l.__size_))
        goto LABEL_23;
    }
    else if (*((_BYTE *)&v8->__r_.__value_.__s + 23))
    {
      v20 = v8;
      while (v20->__r_.__value_.__s.__data_[0] == *v19)
      {
        v20 = (std::string *)((char *)v20 + 1);
        ++v19;
        if (!--v11)
          goto LABEL_22;
      }
      goto LABEL_23;
    }
LABEL_22:
    if ((pxrInternal__aapl__pxrReserved__::SdfLayer::PermissionToSave(a1) & 1) == 0)
    {
      v70 = "sdf/layer.cpp";
      v71 = "_WriteToFile";
      v72 = 4740;
      v73 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatC"
            "onstPtr, const FileFormatArguments &) const";
      v74 = 0;
      if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v64 = (const char *)v8;
      else
        v64 = (const char *)v8->__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 3, (pxrInternal__aapl__pxrReserved__ *)"Cannot save layer @%s@, saving not allowed", v64);
      goto LABEL_95;
    }
  }
LABEL_23:
  v21 = sub_20C0E9DAC(a4);
  if (!(v22 & 1 | (unint64_t)v21))
  {
    pxrInternal__aapl__pxrReserved__::Sdf_GetExtension(v8);
    v23 = (const char *)HIBYTE(v72);
    if (v72 < 0)
      v23 = v71;
    if (v23)
    {
      __p[0] = 0;
      __p[1] = 0;
      v76 = 0;
      pxrInternal__aapl__pxrReserved__::SdfFileFormat::FindByExtension((uint64_t)&v70, (uint64_t)__p, (uint64_t *)&v69);
      v24 = (unsigned int *)a4[1];
      *(_OWORD *)a4 = v69;
      *((_QWORD *)&v69 + 1) = 0;
      if (v24)
      {
        v25 = v24 + 2;
        do
        {
          v26 = __ldxr(v25);
          v27 = v26 - 1;
        }
        while (__stlxr(v27, v25));
        if (!v27)
          (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 8))(v24);
        v28 = *((_QWORD *)&v69 + 1);
        *(_QWORD *)&v69 = 0;
        if (*((_QWORD *)&v69 + 1))
        {
          v29 = (unsigned int *)(*((_QWORD *)&v69 + 1) + 8);
          do
          {
            v30 = __ldxr(v29);
            v31 = v30 - 1;
          }
          while (__stlxr(v31, v29));
          if (!v31)
            (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
        }
      }
      else
      {
        *(_QWORD *)&v69 = 0;
      }
      if (SHIBYTE(v76) < 0)
        operator delete(__p[0]);
    }
    v32 = sub_20C0E9DAC(a4);
    if (!(v33 & 1 | (unint64_t)v32))
      sub_20BF2D298((uint64_t)a4, (uint64_t)a1 + 40);
    if (SHIBYTE(v72) < 0)
      operator delete(v70);
  }
  if (pxrInternal__aapl__pxrReserved__::Sdf_IsPackageOrPackagedLayer(a4, (uint64_t)v8))
  {
    v70 = "sdf/layer.cpp";
    v71 = "_WriteToFile";
    v72 = 4766;
    v73 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatCon"
          "stPtr, const FileFormatArguments &) const";
    v74 = 0;
    if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
    v34 = sub_20BFCF6F4(a4);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34))
      v35 = "package";
    else
      v35 = "packaged";
    v36 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(a4);
    v37 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v36) & 0xFFFFFFFFFFFFFFF8;
    if (v37)
    {
      v38 = (const char *)(v37 + 16);
      if (*(char *)(v37 + 39) < 0)
        v38 = *(const char **)v38;
    }
    else
    {
      v38 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot save layer @%s@: writing %s %s layer is not allowed through this API.", (const char *)v8, v35, v38);
    goto LABEL_95;
  }
  v39 = sub_20C0E9DAC(a4);
  if (!(v40 & 1 | (unint64_t)v39))
  {
    v70 = "sdf/layer.cpp";
    v71 = "_WriteToFile";
    v72 = 4770;
    v73 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatCon"
          "stPtr, const FileFormatArguments &) const";
    v74 = 0;
    if ((pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&v70, "fileFormat", 0) & 1) == 0)
    {
      v70 = "sdf/layer.cpp";
      v71 = "_WriteToFile";
      v72 = 4772;
      v73 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatC"
            "onstPtr, const FileFormatArguments &) const";
      v74 = 0;
      if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v68 = (const char *)v8;
      else
        v68 = (const char *)v8->__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 3, (pxrInternal__aapl__pxrReserved__ *)"Unknown file format when attempting to write '%s'", v68);
      goto LABEL_95;
    }
  }
  v41 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(a4);
  if (!pxrInternal__aapl__pxrReserved__::SdfFileFormat::SupportsWriting(v41))
  {
    v70 = "sdf/layer.cpp";
    v71 = "_WriteToFile";
    v72 = 4780;
    v73 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatCon"
          "stPtr, const FileFormatArguments &) const";
    v74 = 0;
    if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v8 = (std::string *)v8->__r_.__value_.__r.__words[0];
    v61 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(a4);
    v62 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v61) & 0xFFFFFFFFFFFFFFF8;
    if (v62)
    {
      v63 = (const char *)(v62 + 16);
      if (*(char *)(v62 + 39) < 0)
        v63 = *(const char **)v63;
    }
    else
    {
      v63 = "";
    }
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot save layer @%s@: %s file format does notsupport writing", (const char *)v8, v63);
    goto LABEL_95;
  }
  v42 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4(a4);
  if (pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetSchema(v42) != *((_QWORD *)a1 + 10))
  {
    sub_20BDDC0E4(&v70, "cross-schema-write-test");
    pxrInternal__aapl__pxrReserved__::SdfLayer::CreateAnonymous((uint64_t)&v70, a4, (uint64_t *)__p);
    if (SHIBYTE(v72) < 0)
      operator delete(v70);
    pxrInternal__aapl__pxrReserved__::TfErrorMark::TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v69);
    v43 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)__p);
    sub_20C0E82E8(&v70, (uint64_t)a1);
    pxrInternal__aapl__pxrReserved__::SdfLayer::TransferContent(v43, (uint64_t *)&v70);
    v44 = v71;
    if (v71)
    {
      v45 = (unsigned int *)(v71 + 8);
      do
      {
        v46 = __ldxr(v45);
        v47 = v46 - 1;
      }
      while (__stlxr(v47, v45));
      if (!v47)
        (*(void (**)(const char *))(*(_QWORD *)v44 + 8))(v44);
    }
    Instance = (unint64_t *)atomic_load(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    if (!Instance)
      Instance = (unint64_t *)pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_CreateInstance(&pxrInternal__aapl__pxrReserved__::TfSingleton<pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr>::_instance);
    v49 = v69;
    v50 = atomic_load(Instance + 18);
    if (v49 < v50
      && !pxrInternal__aapl__pxrReserved__::TfErrorMark::_IsCleanImpl((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v69, (pxrInternal__aapl__pxrReserved__::TfDiagnosticMgr *)Instance))
    {
      v70 = "sdf/layer.cpp";
      v71 = "_WriteToFile";
      v72 = 4799;
      v73 = "BOOL pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile(const string &, const string &, SdfFileFormatC"
            "onstPtr, const FileFormatArguments &) const";
      v74 = 0;
      if ((v8->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v67 = (const char *)v8;
      else
        v67 = (const char *)v8->__r_.__value_.__r.__words[0];
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v70, 3, (pxrInternal__aapl__pxrReserved__ *)"Failed attempting to write '%s' under a different schema.  If this is intended, TransferContent() to a temporary anonymous layer with the desired schema and handle the errors, then export that temporary layer", v67);
      pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v69);
      sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
      goto LABEL_95;
    }
    pxrInternal__aapl__pxrReserved__::TfErrorMark::~TfErrorMark((pxrInternal__aapl__pxrReserved__::TfErrorMark *)&v69);
    sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)__p);
  }
  v51 = sub_20BFCF6F4(a4);
  if ((*(unsigned int (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfLayer *, std::string *, char *, uint64_t))(*(_QWORD *)v51 + 64))(v51, a1, v8, a3, a5))
  {
    v52 = *((_QWORD *)a1 + 59);
    v53 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    if ((v53 & 0x80u) == 0)
      v54 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
    else
      v54 = v8->__r_.__value_.__l.__size_;
    v55 = *(unsigned __int8 *)(v52 + 47);
    v56 = (char)v55;
    if ((v55 & 0x80u) != 0)
      v55 = *(_QWORD *)(v52 + 32);
    if (v54 != v55)
      goto LABEL_103;
    v59 = *(unsigned __int8 **)(v52 + 24);
    v57 = (unsigned __int8 *)(v52 + 24);
    v58 = v59;
    if (v56 >= 0)
      v60 = v57;
    else
      v60 = v58;
    if ((v53 & 0x80) != 0)
    {
      if (memcmp(v8->__r_.__value_.__l.__data_, v60, v8->__r_.__value_.__l.__size_))
      {
LABEL_103:
        v65 = 1;
        goto LABEL_96;
      }
    }
    else if (*((_BYTE *)&v8->__r_.__value_.__s + 23))
    {
      while (v8->__r_.__value_.__s.__data_[0] == *v60)
      {
        v8 = (std::string *)((char *)v8 + 1);
        ++v60;
        if (!--v53)
          goto LABEL_102;
      }
      goto LABEL_103;
    }
LABEL_102:
    pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean(a1);
    goto LABEL_103;
  }
LABEL_95:
  v65 = 0;
LABEL_96:
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)v77);
  return v65;
}

void sub_20C101640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  pxrInternal__aapl__pxrReserved__::TfScopeDescription::~TfScopeDescription((pxrInternal__aapl__pxrReserved__::TfScopeDescription *)&a29);
  _Unwind_Resume(a1);
}

uint64_t pxrInternal__aapl__pxrReserved__::SdfLayer::Export(uint64_t *a1, const char *a2, char *a3, uint64_t a4)
{
  uint64_t v8;
  _BOOL4 IsSupportedExtension;
  BOOL v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unsigned int v17;
  BOOL v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v22;
  uint64_t v23;

  v8 = sub_20BFCF6F4(a1 + 5);
  IsSupportedExtension = pxrInternal__aapl__pxrReserved__::SdfFileFormat::IsSupportedExtension(v8, (uint64_t)a2);
  v10 = IsSupportedExtension;
  if (IsSupportedExtension)
  {
    v11 = a1[6];
    v22 = a1[5];
    v23 = v11;
    if (v11)
    {
      v12 = (unsigned int *)(v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
  }
  else
  {
    v22 = 0;
    v23 = 0;
  }
  v14 = pxrInternal__aapl__pxrReserved__::SdfLayer::_WriteToFile((pxrInternal__aapl__pxrReserved__::SdfLayer *)a1, a2, a3, &v22, a4);
  v15 = v23;
  if (v10)
  {
    if (!v23)
      return v14;
    v16 = (unsigned int *)(v23 + 8);
    do
    {
      v17 = __ldxr(v16);
      v18 = --v17 == 0;
    }
    while (__stlxr(v17, v16));
  }
  else
  {
    if (!v23)
      return v14;
    v19 = (unsigned int *)(v23 + 8);
    do
    {
      v20 = __ldxr(v19);
      v18 = --v20 == 0;
    }
    while (__stlxr(v20, v19));
  }
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return v14;
}

void sub_20C10180C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, unsigned int *a10)
{
  char v10;
  unsigned int *v12;
  unsigned int v13;
  BOOL v14;
  unsigned int *v15;
  unsigned int v16;

  if ((v10 & 1) != 0)
  {
    if (!a10)
      goto LABEL_12;
    v12 = a10 + 2;
    do
    {
      v13 = __ldxr(v12);
      v14 = --v13 == 0;
    }
    while (__stlxr(v13, v12));
  }
  else
  {
    if (!a10)
      goto LABEL_12;
    v15 = a10 + 2;
    do
    {
      v16 = __ldxr(v15);
      v14 = --v16 == 0;
    }
    while (__stlxr(v16, v15));
  }
  if (v14)
    (*(void (**)(unsigned int *))(*(_QWORD *)a10 + 8))(a10);
LABEL_12:
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20C101868()
{
  uint64_t *v0;
  void *__p[2];
  char v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  sub_20BEB59B0((uint64_t)&v8, (uint64_t)"Tf", (uint64_t)"TfType::Define");
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v0 = pxrInternal__aapl__pxrReserved__::TfType::Declare((__int128 *)__p, (char **)&v5, 0);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v5)
  {
    v6 = v5;
    operator delete(v5);
  }
  while (v9--)
    pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v8);
  return v0;
}

void sub_20C101924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (a15)
    operator delete(a15);
  sub_20BEB24F4(v16 - 32);
  _Unwind_Resume(a1);
}

tbb::queuing_rw_mutex::scoped_lock *sub_20C101968(tbb::queuing_rw_mutex::scoped_lock *this)
{
  if (*(_QWORD *)this)
    tbb::queuing_rw_mutex::scoped_lock::release((uint64_t)this);
  return this;
}

void sub_20C10199C()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
  __cxa_throw(exception, MEMORY[0x24BEDB740], MEMORY[0x24BEDABA8]);
}

uint64_t sub_20C1019D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C528670;
  sub_20C103234((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 16));
  return a1;
}

uint64_t sub_20C101A00(uint64_t a1)
{
  return sub_20C101A54(**(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), 0, (_QWORD *)(a1 + 16));
}

void sub_20C101A24(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  *a1 = (pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *)off_24C528670;
  sub_20C103234(a1 + 2);
  operator delete(a1);
}

uint64_t sub_20C101A54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, pxrInternal__aapl__pxrReserved__ *a3@<X2>, _QWORD *a4@<X8>)
{
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t *);
  char v12;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v13;
  unint64_t v14;
  const char *v15;
  const char *v16;
  char *v17;
  void *p_p;
  const char *v19;
  uint64_t (*v20)(uint64_t *);
  char v21;
  uint64_t v22;
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v32;
  uint64_t IsMuted;
  uint64_t v34;
  uint64_t *Resolver;
  void *v36;
  uint64_t v37;
  pxrInternal__aapl__pxrReserved__ *v38;
  uint64_t v39;
  _QWORD **v40;
  pxrInternal__aapl__pxrReserved__::SdfLayer *v41;
  uint64_t v42;
  const char *v43;
  uint64_t result;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v45;
  unint64_t v46;
  const char *v47;
  pxrInternal__aapl__pxrReserved__::SdfFileFormat *v48;
  unint64_t v49;
  const char *v50;
  uint64_t v51;
  const char *v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v59;
  uint64_t v60;
  int v61;
  void *__p;
  const char *v63;
  uint64_t v64;
  const char *v65;
  char v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  v8 = (const char *)(a2 + 96);
  std::operator+<char>();
  sub_20BF472E8((uint64_t)&v60, "Sdf", (char *)&__p);
  if (SHIBYTE(v64) < 0)
    operator delete(__p);
  if (sub_20BFCE180(3))
  {
    if (*(char *)(a2 + 119) >= 0)
      v9 = v8;
    else
      v9 = *(const char **)(a2 + 96);
    if (*(char *)(a2 + 71) >= 0)
      v10 = a2 + 48;
    else
      v10 = *(_QWORD *)(a2 + 48);
    v11 = sub_20C0E9DAC((_QWORD *)a2);
    if (v12 & 1 | (unint64_t)v11)
    {
      v13 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4((uint64_t *)a2);
      v14 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v13) & 0xFFFFFFFFFFFFFFF8;
      if (v14)
      {
        v15 = (const char *)(v14 + 16);
        if (*(char *)(v14 + 39) < 0)
          v15 = *(const char **)v15;
      }
      else
      {
        v15 = "";
      }
    }
    else
    {
      v15 = "unknown file format";
    }
    sub_20C0EECC0((_QWORD *)(a2 + 16));
    if (v64 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    v19 = "False";
    if ((_DWORD)a3)
      v19 = "True";
    pxrInternal__aapl__pxrReserved__::TfDebug::Helper::Msg((pxrInternal__aapl__pxrReserved__::TfDebug::Helper *)"SdfLayer::_OpenLayerAndUnlockRegistry('%s', '%s', '%s', '%s', metadataOnly=%s)\n", v16, v17, v9, v10, v15, p_p, v19);
    if (SHIBYTE(v64) < 0)
      operator delete(__p);
  }
  v20 = sub_20C0E9DAC((_QWORD *)a2);
  if (v21 & 1 | (unint64_t)v20)
  {
    v22 = sub_20BFCF6F4((uint64_t *)a2);
    pxrInternal__aapl__pxrReserved__::SdfFileFormat::NewLayer(v22, (uint64_t *)&v59);
    v23 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load(&qword_254985B38);
    if (!v23)
      v23 = sub_20C10317C(&qword_254985B38);
    v24 = *(_QWORD *)(sub_20C0EEAF8((uint64_t *)&v59) + 472);
    v25 = sub_20C0EEAF8((uint64_t *)&v59);
    pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Find(v23, v24, (void **)(*(_QWORD *)(v25 + 472) + 24), &v57);
    if (!sub_20C1020E4(&v57, &v59))
    {
      __p = "sdf/layer.cpp";
      v63 = "_OpenLayerAndUnlockRegistry";
      v64 = 3337;
      v65 = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_OpenLayerAndUnlockRegistry(Lock &, const "
            "_FindOrOpenLayerInfo &, BOOL) [Lock = tbb::queuing_rw_mutex::scoped_lock]";
      v66 = 0;
      v55 = *(uint64_t **)(sub_20C0EEAF8((uint64_t *)&v59) + 472);
      if (*((char *)v55 + 23) < 0)
        v55 = (uint64_t *)*v55;
      v56 = pxrInternal__aapl__pxrReserved__::Tf_VerifyStringFormat((pxrInternal__aapl__pxrReserved__ *)"Could not find %s", v53, v54, v55);
      pxrInternal__aapl__pxrReserved__::Tf_FailedVerifyHelper((uint64_t)&__p, "_layerRegistry->Find(layer->GetIdentifier(), layer->GetResolvedPath()) == layer", v56);
    }
    v26 = v58;
    if (v58)
    {
      v27 = (unsigned int *)(v58 + 8);
      do
      {
        v28 = __ldxr(v27);
        v29 = v28 - 1;
      }
      while (__stlxr(v29, v27));
      if (!v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
    }
    tbb::queuing_rw_mutex::scoped_lock::release(a1);
    v30 = *(unsigned __int8 *)(a2 + 40);
    v31 = sub_20C0EEAF8((uint64_t *)&v59);
    if (v30 == pxrInternal__aapl__pxrReserved__::Sdf_IsAnonLayerIdentifier(*(_QWORD *)(v31 + 472)))
    {
      v32 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v59);
      IsMuted = pxrInternal__aapl__pxrReserved__::SdfLayer::IsMuted(v32);
      if ((IsMuted & 1) != 0
        || (v34 = sub_20C0EEAF8((uint64_t *)&v59),
            IsMuted = pxrInternal__aapl__pxrReserved__::SdfLayer::_Read(v34, (uint64_t)v8, (std::string *)(a2 + 72), a3),
            (IsMuted & 1) != 0))
      {
        if (!*(_BYTE *)(a2 + 40))
        {
          Resolver = pxrInternal__aapl__pxrReserved__::ArGetResolver((pxrInternal__aapl__pxrReserved__ *)IsMuted);
          pxrInternal__aapl__pxrReserved__::ArResolver::GetModificationTimestamp((uint64_t)Resolver);
          v63 = (char *)&off_24C524518 + 1;
          __p = v36;
          v37 = sub_20C0EEAF8((uint64_t *)&v59);
          sub_20BFD3C3C((_QWORD *)(v37 + 480), &__p);
          sub_20BF4C2D8((uint64_t)&__p);
        }
        v38 = (pxrInternal__aapl__pxrReserved__ *)sub_20C0EEAF8((uint64_t *)&v59);
        pxrInternal__aapl__pxrReserved__::Sdf_ComputeExternalAssetModificationTimestamps(v38, (pxrInternal__aapl__pxrReserved__::VtDictionary *)&__p);
        v39 = sub_20C0EEAF8((uint64_t *)&v59);
        v40 = (_QWORD **)__p;
        __p = 0;
        sub_20BF49F14((_QWORD ***)(v39 + 496), v40);
        sub_20BF49F14((_QWORD ***)&__p, 0);
        v41 = (pxrInternal__aapl__pxrReserved__::SdfLayer *)sub_20C0EEAF8((uint64_t *)&v59);
        pxrInternal__aapl__pxrReserved__::SdfLayer::_MarkCurrentStateAsClean(v41);
        v42 = sub_20C0EEAF8((uint64_t *)&v59);
        *(_WORD *)(v42 + 465) = 257;
        atomic_store(1u, (unsigned __int8 *)(v42 + 464));
        *a4 = v59;
        v59 = 0;
        goto LABEL_59;
      }
    }
    else if (*(_BYTE *)(a2 + 40))
    {
      __p = "sdf/layer.cpp";
      v63 = "_OpenLayerAndUnlockRegistry";
      v64 = 3351;
      v65 = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_OpenLayerAndUnlockRegistry(Lock &, const "
            "_FindOrOpenLayerInfo &, BOOL) [Lock = tbb::queuing_rw_mutex::scoped_lock]";
      v66 = 0;
      if (*(char *)(a2 + 119) < 0)
        v8 = *(const char **)(a2 + 96);
      v45 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4((uint64_t *)a2);
      v46 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v45) & 0xFFFFFFFFFFFFFFF8;
      if (v46)
      {
        v47 = (const char *)(v46 + 16);
        if (*(char *)(v46 + 39) < 0)
          v47 = *(const char **)v47;
      }
      else
      {
        v47 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Opened anonymous layer ('%s' with format id '%s') but resulting layer is not anonymous.", v8, v47);
    }
    else
    {
      __p = "sdf/layer.cpp";
      v63 = "_OpenLayerAndUnlockRegistry";
      v64 = 3358;
      v65 = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_OpenLayerAndUnlockRegistry(Lock &, const "
            "_FindOrOpenLayerInfo &, BOOL) [Lock = tbb::queuing_rw_mutex::scoped_lock]";
      v66 = 0;
      if (*(char *)(a2 + 119) < 0)
        v8 = *(const char **)(a2 + 96);
      v48 = (pxrInternal__aapl__pxrReserved__::SdfFileFormat *)sub_20BFCF6F4((uint64_t *)a2);
      v49 = *(_QWORD *)pxrInternal__aapl__pxrReserved__::SdfFileFormat::GetFormatId(v48) & 0xFFFFFFFFFFFFFFF8;
      if (v49)
      {
        v50 = (const char *)(v49 + 16);
        if (*(char *)(v49 + 39) < 0)
          v50 = *(const char **)v50;
      }
      else
      {
        v50 = "";
      }
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Opened layer without anonymous prefix ('%s' with format id '%s') but resulting layer is anonymous.", v8, v50);
    }
    v51 = sub_20C0EEAF8((uint64_t *)&v59);
    *(_WORD *)(v51 + 465) = 256;
    atomic_store(1u, (unsigned __int8 *)(v51 + 464));
    *a4 = 0;
LABEL_59:
    result = (uint64_t)sub_20C103234(&v59);
    goto LABEL_60;
  }
  __p = "sdf/layer.cpp";
  v63 = "_OpenLayerAndUnlockRegistry";
  v64 = 3320;
  v65 = "static SdfLayerRefPtr pxrInternal__aapl__pxrReserved__::SdfLayer::_OpenLayerAndUnlockRegistry(Lock &, const _Fin"
        "dOrOpenLayerInfo &, BOOL) [Lock = tbb::queuing_rw_mutex::scoped_lock]";
  v66 = 0;
  if (*(char *)(a2 + 119) >= 0)
    v43 = v8;
  else
    v43 = *(const char **)(a2 + 96);
  pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&__p, 1, (pxrInternal__aapl__pxrReserved__ *)"Cannot determine file format for @%s@", v43);
  result = tbb::queuing_rw_mutex::scoped_lock::release(a1);
  *a4 = 0;
LABEL_60:
  while (v61--)
    result = pxrInternal__aapl__pxrReserved__::TfMallocTag::_End(v60);
  return result;
}

void sub_20C101FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned int *a15, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  unsigned int *v27;
  unsigned int v28;
  unsigned int v29;

  if (a15)
  {
    v27 = a15 + 2;
    do
    {
      v28 = __ldxr(v27);
      v29 = v28 - 1;
    }
    while (__stlxr(v29, v27));
    if (!v29)
      (*(void (**)(unsigned int *))(*(_QWORD *)a15 + 8))(a15);
  }
  sub_20C103234(&a16);
  sub_20BEB24F4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

BOOL sub_20C1020E4(_QWORD *a1, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;

  v3 = a1 + 1;
  if (!a1[1])
    return *a2 == 0;
  v5 = sub_20BEB47BC(a1 + 1);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5))
    return *a2 == 0;
  if (!*v3)
    return 0;
  v6 = sub_20BEB47BC(v3);
  result = 0;
  if (*(_BYTE *)(v6 + 14) && *a1)
    return *a1 == *a2;
  return result;
}

uint64_t sub_20C102178(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  sub_20BF4C2D8(a1 + 192);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*(void **)(a1 + 168));
  if (*(char *)(a1 + 167) < 0)
    operator delete(*(void **)(a1 + 144));
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  sub_20BDE9D48(a1 + 16, *(_QWORD **)(a1 + 24));
  v2 = *(unsigned int **)(a1 + 8);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_20C102238(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v1;

  v1 = *((_QWORD *)a1 + 1);
  if (!v1)
    return 0;
  if (!strcmp((const char *)(*(_QWORD *)(*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFF8) + 8) & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020CAAFCB4 & 0x7FFFFFFFFFFFFFFFLL)))return 1;
  if ((v1 & 4) == 0)
    return 0;
  return pxrInternal__aapl__pxrReserved__::VtValue::_TypeIsImpl(a1, &stru_24C5245D0);
}

uint64_t sub_20C1022B0(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  pxrInternal__aapl__pxrReserved__::VtValue *v2;
  uint64_t v4;
  uint64_t result;

  v2 = a2;
  if (sub_20BFB5E50(a2))
  {
    v4 = *((_QWORD *)v2 + 1);
    if ((v4 & 4) != 0)
      v2 = (pxrInternal__aapl__pxrReserved__::VtValue *)(*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v4 & 0xFFFFFFFFFFFFFFF8) + 168))(v2);
    sub_20BF32220(*(_QWORD **)(a1 + 8), v2);
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(v2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t sub_20C102330(uint64_t a1, pxrInternal__aapl__pxrReserved__::VtValue *a2)
{
  uint64_t *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;

  if (sub_20BFB5E50(a2))
  {
    sub_20C1023FC(a2, &v10);
    v4 = *(uint64_t **)(a1 + 8);
    if (&v10 == v4)
    {
      if ((v10 & 7) != 0)
      {
        v7 = (unsigned int *)(v10 & 0xFFFFFFFFFFFFFFF8);
        do
          v8 = __ldxr(v7);
        while (__stlxr(v8 - 2, v7));
      }
    }
    else
    {
      if ((*v4 & 7) != 0)
      {
        v5 = (unsigned int *)(*v4 & 0xFFFFFFFFFFFFFFF8);
        do
          v6 = __ldxr(v5);
        while (__stlxr(v6 - 2, v5));
      }
      *v4 = v10;
    }
    return 1;
  }
  else
  {
    result = sub_20C0AA3E8(a2);
    if ((_DWORD)result)
    {
      result = 1;
      *(_BYTE *)(a1 + 24) = 1;
    }
    else
    {
      *(_BYTE *)(a1 + 25) = 1;
    }
  }
  return result;
}

uint64_t *sub_20C1023FC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  *a2 = 0;
  result = sub_20C102484(a1);
  v5 = *result;
  *result = 0;
  *a2 = v5;
  v6 = a1[1];
  if (v6)
    v7 = (a1[1] & 3) == 3;
  else
    v7 = 1;
  if (!v7)
    result = (uint64_t *)(*(uint64_t (**)(_QWORD *))((v6 & 0xFFFFFFFFFFFFFFF8) + 32))(a1);
  a1[1] = 0;
  return result;
}

_QWORD *sub_20C102484(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[3];

  v4[2] = *MEMORY[0x24BDAC8D0];
  v2 = a1[1];
  if ((v2 & 4) != 0)
  {
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))((v2 & 0xFFFFFFFFFFFFFFF8) + 176))(v4, a1);
    sub_20BF4B5D8(a1, v4);
    sub_20BF4C2D8((uint64_t)v4);
  }
  return a1;
}

uint64_t sub_20C102510(uint64_t a1, __int128 *a2, char a3)
{
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = off_24C5293F8;
  v5 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_20BDDBFAC((_BYTE *)v5, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v5 = v6;
  }
  *(_BYTE *)(a1 + 32) = a3;
  return a1;
}

void sub_20C102570(_Unwind_Exception *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfNotice::Base *v1;

  pxrInternal__aapl__pxrReserved__::SdfNotice::Base::~Base(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C102584@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = (_QWORD *)sub_20C102684((uint64_t)a1);
  if ((_DWORD)result)
  {
    v5 = *a1;
    v8 = 0;
    (*(void (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v5 + 72))(v5, a2, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  return result;
}

void sub_20C102634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_20C021740(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C102684(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 423;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfReferenceType"
            "Policy>::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfReferenceTypePolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

_QWORD *sub_20C1026F8@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = (_QWORD *)sub_20C1027F8((uint64_t)a1);
  if ((_DWORD)result)
  {
    v5 = *a1;
    v8 = 0;
    (*(void (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v5 + 72))(v5, a2, v7);
    result = v8;
    if (v8 == v7)
    {
      v6 = 4;
      result = v7;
    }
    else
    {
      if (!v8)
        return result;
      v6 = 5;
    }
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
  }
  return result;
}

void sub_20C1027A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void ***a13)
{
  void ***v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  ((void (*)(void))(*v14)[v15])();
LABEL_6:
  sub_20C021818(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20C1027F8(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listEditorProxy.h";
    v2[1] = "_Validate";
    v2[2] = 423;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListEditorProxy<pxrInternal__aapl__pxrReserved__::SdfPayloadTypePo"
            "licy>::_Validate() const [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfPayloadTypePolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

void sub_20C10286C(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C5286E8;
  sub_20BFD7C28(a1 + 16, *(_QWORD **)(a1 + 24));
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 8));
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor((pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *)a1);
  operator delete(v2);
}

uint64_t sub_20C1028AC(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v6 = (uint64_t *)(a1 + 8);
  v7 = sub_20C0A683C((uint64_t *)(a1 + 8));
  if (!(*(unsigned int (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v7 + 72))(v7, a3)|| (v8 = sub_20C0A683C(v6), v9 = (*(uint64_t (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)v8 + 96))(v8, a3), v9 != (*(unsigned int (**)(uint64_t, pxrInternal__aapl__pxrReserved__::SdfPath *))(*(_QWORD *)a2 + 96))(a2, a3)))
  {
    sub_20C0A7BE0((uint64_t **)(a1 + 16), a3, a3);
  }
  return 1;
}

void sub_20C102948(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C528730;
  sub_20BFD7C28((uint64_t)a1 + 16, *((_QWORD **)a1 + 3));
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor(a1);
  operator delete(v2);
}

uint64_t sub_20C102980(uint64_t a1, uint64_t a2, pxrInternal__aapl__pxrReserved__::SdfPath *a3)
{
  if (((*(uint64_t (**)(_QWORD, pxrInternal__aapl__pxrReserved__::SdfPath *))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), a3) & 1) == 0)sub_20C0A7BE0((uint64_t **)(a1 + 16), a3, a3);
  return 1;
}

void sub_20C1029D0(pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor *a1)
{
  void *v2;

  *(_QWORD *)a1 = off_24C528778;
  sub_20C102F0C((uint64_t)a1 + 24, *((_QWORD **)a1 + 4));
  pxrInternal__aapl__pxrReserved__::SdfAbstractDataSpecVisitor::~SdfAbstractDataSpecVisitor(a1);
  operator delete(v2);
}

uint64_t sub_20C102A08(uint64_t a1, const pxrInternal__aapl__pxrReserved__::SdfSchemaBase *a2, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const pxrInternal__aapl__pxrReserved__::TfToken *v10;
  const pxrInternal__aapl__pxrReserved__::TfToken *v11;
  void **v12;
  uint64_t *v13;
  const pxrInternal__aapl__pxrReserved__::TfToken *v14;
  void **v15;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *FieldDefinition;
  _QWORD *FallbackValue;
  void **v25;
  void **v26;
  _QWORD v27[3];
  unsigned int v28;
  uint64_t v29;
  std::type_info v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)(*(_QWORD *)(a1 + 8) + 80), *(const pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)(*(_QWORD *)(a1 + 8) + 112), a3, v27);
  pxrInternal__aapl__pxrReserved__::SdfLayer::_ListFields(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)(a1 + 16), a2, a3, &v25);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(v6 + 80);
  if (v8 == v7
    || (v9 = sub_20C0A683C((uint64_t *)(v6 + 112)),
        ((*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *))(*(_QWORD *)v9 + 72))(v9, a3) & 1) != 0))
  {
    v10 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v27[0];
    v11 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v27[1];
    while (v10 != v11)
    {
      v12 = v25;
      if (v25 != v26)
      {
        while (((unint64_t)*v12 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v10 & 0xFFFFFFFFFFFFFFF8))
        {
          if (++v12 == v26)
          {
            v12 = v26;
            break;
          }
        }
      }
      if (v12 == v26)
      {
        v13 = *(uint64_t **)(a1 + 8);
        v30.__type_name = 0;
        pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>(v13, a3, v10, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v30, 0, 1);
        sub_20BF4C2D8((uint64_t)&v30);
      }
      v10 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v10 + 8);
    }
    v14 = (const pxrInternal__aapl__pxrReserved__::TfToken *)v25;
    v15 = v26;
    if (v25 != v26)
    {
      do
      {
        v16 = *(pxrInternal__aapl__pxrReserved__::SdfSchemaBase **)(a1 + 16);
        v30.__type_name = 0;
        v28 = 0;
        if (((*(uint64_t (**)(const pxrInternal__aapl__pxrReserved__::SdfSchemaBase *, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *, const pxrInternal__aapl__pxrReserved__::TfToken *, std::type_info *, unsigned int *))(*(_QWORD *)a2 + 128))(a2, a3, v14, &v30, &v28) & 1) == 0)
        {
          if (v28)
          {
            v17 = (_QWORD *)*((_QWORD *)v16 + 116);
            v18 = (_QWORD *)*((_QWORD *)v16 + 117);
            if (v17 != v18)
            {
              while ((*v17 & 0xFFFFFFFFFFFFFFF8) != (*(_QWORD *)v14 & 0xFFFFFFFFFFFFFFF8))
              {
                if (++v17 == v18)
                  goto LABEL_18;
              }
              if (*((_BYTE *)v16 + 72 * v28 + 120))
              {
                if (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::SpecDefinition::IsRequiredField((pxrInternal__aapl__pxrReserved__::SdfSchemaBase *)((char *)v16 + 72 * v28 + 56), v14))
                {
                  FieldDefinition = (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::GetFieldDefinition(v16, v14);
                  if (FieldDefinition)
                  {
                    FallbackValue = (_QWORD *)pxrInternal__aapl__pxrReserved__::SdfSchemaBase::FieldDefinition::GetFallbackValue(FieldDefinition);
                    sub_20BF4A9BC(&v30, FallbackValue);
                  }
                }
              }
            }
          }
        }
LABEL_18:
        pxrInternal__aapl__pxrReserved__::SdfLayer::GetField(*(pxrInternal__aapl__pxrReserved__::SdfLayer **)(a1 + 8), a3, v14, (pxrInternal__aapl__pxrReserved__::VtValue *)&v28);
        if ((pxrInternal__aapl__pxrReserved__::SdfUnregisteredValue::operator==((pxrInternal__aapl__pxrReserved__::VtValue *)&v28, &v30, v19) & 1) == 0)
        {
          if (v8 == v7
            || v29
            || (v20 = sub_20C0A683C((uint64_t *)(*(_QWORD *)(a1 + 8) + 112)),
                v21 = (*(uint64_t (**)(uint64_t, const pxrInternal__aapl__pxrReserved__::SdfAbstractData *))(*(_QWORD *)v20 + 96))(v20, a3), (pxrInternal__aapl__pxrReserved__::SdfSchemaBase::IsValidFieldForSpec(v8, v14, v21) & 1) != 0))
          {
            pxrInternal__aapl__pxrReserved__::SdfLayer::_PrimSetField<pxrInternal__aapl__pxrReserved__::VtValue>(*(uint64_t **)(a1 + 8), a3, v14, (const pxrInternal__aapl__pxrReserved__::VtValue *)&v30, (pxrInternal__aapl__pxrReserved__::VtValue *)&v28, 1);
          }
          else
          {
            sub_20C102D54((uint64_t **)(a1 + 24), (uint64_t *)v14, (uint64_t *)v14, a3);
          }
        }
        sub_20BF4C2D8((uint64_t)&v28);
        sub_20BF4C2D8((uint64_t)&v30);
        v14 = (const pxrInternal__aapl__pxrReserved__::TfToken *)((char *)v14 + 8);
      }
      while (v14 != (const pxrInternal__aapl__pxrReserved__::TfToken *)v15);
    }
  }
  v30.__vftable = (std::type_info_vtbl *)&v25;
  sub_20BEEB2B8((void ***)&v30);
  v25 = (void **)v27;
  sub_20BEEB2B8(&v25);
  return 1;
}

void sub_20C102CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  sub_20BEEB2B8(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_20C102D54(uint64_t **a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v7 = (uint64_t **)sub_20BF1E63C((uint64_t)a1, &v13, a2);
  v8 = *v7;
  if (!*v7)
  {
    v9 = v7;
    v8 = (uint64_t *)operator new(0x30uLL);
    v11[1] = a1 + 1;
    sub_20C102E08((uint64_t)(v8 + 4), a3, a4);
    v12 = 1;
    sub_20BDDE1B4(a1, v13, v9, v8);
    v11[0] = 0;
    sub_20C102E78((uint64_t)v11, 0);
  }
  return v8;
}

uint64_t sub_20C102E08(uint64_t a1, uint64_t *a2, _DWORD *a3)
{
  uint64_t v5;
  unsigned int *v6;
  unsigned int v7;

  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v5 & 7) != 0)
  {
    v6 = (unsigned int *)(v5 & 0xFFFFFFFFFFFFFFF8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 2, v6));
    if ((v7 & 1) == 0)
      *(_QWORD *)a1 &= 0xFFFFFFFFFFFFFFF8;
  }
  sub_20BFD6E54((_DWORD *)(a1 + 8), a3);
  sub_20BFD6EA4((_DWORD *)(a1 + 12), a3 + 1);
  return a1;
}

void sub_20C102E78(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C102EBC((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

_DWORD *sub_20C102EBC(uint64_t a1)
{
  _DWORD *result;
  unsigned int *v3;
  unsigned int v4;

  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL((_DWORD *)(a1 + 12));
  result = sub_20BFD265C((_DWORD *)(a1 + 8));
  if ((*(_QWORD *)a1 & 7) != 0)
  {
    v3 = (unsigned int *)(*(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8);
    do
      v4 = __ldxr(v3);
    while (__stlxr(v4 - 2, v3));
  }
  return result;
}

void sub_20C102F0C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C102F0C(a1, *a2);
    sub_20C102F0C(a1, a2[1]);
    sub_20C102EBC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void pxrInternal__aapl__pxrReserved__::SdfSpec::~SdfSpec(pxrInternal__aapl__pxrReserved__::SdfSpec *this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_QWORD *)this;
  if (*(_QWORD *)this)
  {
    v2 = *(_QWORD *)(v1 + 16);
    do
    {
      v3 = __ldaxr((unsigned int *)v1);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, (unsigned int *)v1));
    if (!v4)
      pxrInternal__aapl__pxrReserved__::Sdf_Identity::_UnregisterOrDelete(v2, (_DWORD *)v1);
  }
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C102F9C(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C102FC8(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

void sub_20C102FF4(uint64_t a1, uint64_t a2)
{
  void **v3;

  if (a2)
  {
    sub_20BF4C2D8(a2 + 144);
    if (*(char *)(a2 + 143) < 0)
      operator delete(*(void **)(a2 + 120));
    if (*(char *)(a2 + 119) < 0)
      operator delete(*(void **)(a2 + 96));
    if (*(char *)(a2 + 95) < 0)
      operator delete(*(void **)(a2 + 72));
    v3 = (void **)(a2 + 48);
    sub_20BDE9EB0(&v3);
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    operator delete((void *)a2);
  }
}

unint64_t sub_20C10308C(unint64_t *a1)
{
  _QWORD *v2;
  void *v3;

  v2 = operator new(0x18uLL);
  v3 = v2;
  v2[2] = 0;
  v2[1] = 0;
  *v2 = v2 + 1;
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  sub_20C1030F8((uint64_t)v2, (_QWORD *)v2[1]);
  operator delete(v3);
  return atomic_load(a1);
}

void sub_20C1030F8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_20C1030F8(a1, *a2);
    sub_20C1030F8(a1, a2[1]);
    sub_20C103140((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_20C103140(uint64_t a1)
{
  sub_20C0EA270((pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *sub_20C10317C(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *result;
  void *v4;

  result = sub_20C1031C4();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    v4 = (void *)sub_20C103204((uint64_t)result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *sub_20C1031C4()
{
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry *)operator new(0x78uLL);
  pxrInternal__aapl__pxrReserved__::Sdf_LayerRegistry::Sdf_LayerRegistry(v0);
  return v0;
}

void sub_20C1031F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C103204(uint64_t a1)
{
  sub_20BF462BC(a1 + 80);
  sub_20BF462BC(a1 + 40);
  return sub_20BF462BC(a1);
}

pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **sub_20C103234(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a1)
{
  sub_20BF1D8F4((int)a1, *a1);
  return a1;
}

pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *sub_20C103260(unint64_t *a1)
{
  pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *result;
  void *v4;

  result = sub_20C1032A8();
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)result, a1))
      return result;
  }
  __clrex();
  if (result)
  {
    pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType::~SdfTextFileFormatTokens_StaticTokenType(result);
    operator delete(v4);
  }
  return (pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *)atomic_load(a1);
}

pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *sub_20C1032A8()
{
  pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *v0;

  v0 = (pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType *)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::SdfTextFileFormatTokens_StaticTokenType::SdfTextFileFormatTokens_StaticTokenType(v0);
  return v0;
}

void sub_20C1032D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20C1032E8(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;

  sub_20BDDC1C8(a1, (uint64_t)"< ", 2);
  v6 = (_QWORD *)*a2;
  v4 = a2 + 1;
  v5 = v6;
  if (v6 != v4)
  {
    do
    {
      v7 = sub_20BDDC1C8(a1, (uint64_t)"<", 1);
      v8 = *((char *)v5 + 55);
      if (v8 >= 0)
        v9 = (uint64_t)(v5 + 4);
      else
        v9 = v5[4];
      if (v8 >= 0)
        v10 = *((unsigned __int8 *)v5 + 55);
      else
        v10 = v5[5];
      v11 = sub_20BDDC1C8(v7, v9, v10);
      v12 = sub_20BDDC1C8(v11, (uint64_t)": ", 2);
      v13 = *((char *)v5 + 79);
      if (v13 >= 0)
        v14 = (uint64_t)(v5 + 7);
      else
        v14 = v5[7];
      if (v13 >= 0)
        v15 = *((unsigned __int8 *)v5 + 79);
      else
        v15 = v5[8];
      v16 = sub_20BDDC1C8(v12, v14, v15);
      sub_20BDDC1C8(v16, (uint64_t)"> ", 2);
      v17 = (_QWORD *)v5[1];
      if (v17)
      {
        do
        {
          v18 = v17;
          v17 = (_QWORD *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          v18 = (_QWORD *)v5[2];
          v19 = *v18 == (_QWORD)v5;
          v5 = v18;
        }
        while (!v19);
      }
      v5 = v18;
    }
    while (v18 != v4);
  }
  sub_20BDDC1C8(a1, (uint64_t)">", 1);
  return a1;
}

uint64_t sub_20C103414(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 48 * a3;
    do
    {
      sub_20BDEC064((uint64_t **)a1, v4, a2, (__int128 *)a2);
      a2 += 6;
      v6 -= 48;
    }
    while (v6);
  }
  return a1;
}

void sub_20C10347C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDE9D48(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_20C103494@<X0>(uint64_t a1@<X0>, pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  const pxrInternal__aapl__pxrReserved__::TfRefBase *v6;
  pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter *v7;
  BOOL v8;

  v5 = *(_QWORD *)(a1 + 8);
  result = a1 + 8;
  if (!v5
    || ((result = sub_20BEB47BC((uint64_t *)result),
         v7 = *(pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter **)a1,
         *(_BYTE *)(result + 14))
      ? (v8 = v7 == 0)
      : (v8 = 1),
        v8
     || (result = pxrInternal__aapl__pxrReserved__::Tf_RefPtr_UniqueChangedCounter::AddRefIfNonzero(v7, v6),
         (result & 1) == 0)))
  {
    v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t *sub_20C1034E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_20BEB5AD8((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

void sub_20C10358C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 8);
  if (v3)
    sub_20C96B408(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1035A4(pxrInternal__aapl__pxrReserved__::VtValue *a1)
{
  uint64_t v2;

  if ((sub_20BFED488(a1) & 1) == 0)
    return pxrInternal__aapl__pxrReserved__::VtValue::_FailGet((uint64_t)a1, (void (*)(void **__return_ptr))sub_20C10360C, (uint64_t)&stru_24C524DB0);
  v2 = *((_QWORD *)a1 + 1);
  if ((v2 & 4) != 0)
    return (*(uint64_t (**)(pxrInternal__aapl__pxrReserved__::VtValue *))((v2 & 0xFFFFFFFFFFFFFFF8) + 168))(a1);
  else
    return *(_QWORD *)a1;
}

uint64_t sub_20C103610@<X0>(uint64_t a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath *v2;
  pxrInternal__aapl__pxrReserved__::SdfAssetPath *v4[2];

  sub_20C103660(v4);
  v2 = v4[1];
  *(pxrInternal__aapl__pxrReserved__::SdfAssetPath **)a1 = v4[0];
  *(_QWORD *)(a1 + 8) = v2;
  v4[0] = 0;
  *(_QWORD *)(a1 + 16) = &stru_24C524DB0;
  return ((uint64_t (*)(_QWORD))v2)(0);
}

void sub_20C103660(pxrInternal__aapl__pxrReserved__::SdfAssetPath **a1@<X8>)
{
  pxrInternal__aapl__pxrReserved__::SdfAssetPath *v2;

  v2 = (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)operator new(0x30uLL);
  pxrInternal__aapl__pxrReserved__::SdfAssetPath::SdfAssetPath(v2);
  *a1 = v2;
  a1[1] = (pxrInternal__aapl__pxrReserved__::SdfAssetPath *)sub_20C1036AC;
}

void sub_20C103698(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20C1036AC(void **__p)
{
  if (__p)
  {
    if (*((char *)__p + 47) < 0)
      operator delete(__p[3]);
    if (*((char *)__p + 23) < 0)
      operator delete(*__p);
    operator delete(__p);
  }
}

void sub_20C1036F8(std::__shared_weak_count *a1)
{
  void *v1;

  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete(v1);
}

uint64_t sub_20C10370C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20C103724(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C528800))
    return a1 + 24;
  else
    return 0;
}

void sub_20C103764(unsigned int *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t *WhyNot;
  const char *v9;
  char *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  char v14;
  void *__p[2];
  char v16;
  char v17;

  if (sub_20C1038CC((uint64_t)a1))
  {
    if (!a3 && *a4 == a4[1])
    {
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)a1 + 32))(__p, *(_QWORD *)a1, a1[4]);
      if (v17)
      {
        v10 = "sdf/listProxy.h";
        v11 = "_Edit";
        v12 = 750;
        v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolic"
              "y>::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfS"
              "ubLayerTypePolicy]";
        v14 = 0;
        WhyNot = pxrInternal__aapl__pxrReserved__::SdfAllowed::GetWhyNot((uint64_t *)__p);
        if (*((char *)WhyNot + 23) >= 0)
          v9 = (const char *)WhyNot;
        else
          v9 = (const char *)*WhyNot;
        pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Editing list: %s", v9);
        if (v17 && v16 < 0)
          operator delete(__p[0]);
      }
    }
    else if (((*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t, _QWORD *))(**(_QWORD **)a1 + 80))(*(_QWORD *)a1, a1[4], a2, a3, a4) & 1) == 0)
    {
      v10 = "sdf/listProxy.h";
      v11 = "_Edit";
      v12 = 758;
      v13 = "void pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>"
            "::_Edit(size_t, size_t, const value_vector_type &) [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy]";
      v14 = 0;
      pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)&v10, 1, (pxrInternal__aapl__pxrReserved__ *)"Inserting invalid value into list editor");
    }
  }
}

void sub_20C1038A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a21)
  {
    if (a20 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20C1038CC(uint64_t a1)
{
  _QWORD v2[4];
  char v3;

  if (!*(_QWORD *)a1)
    return 0;
  if (pxrInternal__aapl__pxrReserved__::SdfSpec::IsDormant((pxrInternal__aapl__pxrReserved__::Sdf_Identity **)(*(_QWORD *)a1 + 8)))
  {
    v2[0] = "sdf/listProxy.h";
    v2[1] = "_Validate";
    v2[2] = 689;
    v2[3] = "BOOL pxrInternal__aapl__pxrReserved__::SdfListProxy<pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy>"
            "::_Validate() [_TypePolicy = pxrInternal__aapl__pxrReserved__::SdfSubLayerTypePolicy]";
    v3 = 0;
    pxrInternal__aapl__pxrReserved__::Tf_PostErrorHelper((uint64_t)v2, 1, (pxrInternal__aapl__pxrReserved__ *)"Accessing expired list editor");
    return 0;
  }
  return 1;
}

_QWORD *sub_20C103940(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &unk_24C528820;
  v2 = (unsigned int *)a1[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_20C10399C(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *__p = &unk_24C528820;
  v2 = (unsigned int *)__p[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  operator delete(__p);
}

char *sub_20C1039F8(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &unk_24C528820;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t sub_20C103A54(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *(_QWORD *)a2 = &unk_24C528820;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_20C103A90(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    v2 = (unsigned int *)(result + 8);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C103AC0(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)__p[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  operator delete(__p);
}

uint64_t sub_20C103B0C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a1 + 16);
}

uint64_t sub_20C103B1C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5288B8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C103B58()
{
  return &unk_24C5288B8;
}

_QWORD *sub_20C103B64(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &unk_24C5288E0;
  v2 = (unsigned int *)a1[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_20C103BC0(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *__p = &unk_24C5288E0;
  v2 = (unsigned int *)__p[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  operator delete(__p);
}

char *sub_20C103C1C(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &unk_24C5288E0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t sub_20C103C78(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *(_QWORD *)a2 = &unk_24C5288E0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_20C103CB4(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    v2 = (unsigned int *)(result + 8);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C103CE4(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)__p[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  operator delete(__p);
}

uint64_t sub_20C103D30(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 8))(a1 + 16, a2, *a3);
}

uint64_t sub_20C103D44(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C528960))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C103D80()
{
  return &unk_24C528960;
}

void sub_20C103D8C(void ***a1)
{
  void **v1;
  _DWORD *v2;
  _DWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 5;
        sub_20C103E10((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *sub_20C103E10(uint64_t a1, _DWORD *a2)
{
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 3);
  sub_20BFD265C(a2 + 2);
  pxrInternal__aapl__pxrReserved__::Sdf_Pool<pxrInternal__aapl__pxrReserved__::Sdf_PathPropTag,24u,8u,16384u>::Handle::operator BOOL(a2 + 1);
  return sub_20BFD265C(a2);
}

_QWORD *sub_20C103E50(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &unk_24C528988;
  v2 = (unsigned int *)a1[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_20C103EAC(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *__p = &unk_24C528988;
  v2 = (unsigned int *)__p[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  operator delete(__p);
}

char *sub_20C103F08(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &unk_24C528988;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t sub_20C103F64(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *(_QWORD *)a2 = &unk_24C528988;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_20C103FA0(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    v2 = (unsigned int *)(result + 8);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C103FD0(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)__p[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  operator delete(__p);
}

uint64_t sub_20C10401C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a1 + 16);
}

uint64_t sub_20C10402C(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C5289E8))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C104068()
{
  return &unk_24C5289E8;
}

_QWORD *sub_20C104074(_QWORD *a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *a1 = &unk_24C528A10;
  v2 = (unsigned int *)a1[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void sub_20C1040D0(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  *__p = &unk_24C528A10;
  v2 = (unsigned int *)__p[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  operator delete(__p);
}

char *sub_20C10412C(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unsigned int *v4;
  unsigned int v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &unk_24C528A10;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unsigned int *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t sub_20C104188(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int v4;

  *(_QWORD *)a2 = &unk_24C528A10;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unsigned int *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t sub_20C1041C4(uint64_t a1)
{
  uint64_t result;
  unsigned int *v2;
  unsigned int v3;
  unsigned int v4;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    v2 = (unsigned int *)(result + 8);
    do
    {
      v3 = __ldxr(v2);
      v4 = v3 - 1;
    }
    while (__stlxr(v4, v2));
    if (!v4)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_20C1041F4(_QWORD *__p)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = (unsigned int *)__p[3];
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 8))(v2);
  }
  operator delete(__p);
}

uint64_t sub_20C104240(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 8))(a1 + 16, a2, *a3);
}

uint64_t sub_20C104254(uint64_t a1, uint64_t a2)
{
  if (sub_20BDE150C(a2, (uint64_t)&unk_24C528A70))
    return a1 + 8;
  else
    return 0;
}

void *sub_20C104290()
{
  return &unk_24C528A70;
}

uint64_t sub_20C10429C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t Size;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  v3 = a1 + 32;
  v4 = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::Sdf_Children(a1 + 32, a2);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize(v4);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize(v3);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_PrimChildPolicy>::GetSize(v3);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = Size;
  return a1;
}

void sub_20C1042F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFE6A54(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20C104310(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  _BOOL4 v7;
  uint64_t v8;
  _BOOL4 v9;
  uint64_t Size;
  uint64_t v11;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a1 + 48;
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::Sdf_Children(a1 + 48, a2);
  v5 = (_BYTE *)(a1 + 128);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_20BDDBFAC(v5, *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)v5 = v6;
  }
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 104);
  v7 = sub_20BFE6C04(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize(v4);
  if (v7)
    v8 = v4;
  else
    v8 = 0;
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = 0;
  v9 = sub_20BFE6C04(v4);
  Size = pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize(v4);
  pxrInternal__aapl__pxrReserved__::Sdf_Children<pxrInternal__aapl__pxrReserved__::Sdf_VariantSetChildPolicy>::GetSize(v4);
  if (v9)
    v11 = v4;
  else
    v11 = 0;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = Size;
  return a1;
}

void sub_20C1043D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BFE6D38(v1);
  _Unwind_Resume(a1);
}

void **sub_20C104400(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  void **result;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void **v11;
  __int128 v12;

  result = (void **)a2;
  if (a1 != a2)
  {
    do
    {
      v7 = a1 + 24;
      if (a1 + 24 == a2)
        return (void **)a2;
      v8 = sub_20BEB4EF8(a3, a1, a1 + 24);
      a1 = v7;
    }
    while (!v8);
    v9 = v7 + 24;
    v10 = v7 - 24;
    if (v9 == a2)
    {
      v11 = (void **)v10;
    }
    else
    {
      do
      {
        if ((sub_20BEB4EF8(a3, v10, v9) & 1) != 0)
        {
          v11 = (void **)v10;
        }
        else
        {
          v11 = (void **)(v10 + 24);
          if ((char)v10[47] < 0)
            operator delete(*v11);
          v12 = *(_OWORD *)v9;
          *((_QWORD *)v10 + 5) = *((_QWORD *)v9 + 2);
          *(_OWORD *)v11 = v12;
          v9[23] = 0;
          *v9 = 0;
          v10 += 24;
        }
        v9 += 24;
      }
      while (v9 != a2);
    }
    return v11 + 3;
  }
  return result;
}

unint64_t sub_20C1044E0()
{
  _OWORD *v0;
  std::string *v1;
  unsigned __int8 *v2;
  std::string *v3;
  void **v5;
  void *v7[2];
  char v8;
  void *__p[2];
  char v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;

  v0 = operator new(0x38uLL);
  *v0 = 0u;
  v0[1] = 0u;
  v0[2] = 0u;
  *((_BYTE *)v0 + 48) = 0;
  v1 = (std::string *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_INCLUDE_DETACHED);
  if (!v1)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::SDF_LAYER_INCLUDE_DETACHED);
    v1 = (std::string *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_INCLUDE_DETACHED);
  }
  sub_20BDDC0E4(__p, ",");
  pxrInternal__aapl__pxrReserved__::TfStringSplit(v1, (char *)__p, (uint64_t *)&v11);
  if (v10 < 0)
    operator delete(__p[0]);
  v2 = sub_20C1046FC(v11, v12, "*");
  if (v2 == v12)
  {
    if (v11 != v2)
      pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::Include((uint64_t)v0, (uint64_t)&v11);
  }
  else
  {
    *((_BYTE *)v0 + 48) = 1;
    sub_20BDE5078((uint64_t *)v0);
  }
  v3 = (std::string *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_EXCLUDE_DETACHED);
  if (!v3)
  {
    pxrInternal__aapl__pxrReserved__::Tf_InitializeEnvSetting<std::string>((uint64_t)&pxrInternal__aapl__pxrReserved__::SDF_LAYER_EXCLUDE_DETACHED);
    v3 = (std::string *)atomic_load((unint64_t *)pxrInternal__aapl__pxrReserved__::SDF_LAYER_EXCLUDE_DETACHED);
  }
  sub_20BDDC0E4(v7, ",");
  pxrInternal__aapl__pxrReserved__::TfStringSplit(v3, (char *)v7, (uint64_t *)__p);
  if (v8 < 0)
    operator delete(v7[0]);
  if (__p[0] != __p[1])
    pxrInternal__aapl__pxrReserved__::SdfLayer::DetachedLayerRules::Exclude((uint64_t)v0, (uint64_t)__p);
  v7[0] = __p;
  sub_20BDE5038((void ***)v7);
  __p[0] = &v11;
  sub_20BDE5038((void ***)__p);
  while (!__ldaxr(&qword_254985B40))
  {
    if (!__stlxr((unint64_t)v0, &qword_254985B40))
      return (unint64_t)v0;
  }
  __clrex();
  v5 = sub_20C0FA578((void **)v0);
  operator delete(v5);
  return atomic_load(&qword_254985B40);
}

void sub_20C104694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, char a19)
{
  a16 = &a19;
  sub_20BDE5038((void ***)&a16);
  _Unwind_Resume(a1);
}

void sub_20C1046E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  JUMPOUT(0x20C1046DCLL);
}

unsigned __int8 *sub_20C1046FC(unsigned __int8 *a1, unsigned __int8 *a2, char *__s)
{
  unsigned __int8 *v3;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v6 = strlen(__s);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            sub_20BEB9180();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, __s, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

unint64_t sub_20C1047AC(unint64_t *a1)
{
  char **v2;
  char **v3;

  v2 = (char **)operator new(0x18uLL);
  v3 = v2;
  v2[2] = 0;
  v2[1] = 0;
  *v2 = (char *)(v2 + 1);
  while (!__ldaxr(a1))
  {
    if (!__stlxr((unint64_t)v2, a1))
      return (unint64_t)v3;
  }
  __clrex();
  sub_20BDECAB8((uint64_t)v2, v2[1]);
  operator delete(v3);
  return atomic_load(a1);
}

uint64_t *sub_20C104818(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_20C10486C(a1, *a2, a2 + 1);
  return a1;
}

void sub_20C104854(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20BDECAB8(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_20C10486C(uint64_t *result, const void **a2, const void ***a3)
{
  const void **v4;
  uint64_t **v5;
  uint64_t *v6;
  const void **v7;
  const void ***v8;
  BOOL v9;

  if (a2 != (const void **)a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = sub_20BE7AA28(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = (const void ***)v7;
          v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (const void ***)v4[2];
          v9 = *v8 == v4;
          v4 = (const void **)v8;
        }
        while (!v9);
      }
      v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_20C1048F0(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_20BDDE084((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_20C104998((uint64_t)a1, a4, (uint64_t)v10);
    sub_20BDDE1B4(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_20C104A28((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_20C104998@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_20BDDBFAC(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_20C104A10(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20C104A28(v1, 0);
  _Unwind_Resume(a1);
}

void sub_20C104A28(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_20C103140((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t *sub_20C104A6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v13;

  v3 = *a2;
  *a1 = *a2;
  a1[1] = 0;
  if (v3)
  {
    sub_20BEB5AD8((unint64_t *)(v3 + 16), &v13);
    v4 = (unsigned int *)a1[1];
    a1[1] = v13;
    v13 = 0;
    if (v4)
    {
      v5 = v4 + 2;
      do
      {
        v6 = __ldxr(v5);
        v7 = v6 - 1;
      }
      while (__stlxr(v7, v5));
      if (!v7)
        (*(void (**)(unsigned int *))(*(_QWORD *)v4 + 8))(v4);
      v8 = v13;
      if (v13)
      {
        v9 = (unsigned int *)(v13 + 8);
        do
        {
          v10 = __ldxr(v9);
          v11 = v10 - 1;
        }
        while (__stlxr(v11, v9));
        if (!v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
    }
  }
  return a1;
}

